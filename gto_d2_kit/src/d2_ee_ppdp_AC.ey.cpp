/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdp_AC.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1121_13(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C137061 = ae * be;
    const double C137060 = ae + be;
    const double C137059 = 0 * be;
    const double C137058 = xA - xB;
    const double C137085 = 0 * ce;
    const double C137084 = ce * de;
    const double C137083 = 0 * de;
    const double C137082 = ce + de;
    const double C137081 = 0 * de;
    const double C137080 = xC - xD;
    const double C137135 = yC - yD;
    const double C137142 = zC - zD;
    const double C137154 = 0 * de;
    const double C137174 = 0 * ce;
    const double C137170 = 0 * de;
    const double C137201 = 0 * de;
    const double C137219 = 0 * ce;
    const double C137215 = 0 * de;
    const double C137279 = yA - yB;
    const double C137286 = zA - zB;
    const double C137304 = 0 * be;
    const double C137320 = 0 * be;
    const double C137330 = p + q;
    const double C137329 = p * q;
    const double C137335 = xP - xQ;
    const double C137334 = bs[2];
    const double C137344 = ae * ce;
    const double C137340 = bs[3];
    const double C137353 = bs[4];
    const double C137374 = bs[5];
    const double C137416 = bs[6];
    const double C137477 = yP - yQ;
    const double C137535 = zP - zQ;
    const double C107 = bs[0];
    const double C137062 = std::pow(C137060, 2);
    const double C139294 = 2 * C137060;
    const double C137063 = C137061 * C137058;
    const double C139285 = std::pow(C137058, 2);
    const double C139560 = C137058 * be;
    const double C139559 = C137058 * ae;
    const double C137090 = C137085 / C137082;
    const double C137087 = 2 * C137082;
    const double C137086 = std::pow(C137082, 2);
    const double C137336 = C137082 * C137060;
    const double C137089 = C137084 * C137080;
    const double C137088 = C137080 * C137083;
    const double C139299 = C137080 * de;
    const double C139298 = C137080 * ce;
    const double C139297 = std::pow(C137080, 2);
    const double C137155 = C137084 * C137135;
    const double C139342 = std::pow(C137135, 2);
    const double C139356 = C137135 * de;
    const double C139355 = C137135 * ce;
    const double C137202 = C137084 * C137142;
    const double C139368 = std::pow(C137142, 2);
    const double C139380 = C137142 * de;
    const double C139379 = C137142 * ce;
    const double C137171 = C137135 * C137154;
    const double C137179 = C137174 / C137082;
    const double C137216 = C137142 * C137201;
    const double C137224 = C137219 / C137082;
    const double C137305 = C137061 * C137279;
    const double C139444 = std::pow(C137279, 2);
    const double C139584 = C137279 * be;
    const double C139582 = C137279 * ae;
    const double C137321 = C137061 * C137286;
    const double C139459 = std::pow(C137286, 2);
    const double C139585 = C137286 * be;
    const double C139583 = C137286 * ae;
    const double C137331 = 2 * C137329;
    const double C137345 = C137335 * ae;
    const double C137343 = std::pow(C137335, 2);
    const double C137341 = C137335 * ce;
    const double C137480 = C137335 * C137477;
    const double C137479 = C137477 * ce;
    const double C137595 = C137477 * C137335;
    const double C137594 = C137477 * ae;
    const double C137649 = std::pow(C137477, 2);
    const double C137538 = C137335 * C137535;
    const double C137537 = C137535 * ce;
    const double C137674 = C137477 * C137535;
    const double C137696 = C137535 * C137335;
    const double C137695 = C137535 * ae;
    const double C137750 = C137535 * C137477;
    const double C137771 = std::pow(C137535, 2);
    const double C137064 = 2 * C137062;
    const double C139561 = std::pow(C139294, -1);
    const double C139286 = C139285 * C137061;
    const double C139307 = std::pow(C137087, -1);
    const double C139569 = std::pow(C137087, -2);
    const double C137091 = 2 * C137086;
    const double C139568 = 4 * C137086;
    const double C137092 = C137088 / C137082;
    const double C139300 = C139297 * C137084;
    const double C139343 = C139342 * C137084;
    const double C139369 = C139368 * C137084;
    const double C137176 = C137171 / C137082;
    const double C137221 = C137216 / C137082;
    const double C139445 = C139444 * C137061;
    const double C139460 = C139459 * C137061;
    const double C137333 = C137331 / C137330;
    const double C125 =
        (-((std::pow(xP - xQ, 2) * bs[2] * std::pow(C137331 / C137330, 2) -
            (bs[1] * C137331) / C137330) *
           ae * ce) /
         C137082) /
        C137060;
    const double C108 = -(C137335 * bs[1] * C137331) / C137330;
    const double C832 = -(C137477 * bs[1] * C137331) / C137330;
    const double C1700 = -(C137535 * bs[1] * C137331) / C137330;
    const double C137348 = C137340 * C137345;
    const double C137359 = C137353 * C137345;
    const double C137383 = C137374 * C137345;
    const double C137431 = C137416 * C137345;
    const double C113 = (-(bs[1] * C137345 * C137331) / C137330) / C137060;
    const double C137355 = C137343 * C137353;
    const double C137378 = C137343 * C137374;
    const double C137425 = C137343 * C137416;
    const double C137347 = C137340 * C137341;
    const double C137356 = C137353 * C137341;
    const double C137379 = C137374 * C137341;
    const double C137427 = C137416 * C137341;
    const double C116 = (bs[1] * C137341 * C137331) / (C137330 * C137082);
    const double C137482 = C137480 * ae;
    const double C137481 = C137340 * C137479;
    const double C137487 = C137353 * C137479;
    const double C137494 = C137374 * C137479;
    const double C137510 = C137416 * C137479;
    const double C182 = (bs[1] * C137479 * C137331) / (C137330 * C137082);
    const double C137597 = C137595 * ae;
    const double C137596 = C137340 * C137594;
    const double C137602 = C137353 * C137594;
    const double C137609 = C137374 * C137594;
    const double C137625 = C137416 * C137594;
    const double C308 = (-(bs[1] * C137594 * C137331) / C137330) / C137060;
    const double C137651 = C137649 * C137353;
    const double C137656 = C137649 * C137374;
    const double C137661 = C137649 * C137416;
    const double C137540 = C137538 * ae;
    const double C137539 = C137340 * C137537;
    const double C137545 = C137353 * C137537;
    const double C137552 = C137374 * C137537;
    const double C137568 = C137416 * C137537;
    const double C245 = (bs[1] * C137537 * C137331) / (C137330 * C137082);
    const double C137675 = C137674 * ae;
    const double C137698 = C137696 * ae;
    const double C137697 = C137340 * C137695;
    const double C137703 = C137353 * C137695;
    const double C137710 = C137374 * C137695;
    const double C137726 = C137416 * C137695;
    const double C555 = (-(bs[1] * C137695 * C137331) / C137330) / C137060;
    const double C137751 = C137750 * ae;
    const double C137773 = C137771 * C137353;
    const double C137778 = C137771 * C137374;
    const double C137783 = C137771 * C137416;
    const double C139287 = C139286 / C137060;
    const double C137097 = C137083 / C137091;
    const double C137095 = C137081 / C137091;
    const double C137173 = C137154 / C137091;
    const double C137177 = C137170 / C137091;
    const double C137218 = C137201 / C137091;
    const double C137222 = C137215 / C137091;
    const double C137094 = 0 - C137092;
    const double C139301 = C139300 / C137082;
    const double C139344 = C139343 / C137082;
    const double C139370 = C139369 / C137082;
    const double C137180 = 0 - C137176;
    const double C137225 = 0 - C137221;
    const double C139446 = C139445 / C137060;
    const double C139461 = C139460 / C137060;
    const double C137337 = std::pow(C137333, 2);
    const double C137339 = -C137333;
    const double C137354 = std::pow(C137333, 4);
    const double C137417 = std::pow(C137333, 6);
    const double C137484 = C137482 * ce;
    const double C137599 = C137597 * ce;
    const double C137542 = C137540 * ce;
    const double C137676 = C137675 * ce;
    const double C137700 = C137698 * ce;
    const double C137752 = C137751 * ce;
    const double C139288 = -C139287;
    const double C137099 = C137094 * ce;
    const double C139302 = -C139301;
    const double C139345 = -C139344;
    const double C139371 = -C139370;
    const double C137183 = C137180 * ce;
    const double C137228 = C137225 * ce;
    const double C139447 = -C139446;
    const double C139462 = -C139461;
    const double C137342 = C137334 * C137337;
    const double C126 =
        (-(C137337 * C137334 * C137335 * ae * ce) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137335 * ce) / C137336 -
        (C137335 *
         (C137334 * C137337 +
          std::pow(C137335, 2) * bs[3] * std::pow(-C137333, 3)) *
         ae * ce) /
            C137336;
    const double C188 =
        (-(C137337 * C137334 * C137335 * (yP - yQ) * ae * ce) / C137082) /
        C137060;
    const double C251 =
        (-(C137337 * C137334 * C137335 * (zP - zQ) * ae * ce) / C137082) /
        C137060;
    const double C314 =
        (-(C137337 * C137334 * C137477 * C137335 * ae * ce) / C137082) /
        C137060;
    const double C394 = (-((std::pow(C137477, 2) * C137334 * C137337 -
                            (bs[1] * C137331) / C137330) *
                           C137344) /
                         C137082) /
                        C137060;
    const double C474 =
        (-(C137337 * C137334 * C137477 * C137535 * ae * ce) / C137082) /
        C137060;
    const double C561 =
        (-(C137337 * C137334 * C137535 * C137335 * ae * ce) / C137082) /
        C137060;
    const double C641 =
        (-(C137337 * C137334 * C137535 * C137477 * ae * ce) / C137082) /
        C137060;
    const double C719 = (-((std::pow(C137535, 2) * C137334 * C137337 -
                            (bs[1] * C137331) / C137330) *
                           C137344) /
                         C137082) /
                        C137060;
    const double C114 = (C137335 * C137337 * C137334 * C137345) / C137060 -
                        (ae * bs[1] * C137331) / (C137330 * C137060);
    const double C117 = (ce * bs[1] * C137331) / (C137330 * C137082) -
                        (C137335 * C137337 * C137334 * C137341) / C137082;
    const double C183 = -(C137335 * C137337 * C137334 * C137479) / C137082;
    const double C246 = -(C137335 * C137337 * C137334 * C137537) / C137082;
    const double C309 = (C137335 * C137337 * C137334 * C137594) / C137060;
    const double C556 = (C137335 * C137337 * C137334 * C137695) / C137060;
    const double C839 = -(C137477 * C137337 * C137334 * C137341) / C137082;
    const double C840 = (C137477 * C137337 * C137334 * C137345) / C137060;
    const double C927 = (ce * bs[1] * C137331) / (C137330 * C137082) -
                        (C137477 * C137337 * C137334 * C137479) / C137082;
    const double C1011 = -(C137477 * C137337 * C137334 * C137537) / C137082;
    const double C1094 = (C137477 * C137337 * C137334 * C137594) / C137060 -
                         (ae * bs[1] * C137331) / (C137330 * C137060);
    const double C1396 = (C137477 * C137337 * C137334 * C137695) / C137060;
    const double C1707 = -(C137535 * C137337 * C137334 * C137341) / C137082;
    const double C1708 = (C137535 * C137337 * C137334 * C137345) / C137060;
    const double C1794 = -(C137535 * C137337 * C137334 * C137479) / C137082;
    const double C1879 = (ce * bs[1] * C137331) / (C137330 * C137082) -
                         (C137535 * C137337 * C137334 * C137537) / C137082;
    const double C1962 = (C137535 * C137337 * C137334 * C137594) / C137060;
    const double C2264 = (C137535 * C137337 * C137334 * C137695) / C137060 -
                         (ae * bs[1] * C137331) / (C137330 * C137060);
    const double C137346 = std::pow(C137339, 3);
    const double C137375 = std::pow(C137339, 5);
    const double C137363 = C137354 * C137359;
    const double C137362 = C137354 * C137356;
    const double C137361 = C137355 * C137354;
    const double C137373 = C137353 * C137354;
    const double C137489 = C137354 * C137487;
    const double C137547 = C137354 * C137545;
    const double C137604 = C137354 * C137602;
    const double C137652 = C137651 * C137354;
    const double C137705 = C137354 * C137703;
    const double C137774 = C137773 * C137354;
    const double C137439 = C137417 * C137431;
    const double C137436 = C137417 * C137427;
    const double C137435 = C137425 * C137417;
    const double C137515 = C137417 * C137510;
    const double C137573 = C137417 * C137568;
    const double C137630 = C137417 * C137625;
    const double C137663 = C137661 * C137417;
    const double C137731 = C137417 * C137726;
    const double C137785 = C137783 * C137417;
    const double C137486 = C137353 * C137484;
    const double C137492 = C137374 * C137484;
    const double C137508 = C137416 * C137484;
    const double C137601 = C137353 * C137599;
    const double C137607 = C137374 * C137599;
    const double C137623 = C137416 * C137599;
    const double C137544 = C137353 * C137542;
    const double C137550 = C137374 * C137542;
    const double C137566 = C137416 * C137542;
    const double C137678 = C137353 * C137676;
    const double C137681 = C137374 * C137676;
    const double C137684 = C137416 * C137676;
    const double C137702 = C137353 * C137700;
    const double C137708 = C137374 * C137700;
    const double C137724 = C137416 * C137700;
    const double C137754 = C137353 * C137752;
    const double C137757 = C137374 * C137752;
    const double C137760 = C137416 * C137752;
    const double C139289 = std::exp(C139288);
    const double C137102 = C137099 / C137082;
    const double C139303 = std::exp(C139302);
    const double C139346 = std::exp(C139345);
    const double C139372 = std::exp(C139371);
    const double C137185 = C137183 / C137082;
    const double C137230 = C137228 / C137082;
    const double C139448 = std::exp(C139447);
    const double C139463 = std::exp(C139462);
    const double C109 = C137342 * C137343 - (bs[1] * C137331) / C137330;
    const double C829 = C137477 * C137335 * C137342;
    const double C1697 = C137535 * C137335 * C137342;
    const double C2570 = C137342 * C137649 - (bs[1] * C137331) / C137330;
    const double C3891 = C137535 * C137477 * C137342;
    const double C4656 = C137342 * C137771 - (bs[1] * C137331) / C137330;
    const double C137350 = C137346 * C137348;
    const double C137349 = C137346 * C137347;
    const double C137352 = C137340 * C137346;
    const double C137483 = C137346 * C137481;
    const double C137541 = C137346 * C137539;
    const double C137598 = C137346 * C137596;
    const double C137699 = C137346 * C137697;
    const double C189 =
        (-(C137335 * C137346 * C137340 * C137335 * C137477 * ae * ce) /
         C137082) /
            C137060 -
        (ae * C137337 * C137334 * C137477 * ce) / C137336;
    const double C252 =
        (-(C137335 * C137346 * C137340 * C137335 * C137535 * ae * ce) /
         C137082) /
            C137060 -
        (ae * C137337 * C137334 * C137535 * ce) / C137336;
    const double C315 =
        (-(C137335 * C137346 * C137340 * C137477 * C137335 * ae * ce) /
         C137082) /
            C137060 -
        (C137337 * C137334 * C137477 * ae * ce) / C137336;
    const double C395 =
        (-(C137335 * (C137342 + std::pow(C137477, 2) * C137340 * C137346) *
           C137344) /
         C137082) /
        C137060;
    const double C475 =
        (-(C137335 * C137346 * C137340 * C137477 * C137535 * ae * ce) /
         C137082) /
        C137060;
    const double C476 =
        (-(C137354 * C137353 * C137676 * C137343) / C137082) / C137060 -
        (C137346 * C137340 * C137676) / C137336;
    const double C562 =
        (-(C137335 * C137346 * C137340 * C137535 * C137335 * ae * ce) /
         C137082) /
            C137060 -
        (C137337 * C137334 * C137535 * ae * ce) / C137336;
    const double C642 =
        (-(C137335 * C137346 * C137340 * C137535 * C137477 * ae * ce) /
         C137082) /
        C137060;
    const double C643 =
        (-(C137354 * C137353 * C137752 * C137343) / C137082) / C137060 -
        (C137346 * C137340 * C137752) / C137336;
    const double C720 =
        (-(C137335 * (C137342 + std::pow(C137535, 2) * C137340 * C137346) *
           C137344) /
         C137082) /
        C137060;
    const double C846 =
        (-(C137477 * (C137342 + C137343 * C137340 * C137346) * C137344) /
         C137082) /
        C137060;
    const double C932 =
        (-(C137477 * C137346 * C137340 * C137484) / C137082) / C137060 -
        (C137337 * C137334 * C137345 * ce) / C137336;
    const double C1016 =
        (-(C137477 * C137346 * C137340 * C137542) / C137082) / C137060;
    const double C1098 =
        (-(C137477 * C137346 * C137340 * C137599) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137341) / C137336;
    const double C1195 =
        (-(C137337 * C137334 * C137594 * ce) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137479) / C137336 -
        (C137477 * (C137342 + C137649 * C137340 * C137346) * C137344) / C137336;
    const double C1301 =
        (-(C137477 * C137346 * C137340 * C137676) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137537) / C137336;
    const double C1400 =
        (-(C137477 * C137346 * C137340 * C137700) / C137082) / C137060;
    const double C1497 =
        (-(C137477 * C137346 * C137340 * C137752) / C137082) / C137060 -
        (C137337 * C137334 * C137695 * ce) / C137336;
    const double C1602 =
        (-(C137477 * (C137342 + C137771 * C137340 * C137346) * C137344) /
         C137082) /
        C137060;
    const double C1714 =
        (-(C137535 * (C137342 + C137343 * C137340 * C137346) * C137344) /
         C137082) /
        C137060;
    const double C1799 =
        (-(C137535 * C137346 * C137340 * C137484) / C137082) / C137060;
    const double C1884 =
        (-(C137535 * C137346 * C137340 * C137542) / C137082) / C137060 -
        (C137337 * C137334 * C137345 * ce) / C137336;
    const double C1966 =
        (-(C137535 * C137346 * C137340 * C137599) / C137082) / C137060;
    const double C2066 =
        (-(C137535 * (C137342 + C137649 * C137340 * C137346) * C137344) /
         C137082) /
        C137060;
    const double C2159 =
        (-(C137535 * C137346 * C137340 * C137676) / C137082) / C137060 -
        (C137337 * C137334 * C137594 * ce) / C137336;
    const double C2268 =
        (-(C137535 * C137346 * C137340 * C137700) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137341) / C137336;
    const double C2368 =
        (-(C137535 * C137346 * C137340 * C137752) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137479) / C137336;
    const double C2460 =
        (-(C137337 * C137334 * C137695 * ce) / C137082) / C137060 -
        (ae * C137337 * C137334 * C137537) / C137336 -
        (C137535 * (C137342 + C137771 * C137340 * C137346) * C137344) / C137336;
    const double C137390 = C137375 * C137383;
    const double C137387 = C137375 * C137379;
    const double C137386 = C137378 * C137375;
    const double C137415 = C137374 * C137375;
    const double C137497 = C137375 * C137494;
    const double C137555 = C137375 * C137552;
    const double C137612 = C137375 * C137609;
    const double C137657 = C137656 * C137375;
    const double C137713 = C137375 * C137710;
    const double C137779 = C137778 * C137375;
    const double C137366 = C137335 * C137363;
    const double C137371 = C137363 * ce;
    const double C138104 = C137477 * C137363;
    const double C138408 = C137535 * C137363;
    const double C137365 = C137335 * C137362;
    const double C137372 = ae * C137362;
    const double C138119 = C137477 * C137362;
    const double C138435 = C137535 * C137362;
    const double C137384 = C137373 * ae;
    const double C137382 = C137373 * C137343;
    const double C137381 = C137335 * C137373;
    const double C137380 = C137373 * ce;
    const double C138221 = C137373 * C137649;
    const double C138220 = C137477 * C137373;
    const double C138466 = C137373 * C137771;
    const double C138465 = C137535 * C137373;
    const double C137493 = ae * C137489;
    const double C137491 = C137335 * C137489;
    const double C137965 = C137477 * C137489;
    const double C138453 = C137535 * C137489;
    const double C137551 = ae * C137547;
    const double C137549 = C137335 * C137547;
    const double C138124 = C137477 * C137547;
    const double C138157 = C137535 * C137547;
    const double C137608 = C137604 * ce;
    const double C137606 = C137335 * C137604;
    const double C137967 = C137477 * C137604;
    const double C138421 = C137535 * C137604;
    const double C137709 = C137705 * ce;
    const double C137707 = C137335 * C137705;
    const double C138125 = C137477 * C137705;
    const double C138159 = C137535 * C137705;
    const double C137447 = C137335 * C137439;
    const double C138510 = C137439 * C137649;
    const double C138723 = C137477 * C137439;
    const double C138791 = C137439 * C137771;
    const double C137444 = C137335 * C137436;
    const double C138530 = C137436 * C137649;
    const double C138741 = C137477 * C137436;
    const double C138811 = C137436 * C137771;
    const double C137519 = C137515 * C137343;
    const double C138242 = C137335 * C137515;
    const double C138551 = C137477 * C137515;
    const double C138830 = C137515 * C137771;
    const double C137577 = C137573 * C137343;
    const double C138266 = C137335 * C137573;
    const double C138598 = C137573 * C137649;
    const double C138759 = C137477 * C137573;
    const double C138851 = C137535 * C137573;
    const double C137633 = C137630 * C137343;
    const double C138245 = C137335 * C137630;
    const double C138556 = C137477 * C137630;
    const double C138735 = C137630 * C137771;
    const double C137734 = C137731 * C137343;
    const double C138295 = C137335 * C137731;
    const double C138624 = C137731 * C137649;
    const double C138762 = C137477 * C137731;
    const double C138857 = C137535 * C137731;
    const double C137488 = C137354 * C137486;
    const double C137495 = C137375 * C137492;
    const double C137512 = C137417 * C137508;
    const double C137603 = C137354 * C137601;
    const double C137610 = C137375 * C137607;
    const double C137627 = C137417 * C137623;
    const double C137546 = C137354 * C137544;
    const double C137553 = C137375 * C137550;
    const double C137570 = C137417 * C137566;
    const double C137679 = C137354 * C137678;
    const double C137682 = C137375 * C137681;
    const double C137686 = C137417 * C137684;
    const double C137704 = C137354 * C137702;
    const double C137711 = C137375 * C137708;
    const double C137728 = C137417 * C137724;
    const double C137755 = C137354 * C137754;
    const double C137758 = C137375 * C137757;
    const double C137762 = C137417 * C137760;
    const double C63861 = C139289 * C840;
    const double C77504 = C139289 * C1708;
    const double C137065 = C137063 * C139289;
    const double C139587 = C139561 * C139289;
    const double C139586 = C139289 * C139559;
    const double C13591 = -(C139289 * C139560) / C137060;
    const double C137104 = C137102 - C137095;
    const double C137093 = C137089 * C139303;
    const double C139304 = C139303 * C139298;
    const double C139308 = C139307 * C139303;
    const double C139564 = C139303 / C137087;
    const double C139563 = C139303 * C139299;
    const double C823 = C139569 * C139303;
    const double C137156 = C137155 * C139346;
    const double C181 = -(2 * C137084 * (yC - yD) * C139346) / C137082;
    const double C923 =
        ((C139346 - (C137135 * 2 * C137084 * C137135 * C139346) / C137082) *
         ce) /
            C137082 -
        (0 * de) / C137091;
    const double C924 =
        (0 * ce) / C137082 - (C137084 * C137135 * C139346) / C137086;
    const double C139357 = C139346 * C139355;
    const double C139360 = C139307 * C139346;
    const double C139573 = C139346 * C139356;
    const double C139572 = C139346 / C137087;
    const double C2567 = C139569 * C139346;
    const double C137203 = C137202 * C139372;
    const double C244 = -(2 * C137084 * (zC - zD) * C139372) / C137082;
    const double C1875 =
        ((C139372 - (C137142 * 2 * C137084 * C137142 * C139372) / C137082) *
         ce) /
            C137082 -
        (0 * de) / C137091;
    const double C1876 =
        (0 * ce) / C137082 - (C137084 * C137142 * C139372) / C137086;
    const double C139381 = C139372 * C139379;
    const double C139384 = C139307 * C139372;
    const double C139578 = C139372 * C139380;
    const double C139577 = C139372 / C137087;
    const double C4655 = C139569 * C139372;
    const double C137187 = C137185 - C137177;
    const double C137232 = C137230 - C137222;
    const double C322 = C139448 * C309;
    const double C32418 = C139448 * C1962;
    const double C137306 = C137305 * C139448;
    const double C307 = -(2 * C137061 * (yA - yB) * C139448) / C137060;
    const double C13795 =
        ((C139448 - (C137279 * 2 * C137061 * C137279 * C139448) / C137060) *
         ae) /
            C137060 -
        (0 * be) / C137064;
    const double C13796 =
        (0 * ae) / C137060 - (C137061 * C137279 * C139448) / C137062;
    const double C47233 =
        (-(0 * be) / C137060) / (2 * C137060) -
        ((C139448 - (C137279 * 2 * C137061 * C137279 * C139448) / C137060) *
         be) /
            C137060;
    const double C47234 =
        (-(2 * C137061 * C137279 * C139448) / C137060) / (2 * C137060) -
        (0 * be) / C137060;
    const double C139598 = C139561 * C139448;
    const double C139597 = C139448 * C139582;
    const double C47031 = -(C139448 * C139584) / C137060;
    const double C569 = C139463 * C556;
    const double C15013 = C139463 * C1396;
    const double C137322 = C137321 * C139463;
    const double C554 = -(2 * C137061 * (zA - zB) * C139463) / C137060;
    const double C30812 =
        ((C139463 - (C137286 * 2 * C137061 * C137286 * C139463) / C137060) *
         ae) /
            C137060 -
        (0 * be) / C137064;
    const double C30813 =
        (0 * ae) / C137060 - (C137061 * C137286 * C139463) / C137062;
    const double C92849 =
        (-(0 * be) / C137060) / (2 * C137060) -
        ((C139463 - (C137286 * 2 * C137061 * C137286 * C139463) / C137060) *
         be) /
            C137060;
    const double C92850 =
        (-(2 * C137061 * C137286 * C139463) / C137060) / (2 * C137060) -
        (0 * be) / C137060;
    const double C139600 = C139561 * C139463;
    const double C139599 = C139463 * C139583;
    const double C92451 = -(C139463 * C139585) / C137060;
    const double C115 = (C137337 * C137334 * C137345 +
                         C137335 * (C137335 * C137350 + C137342 * ae) +
                         C137335 * C137342 * ae) /
                        C137060;
    const double C834 =
        (C137477 * (C137335 * C137350 + C137342 * ae)) / C137060;
    const double C1702 =
        (C137535 * (C137335 * C137350 + C137342 * ae)) / C137060;
    const double C2574 =
        (C137337 * C137334 * C137345 + C137350 * C137649) / C137060;
    const double C3373 =
        (2 * C137477 * C137350 + C137477 * (C137350 + C137363 * C137649)) /
        C137060;
    const double C3897 = (C137535 * C137477 * C137350) / C137060;
    const double C3908 = (C137535 * (C137350 + C137363 * C137649)) / C137060;
    const double C4660 =
        (C137337 * C137334 * C137345 + C137350 * C137771) / C137060;
    const double C6171 =
        (2 * C137535 * C137350 + C137535 * (C137350 + C137363 * C137771)) /
        C137060;
    const double C127 =
        (-(ae * (C137335 * C137349 + C137342 * ce)) / C137082) / C137060 -
        ((C137342 + C137343 * C137340 * C137346) * C137344) / C137336 -
        ((C137335 * C137350 + C137342 * ae) * ce) / C137336 +
        C137335 *
            ((-(C137350 * ce) / C137082) / C137060 - (ae * C137349) / C137336 -
             (C137335 *
              (C137340 * C137346 + C137343 * bs[4] * std::pow(C137333, 4)) *
              C137344) /
                 C137336);
    const double C118 =
        -(C137335 * (C137335 * C137349 + C137342 * ce) +
          C137337 * C137334 * C137341 + C137335 * C137342 * ce) /
        C137082;
    const double C838 =
        -(C137477 * (C137335 * C137349 + C137342 * ce)) / C137082;
    const double C1706 =
        -(C137535 * (C137335 * C137349 + C137342 * ce)) / C137082;
    const double C2577 =
        -(C137349 * C137649 + C137337 * C137334 * C137341) / C137082;
    const double C3370 = (-2 * C137477 * C137349) / C137082 -
                         (C137477 * (C137362 * C137649 + C137349)) / C137082;
    const double C3900 = -(C137535 * C137477 * C137349) / C137082;
    const double C3905 = -(C137535 * (C137362 * C137649 + C137349)) / C137082;
    const double C4663 =
        -(C137349 * C137771 + C137337 * C137334 * C137341) / C137082;
    const double C6168 = (-2 * C137535 * C137349) / C137082 -
                         (C137535 * (C137362 * C137771 + C137349)) / C137082;
    const double C137360 = C137352 * ae;
    const double C137358 = C137335 * C137352;
    const double C137357 = C137352 * ce;
    const double C137364 = C137352 + C137361;
    const double C137653 = C137352 + C137652;
    const double C137775 = C137352 + C137774;
    const double C137966 = C137477 * C137352;
    const double C138158 = C137535 * C137352;
    const double C396 =
        (-((C137352 + C137649 * C137353 * C137354) * C137344 * C137343) /
         C137082) /
            C137060 -
        ((C137342 + C137649 * C137340 * C137346) * C137344) / C137336;
    const double C721 =
        (-((C137352 + C137771 * C137353 * C137354) * C137344 * C137343) /
         C137082) /
            C137060 -
        ((C137342 + C137771 * C137340 * C137346) * C137344) / C137336;
    const double C110 =
        2 * C137335 * C137342 + C137335 * (C137342 + C137352 * C137343);
    const double C830 = C137477 * (C137342 + C137352 * C137343);
    const double C1698 = C137535 * (C137342 + C137352 * C137343);
    const double C3367 =
        2 * C137477 * C137342 + C137477 * (C137342 + C137352 * C137649);
    const double C3896 = C137535 * (C137342 + C137352 * C137649);
    const double C6165 =
        2 * C137535 * C137342 + C137535 * (C137342 + C137352 * C137771);
    const double C190 =
        (-(ae * C137335 * C137483) / C137082) / C137060 -
        (C137346 * C137340 * C137484) / C137336 +
        C137335 *
            ((-(C137335 * C137354 * C137353 * C137484) / C137082) / C137060 -
             (ae * C137483) / C137336);
    const double C184 =
        -(C137483 * C137343 + C137337 * C137334 * C137479) / C137082;
    const double C185 = (-2 * C137335 * C137483) / C137082 -
                        (C137335 * (C137489 * C137343 + C137483)) / C137082;
    const double C925 = -(C137477 * (C137489 * C137343 + C137483) +
                          (C137342 + C137352 * C137343) * ce) /
                        C137082;
    const double C926 =
        -(C137477 * C137335 * C137483 + C137335 * C137342 * ce) / C137082;
    const double C1791 = -(C137535 * C137335 * C137483) / C137082;
    const double C1792 = -(C137535 * (C137489 * C137343 + C137483)) / C137082;
    const double C2663 =
        -(C137477 * (C137477 * C137483 + C137342 * ce) +
          C137337 * C137334 * C137479 + C137477 * C137342 * ce) /
        C137082;
    const double C3989 =
        -(C137535 * (C137477 * C137483 + C137342 * ce)) / C137082;
    const double C4746 =
        -(C137483 * C137771 + C137337 * C137334 * C137479) / C137082;
    const double C6227 = (-2 * C137535 * C137483) / C137082 -
                         (C137535 * (C137489 * C137771 + C137483)) / C137082;
    const double C253 =
        (-(ae * C137335 * C137541) / C137082) / C137060 -
        (C137346 * C137340 * C137542) / C137336 +
        C137335 *
            ((-(C137335 * C137354 * C137353 * C137542) / C137082) / C137060 -
             (ae * C137541) / C137336);
    const double C247 =
        -(C137541 * C137343 + C137337 * C137334 * C137537) / C137082;
    const double C248 = (-2 * C137335 * C137541) / C137082 -
                        (C137335 * (C137547 * C137343 + C137541)) / C137082;
    const double C1009 = -(C137477 * (C137547 * C137343 + C137541)) / C137082;
    const double C1010 = -(C137477 * C137335 * C137541) / C137082;
    const double C1877 = -(C137535 * (C137547 * C137343 + C137541) +
                           (C137342 + C137352 * C137343) * ce) /
                         C137082;
    const double C1878 =
        -(C137535 * C137335 * C137541 + C137335 * C137342 * ce) / C137082;
    const double C2745 =
        -(C137541 * C137649 + C137337 * C137334 * C137537) / C137082;
    const double C3489 = (-2 * C137477 * C137541) / C137082 -
                         (C137477 * (C137547 * C137649 + C137541)) / C137082;
    const double C4075 =
        -(C137535 * C137477 * C137541 + C137477 * C137342 * ce) / C137082;
    const double C4080 = -(C137535 * (C137547 * C137649 + C137541) +
                           (C137342 + C137352 * C137649) * ce) /
                         C137082;
    const double C4831 =
        -(C137535 * (C137535 * C137541 + C137342 * ce) +
          C137337 * C137334 * C137537 + C137535 * C137342 * ce) /
        C137082;
    const double C316 =
        (-(C137335 * C137598 * ce) / C137082) / C137060 -
        (C137346 * C137340 * C137599) / C137336 +
        C137335 *
            ((-(C137335 * C137354 * C137353 * C137599) / C137082) / C137060 -
             (C137598 * ce) / C137336);
    const double C310 =
        (C137337 * C137334 * C137594 + C137598 * C137343) / C137060;
    const double C311 =
        (2 * C137335 * C137598 + C137335 * (C137598 + C137604 * C137343)) /
        C137060;
    const double C1093 =
        (C137477 * C137335 * C137598 + C137335 * C137342 * ae) / C137060;
    const double C1095 = (C137477 * (C137598 + C137604 * C137343) +
                          (C137342 + C137352 * C137343) * ae) /
                         C137060;
    const double C1961 = (C137535 * C137335 * C137598) / C137060;
    const double C1963 = (C137535 * (C137598 + C137604 * C137343)) / C137060;
    const double C2827 = (C137337 * C137334 * C137594 +
                          C137477 * (C137477 * C137598 + C137342 * ae) +
                          C137477 * C137342 * ae) /
                         C137060;
    const double C4161 =
        (C137535 * (C137477 * C137598 + C137342 * ae)) / C137060;
    const double C4913 =
        (C137337 * C137334 * C137594 + C137598 * C137771) / C137060;
    const double C6343 =
        (2 * C137535 * C137598 + C137535 * (C137598 + C137604 * C137771)) /
        C137060;
    const double C563 =
        (-(C137335 * C137699 * ce) / C137082) / C137060 -
        (C137346 * C137340 * C137700) / C137336 +
        C137335 *
            ((-(C137335 * C137354 * C137353 * C137700) / C137082) / C137060 -
             (C137699 * ce) / C137336);
    const double C557 =
        (C137337 * C137334 * C137695 + C137699 * C137343) / C137060;
    const double C558 =
        (2 * C137335 * C137699 + C137335 * (C137699 + C137705 * C137343)) /
        C137060;
    const double C1395 = (C137477 * C137335 * C137699) / C137060;
    const double C1397 = (C137477 * (C137699 + C137705 * C137343)) / C137060;
    const double C2263 =
        (C137535 * C137335 * C137699 + C137335 * C137342 * ae) / C137060;
    const double C2265 = (C137535 * (C137699 + C137705 * C137343) +
                          (C137342 + C137352 * C137343) * ae) /
                         C137060;
    const double C3105 =
        (C137337 * C137334 * C137695 + C137699 * C137649) / C137060;
    const double C3707 =
        (2 * C137477 * C137699 + C137477 * (C137699 + C137705 * C137649)) /
        C137060;
    const double C4407 =
        (C137535 * C137477 * C137699 + C137477 * C137342 * ae) / C137060;
    const double C4412 = (C137535 * (C137699 + C137705 * C137649) +
                          (C137342 + C137352 * C137649) * ae) /
                         C137060;
    const double C5191 = (C137337 * C137334 * C137695 +
                          C137535 * (C137535 * C137699 + C137342 * ae) +
                          C137535 * C137342 * ae) /
                         C137060;
    const double C324 = C139448 * C315;
    const double C403 = C139448 * C395;
    const double C483 = C139448 * C475;
    const double C486 = C139448 * C476;
    const double C571 = C139463 * C562;
    const double C650 = C139463 * C642;
    const double C653 = C139463 * C643;
    const double C728 = C139463 * C720;
    const double C63863 = C139289 * C846;
    const double C63983 = C139289 * C932;
    const double C64076 = C139289 * C1016;
    const double C15015 = C139463 * C1400;
    const double C15129 = C139463 * C1497;
    const double C15239 = C139463 * C1602;
    const double C77506 = C139289 * C1714;
    const double C77627 = C139289 * C1799;
    const double C77745 = C139289 * C1884;
    const double C32420 = C139448 * C1966;
    const double C32535 = C139448 * C2066;
    const double C32640 = C139448 * C2159;
    const double C137395 = C137335 * C137390;
    const double C137413 = C137390 * ce;
    const double C137799 = C137477 * C137390;
    const double C137858 = C137535 * C137390;
    const double C138194 = C137390 * C137649;
    const double C138410 = C137390 * C137771;
    const double C137394 = C137335 * C137387;
    const double C137414 = ae * C137387;
    const double C137800 = C137477 * C137387;
    const double C137859 = C137535 * C137387;
    const double C138210 = C137387 * C137649;
    const double C138437 = C137387 * C137771;
    const double C137393 = C137373 + C137386;
    const double C137432 = C137415 * ae;
    const double C137430 = C137415 * C137343;
    const double C137429 = C137335 * C137415;
    const double C137428 = C137415 * ce;
    const double C137443 = C137415 + C137435;
    const double C137664 = C137415 + C137663;
    const double C137786 = C137415 + C137785;
    const double C138553 = C137415 * C137649;
    const double C138552 = C137477 * C137415;
    const double C138734 = C137415 * C137771;
    const double C138852 = C137535 * C137415;
    const double C137499 = C137497 * C137343;
    const double C137509 = ae * C137497;
    const double C137506 = C137335 * C137497;
    const double C138219 = C137477 * C137497;
    const double C138455 = C137497 * C137771;
    const double C138656 = C137535 * C137497;
    const double C137557 = C137555 * C137343;
    const double C137567 = ae * C137555;
    const double C137564 = C137335 * C137555;
    const double C138276 = C137555 * C137649;
    const double C138381 = C137477 * C137555;
    const double C138464 = C137535 * C137555;
    const double C137614 = C137612 * C137343;
    const double C137624 = C137612 * ce;
    const double C137621 = C137335 * C137612;
    const double C138222 = C137477 * C137612;
    const double C138422 = C137612 * C137771;
    const double C138655 = C137535 * C137612;
    const double C137658 = C137373 + C137657;
    const double C137715 = C137713 * C137343;
    const double C137725 = C137713 * ce;
    const double C137722 = C137335 * C137713;
    const double C138286 = C137713 * C137649;
    const double C138383 = C137477 * C137713;
    const double C138467 = C137535 * C137713;
    const double C137780 = C137373 + C137779;
    const double C137376 = C137371 / C137082;
    const double C138193 = C137371 / C137336;
    const double C5477 = (C137477 * C137350 + C138104 * C137771) / C137060;
    const double C137377 = C137372 / C137336;
    const double C5474 = -(C138119 * C137771 + C137477 * C137349) / C137082;
    const double C137389 = C137352 + C137382;
    const double C137391 = C137381 * ae;
    const double C137388 = C137381 * ce;
    const double C137419 = 2 * C137381;
    const double C137973 = C137477 * C137381;
    const double C138164 = C137535 * C137381;
    const double C138227 = C137352 + C138221;
    const double C138229 = C138220 * ae;
    const double C138226 = C138220 * ce;
    const double C138382 = C137535 * C138220;
    const double C138554 = 2 * C138220;
    const double C138472 = C137352 + C138466;
    const double C138474 = C138465 * ae;
    const double C138471 = C138465 * ce;
    const double C138854 = 2 * C138465;
    const double C137496 = C137493 / C137336;
    const double C4747 = -(C137491 * C137771 + C137335 * C137483) / C137082;
    const double C137554 = C137551 / C137336;
    const double C2746 = -(C137549 * C137649 + C137335 * C137541) / C137082;
    const double C137611 = C137608 / C137336;
    const double C138217 = C137608 / C137082;
    const double C4914 = (C137335 * C137598 + C137606 * C137771) / C137060;
    const double C137712 = C137709 / C137336;
    const double C138462 = C137709 / C137082;
    const double C3106 = (C137335 * C137699 + C137707 * C137649) / C137060;
    const double C138512 = C137390 + C138510;
    const double C138725 = C138723 * C137771;
    const double C138793 = C137390 + C138791;
    const double C138534 = C138530 + C137387;
    const double C138743 = C138741 * C137771;
    const double C138815 = C138811 + C137387;
    const double C137522 = C137519 + C137497;
    const double C138248 = C137477 * C138242;
    const double C138446 = C138242 * C137771;
    const double C138834 = C138830 + C137497;
    const double C137580 = C137577 + C137555;
    const double C138268 = C138266 * C137649;
    const double C138390 = C137477 * C138266;
    const double C138487 = C137535 * C138266;
    const double C138602 = C138598 + C137555;
    const double C138765 = C137535 * C138759;
    const double C137636 = C137612 + C137633;
    const double C138251 = C137477 * C138245;
    const double C138426 = C138245 * C137771;
    const double C138737 = C137612 + C138735;
    const double C137737 = C137713 + C137734;
    const double C138297 = C138295 * C137649;
    const double C138392 = C137477 * C138295;
    const double C138490 = C137535 * C138295;
    const double C138627 = C137713 + C138624;
    const double C138768 = C137535 * C138762;
    const double C191 =
        2 * ((-(C137335 * C137488) / C137082) / C137060 -
             (ae * C137483) / C137336) -
        (ae * (C137489 * C137343 + C137483)) / C137336 +
        C137335 *
            ((-(ae * C137335 * C137489) / C137082) / C137060 -
             C137488 / C137336 +
             C137335 * ((-(C137335 * C137375 * C137374 * C137484) / C137082) /
                            C137060 -
                        (ae * C137489) / C137336));
    const double C931 = C137477 * ((-(C137335 * C137488) / C137082) / C137060 -
                                   (ae * C137483) / C137336) -
                        ((C137335 * C137350 + C137342 * ae) * ce) / C137336;
    const double C1796 = C137535 * ((-(C137335 * C137488) / C137082) / C137060 -
                                    (ae * C137483) / C137336);
    const double C2667 = (-(C137477 * C137350 * ce) / C137082) / C137060 -
                         (C137346 * C137340 * C137484) / C137336 +
                         C137477 * ((-(C137477 * C137488) / C137082) / C137060 -
                                    (C137350 * ce) / C137336);
    const double C3995 = C137535 * ((-(C137477 * C137488) / C137082) / C137060 -
                                    (C137350 * ce) / C137336);
    const double C4750 = (-(C137488 * C137771) / C137082) / C137060 -
                         (C137346 * C137340 * C137484) / C137336;
    const double C137498 = C137335 * C137495;
    const double C137507 = C137495 / C137336;
    const double C138192 = C137477 * C137495;
    const double C3436 =
        2 * ((-(C137477 * C137488) / C137082) / C137060 -
             (C137350 * ce) / C137336) -
        ((C137350 + C137363 * C137649) * ce) / C137336 +
        C137477 * ((-(C137477 * C137363 * ce) / C137082) / C137060 -
                   C137488 / C137336 +
                   C137477 * ((-(C137477 * C137495) / C137082) / C137060 -
                              C137371 / C137336));
    const double C4000 =
        C137535 *
        ((-(C137477 * C137363 * ce) / C137082) / C137060 - C137488 / C137336 +
         C137477 *
             ((-(C137477 * C137495) / C137082) / C137060 - C137371 / C137336));
    const double C5560 =
        (-(C137477 * C137488) / C137082) / C137060 - (C137350 * ce) / C137336 +
        ((-(C137477 * C137495) / C137082) / C137060 - C137371 / C137336) *
            C137771;
    const double C6230 = (-2 * C137535 * C137488) / C137336 +
                         C137535 * ((-(C137495 * C137771) / C137082) / C137060 -
                                    C137488 / C137336);
    const double C137517 = C137335 * C137512;
    const double C138507 = C137477 * C137512;
    const double C138782 = C137512 * C137771;
    const double C317 =
        2 * ((-(C137335 * C137603) / C137082) / C137060 -
             (C137598 * ce) / C137336) -
        ((C137598 + C137604 * C137343) * ce) / C137336 +
        C137335 *
            ((-(C137335 * C137604 * ce) / C137082) / C137060 -
             C137603 / C137336 +
             C137335 * ((-(C137335 * C137375 * C137374 * C137599) / C137082) /
                            C137060 -
                        (C137604 * ce) / C137336));
    const double C1099 = C137477 * ((-(C137335 * C137603) / C137082) / C137060 -
                                    (C137598 * ce) / C137336) -
                         (ae * (C137335 * C137349 + C137342 * ce)) / C137336;
    const double C1967 = C137535 * ((-(C137335 * C137603) / C137082) / C137060 -
                                    (C137598 * ce) / C137336);
    const double C2831 = (-(ae * C137477 * C137349) / C137082) / C137060 -
                         (C137346 * C137340 * C137599) / C137336 +
                         C137477 * ((-(C137477 * C137603) / C137082) / C137060 -
                                    (ae * C137349) / C137336);
    const double C4167 = (-(C137477 * C137535 * C137603) / C137082) / C137060 -
                         (ae * C137535 * C137349) / C137336;
    const double C4917 = (-(C137603 * C137771) / C137082) / C137060 -
                         (C137346 * C137340 * C137599) / C137336;
    const double C137613 = C137335 * C137610;
    const double C137622 = C137610 / C137336;
    const double C138209 = C137477 * C137610;
    const double C138315 = C137535 * C137610;
    const double C4172 =
        (-(ae * C137535 * C137477 * C137362) / C137082) / C137060 -
        (C137535 * C137603) / C137336 +
        C137477 * ((-(C137477 * C137535 * C137610) / C137082) / C137060 -
                   (ae * C137535 * C137362) / C137336);
    const double C5720 = C137477 * ((-(C137610 * C137771) / C137082) / C137060 -
                                    C137603 / C137336) -
                         (ae * (C137362 * C137771 + C137349)) / C137336;
    const double C6346 = (-2 * C137535 * C137603) / C137336 +
                         C137535 * ((-(C137610 * C137771) / C137082) / C137060 -
                                    C137603 / C137336);
    const double C137632 = C137335 * C137627;
    const double C138528 = C137477 * C137627;
    const double C138648 = C137535 * C137627;
    const double C138685 = C137627 * C137771;
    const double C254 =
        2 * ((-(C137335 * C137546) / C137082) / C137060 -
             (ae * C137541) / C137336) -
        (ae * (C137547 * C137343 + C137541)) / C137336 +
        C137335 *
            ((-(ae * C137335 * C137547) / C137082) / C137060 -
             C137546 / C137336 +
             C137335 * ((-(C137335 * C137375 * C137374 * C137542) / C137082) /
                            C137060 -
                        (ae * C137547) / C137336));
    const double C1015 = C137477 * ((-(C137335 * C137546) / C137082) / C137060 -
                                    (ae * C137541) / C137336);
    const double C1883 = C137535 * ((-(C137335 * C137546) / C137082) / C137060 -
                                    (ae * C137541) / C137336) -
                         ((C137335 * C137350 + C137342 * ae) * ce) / C137336;
    const double C2749 = (-(C137546 * C137649) / C137082) / C137060 -
                         (C137346 * C137340 * C137542) / C137336;
    const double C4081 = (-(C137535 * C137477 * C137546) / C137082) / C137060 -
                         (C137477 * C137350 * ce) / C137336;
    const double C4835 = (-(C137535 * C137350 * ce) / C137082) / C137060 -
                         (C137346 * C137340 * C137542) / C137336 +
                         C137535 * ((-(C137535 * C137546) / C137082) / C137060 -
                                    (C137350 * ce) / C137336);
    const double C137556 = C137335 * C137553;
    const double C137565 = C137553 / C137336;
    const double C138365 = C137477 * C137553;
    const double C138409 = C137535 * C137553;
    const double C3492 = (-2 * C137477 * C137546) / C137336 +
                         C137477 * ((-(C137553 * C137649) / C137082) / C137060 -
                                    C137546 / C137336);
    const double C4086 = C137535 * ((-(C137553 * C137649) / C137082) / C137060 -
                                    C137546 / C137336) -
                         ((C137350 + C137363 * C137649) * ce) / C137336;
    const double C5640 =
        (-(C137535 * C138104 * ce) / C137082) / C137060 -
        (C137477 * C137546) / C137336 +
        C137535 * ((-(C137535 * C137477 * C137553) / C137082) / C137060 -
                   (C138104 * ce) / C137336);
    const double C6290 =
        2 * ((-(C137535 * C137546) / C137082) / C137060 -
             (C137350 * ce) / C137336) -
        ((C137350 + C137363 * C137771) * ce) / C137336 +
        C137535 * ((-(C137535 * C137363 * ce) / C137082) / C137060 -
                   C137546 / C137336 +
                   C137535 * ((-(C137535 * C137553) / C137082) / C137060 -
                              C137371 / C137336));
    const double C137575 = C137335 * C137570;
    const double C138521 = C137570 * C137649;
    const double C138721 = C137477 * C137570;
    const double C138789 = C137535 * C137570;
    const double C477 =
        (-2 * C137335 * C137679) / C137336 +
        C137335 *
            ((-(C137375 * C137374 * C137676 * C137343) / C137082) / C137060 -
             C137679 / C137336);
    const double C1300 = (-(C137477 * C137335 * C137679) / C137082) / C137060 -
                         (ae * C137335 * C137541) / C137336;
    const double C2160 = (-(C137535 * C137335 * C137679) / C137082) / C137060 -
                         (C137335 * C137598 * ce) / C137336;
    const double C3017 = (-(ae * C137477 * C137541) / C137082) / C137060 -
                         (C137346 * C137340 * C137676) / C137336 +
                         C137477 * ((-(C137477 * C137679) / C137082) / C137060 -
                                    (ae * C137541) / C137336);
    const double C4327 = C137477 * ((-(C137535 * C137679) / C137082) / C137060 -
                                    (C137598 * ce) / C137336) -
                         (ae * (C137535 * C137541 + C137342 * ce)) / C137336;
    const double C5095 = (-(C137535 * C137598 * ce) / C137082) / C137060 -
                         (C137346 * C137340 * C137676) / C137336 +
                         C137535 * ((-(C137535 * C137679) / C137082) / C137060 -
                                    (C137598 * ce) / C137336);
    const double C137685 = C137682 / C137336;
    const double C137985 = C137335 * C137682;
    const double C138275 = C137477 * C137682;
    const double C138321 = C137535 * C137682;
    const double C478 =
        3 * ((-(C137682 * C137343) / C137082) / C137060 - C137679 / C137336) +
        C137335 *
            ((-2 * C137335 * C137682) / C137336 +
             C137335 * ((-(C137417 * C137416 * C137676 * C137343) / C137082) /
                            C137060 -
                        C137682 / C137336));
    const double C1299 = C137477 * ((-(C137682 * C137343) / C137082) / C137060 -
                                    C137679 / C137336) -
                         (ae * (C137547 * C137343 + C137541)) / C137336;
    const double C2161 = C137535 * ((-(C137682 * C137343) / C137082) / C137060 -
                                    C137679 / C137336) -
                         ((C137598 + C137604 * C137343) * ce) / C137336;
    const double C3018 =
        (-(ae * C137477 * C137549) / C137082) / C137060 -
        (C137335 * C137679) / C137336 +
        C137477 * ((-(C137477 * C137335 * C137682) / C137082) / C137060 -
                   (ae * C137549) / C137336);
    const double C137687 = C137686 * C137343;
    const double C138264 = C137335 * C137686;
    const double C138596 = C137477 * C137686;
    const double C138669 = C137535 * C137686;
    const double C564 =
        2 * ((-(C137335 * C137704) / C137082) / C137060 -
             (C137699 * ce) / C137336) -
        ((C137699 + C137705 * C137343) * ce) / C137336 +
        C137335 *
            ((-(C137335 * C137705 * ce) / C137082) / C137060 -
             C137704 / C137336 +
             C137335 * ((-(C137335 * C137375 * C137374 * C137700) / C137082) /
                            C137060 -
                        (C137705 * ce) / C137336));
    const double C1401 = C137477 * ((-(C137335 * C137704) / C137082) / C137060 -
                                    (C137699 * ce) / C137336);
    const double C2269 = C137535 * ((-(C137335 * C137704) / C137082) / C137060 -
                                    (C137699 * ce) / C137336) -
                         (ae * (C137335 * C137349 + C137342 * ce)) / C137336;
    const double C3109 = (-(C137704 * C137649) / C137082) / C137060 -
                         (C137346 * C137340 * C137700) / C137336;
    const double C4413 = (-(C137535 * C137477 * C137704) / C137082) / C137060 -
                         (ae * C137477 * C137349) / C137336;
    const double C5195 = (-(ae * C137535 * C137349) / C137082) / C137060 -
                         (C137346 * C137340 * C137700) / C137336 +
                         C137535 * ((-(C137535 * C137704) / C137082) / C137060 -
                                    (ae * C137349) / C137336);
    const double C137714 = C137335 * C137711;
    const double C137723 = C137711 / C137336;
    const double C138376 = C137477 * C137711;
    const double C138436 = C137535 * C137711;
    const double C3710 = (-2 * C137477 * C137704) / C137336 +
                         C137477 * ((-(C137711 * C137649) / C137082) / C137060 -
                                    C137704 / C137336);
    const double C4418 = C137535 * ((-(C137711 * C137649) / C137082) / C137060 -
                                    C137704 / C137336) -
                         (ae * (C137362 * C137649 + C137349)) / C137336;
    const double C5954 =
        (-(ae * C137535 * C138119) / C137082) / C137060 -
        (C137477 * C137704) / C137336 +
        C137535 * ((-(C137535 * C137477 * C137711) / C137082) / C137060 -
                   (ae * C138119) / C137336);
    const double C137733 = C137335 * C137728;
    const double C138615 = C137728 * C137649;
    const double C138740 = C137477 * C137728;
    const double C138809 = C137535 * C137728;
    const double C644 =
        (-2 * C137335 * C137755) / C137336 +
        C137335 *
            ((-(C137375 * C137374 * C137752 * C137343) / C137082) / C137060 -
             C137755 / C137336);
    const double C1498 = (-(C137477 * C137335 * C137755) / C137082) / C137060 -
                         (C137335 * C137699 * ce) / C137336;
    const double C2365 = (-(C137535 * C137335 * C137755) / C137082) / C137060 -
                         (ae * C137335 * C137483) / C137336;
    const double C3199 = (-(C137477 * C137699 * ce) / C137082) / C137060 -
                         (C137346 * C137340 * C137752) / C137336 +
                         C137477 * ((-(C137477 * C137755) / C137082) / C137060 -
                                    (C137699 * ce) / C137336);
    const double C4493 = C137535 * ((-(C137477 * C137755) / C137082) / C137060 -
                                    (C137699 * ce) / C137336) -
                         (ae * (C137477 * C137483 + C137342 * ce)) / C137336;
    const double C5285 = (-(ae * C137535 * C137483) / C137082) / C137060 -
                         (C137346 * C137340 * C137752) / C137336 +
                         C137535 * ((-(C137535 * C137755) / C137082) / C137060 -
                                    (ae * C137483) / C137336);
    const double C137761 = C137758 / C137336;
    const double C137992 = C137335 * C137758;
    const double C138285 = C137477 * C137758;
    const double C138454 = C137535 * C137758;
    const double C645 =
        3 * ((-(C137758 * C137343) / C137082) / C137060 - C137755 / C137336) +
        C137335 *
            ((-2 * C137335 * C137758) / C137336 +
             C137335 * ((-(C137417 * C137416 * C137752 * C137343) / C137082) /
                            C137060 -
                        C137758 / C137336));
    const double C1499 = C137477 * ((-(C137758 * C137343) / C137082) / C137060 -
                                    C137755 / C137336) -
                         ((C137699 + C137705 * C137343) * ce) / C137336;
    const double C2366 = C137535 * ((-(C137758 * C137343) / C137082) / C137060 -
                                    C137755 / C137336) -
                         (ae * (C137489 * C137343 + C137483)) / C137336;
    const double C3200 =
        (-(C137477 * C137707 * ce) / C137082) / C137060 -
        (C137335 * C137755) / C137336 +
        C137477 * ((-(C137477 * C137335 * C137758) / C137082) / C137060 -
                   (C137707 * ce) / C137336);
    const double C137763 = C137762 * C137343;
    const double C138293 = C137335 * C137762;
    const double C138622 = C137477 * C137762;
    const double C138828 = C137535 * C137762;
    const double C102 =
        ((0 * ae) / C137060 - C137065 / C137062) / (2 * C137060) -
        (0 * be) / C137060;
    const double C13595 =
        (-C137059 / C137060) / (2 * C137060) -
        ((C139289 - (C137058 * 2 * C137065) / C137060) * be) / C137060;
    const double C13596 =
        (-(2 * C137065) / C137060) / (2 * C137060) - (0 * be) / C137060;
    const double C47033 =
        ((C139289 - (C137058 * 2 * C137065) / C137060) * ae) / C137060 -
        C137059 / C137064;
    const double C47034 = (0 * ae) / C137060 - C137065 / C137062;
    const double C63381 = -(2 * C137065) / C137060;
    const double C101 =
        (((C139289 - (C137058 * 2 * C137065) / C137060) * ae) / C137060 -
         C137059 / C137064) /
            (2 * C137060) -
        ((C137058 * ((0 * ae) / C137060 - C137065 / C137062) + C139587) * be) /
            C137060;
    const double C91 = C139587 / C139294;
    const double C89 = C139289 / C139294 - (C139586 * C139560) / C137062;
    const double C90 = C139586 / C137064 - (C139587 * C139560) / C137060;
    const double C47029 = C139586 / C137060;
    const double C14309 = C13591 * C846;
    const double C14305 = C13591 * C840;
    const double C14441 = C13591 * C932;
    const double C14555 = C13591 * C1016;
    const double C32056 = C13591 * C1714;
    const double C32052 = C13591 * C1708;
    const double C32186 = C13591 * C1799;
    const double C32304 = C13591 * C1884;
    const double C137098 = C137093 / C137086;
    const double C137096 = 2 * C137093;
    const double C139566 = C139304 / C137091;
    const double C139565 = C139304 * C139299;
    const double C139562 = C139304 / C137082;
    const double C139311 = C139308 * C139299;
    const double C95 = C139308 / C139568;
    const double C6691 = C139308 / C137087;
    const double C821 = (C139303 * std::pow(C139299, 2)) / C137086 + C139564;
    const double C139588 = C139563 / C137082;
    const double C822 = (-2 * C139307 * C139563) / C137082;
    const double C137157 = 2 * C137156;
    const double C137175 = C137156 / C137086;
    const double C139575 = C139357 / C137091;
    const double C139574 = C139357 * C139356;
    const double C139570 = C139357 / C137082;
    const double C139363 = C139360 * C139356;
    const double C3363 = C139360 / C139568;
    const double C7400 = C139360 / C137087;
    const double C139591 = C139573 / C137082;
    const double C2566 = (-2 * C139307 * C139573) / C137082;
    const double C2565 = (C139346 * std::pow(C139356, 2)) / C137086 + C139572;
    const double C137204 = 2 * C137203;
    const double C137220 = C137203 / C137086;
    const double C139580 = C139381 / C137091;
    const double C139579 = C139381 * C139380;
    const double C139571 = C139381 / C137082;
    const double C139387 = C139384 * C139380;
    const double C6162 = C139384 / C139568;
    const double C10691 = C139384 / C137087;
    const double C139594 = C139578 / C137082;
    const double C4654 = (-2 * C139307 * C139578) / C137082;
    const double C4653 = (C139372 * std::pow(C139380, 2)) / C137086 + C139577;
    const double C63534 =
        ((0 * ae) / C137060 - C137306 / C137062) / (2 * C137060) -
        (0 * be) / C137060;
    const double C325 = C307 * C109;
    const double C323 = C307 * C117;
    const double C321 = C307 * C108;
    const double C402 = C307 * C183;
    const double C482 = C307 * C246;
    const double C1104 = C307 * C829;
    const double C1972 = C307 * C1697;
    const double C32419 = C307 * C1707;
    const double C32417 = C307 * C1700;
    const double C32534 = C307 * C1794;
    const double C32639 = C307 * C1879;
    const double C34908 = C307 * C3891;
    const double C35887 = C307 * C4656;
    const double C13806 = C13795 * C109;
    const double C13804 = C13795 * C117;
    const double C13800 = C13795 * C108;
    const double C13900 = C13795 * C183;
    const double C13984 = C13795 * C246;
    const double C14670 = C13795 * C829;
    const double C15637 = C13795 * C1697;
    const double C110546 = C13795 * C1707;
    const double C110542 = C13795 * C1700;
    const double C110652 = C13795 * C1794;
    const double C110758 = C13795 * C1879;
    const double C112972 = C13795 * C3891;
    const double C113956 = C13795 * C4656;
    const double C13798 = C13796 * C829;
    const double C110544 = C13796 * C3891;
    const double C47244 = C47233 * C109;
    const double C47242 = C47233 * C117;
    const double C47238 = C47233 * C108;
    const double C47338 = C47233 * C183;
    const double C47422 = C47233 * C246;
    const double C48102 = C47233 * C829;
    const double C49032 = C47233 * C1697;
    const double C77855 = C47233 * C1707;
    const double C77851 = C47233 * C1700;
    const double C77961 = C47233 * C1794;
    const double C78067 = C47233 * C1879;
    const double C80312 = C47233 * C3891;
    const double C81352 = C47233 * C4656;
    const double C47236 = C47234 * C829;
    const double C77853 = C47234 * C3891;
    const double C63533 =
        (((C139448 - (C137279 * 2 * C137306) / C137060) * ae) / C137060 -
         C137304 / C137064) /
            (2 * C137060) -
        ((C137279 * ((0 * ae) / C137060 - C137306 / C137062) + C139598) * be) /
            C137060;
    const double C63380 = C139598 / C139294;
    const double C13593 = C139597 / C137060;
    const double C63378 = C139448 / C139294 - (C139597 * C139584) / C137062;
    const double C63379 = C139597 / C137064 - (C139598 * C139584) / C137060;
    const double C47243 = C47031 * C315;
    const double C47239 = C47031 * C309;
    const double C47339 = C47031 * C395;
    const double C47429 = C47031 * C476;
    const double C47423 = C47031 * C475;
    const double C77856 = C47031 * C1966;
    const double C77852 = C47031 * C1962;
    const double C77962 = C47031 * C2066;
    const double C78068 = C47031 * C2159;
    const double C125168 =
        ((0 * ae) / C137060 - C137322 / C137062) / (2 * C137060) -
        (0 * be) / C137060;
    const double C572 = C554 * C109;
    const double C570 = C554 * C117;
    const double C568 = C554 * C108;
    const double C649 = C554 * C183;
    const double C727 = C554 * C246;
    const double C1406 = C554 * C829;
    const double C2274 = C554 * C1697;
    const double C15014 = C554 * C839;
    const double C15012 = C554 * C832;
    const double C15128 = C554 * C927;
    const double C15238 = C554 * C1011;
    const double C16948 = C554 * C2570;
    const double C18627 = C554 * C3891;
    const double C30823 = C30812 * C109;
    const double C30821 = C30812 * C117;
    const double C30817 = C30812 * C108;
    const double C30917 = C30812 * C183;
    const double C31001 = C30812 * C246;
    const double C31709 = C30812 * C829;
    const double C32748 = C30812 * C1697;
    const double C77189 = C30812 * C839;
    const double C77185 = C30812 * C832;
    const double C77297 = C30812 * C927;
    const double C77399 = C30812 * C1011;
    const double C79061 = C30812 * C2570;
    const double C80660 = C30812 * C3891;
    const double C30815 = C30813 * C1697;
    const double C77187 = C30813 * C3891;
    const double C92860 = C92849 * C109;
    const double C92858 = C92849 * C117;
    const double C92854 = C92849 * C108;
    const double C92954 = C92849 * C183;
    const double C93038 = C92849 * C246;
    const double C93742 = C92849 * C829;
    const double C94744 = C92849 * C1697;
    const double C109934 = C92849 * C839;
    const double C109930 = C92849 * C832;
    const double C110042 = C92849 * C927;
    const double C110144 = C92849 * C1011;
    const double C111748 = C92849 * C2570;
    const double C113320 = C92849 * C3891;
    const double C92852 = C92850 * C1697;
    const double C109932 = C92850 * C3891;
    const double C125167 =
        (((C139463 - (C137286 * 2 * C137322) / C137060) * ae) / C137060 -
         C137320 / C137064) /
            (2 * C137060) -
        ((C137286 * ((0 * ae) / C137060 - C137322 / C137062) + C139600) * be) /
            C137060;
    const double C124865 = C139600 / C139294;
    const double C30408 = C139599 / C137060;
    const double C124863 = C139463 / C139294 - (C139599 * C139585) / C137062;
    const double C124864 = C139599 / C137064 - (C139600 * C139585) / C137060;
    const double C92859 = C92451 * C562;
    const double C92855 = C92451 * C556;
    const double C92961 = C92451 * C643;
    const double C92955 = C92451 * C642;
    const double C93039 = C92451 * C720;
    const double C109935 = C92451 * C1400;
    const double C109931 = C92451 * C1396;
    const double C110043 = C92451 * C1497;
    const double C110145 = C92451 * C1602;
    const double C14315 = C13591 * C834;
    const double C14307 = C139587 * C834;
    const double C47739 = C139587 * C834;
    const double C63865 = C139289 * C834;
    const double C32062 = C13591 * C1702;
    const double C32054 = C139587 * C1702;
    const double C77508 = C139289 * C1702;
    const double C94087 = C139587 * C1702;
    const double C16288 = C13591 * C2574;
    const double C63873 = C139289 * C2574;
    const double C17260 = C13591 * C3373;
    const double C65307 = C139289 * C3373;
    const double C17974 = C13591 * C3897;
    const double C66540 = C139289 * C3897;
    const double C17976 = C13591 * C3908;
    const double C66536 = C139289 * C3908;
    const double C35545 = C13591 * C4660;
    const double C81005 = C139289 * C4660;
    const double C37443 = C13591 * C6171;
    const double C82901 = C139289 * C6171;
    const double C327 = C307 * C118;
    const double C574 = C554 * C118;
    const double C13810 = C13795 * C118;
    const double C30827 = C30812 * C118;
    const double C47248 = C47233 * C118;
    const double C92864 = C92849 * C118;
    const double C1106 = C307 * C838;
    const double C1408 = C554 * C838;
    const double C13802 = C13796 * C838;
    const double C14674 = C13795 * C838;
    const double C31713 = C30812 * C838;
    const double C47240 = C47234 * C838;
    const double C48106 = C47233 * C838;
    const double C93746 = C92849 * C838;
    const double C1974 = C307 * C1706;
    const double C2276 = C554 * C1706;
    const double C15641 = C13795 * C1706;
    const double C30819 = C30813 * C1706;
    const double C32752 = C30812 * C1706;
    const double C49036 = C47233 * C1706;
    const double C92856 = C92850 * C1706;
    const double C94748 = C92849 * C1706;
    const double C16946 = C554 * C2577;
    const double C79057 = C30812 * C2577;
    const double C111744 = C92849 * C2577;
    const double C17709 = C554 * C3370;
    const double C79743 = C30812 * C3370;
    const double C112428 = C92849 * C3370;
    const double C18625 = C554 * C3900;
    const double C34910 = C307 * C3900;
    const double C77191 = C30813 * C3900;
    const double C77857 = C47234 * C3900;
    const double C80316 = C47233 * C3900;
    const double C80656 = C30812 * C3900;
    const double C109936 = C92850 * C3900;
    const double C110548 = C13796 * C3900;
    const double C112976 = C13795 * C3900;
    const double C113316 = C92849 * C3900;
    const double C18631 = C554 * C3905;
    const double C34916 = C307 * C3905;
    const double C79055 = C30813 * C3905;
    const double C80324 = C47233 * C3905;
    const double C80318 = C47234 * C3905;
    const double C80666 = C30812 * C3905;
    const double C111742 = C92850 * C3905;
    const double C112984 = C13795 * C3905;
    const double C112978 = C13796 * C3905;
    const double C113326 = C92849 * C3905;
    const double C35885 = C307 * C4663;
    const double C81348 = C47233 * C4663;
    const double C113952 = C13795 * C4663;
    const double C37678 = C307 * C6168;
    const double C83126 = C47233 * C6168;
    const double C115662 = C13795 * C6168;
    const double C137369 = C137366 + C137360;
    const double C137969 = C137967 + C137360;
    const double C138161 = C138159 + C137360;
    const double C2664 = -(C137477 * (C137477 * C137491 + C137358 * ce) +
                           C137335 * C137483 + C137477 * C137358 * ce) /
                         C137082;
    const double C2828 =
        (C137335 * C137598 + C137477 * (C137477 * C137606 + C137358 * ae) +
         C137477 * C137358 * ae) /
        C137060;
    const double C3990 =
        -(C137535 * (C137477 * C137491 + C137358 * ce)) / C137082;
    const double C4076 =
        -(C137535 * C137477 * C137549 + C137477 * C137358 * ce) / C137082;
    const double C4162 =
        (C137535 * (C137477 * C137606 + C137358 * ae)) / C137060;
    const double C4408 =
        (C137535 * C137477 * C137707 + C137477 * C137358 * ae) / C137060;
    const double C4832 = -(C137535 * (C137535 * C137549 + C137358 * ce) +
                           C137335 * C137541 + C137535 * C137358 * ce) /
                         C137082;
    const double C5192 =
        (C137335 * C137699 + C137535 * (C137535 * C137707 + C137358 * ae) +
         C137535 * C137358 * ae) /
        C137060;
    const double C2571 = C137335 * C137342 + C137358 * C137649;
    const double C3366 =
        2 * C137477 * C137358 + C137477 * (C137358 + C137381 * C137649);
    const double C3892 = C137535 * C137477 * C137358;
    const double C3895 = C137535 * (C137358 + C137381 * C137649);
    const double C4657 = C137335 * C137342 + C137358 * C137771;
    const double C6164 =
        2 * C137535 * C137358 + C137535 * (C137358 + C137381 * C137771);
    const double C137368 = C137365 + C137357;
    const double C137968 = C137965 + C137357;
    const double C138160 = C138157 + C137357;
    const double C137367 = C137364 * C137344;
    const double C137654 = C137653 * C137344;
    const double C137776 = C137775 * C137344;
    const double C5637 = -(C137535 * (C137535 * C138124 + C137966 * ce) +
                           C137477 * C137541 + C137535 * C137966 * ce) /
                         C137082;
    const double C5951 =
        (C137477 * C137699 + C137535 * (C137535 * C138125 + C137966 * ae) +
         C137535 * C137966 * ae) /
        C137060;
    const double C5471 = C137477 * C137342 + C137966 * C137771;
    const double C20831 =
        2 * C137535 * C137966 + C137535 * (C137966 + C138220 * C137771);
    const double C406 = C139448 * C396;
    const double C47345 = C47031 * C396;
    const double C731 = C139463 * C721;
    const double C93045 = C92451 * C721;
    const double C329 = C307 * C110;
    const double C576 = C554 * C110;
    const double C13816 = C13795 * C110;
    const double C30833 = C30812 * C110;
    const double C47254 = C47233 * C110;
    const double C92870 = C92849 * C110;
    const double C1108 = C307 * C830;
    const double C1410 = C554 * C830;
    const double C13808 = C13796 * C830;
    const double C14680 = C13795 * C830;
    const double C31719 = C30812 * C830;
    const double C47246 = C47234 * C830;
    const double C48112 = C47233 * C830;
    const double C93752 = C92849 * C830;
    const double C1976 = C307 * C1698;
    const double C2278 = C554 * C1698;
    const double C15647 = C13795 * C1698;
    const double C30825 = C30813 * C1698;
    const double C32758 = C30812 * C1698;
    const double C49042 = C47233 * C1698;
    const double C92862 = C92850 * C1698;
    const double C94754 = C92849 * C1698;
    const double C17707 = C554 * C3367;
    const double C79739 = C30812 * C3367;
    const double C112424 = C92849 * C3367;
    const double C18629 = C554 * C3896;
    const double C34914 = C307 * C3896;
    const double C79059 = C30813 * C3896;
    const double C80320 = C47233 * C3896;
    const double C80314 = C47234 * C3896;
    const double C80662 = C30812 * C3896;
    const double C111746 = C92850 * C3896;
    const double C112980 = C13795 * C3896;
    const double C112974 = C13796 * C3896;
    const double C113322 = C92849 * C3896;
    const double C37676 = C307 * C6165;
    const double C83122 = C47233 * C6165;
    const double C115658 = C13795 * C6165;
    const double C405 = C307 * C184;
    const double C652 = C554 * C184;
    const double C13906 = C13795 * C184;
    const double C30923 = C30812 * C184;
    const double C47344 = C47233 * C184;
    const double C92960 = C92849 * C184;
    const double C407 = C307 * C185;
    const double C654 = C554 * C185;
    const double C13908 = C13795 * C185;
    const double C30925 = C30812 * C185;
    const double C47346 = C47233 * C185;
    const double C92962 = C92849 * C185;
    const double C1209 = C307 * C925;
    const double C1511 = C554 * C925;
    const double C13904 = C13796 * C925;
    const double C14796 = C13795 * C925;
    const double C31835 = C30812 * C925;
    const double C47342 = C47234 * C925;
    const double C48228 = C47233 * C925;
    const double C93868 = C92849 * C925;
    const double C1204 = C307 * C926;
    const double C1506 = C554 * C926;
    const double C13902 = C13796 * C926;
    const double C14794 = C13795 * C926;
    const double C31833 = C30812 * C926;
    const double C47340 = C47234 * C926;
    const double C48226 = C47233 * C926;
    const double C93866 = C92849 * C926;
    const double C2070 = C307 * C1791;
    const double C2372 = C554 * C1791;
    const double C15759 = C13795 * C1791;
    const double C30919 = C30813 * C1791;
    const double C32870 = C30812 * C1791;
    const double C49154 = C47233 * C1791;
    const double C92956 = C92850 * C1791;
    const double C94866 = C92849 * C1791;
    const double C2073 = C307 * C1792;
    const double C2375 = C554 * C1792;
    const double C15763 = C13795 * C1792;
    const double C30921 = C30813 * C1792;
    const double C32874 = C30812 * C1792;
    const double C49158 = C47233 * C1792;
    const double C92958 = C92850 * C1792;
    const double C94870 = C92849 * C1792;
    const double C17063 = C554 * C2663;
    const double C79165 = C30812 * C2663;
    const double C111852 = C92849 * C2663;
    const double C18749 = C554 * C3989;
    const double C35029 = C307 * C3989;
    const double C77295 = C30813 * C3989;
    const double C77963 = C47234 * C3989;
    const double C80436 = C47233 * C3989;
    const double C80776 = C30812 * C3989;
    const double C110040 = C92850 * C3989;
    const double C110654 = C13796 * C3989;
    const double C113096 = C13795 * C3989;
    const double C113436 = C92849 * C3989;
    const double C36004 = C307 * C4746;
    const double C81458 = C47233 * C4746;
    const double C114062 = C13795 * C4746;
    const double C37755 = C307 * C6227;
    const double C83201 = C47233 * C6227;
    const double C115736 = C13795 * C6227;
    const double C485 = C307 * C247;
    const double C730 = C554 * C247;
    const double C13990 = C13795 * C247;
    const double C31007 = C30812 * C247;
    const double C47428 = C47233 * C247;
    const double C93044 = C92849 * C247;
    const double C487 = C307 * C248;
    const double C732 = C554 * C248;
    const double C13992 = C13795 * C248;
    const double C31009 = C30812 * C248;
    const double C47430 = C47233 * C248;
    const double C93046 = C92849 * C248;
    const double C1305 = C307 * C1009;
    const double C1606 = C554 * C1009;
    const double C13988 = C13796 * C1009;
    const double C14906 = C13795 * C1009;
    const double C31945 = C30812 * C1009;
    const double C47426 = C47234 * C1009;
    const double C48338 = C47233 * C1009;
    const double C93978 = C92849 * C1009;
    const double C1308 = C307 * C1010;
    const double C1609 = C554 * C1010;
    const double C13986 = C13796 * C1010;
    const double C14904 = C13795 * C1010;
    const double C31943 = C30812 * C1010;
    const double C47424 = C47234 * C1010;
    const double C48336 = C47233 * C1010;
    const double C93976 = C92849 * C1010;
    const double C2173 = C307 * C1877;
    const double C2474 = C554 * C1877;
    const double C15873 = C13795 * C1877;
    const double C31005 = C30813 * C1877;
    const double C32984 = C30812 * C1877;
    const double C49268 = C47233 * C1877;
    const double C93042 = C92850 * C1877;
    const double C94980 = C92849 * C1877;
    const double C2168 = C307 * C1878;
    const double C2469 = C554 * C1878;
    const double C15871 = C13795 * C1878;
    const double C31003 = C30813 * C1878;
    const double C32982 = C30812 * C1878;
    const double C49266 = C47233 * C1878;
    const double C93040 = C92850 * C1878;
    const double C94978 = C92849 * C1878;
    const double C17174 = C554 * C2745;
    const double C79271 = C30812 * C2745;
    const double C111958 = C92849 * C2745;
    const double C17857 = C554 * C3489;
    const double C79889 = C30812 * C3489;
    const double C112574 = C92849 * C3489;
    const double C18861 = C554 * C4075;
    const double C35136 = C307 * C4075;
    const double C77401 = C30813 * C4075;
    const double C78065 = C47234 * C4075;
    const double C80544 = C47233 * C4075;
    const double C80888 = C30812 * C4075;
    const double C110146 = C92850 * C4075;
    const double C110756 = C13796 * C4075;
    const double C113204 = C13795 * C4075;
    const double C113548 = C92849 * C4075;
    const double C18866 = C554 * C4080;
    const double C35138 = C307 * C4080;
    const double C79269 = C30813 * C4080;
    const double C80550 = C47233 * C4080;
    const double C80546 = C47234 * C4080;
    const double C80890 = C30812 * C4080;
    const double C111956 = C92850 * C4080;
    const double C113210 = C13795 * C4080;
    const double C113206 = C13796 * C4080;
    const double C113550 = C92849 * C4080;
    const double C36112 = C307 * C4831;
    const double C81560 = C47233 * C4831;
    const double C114164 = C13795 * C4831;
    const double C328 = C139448 * C316;
    const double C47249 = C47031 * C316;
    const double C326 = C139448 * C310;
    const double C47245 = C47031 * C310;
    const double C330 = C139448 * C311;
    const double C47255 = C47031 * C311;
    const double C1105 = C139448 * C1093;
    const double C13799 = C139598 * C1093;
    const double C47237 = C139598 * C1093;
    const double C48103 = C47031 * C1093;
    const double C1109 = C139448 * C1095;
    const double C13809 = C139598 * C1095;
    const double C47247 = C139598 * C1095;
    const double C48113 = C47031 * C1095;
    const double C1973 = C139448 * C1961;
    const double C49033 = C47031 * C1961;
    const double C1977 = C139448 * C1963;
    const double C49043 = C47031 * C1963;
    const double C34909 = C139448 * C4161;
    const double C77854 = C139598 * C4161;
    const double C80313 = C47031 * C4161;
    const double C110545 = C139598 * C4161;
    const double C35888 = C139448 * C4913;
    const double C81353 = C47031 * C4913;
    const double C37677 = C139448 * C6343;
    const double C83123 = C47031 * C6343;
    const double C575 = C139463 * C563;
    const double C92865 = C92451 * C563;
    const double C573 = C139463 * C557;
    const double C92861 = C92451 * C557;
    const double C577 = C139463 * C558;
    const double C92871 = C92451 * C558;
    const double C1407 = C139463 * C1395;
    const double C93743 = C92451 * C1395;
    const double C1411 = C139463 * C1397;
    const double C93753 = C92451 * C1397;
    const double C2275 = C139463 * C2263;
    const double C30816 = C139600 * C2263;
    const double C92853 = C139600 * C2263;
    const double C94745 = C92451 * C2263;
    const double C2279 = C139463 * C2265;
    const double C30826 = C139600 * C2265;
    const double C92863 = C139600 * C2265;
    const double C94755 = C92451 * C2265;
    const double C16949 = C139463 * C3105;
    const double C111749 = C92451 * C3105;
    const double C17708 = C139463 * C3707;
    const double C112425 = C92451 * C3707;
    const double C18628 = C139463 * C4407;
    const double C77188 = C139600 * C4407;
    const double C109933 = C139600 * C4407;
    const double C113321 = C92451 * C4407;
    const double C18630 = C139463 * C4412;
    const double C79060 = C139600 * C4412;
    const double C111747 = C139600 * C4412;
    const double C113323 = C92451 * C4412;
    const double C137399 = C137395 + C137384;
    const double C137423 = C137413 / C137082;
    const double C138508 = C137413 / C137336;
    const double C137802 = C137799 * ce;
    const double C138509 = 2 * C137799;
    const double C138720 = C137535 * C137799;
    const double C20835 =
        (2 * C137535 * C138104 + C137535 * (C138104 + C137799 * C137771)) /
        C137060;
    const double C137861 = C137858 * ce;
    const double C138790 = 2 * C137858;
    const double C138196 = C137363 + C138194;
    const double C138412 = C137363 + C138410;
    const double C137398 = C137394 + C137380;
    const double C137424 = C137414 / C137336;
    const double C137803 = ae * C137800;
    const double C138529 = -2 * C137800;
    const double C138739 = C137535 * C137800;
    const double C20833 = (-2 * C137535 * C138119) / C137082 -
                          (C137535 * (C137800 * C137771 + C138119)) / C137082;
    const double C137862 = ae * C137859;
    const double C138810 = -2 * C137859;
    const double C138212 = C138210 + C137362;
    const double C138439 = C138437 + C137362;
    const double C137397 = C137393 * C137344;
    const double C137455 = C137447 + C137432;
    const double C138565 = C138556 + C137432;
    const double C138868 = C138857 + C137432;
    const double C137438 = C137373 + C137430;
    const double C137440 = C137429 * ae;
    const double C137437 = C137429 * ce;
    const double C138244 = C137429 * C137649;
    const double C138243 = C137477 * C137429;
    const double C138489 = C137429 * C137771;
    const double C138488 = C137535 * C137429;
    const double C137452 = C137444 + C137428;
    const double C138562 = C138551 + C137428;
    const double C138864 = C138851 + C137428;
    const double C137451 = C137443 * C137344;
    const double C137665 = C137664 * C137344;
    const double C137787 = C137786 * C137344;
    const double C138564 = C137373 + C138553;
    const double C138566 = C138552 * ae;
    const double C138563 = C138552 * ce;
    const double C138761 = C138552 * C137771;
    const double C138760 = C137535 * C138552;
    const double C138736 = C137373 + C138734;
    const double C138869 = C138852 * ae;
    const double C138865 = C138852 * ce;
    const double C137501 = C137499 + C137489;
    const double C137513 = C137509 / C137336;
    const double C137514 = -2 * C137506;
    const double C137511 = ae * C137506;
    const double C137972 = C137477 * C137506;
    const double C138444 = C137535 * C137506;
    const double C6226 = (-2 * C137535 * C137491) / C137082 -
                         (C137535 * (C137506 * C137771 + C137491)) / C137082;
    const double C138225 = C138219 + C137380;
    const double C138457 = C138455 + C137489;
    const double C138659 = ae * C138656;
    const double C138829 = -2 * C138656;
    const double C137559 = C137557 + C137547;
    const double C137571 = C137567 / C137336;
    const double C137572 = -2 * C137564;
    const double C137569 = ae * C137564;
    const double C138127 = C137477 * C137564;
    const double C138163 = C137535 * C137564;
    const double C3488 = (-2 * C137477 * C137549) / C137082 -
                         (C137477 * (C137564 * C137649 + C137549)) / C137082;
    const double C4079 = -(C137535 * (C137564 * C137649 + C137549) +
                           (C137358 + C137381 * C137649) * ce) /
                         C137082;
    const double C138278 = C138276 + C137547;
    const double C138384 = C137535 * C138381;
    const double C138597 = -2 * C138381;
    const double C138595 = ae * C138381;
    const double C138470 = C138464 + C137380;
    const double C137616 = C137604 + C137614;
    const double C137628 = C137624 / C137336;
    const double C138548 = C137624 / C137082;
    const double C137629 = 2 * C137621;
    const double C137626 = C137621 * ce;
    const double C137974 = C137477 * C137621;
    const double C138425 = C137535 * C137621;
    const double C6342 =
        (2 * C137535 * C137606 + C137535 * (C137606 + C137621 * C137771)) /
        C137060;
    const double C138228 = C138222 + C137384;
    const double C138423 = C137604 + C138422;
    const double C138658 = C138655 * ce;
    const double C138804 = 2 * C138655;
    const double C137659 = C137658 * C137344;
    const double C137717 = C137705 + C137715;
    const double C137729 = C137725 / C137336;
    const double C138848 = C137725 / C137082;
    const double C137730 = 2 * C137722;
    const double C137727 = C137722 * ce;
    const double C138128 = C137477 * C137722;
    const double C138165 = C137535 * C137722;
    const double C3706 =
        (2 * C137477 * C137707 + C137477 * (C137707 + C137722 * C137649)) /
        C137060;
    const double C4411 = (C137535 * (C137707 + C137722 * C137649) +
                          (C137358 + C137381 * C137649) * ae) /
                         C137060;
    const double C138288 = C137705 + C138286;
    const double C138385 = C137535 * C138383;
    const double C138623 = 2 * C138383;
    const double C138621 = C138383 * ce;
    const double C138473 = C138467 + C137384;
    const double C137781 = C137780 * C137344;
    const double C137385 = -C137376;
    const double C19912 = C13591 * C5477;
    const double C67964 = C139289 * C5477;
    const double C3548 =
        2 * ((-(C137477 * C137603) / C137082) / C137060 -
             (ae * C137349) / C137336) -
        (ae * (C137362 * C137649 + C137349)) / C137336 +
        C137477 *
            ((-(ae * C137477 * C137362) / C137082) / C137060 -
             C137603 / C137336 +
             C137477 * ((-(C137477 * C137610) / C137082) / C137060 - C137377));
    const double C6508 =
        2 * ((-(C137535 * C137704) / C137082) / C137060 -
             (ae * C137349) / C137336) -
        (ae * (C137362 * C137771 + C137349)) / C137336 +
        C137535 *
            ((-(ae * C137535 * C137362) / C137082) / C137060 -
             C137704 / C137336 +
             C137535 * ((-(C137535 * C137711) / C137082) / C137060 - C137377));
    const double C20545 = C554 * C5474;
    const double C36840 = C307 * C5474;
    const double C80654 = C30813 * C5474;
    const double C81346 = C47234 * C5474;
    const double C82296 = C47233 * C5474;
    const double C82614 = C30812 * C5474;
    const double C113314 = C92850 * C5474;
    const double C113950 = C13796 * C5474;
    const double C114860 = C13795 * C5474;
    const double C115178 = C92849 * C5474;
    const double C111 = 3 * (C137342 + C137352 * C137343) +
                        C137335 * (2 * C137358 + C137335 * C137389);
    const double C831 = C137477 * (2 * C137358 + C137335 * C137389);
    const double C1699 = C137535 * (2 * C137358 + C137335 * C137389);
    const double C2572 = C137342 + C137352 * C137343 + C137389 * C137649;
    const double C3893 = C137535 * C137477 * C137389;
    const double C4658 = C137342 + C137352 * C137343 + C137389 * C137771;
    const double C5470 = C137477 * C137358 + C137973 * C137771;
    const double C17251 = 3 * (C137342 + C137352 * C137649) +
                          C137477 * (2 * C137966 + C137477 * C138227);
    const double C17959 = C137535 * (2 * C137966 + C137477 * C138227);
    const double C19903 = C137342 + C137352 * C137649 + C138227 * C137771;
    const double C37434 = 3 * (C137342 + C137352 * C137771) +
                          C137535 * (2 * C138158 + C137535 * C138472);
    const double C6561 =
        2 * ((-(C137535 * C137755) / C137082) / C137060 -
             (ae * C137483) / C137336) -
        (ae * (C137489 * C137771 + C137483)) / C137336 +
        C137535 *
            ((-(ae * C137535 * C137489) / C137082) / C137060 -
             C137755 / C137336 +
             C137535 * ((-(C137535 * C137758) / C137082) / C137060 - C137496));
    const double C5013 = C307 * C4747;
    const double C5291 = C554 * C4747;
    const double C19381 = C13795 * C4747;
    const double C32872 = C30813 * C4747;
    const double C36332 = C30812 * C4747;
    const double C52574 = C47233 * C4747;
    const double C94868 = C92850 * C4747;
    const double C98214 = C92849 * C4747;
    const double C3654 =
        2 * ((-(C137477 * C137679) / C137082) / C137060 -
             (ae * C137541) / C137336) -
        (ae * (C137547 * C137649 + C137541)) / C137336 +
        C137477 *
            ((-(ae * C137477 * C137547) / C137082) / C137060 -
             C137679 / C137336 +
             C137477 * ((-(C137477 * C137682) / C137082) / C137060 - C137554));
    const double C3023 = C307 * C2746;
    const double C3301 = C554 * C2746;
    const double C14902 = C13796 * C2746;
    const double C16833 = C13795 * C2746;
    const double C33912 = C30812 * C2746;
    const double C48334 = C47234 * C2746;
    const double C50224 = C47233 * C2746;
    const double C95888 = C92849 * C2746;
    const double C4330 =
        (-(C137535 * C137679) / C137082) / C137060 - (C137598 * ce) / C137336 -
        (ae * (C137535 * C137477 * C137547 + C137966 * ce)) / C137336 +
        C137477 *
            (C137477 * ((-(C137535 * C137682) / C137082) / C137060 - C137611) -
             (ae * (C137535 * C137547 + C137357)) / C137336);
    const double C5872 =
        C137477 *
            ((-(C137535 * C137604 * ce) / C137082) / C137060 -
             C137679 / C137336 +
             C137535 * ((-(C137535 * C137682) / C137082) / C137060 - C137611)) -
        (ae * (C137535 * (C137535 * C137547 + C137357) + C137541 +
               C137535 * C137352 * ce)) /
            C137336;
    const double C6450 =
        2 * ((-(C137535 * C137679) / C137082) / C137060 -
             (C137598 * ce) / C137336) -
        ((C137598 + C137604 * C137771) * ce) / C137336 +
        C137535 *
            ((-(C137535 * C137604 * ce) / C137082) / C137060 -
             C137679 / C137336 +
             C137535 * ((-(C137535 * C137682) / C137082) / C137060 - C137611));
    const double C138223 = -C138217;
    const double C4923 = C139448 * C4914;
    const double C52467 = C47031 * C4914;
    const double C3761 =
        2 * ((-(C137477 * C137755) / C137082) / C137060 -
             (C137699 * ce) / C137336) -
        ((C137699 + C137705 * C137649) * ce) / C137336 +
        C137477 *
            ((-(C137477 * C137705 * ce) / C137082) / C137060 -
             C137755 / C137336 +
             C137477 * ((-(C137477 * C137758) / C137082) / C137060 - C137712));
    const double C138468 = -C138462;
    const double C3115 = C139463 * C3106;
    const double C95677 = C92451 * C3106;
    const double C138514 = C137477 * C138512;
    const double C138727 = C137799 + C138725;
    const double C138795 = C137535 * C138793;
    const double C138537 = C137477 * C138534;
    const double C138745 = C138743 + C137800;
    const double C138818 = C137535 * C138815;
    const double C137525 = C137335 * C137522;
    const double C137978 = C137477 * C137522;
    const double C138448 = C138446 + C137506;
    const double C138837 = C137535 * C138834;
    const double C137583 = C137335 * C137580;
    const double C138130 = C137477 * C137580;
    const double C138169 = C137535 * C137580;
    const double C138270 = C138268 + C137564;
    const double C138393 = C137535 * C138390;
    const double C138605 = C137477 * C138602;
    const double C138712 = C137535 * C138602;
    const double C137639 = C137335 * C137636;
    const double C137980 = C137477 * C137636;
    const double C138427 = C137621 + C138426;
    const double C138805 = C137535 * C138737;
    const double C137740 = C137335 * C137737;
    const double C138131 = C137477 * C137737;
    const double C138171 = C137535 * C137737;
    const double C138299 = C137722 + C138297;
    const double C138394 = C137535 * C138392;
    const double C138630 = C137477 * C138627;
    const double C138714 = C137535 * C138627;
    const double C14443 = C13591 * C931;
    const double C14439 = C139587 * C931;
    const double C47871 = C139587 * C931;
    const double C63987 = C139289 * C931;
    const double C32192 = C13591 * C1796;
    const double C32188 = C139587 * C1796;
    const double C77633 = C139289 * C1796;
    const double C94221 = C139587 * C1796;
    const double C16400 = C13591 * C2667;
    const double C63985 = C139289 * C2667;
    const double C18094 = C13591 * C3995;
    const double C66635 = C139289 * C3995;
    const double C35663 = C13591 * C4750;
    const double C81133 = C139289 * C4750;
    const double C137500 = C137498 / C137082;
    const double C37522 =
        3 * ((-(C137495 * C137771) / C137082) / C137060 - C137488 / C137336) +
        C137535 *
            ((-2 * C137535 * C137495) / C137336 +
             C137535 * ((-(C137512 * C137771) / C137082) / C137060 - C137507));
    const double C138195 = C138192 / C137082;
    const double C17344 = C13591 * C3436;
    const double C65396 = C139289 * C3436;
    const double C18100 = C13591 * C4000;
    const double C66637 = C139289 * C4000;
    const double C20028 = C13591 * C5560;
    const double C68056 = C139289 * C5560;
    const double C37525 = C13591 * C6230;
    const double C82978 = C139289 * C6230;
    const double C137521 = C137517 / C137082;
    const double C138511 = C138507 / C137082;
    const double C138783 = C138782 / C137082;
    const double C332 = C139448 * C317;
    const double C47259 = C47031 * C317;
    const double C1107 = C139448 * C1099;
    const double C13803 = C139598 * C1099;
    const double C47241 = C139598 * C1099;
    const double C48107 = C47031 * C1099;
    const double C1975 = C139448 * C1967;
    const double C49037 = C47031 * C1967;
    const double C34911 = C139448 * C4167;
    const double C77858 = C139598 * C4167;
    const double C80317 = C47031 * C4167;
    const double C110549 = C139598 * C4167;
    const double C35886 = C139448 * C4917;
    const double C81349 = C47031 * C4917;
    const double C137615 = C137613 / C137082;
    const double C20239 =
        (-(C137610 * C137771) / C137082) / C137060 - C137603 / C137336 -
        (ae * (C137800 * C137771 + C138119)) / C137336 +
        C137477 *
            (C137477 * ((-(C137627 * C137771) / C137082) / C137060 - C137622) -
             (ae * (C137387 * C137771 + C137362)) / C137336);
    const double C138211 = C138209 / C137082;
    const double C21047 =
        (((-2 * C137535 * C137362) / C137082 -
          (C137535 * (C137387 * C137771 + C137362)) / C137082) *
         ae) /
            C137060 +
        C137477 *
            ((-2 * C138315) / C137336 +
             C137535 * ((-(C137627 * C137771) / C137082) / C137060 - C137622));
    const double C37674 =
        3 * ((-(C137610 * C137771) / C137082) / C137060 - C137603 / C137336) +
        C137535 *
            ((-2 * C138315) / C137336 +
             C137535 * ((-(C137627 * C137771) / C137082) / C137060 - C137622));
    const double C34917 = C139448 * C4172;
    const double C80325 = C47031 * C4172;
    const double C80319 = C139598 * C4172;
    const double C112979 = C139598 * C4172;
    const double C36841 = C139448 * C5720;
    const double C81347 = C139598 * C5720;
    const double C82297 = C47031 * C5720;
    const double C113951 = C139598 * C5720;
    const double C37679 = C139448 * C6346;
    const double C83127 = C47031 * C6346;
    const double C137635 = C137632 / C137082;
    const double C138532 = C138528 / C137082;
    const double C138649 = C137477 * C138648;
    const double C138686 = C138685 / C137082;
    const double C14559 = C13591 * C1015;
    const double C14557 = C139587 * C1015;
    const double C47989 = C139587 * C1015;
    const double C64082 = C139289 * C1015;
    const double C32306 = C13591 * C1883;
    const double C32302 = C139587 * C1883;
    const double C77747 = C139289 * C1883;
    const double C94335 = C139587 * C1883;
    const double C16512 = C13591 * C2749;
    const double C64079 = C139289 * C2749;
    const double C18210 = C13591 * C4081;
    const double C66723 = C139289 * C4081;
    const double C35767 = C13591 * C4835;
    const double C81240 = C139289 * C4835;
    const double C137558 = C137556 / C137082;
    const double C17415 =
        3 * ((-(C137553 * C137649) / C137082) / C137060 - C137546 / C137336) +
        C137477 *
            ((-2 * C137477 * C137553) / C137336 +
             C137477 * ((-(C137570 * C137649) / C137082) / C137060 - C137565));
    const double C138411 = C138409 / C137082;
    const double C17418 = C13591 * C3492;
    const double C65477 = C139289 * C3492;
    const double C18212 = C13591 * C4086;
    const double C66728 = C139289 * C4086;
    const double C20134 = C13591 * C5640;
    const double C68143 = C139289 * C5640;
    const double C37603 = C13591 * C6290;
    const double C83052 = C139289 * C6290;
    const double C137579 = C137575 / C137082;
    const double C138522 = C138521 / C137082;
    const double C138724 = C137535 * C138721;
    const double C138792 = C138789 / C137082;
    const double C488 = C139448 * C477;
    const double C47431 = C47031 * C477;
    const double C1309 = C139448 * C1300;
    const double C13987 = C139598 * C1300;
    const double C47425 = C139598 * C1300;
    const double C48337 = C47031 * C1300;
    const double C2169 = C139448 * C2160;
    const double C49267 = C47031 * C2160;
    const double C35137 = C139448 * C4327;
    const double C78066 = C139598 * C4327;
    const double C80545 = C47031 * C4327;
    const double C110757 = C139598 * C4327;
    const double C36113 = C139448 * C5095;
    const double C81561 = C47031 * C5095;
    const double C4328 = C137477 * ((-(C137535 * C137985) / C137082) / C137060 -
                                    (C137606 * ce) / C137336) -
                         (ae * (C137535 * C137549 + C137358 * ce)) / C137336;
    const double C5096 = (-(C137535 * C137606 * ce) / C137082) / C137060 -
                         (C137335 * C137679) / C137336 +
                         C137535 * ((-(C137535 * C137985) / C137082) / C137060 -
                                    (C137606 * ce) / C137336);
    const double C138277 = C138275 / C137082;
    const double C138322 = C138321 / C137082;
    const double C492 = C139448 * C478;
    const double C1306 = C139448 * C1299;
    const double C13989 = C139598 * C1299;
    const double C47427 = C139598 * C1299;
    const double C48339 = C47031 * C1299;
    const double C2174 = C139448 * C2161;
    const double C49269 = C47031 * C2161;
    const double C3024 = C139448 * C3018;
    const double C14903 = C139598 * C3018;
    const double C48335 = C139598 * C3018;
    const double C50225 = C47031 * C3018;
    const double C137688 = C137687 / C137082;
    const double C138267 = C137477 * C138264;
    const double C138327 = C137535 * C138264;
    const double C138600 = C138596 / C137082;
    const double C138671 = C138669 / C137082;
    const double C579 = C139463 * C564;
    const double C92875 = C92451 * C564;
    const double C1409 = C139463 * C1401;
    const double C93747 = C92451 * C1401;
    const double C2277 = C139463 * C2269;
    const double C30820 = C139600 * C2269;
    const double C92857 = C139600 * C2269;
    const double C94749 = C92451 * C2269;
    const double C16947 = C139463 * C3109;
    const double C111745 = C92451 * C3109;
    const double C18626 = C139463 * C4413;
    const double C77192 = C139600 * C4413;
    const double C109937 = C139600 * C4413;
    const double C113317 = C92451 * C4413;
    const double C137716 = C137714 / C137082;
    const double C17697 =
        3 * ((-(C137711 * C137649) / C137082) / C137060 - C137704 / C137336) +
        C137477 *
            ((-2 * C137477 * C137711) / C137336 +
             C137477 * ((-(C137728 * C137649) / C137082) / C137060 - C137723));
    const double C138438 = C138436 / C137082;
    const double C17710 = C139463 * C3710;
    const double C112429 = C92451 * C3710;
    const double C18632 = C139463 * C4418;
    const double C79056 = C139600 * C4418;
    const double C111743 = C139600 * C4418;
    const double C113327 = C92451 * C4418;
    const double C20546 = C139463 * C5954;
    const double C80655 = C139600 * C5954;
    const double C113315 = C139600 * C5954;
    const double C115179 = C92451 * C5954;
    const double C137736 = C137733 / C137082;
    const double C138616 = C138615 / C137082;
    const double C138742 = C137535 * C138740;
    const double C138813 = C138809 / C137082;
    const double C655 = C139463 * C644;
    const double C92963 = C92451 * C644;
    const double C1507 = C139463 * C1498;
    const double C93867 = C92451 * C1498;
    const double C2373 = C139463 * C2365;
    const double C30920 = C139600 * C2365;
    const double C92957 = C139600 * C2365;
    const double C94867 = C92451 * C2365;
    const double C17064 = C139463 * C3199;
    const double C111853 = C92451 * C3199;
    const double C18750 = C139463 * C4493;
    const double C77296 = C139600 * C4493;
    const double C110041 = C139600 * C4493;
    const double C113437 = C92451 * C4493;
    const double C4495 = C137535 * ((-(C137477 * C137992) / C137082) / C137060 -
                                    (C137707 * ce) / C137336) -
                         (ae * (C137477 * C137491 + C137358 * ce)) / C137336;
    const double C5286 = (-(ae * C137535 * C137491) / C137082) / C137060 -
                         (C137335 * C137755) / C137336 +
                         C137535 * ((-(C137535 * C137992) / C137082) / C137060 -
                                    (ae * C137491) / C137336);
    const double C138287 = C138285 / C137082;
    const double C138456 = C138454 / C137082;
    const double C659 = C139463 * C645;
    const double C1512 = C139463 * C1499;
    const double C93869 = C92451 * C1499;
    const double C2376 = C139463 * C2366;
    const double C30922 = C139600 * C2366;
    const double C92959 = C139600 * C2366;
    const double C94871 = C92451 * C2366;
    const double C3210 = C139463 * C3200;
    const double C95785 = C92451 * C3200;
    const double C137764 = C137763 / C137082;
    const double C138296 = C137477 * C138293;
    const double C138445 = C137535 * C138293;
    const double C138626 = C138622 / C137082;
    const double C138832 = C138828 / C137082;
    const double C14320 = C13595 * C830;
    const double C14318 = C13595 * C838;
    const double C14314 = C13595 * C829;
    const double C14308 = C13595 * C839;
    const double C14304 = C13595 * C832;
    const double C14448 = C13595 * C925;
    const double C14442 = C13595 * C926;
    const double C14440 = C13595 * C927;
    const double C14562 = C13595 * C1009;
    const double C14558 = C13595 * C1010;
    const double C14554 = C13595 * C1011;
    const double C16287 = C13595 * C2570;
    const double C16283 = C13595 * C2577;
    const double C16399 = C13595 * C2663;
    const double C16513 = C13595 * C2746;
    const double C16511 = C13595 * C2745;
    const double C17263 = C13595 * C3370;
    const double C17259 = C13595 * C3367;
    const double C17417 = C13595 * C3489;
    const double C17979 = C13595 * C3905;
    const double C17975 = C13595 * C3896;
    const double C17973 = C13595 * C3891;
    const double C17969 = C13595 * C3900;
    const double C18093 = C13595 * C3989;
    const double C18211 = C13595 * C4080;
    const double C18209 = C13595 * C4075;
    const double C19915 = C13595 * C5474;
    const double C32067 = C13595 * C1698;
    const double C32065 = C13595 * C1706;
    const double C32061 = C13595 * C1697;
    const double C32055 = C13595 * C1707;
    const double C32051 = C13595 * C1700;
    const double C32193 = C13595 * C1792;
    const double C32191 = C13595 * C1791;
    const double C32185 = C13595 * C1794;
    const double C32311 = C13595 * C1877;
    const double C32305 = C13595 * C1878;
    const double C32303 = C13595 * C1879;
    const double C35544 = C13595 * C4656;
    const double C35540 = C13595 * C4663;
    const double C35662 = C13595 * C4746;
    const double C35656 = C13595 * C4747;
    const double C35766 = C13595 * C4831;
    const double C37446 = C13595 * C6168;
    const double C37442 = C13595 * C6165;
    const double C37524 = C13595 * C6227;
    const double C14312 = C13596 * C830;
    const double C14310 = C13596 * C838;
    const double C14306 = C13596 * C829;
    const double C14444 = C13596 * C925;
    const double C14438 = C13596 * C926;
    const double C14560 = C13596 * C1009;
    const double C14556 = C13596 * C1010;
    const double C16509 = C13596 * C2746;
    const double C32059 = C13596 * C1698;
    const double C32057 = C13596 * C1706;
    const double C32053 = C13596 * C1697;
    const double C32189 = C13596 * C1792;
    const double C32187 = C13596 * C1791;
    const double C32307 = C13596 * C1877;
    const double C32301 = C13596 * C1878;
    const double C35660 = C13596 * C4747;
    const double C47752 = C47033 * C830;
    const double C47750 = C47033 * C838;
    const double C47746 = C47033 * C829;
    const double C47740 = C47033 * C839;
    const double C47736 = C47033 * C832;
    const double C47880 = C47033 * C925;
    const double C47874 = C47033 * C926;
    const double C47872 = C47033 * C927;
    const double C47994 = C47033 * C1009;
    const double C47990 = C47033 * C1010;
    const double C47986 = C47033 * C1011;
    const double C49678 = C47033 * C2570;
    const double C49674 = C47033 * C2577;
    const double C49790 = C47033 * C2663;
    const double C49904 = C47033 * C2746;
    const double C49902 = C47033 * C2745;
    const double C50594 = C47033 * C3370;
    const double C50590 = C47033 * C3367;
    const double C50740 = C47033 * C3489;
    const double C51252 = C47033 * C3905;
    const double C51248 = C47033 * C3896;
    const double C51246 = C47033 * C3891;
    const double C51242 = C47033 * C3900;
    const double C51362 = C47033 * C3989;
    const double C51476 = C47033 * C4080;
    const double C51474 = C47033 * C4075;
    const double C53080 = C47033 * C5474;
    const double C94100 = C47033 * C1698;
    const double C94098 = C47033 * C1706;
    const double C94094 = C47033 * C1697;
    const double C94088 = C47033 * C1707;
    const double C94084 = C47033 * C1700;
    const double C94226 = C47033 * C1792;
    const double C94224 = C47033 * C1791;
    const double C94218 = C47033 * C1794;
    const double C94344 = C47033 * C1877;
    const double C94338 = C47033 * C1878;
    const double C94336 = C47033 * C1879;
    const double C97478 = C47033 * C4656;
    const double C97474 = C47033 * C4663;
    const double C97596 = C47033 * C4746;
    const double C97590 = C47033 * C4747;
    const double C97700 = C47033 * C4831;
    const double C99276 = C47033 * C6168;
    const double C99272 = C47033 * C6165;
    const double C99350 = C47033 * C6227;
    const double C47744 = C47034 * C830;
    const double C47742 = C47034 * C838;
    const double C47738 = C47034 * C829;
    const double C47876 = C47034 * C925;
    const double C47870 = C47034 * C926;
    const double C47992 = C47034 * C1009;
    const double C47988 = C47034 * C1010;
    const double C49900 = C47034 * C2746;
    const double C94092 = C47034 * C1698;
    const double C94090 = C47034 * C1706;
    const double C94086 = C47034 * C1697;
    const double C94222 = C47034 * C1792;
    const double C94220 = C47034 * C1791;
    const double C94340 = C47034 * C1877;
    const double C94334 = C47034 * C1878;
    const double C97594 = C47034 * C4747;
    const double C63874 = C63381 * C2577;
    const double C63872 = C63381 * C2570;
    const double C63868 = C63381 * C830;
    const double C63866 = C63381 * C838;
    const double C63864 = C63381 * C829;
    const double C63862 = C63381 * C839;
    const double C63860 = C63381 * C832;
    const double C63990 = C63381 * C925;
    const double C63986 = C63381 * C926;
    const double C63984 = C63381 * C2663;
    const double C63982 = C63381 * C927;
    const double C64087 = C63381 * C1009;
    const double C64084 = C63381 * C2746;
    const double C64081 = C63381 * C1010;
    const double C64078 = C63381 * C2745;
    const double C64075 = C63381 * C1011;
    const double C65306 = C63381 * C3367;
    const double C65304 = C63381 * C3370;
    const double C65476 = C63381 * C3489;
    const double C66539 = C63381 * C3891;
    const double C66537 = C63381 * C3900;
    const double C66535 = C63381 * C3896;
    const double C66533 = C63381 * C3905;
    const double C66634 = C63381 * C3989;
    const double C66727 = C63381 * C4080;
    const double C66722 = C63381 * C4075;
    const double C67965 = C63381 * C5474;
    const double C77511 = C63381 * C1698;
    const double C77509 = C63381 * C1706;
    const double C77507 = C63381 * C1697;
    const double C77505 = C63381 * C1707;
    const double C77503 = C63381 * C1700;
    const double C77636 = C63381 * C1792;
    const double C77632 = C63381 * C1791;
    const double C77626 = C63381 * C1794;
    const double C77748 = C63381 * C1877;
    const double C77746 = C63381 * C1878;
    const double C77744 = C63381 * C1879;
    const double C81004 = C63381 * C4656;
    const double C81002 = C63381 * C4663;
    const double C81132 = C63381 * C4746;
    const double C81125 = C63381 * C4747;
    const double C81239 = C63381 * C4831;
    const double C82902 = C63381 * C6168;
    const double C82900 = C63381 * C6165;
    const double C82977 = C63381 * C6227;
    const double C47747 = C47029 * C834;
    const double C47741 = C47029 * C846;
    const double C47737 = C47029 * C840;
    const double C47875 = C47029 * C931;
    const double C47873 = C47029 * C932;
    const double C47991 = C47029 * C1015;
    const double C47987 = C47029 * C1016;
    const double C49679 = C47029 * C2574;
    const double C49791 = C47029 * C2667;
    const double C49903 = C47029 * C2749;
    const double C50591 = C47029 * C3373;
    const double C50671 = C47029 * C3436;
    const double C50741 = C47029 * C3492;
    const double C51249 = C47029 * C3908;
    const double C51247 = C47029 * C3897;
    const double C51369 = C47029 * C4000;
    const double C51363 = C47029 * C3995;
    const double C51477 = C47029 * C4086;
    const double C51475 = C47029 * C4081;
    const double C53077 = C47029 * C5477;
    const double C53189 = C47029 * C5560;
    const double C53291 = C47029 * C5640;
    const double C94095 = C47029 * C1702;
    const double C94089 = C47029 * C1714;
    const double C94085 = C47029 * C1708;
    const double C94225 = C47029 * C1796;
    const double C94219 = C47029 * C1799;
    const double C94339 = C47029 * C1883;
    const double C94337 = C47029 * C1884;
    const double C97479 = C47029 * C4660;
    const double C97597 = C47029 * C4750;
    const double C97701 = C47029 * C4835;
    const double C99273 = C47029 * C6171;
    const double C99351 = C47029 * C6230;
    const double C99425 = C47029 * C6290;
    const double C100 =
        (((0 - (C137058 * C137059) / C137060) * ae) / C137060 -
         (0 * be) / C137064) /
            (2 * C137060) -
        ((C137058 *
              (((C139289 - (C137058 * 2 * C137065) / C137060) * ae) / C137060 -
               C137059 / C137064) +
          C47029) *
         be) /
            C137060 +
        (0 * ae) / C137060 - C137065 / C137062;
    const double C137101 = C137090 - C137098;
    const double C137100 = C137080 * C137096;
    const double C828 =
        ((-C137096 / C137082) / C137087 - (0 * de) / C137082) / C137087 -
        (0 * de) / C137082;
    const double C3364 = -C137096 / C137082;
    const double C7402 = (-C137096 / C137082) / C137087 - (0 * de) / C137082;
    const double C139589 = C139565 / C137086;
    const double C139567 = C139311 / C137082;
    const double C7396 = -C139588;
    const double C137172 = C137135 * C137157;
    const double C2661 =
        ((-C137154 / C137082) / C137087 -
         ((C139346 - (C137135 * C137157) / C137082) * de) / C137082) /
            C137087 -
        ((C137135 * ((-C137157 / C137082) / C137087 - (0 * de) / C137082) +
          C139360) *
         de) /
            C137082;
    const double C2662 =
        ((-C137157 / C137082) / C137087 - (0 * de) / C137082) / C137087 -
        (0 * de) / C137082;
    const double C6772 = (-C137157 / C137082) / C137087 - (0 * de) / C137082;
    const double C137182 = C137179 - C137175;
    const double C139592 = C139574 / C137086;
    const double C139576 = C139363 / C137082;
    const double C6692 = -C139591;
    const double C137217 = C137142 * C137204;
    const double C4829 =
        ((-C137201 / C137082) / C137087 -
         ((C139372 - (C137142 * C137204) / C137082) * de) / C137082) /
            C137087 -
        ((C137142 * ((-C137204 / C137082) / C137087 - (0 * de) / C137082) +
          C139384) *
         de) /
            C137082;
    const double C4830 =
        ((-C137204 / C137082) / C137087 - (0 * de) / C137082) / C137087 -
        (0 * de) / C137082;
    const double C9225 = (-C137204 / C137082) / C137087 - (0 * de) / C137082;
    const double C137227 = C137224 - C137220;
    const double C139595 = C139579 / C137086;
    const double C139581 = C139387 / C137082;
    const double C9074 = -C139594;
    const double C338 = C323 + C324;
    const double C337 = C321 + C322;
    const double C413 = C402 + C403;
    const double C493 = C482 + C483;
    const double C32432 = C32419 + C32420;
    const double C32431 = C32417 + C32418;
    const double C32539 = C32534 + C32535;
    const double C32649 = C32639 + C32640;
    const double C13821 = C13593 * C317;
    const double C13817 = C13593 * C311;
    const double C13811 = C13593 * C316;
    const double C13807 = C13593 * C310;
    const double C13805 = C13593 * C315;
    const double C13801 = C13593 * C309;
    const double C13907 = C13593 * C396;
    const double C13901 = C13593 * C395;
    const double C13993 = C13593 * C477;
    const double C13991 = C13593 * C476;
    const double C13985 = C13593 * C475;
    const double C14681 = C13593 * C1095;
    const double C14675 = C13593 * C1099;
    const double C14671 = C13593 * C1093;
    const double C14907 = C13593 * C1299;
    const double C14905 = C13593 * C1300;
    const double C15648 = C13593 * C1963;
    const double C15642 = C13593 * C1967;
    const double C15638 = C13593 * C1961;
    const double C15874 = C13593 * C2161;
    const double C15872 = C13593 * C2160;
    const double C16834 = C13593 * C3018;
    const double C19274 = C13593 * C4914;
    const double C110547 = C13593 * C1966;
    const double C110543 = C13593 * C1962;
    const double C110653 = C13593 * C2066;
    const double C110759 = C13593 * C2159;
    const double C112985 = C13593 * C4172;
    const double C112977 = C13593 * C4167;
    const double C112973 = C13593 * C4161;
    const double C113205 = C13593 * C4327;
    const double C113957 = C13593 * C4913;
    const double C113953 = C13593 * C4917;
    const double C114165 = C13593 * C5095;
    const double C114861 = C13593 * C5720;
    const double C115663 = C13593 * C6346;
    const double C115659 = C13593 * C6343;
    const double C63532 =
        (((0 - (C137279 * C137304) / C137060) * ae) / C137060 -
         (0 * be) / C137064) /
            (2 * C137060) -
        ((C137279 *
              (((C139448 - (C137279 * 2 * C137306) / C137060) * ae) / C137060 -
               C137304 / C137064) +
          C13593) *
         be) /
            C137060 +
        (0 * ae) / C137060 - C137306 / C137062;
    const double C47263 = C47242 + C47243;
    const double C47261 = C47238 + C47239;
    const double C47350 = C47338 + C47339;
    const double C47434 = C47422 + C47423;
    const double C77861 = C77855 + C77856;
    const double C77859 = C77851 + C77852;
    const double C77965 = C77961 + C77962;
    const double C78070 = C78067 + C78068;
    const double C585 = C570 + C571;
    const double C584 = C568 + C569;
    const double C660 = C649 + C650;
    const double C738 = C727 + C728;
    const double C15027 = C15014 + C15015;
    const double C15026 = C15012 + C15013;
    const double C15138 = C15128 + C15129;
    const double C15243 = C15238 + C15239;
    const double C30838 = C30408 * C564;
    const double C30834 = C30408 * C558;
    const double C30828 = C30408 * C563;
    const double C30824 = C30408 * C557;
    const double C30822 = C30408 * C562;
    const double C30818 = C30408 * C556;
    const double C30926 = C30408 * C644;
    const double C30924 = C30408 * C643;
    const double C30918 = C30408 * C642;
    const double C31008 = C30408 * C721;
    const double C31002 = C30408 * C720;
    const double C31720 = C30408 * C1397;
    const double C31714 = C30408 * C1401;
    const double C31710 = C30408 * C1395;
    const double C31836 = C30408 * C1499;
    const double C31834 = C30408 * C1498;
    const double C32759 = C30408 * C2265;
    const double C32753 = C30408 * C2269;
    const double C32749 = C30408 * C2263;
    const double C32875 = C30408 * C2366;
    const double C32871 = C30408 * C2365;
    const double C33701 = C30408 * C3106;
    const double C33809 = C30408 * C3200;
    const double C77190 = C30408 * C1400;
    const double C77186 = C30408 * C1396;
    const double C77298 = C30408 * C1497;
    const double C77400 = C30408 * C1602;
    const double C79062 = C30408 * C3105;
    const double C79058 = C30408 * C3109;
    const double C79166 = C30408 * C3199;
    const double C79744 = C30408 * C3710;
    const double C79740 = C30408 * C3707;
    const double C80667 = C30408 * C4418;
    const double C80663 = C30408 * C4412;
    const double C80661 = C30408 * C4407;
    const double C80657 = C30408 * C4413;
    const double C80777 = C30408 * C4493;
    const double C82615 = C30408 * C5954;
    const double C125166 =
        (((0 - (C137286 * C137320) / C137060) * ae) / C137060 -
         (0 * be) / C137064) /
            (2 * C137060) -
        ((C137286 *
              (((C139463 - (C137286 * 2 * C137322) / C137060) * ae) / C137060 -
               C137320 / C137064) +
          C30408) *
         be) /
            C137060 +
        (0 * ae) / C137060 - C137322 / C137062;
    const double C92879 = C92858 + C92859;
    const double C92877 = C92854 + C92855;
    const double C92966 = C92954 + C92955;
    const double C93050 = C93038 + C93039;
    const double C109940 = C109934 + C109935;
    const double C109938 = C109930 + C109931;
    const double C110045 = C110042 + C110043;
    const double C110148 = C110144 + C110145;
    const double C119 =
        (2 * (C137335 * C137350 + C137342 * ae) +
         C137335 * (C137350 + C137335 * C137369 + C137358 * ae) +
         (C137342 + C137352 * C137343) * ae) /
        C137060;
    const double C835 =
        (C137477 * (C137350 + C137335 * C137369 + C137358 * ae)) / C137060;
    const double C1703 =
        (C137535 * (C137350 + C137335 * C137369 + C137358 * ae)) / C137060;
    const double C2575 =
        (C137335 * C137350 + C137342 * ae + C137369 * C137649) / C137060;
    const double C3898 = (C137535 * C137477 * C137369) / C137060;
    const double C4661 =
        (C137335 * C137350 + C137342 * ae + C137369 * C137771) / C137060;
    const double C3545 =
        (2 * (C137477 * C137598 + C137342 * ae) +
         C137477 * (C137598 + C137477 * C137969 + C137966 * ae) +
         (C137342 + C137352 * C137649) * ae) /
        C137060;
    const double C4166 =
        (C137535 * (C137598 + C137477 * C137969 + C137966 * ae)) / C137060;
    const double C5717 =
        (C137477 * C137598 + C137342 * ae + C137969 * C137771) / C137060;
    const double C6505 =
        (2 * (C137535 * C137699 + C137342 * ae) +
         C137535 * (C137699 + C137535 * C138161 + C138158 * ae) +
         (C137342 + C137352 * C137771) * ae) /
        C137060;
    const double C2931 = C307 * C2664;
    const double C3209 = C554 * C2664;
    const double C14792 = C13796 * C2664;
    const double C16405 = C13595 * C2664;
    const double C16401 = C13596 * C2664;
    const double C16729 = C13795 * C2664;
    const double C33808 = C30812 * C2664;
    const double C48224 = C47234 * C2664;
    const double C49796 = C47033 * C2664;
    const double C49792 = C47034 * C2664;
    const double C50120 = C47233 * C2664;
    const double C63988 = C63381 * C2664;
    const double C95784 = C92849 * C2664;
    const double C2837 = C139448 * C2828;
    const double C14673 = C139598 * C2828;
    const double C16622 = C13593 * C2828;
    const double C48105 = C139598 * C2828;
    const double C50013 = C47031 * C2828;
    const double C8539 = C307 * C3990;
    const double C8877 = C554 * C3990;
    const double C15761 = C13796 * C3990;
    const double C18095 = C13596 * C3990;
    const double C23471 = C13595 * C3990;
    const double C23883 = C13795 * C3990;
    const double C31831 = C30813 * C3990;
    const double C40892 = C30812 * C3990;
    const double C49156 = C47234 * C3990;
    const double C51364 = C47034 * C3990;
    const double C56516 = C47033 * C3990;
    const double C56928 = C47233 * C3990;
    const double C70682 = C63381 * C3990;
    const double C93864 = C92850 * C3990;
    const double C102640 = C92849 * C3990;
    const double C8652 = C307 * C4076;
    const double C8990 = C554 * C4076;
    const double C15869 = C13796 * C4076;
    const double C18207 = C13596 * C4076;
    const double C23605 = C13595 * C4076;
    const double C24019 = C13795 * C4076;
    const double C31941 = C30813 * C4076;
    const double C41028 = C30812 * C4076;
    const double C49264 = C47234 * C4076;
    const double C51472 = C47034 * C4076;
    const double C56650 = C47033 * C4076;
    const double C57064 = C47233 * C4076;
    const double C70789 = C63381 * C4076;
    const double C93974 = C92850 * C4076;
    const double C102776 = C92849 * C4076;
    const double C8426 = C139448 * C4162;
    const double C15640 = C139598 * C4162;
    const double C23744 = C13593 * C4162;
    const double C49035 = C139598 * C4162;
    const double C56789 = C47031 * C4162;
    const double C8764 = C139463 * C4408;
    const double C31712 = C139600 * C4408;
    const double C40753 = C30408 * C4408;
    const double C93745 = C139600 * C4408;
    const double C102501 = C92451 * C4408;
    const double C5105 = C307 * C4832;
    const double C5383 = C554 * C4832;
    const double C19485 = C13795 * C4832;
    const double C32980 = C30813 * C4832;
    const double C35772 = C13595 * C4832;
    const double C35768 = C13596 * C4832;
    const double C36436 = C30812 * C4832;
    const double C52678 = C47233 * C4832;
    const double C81241 = C63381 * C4832;
    const double C94976 = C92850 * C4832;
    const double C97706 = C47033 * C4832;
    const double C97702 = C47034 * C4832;
    const double C98318 = C92849 * C4832;
    const double C5201 = C139463 * C5192;
    const double C32751 = C139600 * C5192;
    const double C36225 = C30408 * C5192;
    const double C94747 = C139600 * C5192;
    const double C98107 = C92451 * C5192;
    const double C2836 = C307 * C2571;
    const double C3114 = C554 * C2571;
    const double C14672 = C13796 * C2571;
    const double C16285 = C13596 * C2571;
    const double C16277 = C13595 * C2571;
    const double C16621 = C13795 * C2571;
    const double C33700 = C30812 * C2571;
    const double C48104 = C47234 * C2571;
    const double C49676 = C47034 * C2571;
    const double C49668 = C47033 * C2571;
    const double C50012 = C47233 * C2571;
    const double C63876 = C63381 * C2571;
    const double C95676 = C92849 * C2571;
    const double C16619 = C13796 * C3366;
    const double C16955 = C554 * C3366;
    const double C17261 = C13596 * C3366;
    const double C50010 = C47234 * C3366;
    const double C50592 = C47034 * C3366;
    const double C65302 = C63381 * C3366;
    const double C8425 = C307 * C3892;
    const double C8763 = C554 * C3892;
    const double C15639 = C13796 * C3892;
    const double C17971 = C13596 * C3892;
    const double C23327 = C13595 * C3892;
    const double C23743 = C13795 * C3892;
    const double C31711 = C30813 * C3892;
    const double C40752 = C30812 * C3892;
    const double C49034 = C47234 * C3892;
    const double C51244 = C47034 * C3892;
    const double C56372 = C47033 * C3892;
    const double C56788 = C47233 * C3892;
    const double C70564 = C63381 * C3892;
    const double C93744 = C92850 * C3892;
    const double C102500 = C92849 * C3892;
    const double C17977 = C13596 * C3895;
    const double C18633 = C554 * C3895;
    const double C23741 = C13796 * C3895;
    const double C33384 = C307 * C3895;
    const double C33698 = C30813 * C3895;
    const double C51250 = C47034 * C3895;
    const double C56786 = C47234 * C3895;
    const double C70570 = C63381 * C3895;
    const double C95674 = C92850 * C3895;
    const double C4922 = C307 * C4657;
    const double C5200 = C554 * C4657;
    const double C19273 = C13795 * C4657;
    const double C32750 = C30813 * C4657;
    const double C35542 = C13596 * C4657;
    const double C35534 = C13595 * C4657;
    const double C36224 = C30812 * C4657;
    const double C52466 = C47233 * C4657;
    const double C81000 = C63381 * C4657;
    const double C94746 = C92850 * C4657;
    const double C97476 = C47034 * C4657;
    const double C97468 = C47033 * C4657;
    const double C98106 = C92849 * C4657;
    const double C35894 = C307 * C6164;
    const double C36222 = C30813 * C6164;
    const double C37444 = C13596 * C6164;
    const double C98104 = C92850 * C6164;
    const double C99274 = C47034 * C6164;
    const double C128511 = C63381 * C6164;
    const double C120 =
        (-2 * (C137335 * C137349 + C137342 * ce)) / C137082 -
        (C137335 * (C137335 * C137368 + C137349 + C137358 * ce)) / C137082 -
        ((C137342 + C137352 * C137343) * ce) / C137082;
    const double C837 =
        -(C137477 * (C137335 * C137368 + C137349 + C137358 * ce)) / C137082;
    const double C1705 =
        -(C137535 * (C137335 * C137368 + C137349 + C137358 * ce)) / C137082;
    const double C2578 =
        -(C137368 * C137649 + C137335 * C137349 + C137342 * ce) / C137082;
    const double C3901 = -(C137535 * C137477 * C137368) / C137082;
    const double C4664 =
        -(C137368 * C137771 + C137335 * C137349 + C137342 * ce) / C137082;
    const double C4494 =
        C137535 *
            ((-(C137477 * C137705 * ce) / C137082) / C137060 -
             C137755 / C137336 +
             C137477 * ((-(C137477 * C137758) / C137082) / C137060 - C137712)) -
        (ae * (C137477 * C137968 + C137483 + C137966 * ce)) / C137336;
    const double C6029 =
        (-(C137477 * C137755) / C137082) / C137060 - (C137699 * ce) / C137336 -
        (ae * C137535 * C137968) / C137336 +
        C137535 *
            (C137535 * ((-(C137477 * C137758) / C137082) / C137060 - C137712) -
             (ae * C137968) / C137336);
    const double C3433 =
        (-2 * (C137477 * C137483 + C137342 * ce)) / C137082 -
        (C137477 * (C137477 * C137968 + C137483 + C137966 * ce)) / C137082 -
        ((C137342 + C137352 * C137649) * ce) / C137082;
    const double C3994 =
        -(C137535 * (C137477 * C137968 + C137483 + C137966 * ce)) / C137082;
    const double C5557 =
        -(C137968 * C137771 + C137477 * C137483 + C137342 * ce) / C137082;
    const double C6287 =
        (-2 * (C137535 * C137541 + C137342 * ce)) / C137082 -
        (C137535 * (C137535 * C138160 + C137541 + C138158 * ce)) / C137082 -
        ((C137342 + C137352 * C137771) * ce) / C137082;
    const double C128 =
        2 * ((-(C137350 * ce) / C137082) / C137060 - (ae * C137349) / C137336 -
             (C137335 * C137367) / C137336) -
        (ae * (C137335 * C137368 + C137349 + C137358 * ce)) / C137336 -
        ((C137350 + C137335 * C137369 + C137358 * ae) * ce) / C137336 +
        C137335 * ((-(ae * C137368) / C137082) / C137060 - C137367 / C137336 -
                   (C137369 * ce) / C137336 +
                   C137335 * ((-(C137363 * ce) / C137082) / C137060 -
                              (ae * C137362) / C137336 -
                              (C137335 *
                               (C137353 * C137354 +
                                C137343 * bs[5] * std::pow(C137339, 5)) *
                               C137344) /
                                  C137336));
    const double C845 = (-(C137477 * C137350 * ce) / C137082) / C137060 -
                        (ae * C137477 * C137349) / C137336 -
                        (C137335 * C137477 * C137367) / C137336;
    const double C1713 = (-(C137535 * C137350 * ce) / C137082) / C137060 -
                         (ae * C137535 * C137349) / C137336 -
                         (C137335 * C137535 * C137367) / C137336;
    const double C2582 =
        (-(C137367 * C137649) / C137082) / C137060 -
        ((C137342 + C137343 * C137340 * C137346) * C137344) / C137336;
    const double C3909 = (-(C137535 * C137477 * C137367) / C137082) / C137060;
    const double C4668 =
        (-(C137367 * C137771) / C137082) / C137060 -
        ((C137342 + C137343 * C137340 * C137346) * C137344) / C137336;
    const double C397 =
        (-2 * C137335 * C137654) / C137336 +
        C137335 *
            ((-((C137373 + C137649 * C137374 * C137375) * C137344 * C137343) /
              C137082) /
                 C137060 -
             C137654 / C137336);
    const double C1196 = (-(C137335 * C137598 * ce) / C137082) / C137060 -
                         (ae * C137335 * C137483) / C137336 -
                         (C137477 * C137335 * C137654) / C137336;
    const double C2063 = (-(C137535 * C137335 * C137654) / C137082) / C137060;
    const double C2921 =
        (-(ae * (C137477 * C137483 + C137342 * ce)) / C137082) / C137060 -
        ((C137342 + C137649 * C137340 * C137346) * C137344) / C137336 -
        ((C137477 * C137598 + C137342 * ae) * ce) / C137336 +
        C137477 * ((-(C137598 * ce) / C137082) / C137060 -
                   (ae * C137483) / C137336 - (C137477 * C137654) / C137336);
    const double C4247 = (-(C137535 * C137598 * ce) / C137082) / C137060 -
                         (ae * C137535 * C137483) / C137336 -
                         (C137477 * C137535 * C137654) / C137336;
    const double C5007 =
        (-(C137654 * C137771) / C137082) / C137060 -
        ((C137342 + C137649 * C137340 * C137346) * C137344) / C137336;
    const double C722 =
        (-2 * C137335 * C137776) / C137336 +
        C137335 *
            ((-((C137373 + C137771 * C137374 * C137375) * C137344 * C137343) /
              C137082) /
                 C137060 -
             C137776 / C137336);
    const double C1601 = (-(C137477 * C137335 * C137776) / C137082) / C137060;
    const double C2461 = (-(C137335 * C137699 * ce) / C137082) / C137060 -
                         (ae * C137335 * C137541) / C137336 -
                         (C137535 * C137335 * C137776) / C137336;
    const double C3295 =
        (-(C137776 * C137649) / C137082) / C137060 -
        ((C137342 + C137771 * C137340 * C137346) * C137344) / C137336;
    const double C4573 = (-(C137477 * C137699 * ce) / C137082) / C137060 -
                         (ae * C137477 * C137541) / C137336 -
                         (C137535 * C137477 * C137776) / C137336;
    const double C5373 =
        (-(ae * (C137535 * C137541 + C137342 * ce)) / C137082) / C137060 -
        ((C137342 + C137771 * C137340 * C137346) * C137344) / C137336 -
        ((C137535 * C137699 + C137342 * ae) * ce) / C137336 +
        C137535 * ((-(C137699 * ce) / C137082) / C137060 -
                   (ae * C137541) / C137336 - (C137535 * C137776) / C137336);
    const double C20133 = C13595 * C5637;
    const double C20761 = C554 * C5637;
    const double C37068 = C307 * C5637;
    const double C53290 = C47033 * C5637;
    const double C68142 = C63381 * C5637;
    const double C80886 = C30813 * C5637;
    const double C81562 = C47234 * C5637;
    const double C82508 = C47233 * C5637;
    const double C82824 = C30812 * C5637;
    const double C113546 = C92850 * C5637;
    const double C114166 = C13796 * C5637;
    const double C115072 = C13795 * C5637;
    const double C115388 = C92849 * C5637;
    const double C20544 = C139463 * C5951;
    const double C80659 = C139600 * C5951;
    const double C82611 = C30408 * C5951;
    const double C113319 = C139600 * C5951;
    const double C115175 = C92451 * C5951;
    const double C19911 = C13595 * C5471;
    const double C20543 = C554 * C5471;
    const double C36838 = C307 * C5471;
    const double C53076 = C47033 * C5471;
    const double C67963 = C63381 * C5471;
    const double C80658 = C30813 * C5471;
    const double C81350 = C47234 * C5471;
    const double C82292 = C47233 * C5471;
    const double C82610 = C30812 * C5471;
    const double C113318 = C92850 * C5471;
    const double C113954 = C13796 * C5471;
    const double C114856 = C13795 * C5471;
    const double C115174 = C92849 * C5471;
    const double C81962 = C63381 * C20831;
    const double C82612 = C30813 * C20831;
    const double C83124 = C47234 * C20831;
    const double C115176 = C92850 * C20831;
    const double C115660 = C13796 * C20831;
    const double C129444 = C307 * C20831;
    const double C414 = C405 + C406;
    const double C661 = C652 + C653;
    const double C47353 = C47344 + C47345;
    const double C92969 = C92960 + C92961;
    const double C494 = C485 + C486;
    const double C739 = C730 + C731;
    const double C47437 = C47428 + C47429;
    const double C93053 = C93044 + C93045;
    const double C340 = C327 + C328;
    const double C47266 = C47248 + C47249;
    const double C339 = C325 + C326;
    const double C47264 = C47244 + C47245;
    const double C341 = C329 + C330;
    const double C47269 = C47254 + C47255;
    const double C1116 = C1104 + C1105;
    const double C13822 = C13798 + C13799;
    const double C47260 = C47236 + C47237;
    const double C48118 = C48102 + C48103;
    const double C1118 = C1108 + C1109;
    const double C13827 = C13808 + C13809;
    const double C47265 = C47246 + C47247;
    const double C48123 = C48112 + C48113;
    const double C1984 = C1972 + C1973;
    const double C49048 = C49032 + C49033;
    const double C1986 = C1976 + C1977;
    const double C49053 = C49042 + C49043;
    const double C34920 = C34908 + C34909;
    const double C77860 = C77853 + C77854;
    const double C80328 = C80312 + C80313;
    const double C110551 = C110544 + C110545;
    const double C35899 = C35887 + C35888;
    const double C81357 = C81352 + C81353;
    const double C37682 = C37676 + C37677;
    const double C83130 = C83122 + C83123;
    const double C587 = C574 + C575;
    const double C92882 = C92864 + C92865;
    const double C586 = C572 + C573;
    const double C92880 = C92860 + C92861;
    const double C588 = C576 + C577;
    const double C92885 = C92870 + C92871;
    const double C1418 = C1406 + C1407;
    const double C93758 = C93742 + C93743;
    const double C1420 = C1410 + C1411;
    const double C93763 = C93752 + C93753;
    const double C2286 = C2274 + C2275;
    const double C30839 = C30815 + C30816;
    const double C92876 = C92852 + C92853;
    const double C94760 = C94744 + C94745;
    const double C2288 = C2278 + C2279;
    const double C30844 = C30825 + C30826;
    const double C92881 = C92862 + C92863;
    const double C94765 = C94754 + C94755;
    const double C16960 = C16948 + C16949;
    const double C111753 = C111748 + C111749;
    const double C17713 = C17707 + C17708;
    const double C112432 = C112424 + C112425;
    const double C18638 = C18627 + C18628;
    const double C77194 = C77187 + C77188;
    const double C109939 = C109932 + C109933;
    const double C113333 = C113320 + C113321;
    const double C18639 = C18629 + C18630;
    const double C79065 = C79059 + C79060;
    const double C111752 = C111746 + C111747;
    const double C113334 = C113322 + C113323;
    const double C137402 = C137335 * C137399;
    const double C137420 = 2 * C137399;
    const double C137412 = C137399 * ce;
    const double C138102 = C137477 * C137399;
    const double C138402 = C137535 * C137399;
    const double C3372 =
        (2 * C137477 * C137369 + C137477 * (C137369 + C137399 * C137649)) /
        C137060;
    const double C3907 = (C137535 * (C137369 + C137399 * C137649)) / C137060;
    const double C6170 =
        (2 * C137535 * C137369 + C137535 * (C137369 + C137399 * C137771)) /
        C137060;
    const double C137434 = -C137423;
    const double C137805 = C137802 / C137082;
    const double C138722 = C137802 / C137336;
    const double C20977 =
        2 * ((-(C137535 * C138365) / C137082) / C137060 -
             (C138104 * ce) / C137336) -
        ((C138104 + C137799 * C137771) * ce) / C137336 +
        C137535 *
            ((-(C137535 * C137799 * ce) / C137082) / C137060 -
             C138365 / C137336 +
             C137535 * ((-(C137535 * C137477 * C137570) / C137082) / C137060 -
                        C137802 / C137336));
    const double C81963 = C139289 * C20835;
    const double C137864 = C137861 / C137082;
    const double C18205 =
        C137535 *
            ((-2 * C137477 * C137553) / C137336 +
             C137477 * ((-(C137570 * C137649) / C137082) / C137060 - C137565)) -
        ((2 * C138104 + C137477 * C138196) * ce) / C137336;
    const double C20131 =
        (-(C137553 * C137649) / C137082) / C137060 - C137546 / C137336 -
        (C137535 * C138196 * ce) / C137336 +
        C137535 *
            (C137535 * ((-(C137570 * C137649) / C137082) / C137060 - C137565) -
             (C138196 * ce) / C137336);
    const double C17255 = (3 * (C137350 + C137363 * C137649) +
                           C137477 * (2 * C138104 + C137477 * C138196)) /
                          C137060;
    const double C17963 =
        (C137535 * (2 * C138104 + C137477 * C138196)) / C137060;
    const double C19907 =
        (C137350 + C137363 * C137649 + C138196 * C137771) / C137060;
    const double C68678 =
        (2 * C137535 * C138196 + C137535 * (C138196 + C138512 * C137771)) /
        C137060;
    const double C37438 = (3 * (C137350 + C137363 * C137771) +
                           C137535 * (2 * C138408 + C137535 * C138412)) /
                          C137060;
    const double C137401 = C137335 * C137398;
    const double C137418 = -2 * C137398;
    const double C137410 = ae * C137398;
    const double C138117 = C137477 * C137398;
    const double C138429 = C137535 * C137398;
    const double C3369 = (-2 * C137477 * C137368) / C137082 -
                         (C137477 * (C137398 * C137649 + C137368)) / C137082;
    const double C3904 = -(C137535 * (C137398 * C137649 + C137368)) / C137082;
    const double C6167 = (-2 * C137535 * C137368) / C137082 -
                         (C137535 * (C137398 * C137771 + C137368)) / C137082;
    const double C137806 = C137803 / C137336;
    const double C138527 = C137803 / C137082;
    const double C138533 = C138529 / C137082;
    const double C81964 = C63381 * C20833;
    const double C82616 = C30813 * C20833;
    const double C83128 = C47234 * C20833;
    const double C115180 = C92850 * C20833;
    const double C115664 = C13796 * C20833;
    const double C129446 = C307 * C20833;
    const double C137865 = C137862 / C137336;
    const double C138808 = C137862 / C137082;
    const double C138814 = C138810 / C137082;
    const double C18621 =
        (((-2 * C138119) / C137082 - (C137477 * C138212) / C137082) * ae) /
            C137060 +
        C137535 *
            ((-2 * C137477 * C137711) / C137336 +
             C137477 * ((-(C137728 * C137649) / C137082) / C137060 - C137723));
    const double C20541 =
        (-(C137711 * C137649) / C137082) / C137060 - C137704 / C137336 -
        (ae * C137535 * C138212) / C137336 +
        C137535 *
            (C137535 * ((-(C137728 * C137649) / C137082) / C137060 - C137723) -
             (ae * C138212) / C137336);
    const double C17253 =
        (-3 * (C137362 * C137649 + C137349)) / C137082 +
        C137477 * ((-2 * C138119) / C137082 - (C137477 * C138212) / C137082);
    const double C17961 =
        C137535 * ((-2 * C138119) / C137082 - (C137477 * C138212) / C137082);
    const double C19905 =
        -(C138212 * C137771 + C137362 * C137649 + C137349) / C137082;
    const double C68677 = (-2 * C137535 * C138212) / C137082 -
                          (C137535 * (C138534 * C137771 + C138212)) / C137082;
    const double C37436 =
        (-3 * (C137362 * C137771 + C137349)) / C137082 +
        C137535 * ((-2 * C138435) / C137082 - (C137535 * C138439) / C137082);
    const double C137400 = C137335 * C137397;
    const double C137411 = C137397 / C137336;
    const double C137797 = C137477 * C137397;
    const double C137856 = C137535 * C137397;
    const double C844 =
        (-(ae * C137477 * C137368) / C137082) / C137060 -
        (C137477 * C137367) / C137336 - (C137477 * C137369 * ce) / C137336 +
        C137335 * ((-(C137477 * C137363 * ce) / C137082) / C137060 -
                   (ae * C137477 * C137362) / C137336 -
                   (C137335 * C137477 * C137397) / C137336);
    const double C1712 =
        (-(ae * C137535 * C137368) / C137082) / C137060 -
        (C137535 * C137367) / C137336 - (C137535 * C137369 * ce) / C137336 +
        C137335 * ((-(C137535 * C137363 * ce) / C137082) / C137060 -
                   (ae * C137535 * C137362) / C137336 -
                   (C137335 * C137535 * C137397) / C137336);
    const double C2583 =
        (-((C137350 + C137363 * C137649) * ce) / C137082) / C137060 -
        (ae * (C137362 * C137649 + C137349)) / C137336 +
        C137335 *
            ((-(C137397 * C137649) / C137082) / C137060 - C137367 / C137336);
    const double C3376 = (-2 * C137477 * C137367) / C137336 +
                         C137477 * ((-(C137397 * C137649) / C137082) / C137060 -
                                    C137367 / C137336);
    const double C3914 = C137535 * ((-(C137397 * C137649) / C137082) / C137060 -
                                    C137367 / C137336);
    const double C4669 =
        (-((C137350 + C137363 * C137771) * ce) / C137082) / C137060 -
        (ae * (C137362 * C137771 + C137349)) / C137336 +
        C137335 *
            ((-(C137397 * C137771) / C137082) / C137060 - C137367 / C137336);
    const double C6174 = (-2 * C137535 * C137367) / C137336 +
                         C137535 * ((-(C137397 * C137771) / C137082) / C137060 -
                                    C137367 / C137336);
    const double C137459 = C137335 * C137455;
    const double C138188 = C137455 * C137649;
    const double C138363 = C137477 * C137455;
    const double C138404 = C137455 * C137771;
    const double C138572 = C137477 * C138565;
    const double C138873 = C137535 * C138868;
    const double C137448 = C137438 * ae;
    const double C137446 = C137335 * C137438;
    const double C137445 = C137438 * ce;
    const double C137979 = C137477 * C137438;
    const double C138170 = C137535 * C137438;
    const double C3365 =
        2 * C137477 * C137389 + C137477 * (C137389 + C137438 * C137649);
    const double C3894 = C137535 * (C137389 + C137438 * C137649);
    const double C6163 =
        2 * C137535 * C137389 + C137535 * (C137389 + C137438 * C137771);
    const double C138255 = C138251 + C137440;
    const double C138495 = C138490 + C137440;
    const double C138254 = C138248 + C137437;
    const double C138492 = C138487 + C137437;
    const double C138250 = C137381 + C138244;
    const double C138252 = C138243 * ae;
    const double C138249 = C138243 * ce;
    const double C138391 = C137535 * C138243;
    const double C20830 =
        2 * C137535 * C137973 + C137535 * (C137973 + C138243 * C137771);
    const double C138494 = C137381 + C138489;
    const double C138496 = C138488 * ae;
    const double C138493 = C138488 * ce;
    const double C137458 = C137335 * C137452;
    const double C138205 = C137452 * C137649;
    const double C138374 = C137477 * C137452;
    const double C138431 = C137452 * C137771;
    const double C138569 = C137477 * C138562;
    const double C138753 = C138562 * C137771;
    const double C138872 = C137535 * C138864;
    const double C137457 = C137335 * C137451;
    const double C137801 = C137477 * C137451;
    const double C137860 = C137535 * C137451;
    const double C137915 = C137451 * C137649;
    const double C138056 = C137451 * C137771;
    const double C137666 = C137665 * C137343;
    const double C138241 = C137335 * C137665;
    const double C138549 = C137477 * C137665;
    const double C138657 = C137535 * C137665;
    const double C138691 = C137665 * C137771;
    const double C137788 = C137787 * C137343;
    const double C138304 = C137335 * C137787;
    const double C138639 = C137787 * C137649;
    const double C138758 = C137477 * C137787;
    const double C138849 = C137535 * C137787;
    const double C138573 = C138564 * ae;
    const double C138571 = C137477 * C138564;
    const double C138570 = C138564 * ce;
    const double C138713 = C137535 * C138564;
    const double C68676 =
        2 * C137535 * C138227 + C137535 * (C138227 + C138564 * C137771);
    const double C138772 = C138768 + C138566;
    const double C138771 = C138765 + C138563;
    const double C138767 = C138220 + C138761;
    const double C138769 = C138760 * ae;
    const double C138766 = C138760 * ce;
    const double C138858 = C138736 * ae;
    const double C138855 = C137535 * C138736;
    const double C138853 = C138736 * ce;
    const double C186 =
        (-3 * (C137489 * C137343 + C137483)) / C137082 +
        C137335 * ((-2 * C137491) / C137082 - (C137335 * C137501) / C137082);
    const double C928 =
        C137477 * ((-2 * C137491) / C137082 - (C137335 * C137501) / C137082) -
        ((2 * C137358 + C137335 * C137389) * ce) / C137082;
    const double C1793 =
        C137535 * ((-2 * C137491) / C137082 - (C137335 * C137501) / C137082);
    const double C2665 =
        -(C137477 * (C137477 * C137501 + C137389 * ce) + C137489 * C137343 +
          C137483 + C137477 * C137389 * ce) /
        C137082;
    const double C3991 =
        -(C137535 * (C137477 * C137501 + C137389 * ce)) / C137082;
    const double C4748 =
        -(C137501 * C137771 + C137489 * C137343 + C137483) / C137082;
    const double C6225 = (-2 * C137535 * C137501) / C137082 -
                         (C137535 * (C137522 * C137771 + C137501)) / C137082;
    const double C137518 = C137514 / C137082;
    const double C137516 = C137511 / C137082;
    const double C138240 = C137511 / C137336;
    const double C6560 =
        2 * ((-(C137535 * C137992) / C137082) / C137060 -
             (ae * C137491) / C137336) -
        (ae * (C137506 * C137771 + C137491)) / C137336 +
        C137535 *
            ((-(ae * C137535 * C137506) / C137082) / C137060 -
             C137992 / C137336 +
             C137535 * ((-(C137535 * C137335 * C137762) / C137082) / C137060 -
                        C137511 / C137336));
    const double C137975 = C137972 + C137388;
    const double C36008 = C307 * C6226;
    const double C36334 = C30813 * C6226;
    const double C37526 = C13596 * C6226;
    const double C98216 = C92850 * C6226;
    const double C99352 = C47034 * C6226;
    const double C128601 = C63381 * C6226;
    const double C138231 = C137477 * C138225;
    const double C138550 = -2 * C138225;
    const double C138546 = ae * C138225;
    const double C138750 = C137535 * C138225;
    const double C20905 = (-2 * C137535 * C137968) / C137082 -
                          (C137535 * (C138225 * C137771 + C137968)) / C137082;
    const double C37520 =
        (-3 * (C137489 * C137771 + C137483)) / C137082 +
        C137535 * ((-2 * C138453) / C137082 - (C137535 * C138457) / C137082);
    const double C138662 = C138659 / C137336;
    const double C138827 = C138659 / C137082;
    const double C138833 = C138829 / C137082;
    const double C249 =
        (-3 * (C137547 * C137343 + C137541)) / C137082 +
        C137335 * ((-2 * C137549) / C137082 - (C137335 * C137559) / C137082);
    const double C1012 =
        C137477 * ((-2 * C137549) / C137082 - (C137335 * C137559) / C137082);
    const double C1880 =
        C137535 * ((-2 * C137549) / C137082 - (C137335 * C137559) / C137082) -
        ((2 * C137358 + C137335 * C137389) * ce) / C137082;
    const double C2747 =
        -(C137559 * C137649 + C137547 * C137343 + C137541) / C137082;
    const double C3487 = (-2 * C137477 * C137559) / C137082 -
                         (C137477 * (C137580 * C137649 + C137559)) / C137082;
    const double C4077 =
        -(C137535 * C137477 * C137559 + C137477 * C137389 * ce) / C137082;
    const double C4078 = -(C137535 * (C137580 * C137649 + C137559) +
                           (C137389 + C137438 * C137649) * ce) /
                         C137082;
    const double C4833 =
        -(C137535 * (C137535 * C137559 + C137389 * ce) + C137547 * C137343 +
          C137541 + C137535 * C137389 * ce) /
        C137082;
    const double C137576 = C137572 / C137082;
    const double C137574 = C137569 / C137082;
    const double C138265 = C137569 / C137336;
    const double C3653 =
        2 * ((-(C137477 * C137985) / C137082) / C137060 -
             (ae * C137549) / C137336) -
        (ae * (C137564 * C137649 + C137549)) / C137336 +
        C137477 *
            ((-(ae * C137477 * C137564) / C137082) / C137060 -
             C137985 / C137336 +
             C137477 * ((-(C137477 * C137335 * C137686) / C137082) / C137060 -
                        C137569 / C137336));
    const double C5636 = -(C137535 * (C137535 * C138127 + C137973 * ce) +
                           C137477 * C137549 + C137535 * C137973 * ce) /
                         C137082;
    const double C138166 = C138163 + C137388;
    const double C16835 = C13796 * C3488;
    const double C17179 = C554 * C3488;
    const double C17419 = C13596 * C3488;
    const double C50226 = C47234 * C3488;
    const double C50742 = C47034 * C3488;
    const double C65480 = C63381 * C3488;
    const double C18213 = C13596 * C4079;
    const double C18871 = C554 * C4079;
    const double C24021 = C13796 * C4079;
    const double C33596 = C307 * C4079;
    const double C33914 = C30813 * C4079;
    const double C51478 = C47034 * C4079;
    const double C57066 = C47234 * C4079;
    const double C70794 = C63381 * C4079;
    const double C95890 = C92850 * C4079;
    const double C17413 =
        (-3 * (C137547 * C137649 + C137541)) / C137082 +
        C137477 * ((-2 * C138124) / C137082 - (C137477 * C138278) / C137082);
    const double C18203 =
        C137535 * ((-2 * C138124) / C137082 - (C137477 * C138278) / C137082) -
        ((2 * C137966 + C137477 * C138227) * ce) / C137082;
    const double C20129 =
        -(C137535 * (C137535 * C138278 + C138227 * ce) + C137547 * C137649 +
          C137541 + C137535 * C138227 * ce) /
        C137082;
    const double C138386 = C138384 + C138226;
    const double C138601 = C138597 / C137082;
    const double C138599 = C138595 / C137082;
    const double C138757 = C138595 / C137336;
    const double C138476 = C137535 * C138470;
    const double C138670 = ae * C138470;
    const double C138850 = -2 * C138470;
    const double C312 = (3 * (C137598 + C137604 * C137343) +
                         C137335 * (2 * C137606 + C137335 * C137616)) /
                        C137060;
    const double C1096 = (C137477 * (2 * C137606 + C137335 * C137616) +
                          (2 * C137358 + C137335 * C137389) * ae) /
                         C137060;
    const double C1964 =
        (C137535 * (2 * C137606 + C137335 * C137616)) / C137060;
    const double C2829 = (C137598 + C137604 * C137343 +
                          C137477 * (C137477 * C137616 + C137389 * ae) +
                          C137477 * C137389 * ae) /
                         C137060;
    const double C4163 =
        (C137535 * (C137477 * C137616 + C137389 * ae)) / C137060;
    const double C4915 =
        (C137598 + C137604 * C137343 + C137616 * C137771) / C137060;
    const double C6341 =
        (2 * C137535 * C137616 + C137535 * (C137616 + C137636 * C137771)) /
        C137060;
    const double C138559 = -C138548;
    const double C137631 = C137626 / C137082;
    const double C138328 = C137626 / C137336;
    const double C4331 =
        (-(C137535 * C137985) / C137082) / C137060 - (C137606 * ce) / C137336 -
        (ae * (C137535 * C137477 * C137564 + C137973 * ce)) / C137336 +
        C137477 *
            (C137477 * ((-(C137535 * C137335 * C137686) / C137082) / C137060 -
                        C137626 / C137336) -
             (ae * (C137535 * C137564 + C137388)) / C137336);
    const double C5873 =
        C137477 *
            ((-(C137535 * C137621 * ce) / C137082) / C137060 -
             C137985 / C137336 +
             C137535 * ((-(C137535 * C137335 * C137686) / C137082) / C137060 -
                        C137626 / C137336)) -
        (ae * (C137535 * (C137535 * C137564 + C137388) + C137549 +
               C137535 * C137381 * ce)) /
            C137336;
    const double C6451 =
        2 * ((-(C137535 * C137985) / C137082) / C137060 -
             (C137606 * ce) / C137336) -
        ((C137606 + C137621 * C137771) * ce) / C137336 +
        C137535 *
            ((-(C137535 * C137621 * ce) / C137082) / C137060 -
             C137985 / C137336 +
             C137535 * ((-(C137535 * C137335 * C137686) / C137082) / C137060 -
                        C137626 / C137336));
    const double C137976 = C137974 + C137391;
    const double C35895 = C139448 * C6342;
    const double C138232 = C137477 * C138228;
    const double C138555 = 2 * C138228;
    const double C138547 = C138228 * ce;
    const double C21045 =
        (2 * C137535 * C137969 + C137535 * (C137969 + C138228 * C137771)) /
        C137060;
    const double C83119 =
        (3 * (C137969 + C138228 * C137771) +
         C137535 * (2 * C137535 * C138228 +
                    C137535 * (C138228 + C138565 * C137771))) /
        C137060;
    const double C37672 = (3 * (C137598 + C137604 * C137771) +
                           C137535 * (2 * C138421 + C137535 * C138423)) /
                          C137060;
    const double C138661 = C138658 / C137082;
    const double C137662 = C137659 / C137336;
    const double C137971 = C137335 * C137659;
    const double C138218 = C137477 * C137659;
    const double C138317 = C137535 * C137659;
    const double C398 =
        3 * ((-(C137659 * C137343) / C137082) / C137060 - C137654 / C137336) +
        C137335 * ((-2 * C137335 * C137659) / C137336 +
                   C137335 * ((-((C137415 + C137649 * C137416 * C137417) *
                                 C137344 * C137343) /
                               C137082) /
                                  C137060 -
                              C137659 / C137336));
    const double C1197 =
        (-((C137598 + C137604 * C137343) * ce) / C137082) / C137060 -
        (ae * (C137489 * C137343 + C137483)) / C137336 +
        C137477 *
            ((-(C137659 * C137343) / C137082) / C137060 - C137654 / C137336);
    const double C2064 = C137535 * ((-(C137659 * C137343) / C137082) / C137060 -
                                    C137654 / C137336);
    const double C2922 =
        (-(ae * (C137477 * C137491 + C137358 * ce)) / C137082) / C137060 -
        (C137335 * C137654) / C137336 -
        ((C137477 * C137606 + C137358 * ae) * ce) / C137336 +
        C137477 *
            ((-(C137606 * ce) / C137082) / C137060 - (ae * C137491) / C137336 -
             (C137477 * C137335 * C137659) / C137336);
    const double C3599 =
        2 * ((-(C137598 * ce) / C137082) / C137060 - (ae * C137483) / C137336 -
             (C137477 * C137654) / C137336) -
        (ae * (C137477 * C137968 + C137483 + C137966 * ce)) / C137336 -
        ((C137598 + C137477 * C137969 + C137966 * ae) * ce) / C137336 +
        C137477 * ((-(ae * C137968) / C137082) / C137060 - C137654 / C137336 -
                   (C137969 * ce) / C137336 +
                   C137477 * ((-C137608 / C137082) / C137060 - C137496 -
                              (C137477 * C137659) / C137336));
    const double C4248 =
        (-(ae * C137535 * C137968) / C137082) / C137060 -
        (C137535 * C137654) / C137336 - (C137535 * C137969 * ce) / C137336 +
        C137477 * ((-(C137535 * C137604 * ce) / C137082) / C137060 -
                   (ae * C137535 * C137489) / C137336 -
                   (C137477 * C137535 * C137659) / C137336);
    const double C5795 =
        (-((C137598 + C137604 * C137771) * ce) / C137082) / C137060 -
        (ae * (C137489 * C137771 + C137483)) / C137336 +
        C137477 *
            ((-(C137659 * C137771) / C137082) / C137060 - C137654 / C137336);
    const double C6399 = (-2 * C137535 * C137654) / C137336 +
                         C137535 * ((-(C137659 * C137771) / C137082) / C137060 -
                                    C137654 / C137336);
    const double C559 = (3 * (C137699 + C137705 * C137343) +
                         C137335 * (2 * C137707 + C137335 * C137717)) /
                        C137060;
    const double C1398 =
        (C137477 * (2 * C137707 + C137335 * C137717)) / C137060;
    const double C2266 = (C137535 * (2 * C137707 + C137335 * C137717) +
                          (2 * C137358 + C137335 * C137389) * ae) /
                         C137060;
    const double C3107 =
        (C137699 + C137705 * C137343 + C137717 * C137649) / C137060;
    const double C3705 =
        (2 * C137477 * C137717 + C137477 * (C137717 + C137737 * C137649)) /
        C137060;
    const double C4409 =
        (C137535 * C137477 * C137717 + C137477 * C137389 * ae) / C137060;
    const double C4410 = (C137535 * (C137717 + C137737 * C137649) +
                          (C137389 + C137438 * C137649) * ae) /
                         C137060;
    const double C5193 = (C137699 + C137705 * C137343 +
                          C137535 * (C137535 * C137717 + C137389 * ae) +
                          C137535 * C137389 * ae) /
                         C137060;
    const double C138861 = -C138848;
    const double C137732 = C137727 / C137082;
    const double C138294 = C137727 / C137336;
    const double C3762 =
        2 * ((-(C137477 * C137992) / C137082) / C137060 -
             (C137707 * ce) / C137336) -
        ((C137707 + C137722 * C137649) * ce) / C137336 +
        C137477 *
            ((-(C137477 * C137722 * ce) / C137082) / C137060 -
             C137992 / C137336 +
             C137477 * ((-(C137477 * C137335 * C137762) / C137082) / C137060 -
                        C137727 / C137336));
    const double C5950 =
        (C137477 * C137707 + C137535 * (C137535 * C138128 + C137973 * ae) +
         C137535 * C137973 * ae) /
        C137060;
    const double C138167 = C138165 + C137391;
    const double C16956 = C139463 * C3706;
    const double C18634 = C139463 * C4411;
    const double C33699 = C139600 * C4411;
    const double C95675 = C139600 * C4411;
    const double C17695 = (3 * (C137699 + C137705 * C137649) +
                           C137477 * (2 * C138125 + C137477 * C138288)) /
                          C137060;
    const double C18619 = (C137535 * (2 * C138125 + C137477 * C138288) +
                           (2 * C137966 + C137477 * C138227) * ae) /
                          C137060;
    const double C20539 = (C137699 + C137705 * C137649 +
                           C137535 * (C137535 * C138288 + C138227 * ae) +
                           C137535 * C138227 * ae) /
                          C137060;
    const double C138387 = C138385 + C138229;
    const double C138625 = C138621 / C137082;
    const double C138477 = C137535 * C138473;
    const double C138856 = 2 * C138473;
    const double C138847 = C138473 * ce;
    const double C137784 = C137781 / C137336;
    const double C137996 = C137335 * C137781;
    const double C138380 = C137477 * C137781;
    const double C138463 = C137535 * C137781;
    const double C723 =
        3 * ((-(C137781 * C137343) / C137082) / C137060 - C137776 / C137336) +
        C137335 * ((-2 * C137335 * C137781) / C137336 +
                   C137335 * ((-((C137415 + C137771 * C137416 * C137417) *
                                 C137344 * C137343) /
                               C137082) /
                                  C137060 -
                              C137781 / C137336));
    const double C1600 = C137477 * ((-(C137781 * C137343) / C137082) / C137060 -
                                    C137776 / C137336);
    const double C2462 =
        (-((C137699 + C137705 * C137343) * ce) / C137082) / C137060 -
        (ae * (C137547 * C137343 + C137541)) / C137336 +
        C137535 *
            ((-(C137781 * C137343) / C137082) / C137060 - C137776 / C137336);
    const double C3296 = (-(C137335 * C137781 * C137649) / C137082) / C137060 -
                         (C137335 * C137776) / C137336;
    const double C3816 = (-2 * C137477 * C137776) / C137336 +
                         C137477 * ((-(C137781 * C137649) / C137082) / C137060 -
                                    C137776 / C137336);
    const double C4576 =
        (-((C137699 + C137705 * C137649) * ce) / C137082) / C137060 -
        (ae * (C137547 * C137649 + C137541)) / C137336 +
        C137535 *
            ((-(C137781 * C137649) / C137082) / C137060 - C137776 / C137336);
    const double C6106 =
        (-(ae * (C137535 * C138124 + C137966 * ce)) / C137082) / C137060 -
        (C137477 * C137776) / C137336 -
        ((C137535 * C138125 + C137966 * ae) * ce) / C137336 +
        C137535 *
            ((-(C138125 * ce) / C137082) / C137060 - (ae * C138124) / C137336 -
             (C137535 * C137477 * C137781) / C137336);
    const double C6612 =
        2 * ((-(C137699 * ce) / C137082) / C137060 - (ae * C137541) / C137336 -
             (C137535 * C137776) / C137336) -
        (ae * (C137535 * C138160 + C137541 + C138158 * ce)) / C137336 -
        ((C137699 + C137535 * C138161 + C138158 * ae) * ce) / C137336 +
        C137535 * ((-(ae * C138160) / C137082) / C137060 - C137776 / C137336 -
                   (C138161 * ce) / C137336 +
                   C137535 * ((-C137709 / C137082) / C137060 - C137554 -
                              (C137535 * C137781) / C137336));
    const double C137392 = C137385 / C137060;
    const double C333 = C307 * C111;
    const double C580 = C554 * C111;
    const double C1112 = C307 * C831;
    const double C1414 = C554 * C831;
    const double C13814 = C13796 * C831;
    const double C14322 = C13596 * C831;
    const double C47252 = C47234 * C831;
    const double C47754 = C47034 * C831;
    const double C1980 = C307 * C1699;
    const double C2282 = C554 * C1699;
    const double C30831 = C30813 * C1699;
    const double C32069 = C13596 * C1699;
    const double C92868 = C92850 * C1699;
    const double C94102 = C47034 * C1699;
    const double C2840 = C307 * C2572;
    const double C3118 = C554 * C2572;
    const double C14678 = C13796 * C2572;
    const double C16279 = C13596 * C2572;
    const double C48110 = C47234 * C2572;
    const double C49670 = C47034 * C2572;
    const double C63880 = C63381 * C2572;
    const double C8429 = C307 * C3893;
    const double C8767 = C554 * C3893;
    const double C15645 = C13796 * C3893;
    const double C23329 = C13596 * C3893;
    const double C31717 = C30813 * C3893;
    const double C49040 = C47234 * C3893;
    const double C56374 = C47034 * C3893;
    const double C76577 = C63381 * C3893;
    const double C93750 = C92850 * C3893;
    const double C4926 = C307 * C4658;
    const double C5204 = C554 * C4658;
    const double C32756 = C30813 * C4658;
    const double C35536 = C13596 * C4658;
    const double C94752 = C92850 * C4658;
    const double C97470 = C47034 * C4658;
    const double C126014 = C63381 * C4658;
    const double C19271 = C13796 * C5470;
    const double C19589 = C554 * C5470;
    const double C19913 = C13596 * C5470;
    const double C36842 = C307 * C5470;
    const double C40750 = C30813 * C5470;
    const double C52464 = C47234 * C5470;
    const double C53078 = C47034 * C5470;
    const double C81008 = C63381 * C5470;
    const double C102498 = C92850 * C5470;
    const double C66002 = C63381 * C17251;
    const double C66333 = C554 * C17251;
    const double C66541 = C63381 * C17959;
    const double C67046 = C554 * C17959;
    const double C79741 = C30813 * C17959;
    const double C80322 = C47234 * C17959;
    const double C112426 = C92850 * C17959;
    const double C112982 = C13796 * C17959;
    const double C67967 = C63381 * C19903;
    const double C68457 = C554 * C19903;
    const double C80664 = C30813 * C19903;
    const double C82294 = C47234 * C19903;
    const double C113324 = C92850 * C19903;
    const double C114858 = C13796 * C19903;
    const double C128046 = C307 * C19903;
    const double C129891 = C63381 * C37434;
    const double C130067 = C307 * C37434;
    const double C35139 = C139448 * C4330;
    const double C80551 = C47031 * C4330;
    const double C80547 = C139598 * C4330;
    const double C113211 = C13593 * C4330;
    const double C113207 = C139598 * C4330;
    const double C37069 = C139448 * C5872;
    const double C81563 = C139598 * C5872;
    const double C82509 = C47031 * C5872;
    const double C114167 = C139598 * C5872;
    const double C115073 = C13593 * C5872;
    const double C37828 = C139448 * C6450;
    const double C83277 = C47031 * C6450;
    const double C115811 = C13593 * C6450;
    const double C138230 = C138223 / C137060;
    const double C17786 = C139463 * C3761;
    const double C79820 = C30408 * C3761;
    const double C112505 = C92451 * C3761;
    const double C138475 = C138468 / C137060;
    const double C138516 = C138509 + C138514;
    const double C82897 = (3 * (C138104 + C137799 * C137771) +
                           C137535 * (2 * C138720 + C137535 * C138727)) /
                          C137060;
    const double C138797 = C138790 + C138795;
    const double C138540 = C138537 / C137082;
    const double C82896 =
        (-3 * (C137800 * C137771 + C138119)) / C137082 +
        C137535 * ((-2 * C138739) / C137082 - (C137535 * C138745) / C137082);
    const double C138821 = C138818 / C137082;
    const double C137528 = C137525 / C137082;
    const double C37519 =
        (-3 * (C137506 * C137771 + C137491)) / C137082 +
        C137535 * ((-2 * C138444) / C137082 - (C137535 * C138448) / C137082);
    const double C138840 = C138837 / C137082;
    const double C137586 = C137583 / C137082;
    const double C17412 =
        (-3 * (C137564 * C137649 + C137549)) / C137082 +
        C137477 * ((-2 * C138127) / C137082 - (C137477 * C138270) / C137082);
    const double C138608 = C138605 / C137082;
    const double C137642 = C137629 + C137639;
    const double C37671 = (3 * (C137606 + C137621 * C137771) +
                           C137535 * (2 * C138425 + C137535 * C138427)) /
                          C137060;
    const double C138806 = C138804 + C138805;
    const double C137743 = C137730 + C137740;
    const double C17694 = (3 * (C137707 + C137722 * C137649) +
                           C137477 * (2 * C138128 + C137477 * C138299)) /
                          C137060;
    const double C138633 = C138623 + C138630;
    const double C137502 = -C137500;
    const double C129955 = C139289 * C37522;
    const double C138197 = -C138195;
    const double C137524 = -C137521;
    const double C138513 = -C138511;
    const double C138784 = -C138783;
    const double C1117 = C1106 + C1107;
    const double C13824 = C13802 + C13803;
    const double C47262 = C47240 + C47241;
    const double C48120 = C48106 + C48107;
    const double C1985 = C1974 + C1975;
    const double C49050 = C49036 + C49037;
    const double C34921 = C34910 + C34911;
    const double C77862 = C77857 + C77858;
    const double C80330 = C80316 + C80317;
    const double C110553 = C110548 + C110549;
    const double C35898 = C35885 + C35886;
    const double C81355 = C81348 + C81349;
    const double C137617 = -C137615;
    const double C82299 = C139598 * C20239;
    const double C114863 = C139598 * C20239;
    const double C128049 = C139448 * C20239;
    const double C138213 = -C138211;
    const double C83129 = C139598 * C21047;
    const double C115665 = C139598 * C21047;
    const double C129447 = C139448 * C21047;
    const double C130070 = C139448 * C37674;
    const double C34923 = C34916 + C34917;
    const double C80334 = C80324 + C80325;
    const double C80331 = C80318 + C80319;
    const double C112991 = C112978 + C112979;
    const double C36847 = C36840 + C36841;
    const double C81354 = C81346 + C81347;
    const double C82302 = C82296 + C82297;
    const double C113958 = C113950 + C113951;
    const double C37683 = C37678 + C37679;
    const double C83132 = C83126 + C83127;
    const double C137638 = -C137635;
    const double C138536 = -C138532;
    const double C138650 = C138649 / C137082;
    const double C138687 = -C138686;
    const double C137560 = -C137558;
    const double C66122 = C139289 * C17415;
    const double C138413 = -C138411;
    const double C137582 = -C137579;
    const double C138523 = -C138522;
    const double C138726 = C138724 / C137082;
    const double C138794 = -C138792;
    const double C495 = C487 + C488;
    const double C47438 = C47430 + C47431;
    const double C1315 = C1308 + C1309;
    const double C13997 = C13986 + C13987;
    const double C47435 = C47424 + C47425;
    const double C48343 = C48336 + C48337;
    const double C2180 = C2168 + C2169;
    const double C49273 = C49266 + C49267;
    const double C35140 = C35136 + C35137;
    const double C78069 = C78065 + C78066;
    const double C80552 = C80544 + C80545;
    const double C110760 = C110756 + C110757;
    const double C36121 = C36112 + C36113;
    const double C81564 = C81560 + C81561;
    const double C8653 = C139448 * C4328;
    const double C15870 = C139598 * C4328;
    const double C24020 = C13593 * C4328;
    const double C49265 = C139598 * C4328;
    const double C57065 = C47031 * C4328;
    const double C5106 = C139448 * C5096;
    const double C19486 = C13593 * C5096;
    const double C52679 = C47031 * C5096;
    const double C138279 = -C138277;
    const double C138323 = -C138322;
    const double C1314 = C1305 + C1306;
    const double C13998 = C13988 + C13989;
    const double C47436 = C47426 + C47427;
    const double C48344 = C48338 + C48339;
    const double C2182 = C2173 + C2174;
    const double C49274 = C49268 + C49269;
    const double C3028 = C3023 + C3024;
    const double C14910 = C14902 + C14903;
    const double C48342 = C48334 + C48335;
    const double C50228 = C50224 + C50225;
    const double C137689 = -C137688;
    const double C138269 = C138267 / C137082;
    const double C138329 = C138327 / C137082;
    const double C138604 = -C138600;
    const double C138673 = -C138671;
    const double C1419 = C1408 + C1409;
    const double C93760 = C93746 + C93747;
    const double C2287 = C2276 + C2277;
    const double C30841 = C30819 + C30820;
    const double C92878 = C92856 + C92857;
    const double C94762 = C94748 + C94749;
    const double C16959 = C16946 + C16947;
    const double C111751 = C111744 + C111745;
    const double C18637 = C18625 + C18626;
    const double C77196 = C77191 + C77192;
    const double C109941 = C109936 + C109937;
    const double C113331 = C113316 + C113317;
    const double C137718 = -C137716;
    const double C66336 = C139463 * C17697;
    const double C138440 = -C138438;
    const double C17714 = C17709 + C17710;
    const double C112434 = C112428 + C112429;
    const double C18640 = C18631 + C18632;
    const double C79063 = C79055 + C79056;
    const double C111750 = C111742 + C111743;
    const double C113336 = C113326 + C113327;
    const double C20550 = C20545 + C20546;
    const double C80670 = C80654 + C80655;
    const double C113330 = C113314 + C113315;
    const double C115184 = C115178 + C115179;
    const double C137739 = -C137736;
    const double C138617 = -C138616;
    const double C138744 = C138742 / C137082;
    const double C138817 = -C138813;
    const double C662 = C654 + C655;
    const double C92970 = C92962 + C92963;
    const double C1518 = C1506 + C1507;
    const double C93873 = C93866 + C93867;
    const double C2380 = C2372 + C2373;
    const double C30930 = C30919 + C30920;
    const double C92967 = C92956 + C92957;
    const double C94874 = C94866 + C94867;
    const double C17072 = C17063 + C17064;
    const double C111856 = C111852 + C111853;
    const double C18755 = C18749 + C18750;
    const double C77299 = C77295 + C77296;
    const double C110044 = C110040 + C110041;
    const double C113444 = C113436 + C113437;
    const double C8878 = C139463 * C4495;
    const double C31832 = C139600 * C4495;
    const double C40893 = C30408 * C4495;
    const double C93865 = C139600 * C4495;
    const double C102641 = C92451 * C4495;
    const double C5292 = C139463 * C5286;
    const double C32873 = C139600 * C5286;
    const double C36333 = C30408 * C5286;
    const double C94869 = C139600 * C5286;
    const double C98215 = C92451 * C5286;
    const double C138289 = -C138287;
    const double C138458 = -C138456;
    const double C1520 = C1511 + C1512;
    const double C93874 = C93868 + C93869;
    const double C2381 = C2375 + C2376;
    const double C30931 = C30921 + C30922;
    const double C92968 = C92958 + C92959;
    const double C94876 = C94870 + C94871;
    const double C137765 = -C137764;
    const double C138298 = C138296 / C137082;
    const double C138447 = C138445 / C137082;
    const double C138629 = -C138626;
    const double C138836 = -C138832;
    const double C14333 = C14314 + C14315;
    const double C14330 = C14308 + C14309;
    const double C14328 = C14304 + C14305;
    const double C14452 = C14442 + C14443;
    const double C14451 = C14440 + C14441;
    const double C14568 = C14558 + C14559;
    const double C14566 = C14554 + C14555;
    const double C16298 = C16287 + C16288;
    const double C16407 = C16399 + C16400;
    const double C16518 = C16511 + C16512;
    const double C17267 = C17259 + C17260;
    const double C17421 = C17417 + C17418;
    const double C17987 = C17975 + C17976;
    const double C17986 = C17973 + C17974;
    const double C18101 = C18093 + C18094;
    const double C18217 = C18211 + C18212;
    const double C18216 = C18209 + C18210;
    const double C32080 = C32061 + C32062;
    const double C32077 = C32055 + C32056;
    const double C32075 = C32051 + C32052;
    const double C32200 = C32191 + C32192;
    const double C32197 = C32185 + C32186;
    const double C32315 = C32305 + C32306;
    const double C32314 = C32303 + C32304;
    const double C35555 = C35544 + C35545;
    const double C35667 = C35662 + C35663;
    const double C35774 = C35766 + C35767;
    const double C37450 = C37442 + C37443;
    const double C37528 = C37524 + C37525;
    const double C14329 = C14306 + C14307;
    const double C14450 = C14438 + C14439;
    const double C14567 = C14556 + C14557;
    const double C32076 = C32053 + C32054;
    const double C32198 = C32187 + C32188;
    const double C32313 = C32301 + C32302;
    const double C47761 = C47738 + C47739;
    const double C47882 = C47870 + C47871;
    const double C47999 = C47988 + C47989;
    const double C94109 = C94086 + C94087;
    const double C94231 = C94220 + C94221;
    const double C94346 = C94334 + C94335;
    const double C63890 = C63872 + C63873;
    const double C63886 = C63864 + C63865;
    const double C63885 = C63862 + C63863;
    const double C63884 = C63860 + C63861;
    const double C63996 = C63986 + C63987;
    const double C63995 = C63984 + C63985;
    const double C63994 = C63982 + C63983;
    const double C64094 = C64081 + C64082;
    const double C64093 = C64078 + C64079;
    const double C64092 = C64075 + C64076;
    const double C65313 = C65306 + C65307;
    const double C65483 = C65476 + C65477;
    const double C66548 = C66539 + C66540;
    const double C66546 = C66535 + C66536;
    const double C66640 = C66634 + C66635;
    const double C66736 = C66727 + C66728;
    const double C66734 = C66722 + C66723;
    const double C77517 = C77507 + C77508;
    const double C77516 = C77505 + C77506;
    const double C77515 = C77503 + C77504;
    const double C77641 = C77632 + C77633;
    const double C77640 = C77626 + C77627;
    const double C77751 = C77746 + C77747;
    const double C77750 = C77744 + C77745;
    const double C81016 = C81004 + C81005;
    const double C81137 = C81132 + C81133;
    const double C81245 = C81239 + C81240;
    const double C82904 = C82900 + C82901;
    const double C82981 = C82977 + C82978;
    const double C47765 = C47746 + C47747;
    const double C47762 = C47740 + C47741;
    const double C47760 = C47736 + C47737;
    const double C47884 = C47874 + C47875;
    const double C47883 = C47872 + C47873;
    const double C48000 = C47990 + C47991;
    const double C47998 = C47986 + C47987;
    const double C49689 = C49678 + C49679;
    const double C49798 = C49790 + C49791;
    const double C49909 = C49902 + C49903;
    const double C50598 = C50590 + C50591;
    const double C50744 = C50740 + C50741;
    const double C51260 = C51248 + C51249;
    const double C51259 = C51246 + C51247;
    const double C51370 = C51362 + C51363;
    const double C51482 = C51476 + C51477;
    const double C51481 = C51474 + C51475;
    const double C94113 = C94094 + C94095;
    const double C94110 = C94088 + C94089;
    const double C94108 = C94084 + C94085;
    const double C94233 = C94224 + C94225;
    const double C94230 = C94218 + C94219;
    const double C94348 = C94338 + C94339;
    const double C94347 = C94336 + C94337;
    const double C97489 = C97478 + C97479;
    const double C97601 = C97596 + C97597;
    const double C97708 = C97700 + C97701;
    const double C99280 = C99272 + C99273;
    const double C99354 = C99350 + C99351;
    const double C106 =
        (C137101 / C137087 - (0 * de) / C137082) / C137087 - (0 * de) / C137082;
    const double C6696 = C137101 / C137087 - (0 * de) / C137082;
    const double C137103 = C137100 / C137082;
    const double C139601 = C139564 - C139589;
    const double C139590 = C139566 - C139567;
    const double C137178 = C137172 / C137082;
    const double C3430 =
        (C137182 / C137087 - (0 * de) / C137082) / C137087 - (0 * de) / C137082;
    const double C7479 = C137182 / C137087 - (0 * de) / C137082;
    const double C139602 = C139572 - C139592;
    const double C139593 = C139575 - C139576;
    const double C2660 =
        ((-(0 * de) / C137082) / C137087 -
         ((0 - (C137135 * C137154) / C137082) * de) / C137082) /
            C137087 -
        ((C137135 *
              ((-C137154 / C137082) / C137087 -
               ((C139346 - (C137135 * C137157) / C137082) * de) / C137082) +
          C6692) *
         de) /
            C137082 +
        (-C137157 / C137082) / C137087 - (0 * de) / C137082;
    const double C137223 = C137217 / C137082;
    const double C6284 =
        (C137227 / C137087 - (0 * de) / C137082) / C137087 - (0 * de) / C137082;
    const double C10842 = C137227 / C137087 - (0 * de) / C137082;
    const double C139603 = C139577 - C139595;
    const double C139596 = C139580 - C139581;
    const double C4828 =
        ((-(0 * de) / C137082) / C137087 -
         ((0 - (C137142 * C137201) / C137082) * de) / C137082) /
            C137087 -
        ((C137142 *
              ((-C137201 / C137082) / C137087 -
               ((C139372 - (C137142 * C137204) / C137082) * de) / C137082) +
          C9074) *
         de) /
            C137082 +
        (-C137204 / C137082) / C137087 - (0 * de) / C137082;
    const double C401 = C337 * C181;
    const double C481 = C337 * C244;
    const double C1201 = C337 * C923;
    const double C2165 = C337 * C1875;
    const double C417 = C413 * C139346;
    const double C1202 = C413 * C139570;
    const double C2927 = C413 * C2565;
    const double C6997 = C413 * C6692;
    const double C497 = C493 * C139372;
    const double C2166 = C493 * C139571;
    const double C5101 = C493 * C4653;
    const double C9450 = C493 * C9074;
    const double C32434 = C32432 * C821;
    const double C34905 = C32432 * C139303;
    const double C35877 = C32432 * C139562;
    const double C40327 = C32432 * C7396;
    const double C32533 = C32431 * C181;
    const double C34904 = C32431 * C3364;
    const double C36952 = C32431 * C923;
    const double C32540 = C32539 * C139346;
    const double C35027 = C32539 * C2565;
    const double C36953 = C32539 * C139570;
    const double C40473 = C32539 * C6692;
    const double C13831 = C13816 + C13817;
    const double C13828 = C13810 + C13811;
    const double C13826 = C13806 + C13807;
    const double C13825 = C13804 + C13805;
    const double C13823 = C13800 + C13801;
    const double C13915 = C13906 + C13907;
    const double C13912 = C13900 + C13901;
    const double C14000 = C13992 + C13993;
    const double C13999 = C13990 + C13991;
    const double C13996 = C13984 + C13985;
    const double C14691 = C14680 + C14681;
    const double C14688 = C14674 + C14675;
    const double C14686 = C14670 + C14671;
    const double C14912 = C14906 + C14907;
    const double C14911 = C14904 + C14905;
    const double C15658 = C15647 + C15648;
    const double C15655 = C15641 + C15642;
    const double C15653 = C15637 + C15638;
    const double C15879 = C15873 + C15874;
    const double C15878 = C15871 + C15872;
    const double C16837 = C16833 + C16834;
    const double C110552 = C110546 + C110547;
    const double C110550 = C110542 + C110543;
    const double C110656 = C110652 + C110653;
    const double C110761 = C110758 + C110759;
    const double C112994 = C112984 + C112985;
    const double C112990 = C112976 + C112977;
    const double C112988 = C112972 + C112973;
    const double C113212 = C113204 + C113205;
    const double C113961 = C113956 + C113957;
    const double C113959 = C113952 + C113953;
    const double C114168 = C114164 + C114165;
    const double C114866 = C114860 + C114861;
    const double C115668 = C115662 + C115663;
    const double C115666 = C115658 + C115659;
    const double C648 = C584 * C181;
    const double C726 = C584 * C244;
    const double C1503 = C584 * C923;
    const double C2466 = C584 * C1875;
    const double C664 = C660 * C139346;
    const double C1504 = C660 * C139570;
    const double C3205 = C660 * C2565;
    const double C7235 = C660 * C6692;
    const double C742 = C738 * C139372;
    const double C2467 = C738 * C139571;
    const double C5379 = C738 * C4653;
    const double C9688 = C738 * C9074;
    const double C15029 = C15027 * C821;
    const double C16938 = C15027 * C139562;
    const double C17700 = C15027 * C139303;
    const double C22980 = C15027 * C7396;
    const double C15237 = C15026 * C244;
    const double C17699 = C15026 * C3364;
    const double C18858 = C15026 * C1875;
    const double C15244 = C15243 * C139372;
    const double C18859 = C15243 * C139571;
    const double C20757 = C15243 * C4653;
    const double C26490 = C15243 * C9074;
    const double C30848 = C30833 + C30834;
    const double C30845 = C30827 + C30828;
    const double C30843 = C30823 + C30824;
    const double C30842 = C30821 + C30822;
    const double C30840 = C30817 + C30818;
    const double C30933 = C30925 + C30926;
    const double C30932 = C30923 + C30924;
    const double C30929 = C30917 + C30918;
    const double C31016 = C31007 + C31008;
    const double C31013 = C31001 + C31002;
    const double C31730 = C31719 + C31720;
    const double C31727 = C31713 + C31714;
    const double C31725 = C31709 + C31710;
    const double C31841 = C31835 + C31836;
    const double C31840 = C31833 + C31834;
    const double C32769 = C32758 + C32759;
    const double C32766 = C32752 + C32753;
    const double C32764 = C32748 + C32749;
    const double C32880 = C32874 + C32875;
    const double C32878 = C32870 + C32871;
    const double C77195 = C77189 + C77190;
    const double C77193 = C77185 + C77186;
    const double C77300 = C77297 + C77298;
    const double C77403 = C77399 + C77400;
    const double C79066 = C79061 + C79062;
    const double C79064 = C79057 + C79058;
    const double C79169 = C79165 + C79166;
    const double C79749 = C79743 + C79744;
    const double C79747 = C79739 + C79740;
    const double C80676 = C80666 + C80667;
    const double C80674 = C80662 + C80663;
    const double C80673 = C80660 + C80661;
    const double C80671 = C80656 + C80657;
    const double C80784 = C80776 + C80777;
    const double C82620 = C82614 + C82615;
    const double C14321 = C13591 * C835;
    const double C14313 = C139587 * C835;
    const double C47753 = C47029 * C835;
    const double C47745 = C139587 * C835;
    const double C63869 = C139289 * C835;
    const double C32068 = C13591 * C1703;
    const double C32060 = C139587 * C1703;
    const double C77512 = C139289 * C1703;
    const double C94101 = C47029 * C1703;
    const double C94093 = C139587 * C1703;
    const double C16286 = C139587 * C2575;
    const double C16278 = C13591 * C2575;
    const double C49677 = C139587 * C2575;
    const double C49669 = C47029 * C2575;
    const double C63877 = C139289 * C2575;
    const double C17972 = C139587 * C3898;
    const double C23328 = C13591 * C3898;
    const double C51245 = C139587 * C3898;
    const double C56373 = C47029 * C3898;
    const double C70565 = C139289 * C3898;
    const double C35543 = C139587 * C4661;
    const double C35535 = C13591 * C4661;
    const double C81001 = C139289 * C4661;
    const double C97477 = C139587 * C4661;
    const double C97469 = C47029 * C4661;
    const double C34915 = C139448 * C4166;
    const double C80321 = C47031 * C4166;
    const double C80315 = C139598 * C4166;
    const double C112981 = C13593 * C4166;
    const double C112975 = C139598 * C4166;
    const double C36839 = C139448 * C5717;
    const double C81351 = C139598 * C5717;
    const double C82293 = C47031 * C5717;
    const double C113955 = C139598 * C5717;
    const double C114857 = C13593 * C5717;
    const double C3218 = C3209 + C3210;
    const double C33812 = C33808 + C33809;
    const double C95788 = C95784 + C95785;
    const double C2844 = C2836 + C2837;
    const double C3122 = C3114 + C3115;
    const double C14687 = C14672 + C14673;
    const double C16628 = C16621 + C16622;
    const double C33707 = C33700 + C33701;
    const double C48119 = C48104 + C48105;
    const double C50019 = C50012 + C50013;
    const double C95683 = C95676 + C95677;
    const double C8433 = C8425 + C8426;
    const double C8771 = C8763 + C8764;
    const double C15654 = C15639 + C15640;
    const double C23750 = C23743 + C23744;
    const double C31726 = C31711 + C31712;
    const double C40759 = C40752 + C40753;
    const double C49049 = C49034 + C49035;
    const double C56795 = C56788 + C56789;
    const double C93759 = C93744 + C93745;
    const double C102507 = C102500 + C102501;
    const double C4930 = C4922 + C4923;
    const double C5208 = C5200 + C5201;
    const double C19280 = C19273 + C19274;
    const double C32765 = C32750 + C32751;
    const double C36231 = C36224 + C36225;
    const double C52473 = C52466 + C52467;
    const double C94761 = C94746 + C94747;
    const double C98113 = C98106 + C98107;
    const double C331 = C307 * C120;
    const double C578 = C554 * C120;
    const double C13820 = C13795 * C120;
    const double C30837 = C30812 * C120;
    const double C47258 = C47233 * C120;
    const double C92874 = C92849 * C120;
    const double C1110 = C307 * C837;
    const double C1412 = C554 * C837;
    const double C13812 = C13796 * C837;
    const double C14324 = C13595 * C837;
    const double C14316 = C13596 * C837;
    const double C14684 = C13795 * C837;
    const double C31723 = C30812 * C837;
    const double C47250 = C47234 * C837;
    const double C47756 = C47033 * C837;
    const double C47748 = C47034 * C837;
    const double C48116 = C47233 * C837;
    const double C63870 = C63381 * C837;
    const double C93756 = C92849 * C837;
    const double C1978 = C307 * C1705;
    const double C2280 = C554 * C1705;
    const double C15651 = C13795 * C1705;
    const double C30829 = C30813 * C1705;
    const double C32071 = C13595 * C1705;
    const double C32063 = C13596 * C1705;
    const double C32762 = C30812 * C1705;
    const double C49046 = C47233 * C1705;
    const double C77513 = C63381 * C1705;
    const double C92866 = C92850 * C1705;
    const double C94104 = C47033 * C1705;
    const double C94096 = C47034 * C1705;
    const double C94758 = C92849 * C1705;
    const double C2838 = C307 * C2578;
    const double C3116 = C554 * C2578;
    const double C14676 = C13796 * C2578;
    const double C16289 = C13595 * C2578;
    const double C16281 = C13596 * C2578;
    const double C16625 = C13795 * C2578;
    const double C33704 = C30812 * C2578;
    const double C48108 = C47234 * C2578;
    const double C49680 = C47033 * C2578;
    const double C49672 = C47034 * C2578;
    const double C50016 = C47233 * C2578;
    const double C63878 = C63381 * C2578;
    const double C95680 = C92849 * C2578;
    const double C8427 = C307 * C3901;
    const double C8765 = C554 * C3901;
    const double C15643 = C13796 * C3901;
    const double C17967 = C13596 * C3901;
    const double C23331 = C13595 * C3901;
    const double C23747 = C13795 * C3901;
    const double C31715 = C30813 * C3901;
    const double C40756 = C30812 * C3901;
    const double C49038 = C47234 * C3901;
    const double C51240 = C47034 * C3901;
    const double C56376 = C47033 * C3901;
    const double C56792 = C47233 * C3901;
    const double C70568 = C63381 * C3901;
    const double C93748 = C92850 * C3901;
    const double C102504 = C92849 * C3901;
    const double C4924 = C307 * C4664;
    const double C5202 = C554 * C4664;
    const double C19277 = C13795 * C4664;
    const double C32754 = C30813 * C4664;
    const double C35546 = C13595 * C4664;
    const double C35538 = C13596 * C4664;
    const double C36228 = C30812 * C4664;
    const double C52470 = C47233 * C4664;
    const double C81006 = C63381 * C4664;
    const double C94750 = C92850 * C4664;
    const double C97480 = C47033 * C4664;
    const double C97472 = C47034 * C4664;
    const double C98110 = C92849 * C4664;
    const double C18752 = C139463 * C4494;
    const double C79168 = C139600 * C4494;
    const double C80783 = C30408 * C4494;
    const double C111855 = C139600 * C4494;
    const double C113443 = C92451 * C4494;
    const double C20654 = C139463 * C6029;
    const double C80779 = C139600 * C6029;
    const double C82723 = C30408 * C6029;
    const double C113439 = C139600 * C6029;
    const double C115287 = C92451 * C6029;
    const double C17343 = C13595 * C3433;
    const double C17785 = C554 * C3433;
    const double C50670 = C47033 * C3433;
    const double C65395 = C63381 * C3433;
    const double C79819 = C30812 * C3433;
    const double C112504 = C92849 * C3433;
    const double C18099 = C13595 * C3994;
    const double C18751 = C554 * C3994;
    const double C35032 = C307 * C3994;
    const double C51368 = C47033 * C3994;
    const double C66636 = C63381 * C3994;
    const double C79167 = C30813 * C3994;
    const double C80438 = C47233 * C3994;
    const double C80434 = C47234 * C3994;
    const double C80782 = C30812 * C3994;
    const double C111854 = C92850 * C3994;
    const double C113098 = C13795 * C3994;
    const double C113094 = C13796 * C3994;
    const double C113442 = C92849 * C3994;
    const double C20027 = C13595 * C5557;
    const double C20653 = C554 * C5557;
    const double C36959 = C307 * C5557;
    const double C53188 = C47033 * C5557;
    const double C68055 = C63381 * C5557;
    const double C80778 = C30813 * C5557;
    const double C81456 = C47234 * C5557;
    const double C82402 = C47233 * C5557;
    const double C82722 = C30812 * C5557;
    const double C113438 = C92850 * C5557;
    const double C114060 = C13796 * C5557;
    const double C114966 = C13795 * C5557;
    const double C115286 = C92849 * C5557;
    const double C37602 = C13595 * C6287;
    const double C37827 = C307 * C6287;
    const double C83051 = C63381 * C6287;
    const double C83276 = C47233 * C6287;
    const double C99424 = C47033 * C6287;
    const double C115810 = C13795 * C6287;
    const double C14319 = C13591 * C845;
    const double C14311 = C139587 * C845;
    const double C47751 = C47029 * C845;
    const double C47743 = C139587 * C845;
    const double C63867 = C139289 * C845;
    const double C32066 = C13591 * C1713;
    const double C32058 = C139587 * C1713;
    const double C77510 = C139289 * C1713;
    const double C94099 = C47029 * C1713;
    const double C94091 = C139587 * C1713;
    const double C16284 = C13591 * C2582;
    const double C49675 = C47029 * C2582;
    const double C63875 = C139289 * C2582;
    const double C17970 = C13591 * C3909;
    const double C51243 = C47029 * C3909;
    const double C66538 = C139289 * C3909;
    const double C35541 = C13591 * C4668;
    const double C81003 = C139289 * C4668;
    const double C97475 = C47029 * C4668;
    const double C408 = C139448 * C397;
    const double C13909 = C13593 * C397;
    const double C47347 = C47031 * C397;
    const double C1205 = C139448 * C1196;
    const double C13903 = C139598 * C1196;
    const double C14795 = C13593 * C1196;
    const double C47341 = C139598 * C1196;
    const double C48227 = C47031 * C1196;
    const double C2071 = C139448 * C2063;
    const double C15760 = C13593 * C2063;
    const double C49155 = C47031 * C2063;
    const double C35030 = C139448 * C4247;
    const double C77964 = C139598 * C4247;
    const double C80437 = C47031 * C4247;
    const double C110655 = C139598 * C4247;
    const double C113097 = C13593 * C4247;
    const double C36005 = C139448 * C5007;
    const double C81459 = C47031 * C5007;
    const double C114063 = C13593 * C5007;
    const double C733 = C139463 * C722;
    const double C31010 = C30408 * C722;
    const double C93047 = C92451 * C722;
    const double C1610 = C139463 * C1601;
    const double C31944 = C30408 * C1601;
    const double C93977 = C92451 * C1601;
    const double C2470 = C139463 * C2461;
    const double C31004 = C139600 * C2461;
    const double C32983 = C30408 * C2461;
    const double C93041 = C139600 * C2461;
    const double C94979 = C92451 * C2461;
    const double C17175 = C139463 * C3295;
    const double C79272 = C30408 * C3295;
    const double C111959 = C92451 * C3295;
    const double C18862 = C139463 * C4573;
    const double C77402 = C139600 * C4573;
    const double C80889 = C30408 * C4573;
    const double C110147 = C139600 * C4573;
    const double C113549 = C92451 * C4573;
    const double C20137 = C20133 + C20134;
    const double C53294 = C53290 + C53291;
    const double C68151 = C68142 + C68143;
    const double C19919 = C19911 + C19912;
    const double C20549 = C20543 + C20544;
    const double C53084 = C53076 + C53077;
    const double C67971 = C67963 + C67964;
    const double C80672 = C80658 + C80659;
    const double C82618 = C82610 + C82611;
    const double C113332 = C113318 + C113319;
    const double C115182 = C115174 + C115175;
    const double C418 = C414 * C139346;
    const double C1207 = C414 * C139570;
    const double C2934 = C414 * C2565;
    const double C7001 = C414 * C6692;
    const double C665 = C661 * C139346;
    const double C1509 = C661 * C139570;
    const double C3212 = C661 * C2565;
    const double C7239 = C661 * C6692;
    const double C498 = C494 * C139372;
    const double C2171 = C494 * C139571;
    const double C5108 = C494 * C4653;
    const double C9454 = C494 * C9074;
    const double C743 = C739 * C139372;
    const double C2472 = C739 * C139571;
    const double C5386 = C739 * C4653;
    const double C9692 = C739 * C9074;
    const double C404 = C339 * C181;
    const double C484 = C339 * C244;
    const double C1206 = C339 * C923;
    const double C2170 = C339 * C1875;
    const double C409 = C341 * C181;
    const double C489 = C341 * C244;
    const double C1213 = C341 * C923;
    const double C2177 = C341 * C1875;
    const double C1203 = C1116 * C924;
    const double C1310 = C1116 * C244;
    const double C2928 = C1116 * C2661;
    const double C6998 = C1116 * C6772;
    const double C8651 = C1116 * C1875;
    const double C1208 = C1118 * C924;
    const double C1307 = C1118 * C244;
    const double C2935 = C1118 * C2661;
    const double C7002 = C1118 * C6772;
    const double C8656 = C1118 * C1875;
    const double C2069 = C1984 * C181;
    const double C2167 = C1984 * C1876;
    const double C5102 = C1984 * C4829;
    const double C9451 = C1984 * C9225;
    const double C10194 = C1984 * C923;
    const double C30741 = C1984 * C244;
    const double C32641 = C1984 * C1875;
    const double C34906 = C1984 * C3364;
    const double C35878 = C1984 * C137101;
    const double C40328 = C1984 * C7402;
    const double C2072 = C1986 * C181;
    const double C2172 = C1986 * C1876;
    const double C5109 = C1986 * C4829;
    const double C9455 = C1986 * C9225;
    const double C10198 = C1986 * C923;
    const double C30744 = C1986 * C244;
    const double C32423 = C1986 * C828;
    const double C32647 = C1986 * C1875;
    const double C35882 = C1986 * C137101;
    const double C40332 = C1986 * C7402;
    const double C34924 = C34920 * C3364;
    const double C35028 = C34920 * C2661;
    const double C36954 = C34920 * C924;
    const double C40474 = C34920 * C6772;
    const double C36006 = C35899 * C181;
    const double C36837 = C35899 * C3364;
    const double C36958 = C35899 * C923;
    const double C37684 = C37682 * C3364;
    const double C37754 = C37682 * C181;
    const double C129530 = C37682 * C923;
    const double C651 = C586 * C181;
    const double C729 = C586 * C244;
    const double C1508 = C586 * C923;
    const double C2471 = C586 * C1875;
    const double C656 = C588 * C181;
    const double C734 = C588 * C244;
    const double C1515 = C588 * C923;
    const double C2478 = C588 * C1875;
    const double C1505 = C1418 * C924;
    const double C1611 = C1418 * C244;
    const double C3206 = C1418 * C2661;
    const double C7236 = C1418 * C6772;
    const double C8989 = C1418 * C1875;
    const double C14134 = C1418 * C181;
    const double C15130 = C1418 * C923;
    const double C16939 = C1418 * C137101;
    const double C17701 = C1418 * C3364;
    const double C22981 = C1418 * C7402;
    const double C1510 = C1420 * C924;
    const double C1608 = C1420 * C244;
    const double C3213 = C1420 * C2661;
    const double C7240 = C1420 * C6772;
    const double C8994 = C1420 * C1875;
    const double C14137 = C1420 * C181;
    const double C15018 = C1420 * C828;
    const double C15136 = C1420 * C923;
    const double C16943 = C1420 * C137101;
    const double C22985 = C1420 * C7402;
    const double C2371 = C2286 * C181;
    const double C2468 = C2286 * C1876;
    const double C5380 = C2286 * C4829;
    const double C9689 = C2286 * C9225;
    const double C10504 = C2286 * C923;
    const double C2374 = C2288 * C181;
    const double C2473 = C2288 * C1876;
    const double C5387 = C2288 * C4829;
    const double C9693 = C2288 * C9225;
    const double C10508 = C2288 * C923;
    const double C17176 = C16960 * C244;
    const double C17706 = C16960 * C3364;
    const double C18865 = C16960 * C1875;
    const double C17715 = C17713 * C3364;
    const double C17856 = C17713 * C244;
    const double C67211 = C17713 * C1875;
    const double C18644 = C18638 * C3364;
    const double C18860 = C18638 * C1876;
    const double C20758 = C18638 * C4829;
    const double C26491 = C18638 * C9225;
    const double C18645 = C18639 * C3364;
    const double C18863 = C18639 * C1876;
    const double C29451 = C18639 * C9225;
    const double C68620 = C18639 * C4829;
    const double C137405 = C137363 + C137402;
    const double C137422 = C137412 / C137336;
    const double C5476 = (C137477 * C137369 + C138102 * C137771) / C137060;
    const double C17262 = C139587 * C3372;
    const double C50593 = C139587 * C3372;
    const double C65303 = C139289 * C3372;
    const double C17978 = C139587 * C3907;
    const double C51251 = C139587 * C3907;
    const double C70571 = C139289 * C3907;
    const double C37445 = C139587 * C6170;
    const double C99275 = C139587 * C6170;
    const double C128512 = C139289 * C6170;
    const double C137442 = C137434 / C137060;
    const double C137808 = -C137805;
    const double C82191 = C139289 * C20977;
    const double C81966 = C81962 + C81963;
    const double C137867 = -C137864;
    const double C66733 = C139289 * C18205;
    const double C68150 = C139289 * C20131;
    const double C66003 = C139289 * C17255;
    const double C66542 = C139289 * C17963;
    const double C67968 = C139289 * C19907;
    const double C129892 = C139289 * C37438;
    const double C137404 = C137401 + C137362;
    const double C137426 = C137418 / C137082;
    const double C137421 = C137410 / C137082;
    const double C138204 = C137410 / C137336;
    const double C5473 = -(C138117 * C137771 + C137477 * C137368) / C137082;
    const double C16623 = C13796 * C3369;
    const double C16957 = C554 * C3369;
    const double C17265 = C13596 * C3369;
    const double C50014 = C47234 * C3369;
    const double C50596 = C47034 * C3369;
    const double C65308 = C63381 * C3369;
    const double C17981 = C13596 * C3904;
    const double C18635 = C554 * C3904;
    const double C23745 = C13796 * C3904;
    const double C33386 = C307 * C3904;
    const double C33702 = C30813 * C3904;
    const double C51254 = C47034 * C3904;
    const double C56790 = C47234 * C3904;
    const double C70574 = C63381 * C3904;
    const double C95678 = C92850 * C3904;
    const double C35896 = C307 * C6167;
    const double C36226 = C30813 * C6167;
    const double C37448 = C13596 * C6167;
    const double C98108 = C92850 * C6167;
    const double C99278 = C47034 * C6167;
    const double C128515 = C63381 * C6167;
    const double C21253 =
        2 * ((-(C137535 * C138376) / C137082) / C137060 -
             (ae * C138119) / C137336) -
        (ae * (C137800 * C137771 + C138119)) / C137336 +
        C137535 *
            ((-(ae * C137535 * C137800) / C137082) / C137060 -
             C138376 / C137336 +
             C137535 * ((-(C137535 * C137477 * C137728) / C137082) / C137060 -
                        C137806));
    const double C138531 = -C138527;
    const double C18319 =
        2 * ((-(C137477 * C138315) / C137082) / C137060 -
             (ae * C137535 * C137362) / C137336) -
        (ae * C137535 * C138212) / C137336 +
        C137477 *
            ((-(ae * C137535 * C137800) / C137082) / C137060 -
             C138315 / C137336 +
             C137477 * ((-(C137477 * C137535 * C137627) / C137082) / C137060 -
                        C137865));
    const double C138812 = -C138808;
    const double C67049 = C139463 * C18621;
    const double C79746 = C139600 * C18621;
    const double C112431 = C139600 * C18621;
    const double C68460 = C139463 * C20541;
    const double C80669 = C139600 * C20541;
    const double C113329 = C139600 * C20541;
    const double C66004 = C63381 * C17253;
    const double C66335 = C554 * C17253;
    const double C66543 = C63381 * C17961;
    const double C67048 = C554 * C17961;
    const double C79745 = C30813 * C17961;
    const double C80326 = C47234 * C17961;
    const double C112430 = C92850 * C17961;
    const double C112986 = C13796 * C17961;
    const double C67969 = C63381 * C19905;
    const double C68459 = C554 * C19905;
    const double C80668 = C30813 * C19905;
    const double C82298 = C47234 * C19905;
    const double C113328 = C92850 * C19905;
    const double C114862 = C13796 * C19905;
    const double C128048 = C307 * C19905;
    const double C129893 = C63381 * C37436;
    const double C130069 = C307 * C37436;
    const double C137403 = C137400 / C137336;
    const double C2584 =
        (-(C137397 * C137649) / C137082) / C137060 - C137367 / C137336 -
        (ae * (C137398 * C137649 + C137368)) / C137336 -
        ((C137369 + C137399 * C137649) * ce) / C137336 +
        C137335 *
            ((-((C137363 + C137390 * C137649) * ce) / C137082) / C137060 -
             (ae * (C137387 * C137649 + C137362)) / C137336 +
             C137335 * ((-(C137451 * C137649) / C137082) / C137060 - C137411));
    const double C4670 =
        (-(C137397 * C137771) / C137082) / C137060 - C137367 / C137336 -
        (ae * (C137398 * C137771 + C137368)) / C137336 -
        ((C137369 + C137399 * C137771) * ce) / C137336 +
        C137335 *
            ((-((C137363 + C137390 * C137771) * ce) / C137082) / C137060 -
             (ae * (C137387 * C137771 + C137362)) / C137336 +
             C137335 * ((-(C137451 * C137771) / C137082) / C137060 - C137411));
    const double C3910 =
        (-(C137535 * C137477 * C137363 * ce) / C137082) / C137060 -
        (ae * C137535 * C137477 * C137362) / C137336 -
        (C137335 * C137535 * C137797) / C137336;
    const double C5480 = (-(C137797 * C137771) / C137082) / C137060 -
                         (C137477 * C137367) / C137336;
    const double C14325 = C13591 * C844;
    const double C14317 = C139587 * C844;
    const double C47757 = C47029 * C844;
    const double C47749 = C139587 * C844;
    const double C63871 = C139289 * C844;
    const double C32072 = C13591 * C1712;
    const double C32064 = C139587 * C1712;
    const double C77514 = C139289 * C1712;
    const double C94105 = C47029 * C1712;
    const double C94097 = C139587 * C1712;
    const double C16290 = C13591 * C2583;
    const double C16282 = C139587 * C2583;
    const double C49681 = C47029 * C2583;
    const double C49673 = C139587 * C2583;
    const double C63879 = C139289 * C2583;
    const double C17264 = C13591 * C3376;
    const double C50595 = C47029 * C3376;
    const double C65305 = C139289 * C3376;
    const double C17980 = C13591 * C3914;
    const double C51253 = C47029 * C3914;
    const double C66534 = C139289 * C3914;
    const double C35547 = C13591 * C4669;
    const double C35539 = C139587 * C4669;
    const double C81007 = C139289 * C4669;
    const double C97481 = C47029 * C4669;
    const double C97473 = C139587 * C4669;
    const double C37447 = C13591 * C6174;
    const double C82903 = C139289 * C6174;
    const double C99277 = C47029 * C6174;
    const double C137462 = C137390 + C137459;
    const double C138190 = C137399 + C138188;
    const double C20834 =
        (2 * C137535 * C138102 + C137535 * (C138102 + C138363 * C137771)) /
        C137060;
    const double C138406 = C137399 + C138404;
    const double C138579 = C137612 + C138572;
    const double C138877 = C137713 + C138873;
    const double C137982 = C137980 + C137448;
    const double C138173 = C138171 + C137448;
    const double C137454 = C137419 + C137446;
    const double C137453 = C137445 / C137082;
    const double C137981 = C137978 + C137445;
    const double C138172 = C138169 + C137445;
    const double C5635 = -(C137535 * (C137535 * C138130 + C137979 * ce) +
                           C137477 * C137559 + C137535 * C137979 * ce) /
                         C137082;
    const double C5949 =
        (C137477 * C137717 + C137535 * (C137535 * C138131 + C137979 * ae) +
         C137535 * C137979 * ae) /
        C137060;
    const double C5469 = C137477 * C137389 + C137979 * C137771;
    const double C138258 = C137477 * C138255;
    const double C138499 = C137535 * C138495;
    const double C138257 = C137477 * C138254;
    const double C138498 = C137535 * C138492;
    const double C18202 =
        C137535 * ((-2 * C138127) / C137082 - (C137477 * C138270) / C137082) -
        ((2 * C137973 + C137477 * C138250) * ce) / C137082;
    const double C18618 = (C137535 * (2 * C138128 + C137477 * C138299) +
                           (2 * C137973 + C137477 * C138250) * ae) /
                          C137060;
    const double C20128 =
        -(C137535 * (C137535 * C138270 + C138250 * ce) + C137564 * C137649 +
          C137549 + C137535 * C138250 * ce) /
        C137082;
    const double C20538 = (C137707 + C137722 * C137649 +
                           C137535 * (C137535 * C138299 + C138250 * ae) +
                           C137535 * C138250 * ae) /
                          C137060;
    const double C17250 = 3 * (C137358 + C137381 * C137649) +
                          C137477 * (2 * C137973 + C137477 * C138250);
    const double C17958 = C137535 * (2 * C137973 + C137477 * C138250);
    const double C19902 = C137358 + C137381 * C137649 + C138250 * C137771;
    const double C138396 = C138394 + C138252;
    const double C138395 = C138393 + C138249;
    const double C37433 = 3 * (C137358 + C137381 * C137771) +
                          C137535 * (2 * C138164 + C137535 * C138494);
    const double C137461 = C137458 + C137387;
    const double C138207 = C138205 + C137398;
    const double C20832 = (-2 * C137535 * C138117) / C137082 -
                          (C137535 * (C138374 * C137771 + C138117)) / C137082;
    const double C138433 = C138431 + C137398;
    const double C138576 = C138569 + C137497;
    const double C138755 = C138753 + C138225;
    const double C138876 = C138872 + C137555;
    const double C137460 = C137457 / C137336;
    const double C137804 = C137335 * C137801;
    const double C138175 = C137535 * C137801;
    const double C3911 =
        (-(ae * C137535 * C137477 * C137398) / C137082) / C137060 -
        (C137535 * C137797) / C137336 -
        (C137535 * C137477 * C137399 * ce) / C137336 +
        C137335 * ((-(C137535 * C137799 * ce) / C137082) / C137060 -
                   (ae * C137535 * C137800) / C137336 -
                   (C137335 * C137535 * C137801) / C137336);
    const double C5478 =
        (-(C137801 * C137771) / C137082) / C137060 - C137797 / C137336 -
        (ae * (C137477 * C137452 * C137771 + C137477 * C137398)) / C137336 -
        ((C137477 * C137399 + C137477 * C137455 * C137771) * ce) / C137336 +
        C137335 * ((-((C137799 + C137477 * C137439 * C137771) * ce) / C137082) /
                       C137060 -
                   (ae * (C137477 * C137436 * C137771 + C137800)) / C137336 +
                   C137335 * ((-(C137477 *
                                 (C137416 * C137417 +
                                  C137343 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137771) /
                               C137082) /
                                  C137060 -
                              C137801 / C137336));
    const double C5479 =
        (-((C137477 * C137363 + C137799 * C137771) * ce) / C137082) / C137060 -
        (ae * (C137800 * C137771 + C137477 * C137362)) / C137336 +
        C137335 *
            ((-(C137801 * C137771) / C137082) / C137060 - C137797 / C137336);
    const double C17964 =
        (C137535 *
         ((-2 * C137800) / C137082 -
          (C137477 * (C137436 * C137649 + C137387)) / C137082) *
         ae) /
            C137060 -
        (C137535 * (2 * C137799 + C137477 * (C137390 + C137439 * C137649)) *
         ce) /
            C137336 +
        C137335 * C137535 *
            ((-2 * C137801) / C137336 +
             C137477 * ((-((C137416 * C137417 +
                            C137343 * bs[7] * std::pow(C137339, 7)) *
                           C137344 * C137649) /
                         C137082) /
                            C137060 -
                        C137451 / C137336));
    const double C20837 =
        (-2 * C137535 * C137797) / C137336 +
        C137535 *
            ((-(C137801 * C137771) / C137082) / C137060 - C137797 / C137336);
    const double C137863 = C137335 * C137860;
    const double C137916 = C137915 / C137082;
    const double C138057 = C138056 / C137082;
    const double C137667 = C137666 / C137082;
    const double C138247 = C137477 * C138241;
    const double C138319 = C137535 * C138241;
    const double C138560 = C138549 / C137336;
    const double C138660 = C137477 * C138657;
    const double C138692 = C138691 / C137082;
    const double C137789 = C137788 / C137082;
    const double C138389 = C137477 * C138304;
    const double C138486 = C137535 * C138304;
    const double C18856 =
        (((-2 * C138127) / C137082 - (C137477 * C138270) / C137082) * ae) /
            C137060 -
        ((2 * C138128 + C137477 * C138299) * ce) / C137336 +
        C137535 * ((-2 * C137477 * C138304) / C137336 +
                   C137477 * ((-(C137335 *
                                 (C137416 * C137417 +
                                  C137771 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137649) /
                               C137082) /
                                  C137060 -
                              C138304 / C137336));
    const double C138640 = C138639 / C137082;
    const double C138764 = C137535 * C138758;
    const double C138862 = C138849 / C137336;
    const double C138716 = C138714 + C138573;
    const double C138578 = C138554 + C138571;
    const double C138577 = C138570 / C137082;
    const double C138715 = C138712 + C138570;
    const double C138775 = C137535 * C138772;
    const double C138774 = C137535 * C138771;
    const double C82895 = 3 * (C137966 + C138220 * C137771) +
                          C137535 * (2 * C138382 + C137535 * C138767);
    const double C138867 = C138854 + C138855;
    const double C138866 = C138853 / C137082;
    const double C411 = C307 * C186;
    const double C658 = C554 * C186;
    const double C1214 = C307 * C928;
    const double C1516 = C554 * C928;
    const double C13910 = C13796 * C928;
    const double C14446 = C13596 * C928;
    const double C47348 = C47234 * C928;
    const double C47878 = C47034 * C928;
    const double C2076 = C307 * C1793;
    const double C2378 = C554 * C1793;
    const double C30927 = C30813 * C1793;
    const double C32195 = C13596 * C1793;
    const double C92964 = C92850 * C1793;
    const double C94228 = C47034 * C1793;
    const double C2938 = C307 * C2665;
    const double C3216 = C554 * C2665;
    const double C14798 = C13796 * C2665;
    const double C16403 = C13596 * C2665;
    const double C48230 = C47234 * C2665;
    const double C49794 = C47034 * C2665;
    const double C63992 = C63381 * C2665;
    const double C8544 = C307 * C3991;
    const double C8882 = C554 * C3991;
    const double C15765 = C13796 * C3991;
    const double C23469 = C13596 * C3991;
    const double C31837 = C30813 * C3991;
    const double C49160 = C47234 * C3991;
    const double C56514 = C47034 * C3991;
    const double C76683 = C63381 * C3991;
    const double C93870 = C92850 * C3991;
    const double C5016 = C307 * C4748;
    const double C5294 = C554 * C4748;
    const double C32876 = C30813 * C4748;
    const double C35658 = C13596 * C4748;
    const double C94872 = C92850 * C4748;
    const double C97592 = C47034 * C4748;
    const double C126097 = C63381 * C4748;
    const double C137520 = -C137516;
    const double C36335 = C139600 * C6560;
    const double C98217 = C139600 * C6560;
    const double C4496 =
        C137535 *
            ((-(C137477 * C137722 * ce) / C137082) / C137060 -
             C137992 / C137336 +
             C137477 * ((-(C137477 * C137335 * C137762) / C137082) / C137060 -
                        C137727 / C137336)) -
        (ae * (C137477 * C137975 + C137491 + C137973 * ce)) / C137336;
    const double C6030 =
        (-(C137477 * C137992) / C137082) / C137060 - (C137707 * ce) / C137336 -
        (ae * C137535 * C137975) / C137336 +
        C137535 *
            (C137535 * ((-(C137477 * C137335 * C137762) / C137082) / C137060 -
                        C137727 / C137336) -
             (ae * C137975) / C137336);
    const double C3432 =
        (-2 * (C137477 * C137491 + C137358 * ce)) / C137082 -
        (C137477 * (C137477 * C137975 + C137491 + C137973 * ce)) / C137082 -
        ((C137358 + C137381 * C137649) * ce) / C137082;
    const double C3993 =
        -(C137535 * (C137477 * C137975 + C137491 + C137973 * ce)) / C137082;
    const double C5556 =
        -(C137975 * C137771 + C137477 * C137491 + C137358 * ce) / C137082;
    const double C20904 = (-2 * C137535 * C137975) / C137082 -
                          (C137535 * (C138254 * C137771 + C137975)) / C137082;
    const double C138234 = C138231 + C137489;
    const double C138561 = C138550 / C137082;
    const double C138557 = C138546 / C137082;
    const double C138752 = C138546 / C137336;
    const double C82084 = C63381 * C20905;
    const double C82720 = C30813 * C20905;
    const double C83203 = C47234 * C20905;
    const double C115284 = C92850 * C20905;
    const double C115738 = C13796 * C20905;
    const double C129531 = C307 * C20905;
    const double C129954 = C63381 * C37520;
    const double C130128 = C307 * C37520;
    const double C138831 = -C138827;
    const double C491 = C307 * C249;
    const double C736 = C554 * C249;
    const double C1312 = C307 * C1012;
    const double C1613 = C554 * C1012;
    const double C13994 = C13796 * C1012;
    const double C14564 = C13596 * C1012;
    const double C47432 = C47234 * C1012;
    const double C47996 = C47034 * C1012;
    const double C2178 = C307 * C1880;
    const double C2479 = C554 * C1880;
    const double C31011 = C30813 * C1880;
    const double C32309 = C13596 * C1880;
    const double C93048 = C92850 * C1880;
    const double C94342 = C47034 * C1880;
    const double C3026 = C307 * C2747;
    const double C3304 = C554 * C2747;
    const double C14908 = C13796 * C2747;
    const double C16515 = C13596 * C2747;
    const double C48340 = C47234 * C2747;
    const double C49906 = C47034 * C2747;
    const double C64090 = C63381 * C2747;
    const double C8657 = C307 * C4077;
    const double C8995 = C554 * C4077;
    const double C15875 = C13796 * C4077;
    const double C23607 = C13596 * C4077;
    const double C31947 = C30813 * C4077;
    const double C49270 = C47234 * C4077;
    const double C56652 = C47034 * C4077;
    const double C76789 = C63381 * C4077;
    const double C93980 = C92850 * C4077;
    const double C5112 = C307 * C4833;
    const double C5390 = C554 * C4833;
    const double C32986 = C30813 * C4833;
    const double C35770 = C13596 * C4833;
    const double C94982 = C92850 * C4833;
    const double C97704 = C47034 * C4833;
    const double C126175 = C63381 * C4833;
    const double C137578 = -C137574;
    const double C16836 = C139598 * C3653;
    const double C50227 = C139598 * C3653;
    const double C19487 = C13796 * C5636;
    const double C19801 = C554 * C5636;
    const double C20135 = C13596 * C5636;
    const double C37070 = C307 * C5636;
    const double C41030 = C30813 * C5636;
    const double C52680 = C47234 * C5636;
    const double C53292 = C47034 * C5636;
    const double C81243 = C63381 * C5636;
    const double C102778 = C92850 * C5636;
    const double C6286 =
        (-2 * (C137535 * C137549 + C137358 * ce)) / C137082 -
        (C137535 * (C137535 * C138166 + C137549 + C138164 * ce)) / C137082 -
        ((C137358 + C137381 * C137771) * ce) / C137082;
    const double C66121 = C63381 * C17413;
    const double C66450 = C554 * C17413;
    const double C66732 = C63381 * C18203;
    const double C67212 = C554 * C18203;
    const double C79891 = C30813 * C18203;
    const double C80548 = C47234 * C18203;
    const double C112576 = C92850 * C18203;
    const double C113208 = C13796 * C18203;
    const double C68149 = C63381 * C20129;
    const double C68623 = C554 * C20129;
    const double C80892 = C30813 * C20129;
    const double C82506 = C47234 * C20129;
    const double C113552 = C92850 * C20129;
    const double C115070 = C13796 * C20129;
    const double C128211 = C307 * C20129;
    const double C20975 =
        (-2 * (C137535 * C138124 + C137966 * ce)) / C137082 -
        (C137535 * (C137535 * C138386 + C138124 + C138382 * ce)) / C137082 -
        ((C137966 + C138220 * C137771) * ce) / C137082;
    const double C138603 = -C138599;
    const double C138479 = C138476 + C137547;
    const double C138672 = C138670 / C137336;
    const double C138846 = C138670 / C137082;
    const double C138863 = C138850 / C137082;
    const double C334 = C139448 * C312;
    const double C1113 = C139448 * C1096;
    const double C13815 = C139598 * C1096;
    const double C47253 = C139598 * C1096;
    const double C1981 = C139448 * C1964;
    const double C2841 = C139448 * C2829;
    const double C14679 = C139598 * C2829;
    const double C48111 = C139598 * C2829;
    const double C8430 = C139448 * C4163;
    const double C15646 = C139598 * C4163;
    const double C49041 = C139598 * C4163;
    const double C4927 = C139448 * C4915;
    const double C138568 = C138559 / C137060;
    const double C137634 = -C137631;
    const double C24022 = C139598 * C4331;
    const double C33597 = C139448 * C4331;
    const double C57067 = C139598 * C4331;
    const double C19488 = C139598 * C5873;
    const double C37071 = C139448 * C5873;
    const double C52681 = C139598 * C5873;
    const double C36120 = C139448 * C6451;
    const double C3544 =
        (2 * (C137477 * C137606 + C137358 * ae) +
         C137477 * (C137606 + C137477 * C137976 + C137973 * ae) +
         (C137358 + C137381 * C137649) * ae) /
        C137060;
    const double C4165 =
        (C137535 * (C137606 + C137477 * C137976 + C137973 * ae)) / C137060;
    const double C5716 =
        (C137477 * C137606 + C137358 * ae + C137976 * C137771) / C137060;
    const double C21044 =
        (2 * C137535 * C137976 + C137535 * (C137976 + C138255 * C137771)) /
        C137060;
    const double C35900 = C35894 + C35895;
    const double C138235 = C137604 + C138232;
    const double C138558 = C138547 / C137336;
    const double C83125 = C139598 * C21045;
    const double C115661 = C139598 * C21045;
    const double C129445 = C139448 * C21045;
    const double C130068 = C139448 * C37672;
    const double C138664 = -C138661;
    const double C20338 =
        (-(C137659 * C137771) / C137082) / C137060 - C137654 / C137336 -
        (ae * (C138225 * C137771 + C137968)) / C137336 -
        ((C137969 + C138228 * C137771) * ce) / C137336 +
        C137477 *
            ((-((C137604 + C137612 * C137771) * ce) / C137082) / C137060 -
             (ae * (C137497 * C137771 + C137489)) / C137336 +
             C137477 * ((-(C137665 * C137771) / C137082) / C137060 - C137662));
    const double C4249 = (-(C137535 * C137606 * ce) / C137082) / C137060 -
                         (ae * C137535 * C137491) / C137336 -
                         (C137477 * C137535 * C137971) / C137336;
    const double C4250 =
        (-(ae * C137535 * C137975) / C137082) / C137060 -
        (C137535 * C137971) / C137336 - (C137535 * C137976 * ce) / C137336 +
        C137477 * ((-(C137535 * C137621 * ce) / C137082) / C137060 -
                   (ae * C137535 * C137506) / C137336 -
                   (C137477 * C137535 * C137335 * C137665) / C137336);
    const double C5008 = (-(C137971 * C137771) / C137082) / C137060 -
                         (C137335 * C137654) / C137336;
    const double C5796 =
        (-((C137606 + C137621 * C137771) * ce) / C137082) / C137060 -
        (ae * (C137506 * C137771 + C137491)) / C137336 +
        C137477 * ((-(C137335 * C137665 * C137771) / C137082) / C137060 -
                   C137971 / C137336);
    const double C6398 =
        (-2 * C137535 * C137971) / C137336 +
        C137535 * ((-(C137335 * C137665 * C137771) / C137082) / C137060 -
                   C137971 / C137336);
    const double C20339 =
        (-(C138241 * C137771) / C137082) / C137060 - C137971 / C137336 -
        (ae * (C138254 * C137771 + C137975)) / C137336 -
        ((C137976 + C138255 * C137771) * ce) / C137336 +
        C137477 * ((-((C137621 + C138245 * C137771) * ce) / C137082) / C137060 -
                   (ae * (C138242 * C137771 + C137506)) / C137336 +
                   C137477 * ((-(C137335 *
                                 (C137416 * C137417 +
                                  C137649 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137771) /
                               C137082) /
                                  C137060 -
                              C138241 / C137336));
    const double C138224 = C138218 / C137336;
    const double C21115 =
        (((-2 * C137535 * C137489) / C137082 -
          (C137535 * (C137497 * C137771 + C137489)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137535 * C137604 + C137535 * (C137604 + C137612 * C137771)) *
         ce) /
            C137336 +
        C137477 *
            ((-2 * C138317) / C137336 +
             C137535 * ((-(C137665 * C137771) / C137082) / C137060 - C137662));
    const double C37752 =
        3 * ((-(C137659 * C137771) / C137082) / C137060 - C137654 / C137336) +
        C137535 *
            ((-2 * C138317) / C137336 +
             C137535 * ((-(C137665 * C137771) / C137082) / C137060 - C137662));
    const double C412 = C139448 * C398;
    const double C1210 = C139448 * C1197;
    const double C13905 = C139598 * C1197;
    const double C14797 = C13593 * C1197;
    const double C47343 = C139598 * C1197;
    const double C48229 = C47031 * C1197;
    const double C2074 = C139448 * C2064;
    const double C15764 = C13593 * C2064;
    const double C49159 = C47031 * C2064;
    const double C2932 = C139448 * C2922;
    const double C14793 = C139598 * C2922;
    const double C16730 = C13593 * C2922;
    const double C48225 = C139598 * C2922;
    const double C50121 = C47031 * C2922;
    const double C35033 = C139448 * C4248;
    const double C80439 = C47031 * C4248;
    const double C80435 = C139598 * C4248;
    const double C113099 = C13593 * C4248;
    const double C113095 = C139598 * C4248;
    const double C36960 = C139448 * C5795;
    const double C81457 = C139598 * C5795;
    const double C82403 = C47031 * C5795;
    const double C114061 = C139598 * C5795;
    const double C114967 = C13593 * C5795;
    const double C37756 = C139448 * C6399;
    const double C83202 = C47031 * C6399;
    const double C115737 = C13593 * C6399;
    const double C581 = C139463 * C559;
    const double C1415 = C139463 * C1398;
    const double C2283 = C139463 * C2266;
    const double C30832 = C139600 * C2266;
    const double C92869 = C139600 * C2266;
    const double C3119 = C139463 * C3107;
    const double C8768 = C139463 * C4409;
    const double C31718 = C139600 * C4409;
    const double C93751 = C139600 * C4409;
    const double C5205 = C139463 * C5193;
    const double C32757 = C139600 * C5193;
    const double C94753 = C139600 * C5193;
    const double C138871 = C138861 / C137060;
    const double C137735 = -C137732;
    const double C17071 = C139463 * C3762;
    const double C19590 = C139463 * C5950;
    const double C40751 = C139600 * C5950;
    const double C102499 = C139600 * C5950;
    const double C6504 =
        (2 * (C137535 * C137707 + C137358 * ae) +
         C137535 * (C137707 + C137535 * C138167 + C138164 * ae) +
         (C137358 + C137381 * C137771) * ae) /
        C137060;
    const double C16961 = C16955 + C16956;
    const double C18641 = C18633 + C18634;
    const double C33706 = C33698 + C33699;
    const double C95682 = C95674 + C95675;
    const double C66334 = C139463 * C17695;
    const double C67047 = C139463 * C18619;
    const double C79742 = C139600 * C18619;
    const double C112427 = C139600 * C18619;
    const double C68458 = C139463 * C20539;
    const double C80665 = C139600 * C20539;
    const double C113325 = C139600 * C20539;
    const double C21251 =
        (2 * (C137535 * C138125 + C137966 * ae) +
         C137535 * (C138125 + C137535 * C138387 + C138382 * ae) +
         (C137966 + C138220 * C137771) * ae) /
        C137060;
    const double C138628 = -C138625;
    const double C138480 = C137705 + C138477;
    const double C138860 = C138847 / C137336;
    const double C17854 =
        3 * ((-(C137781 * C137649) / C137082) / C137060 - C137776 / C137336) +
        C137477 *
            ((-2 * C137477 * C137781) / C137336 +
             C137477 * ((-(C137787 * C137649) / C137082) / C137060 - C137784));
    const double C18855 =
        (((-2 * C138124) / C137082 - (C137477 * C138278) / C137082) * ae) /
            C137060 -
        ((2 * C138125 + C137477 * C138288) * ce) / C137336 +
        C137535 *
            ((-2 * C137477 * C137781) / C137336 +
             C137477 * ((-(C137787 * C137649) / C137082) / C137060 - C137784));
    const double C20753 =
        (-(C137781 * C137649) / C137082) / C137060 - C137776 / C137336 -
        (ae * (C137535 * C138278 + C138227 * ce)) / C137336 -
        ((C137535 * C138288 + C138227 * ae) * ce) / C137336 +
        C137535 *
            ((-(C138288 * ce) / C137082) / C137060 - (ae * C138278) / C137336 +
             C137535 * ((-(C137787 * C137649) / C137082) / C137060 - C137784));
    const double C3815 =
        (-2 * C137477 * C137996) / C137336 +
        C137477 * ((-(C137335 * C137787 * C137649) / C137082) / C137060 -
                   C137996 / C137336);
    const double C4574 = (-(C137477 * C137707 * ce) / C137082) / C137060 -
                         (ae * C137477 * C137549) / C137336 -
                         (C137535 * C137477 * C137996) / C137336;
    const double C4577 =
        (-((C137707 + C137722 * C137649) * ce) / C137082) / C137060 -
        (ae * (C137564 * C137649 + C137549)) / C137336 +
        C137535 * ((-(C137335 * C137787 * C137649) / C137082) / C137060 -
                   C137996 / C137336);
    const double C5374 =
        (-(ae * (C137535 * C137549 + C137358 * ce)) / C137082) / C137060 -
        (C137335 * C137776) / C137336 -
        ((C137535 * C137707 + C137358 * ae) * ce) / C137336 +
        C137535 * ((-(C137707 * ce) / C137082) / C137060 -
                   (ae * C137549) / C137336 - (C137535 * C137996) / C137336);
    const double C6107 =
        (-(ae * (C137535 * C138127 + C137973 * ce)) / C137082) / C137060 -
        (C137477 * C137996) / C137336 -
        ((C137535 * C138128 + C137973 * ae) * ce) / C137336 +
        C137535 *
            ((-(C138128 * ce) / C137082) / C137060 - (ae * C138127) / C137336 -
             (C137535 * C137477 * C137335 * C137787) / C137336);
    const double C17853 =
        3 * ((-(C138304 * C137649) / C137082) / C137060 - C137996 / C137336) +
        C137477 * ((-2 * C137477 * C138304) / C137336 +
                   C137477 * ((-(C137335 *
                                 (C137416 * C137417 +
                                  C137771 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137649) /
                               C137082) /
                                  C137060 -
                              C138304 / C137336));
    const double C20754 =
        (-(C138304 * C137649) / C137082) / C137060 - C137996 / C137336 -
        (ae * (C137535 * C138270 + C138250 * ce)) / C137336 -
        ((C137535 * C138299 + C138250 * ae) * ce) / C137336 +
        C137535 *
            ((-(C138299 * ce) / C137082) / C137060 - (ae * C138270) / C137336 +
             C137535 * ((-(C137335 *
                           (C137416 * C137417 +
                            C137771 * bs[7] * std::pow(C137339, 7)) *
                           C137344 * C137649) /
                         C137082) /
                            C137060 -
                        C138304 / C137336));
    const double C21388 =
        2 * ((-(C138125 * ce) / C137082) / C137060 - (ae * C138124) / C137336 -
             (C137535 * C138380) / C137336) -
        (ae * (C137535 * C138386 + C138124 + C138382 * ce)) / C137336 -
        ((C138125 + C137535 * C138387 + C138382 * ae) * ce) / C137336 +
        C137535 * ((-(ae * C138386) / C137082) / C137060 - C138380 / C137336 -
                   (C138387 * ce) / C137336 +
                   C137535 * ((-(C138383 * ce) / C137082) / C137060 -
                              (ae * C138381) / C137336 -
                              (C137535 * C137477 * C137787) / C137336));
    const double C138469 = C138463 / C137336;
    const double C737 = C139463 * C723;
    const double C1607 = C139463 * C1600;
    const double C31946 = C30408 * C1600;
    const double C93979 = C92451 * C1600;
    const double C2475 = C139463 * C2462;
    const double C31006 = C139600 * C2462;
    const double C32985 = C30408 * C2462;
    const double C93043 = C139600 * C2462;
    const double C94981 = C92451 * C2462;
    const double C3302 = C139463 * C3296;
    const double C33913 = C30408 * C3296;
    const double C95889 = C92451 * C3296;
    const double C17858 = C139463 * C3816;
    const double C79890 = C30408 * C3816;
    const double C112575 = C92451 * C3816;
    const double C18867 = C139463 * C4576;
    const double C79270 = C139600 * C4576;
    const double C80891 = C30408 * C4576;
    const double C111957 = C139600 * C4576;
    const double C113551 = C92451 * C4576;
    const double C20762 = C139463 * C6106;
    const double C80887 = C139600 * C6106;
    const double C82825 = C30408 * C6106;
    const double C113547 = C139600 * C6106;
    const double C115389 = C92451 * C6106;
    const double C137396 = C137392 - C137377;
    const double C35141 = C35138 + C35139;
    const double C80555 = C80550 + C80551;
    const double C80553 = C80546 + C80547;
    const double C113215 = C113210 + C113211;
    const double C113213 = C113206 + C113207;
    const double C37072 = C37068 + C37069;
    const double C81565 = C81562 + C81563;
    const double C82511 = C82508 + C82509;
    const double C114169 = C114166 + C114167;
    const double C115075 = C115072 + C115073;
    const double C138233 = C138230 - C137496;
    const double C138478 = C138475 - C137554;
    const double C65993 = (4 * (2 * C138104 + C137477 * C138196) +
                           C137477 * (3 * C138196 + C137477 * C138516)) /
                          C137060;
    const double C66530 =
        (C137535 * (3 * C138196 + C137477 * C138516)) / C137060;
    const double C67960 =
        (2 * C138104 + C137477 * C138196 + C138516 * C137771) / C137060;
    const double C129887 = (4 * (2 * C138408 + C137535 * C138412) +
                            C137535 * (3 * C138412 + C137535 * C138797)) /
                           C137060;
    const double C138542 = C138533 - C138540;
    const double C138823 = C138814 - C138821;
    const double C137530 = C137518 - C137528;
    const double C138842 = C138833 - C138840;
    const double C137588 = C137576 - C137586;
    const double C138611 = C138601 - C138608;
    const double C313 = (4 * (2 * C137606 + C137335 * C137616) +
                         C137335 * (3 * C137616 + C137335 * C137642)) /
                        C137060;
    const double C1965 =
        (C137535 * (3 * C137616 + C137335 * C137642)) / C137060;
    const double C4916 =
        (2 * C137606 + C137335 * C137616 + C137642 * C137771) / C137060;
    const double C130063 = (4 * (2 * C138421 + C137535 * C138423) +
                            C137535 * (3 * C138423 + C137535 * C138806)) /
                           C137060;
    const double C560 = (4 * (2 * C137707 + C137335 * C137717) +
                         C137335 * (3 * C137717 + C137335 * C137743)) /
                        C137060;
    const double C1399 =
        (C137477 * (3 * C137717 + C137335 * C137743)) / C137060;
    const double C3108 =
        (2 * C137707 + C137335 * C137717 + C137743 * C137649) / C137060;
    const double C66328 = (4 * (2 * C138125 + C137477 * C138288) +
                           C137477 * (3 * C138288 + C137477 * C138633)) /
                          C137060;
    const double C137503 = C137502 / C137060;
    const double C138198 = C138197 / C137060;
    const double C137527 = C137524 / C137060;
    const double C138515 = C138513 / C137060;
    const double C138785 = C138784 / C137060;
    const double C32426 = C1985 * C821;
    const double C32422 = C1985 * C822;
    const double C34907 = C1985 * C139303;
    const double C35881 = C1985 * C139562;
    const double C35879 = C1985 * C139308;
    const double C40331 = C1985 * C7396;
    const double C40329 = C1985 * C139308;
    const double C34925 = C34921 * C139303;
    const double C40335 = C34921 * C7396;
    const double C44533 = C34921 * C139562;
    const double C35902 = C35898 * C139562;
    const double C36836 = C35898 * C139303;
    const double C43509 = C35898 * C7396;
    const double C126253 = C35898 * C821;
    const double C137618 = C137617 / C137060;
    const double C138214 = C138213 / C137060;
    const double C83133 = C83128 + C83129;
    const double C115669 = C115664 + C115665;
    const double C129450 = C129446 + C129447;
    const double C34927 = C34923 * C139303;
    const double C36851 = C36847 * C139303;
    const double C132069 = C36847 * C7396;
    const double C135200 = C36847 * C139562;
    const double C37685 = C37683 * C139303;
    const double C128760 = C37683 * C139562;
    const double C134432 = C37683 * C7396;
    const double C137641 = C137638 / C137060;
    const double C138539 = C138536 / C137060;
    const double C138651 = -C138650;
    const double C138688 = C138687 / C137060;
    const double C137561 = C137560 / C137060;
    const double C138414 = C138413 / C137060;
    const double C137585 = C137582 / C137060;
    const double C138524 = C138523 / C137060;
    const double C138728 = -C138726;
    const double C138796 = C138794 / C137060;
    const double C499 = C495 * C139372;
    const double C2176 = C495 * C139571;
    const double C9458 = C495 * C9074;
    const double C1318 = C1315 * C139372;
    const double C8650 = C1315 * C139571;
    const double C10299 = C1315 * C9074;
    const double C2184 = C2180 * C139384;
    const double C5103 = C2180 * C4654;
    const double C9452 = C2180 * C139384;
    const double C30742 = C2180 * C139372;
    const double C32642 = C2180 * C139571;
    const double C36115 = C2180 * C4653;
    const double C41635 = C2180 * C9074;
    const double C8659 = C8652 + C8653;
    const double C15877 = C15869 + C15870;
    const double C24023 = C24019 + C24020;
    const double C49272 = C49264 + C49265;
    const double C57068 = C57064 + C57065;
    const double C5114 = C5105 + C5106;
    const double C19489 = C19485 + C19486;
    const double C52682 = C52678 + C52679;
    const double C138280 = C138279 / C137060;
    const double C138324 = C138323 / C137060;
    const double C1317 = C1314 * C139372;
    const double C8655 = C1314 * C139571;
    const double C10303 = C1314 * C9074;
    const double C2186 = C2182 * C139384;
    const double C5110 = C2182 * C4654;
    const double C9456 = C2182 * C139384;
    const double C30743 = C2182 * C139372;
    const double C32646 = C2182 * C139571;
    const double C41639 = C2182 * C9074;
    const double C3030 = C3028 * C139372;
    const double C137690 = C137689 / C137060;
    const double C138271 = -C138269;
    const double C138330 = -C138329;
    const double C138607 = C138604 / C137060;
    const double C138674 = C138673 / C137060;
    const double C15021 = C1419 * C821;
    const double C15017 = C1419 * C822;
    const double C16942 = C1419 * C139562;
    const double C16940 = C1419 * C139308;
    const double C17702 = C1419 * C139303;
    const double C22984 = C1419 * C7396;
    const double C22982 = C1419 * C139308;
    const double C16963 = C16959 * C139562;
    const double C17705 = C16959 * C139303;
    const double C22988 = C16959 * C7396;
    const double C64401 = C16959 * C821;
    const double C18643 = C18637 * C139303;
    const double C24156 = C18637 * C7396;
    const double C28302 = C18637 * C139562;
    const double C137719 = C137718 / C137060;
    const double C138441 = C138440 / C137060;
    const double C17716 = C17714 * C139303;
    const double C65785 = C17714 * C139562;
    const double C70312 = C17714 * C7396;
    const double C18646 = C18640 * C139303;
    const double C71193 = C18640 * C7396;
    const double C74317 = C18640 * C139562;
    const double C20552 = C20550 * C139303;
    const double C137742 = C137739 / C137060;
    const double C138618 = C138617 / C137060;
    const double C138746 = -C138744;
    const double C138820 = C138817 / C137060;
    const double C666 = C662 * C139346;
    const double C1514 = C662 * C139570;
    const double C7243 = C662 * C6692;
    const double C1522 = C1518 * C139360;
    const double C3207 = C1518 * C2566;
    const double C7237 = C1518 * C139360;
    const double C14135 = C1518 * C139346;
    const double C15131 = C1518 * C139570;
    const double C17066 = C1518 * C2565;
    const double C22188 = C1518 * C6692;
    const double C2383 = C2380 * C139346;
    const double C8875 = C2380 * C6692;
    const double C10503 = C2380 * C139570;
    const double C8884 = C8877 + C8878;
    const double C31839 = C31831 + C31832;
    const double C40896 = C40892 + C40893;
    const double C93872 = C93864 + C93865;
    const double C102644 = C102640 + C102641;
    const double C5296 = C5291 + C5292;
    const double C32879 = C32872 + C32873;
    const double C36336 = C36332 + C36333;
    const double C94875 = C94868 + C94869;
    const double C98218 = C98214 + C98215;
    const double C138290 = C138289 / C137060;
    const double C138459 = C138458 / C137060;
    const double C1524 = C1520 * C139360;
    const double C3214 = C1520 * C2566;
    const double C7241 = C1520 * C139360;
    const double C14136 = C1520 * C139346;
    const double C15135 = C1520 * C139570;
    const double C22192 = C1520 * C6692;
    const double C2384 = C2381 * C139346;
    const double C8880 = C2381 * C6692;
    const double C10507 = C2381 * C139570;
    const double C137766 = C137765 / C137060;
    const double C138300 = -C138298;
    const double C138449 = -C138447;
    const double C138632 = C138629 / C137060;
    const double C138839 = C138836 / C137060;
    const double C64077 = C63890 * C244;
    const double C65998 = C63890 * C3364;
    const double C66724 = C63890 * C1875;
    const double C64080 = C63886 * C244;
    const double C65296 = C63886 * C137101;
    const double C69853 = C63886 * C7402;
    const double C70788 = C63886 * C1875;
    const double C63897 = C63885 * C821;
    const double C65295 = C63885 * C139562;
    const double C65997 = C63885 * C139303;
    const double C69852 = C63885 * C7396;
    const double C64074 = C63884 * C244;
    const double C65996 = C63884 * C3364;
    const double C66719 = C63884 * C1875;
    const double C64100 = C64094 * C139372;
    const double C70787 = C64094 * C139571;
    const double C72361 = C64094 * C9074;
    const double C64099 = C64093 * C139372;
    const double C66725 = C64093 * C139571;
    const double C68145 = C64093 * C4653;
    const double C72357 = C64093 * C9074;
    const double C64098 = C64092 * C139372;
    const double C66720 = C64092 * C139571;
    const double C68138 = C64092 * C4653;
    const double C72353 = C64092 * C9074;
    const double C65478 = C65313 * C244;
    const double C66001 = C65313 * C3364;
    const double C66731 = C65313 * C1875;
    const double C65485 = C65483 * C139372;
    const double C66730 = C65483 * C139571;
    const double C74740 = C65483 * C9074;
    const double C66554 = C66548 * C3364;
    const double C66721 = C66548 * C1876;
    const double C68139 = C66548 * C4829;
    const double C72354 = C66548 * C9225;
    const double C76784 = C66548 * C244;
    const double C77628 = C66548 * C181;
    const double C80098 = C66548 * C2661;
    const double C80206 = C66548 * C1875;
    const double C82072 = C66548 * C923;
    const double C82070 = C66548 * C924;
    const double C85528 = C66548 * C6772;
    const double C66552 = C66546 * C3364;
    const double C66726 = C66546 * C1876;
    const double C68146 = C66546 * C4829;
    const double C72358 = C66546 * C9225;
    const double C78660 = C66546 * C244;
    const double C80104 = C66546 * C2661;
    const double C80100 = C66546 * C2662;
    const double C80212 = C66546 * C1875;
    const double C82074 = C66546 * C924;
    const double C85532 = C66546 * C6772;
    const double C77629 = C66640 * C139346;
    const double C80103 = C66640 * C2565;
    const double C80099 = C66640 * C2566;
    const double C82073 = C66640 * C139570;
    const double C82071 = C66640 * C139360;
    const double C85531 = C66640 * C6692;
    const double C85529 = C66640 * C139360;
    const double C66740 = C66736 * C139384;
    const double C68147 = C66736 * C4654;
    const double C72359 = C66736 * C139384;
    const double C78659 = C66736 * C139372;
    const double C80211 = C66736 * C139571;
    const double C90899 = C66736 * C9074;
    const double C66738 = C66734 * C139384;
    const double C68140 = C66734 * C4654;
    const double C72355 = C66734 * C139384;
    const double C76785 = C66734 * C139372;
    const double C80207 = C66734 * C139571;
    const double C82186 = C66734 * C4653;
    const double C87743 = C66734 * C9074;
    const double C77634 = C77517 * C181;
    const double C80998 = C77517 * C137101;
    const double C85384 = C77517 * C7402;
    const double C87606 = C77517 * C923;
    const double C77522 = C77516 * C821;
    const double C79994 = C77516 * C139303;
    const double C80997 = C77516 * C139562;
    const double C85383 = C77516 * C7396;
    const double C77625 = C77515 * C181;
    const double C79993 = C77515 * C3364;
    const double C82068 = C77515 * C923;
    const double C77644 = C77641 * C139346;
    const double C85535 = C77641 * C6692;
    const double C87605 = C77641 * C139570;
    const double C77643 = C77640 * C139346;
    const double C80097 = C77640 * C2565;
    const double C82069 = C77640 * C139570;
    const double C85527 = C77640 * C6692;
    const double C81134 = C81016 * C181;
    const double C81960 = C81016 * C3364;
    const double C82078 = C81016 * C923;
    const double C81140 = C81137 * C139346;
    const double C82077 = C81137 * C139570;
    const double C91687 = C81137 * C6692;
    const double C127893 = C81137 * C2565;
    const double C82906 = C82904 * C3364;
    const double C82976 = C82904 * C181;
    const double C129290 = C82904 * C923;
    const double C82982 = C82981 * C139346;
    const double C129289 = C82981 * C139570;
    const double C136521 = C82981 * C6692;
    const double C22081 = C1420 * C6696;
    const double C41430 = C1986 * C6696;
    const double C137105 = C139303 - C137103;
    const double C22084 = C1419 * C139601;
    const double C22078 = C15027 * C139601;
    const double C41433 = C1985 * C139601;
    const double C41427 = C32432 * C139601;
    const double C69168 = C63885 * C139601;
    const double C69624 = C16959 * C139601;
    const double C86555 = C77516 * C139601;
    const double C132865 = C35898 * C139601;
    const double C92 =
        (C139562 - C139588) / C137087 - (C139601 * C139299) / C137082;
    const double C22080 = C1419 * C139590;
    const double C41429 = C1985 * C139590;
    const double C93 =
        (2 * C139308 + C139601) / C137087 - (C139590 * C139299) / C137082;
    const double C94 = C139590 / C137087 - C139311 / C137091;
    const double C137181 = C139346 - C137178;
    const double C90792 = C66546 * C7479;
    const double C7710 = C414 * C139602;
    const double C7704 = C413 * C139602;
    const double C7944 = C661 * C139602;
    const double C7938 = C660 * C139602;
    const double C23094 = C1518 * C139602;
    const double C45681 = C32539 * C139602;
    const double C90795 = C66640 * C139602;
    const double C90789 = C77640 * C139602;
    const double C135842 = C81137 * C139602;
    const double C3360 =
        (C139570 - C139591) / C137087 - (C139602 * C139356) / C137082;
    const double C7946 = C1520 * C139593;
    const double C7940 = C1518 * C139593;
    const double C90791 = C66640 * C139593;
    const double C3361 =
        (2 * C139360 + C139602) / C137087 - (C139593 * C139356) / C137082;
    const double C3362 = C139593 / C137087 - C139363 / C137091;
    const double C2933 = C339 * C2660;
    const double C2926 = C337 * C2660;
    const double C3211 = C586 * C2660;
    const double C3204 = C584 * C2660;
    const double C17065 = C1418 * C2660;
    const double C33488 = C1984 * C2660;
    const double C35026 = C32431 * C2660;
    const double C80102 = C66548 * C2660;
    const double C80096 = C77515 * C2660;
    const double C127892 = C81016 * C2660;
    const double C128128 = C35899 * C2660;
    const double C137226 = C139372 - C137223;
    const double C11073 = C494 * C139603;
    const double C11067 = C493 * C139603;
    const double C11307 = C739 * C139603;
    const double C11301 = C738 * C139603;
    const double C30338 = C15243 * C139603;
    const double C43713 = C2180 * C139603;
    const double C75426 = C64093 * C139603;
    const double C75420 = C64092 * C139603;
    const double C91793 = C66734 * C139603;
    const double C6159 =
        (C139571 - C139594) / C137087 - (C139603 * C139380) / C137082;
    const double C11075 = C2182 * C139596;
    const double C11069 = C2180 * C139596;
    const double C75428 = C66736 * C139596;
    const double C75422 = C66734 * C139596;
    const double C6160 =
        (2 * C139384 + C139603) / C137087 - (C139596 * C139380) / C137082;
    const double C6161 = C139596 / C137087 - C139387 / C137091;
    const double C5107 = C339 * C4828;
    const double C5100 = C337 * C4828;
    const double C5385 = C586 * C4828;
    const double C5378 = C584 * C4828;
    const double C19796 = C1418 * C4828;
    const double C20756 = C15026 * C4828;
    const double C36114 = C1984 * C4828;
    const double C68144 = C63890 * C4828;
    const double C68137 = C63884 * C4828;
    const double C68618 = C16960 * C4828;
    const double C82185 = C66548 * C4828;
    const double C14336 = C14320 + C14321;
    const double C14332 = C14312 + C14313;
    const double C47768 = C47752 + C47753;
    const double C47764 = C47744 + C47745;
    const double C63888 = C63868 + C63869;
    const double C32083 = C32067 + C32068;
    const double C32079 = C32059 + C32060;
    const double C77519 = C77511 + C77512;
    const double C94116 = C94100 + C94101;
    const double C94112 = C94092 + C94093;
    const double C16297 = C16285 + C16286;
    const double C16293 = C16277 + C16278;
    const double C49688 = C49676 + C49677;
    const double C49684 = C49668 + C49669;
    const double C63892 = C63876 + C63877;
    const double C17985 = C17971 + C17972;
    const double C23335 = C23327 + C23328;
    const double C51258 = C51244 + C51245;
    const double C56380 = C56372 + C56373;
    const double C70576 = C70564 + C70565;
    const double C35554 = C35542 + C35543;
    const double C35550 = C35534 + C35535;
    const double C81014 = C81000 + C81001;
    const double C97488 = C97476 + C97477;
    const double C97484 = C97468 + C97469;
    const double C34922 = C34914 + C34915;
    const double C80332 = C80320 + C80321;
    const double C80329 = C80314 + C80315;
    const double C112992 = C112980 + C112981;
    const double C112989 = C112974 + C112975;
    const double C36846 = C36838 + C36839;
    const double C81356 = C81350 + C81351;
    const double C82300 = C82292 + C82293;
    const double C113960 = C113954 + C113955;
    const double C114864 = C114856 + C114857;
    const double C3220 = C3218 * C2567;
    const double C7942 = C3218 * C7400;
    const double C15133 = C3218 * C139360;
    const double C17068 = C3218 * C2566;
    const double C22190 = C3218 * C139360;
    const double C23096 = C3218 * C139593;
    const double C2930 = C2844 * C2662;
    const double C3022 = C2844 * C244;
    const double C7707 = C2844 * C7479;
    const double C3208 = C3122 * C2662;
    const double C3300 = C3122 * C244;
    const double C7941 = C3122 * C7479;
    const double C15132 = C3122 * C924;
    const double C16945 = C3122 * C137101;
    const double C17067 = C3122 * C2661;
    const double C17704 = C3122 * C3364;
    const double C18870 = C3122 * C1875;
    const double C22189 = C3122 * C6772;
    const double C22987 = C3122 * C7402;
    const double C8536 = C8433 * C6772;
    const double C8649 = C8433 * C1876;
    const double C10192 = C8433 * C924;
    const double C10298 = C8433 * C9225;
    const double C31608 = C8433 * C244;
    const double C33490 = C8433 * C2661;
    const double C34912 = C8433 * C3364;
    const double C40334 = C8433 * C7402;
    const double C40618 = C8433 * C1875;
    const double C44532 = C8433 * C137101;
    const double C8874 = C8771 * C6772;
    const double C8987 = C8771 * C1876;
    const double C10502 = C8771 * C924;
    const double C10608 = C8771 * C9225;
    const double C16077 = C8771 * C181;
    const double C18624 = C8771 * C3364;
    const double C19798 = C8771 * C4829;
    const double C24155 = C8771 * C7402;
    const double C26357 = C8771 * C923;
    const double C28301 = C8771 * C137101;
    const double C5012 = C4930 * C181;
    const double C5104 = C4930 * C4830;
    const double C11070 = C4930 * C10842;
    const double C32643 = C4930 * C1876;
    const double C35884 = C4930 * C137101;
    const double C36116 = C4930 * C4829;
    const double C36835 = C4930 * C3364;
    const double C36963 = C4930 * C923;
    const double C41636 = C4930 * C9225;
    const double C43508 = C4930 * C7402;
    const double C5290 = C5208 * C181;
    const double C5382 = C5208 * C4830;
    const double C11304 = C5208 * C10842;
    const double C342 = C331 + C332;
    const double C589 = C578 + C579;
    const double C13833 = C13820 + C13821;
    const double C30850 = C30837 + C30838;
    const double C47271 = C47258 + C47259;
    const double C92887 = C92874 + C92875;
    const double C17346 = C17343 + C17344;
    const double C17787 = C17785 + C17786;
    const double C50673 = C50670 + C50671;
    const double C65399 = C65395 + C65396;
    const double C79822 = C79819 + C79820;
    const double C112507 = C112504 + C112505;
    const double C18104 = C18099 + C18100;
    const double C18756 = C18751 + C18752;
    const double C51373 = C51368 + C51369;
    const double C66641 = C66636 + C66637;
    const double C79170 = C79167 + C79168;
    const double C80787 = C80782 + C80783;
    const double C111857 = C111854 + C111855;
    const double C113447 = C113442 + C113443;
    const double C20030 = C20027 + C20028;
    const double C20655 = C20653 + C20654;
    const double C53191 = C53188 + C53189;
    const double C68059 = C68055 + C68056;
    const double C80785 = C80778 + C80779;
    const double C82725 = C82722 + C82723;
    const double C113445 = C113438 + C113439;
    const double C115289 = C115286 + C115287;
    const double C37605 = C37602 + C37603;
    const double C37829 = C37827 + C37828;
    const double C83053 = C83051 + C83052;
    const double C83279 = C83276 + C83277;
    const double C99427 = C99424 + C99425;
    const double C115813 = C115810 + C115811;
    const double C14335 = C14318 + C14319;
    const double C14331 = C14310 + C14311;
    const double C47767 = C47750 + C47751;
    const double C47763 = C47742 + C47743;
    const double C63887 = C63866 + C63867;
    const double C32082 = C32065 + C32066;
    const double C32078 = C32057 + C32058;
    const double C77518 = C77509 + C77510;
    const double C94115 = C94098 + C94099;
    const double C94111 = C94090 + C94091;
    const double C16296 = C16283 + C16284;
    const double C49687 = C49674 + C49675;
    const double C63891 = C63874 + C63875;
    const double C17984 = C17969 + C17970;
    const double C51257 = C51242 + C51243;
    const double C66547 = C66537 + C66538;
    const double C35553 = C35540 + C35541;
    const double C81015 = C81002 + C81003;
    const double C97487 = C97474 + C97475;
    const double C415 = C407 + C408;
    const double C13916 = C13908 + C13909;
    const double C47354 = C47346 + C47347;
    const double C1216 = C1204 + C1205;
    const double C13913 = C13902 + C13903;
    const double C14801 = C14794 + C14795;
    const double C47351 = C47340 + C47341;
    const double C48233 = C48226 + C48227;
    const double C2078 = C2070 + C2071;
    const double C15767 = C15759 + C15760;
    const double C49162 = C49154 + C49155;
    const double C35034 = C35029 + C35030;
    const double C77966 = C77963 + C77964;
    const double C80443 = C80436 + C80437;
    const double C110657 = C110654 + C110655;
    const double C113103 = C113096 + C113097;
    const double C36010 = C36004 + C36005;
    const double C81461 = C81458 + C81459;
    const double C114065 = C114062 + C114063;
    const double C740 = C732 + C733;
    const double C31017 = C31009 + C31010;
    const double C93054 = C93046 + C93047;
    const double C1616 = C1609 + C1610;
    const double C31950 = C31943 + C31944;
    const double C93983 = C93976 + C93977;
    const double C2481 = C2469 + C2470;
    const double C31014 = C31003 + C31004;
    const double C32989 = C32982 + C32983;
    const double C93051 = C93040 + C93041;
    const double C94985 = C94978 + C94979;
    const double C17181 = C17174 + C17175;
    const double C79274 = C79271 + C79272;
    const double C111961 = C111958 + C111959;
    const double C18873 = C18861 + C18862;
    const double C77404 = C77401 + C77402;
    const double C80895 = C80888 + C80889;
    const double C110149 = C110146 + C110147;
    const double C113555 = C113548 + C113549;
    const double C68153 = C68151 * C4655;
    const double C75424 = C68151 * C10691;
    const double C80209 = C68151 * C139384;
    const double C82188 = C68151 * C4654;
    const double C87745 = C68151 * C139384;
    const double C91795 = C68151 * C139596;
    const double C20551 = C20549 * C3364;
    const double C20760 = C20549 * C4830;
    const double C30341 = C20549 * C10842;
    const double C67975 = C67971 * C3364;
    const double C68141 = C67971 * C4830;
    const double C75423 = C67971 * C10842;
    const double C80208 = C67971 * C1876;
    const double C81131 = C67971 * C181;
    const double C82082 = C67971 * C923;
    const double C82076 = C67971 * C924;
    const double C82187 = C67971 * C4829;
    const double C87744 = C67971 * C9225;
    const double C91686 = C67971 * C6772;
    const double C127894 = C67971 * C2661;
    const double C421 = C404 + C418;
    const double C501 = C484 + C498;
    const double C1217 = C1206 + C1207;
    const double C2181 = C2170 + C2171;
    const double C668 = C651 + C665;
    const double C746 = C729 + C743;
    const double C1519 = C1508 + C1509;
    const double C2482 = C2471 + C2472;
    const double C137408 = C137405 + C137391;
    const double C19914 = C139587 * C5476;
    const double C53079 = C139587 * C5476;
    const double C81009 = C139289 * C5476;
    const double C17268 = C17261 + C17262;
    const double C50599 = C50592 + C50593;
    const double C65311 = C65302 + C65303;
    const double C17988 = C17977 + C17978;
    const double C51261 = C51250 + C51251;
    const double C70578 = C70570 + C70571;
    const double C37451 = C37444 + C37445;
    const double C99281 = C99274 + C99275;
    const double C128518 = C128511 + C128512;
    const double C137450 = C137442 - C137424;
    const double C137809 = C137808 / C137060;
    const double C81968 = C81966 * C3364;
    const double C82189 = C81966 * C4830;
    const double C82979 = C81966 * C181;
    const double C91796 = C81966 * C10842;
    const double C129288 = C81966 * C924;
    const double C136520 = C81966 * C6772;
    const double C137868 = C137867 / C137060;
    const double C66008 = C66002 + C66003;
    const double C66549 = C66541 + C66542;
    const double C67973 = C67967 + C67968;
    const double C129896 = C129891 + C129892;
    const double C137407 = C137404 + C137388;
    const double C137433 = -C137421;
    const double C19275 = C13796 * C5473;
    const double C19591 = C554 * C5473;
    const double C19917 = C13596 * C5473;
    const double C36844 = C307 * C5473;
    const double C40754 = C30813 * C5473;
    const double C52468 = C47234 * C5473;
    const double C53082 = C47034 * C5473;
    const double C81012 = C63381 * C5473;
    const double C102502 = C92850 * C5473;
    const double C82617 = C139600 * C21253;
    const double C115181 = C139600 * C21253;
    const double C138535 = C138531 / C137060;
    const double C80327 = C139598 * C18319;
    const double C112987 = C139598 * C18319;
    const double C138816 = C138812 / C137060;
    const double C66340 = C66335 + C66336;
    const double C67052 = C67048 + C67049;
    const double C79750 = C79745 + C79746;
    const double C112435 = C112430 + C112431;
    const double C68462 = C68459 + C68460;
    const double C80677 = C80668 + C80669;
    const double C82303 = C82298 + C82299;
    const double C113337 = C113328 + C113329;
    const double C114867 = C114862 + C114863;
    const double C128051 = C128048 + C128049;
    const double C130072 = C130069 + C130070;
    const double C16292 = C139587 * C2584;
    const double C49683 = C139587 * C2584;
    const double C63883 = C139289 * C2584;
    const double C35549 = C139587 * C4670;
    const double C97483 = C139587 * C4670;
    const double C126017 = C139289 * C4670;
    const double C17968 = C139587 * C3910;
    const double C23332 = C13591 * C3910;
    const double C51241 = C139587 * C3910;
    const double C56377 = C47029 * C3910;
    const double C70569 = C139289 * C3910;
    const double C19916 = C13591 * C5480;
    const double C53081 = C47029 * C5480;
    const double C67966 = C139289 * C5480;
    const double C14338 = C14324 + C14325;
    const double C14334 = C14316 + C14317;
    const double C47770 = C47756 + C47757;
    const double C47766 = C47748 + C47749;
    const double C63889 = C63870 + C63871;
    const double C32085 = C32071 + C32072;
    const double C32081 = C32063 + C32064;
    const double C77520 = C77513 + C77514;
    const double C94118 = C94104 + C94105;
    const double C94114 = C94096 + C94097;
    const double C16299 = C16289 + C16290;
    const double C16295 = C16281 + C16282;
    const double C49690 = C49680 + C49681;
    const double C49686 = C49672 + C49673;
    const double C63893 = C63878 + C63879;
    const double C17269 = C17263 + C17264;
    const double C50600 = C50594 + C50595;
    const double C65312 = C65304 + C65305;
    const double C17989 = C17979 + C17980;
    const double C51262 = C51252 + C51253;
    const double C66545 = C66533 + C66534;
    const double C35556 = C35546 + C35547;
    const double C35552 = C35538 + C35539;
    const double C81017 = C81006 + C81007;
    const double C97490 = C97480 + C97481;
    const double C97486 = C97472 + C97473;
    const double C37452 = C37446 + C37447;
    const double C82905 = C82902 + C82903;
    const double C99282 = C99276 + C99277;
    const double C137465 = C137462 + C137440;
    const double C17254 = (3 * (C137369 + C137399 * C137649) +
                           C137477 * (2 * C138102 + C137477 * C138190)) /
                          C137060;
    const double C17962 =
        (C137535 * (2 * C138102 + C137477 * C138190)) / C137060;
    const double C19906 =
        (C137369 + C137399 * C137649 + C138190 * C137771) / C137060;
    const double C37437 = (3 * (C137369 + C137399 * C137771) +
                           C137535 * (2 * C138402 + C137535 * C138406)) /
                          C137060;
    const double C138583 = C138579 + C138566;
    const double C138881 = C138877 + C138869;
    const double C3543 =
        (2 * (C137477 * C137616 + C137389 * ae) +
         C137477 * (C137616 + C137477 * C137982 + C137979 * ae) +
         (C137389 + C137438 * C137649) * ae) /
        C137060;
    const double C4164 =
        (C137535 * (C137616 + C137477 * C137982 + C137979 * ae)) / C137060;
    const double C5715 =
        (C137477 * C137616 + C137389 * ae + C137982 * C137771) / C137060;
    const double C6503 =
        (2 * (C137535 * C137717 + C137389 * ae) +
         C137535 * (C137717 + C137535 * C138173 + C138170 * ae) +
         (C137389 + C137438 * C137771) * ae) /
        C137060;
    const double C1097 = (C137477 * (3 * C137616 + C137335 * C137642) +
                          (3 * C137389 + C137335 * C137454) * ae) /
                         C137060;
    const double C2267 = (C137535 * (3 * C137717 + C137335 * C137743) +
                          (3 * C137389 + C137335 * C137454) * ae) /
                         C137060;
    const double C2830 = (2 * C137606 + C137335 * C137616 +
                          C137477 * (C137477 * C137642 + C137454 * ae) +
                          C137477 * C137454 * ae) /
                         C137060;
    const double C5194 = (2 * C137707 + C137335 * C137717 +
                          C137535 * (C137535 * C137743 + C137454 * ae) +
                          C137535 * C137454 * ae) /
                         C137060;
    const double C8422 =
        (C137535 * (C137477 * C137642 + C137454 * ae)) / C137060;
    const double C8760 =
        (C137535 * C137477 * C137743 + C137477 * C137454 * ae) / C137060;
    const double C112 = 4 * (2 * C137358 + C137335 * C137389) +
                        C137335 * (3 * C137389 + C137335 * C137454);
    const double C833 = C137477 * (3 * C137389 + C137335 * C137454);
    const double C1701 = C137535 * (3 * C137389 + C137335 * C137454);
    const double C2573 = 2 * C137358 + C137335 * C137389 + C137454 * C137649;
    const double C4659 = 2 * C137358 + C137335 * C137389 + C137454 * C137771;
    const double C8120 = C137535 * C137477 * C137454;
    const double C3431 =
        (-2 * (C137477 * C137501 + C137389 * ce)) / C137082 -
        (C137477 * (C137477 * C137981 + C137501 + C137979 * ce)) / C137082 -
        ((C137389 + C137438 * C137649) * ce) / C137082;
    const double C3992 =
        -(C137535 * (C137477 * C137981 + C137501 + C137979 * ce)) / C137082;
    const double C5555 =
        -(C137981 * C137771 + C137477 * C137501 + C137389 * ce) / C137082;
    const double C6285 =
        (-2 * (C137535 * C137559 + C137389 * ce)) / C137082 -
        (C137535 * (C137535 * C138172 + C137559 + C138170 * ce)) / C137082 -
        ((C137389 + C137438 * C137771) * ce) / C137082;
    const double C138260 = C137621 + C138258;
    const double C138501 = C137722 + C138499;
    const double C138259 = C138257 + C137506;
    const double C138500 = C138498 + C137564;
    const double C21250 =
        (2 * (C137535 * C138128 + C137973 * ae) +
         C137535 * (C138128 + C137535 * C138396 + C138391 * ae) +
         (C137973 + C138243 * C137771) * ae) /
        C137060;
    const double C20974 =
        (-2 * (C137535 * C138127 + C137973 * ce)) / C137082 -
        (C137535 * (C137535 * C138395 + C138127 + C138391 * ce)) / C137082 -
        ((C137973 + C138243 * C137771) * ce) / C137082;
    const double C137464 = C137461 + C137437;
    const double C17252 =
        (-3 * (C137398 * C137649 + C137368)) / C137082 +
        C137477 * ((-2 * C138117) / C137082 - (C137477 * C138207) / C137082);
    const double C17960 =
        C137535 * ((-2 * C138117) / C137082 - (C137477 * C138207) / C137082);
    const double C19904 =
        -(C138207 * C137771 + C137398 * C137649 + C137368) / C137082;
    const double C37435 =
        (-3 * (C137398 * C137771 + C137368)) / C137082 +
        C137535 * ((-2 * C138429) / C137082 - (C137535 * C138433) / C137082);
    const double C138582 = C138576 + C138563;
    const double C82973 =
        (-3 * (C138225 * C137771 + C137968)) / C137082 +
        C137535 * ((-2 * C138750) / C137082 - (C137535 * C138755) / C137082);
    const double C138880 = C138876 + C138865;
    const double C137807 = C137804 / C137336;
    const double C20836 =
        (((-2 * C137535 * C137800) / C137082 -
          (C137535 * (C137477 * C137436 * C137771 + C137800)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137535 * C137799 +
          C137535 * (C137799 + C137477 * C137439 * C137771)) *
         ce) /
            C137336 +
        C137335 * ((-2 * C138175) / C137336 +
                   C137535 * ((-(C137477 *
                                 (C137416 * C137417 +
                                  C137343 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137771) /
                               C137082) /
                                  C137060 -
                              C137801 / C137336));
    const double C82898 =
        3 * ((-(C137801 * C137771) / C137082) / C137060 - C137797 / C137336) +
        C137535 * ((-2 * C138175) / C137336 +
                   C137535 * ((-(C137477 *
                                 (C137416 * C137417 +
                                  C137343 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137771) /
                               C137082) /
                                  C137060 -
                              C137801 / C137336));
    const double C23334 = C139587 * C3911;
    const double C56379 = C139587 * C3911;
    const double C76580 = C139289 * C3911;
    const double C19918 = C139587 * C5479;
    const double C53083 = C139587 * C5479;
    const double C81013 = C139289 * C5479;
    const double C81965 = C139289 * C20837;
    const double C137866 = C137863 / C137336;
    const double C137917 = -C137916;
    const double C138058 = -C138057;
    const double C137668 = -C137667;
    const double C138253 = C138247 / C137336;
    const double C21114 =
        (((-2 * C137535 * C137506) / C137082 -
          (C137535 * (C138242 * C137771 + C137506)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137535 * C137621 + C137535 * (C137621 + C138245 * C137771)) *
         ce) /
            C137336 +
        C137477 * ((-2 * C138319) / C137336 +
                   C137535 * ((-(C137335 *
                                 (C137416 * C137417 +
                                  C137649 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137771) /
                               C137082) /
                                  C137060 -
                              C138241 / C137336));
    const double C37751 =
        3 * ((-(C138241 * C137771) / C137082) / C137060 - C137971 / C137336) +
        C137535 * ((-2 * C138319) / C137336 +
                   C137535 * ((-(C137335 *
                                 (C137416 * C137417 +
                                  C137649 * bs[7] * std::pow(C137339, 7)) *
                                 C137344 * C137771) /
                               C137082) /
                                  C137060 -
                              C138241 / C137336));
    const double C138663 = C138660 / C137336;
    const double C138693 = -C138692;
    const double C137790 = -C137789;
    const double C21389 =
        2 * ((-(C138128 * ce) / C137082) / C137060 - (ae * C138127) / C137336 -
             (C137535 * C138389) / C137336) -
        (ae * (C137535 * C138395 + C138127 + C138391 * ce)) / C137336 -
        ((C138128 + C137535 * C138396 + C138391 * ae) * ce) / C137336 +
        C137535 * ((-(ae * C138395) / C137082) / C137060 - C138389 / C137336 -
                   (C138396 * ce) / C137336 +
                   C137535 * ((-(C138392 * ce) / C137082) / C137060 -
                              (ae * C138390) / C137336 -
                              (C137535 * C137477 * C137335 *
                               (C137416 * C137417 +
                                C137771 * bs[7] * std::pow(C137339, 7)) *
                               C137344) /
                                  C137336));
    const double C138491 = C138486 / C137336;
    const double C138641 = -C138640;
    const double C138770 = C138764 / C137336;
    const double C68988 =
        (2 * (C137535 * C138288 + C138227 * ae) +
         C137535 * (C138288 + C137535 * C138716 + C138713 * ae) +
         (C138227 + C138564 * C137771) * ae) /
        C137060;
    const double C67042 = (C137535 * (3 * C138288 + C137477 * C138633) +
                           (3 * C138227 + C137477 * C138578) * ae) /
                          C137060;
    const double C68454 = (2 * C138125 + C137477 * C138288 +
                           C137535 * (C137535 * C138633 + C138578 * ae) +
                           C137535 * C138578 * ae) /
                          C137060;
    const double C65991 = 4 * (2 * C137966 + C137477 * C138227) +
                          C137477 * (3 * C138227 + C137477 * C138578);
    const double C66528 = C137535 * (3 * C138227 + C137477 * C138578);
    const double C67958 = 2 * C137966 + C137477 * C138227 + C138578 * C137771;
    const double C68782 =
        (-2 * (C137535 * C138278 + C138227 * ce)) / C137082 -
        (C137535 * (C137535 * C138715 + C138278 + C138713 * ce)) / C137082 -
        ((C138227 + C138564 * C137771) * ce) / C137082;
    const double C138777 = C138383 + C138775;
    const double C138776 = C138774 + C138381;
    const double C129885 = 4 * (2 * C138158 + C137535 * C138472) +
                           C137535 * (3 * C138472 + C137535 * C138867);
    const double C663 = C658 + C659;
    const double C137523 = C137520 / C137060;
    const double C36337 = C36334 + C36335;
    const double C98219 = C98216 + C98217;
    const double C18754 = C139463 * C4496;
    const double C33811 = C139600 * C4496;
    const double C95787 = C139600 * C4496;
    const double C19695 = C139463 * C6030;
    const double C40895 = C139600 * C6030;
    const double C102643 = C139600 * C6030;
    const double C16731 = C13796 * C3432;
    const double C17070 = C554 * C3432;
    const double C17341 = C13596 * C3432;
    const double C50122 = C47234 * C3432;
    const double C50668 = C47034 * C3432;
    const double C65397 = C63381 * C3432;
    const double C18097 = C13596 * C3993;
    const double C18753 = C554 * C3993;
    const double C23885 = C13796 * C3993;
    const double C33493 = C307 * C3993;
    const double C33810 = C30813 * C3993;
    const double C51366 = C47034 * C3993;
    const double C56930 = C47234 * C3993;
    const double C70684 = C63381 * C3993;
    const double C95786 = C92850 * C3993;
    const double C19383 = C13796 * C5556;
    const double C19694 = C554 * C5556;
    const double C20025 = C13596 * C5556;
    const double C36964 = C307 * C5556;
    const double C40894 = C30813 * C5556;
    const double C52576 = C47234 * C5556;
    const double C53186 = C47034 * C5556;
    const double C81128 = C63381 * C5556;
    const double C102642 = C92850 * C5556;
    const double C138237 = C138234 + C138226;
    const double C138567 = -C138557;
    const double C129957 = C129954 + C129955;
    const double C138835 = C138831 / C137060;
    const double C496 = C491 + C492;
    const double C137581 = C137578 / C137060;
    const double C16838 = C16835 + C16836;
    const double C50229 = C50226 + C50227;
    const double C36119 = C307 * C6286;
    const double C36438 = C30813 * C6286;
    const double C37600 = C13596 * C6286;
    const double C98320 = C92850 * C6286;
    const double C99422 = C47034 * C6286;
    const double C128681 = C63381 * C6286;
    const double C66123 = C66121 + C66122;
    const double C66737 = C66732 + C66733;
    const double C68152 = C68149 + C68150;
    const double C82190 = C63381 * C20975;
    const double C82826 = C30813 * C20975;
    const double C83274 = C47234 * C20975;
    const double C115390 = C92850 * C20975;
    const double C115808 = C13796 * C20975;
    const double C129611 = C307 * C20975;
    const double C138606 = C138603 / C137060;
    const double C138482 = C138479 + C138471;
    const double C138859 = -C138846;
    const double C343 = C333 + C334;
    const double C1120 = C1112 + C1113;
    const double C13830 = C13814 + C13815;
    const double C47268 = C47252 + C47253;
    const double C1988 = C1980 + C1981;
    const double C2846 = C2840 + C2841;
    const double C14690 = C14678 + C14679;
    const double C48122 = C48110 + C48111;
    const double C8435 = C8429 + C8430;
    const double C15657 = C15645 + C15646;
    const double C49052 = C49040 + C49041;
    const double C4932 = C4926 + C4927;
    const double C138575 = C138568 - C137513;
    const double C137637 = C137634 / C137060;
    const double C24024 = C24021 + C24022;
    const double C33598 = C33596 + C33597;
    const double C57069 = C57066 + C57067;
    const double C19490 = C19487 + C19488;
    const double C37073 = C37070 + C37071;
    const double C52683 = C52680 + C52681;
    const double C16620 = C139598 * C3544;
    const double C50011 = C139598 * C3544;
    const double C23742 = C139598 * C4165;
    const double C33385 = C139448 * C4165;
    const double C56787 = C139598 * C4165;
    const double C19272 = C139598 * C5716;
    const double C36843 = C139448 * C5716;
    const double C52465 = C139598 * C5716;
    const double C36007 = C35900 * C181;
    const double C36118 = C35900 * C4830;
    const double C37680 = C35900 * C3364;
    const double C43716 = C35900 * C10842;
    const double C128759 = C35900 * C137101;
    const double C134431 = C35900 * C7402;
    const double C138238 = C138235 + C138229;
    const double C83131 = C83124 + C83125;
    const double C115667 = C115660 + C115661;
    const double C129449 = C129444 + C129445;
    const double C130071 = C130067 + C130068;
    const double C138665 = C138664 / C137060;
    const double C82405 = C139598 * C20338;
    const double C114969 = C139598 * C20338;
    const double C128134 = C139448 * C20338;
    const double C8540 = C139448 * C4249;
    const double C15762 = C139598 * C4249;
    const double C23884 = C13593 * C4249;
    const double C49157 = C139598 * C4249;
    const double C56929 = C47031 * C4249;
    const double C23886 = C139598 * C4250;
    const double C33494 = C139448 * C4250;
    const double C56931 = C139598 * C4250;
    const double C5014 = C139448 * C5008;
    const double C19382 = C13593 * C5008;
    const double C52575 = C47031 * C5008;
    const double C19384 = C139598 * C5796;
    const double C36965 = C139448 * C5796;
    const double C52577 = C139598 * C5796;
    const double C36009 = C139448 * C6398;
    const double C83204 = C139598 * C21115;
    const double C115739 = C139598 * C21115;
    const double C129532 = C139448 * C21115;
    const double C130129 = C139448 * C37752;
    const double C416 = C411 + C412;
    const double C1218 = C1209 + C1210;
    const double C13914 = C13904 + C13905;
    const double C14802 = C14796 + C14797;
    const double C47352 = C47342 + C47343;
    const double C48234 = C48228 + C48229;
    const double C2079 = C2073 + C2074;
    const double C15769 = C15763 + C15764;
    const double C49164 = C49158 + C49159;
    const double C2940 = C2931 + C2932;
    const double C14800 = C14792 + C14793;
    const double C16733 = C16729 + C16730;
    const double C48232 = C48224 + C48225;
    const double C50124 = C50120 + C50121;
    const double C35035 = C35032 + C35033;
    const double C80444 = C80438 + C80439;
    const double C80442 = C80434 + C80435;
    const double C113104 = C113098 + C113099;
    const double C113102 = C113094 + C113095;
    const double C36966 = C36959 + C36960;
    const double C81460 = C81456 + C81457;
    const double C82406 = C82402 + C82403;
    const double C114064 = C114060 + C114061;
    const double C114970 = C114966 + C114967;
    const double C37757 = C37755 + C37756;
    const double C83205 = C83201 + C83202;
    const double C115740 = C115736 + C115737;
    const double C590 = C580 + C581;
    const double C1422 = C1414 + C1415;
    const double C2290 = C2282 + C2283;
    const double C30847 = C30831 + C30832;
    const double C92884 = C92868 + C92869;
    const double C3124 = C3118 + C3119;
    const double C8773 = C8767 + C8768;
    const double C31729 = C31717 + C31718;
    const double C93762 = C93750 + C93751;
    const double C5210 = C5204 + C5205;
    const double C32768 = C32756 + C32757;
    const double C94764 = C94752 + C94753;
    const double C138875 = C138871 - C137571;
    const double C137738 = C137735 / C137060;
    const double C19593 = C19589 + C19590;
    const double C40758 = C40750 + C40751;
    const double C102506 = C102498 + C102499;
    const double C36223 = C139600 * C6504;
    const double C98105 = C139600 * C6504;
    const double C17069 = C16961 * C2662;
    const double C17178 = C16961 * C244;
    const double C17711 = C16961 * C3364;
    const double C23097 = C16961 * C7479;
    const double C65784 = C16961 * C137101;
    const double C70311 = C16961 * C7402;
    const double C18647 = C18641 * C3364;
    const double C18868 = C18641 * C1876;
    const double C24293 = C18641 * C6772;
    const double C26355 = C18641 * C924;
    const double C26495 = C18641 * C9225;
    const double C71192 = C18641 * C7402;
    const double C74316 = C18641 * C137101;
    const double C66339 = C66333 + C66334;
    const double C67051 = C67046 + C67047;
    const double C79748 = C79741 + C79742;
    const double C112433 = C112426 + C112427;
    const double C68461 = C68457 + C68458;
    const double C80675 = C80664 + C80665;
    const double C113335 = C113324 + C113325;
    const double C82613 = C139600 * C21251;
    const double C115177 = C139600 * C21251;
    const double C138631 = C138628 / C137060;
    const double C138483 = C138480 + C138474;
    const double C66451 = C139463 * C17854;
    const double C67213 = C139463 * C18855;
    const double C79892 = C139600 * C18855;
    const double C112577 = C139600 * C18855;
    const double C68624 = C139463 * C20753;
    const double C80893 = C139600 * C20753;
    const double C113553 = C139600 * C20753;
    const double C17180 = C139463 * C3815;
    const double C8991 = C139463 * C4574;
    const double C31942 = C139600 * C4574;
    const double C41029 = C30408 * C4574;
    const double C93975 = C139600 * C4574;
    const double C102777 = C92451 * C4574;
    const double C18872 = C139463 * C4577;
    const double C33915 = C139600 * C4577;
    const double C95891 = C139600 * C4577;
    const double C5384 = C139463 * C5374;
    const double C32981 = C139600 * C5374;
    const double C36437 = C30408 * C5374;
    const double C94977 = C139600 * C5374;
    const double C98319 = C92451 * C5374;
    const double C19802 = C139463 * C6107;
    const double C41031 = C139600 * C6107;
    const double C102779 = C139600 * C6107;
    const double C82827 = C139600 * C21388;
    const double C115391 = C139600 * C21388;
    const double C741 = C736 + C737;
    const double C1615 = C1606 + C1607;
    const double C31951 = C31945 + C31946;
    const double C93984 = C93978 + C93979;
    const double C2483 = C2474 + C2475;
    const double C31015 = C31005 + C31006;
    const double C32990 = C32984 + C32985;
    const double C93052 = C93042 + C93043;
    const double C94986 = C94980 + C94981;
    const double C3306 = C3301 + C3302;
    const double C33916 = C33912 + C33913;
    const double C95892 = C95888 + C95889;
    const double C17859 = C17857 + C17858;
    const double C79893 = C79889 + C79890;
    const double C112578 = C112574 + C112575;
    const double C18874 = C18866 + C18867;
    const double C79273 = C79269 + C79270;
    const double C80896 = C80890 + C80891;
    const double C111960 = C111956 + C111957;
    const double C113556 = C113550 + C113551;
    const double C20763 = C20761 + C20762;
    const double C80894 = C80886 + C80887;
    const double C82828 = C82824 + C82825;
    const double C113554 = C113546 + C113547;
    const double C115392 = C115388 + C115389;
    const double C137406 = C137396 - C137403;
    const double C138236 = C138233 - C138224;
    const double C138481 = C138478 - C138469;
    const double C65992 =
        4 * ((-2 * C138119) / C137082 - (C137477 * C138212) / C137082) +
        C137477 * ((-3 * C138212) / C137082 + C137477 * C138542);
    const double C66529 =
        C137535 * ((-3 * C138212) / C137082 + C137477 * C138542);
    const double C67959 = (-2 * C138119) / C137082 -
                          (C137477 * C138212) / C137082 + C138542 * C137771;
    const double C129886 =
        4 * ((-2 * C138435) / C137082 - (C137535 * C138439) / C137082) +
        C137535 * ((-3 * C138439) / C137082 + C137535 * C138823);
    const double C8534 =
        (C137535 * C137530 * ae) / C137060 -
        (C137535 * C137642 * ce) / C137336 +
        C137477 * C137535 *
            ((-2 * C137335 * C137665) / C137336 +
             C137335 * ((-((C137416 * C137417 +
                            C137649 * bs[7] * std::pow(C137339, 7)) *
                           C137344 * C137343) /
                         C137082) /
                            C137060 -
                        C137665 / C137336));
    const double C8872 =
        ((C137477 * C137530 - (C137454 * ce) / C137082) * ae) / C137060 +
        C137535 * (C137477 * ((-2 * C137335 * C137762) / C137336 +
                              C137335 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336)) -
                   (C137743 * ce) / C137336);
    const double C187 =
        4 * ((-2 * C137491) / C137082 - (C137335 * C137501) / C137082) +
        C137335 * ((-3 * C137501) / C137082 + C137335 * C137530);
    const double C929 =
        C137477 * ((-3 * C137501) / C137082 + C137335 * C137530) -
        ((3 * C137389 + C137335 * C137454) * ce) / C137082;
    const double C1795 =
        C137535 * ((-3 * C137501) / C137082 + C137335 * C137530);
    const double C2666 =
        (-2 * C137491) / C137082 - (C137335 * C137501) / C137082 +
        C137477 * (C137477 * C137530 - (C137454 * ce) / C137082) -
        (C137477 * C137454 * ce) / C137082;
    const double C4749 = (-2 * C137491) / C137082 -
                         (C137335 * C137501) / C137082 + C137530 * C137771;
    const double C8222 =
        C137535 * (C137477 * C137530 - (C137454 * ce) / C137082);
    const double C129949 =
        4 * ((-2 * C138453) / C137082 - (C137535 * C138457) / C137082) +
        C137535 * ((-3 * C138457) / C137082 + C137535 * C138842);
    const double C8647 =
        ((C137535 * C137588 - (C137454 * ce) / C137082) * ae) / C137060 +
        C137477 * (C137535 * ((-2 * C137335 * C137686) / C137336 +
                              C137335 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336)) -
                   (C137642 * ce) / C137336);
    const double C8985 =
        (C137477 * C137588 * ae) / C137060 -
        (C137477 * C137743 * ce) / C137336 +
        C137535 * C137477 *
            ((-2 * C137335 * C137787) / C137336 +
             C137335 * ((-((C137416 * C137417 +
                            C137771 * bs[7] * std::pow(C137339, 7)) *
                           C137344 * C137343) /
                         C137082) /
                            C137060 -
                        C137787 / C137336));
    const double C250 =
        4 * ((-2 * C137549) / C137082 - (C137335 * C137559) / C137082) +
        C137335 * ((-3 * C137559) / C137082 + C137335 * C137588);
    const double C1013 =
        C137477 * ((-3 * C137559) / C137082 + C137335 * C137588);
    const double C1881 =
        C137535 * ((-3 * C137559) / C137082 + C137335 * C137588) -
        ((3 * C137389 + C137335 * C137454) * ce) / C137082;
    const double C2748 = (-2 * C137549) / C137082 -
                         (C137335 * C137559) / C137082 + C137588 * C137649;
    const double C4834 =
        (-2 * C137549) / C137082 - (C137335 * C137559) / C137082 +
        C137535 * (C137535 * C137588 - (C137454 * ce) / C137082) -
        (C137535 * C137454 * ce) / C137082;
    const double C8322 =
        C137535 * C137477 * C137588 - (C137477 * C137454 * ce) / C137082;
    const double C66116 =
        4 * ((-2 * C138124) / C137082 - (C137477 * C138278) / C137082) +
        C137477 * ((-3 * C138278) / C137082 + C137477 * C138611);
    const double C66716 =
        C137535 * ((-3 * C138278) / C137082 + C137477 * C138611) -
        ((3 * C138227 + C137477 * C138578) * ce) / C137082;
    const double C68134 =
        (-2 * C138124) / C137082 - (C137477 * C138278) / C137082 +
        C137535 * (C137535 * C138611 - (C138578 * ce) / C137082) -
        (C137535 * C138578 * ce) / C137082;
    const double C137504 = C137503 - C137496;
    const double C138199 = C138198 - C138193;
    const double C137529 = C137527 - C137513;
    const double C138517 = C138515 - C138508;
    const double C138786 = C138785 - C137507;
    const double C129443 = C36837 + C36836;
    const double C137619 = C137618 - C137611;
    const double C138215 = C138214 - C137377;
    const double C129452 = C129450 * C139303;
    const double C130066 = C37685 + C37684;
    const double C137643 = C137641 - C137628;
    const double C138541 = C138539 - C137424;
    const double C138652 = C138651 / C137060;
    const double C138689 = C138688 - C137622;
    const double C137562 = C137561 - C137554;
    const double C138415 = C138414 - C138193;
    const double C137587 = C137585 - C137571;
    const double C138525 = C138524 - C137565;
    const double C138729 = C138728 / C137060;
    const double C138798 = C138796 - C138508;
    const double C502 = C499 + C489;
    const double C8661 = C8659 * C139384;
    const double C10301 = C8659 * C139384;
    const double C31607 = C8659 * C139372;
    const double C40617 = C8659 * C139571;
    const double C42723 = C8659 * C9074;
    const double C5116 = C5114 * C4655;
    const double C11071 = C5114 * C10691;
    const double C32644 = C5114 * C139384;
    const double C36117 = C5114 * C4654;
    const double C41637 = C5114 * C139384;
    const double C43715 = C5114 * C139596;
    const double C138281 = C138280 - C137554;
    const double C138325 = C138324 - C137611;
    const double C1320 = C1317 + C1307;
    const double C137691 = C137690 - C137685;
    const double C138272 = C138271 / C137060;
    const double C138331 = C138330 / C137060;
    const double C138610 = C138607 - C137571;
    const double C138675 = C138674 - C137628;
    const double C66331 = C17706 + C17705;
    const double C137720 = C137719 - C137712;
    const double C138442 = C138441 - C137377;
    const double C66332 = C17716 + C17715;
    const double C67045 = C18646 + C18645;
    const double C137744 = C137742 - C137729;
    const double C138619 = C138618 - C137723;
    const double C138747 = C138746 / C137060;
    const double C138822 = C138820 - C137424;
    const double C669 = C666 + C656;
    const double C8886 = C8884 * C139360;
    const double C10505 = C8884 * C139360;
    const double C16078 = C8884 * C139346;
    const double C24294 = C8884 * C6692;
    const double C26356 = C8884 * C139570;
    const double C5298 = C5296 * C139346;
    const double C138291 = C138290 - C137712;
    const double C138460 = C138459 - C137496;
    const double C2386 = C2384 + C2374;
    const double C137767 = C137766 - C137761;
    const double C138301 = C138300 / C137060;
    const double C138450 = C138449 / C137060;
    const double C138635 = C138632 - C137729;
    const double C138841 = C138839 - C137513;
    const double C65475 = C64077 + C64099;
    const double C66735 = C66724 + C66725;
    const double C66119 = C65485 + C65478;
    const double C128598 = C81134 + C81140;
    const double C129287 = C82078 + C82077;
    const double C129952 = C82982 + C82976;
    const double C137106 = C137105 * ce;
    const double C826 =
        ((-C137081 / C137082) / C137087 - (C137094 * de) / C137082) / C137087 -
        ((C137080 *
              ((-C137083 / C137082) / C137087 - (C137105 * de) / C137082) +
          C7396) *
         de) /
            C137082 +
        (-C137096 / C137082) / C137087 - (0 * de) / C137082;
    const double C827 =
        ((-C137083 / C137082) / C137087 - (C137105 * de) / C137082) / C137087 -
        ((C137080 * ((-C137096 / C137082) / C137087 - (0 * de) / C137082) +
          C139308) *
         de) /
            C137082;
    const double C7401 =
        (-C137083 / C137082) / C137087 - (C137105 * de) / C137082;
    const double C137184 = C137181 * ce;
    const double C6771 =
        (-C137154 / C137082) / C137087 - (C137181 * de) / C137082;
    const double C137229 = C137226 * ce;
    const double C9224 =
        (-C137201 / C137082) / C137087 - (C137226 * de) / C137082;
    const double C63900 = C63888 * C828;
    const double C64086 = C63888 * C244;
    const double C69171 = C63888 * C6696;
    const double C77525 = C77519 * C828;
    const double C77635 = C77519 * C181;
    const double C86558 = C77519 * C6696;
    const double C64083 = C63892 * C244;
    const double C65300 = C63892 * C137101;
    const double C69857 = C63892 * C7402;
    const double C70793 = C63892 * C1875;
    const double C70580 = C70576 * C7402;
    const double C70786 = C70576 * C1876;
    const double C72360 = C70576 * C9225;
    const double C73720 = C70576 * C137101;
    const double C76786 = C70576 * C244;
    const double C77631 = C70576 * C181;
    const double C85534 = C70576 * C6772;
    const double C85674 = C70576 * C1875;
    const double C87610 = C70576 * C923;
    const double C87604 = C70576 * C924;
    const double C81020 = C81014 * C137101;
    const double C81124 = C81014 * C181;
    const double C88628 = C81014 * C7402;
    const double C133438 = C81014 * C923;
    const double C34926 = C34922 * C3364;
    const double C35031 = C34922 * C2662;
    const double C45684 = C34922 * C7479;
    const double C36850 = C36846 * C3364;
    const double C36956 = C36846 * C924;
    const double C46568 = C36846 * C6772;
    const double C128130 = C36846 * C2661;
    const double C80105 = C66641 * C2566;
    const double C80101 = C66641 * C2567;
    const double C82075 = C66641 * C139360;
    const double C85533 = C66641 * C139360;
    const double C90797 = C66641 * C139593;
    const double C90793 = C66641 * C7400;
    const double C81130 = C68059 * C139346;
    const double C82081 = C68059 * C139570;
    const double C82079 = C68059 * C139360;
    const double C91691 = C68059 * C6692;
    const double C91689 = C68059 * C139360;
    const double C127895 = C68059 * C2566;
    const double C135844 = C68059 * C139593;
    const double C63899 = C63887 * C822;
    const double C65297 = C63887 * C139308;
    const double C69170 = C63887 * C139590;
    const double C69854 = C63887 * C139308;
    const double C77524 = C77518 * C822;
    const double C80999 = C77518 * C139308;
    const double C85385 = C77518 * C139308;
    const double C86557 = C77518 * C139590;
    const double C63903 = C63891 * C821;
    const double C65299 = C63891 * C139562;
    const double C65999 = C63891 * C139303;
    const double C69174 = C63891 * C139601;
    const double C69856 = C63891 * C7396;
    const double C66553 = C66547 * C139303;
    const double C70566 = C66547 * C7396;
    const double C73721 = C66547 * C139562;
    const double C76574 = C66547 * C821;
    const double C83581 = C66547 * C139601;
    const double C81021 = C81015 * C139562;
    const double C81959 = C81015 * C139303;
    const double C88629 = C81015 * C7396;
    const double C126011 = C81015 * C821;
    const double C132637 = C81015 * C139601;
    const double C419 = C415 * C139346;
    const double C1212 = C415 * C139570;
    const double C7005 = C415 * C6692;
    const double C1220 = C1216 * C139360;
    const double C2929 = C1216 * C2566;
    const double C6999 = C1216 * C139360;
    const double C7706 = C1216 * C139593;
    const double C2081 = C2078 * C139346;
    const double C8537 = C2078 * C6692;
    const double C10193 = C2078 * C139570;
    const double C33489 = C2078 * C2565;
    const double C39409 = C2078 * C139602;
    const double C35036 = C35034 * C2566;
    const double C36955 = C35034 * C139360;
    const double C40475 = C35034 * C139360;
    const double C45683 = C35034 * C139593;
    const double C36012 = C36010 * C139346;
    const double C36957 = C36010 * C139570;
    const double C46569 = C36010 * C6692;
    const double C128129 = C36010 * C2565;
    const double C136070 = C36010 * C139602;
    const double C744 = C740 * C139372;
    const double C2477 = C740 * C139571;
    const double C9696 = C740 * C9074;
    const double C1619 = C1616 * C139372;
    const double C8988 = C1616 * C139571;
    const double C10609 = C1616 * C9074;
    const double C19797 = C1616 * C4653;
    const double C27386 = C1616 * C139603;
    const double C2485 = C2481 * C139384;
    const double C5381 = C2481 * C4654;
    const double C9690 = C2481 * C139384;
    const double C11303 = C2481 * C139596;
    const double C17183 = C17181 * C139372;
    const double C18864 = C17181 * C139571;
    const double C29452 = C17181 * C9074;
    const double C68619 = C17181 * C4653;
    const double C75876 = C17181 * C139603;
    const double C18876 = C18873 * C139384;
    const double C20759 = C18873 * C4654;
    const double C26492 = C18873 * C139384;
    const double C30340 = C18873 * C139596;
    const double C423 = C421 * C139463;
    const double C503 = C501 * C139463;
    const double C1221 = C1217 - C1208;
    const double C2185 = C2181 - C2172;
    const double C1523 = C1519 - C1510;
    const double C2486 = C2482 - C2473;
    const double C121 =
        (3 * (C137350 + C137335 * C137369 + C137358 * ae) +
         C137335 * (2 * C137369 + C137335 * C137408 + C137389 * ae) +
         (2 * C137358 + C137335 * C137389) * ae) /
        C137060;
    const double C836 =
        (C137477 * (2 * C137369 + C137335 * C137408 + C137389 * ae)) / C137060;
    const double C1704 =
        (C137535 * (2 * C137369 + C137335 * C137408 + C137389 * ae)) / C137060;
    const double C2576 =
        (C137350 + C137335 * C137369 + C137358 * ae + C137408 * C137649) /
        C137060;
    const double C3899 = (C137535 * C137477 * C137408) / C137060;
    const double C4662 =
        (C137350 + C137335 * C137369 + C137358 * ae + C137408 * C137771) /
        C137060;
    const double C19920 = C19913 + C19914;
    const double C53085 = C53078 + C53079;
    const double C81018 = C81008 + C81009;
    const double C65316 = C65311 * C137101;
    const double C65479 = C65311 * C244;
    const double C69859 = C65311 * C7402;
    const double C70582 = C70578 * C7402;
    const double C70791 = C70578 * C1876;
    const double C72364 = C70578 * C9225;
    const double C73724 = C70578 * C137101;
    const double C78661 = C70578 * C244;
    const double C85538 = C70578 * C6772;
    const double C87608 = C70578 * C924;
    const double C128521 = C128518 * C137101;
    const double C128600 = C128518 * C181;
    const double C134201 = C128518 * C7402;
    const double C137463 = C137450 - C137460;
    const double C137810 = C137809 - C137806;
    const double C138506 = C137809 - C137507;
    const double C137869 = C137868 - C137865;
    const double C138788 = C137868 - C137565;
    const double C66010 = C66008 * C3364;
    const double C66120 = C66008 * C244;
    const double C66555 = C66549 * C3364;
    const double C66729 = C66549 * C1876;
    const double C74739 = C66549 * C9225;
    const double C79473 = C66549 * C244;
    const double C80106 = C66549 * C2662;
    const double C90798 = C66549 * C7479;
    const double C67977 = C67973 * C3364;
    const double C68148 = C67973 * C4830;
    const double C75429 = C67973 * C10842;
    const double C80210 = C67973 * C1876;
    const double C82080 = C67973 * C924;
    const double C90898 = C67973 * C9225;
    const double C91690 = C67973 * C6772;
    const double C127896 = C67973 * C2662;
    const double C135845 = C67973 * C7479;
    const double C129898 = C129896 * C3364;
    const double C129953 = C129896 * C181;
    const double C847 =
        2 * ((-(C137477 * C137363 * ce) / C137082) / C137060 -
             (ae * C137477 * C137362) / C137336 -
             (C137335 * C137797) / C137336) -
        (ae * C137477 * C137407) / C137336 -
        (C137477 * C137408 * ce) / C137336 +
        C137335 * ((-(ae * C137477 * C137398) / C137082) / C137060 -
                   C137797 / C137336 - (C137477 * C137399 * ce) / C137336 +
                   C137335 * ((-(C137477 * C137390 * ce) / C137082) / C137060 -
                              (ae * C137477 * C137387) / C137336 -
                              (C137335 * C137477 * C137451) / C137336));
    const double C1715 =
        2 * ((-(C137535 * C137363 * ce) / C137082) / C137060 -
             (ae * C137535 * C137362) / C137336 -
             (C137335 * C137856) / C137336) -
        (ae * C137535 * C137407) / C137336 -
        (C137535 * C137408 * ce) / C137336 +
        C137335 * ((-(ae * C137535 * C137398) / C137082) / C137060 -
                   C137856 / C137336 - (C137535 * C137399 * ce) / C137336 +
                   C137335 * ((-(C137535 * C137390 * ce) / C137082) / C137060 -
                              (ae * C137535 * C137387) / C137336 -
                              (C137335 * C137535 * C137451) / C137336));
    const double C122 =
        (-3 * (C137335 * C137368 + C137349 + C137358 * ce)) / C137082 +
        C137335 * ((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
                   (C137389 * ce) / C137082) -
        ((2 * C137358 + C137335 * C137389) * ce) / C137082;
    const double C841 =
        C137477 * ((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
                   (C137389 * ce) / C137082);
    const double C1709 =
        C137535 * ((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
                   (C137389 * ce) / C137082);
    const double C2579 =
        -(C137407 * C137649 + C137335 * C137368 + C137349 + C137358 * ce) /
        C137082;
    const double C3902 = -(C137535 * C137477 * C137407) / C137082;
    const double C4665 =
        -(C137407 * C137771 + C137335 * C137368 + C137349 + C137358 * ce) /
        C137082;
    const double C137441 = C137433 / C137060;
    const double C82621 = C82616 + C82617;
    const double C115185 = C115180 + C115181;
    const double C138538 = C138535 - C137622;
    const double C80335 = C80326 + C80327;
    const double C112995 = C112986 + C112987;
    const double C138819 = C138816 - C137723;
    const double C66342 = C66340 * C139303;
    const double C67054 = C67052 * C139303;
    const double C68464 = C68462 * C139303;
    const double C128053 = C128051 * C139303;
    const double C130074 = C130072 * C139303;
    const double C17983 = C17967 + C17968;
    const double C23337 = C23331 + C23332;
    const double C51256 = C51240 + C51241;
    const double C56382 = C56376 + C56377;
    const double C70577 = C70568 + C70569;
    const double C19921 = C19915 + C19916;
    const double C53086 = C53080 + C53081;
    const double C67972 = C67965 + C67966;
    const double C63901 = C63889 * C823;
    const double C69172 = C63889 * C6691;
    const double C77526 = C77520 * C823;
    const double C86559 = C77520 * C6691;
    const double C63905 = C63893 * C822;
    const double C65301 = C63893 * C139308;
    const double C69176 = C63893 * C139590;
    const double C69858 = C63893 * C139308;
    const double C65317 = C65312 * C139562;
    const double C66000 = C65312 * C139303;
    const double C69860 = C65312 * C7396;
    const double C66551 = C66545 * C139303;
    const double C70572 = C66545 * C7396;
    const double C73725 = C66545 * C139562;
    const double C81023 = C81017 * C139308;
    const double C88631 = C81017 * C139308;
    const double C126013 = C81017 * C822;
    const double C132639 = C81017 * C139590;
    const double C82907 = C82905 * C139303;
    const double C128513 = C82905 * C139562;
    const double C134202 = C82905 * C7396;
    const double C137468 = C137335 * C137465;
    const double C138100 = C137477 * C137465;
    const double C3371 =
        (2 * C137477 * C137408 + C137477 * (C137408 + C137465 * C137649)) /
        C137060;
    const double C3906 = (C137535 * (C137408 + C137465 * C137649)) / C137060;
    const double C6169 =
        (2 * C137535 * C137408 + C137535 * (C137408 + C137465 * C137771)) /
        C137060;
    const double C138587 = C137477 * C138583;
    const double C138884 = C137535 * C138881;
    const double C138262 = C138260 + C138252;
    const double C138503 = C138501 + C138496;
    const double C138261 = C138259 + C138249;
    const double C138502 = C138500 + C138493;
    const double C137467 = C137335 * C137464;
    const double C138115 = C137477 * C137464;
    const double C3368 = (-2 * C137477 * C137407) / C137082 -
                         (C137477 * (C137464 * C137649 + C137407)) / C137082;
    const double C3903 = -(C137535 * (C137464 * C137649 + C137407)) / C137082;
    const double C6166 = (-2 * C137535 * C137407) / C137082 -
                         (C137535 * (C137464 * C137771 + C137407)) / C137082;
    const double C138586 = C137477 * C138582;
    const double C138883 = C137535 * C138880;
    const double C19922 = C19917 + C19918;
    const double C53087 = C53082 + C53083;
    const double C81019 = C81012 + C81013;
    const double C81967 = C81964 + C81965;
    const double C137918 = C137917 / C137060;
    const double C138059 = C138058 / C137060;
    const double C137669 = C137668 / C137060;
    const double C138694 = C138693 / C137060;
    const double C137791 = C137790 / C137060;
    const double C138642 = C138641 / C137060;
    const double C138779 = C138777 + C138769;
    const double C138778 = C138776 + C138766;
    const double C667 = C663 * C139346;
    const double C137526 = C137523 - C137507;
    const double C17073 = C17070 + C17071;
    const double C18757 = C18753 + C18754;
    const double C33813 = C33810 + C33811;
    const double C95789 = C95786 + C95787;
    const double C19696 = C19694 + C19695;
    const double C40897 = C40894 + C40895;
    const double C102645 = C102642 + C102643;
    const double C17337 =
        (-3 * (C137477 * C137968 + C137483 + C137966 * ce)) / C137082 +
        C137477 * ((-2 * C137968) / C137082 - (C137477 * C138237) / C137082 -
                   (C138227 * ce) / C137082) -
        ((2 * C137966 + C137477 * C138227) * ce) / C137082;
    const double C18089 =
        C137535 * ((-2 * C137968) / C137082 - (C137477 * C138237) / C137082 -
                   (C138227 * ce) / C137082);
    const double C20021 =
        -(C138237 * C137771 + C137477 * C137968 + C137483 + C137966 * ce) /
        C137082;
    const double C68730 = (-2 * C137535 * C138237) / C137082 -
                          (C137535 * (C138582 * C137771 + C138237)) / C137082;
    const double C138574 = C138567 / C137060;
    const double C129958 = C129957 * C139346;
    const double C138838 = C138835 - C137761;
    const double C500 = C496 * C139372;
    const double C137584 = C137581 - C137565;
    const double C36122 = C36119 + C36120;
    const double C66124 = C66123 * C139372;
    const double C66741 = C66737 * C139384;
    const double C74742 = C66737 * C139384;
    const double C79474 = C66737 * C139372;
    const double C68154 = C68152 * C4655;
    const double C75430 = C68152 * C10691;
    const double C80213 = C68152 * C139384;
    const double C90901 = C68152 * C139384;
    const double C82192 = C82190 + C82191;
    const double C138609 = C138606 - C137685;
    const double C37596 =
        (-3 * (C137535 * C138160 + C137541 + C138158 * ce)) / C137082 +
        C137535 * ((-2 * C138160) / C137082 - (C137535 * C138482) / C137082 -
                   (C138472 * ce) / C137082) -
        ((2 * C138158 + C137535 * C138472) * ce) / C137082;
    const double C138870 = C138859 / C137060;
    const double C410 = C343 * C181;
    const double C490 = C343 * C244;
    const double C1211 = C1120 * C924;
    const double C1311 = C1120 * C244;
    const double C7004 = C1120 * C6772;
    const double C2075 = C1988 * C181;
    const double C2175 = C1988 * C1876;
    const double C9457 = C1988 * C9225;
    const double C30745 = C1988 * C244;
    const double C32429 = C1988 * C828;
    const double C41436 = C1988 * C6696;
    const double C2937 = C2846 * C2662;
    const double C3025 = C2846 * C244;
    const double C7713 = C2846 * C7479;
    const double C8541 = C8435 * C6772;
    const double C8654 = C8435 * C1876;
    const double C10196 = C8435 * C924;
    const double C10302 = C8435 * C9225;
    const double C31609 = C8435 * C244;
    const double C40338 = C8435 * C7402;
    const double C44536 = C8435 * C137101;
    const double C5015 = C4932 * C181;
    const double C5111 = C4932 * C4830;
    const double C11076 = C4932 * C10842;
    const double C32645 = C4932 * C1876;
    const double C35890 = C4932 * C137101;
    const double C41638 = C4932 * C9225;
    const double C43512 = C4932 * C7402;
    const double C126256 = C4932 * C828;
    const double C132868 = C4932 * C6696;
    const double C138581 = C138575 - C138560;
    const double C137640 = C137637 - C137622;
    const double C138246 = C137637 - C138240;
    const double C3600 =
        2 * ((-(C137606 * ce) / C137082) / C137060 - (ae * C137491) / C137336 -
             (C137477 * C137971) / C137336) -
        (ae * (C137477 * C137975 + C137491 + C137973 * ce)) / C137336 -
        ((C137606 + C137477 * C137976 + C137973 * ae) * ce) / C137336 +
        C137477 * ((-(ae * C137975) / C137082) / C137060 - C137971 / C137336 -
                   (C137976 * ce) / C137336 +
                   C137477 * (C137637 - C137511 / C137336 -
                              (C137477 * C137335 * C137665) / C137336));
    const double C33599 = C33598 * C139372;
    const double C40619 = C37073 * C139384;
    const double C42725 = C37073 * C139384;
    const double C16627 = C16619 + C16620;
    const double C50018 = C50010 + C50011;
    const double C23749 = C23741 + C23742;
    const double C33388 = C33384 + C33385;
    const double C56794 = C56786 + C56787;
    const double C19279 = C19271 + C19272;
    const double C36848 = C36842 + C36843;
    const double C52472 = C52464 + C52465;
    const double C18418 =
        2 * ((-(C137535 * C137604 * ce) / C137082) / C137060 -
             (ae * C137535 * C137489) / C137336 -
             (C137477 * C138317) / C137336) -
        (ae * C137535 * C138237) / C137336 -
        (C137535 * C138238 * ce) / C137336 +
        C137477 * ((-(ae * C137535 * C138225) / C137082) / C137060 -
                   C138317 / C137336 - (C137535 * C138228 * ce) / C137336 +
                   C137477 * ((-(C137535 * C137612 * ce) / C137082) / C137060 -
                              (ae * C137535 * C137497) / C137336 -
                              (C137477 * C137535 * C137665) / C137336));
    const double C17489 =
        (3 * (C137598 + C137477 * C137969 + C137966 * ae) +
         C137477 * (2 * C137969 + C137477 * C138238 + C138227 * ae) +
         (2 * C137966 + C137477 * C138227) * ae) /
        C137060;
    const double C18317 =
        (C137535 * (2 * C137969 + C137477 * C138238 + C138227 * ae)) / C137060;
    const double C20237 =
        (C137598 + C137477 * C137969 + C137966 * ae + C138238 * C137771) /
        C137060;
    const double C68834 =
        (2 * C137535 * C138238 + C137535 * (C138238 + C138583 * C137771)) /
        C137060;
    const double C129451 = C129449 * C3364;
    const double C129528 = C129449 * C924;
    const double C136750 = C129449 * C6772;
    const double C130073 = C130071 * C3364;
    const double C130127 = C130071 * C181;
    const double C138666 = C138665 - C138662;
    const double C138697 = C138665 - C137685;
    const double C8546 = C8539 + C8540;
    const double C15768 = C15761 + C15762;
    const double C23887 = C23883 + C23884;
    const double C49163 = C49156 + C49157;
    const double C56932 = C56928 + C56929;
    const double C23888 = C23885 + C23886;
    const double C33495 = C33493 + C33494;
    const double C56933 = C56930 + C56931;
    const double C5018 = C5013 + C5014;
    const double C19385 = C19381 + C19382;
    const double C52578 = C52574 + C52575;
    const double C19386 = C19383 + C19384;
    const double C36967 = C36964 + C36965;
    const double C52579 = C52576 + C52577;
    const double C36011 = C36008 + C36009;
    const double C83206 = C83203 + C83204;
    const double C115741 = C115738 + C115739;
    const double C129534 = C129531 + C129532;
    const double C130130 = C130128 + C130129;
    const double C420 = C416 * C139346;
    const double C1222 = C1218 * C139360;
    const double C2936 = C1218 * C2566;
    const double C7003 = C1218 * C139360;
    const double C7712 = C1218 * C139593;
    const double C2082 = C2079 * C139346;
    const double C8542 = C2079 * C6692;
    const double C10197 = C2079 * C139570;
    const double C2942 = C2940 * C2567;
    const double C7708 = C2940 * C7400;
    const double C35037 = C35035 * C2567;
    const double C45685 = C35035 * C7400;
    const double C36968 = C36966 * C139360;
    const double C46571 = C36966 * C139360;
    const double C128131 = C36966 * C2566;
    const double C136072 = C36966 * C139593;
    const double C37758 = C37757 * C139346;
    const double C129529 = C37757 * C139570;
    const double C136751 = C37757 * C6692;
    const double C657 = C590 * C181;
    const double C735 = C590 * C244;
    const double C1513 = C1422 * C924;
    const double C1612 = C1422 * C244;
    const double C7242 = C1422 * C6772;
    const double C14138 = C1422 * C181;
    const double C15024 = C1422 * C828;
    const double C22087 = C1422 * C6696;
    const double C2377 = C2290 * C181;
    const double C2476 = C2290 * C1876;
    const double C9695 = C2290 * C9225;
    const double C3215 = C3124 * C2662;
    const double C3303 = C3124 * C244;
    const double C7947 = C3124 * C7479;
    const double C15134 = C3124 * C924;
    const double C16951 = C3124 * C137101;
    const double C22191 = C3124 * C6772;
    const double C22991 = C3124 * C7402;
    const double C64404 = C3124 * C828;
    const double C69627 = C3124 * C6696;
    const double C8879 = C8773 * C6772;
    const double C8992 = C8773 * C1876;
    const double C10506 = C8773 * C924;
    const double C10612 = C8773 * C9225;
    const double C16079 = C8773 * C181;
    const double C24159 = C8773 * C7402;
    const double C28305 = C8773 * C137101;
    const double C5293 = C5210 * C181;
    const double C5389 = C5210 * C4830;
    const double C11310 = C5210 * C10842;
    const double C138879 = C138875 - C138862;
    const double C137741 = C137738 - C137723;
    const double C138485 = C137738 - C138265;
    const double C6613 =
        2 * ((-(C137707 * ce) / C137082) / C137060 - (ae * C137549) / C137336 -
             (C137535 * C137996) / C137336) -
        (ae * (C137535 * C138166 + C137549 + C138164 * ce)) / C137336 -
        ((C137707 + C137535 * C138167 + C138164 * ae) * ce) / C137336 +
        C137535 * ((-(ae * C138166) / C137082) / C137060 - C137996 / C137336 -
                   (C138167 * ce) / C137336 +
                   C137535 * (C137738 - C137569 / C137336 -
                              (C137535 * C137335 * C137787) / C137336));
    const double C19693 = C19593 * C181;
    const double C19800 = C19593 * C4830;
    const double C20547 = C19593 * C3364;
    const double C27389 = C19593 * C10842;
    const double C36230 = C36222 + C36223;
    const double C98112 = C98104 + C98105;
    const double C66341 = C66339 * C3364;
    const double C66449 = C66339 * C244;
    const double C67053 = C67051 * C3364;
    const double C67209 = C67051 * C1876;
    const double C75190 = C67051 * C9225;
    const double C68463 = C68461 * C3364;
    const double C68622 = C68461 * C4830;
    const double C75879 = C68461 * C10842;
    const double C82619 = C82612 + C82613;
    const double C115183 = C115176 + C115177;
    const double C138634 = C138631 - C137761;
    const double C138763 = C138631 - C138757;
    const double C37896 =
        (3 * (C137699 + C137535 * C138161 + C138158 * ae) +
         C137535 * (2 * C138161 + C137535 * C138483 + C138472 * ae) +
         (2 * C138158 + C137535 * C138472) * ae) /
        C137060;
    const double C66453 = C66450 + C66451;
    const double C67215 = C67212 + C67213;
    const double C79894 = C79891 + C79892;
    const double C112579 = C112576 + C112577;
    const double C68625 = C68623 + C68624;
    const double C80897 = C80892 + C80893;
    const double C113557 = C113552 + C113553;
    const double C17182 = C17179 + C17180;
    const double C8997 = C8990 + C8991;
    const double C31949 = C31941 + C31942;
    const double C41032 = C41028 + C41029;
    const double C93982 = C93974 + C93975;
    const double C102780 = C102776 + C102777;
    const double C18875 = C18871 + C18872;
    const double C33917 = C33914 + C33915;
    const double C95893 = C95890 + C95891;
    const double C5392 = C5383 + C5384;
    const double C32988 = C32980 + C32981;
    const double C36440 = C36436 + C36437;
    const double C94984 = C94976 + C94977;
    const double C98322 = C98318 + C98319;
    const double C19803 = C19801 + C19802;
    const double C41033 = C41030 + C41031;
    const double C102781 = C102778 + C102779;
    const double C82829 = C82826 + C82827;
    const double C115393 = C115390 + C115391;
    const double C745 = C741 * C139372;
    const double C1618 = C1615 * C139372;
    const double C8993 = C1615 * C139571;
    const double C10613 = C1615 * C9074;
    const double C2487 = C2483 * C139384;
    const double C5388 = C2483 * C4654;
    const double C9694 = C2483 * C139384;
    const double C11309 = C2483 * C139596;
    const double C3308 = C3306 * C139372;
    const double C18869 = C3306 * C139571;
    const double C26496 = C3306 * C9074;
    const double C17860 = C17859 * C139372;
    const double C67210 = C17859 * C139571;
    const double C75191 = C17859 * C9074;
    const double C18877 = C18874 * C139384;
    const double C29454 = C18874 * C139384;
    const double C68621 = C18874 * C4654;
    const double C75878 = C18874 * C139596;
    const double C20764 = C20763 * C4655;
    const double C30342 = C20763 * C10691;
    const double C129 =
        3 * ((-(ae * C137368) / C137082) / C137060 - C137367 / C137336 -
             (C137369 * ce) / C137336 + C137335 * C137406) +
        (((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
          (C137389 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C137369 + C137335 * C137408 + C137389 * ae) * ce) / C137336 +
        C137335 *
            (2 * C137406 - (ae * C137407) / C137336 - (C137408 * ce) / C137336 +
             C137335 * ((-(ae * C137398) / C137082) / C137060 -
                        C137397 / C137336 - (C137399 * ce) / C137336 +
                        C137335 * ((-(C137390 * ce) / C137082) / C137060 -
                                   (ae * C137387) / C137336 -
                                   (C137335 *
                                    (C137374 * C137375 +
                                     C137343 * bs[6] * std::pow(C137333, 6)) *
                                    C137344) /
                                       C137336)));
    const double C17558 =
        3 * ((-(ae * C137968) / C137082) / C137060 - C137654 / C137336 -
             (C137969 * ce) / C137336 + C137477 * C138236) +
        (((-2 * C137968) / C137082 - (C137477 * C138237) / C137082 -
          (C138227 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C137969 + C137477 * C138238 + C138227 * ae) * ce) / C137336 +
        C137477 *
            (2 * C138236 - (ae * C138237) / C137336 - (C138238 * ce) / C137336 +
             C137477 * ((-(ae * C138225) / C137082) / C137060 - C137662 -
                        (C138228 * ce) / C137336 +
                        C137477 * ((-C137624 / C137082) / C137060 - C137513 -
                                   (C137477 * C137665) / C137336)));
    const double C38033 =
        3 * ((-(ae * C138160) / C137082) / C137060 - C137776 / C137336 -
             (C138161 * ce) / C137336 + C137535 * C138481) +
        (((-2 * C138160) / C137082 - (C137535 * C138482) / C137082 -
          (C138472 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138161 + C137535 * C138483 + C138472 * ae) * ce) / C137336 +
        C137535 *
            (2 * C138481 - (ae * C138482) / C137336 - (C138483 * ce) / C137336 +
             C137535 * ((-(ae * C138470) / C137082) / C137060 - C137784 -
                        (C138473 * ce) / C137336 +
                        C137535 * ((-C137725 / C137082) / C137060 - C137571 -
                                   (C137535 * C137787) / C137336)));
    const double C192 =
        3 * ((-(ae * C137491) / C137082) / C137060 - C137488 / C137336 +
             C137335 * C137504) +
        (((-2 * C137491) / C137082 - (C137335 * C137501) / C137082) * ae) /
            C137060 +
        C137335 *
            (2 * C137504 - (ae * C137501) / C137336 +
             C137335 * ((-(ae * C137335 * C137497) / C137082) / C137060 -
                        C137495 / C137336 +
                        C137335 * ((-(C137335 * C137417 * C137416 * C137484) /
                                    C137082) /
                                       C137060 -
                                   (ae * C137497) / C137336)));
    const double C930 =
        C137477 * ((-(ae * C137491) / C137082) / C137060 - C137488 / C137336 +
                   C137335 * C137504) -
        ((C137350 + C137335 * C137369 + C137358 * ae) * ce) / C137336;
    const double C1797 = C137535 * ((-(ae * C137491) / C137082) / C137060 -
                                    C137488 / C137336 + C137335 * C137504);
    const double C2668 =
        (-(C137335 * C137488) / C137082) / C137060 - (ae * C137483) / C137336 -
        (C137477 * C137369 * ce) / C137336 +
        C137477 * (C137477 * C137504 - (C137369 * ce) / C137336);
    const double C3996 =
        C137535 * (C137477 * C137504 - (C137369 * ce) / C137336);
    const double C4751 = (-(C137335 * C137488) / C137082) / C137060 -
                         (ae * C137483) / C137336 + C137504 * C137771;
    const double C17339 =
        3 * ((-(C138104 * ce) / C137082) / C137060 - C137488 / C137336 +
             C137477 * C138199) -
        ((2 * C138104 + C137477 * C138196) * ce) / C137336 +
        C137477 *
            (2 * C138199 - (C138196 * ce) / C137336 +
             C137477 * (C137809 - C137507 +
                        C137477 * ((-(C137477 * C137512) / C137082) / C137060 -
                                   C137413 / C137336)));
    const double C18091 =
        C137535 *
        (2 * C138199 - (C138196 * ce) / C137336 +
         C137477 * (C137809 - C137507 +
                    C137477 * ((-(C137477 * C137512) / C137082) / C137060 -
                               C137413 / C137336)));
    const double C20023 =
        (-(C138104 * ce) / C137082) / C137060 - C137488 / C137336 +
        C137477 * C138199 +
        (C137809 - C137507 +
         C137477 *
             ((-(C137477 * C137512) / C137082) / C137060 - C137413 / C137336)) *
            C137771;
    const double C20907 =
        2 * C137535 * C138199 +
        C137535 * (C138199 + ((-(C137477 * C137512) / C137082) / C137060 -
                              C137413 / C137336) *
                                 C137771);
    const double C137531 = C137335 * C137529;
    const double C138187 = C137477 * C137529;
    const double C3435 =
        2 * (C137477 * C137504 - (C137369 * ce) / C137336) -
        ((C137369 + C137399 * C137649) * ce) / C137336 +
        C137477 * (C137504 - (C137477 * C137399 * ce) / C137336 +
                   C137477 * (C137477 * C137529 - C137422));
    const double C3999 =
        C137535 * (C137504 - (C137477 * C137399 * ce) / C137336 +
                   C137477 * (C137477 * C137529 - C137422));
    const double C5559 = C137477 * C137504 - (C137369 * ce) / C137336 +
                         (C137477 * C137529 - C137422) * C137771;
    const double C6229 =
        2 * C137535 * C137504 + C137535 * (C137504 + C137529 * C137771);
    const double C37521 =
        3 * (C137504 + C137529 * C137771) +
        C137535 *
            (2 * C137535 * C137529 +
             C137535 * (C137529 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (ae * C137515) / C137336) *
                            C137771));
    const double C138518 = C137477 * C138517;
    const double C82974 =
        3 * (C138199 + C138517 * C137771) +
        C137535 *
            (2 * C137535 * C138517 +
             C137535 * (C138517 +
                        ((-(C137477 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (C137439 * ce) / C137336) *
                            C137771));
    const double C129950 =
        4 * ((-2 * C137535 * C137495) / C137336 + C137535 * C138786) +
        C137535 *
            (3 * C138786 + C137535 * ((-2 * C137535 * C137512) / C137336 +
                                      C137535 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137484 * C137771) /
                                                  C137082) /
                                                     C137060 -
                                                 C137512 / C137336)));
    const double C318 =
        3 * ((-(C137606 * ce) / C137082) / C137060 - C137603 / C137336 +
             C137335 * C137619) -
        ((2 * C137606 + C137335 * C137616) * ce) / C137336 +
        C137335 *
            (2 * C137619 - (C137616 * ce) / C137336 +
             C137335 * ((-(C137335 * C137612 * ce) / C137082) / C137060 -
                        C137610 / C137336 +
                        C137335 * ((-(C137335 * C137417 * C137416 * C137599) /
                                    C137082) /
                                       C137060 -
                                   (C137612 * ce) / C137336)));
    const double C1100 =
        C137477 * ((-(C137606 * ce) / C137082) / C137060 - C137603 / C137336 +
                   C137335 * C137619) -
        (ae * (C137335 * C137368 + C137349 + C137358 * ce)) / C137336;
    const double C1968 = C137535 * ((-(C137606 * ce) / C137082) / C137060 -
                                    C137603 / C137336 + C137335 * C137619);
    const double C2832 =
        (-(C137335 * C137603) / C137082) / C137060 - (C137598 * ce) / C137336 -
        (ae * C137477 * C137368) / C137336 +
        C137477 * (C137477 * C137619 - (ae * C137368) / C137336);
    const double C4168 =
        C137477 * C137535 * C137619 - (ae * C137535 * C137368) / C137336;
    const double C4918 = (-(C137335 * C137603) / C137082) / C137060 -
                         (C137598 * ce) / C137336 + C137619 * C137771;
    const double C17491 =
        3 * ((-(ae * C138119) / C137082) / C137060 - C137603 / C137336 +
             C137477 * C138215) +
        (((-2 * C138119) / C137082 - (C137477 * C138212) / C137082) * ae) /
            C137060 +
        C137477 *
            (2 * C138215 - (ae * C138212) / C137336 +
             C137477 * ((-C137803 / C137082) / C137060 - C137622 +
                        C137477 * ((-(C137477 * C137627) / C137082) / C137060 -
                                   C137424)));
    const double C137644 = C137335 * C137643;
    const double C138203 = C137477 * C137643;
    const double C138313 = C137535 * C137643;
    const double C3547 =
        2 * (C137477 * C137619 - (ae * C137368) / C137336) -
        (ae * (C137398 * C137649 + C137368)) / C137336 +
        C137477 * (C137619 - (ae * C137477 * C137398) / C137336 +
                   C137477 * (C137477 * C137643 - C137410 / C137336));
    const double C4171 =
        C137535 * C137619 - (ae * C137535 * C137477 * C137398) / C137336 +
        C137477 *
            (C137477 * C137535 * C137643 - (ae * C137535 * C137398) / C137336);
    const double C5719 = C137477 * (C137619 + C137643 * C137771) -
                         (ae * (C137398 * C137771 + C137368)) / C137336;
    const double C6345 =
        2 * C137535 * C137619 + C137535 * (C137619 + C137643 * C137771);
    const double C20238 =
        C137619 + C137643 * C137771 -
        (ae * (C137477 * C137452 * C137771 + C138117)) / C137336 +
        C137477 *
            (C137477 * (C137643 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                          C137082) /
                             C137060 -
                         (C137630 * ce) / C137336) *
                            C137771) -
             (ae * (C137452 * C137771 + C137398)) / C137336);
    const double C138543 = C137477 * C138541;
    const double C138653 = C138652 - C137865;
    const double C68229 =
        2 * (C137477 * C138689 - (ae * C138439) / C137336) -
        (ae * (C138534 * C137771 + C138212)) / C137336 +
        C137477 * (C138689 -
                   (ae * (C137477 * C137436 * C137771 + C137800)) / C137336 +
                   C137477 * (C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137599 * C137771) /
                                          C137082) /
                                             C137060 -
                                         C137627 / C137336) -
                              (ae * (C137436 * C137771 + C137387)) / C137336));
    const double C68835 =
        (-2 * C138315) / C137336 + C137535 * C138689 +
        (((-2 * C137535 * C137800) / C137082 -
          (C137535 * (C137477 * C137436 * C137771 + C137800)) / C137082) *
         ae) /
            C137060 +
        C137477 * ((((-2 * C137859) / C137082 -
                     (C137535 * (C137436 * C137771 + C137387)) / C137082) *
                    ae) /
                       C137060 +
                   C137477 * ((-2 * C138648) / C137336 +
                              C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137599 * C137771) /
                                          C137082) /
                                             C137060 -
                                         C137627 / C137336)));
    const double C83120 =
        (((-3 * C138439) / C137082 +
          C137535 * ((-2 * C137859) / C137082 -
                     (C137535 * (C137436 * C137771 + C137387)) / C137082)) *
         ae) /
            C137060 +
        C137477 *
            (3 * C138689 + C137535 * ((-2 * C138648) / C137336 +
                                      C137535 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137599 * C137771) /
                                                  C137082) /
                                                     C137060 -
                                                 C137627 / C137336)));
    const double C130064 =
        4 * ((-2 * C138315) / C137336 + C137535 * C138689) +
        C137535 *
            (3 * C138689 + C137535 * ((-2 * C138648) / C137336 +
                                      C137535 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137599 * C137771) /
                                                  C137082) /
                                                     C137060 -
                                                 C137627 / C137336)));
    const double C255 =
        3 * ((-(ae * C137549) / C137082) / C137060 - C137546 / C137336 +
             C137335 * C137562) +
        (((-2 * C137549) / C137082 - (C137335 * C137559) / C137082) * ae) /
            C137060 +
        C137335 *
            (2 * C137562 - (ae * C137559) / C137336 +
             C137335 * ((-(ae * C137335 * C137555) / C137082) / C137060 -
                        C137553 / C137336 +
                        C137335 * ((-(C137335 * C137417 * C137416 * C137542) /
                                    C137082) /
                                       C137060 -
                                   (ae * C137555) / C137336)));
    const double C1014 = C137477 * ((-(ae * C137549) / C137082) / C137060 -
                                    C137546 / C137336 + C137335 * C137562);
    const double C1882 =
        C137535 * ((-(ae * C137549) / C137082) / C137060 - C137546 / C137336 +
                   C137335 * C137562) -
        ((C137350 + C137335 * C137369 + C137358 * ae) * ce) / C137336;
    const double C2750 = (-(C137335 * C137546) / C137082) / C137060 -
                         (ae * C137541) / C137336 + C137562 * C137649;
    const double C4082 =
        C137535 * C137477 * C137562 - (C137477 * C137369 * ce) / C137336;
    const double C4836 =
        (-(C137335 * C137546) / C137082) / C137060 - (ae * C137541) / C137336 -
        (C137535 * C137369 * ce) / C137336 +
        C137535 * (C137535 * C137562 - (C137369 * ce) / C137336);
    const double C37598 =
        3 * ((-(C138408 * ce) / C137082) / C137060 - C137546 / C137336 +
             C137535 * C138415) -
        ((2 * C138408 + C137535 * C138412) * ce) / C137336 +
        C137535 *
            (2 * C138415 - (C138412 * ce) / C137336 +
             C137535 * (C137868 - C137565 +
                        C137535 * ((-(C137535 * C137570) / C137082) / C137060 -
                                   C137413 / C137336)));
    const double C137589 = C137335 * C137587;
    const double C138362 = C137477 * C137587;
    const double C138403 = C137535 * C137587;
    const double C3491 =
        2 * C137477 * C137562 + C137477 * (C137562 + C137587 * C137649);
    const double C4085 = C137535 * (C137562 + C137587 * C137649) -
                         ((C137369 + C137399 * C137649) * ce) / C137336;
    const double C5639 =
        C137477 * C137562 - (C137535 * C138102 * ce) / C137336 +
        C137535 * (C137535 * C137477 * C137587 - (C138102 * ce) / C137336);
    const double C6289 =
        2 * (C137535 * C137562 - (C137369 * ce) / C137336) -
        ((C137369 + C137399 * C137771) * ce) / C137336 +
        C137535 * (C137562 - (C137535 * C137399 * ce) / C137336 +
                   C137535 * (C137535 * C137587 - C137422));
    const double C17414 =
        3 * (C137562 + C137587 * C137649) +
        C137477 *
            (2 * C137477 * C137587 +
             C137477 * (C137587 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                          C137082) /
                             C137060 -
                         (ae * C137573) / C137336) *
                            C137649));
    const double C18204 =
        C137535 *
            (2 * C137477 * C137587 +
             C137477 * (C137587 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                          C137082) /
                             C137060 -
                         (ae * C137573) / C137336) *
                            C137649)) -
        ((2 * C138102 + C137477 * C138190) * ce) / C137336;
    const double C20130 =
        C137562 + C137587 * C137649 - (C137535 * C138190 * ce) / C137336 +
        C137535 *
            (C137535 * (C137587 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                          C137082) /
                             C137060 -
                         (ae * C137573) / C137336) *
                            C137649) -
             (C138190 * ce) / C137336);
    const double C66117 =
        4 * ((-2 * C138365) / C137336 + C137477 * C138525) +
        C137477 *
            (3 * C138525 + C137477 * ((-2 * C137477 * C137570) / C137336 +
                                      C137477 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137542 * C137649) /
                                                  C137082) /
                                                     C137060 -
                                                 C137570 / C137336)));
    const double C66717 =
        C137535 *
            (3 * C138525 + C137477 * ((-2 * C137477 * C137570) / C137336 +
                                      C137477 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137542 * C137649) /
                                                  C137082) /
                                                     C137060 -
                                                 C137570 / C137336))) -
        ((3 * C138196 + C137477 * C138516) * ce) / C137336;
    const double C68135 =
        (-2 * C138365) / C137336 + C137477 * C138525 -
        (C137535 * C138516 * ce) / C137336 +
        C137535 * (C137535 * ((-2 * C137477 * C137570) / C137336 +
                              C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137542 * C137649) /
                                          C137082) /
                                             C137060 -
                                         C137570 / C137336)) -
                   (C138516 * ce) / C137336);
    const double C68783 =
        2 * (C137535 * C138525 - (C138196 * ce) / C137336) -
        ((C138196 + C138512 * C137771) * ce) / C137336 +
        C137535 * (C138525 - (C137535 * C138512 * ce) / C137336 +
                   C137535 * (C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137542 * C137649) /
                                          C137082) /
                                             C137060 -
                                         C137570 / C137336) -
                              (C138512 * ce) / C137336));
    const double C138730 = C138729 - C138722;
    const double C138799 = C137535 * C138798;
    const double C504 = C502 * C139463;
    const double C17627 =
        3 * ((-(ae * C138124) / C137082) / C137060 - C137679 / C137336 +
             C137477 * C138281) +
        (((-2 * C138124) / C137082 - (C137477 * C138278) / C137082) * ae) /
            C137060 +
        C137477 *
            (2 * C138281 - (ae * C138278) / C137336 +
             C137477 *
                 ((-(ae * C137477 * C137555) / C137082) / C137060 - C137685 +
                  C137477 *
                      ((-(C137477 * C137686) / C137082) / C137060 - C137571)));
    const double C18518 =
        2 * (C137477 * C138325 - (ae * C138160) / C137336) -
        (ae * (C137535 * C138278 + C138227 * ce)) / C137336 +
        C137477 *
            (C138325 -
             (ae * (C137535 * C137477 * C137555 + C138226)) / C137336 +
             C137477 * (C137477 * ((-(C137535 * C137686) / C137082) / C137060 -
                                   C137628) -
                        (ae * (C137535 * C137555 + C137380)) / C137336));
    const double C20438 =
        (-(C137535 * C137604 * ce) / C137082) / C137060 - C137679 / C137336 +
        C137535 * C138325 -
        (ae * (C137535 * (C137535 * C137477 * C137555 + C138226) + C138124 +
               C137535 * C138220 * ce)) /
            C137336 +
        C137477 *
            (C137477 *
                 ((-(C137535 * C137612 * ce) / C137082) / C137060 - C137685 +
                  C137535 *
                      ((-(C137535 * C137686) / C137082) / C137060 - C137628)) -
             (ae * (C137535 * (C137535 * C137555 + C137380) + C137547 +
                    C137535 * C137373 * ce)) /
                 C137336);
    const double C21182 =
        (((-2 * C138160) / C137082 -
          (C137535 * (C137535 * (C137535 * C137555 + C137380) + C137547 +
                      C137535 * C137373 * ce)) /
              C137082 -
          ((C137352 + C137373 * C137771) * ce) / C137082) *
         ae) /
            C137060 +
        C137477 *
            (2 * C138325 - ((C137604 + C137612 * C137771) * ce) / C137336 +
             C137535 *
                 ((-(C137535 * C137612 * ce) / C137082) / C137060 - C137685 +
                  C137535 *
                      ((-(C137535 * C137686) / C137082) / C137060 - C137628)));
    const double C37824 =
        3 * ((-(C138421 * ce) / C137082) / C137060 - C137679 / C137336 +
             C137535 * C138325) -
        ((2 * C138421 + C137535 * C138423) * ce) / C137336 +
        C137535 *
            (2 * C138325 - (C138423 * ce) / C137336 +
             C137535 *
                 ((-(C137535 * C137612 * ce) / C137082) / C137060 - C137685 +
                  C137535 *
                      ((-(C137535 * C137686) / C137082) / C137060 - C137628)));
    const double C1321 = C1320 * C139463;
    const double C479 =
        4 * ((-2 * C137335 * C137682) / C137336 + C137335 * C137691) +
        C137335 *
            (3 * C137691 + C137335 * ((-2 * C137335 * C137686) / C137336 +
                                      C137335 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137676 * C137343) /
                                                  C137082) /
                                                     C137060 -
                                                 C137686 / C137336)));
    const double C1302 =
        (((-2 * C137549) / C137082 - (C137335 * C137559) / C137082) * ae) /
            C137060 +
        C137477 * ((-2 * C137335 * C137682) / C137336 + C137335 * C137691);
    const double C1303 =
        (((-3 * C137559) / C137082 + C137335 * C137588) * ae) / C137060 +
        C137477 *
            (3 * C137691 + C137335 * ((-2 * C137335 * C137686) / C137336 +
                                      C137335 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137676 * C137343) /
                                                  C137082) /
                                                     C137060 -
                                                 C137686 / C137336)));
    const double C2162 =
        C137535 * ((-2 * C137335 * C137682) / C137336 + C137335 * C137691) -
        ((2 * C137606 + C137335 * C137616) * ce) / C137336;
    const double C2163 =
        C137535 *
            (3 * C137691 + C137335 * ((-2 * C137335 * C137686) / C137336 +
                                      C137335 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137676 * C137343) /
                                                  C137082) /
                                                     C137060 -
                                                 C137686 / C137336))) -
        ((3 * C137616 + C137335 * C137642) * ce) / C137336;
    const double C3019 =
        (-(C137682 * C137343) / C137082) / C137060 - C137679 / C137336 -
        (ae * C137477 * C137559) / C137336 +
        C137477 * (C137477 * C137691 - (ae * C137559) / C137336);
    const double C3020 =
        (-2 * C137335 * C137682) / C137336 + C137335 * C137691 +
        (C137477 * C137588 * ae) / C137060 +
        C137477 * ((C137588 * ae) / C137060 +
                   C137477 * ((-2 * C137335 * C137686) / C137336 +
                              C137335 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336)));
    const double C3652 =
        2 * (C137477 * C137691 - (ae * C137559) / C137336) -
        (ae * (C137580 * C137649 + C137559)) / C137336 +
        C137477 * (C137691 - (ae * C137477 * C137580) / C137336 +
                   C137477 * (C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336) -
                              (ae * C137580) / C137336));
    const double C4329 =
        C137477 * (C137535 * C137691 - (C137616 * ce) / C137336) -
        (ae * (C137535 * C137559 + C137389 * ce)) / C137336;
    const double C4332 =
        C137535 * C137691 - (C137616 * ce) / C137336 -
        (ae * (C137535 * C137477 * C137580 + C137979 * ce)) / C137336 +
        C137477 * (C137477 * (C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336) -
                              (C137636 * ce) / C137336) -
                   (ae * (C137535 * C137580 + C137445)) / C137336);
    const double C5097 =
        (-(C137682 * C137343) / C137082) / C137060 - C137679 / C137336 -
        (C137535 * C137616 * ce) / C137336 +
        C137535 * (C137535 * C137691 - (C137616 * ce) / C137336);
    const double C5098 =
        (-2 * C137985) / C137336 + C137335 * C137691 -
        (C137535 * C137642 * ce) / C137336 +
        C137535 * (C137535 * ((-2 * C137335 * C137686) / C137336 +
                              C137335 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336)) -
                   (C137642 * ce) / C137336);
    const double C5874 =
        C137477 * (C137691 - (C137535 * C137636 * ce) / C137336 +
                   C137535 * (C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336) -
                              (C137636 * ce) / C137336)) -
        (ae * (C137535 * (C137535 * C137580 + C137445) + C137559 +
               C137535 * C137438 * ce)) /
            C137336;
    const double C6452 =
        2 * (C137535 * C137691 - (C137616 * ce) / C137336) -
        ((C137616 + C137636 * C137771) * ce) / C137336 +
        C137535 * (C137691 - (C137535 * C137636 * ce) / C137336 +
                   C137535 * (C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137676 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137686 / C137336) -
                              (C137636 * ce) / C137336));
    const double C138273 = C138272 - C138265;
    const double C138332 = C138331 - C138328;
    const double C138612 = C137477 * C138610;
    const double C138676 = C137477 * C138675;
    const double C138698 = C137535 * C138675;
    const double C66337 = C66331 * C139289;
    const double C565 =
        3 * ((-(C137707 * ce) / C137082) / C137060 - C137704 / C137336 +
             C137335 * C137720) -
        ((2 * C137707 + C137335 * C137717) * ce) / C137336 +
        C137335 *
            (2 * C137720 - (C137717 * ce) / C137336 +
             C137335 * ((-(C137335 * C137713 * ce) / C137082) / C137060 -
                        C137711 / C137336 +
                        C137335 * ((-(C137335 * C137417 * C137416 * C137700) /
                                    C137082) /
                                       C137060 -
                                   (C137713 * ce) / C137336)));
    const double C1402 = C137477 * ((-(C137707 * ce) / C137082) / C137060 -
                                    C137704 / C137336 + C137335 * C137720);
    const double C2270 =
        C137535 * ((-(C137707 * ce) / C137082) / C137060 - C137704 / C137336 +
                   C137335 * C137720) -
        (ae * (C137335 * C137368 + C137349 + C137358 * ce)) / C137336;
    const double C3110 = (-(C137335 * C137704) / C137082) / C137060 -
                         (C137699 * ce) / C137336 + C137720 * C137649;
    const double C4414 =
        C137535 * C137477 * C137720 - (ae * C137477 * C137368) / C137336;
    const double C5196 =
        (-(C137335 * C137704) / C137082) / C137060 - (C137699 * ce) / C137336 -
        (ae * C137535 * C137368) / C137336 +
        C137535 * (C137535 * C137720 - (ae * C137368) / C137336);
    const double C37898 =
        3 * ((-(ae * C138435) / C137082) / C137060 - C137704 / C137336 +
             C137535 * C138442) +
        (((-2 * C138435) / C137082 - (C137535 * C138439) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C138442 - (ae * C138439) / C137336 +
             C137535 * ((-C137862 / C137082) / C137060 - C137723 +
                        C137535 * ((-(C137535 * C137728) / C137082) / C137060 -
                                   C137424)));
    const double C66338 = C66332 * C139289;
    const double C67050 = C67045 * C139289;
    const double C137745 = C137335 * C137744;
    const double C138373 = C137477 * C137744;
    const double C138430 = C137535 * C137744;
    const double C3709 =
        2 * C137477 * C137720 + C137477 * (C137720 + C137744 * C137649);
    const double C4417 = C137535 * (C137720 + C137744 * C137649) -
                         (ae * (C137398 * C137649 + C137368)) / C137336;
    const double C5953 =
        C137477 * C137720 - (ae * C137535 * C138117) / C137336 +
        C137535 * (C137535 * C137477 * C137744 - (ae * C138117) / C137336);
    const double C6507 =
        2 * (C137535 * C137720 - (ae * C137368) / C137336) -
        (ae * (C137398 * C137771 + C137368)) / C137336 +
        C137535 * (C137720 - (ae * C137535 * C137398) / C137336 +
                   C137535 * (C137535 * C137744 - C137410 / C137336));
    const double C17696 =
        3 * (C137720 + C137744 * C137649) +
        C137477 *
            (2 * C137477 * C137744 +
             C137477 * (C137744 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                          C137082) /
                             C137060 -
                         (C137731 * ce) / C137336) *
                            C137649));
    const double C18620 =
        (((-2 * C138117) / C137082 - (C137477 * C138207) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C137477 * C137744 +
             C137477 * (C137744 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                          C137082) /
                             C137060 -
                         (C137731 * ce) / C137336) *
                            C137649));
    const double C20540 =
        C137720 + C137744 * C137649 - (ae * C137535 * C138207) / C137336 +
        C137535 *
            (C137535 * (C137744 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                          C137082) /
                             C137060 -
                         (C137731 * ce) / C137336) *
                            C137649) -
             (ae * C138207) / C137336);
    const double C66329 =
        4 * ((-2 * C138376) / C137336 + C137477 * C138619) +
        C137477 *
            (3 * C138619 + C137477 * ((-2 * C137477 * C137728) / C137336 +
                                      C137477 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137700 * C137649) /
                                                  C137082) /
                                                     C137060 -
                                                 C137728 / C137336)));
    const double C67043 =
        (((-3 * C138212) / C137082 + C137477 * C138542) * ae) / C137060 +
        C137535 *
            (3 * C138619 + C137477 * ((-2 * C137477 * C137728) / C137336 +
                                      C137477 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137700 * C137649) /
                                                  C137082) /
                                                     C137060 -
                                                 C137728 / C137336)));
    const double C68455 =
        (-2 * C138376) / C137336 + C137477 * C138619 +
        (C137535 * C138542 * ae) / C137060 +
        C137535 * ((C138542 * ae) / C137060 +
                   C137535 * ((-2 * C137477 * C137728) / C137336 +
                              C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137700 * C137649) /
                                          C137082) /
                                             C137060 -
                                         C137728 / C137336)));
    const double C68989 =
        2 * (C137535 * C138619 - (ae * C138212) / C137336) -
        (ae * (C138534 * C137771 + C138212)) / C137336 +
        C137535 * (C138619 - (ae * C137535 * C138534) / C137336 +
                   C137535 * (C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137700 * C137649) /
                                          C137082) /
                                             C137060 -
                                         C137728 / C137336) -
                              (ae * C138534) / C137336));
    const double C138748 = C138747 - C137806;
    const double C138824 = C137535 * C138822;
    const double C17782 =
        3 * ((-(C138125 * ce) / C137082) / C137060 - C137755 / C137336 +
             C137477 * C138291) -
        ((2 * C138125 + C137477 * C138288) * ce) / C137336 +
        C137477 *
            (2 * C138291 - (C138288 * ce) / C137336 +
             C137477 *
                 ((-(C137477 * C137713 * ce) / C137082) / C137060 - C137761 +
                  C137477 *
                      ((-(C137477 * C137762) / C137082) / C137060 - C137729)));
    const double C18746 =
        (((-2 * C137968) / C137082 - (C137477 * C138237) / C137082 -
          (C138227 * ce) / C137082) *
         ae) /
            C137060 +
        C137535 *
            (2 * C138291 - (C138288 * ce) / C137336 +
             C137477 *
                 ((-(C137477 * C137713 * ce) / C137082) / C137060 - C137761 +
                  C137477 *
                      ((-(C137477 * C137762) / C137082) / C137060 - C137729)));
    const double C20650 =
        (-(C138125 * ce) / C137082) / C137060 - C137755 / C137336 +
        C137477 * C138291 - (ae * C137535 * C138237) / C137336 +
        C137535 *
            (C137535 *
                 ((-(C137477 * C137713 * ce) / C137082) / C137060 - C137761 +
                  C137477 *
                      ((-(C137477 * C137762) / C137082) / C137060 - C137729)) -
             (ae * C138237) / C137336);
    const double C21321 =
        2 * (C137535 * C138291 - (ae * C137968) / C137336) -
        (ae * (C138225 * C137771 + C137968)) / C137336 +
        C137535 *
            (C138291 - (ae * C137535 * C138225) / C137336 +
             C137535 * (C137535 * ((-(C137477 * C137762) / C137082) / C137060 -
                                   C137729) -
                        (ae * C138225) / C137336));
    const double C37966 =
        3 * ((-(ae * C138453) / C137082) / C137060 - C137755 / C137336 +
             C137535 * C138460) +
        (((-2 * C138453) / C137082 - (C137535 * C138457) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C138460 - (ae * C138457) / C137336 +
             C137535 *
                 ((-(ae * C137535 * C137497) / C137082) / C137060 - C137761 +
                  C137535 *
                      ((-(C137535 * C137762) / C137082) / C137060 - C137513)));
    const double C646 =
        4 * ((-2 * C137335 * C137758) / C137336 + C137335 * C137767) +
        C137335 *
            (3 * C137767 + C137335 * ((-2 * C137335 * C137762) / C137336 +
                                      C137335 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137752 * C137343) /
                                                  C137082) /
                                                     C137060 -
                                                 C137762 / C137336)));
    const double C1500 =
        C137477 * ((-2 * C137335 * C137758) / C137336 + C137335 * C137767) -
        ((2 * C137707 + C137335 * C137717) * ce) / C137336;
    const double C1501 =
        C137477 *
            (3 * C137767 + C137335 * ((-2 * C137335 * C137762) / C137336 +
                                      C137335 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137752 * C137343) /
                                                  C137082) /
                                                     C137060 -
                                                 C137762 / C137336))) -
        ((3 * C137717 + C137335 * C137743) * ce) / C137336;
    const double C2367 =
        (((-2 * C137491) / C137082 - (C137335 * C137501) / C137082) * ae) /
            C137060 +
        C137535 * ((-2 * C137335 * C137758) / C137336 + C137335 * C137767);
    const double C2369 =
        (((-3 * C137501) / C137082 + C137335 * C137530) * ae) / C137060 +
        C137535 *
            (3 * C137767 + C137335 * ((-2 * C137335 * C137762) / C137336 +
                                      C137335 * ((-(std::pow(C137339, 7) *
                                                    bs[7] * C137752 * C137343) /
                                                  C137082) /
                                                     C137060 -
                                                 C137762 / C137336)));
    const double C3201 =
        (-(C137758 * C137343) / C137082) / C137060 - C137755 / C137336 -
        (C137477 * C137717 * ce) / C137336 +
        C137477 * (C137477 * C137767 - (C137717 * ce) / C137336);
    const double C3202 =
        (-2 * C137335 * C137758) / C137336 + C137335 * C137767 -
        (C137477 * C137743 * ce) / C137336 +
        C137477 * (C137477 * ((-2 * C137335 * C137762) / C137336 +
                              C137335 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336)) -
                   (C137743 * ce) / C137336);
    const double C3763 =
        2 * (C137477 * C137767 - (C137717 * ce) / C137336) -
        ((C137717 + C137737 * C137649) * ce) / C137336 +
        C137477 * (C137767 - (C137477 * C137737 * ce) / C137336 +
                   C137477 * (C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336) -
                              (C137737 * ce) / C137336));
    const double C4497 =
        C137535 * (C137477 * C137767 - (C137717 * ce) / C137336) -
        (ae * (C137477 * C137501 + C137389 * ce)) / C137336;
    const double C4498 =
        C137535 * (C137767 - (C137477 * C137737 * ce) / C137336 +
                   C137477 * (C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336) -
                              (C137737 * ce) / C137336)) -
        (ae * (C137477 * C137981 + C137501 + C137979 * ce)) / C137336;
    const double C5287 =
        (-(C137758 * C137343) / C137082) / C137060 - C137755 / C137336 -
        (ae * C137535 * C137501) / C137336 +
        C137535 * (C137535 * C137767 - (ae * C137501) / C137336);
    const double C5288 =
        (-2 * C137992) / C137336 + C137335 * C137767 +
        (C137535 * C137530 * ae) / C137060 +
        C137535 * ((C137530 * ae) / C137060 +
                   C137535 * ((-2 * C137335 * C137762) / C137336 +
                              C137335 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336)));
    const double C6031 =
        C137477 * C137767 - (C137717 * ce) / C137336 -
        (ae * C137535 * C137981) / C137336 +
        C137535 * (C137535 * (C137477 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336) -
                              (C137737 * ce) / C137336) -
                   (ae * C137981) / C137336);
    const double C6559 =
        2 * (C137535 * C137767 - (ae * C137501) / C137336) -
        (ae * (C137522 * C137771 + C137501)) / C137336 +
        C137535 * (C137767 - (ae * C137535 * C137522) / C137336 +
                   C137535 * (C137535 * ((-(std::pow(C137339, 7) * bs[7] *
                                            C137752 * C137343) /
                                          C137082) /
                                             C137060 -
                                         C137762 / C137336) -
                              (ae * C137522) / C137336));
    const double C138302 = C138301 - C138294;
    const double C138451 = C138450 - C138240;
    const double C138636 = C137477 * C138635;
    const double C138751 = C137535 * C138635;
    const double C138843 = C137535 * C138841;
    const double C66739 = C66735 - C66726;
    const double C128603 = C128598 * C139448;
    const double C129292 = C129287 - C82076;
    const double C129956 = C129952 * C139448;
    const double C137107 = C137106 / C137082;
    const double C15020 = C1418 * C826;
    const double C15028 = C15026 * C826;
    const double C32425 = C1984 * C826;
    const double C32433 = C32431 * C826;
    const double C63902 = C63890 * C826;
    const double C63896 = C63884 * C826;
    const double C64400 = C16960 * C826;
    const double C76573 = C66548 * C826;
    const double C77521 = C77515 * C826;
    const double C126010 = C81016 * C826;
    const double C126252 = C35899 * C826;
    const double C15022 = C1420 * C827;
    const double C15016 = C1418 * C827;
    const double C32427 = C1986 * C827;
    const double C32421 = C1984 * C827;
    const double C63904 = C63892 * C827;
    const double C63898 = C63886 * C827;
    const double C64402 = C3122 * C827;
    const double C76575 = C70576 * C827;
    const double C77523 = C77517 * C827;
    const double C126012 = C81014 * C827;
    const double C126254 = C4930 * C827;
    const double C22993 = C3122 * C7401;
    const double C22989 = C16960 * C7401;
    const double C22983 = C1418 * C7401;
    const double C22979 = C15026 * C7401;
    const double C24161 = C8771 * C7401;
    const double C24157 = C18638 * C7401;
    const double C40340 = C8433 * C7401;
    const double C40336 = C34920 * C7401;
    const double C40330 = C1984 * C7401;
    const double C40326 = C32431 * C7401;
    const double C43514 = C4930 * C7401;
    const double C43510 = C35899 * C7401;
    const double C69861 = C65313 * C7401;
    const double C69855 = C63890 * C7401;
    const double C69851 = C63884 * C7401;
    const double C70313 = C17713 * C7401;
    const double C70573 = C66546 * C7401;
    const double C70567 = C66548 * C7401;
    const double C71194 = C18639 * C7401;
    const double C85390 = C67971 * C7401;
    const double C85382 = C77515 * C7401;
    const double C88630 = C81016 * C7401;
    const double C132070 = C36846 * C7401;
    const double C134203 = C82904 * C7401;
    const double C134433 = C37682 * C7401;
    const double C137186 = C137184 / C137082;
    const double C7006 = C341 * C6771;
    const double C7000 = C339 * C6771;
    const double C6996 = C337 * C6771;
    const double C7244 = C588 * C6771;
    const double C7238 = C586 * C6771;
    const double C7234 = C584 * C6771;
    const double C8543 = C1986 * C6771;
    const double C8538 = C1984 * C6771;
    const double C8881 = C2288 * C6771;
    const double C8876 = C2286 * C6771;
    const double C22193 = C1420 * C6771;
    const double C22187 = C1418 * C6771;
    const double C24295 = C8771 * C6771;
    const double C40480 = C4930 * C6771;
    const double C40472 = C32431 * C6771;
    const double C46570 = C35899 * C6771;
    const double C85540 = C70576 * C6771;
    const double C85536 = C77517 * C6771;
    const double C85530 = C66548 * C6771;
    const double C85526 = C77515 * C6771;
    const double C91692 = C67971 * C6771;
    const double C91688 = C81016 * C6771;
    const double C131870 = C81014 * C6771;
    const double C136522 = C82904 * C6771;
    const double C136752 = C37682 * C6771;
    const double C137231 = C137229 / C137082;
    const double C9459 = C341 * C9224;
    const double C9453 = C339 * C9224;
    const double C9449 = C337 * C9224;
    const double C9697 = C588 * C9224;
    const double C9691 = C586 * C9224;
    const double C9687 = C584 * C9224;
    const double C10304 = C1118 * C9224;
    const double C10300 = C1116 * C9224;
    const double C10614 = C1420 * C9224;
    const double C10610 = C1418 * C9224;
    const double C26497 = C3122 * C9224;
    const double C26489 = C15026 * C9224;
    const double C29453 = C16960 * C9224;
    const double C41640 = C1986 * C9224;
    const double C41634 = C1984 * C9224;
    const double C42724 = C8433 * C9224;
    const double C72366 = C63892 * C9224;
    const double C72362 = C63886 * C9224;
    const double C72356 = C63890 * C9224;
    const double C72352 = C63884 * C9224;
    const double C74741 = C65313 * C9224;
    const double C75192 = C17713 * C9224;
    const double C87748 = C70576 * C9224;
    const double C87742 = C66548 * C9224;
    const double C90900 = C66546 * C9224;
    const double C129448 = C36851 + C36850;
    const double C66006 = C65998 + C65999;
    const double C79996 = C66553 + C66554;
    const double C79995 = C66554 + C66553;
    const double C129210 = C81960 + C81959;
    const double C422 = C419 + C409;
    const double C32537 = C2081 + C2069;
    const double C32536 = C2069 + C2081;
    const double C42587 = C10193 + C10194;
    const double C42586 = C10194 + C10193;
    const double C128839 = C36006 + C36012;
    const double C129527 = C36958 + C36957;
    const double C747 = C744 + C734;
    const double C15241 = C1619 + C1611;
    const double C15240 = C1611 + C1619;
    const double C24428 = C8988 + C8989;
    const double C24427 = C8989 + C8988;
    const double C65939 = C17176 + C17183;
    const double C67208 = C18865 + C18864;
    const double C2188 = C2185 - C2186;
    const double C1526 = C1523 - C1524;
    const double C14323 = C139587 * C836;
    const double C47755 = C139587 * C836;
    const double C32070 = C139587 * C1704;
    const double C94103 = C139587 * C1704;
    const double C16280 = C139587 * C2576;
    const double C49671 = C139587 * C2576;
    const double C63881 = C139289 * C2576;
    const double C23330 = C139587 * C3899;
    const double C56375 = C139587 * C3899;
    const double C76578 = C139289 * C3899;
    const double C35537 = C139587 * C4662;
    const double C97471 = C139587 * C4662;
    const double C126015 = C139289 * C4662;
    const double C81024 = C81018 * C137101;
    const double C81127 = C81018 * C181;
    const double C85388 = C81018 * C7402;
    const double C85672 = C81018 * C1876;
    const double C87746 = C81018 * C9225;
    const double C131868 = C81018 * C6772;
    const double C133436 = C81018 * C924;
    const double C137466 = C137335 * C137463;
    const double C137811 = C137810 - C137807;
    const double C137870 = C137869 - C137866;
    const double C14327 = C139587 * C847;
    const double C47759 = C139587 * C847;
    const double C32074 = C139587 * C1715;
    const double C94107 = C139587 * C1715;
    const double C335 = C307 * C122;
    const double C582 = C554 * C122;
    const double C1114 = C307 * C841;
    const double C1416 = C554 * C841;
    const double C13818 = C13796 * C841;
    const double C14326 = C13596 * C841;
    const double C47256 = C47234 * C841;
    const double C47758 = C47034 * C841;
    const double C1982 = C307 * C1709;
    const double C2284 = C554 * C1709;
    const double C30835 = C30813 * C1709;
    const double C32073 = C13596 * C1709;
    const double C92872 = C92850 * C1709;
    const double C94106 = C47034 * C1709;
    const double C2842 = C307 * C2579;
    const double C3120 = C554 * C2579;
    const double C14682 = C13796 * C2579;
    const double C16291 = C13596 * C2579;
    const double C48114 = C47234 * C2579;
    const double C49682 = C47034 * C2579;
    const double C63882 = C63381 * C2579;
    const double C8431 = C307 * C3902;
    const double C8769 = C554 * C3902;
    const double C15649 = C13796 * C3902;
    const double C23333 = C13596 * C3902;
    const double C31721 = C30813 * C3902;
    const double C49044 = C47234 * C3902;
    const double C56378 = C47034 * C3902;
    const double C76579 = C63381 * C3902;
    const double C93754 = C92850 * C3902;
    const double C4928 = C307 * C4665;
    const double C5206 = C554 * C4665;
    const double C32760 = C30813 * C4665;
    const double C35548 = C13596 * C4665;
    const double C94756 = C92850 * C4665;
    const double C97482 = C47034 * C4665;
    const double C126016 = C63381 * C4665;
    const double C137449 = C137441 - C137411;
    const double C70581 = C70577 * C139308;
    const double C73723 = C70577 * C139308;
    const double C76576 = C70577 * C822;
    const double C83583 = C70577 * C139590;
    const double C67976 = C67972 * C139303;
    const double C81010 = C67972 * C139562;
    const double C85389 = C67972 * C7396;
    const double C66007 = C66000 + C66001;
    const double C66557 = C66551 + C66552;
    const double C79997 = C66552 + C66551;
    const double C129890 = C82907 + C82906;
    const double C137471 = C137420 + C137468;
    const double C5475 = (C137477 * C137408 + C138100 * C137771) / C137060;
    const double C138590 = C138555 + C138587;
    const double C138887 = C138856 + C138884;
    const double C17488 =
        (3 * (C137606 + C137477 * C137976 + C137973 * ae) +
         C137477 * (2 * C137976 + C137477 * C138262 + C138250 * ae) +
         (2 * C137973 + C137477 * C138250) * ae) /
        C137060;
    const double C18316 =
        (C137535 * (2 * C137976 + C137477 * C138262 + C138250 * ae)) / C137060;
    const double C20236 =
        (C137606 + C137477 * C137976 + C137973 * ae + C138262 * C137771) /
        C137060;
    const double C37895 =
        (3 * (C137707 + C137535 * C138167 + C138164 * ae) +
         C137535 * (2 * C138167 + C137535 * C138503 + C138494 * ae) +
         (2 * C138164 + C137535 * C138494) * ae) /
        C137060;
    const double C18419 =
        2 * ((-(C137535 * C137621 * ce) / C137082) / C137060 -
             (ae * C137535 * C137506) / C137336 -
             (C137477 * C138319) / C137336) -
        (ae * C137535 * C138261) / C137336 -
        (C137535 * C138262 * ce) / C137336 +
        C137477 * ((-(ae * C137535 * C138254) / C137082) / C137060 -
                   C138319 / C137336 - (C137535 * C138255 * ce) / C137336 +
                   C137477 * ((-(C137535 * C138245 * ce) / C137082) / C137060 -
                              (ae * C137535 * C138242) / C137336 -
                              (C137477 * C137535 * C137335 *
                               (C137416 * C137417 +
                                C137649 * bs[7] * std::pow(C137339, 7)) *
                               C137344) /
                                  C137336));
    const double C17336 =
        (-3 * (C137477 * C137975 + C137491 + C137973 * ce)) / C137082 +
        C137477 * ((-2 * C137975) / C137082 - (C137477 * C138261) / C137082 -
                   (C138250 * ce) / C137082) -
        ((2 * C137973 + C137477 * C138250) * ce) / C137082;
    const double C18088 =
        C137535 * ((-2 * C137975) / C137082 - (C137477 * C138261) / C137082 -
                   (C138250 * ce) / C137082);
    const double C20020 =
        -(C138261 * C137771 + C137477 * C137975 + C137491 + C137973 * ce) /
        C137082;
    const double C37595 =
        (-3 * (C137535 * C138166 + C137549 + C138164 * ce)) / C137082 +
        C137535 * ((-2 * C138166) / C137082 - (C137535 * C138502) / C137082 -
                   (C138494 * ce) / C137082) -
        ((2 * C138164 + C137535 * C138494) * ce) / C137082;
    const double C137470 = C137467 / C137082;
    const double C8123 =
        2 * ((-(C137535 * C137799 * ce) / C137082) / C137060 -
             (ae * C137535 * C137800) / C137336 -
             (C137335 * C138175) / C137336) -
        (ae * C137535 * C138115) / C137336 -
        (C137535 * C138100 * ce) / C137336 +
        C137335 *
            ((-(ae * C137535 * C137477 * C137452) / C137082) / C137060 -
             C138175 / C137336 - (C137535 * C137477 * C137455 * ce) / C137336 +
             C137335 *
                 ((-(C137535 * C137477 * C137439 * ce) / C137082) / C137060 -
                  (ae * C137535 * C137477 * C137436) / C137336 -
                  (C137335 * C137535 * C137477 *
                   (C137416 * C137417 +
                    C137343 * bs[7] * std::pow(C137339, 7)) *
                   C137344) /
                      C137336));
    const double C5472 = -(C138115 * C137771 + C137477 * C137407) / C137082;
    const double C138589 = C138586 / C137082;
    const double C138886 = C138883 / C137082;
    const double C81025 = C81019 * C139308;
    const double C85391 = C81019 * C139308;
    const double C81969 = C81967 * C139303;
    const double C137919 = C137918 - C137411;
    const double C138060 = C138059 - C137411;
    const double C137670 = C137669 - C137662;
    const double C138695 = C138694 - C137662;
    const double C137792 = C137791 - C137784;
    const double C138643 = C138642 - C137784;
    const double C83345 =
        (3 * (C138125 + C137535 * C138387 + C138382 * ae) +
         C137535 * (2 * C138387 + C137535 * C138779 + C138767 * ae) +
         (2 * C138382 + C137535 * C138767) * ae) /
        C137060;
    const double C83048 =
        (-3 * (C137535 * C138386 + C138124 + C138382 * ce)) / C137082 +
        C137535 * ((-2 * C138386) / C137082 - (C137535 * C138778) / C137082 -
                   (C138767 * ce) / C137082) -
        ((2 * C138382 + C137535 * C138767) * ce) / C137082;
    const double C17074 = C17073 * C2567;
    const double C23098 = C17073 * C7400;
    const double C24296 = C18757 * C139360;
    const double C26358 = C18757 * C139360;
    const double C19697 = C19696 * C139346;
    const double C66064 = C63381 * C17337;
    const double C66394 = C554 * C17337;
    const double C66638 = C63381 * C18089;
    const double C67130 = C554 * C18089;
    const double C79817 = C30813 * C18089;
    const double C80440 = C47234 * C18089;
    const double C112502 = C92850 * C18089;
    const double C113100 = C13796 * C18089;
    const double C68057 = C63381 * C20021;
    const double C68540 = C554 * C20021;
    const double C80780 = C30813 * C20021;
    const double C82404 = C47234 * C20021;
    const double C113440 = C92850 * C20021;
    const double C114968 = C13796 * C20021;
    const double C128133 = C307 * C20021;
    const double C138580 = C138574 - C137662;
    const double C36123 = C36122 * C4655;
    const double C43717 = C36122 * C10691;
    const double C82193 = C82192 * C4655;
    const double C91797 = C82192 * C10691;
    const double C130011 = C63381 * C37596;
    const double C130183 = C307 * C37596;
    const double C138874 = C138870 - C137784;
    const double C138585 = C137477 * C138581;
    const double C138256 = C138246 - C138253;
    const double C16732 = C139598 * C3600;
    const double C50123 = C139598 * C3600;
    const double C33492 = C33388 * C2662;
    const double C33595 = C33388 * C244;
    const double C34918 = C33388 * C3364;
    const double C39412 = C33388 * C7479;
    const double C36852 = C36848 * C3364;
    const double C36961 = C36848 * C924;
    const double C40478 = C36848 * C6772;
    const double C40616 = C36848 * C1876;
    const double C42722 = C36848 * C9225;
    const double C132068 = C36848 * C7402;
    const double C135199 = C36848 * C137101;
    const double C80441 = C139598 * C18418;
    const double C113101 = C139598 * C18418;
    const double C80323 = C139598 * C18317;
    const double C112983 = C139598 * C18317;
    const double C82295 = C139598 * C20237;
    const double C114859 = C139598 * C20237;
    const double C128047 = C139448 * C20237;
    const double C138667 = C138666 - C138663;
    const double C8548 = C8546 * C139360;
    const double C10195 = C8546 * C139360;
    const double C33491 = C8546 * C2566;
    const double C39411 = C8546 * C139593;
    const double C33496 = C33495 * C2567;
    const double C39413 = C33495 * C7400;
    const double C5020 = C5018 * C139346;
    const double C36962 = C5018 * C139570;
    const double C40479 = C5018 * C6692;
    const double C36969 = C36967 * C139360;
    const double C40481 = C36967 * C139360;
    const double C36013 = C36011 * C139346;
    const double C129536 = C129534 * C139360;
    const double C136753 = C129534 * C139360;
    const double C130131 = C130130 * C139346;
    const double C1224 = C1221 - C1222;
    const double C2084 = C2082 + C2072;
    const double C32538 = C2072 + C2082;
    const double C130126 = C37758 + C37754;
    const double C138882 = C137535 * C138879;
    const double C138497 = C138485 - C138491;
    const double C36439 = C139600 * C6613;
    const double C98321 = C139600 * C6613;
    const double C138773 = C138763 - C138770;
    const double C66454 = C66453 * C139372;
    const double C67217 = C67215 * C139384;
    const double C75193 = C67215 * C139384;
    const double C68626 = C68625 * C4655;
    const double C75880 = C68625 * C10691;
    const double C17184 = C17182 * C139372;
    const double C8999 = C8997 * C139384;
    const double C10611 = C8997 * C139384;
    const double C19799 = C8997 * C4654;
    const double C27388 = C8997 * C139596;
    const double C18878 = C18875 * C139384;
    const double C26498 = C18875 * C139384;
    const double C5394 = C5392 * C4655;
    const double C11305 = C5392 * C10691;
    const double C19804 = C19803 * C4655;
    const double C27390 = C19803 * C10691;
    const double C1621 = C1618 + C1608;
    const double C15242 = C1608 + C1618;
    const double C2489 = C2486 - C2487;
    const double C17177 = C3300 + C3308;
    const double C17173 = C3308 + C3300;
    const double C66448 = C17860 + C17856;
    const double C14449 = C13591 * C930;
    const double C14445 = C139587 * C930;
    const double C47881 = C47029 * C930;
    const double C47877 = C139587 * C930;
    const double C63991 = C139289 * C930;
    const double C32194 = C13591 * C1797;
    const double C32190 = C139587 * C1797;
    const double C77637 = C139289 * C1797;
    const double C94227 = C47029 * C1797;
    const double C94223 = C139587 * C1797;
    const double C16406 = C13591 * C2668;
    const double C16402 = C139587 * C2668;
    const double C49797 = C47029 * C2668;
    const double C49793 = C139587 * C2668;
    const double C63989 = C139289 * C2668;
    const double C18096 = C139587 * C3996;
    const double C23472 = C13591 * C3996;
    const double C51365 = C139587 * C3996;
    const double C56517 = C47029 * C3996;
    const double C70683 = C139289 * C3996;
    const double C35661 = C139587 * C4751;
    const double C35657 = C13591 * C4751;
    const double C81126 = C139289 * C4751;
    const double C97595 = C139587 * C4751;
    const double C97591 = C47029 * C4751;
    const double C66065 = C139289 * C17339;
    const double C66639 = C139289 * C18091;
    const double C68058 = C139289 * C20023;
    const double C82085 = C139289 * C20907;
    const double C137532 = C137526 + C137531;
    const double C138189 = C138187 - C137422;
    const double C17342 = C139587 * C3435;
    const double C50669 = C139587 * C3435;
    const double C65398 = C139289 * C3435;
    const double C18098 = C139587 * C3999;
    const double C51367 = C139587 * C3999;
    const double C70685 = C139289 * C3999;
    const double C20026 = C139587 * C5559;
    const double C53187 = C139587 * C5559;
    const double C81129 = C139289 * C5559;
    const double C37527 = C139587 * C6229;
    const double C99353 = C139587 * C6229;
    const double C128602 = C139289 * C6229;
    const double C138519 = C138506 + C138518;
    const double C336 = C139448 * C318;
    const double C1111 = C139448 * C1100;
    const double C13813 = C139598 * C1100;
    const double C14685 = C13593 * C1100;
    const double C47251 = C139598 * C1100;
    const double C48117 = C47031 * C1100;
    const double C1979 = C139448 * C1968;
    const double C15652 = C13593 * C1968;
    const double C49047 = C47031 * C1968;
    const double C2839 = C139448 * C2832;
    const double C14677 = C139598 * C2832;
    const double C16626 = C13593 * C2832;
    const double C48109 = C139598 * C2832;
    const double C50017 = C47031 * C2832;
    const double C8428 = C139448 * C4168;
    const double C15644 = C139598 * C4168;
    const double C23748 = C13593 * C4168;
    const double C49039 = C139598 * C4168;
    const double C56793 = C47031 * C4168;
    const double C4925 = C139448 * C4918;
    const double C19278 = C13593 * C4918;
    const double C52471 = C47031 * C4918;
    const double C137645 = C137640 + C137644;
    const double C138206 = C138203 - C138204;
    const double C18318 =
        2 * (C137477 * C138313 - (ae * C137535 * C137398) / C137336) -
        (ae * C137535 * C138207) / C137336 +
        C137477 *
            (C138313 - (ae * C137535 * C137477 * C137452) / C137336 +
             C137477 *
                 (C137477 * C137535 *
                      ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                        C137082) /
                           C137060 -
                       (C137630 * ce) / C137336) -
                  (ae * C137535 * C137452) / C137336));
    const double C21046 =
        (((-2 * C137535 * C137398) / C137082 -
          (C137535 * (C137452 * C137771 + C137398)) / C137082) *
         ae) /
            C137060 +
        C137477 *
            (2 * C138313 +
             C137535 * (C137643 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                          C137082) /
                             C137060 -
                         (C137630 * ce) / C137336) *
                            C137771));
    const double C37673 =
        3 * (C137619 + C137643 * C137771) +
        C137535 *
            (2 * C138313 +
             C137535 * (C137643 +
                        ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                          C137082) /
                             C137060 -
                         (C137630 * ce) / C137336) *
                            C137771));
    const double C16624 = C139598 * C3547;
    const double C50015 = C139598 * C3547;
    const double C23746 = C139598 * C4171;
    const double C33387 = C139448 * C4171;
    const double C56791 = C139598 * C4171;
    const double C19276 = C139598 * C5719;
    const double C36845 = C139448 * C5719;
    const double C52469 = C139598 * C5719;
    const double C35897 = C139448 * C6345;
    const double C138544 = C138538 + C138543;
    const double C66817 =
        3 * ((-(ae * C137535 * C137800) / C137082) / C137060 -
             C138315 / C137336 + C137477 * C138653) +
        (C137535 * C138542 * ae) / C137060 +
        C137477 *
            (2 * C138653 - (ae * C137535 * C138534) / C137336 +
             C137477 *
                 ((-(ae * C137535 * C137477 * C137436) / C137082) / C137060 -
                  C138648 / C137336 +
                  C137477 * ((-(C137477 * C137535 * std::pow(C137339, 7) *
                                bs[7] * C137599) /
                              C137082) /
                                 C137060 -
                             (ae * C137535 * C137436) / C137336)));
    const double C14563 = C13591 * C1014;
    const double C14561 = C139587 * C1014;
    const double C47995 = C47029 * C1014;
    const double C47993 = C139587 * C1014;
    const double C64088 = C139289 * C1014;
    const double C32312 = C13591 * C1882;
    const double C32308 = C139587 * C1882;
    const double C77749 = C139289 * C1882;
    const double C94345 = C47029 * C1882;
    const double C94341 = C139587 * C1882;
    const double C16514 = C13591 * C2750;
    const double C16510 = C139587 * C2750;
    const double C49905 = C47029 * C2750;
    const double C49901 = C139587 * C2750;
    const double C64085 = C139289 * C2750;
    const double C18208 = C139587 * C4082;
    const double C23606 = C13591 * C4082;
    const double C51473 = C139587 * C4082;
    const double C56651 = C47029 * C4082;
    const double C70790 = C139289 * C4082;
    const double C35773 = C13591 * C4836;
    const double C35769 = C139587 * C4836;
    const double C81242 = C139289 * C4836;
    const double C97707 = C47029 * C4836;
    const double C97703 = C139587 * C4836;
    const double C130012 = C139289 * C37598;
    const double C137590 = C137584 + C137589;
    const double C20976 =
        2 * (C137535 * C138362 - (C138102 * ce) / C137336) -
        ((C138102 + C138363 * C137771) * ce) / C137336 +
        C137535 *
            (C138362 - (C137535 * C138363 * ce) / C137336 +
             C137535 *
                 (C137535 * C137477 *
                      ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                        C137082) /
                           C137060 -
                       (ae * C137573) / C137336) -
                  (C138363 * ce) / C137336));
    const double C138405 = C138403 - C137422;
    const double C17420 = C139587 * C3491;
    const double C50743 = C139587 * C3491;
    const double C65481 = C139289 * C3491;
    const double C18214 = C139587 * C4085;
    const double C51479 = C139587 * C4085;
    const double C70795 = C139289 * C4085;
    const double C20136 = C139587 * C5639;
    const double C53293 = C139587 * C5639;
    const double C81244 = C139289 * C5639;
    const double C37601 = C139587 * C6289;
    const double C99423 = C139587 * C6289;
    const double C128682 = C139289 * C6289;
    const double C83049 =
        3 * ((-(C138720 * ce) / C137082) / C137060 - C138365 / C137336 +
             C137535 * C138730) -
        ((2 * C138720 + C137535 * C138727) * ce) / C137336 +
        C137535 *
            (2 * C138730 - (C138727 * ce) / C137336 +
             C137535 * ((-(C137535 * C138723 * ce) / C137082) / C137060 -
                        C138721 / C137336 +
                        C137535 * ((-(C137535 * C137477 * std::pow(C137339, 7) *
                                      bs[7] * C137542) /
                                    C137082) /
                                       C137060 -
                                   (C138723 * ce) / C137336)));
    const double C138800 = C138788 + C138799;
    const double C80549 = C139598 * C18518;
    const double C113209 = C139598 * C18518;
    const double C82507 = C139598 * C20438;
    const double C115071 = C139598 * C20438;
    const double C128212 = C139448 * C20438;
    const double C83275 = C139598 * C21182;
    const double C115809 = C139598 * C21182;
    const double C129612 = C139448 * C21182;
    const double C130184 = C139448 * C37824;
    const double C1313 = C139448 * C1302;
    const double C13995 = C139598 * C1302;
    const double C47433 = C139598 * C1302;
    const double C2179 = C139448 * C2162;
    const double C3027 = C139448 * C3019;
    const double C14909 = C139598 * C3019;
    const double C48341 = C139598 * C3019;
    const double C8658 = C139448 * C4329;
    const double C15876 = C139598 * C4329;
    const double C49271 = C139598 * C4329;
    const double C5113 = C139448 * C5097;
    const double C17626 =
        3 * ((-(ae * C138127) / C137082) / C137060 - C137985 / C137336 +
             C137477 * C138273) +
        (((-2 * C138127) / C137082 - (C137477 * C138270) / C137082) * ae) /
            C137060 +
        C137477 *
            (2 * C138273 - (ae * C138270) / C137336 +
             C137477 * ((-(ae * C137477 * C138266) / C137082) / C137060 -
                        C138264 / C137336 +
                        C137477 * ((-(C137477 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137676) /
                                    C137082) /
                                       C137060 -
                                   (ae * C138266) / C137336)));
    const double C18519 =
        2 * (C137477 * C138332 - (ae * C138166) / C137336) -
        (ae * (C137535 * C138270 + C138250 * ce)) / C137336 +
        C137477 *
            (C138332 -
             (ae * (C137535 * C137477 * C138266 + C138249)) / C137336 +
             C137477 * (C137477 * ((-(C137535 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137676) /
                                    C137082) /
                                       C137060 -
                                   (C138245 * ce) / C137336) -
                        (ae * (C137535 * C138266 + C137437)) / C137336));
    const double C20439 =
        (-(C137535 * C137621 * ce) / C137082) / C137060 - C137985 / C137336 +
        C137535 * C138332 -
        (ae * (C137535 * (C137535 * C137477 * C138266 + C138249) + C138127 +
               C137535 * C138243 * ce)) /
            C137336 +
        C137477 *
            (C137477 * ((-(C137535 * C138245 * ce) / C137082) / C137060 -
                        C138264 / C137336 +
                        C137535 * ((-(C137535 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137676) /
                                    C137082) /
                                       C137060 -
                                   (C138245 * ce) / C137336)) -
             (ae * (C137535 * (C137535 * C138266 + C137437) + C137564 +
                    C137535 * C137429 * ce)) /
                 C137336);
    const double C21183 =
        (((-2 * C138166) / C137082 -
          (C137535 * (C137535 * (C137535 * C138266 + C137437) + C137564 +
                      C137535 * C137429 * ce)) /
              C137082 -
          ((C137381 + C137429 * C137771) * ce) / C137082) *
         ae) /
            C137060 +
        C137477 *
            (2 * C138332 - ((C137621 + C138245 * C137771) * ce) / C137336 +
             C137535 * ((-(C137535 * C138245 * ce) / C137082) / C137060 -
                        C138264 / C137336 +
                        C137535 * ((-(C137535 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137676) /
                                    C137082) /
                                       C137060 -
                                   (C138245 * ce) / C137336)));
    const double C37825 =
        3 * ((-(C138425 * ce) / C137082) / C137060 - C137985 / C137336 +
             C137535 * C138332) -
        ((2 * C138425 + C137535 * C138427) * ce) / C137336 +
        C137535 *
            (2 * C138332 - (C138427 * ce) / C137336 +
             C137535 * ((-(C137535 * C138245 * ce) / C137082) / C137060 -
                        C138264 / C137336 +
                        C137535 * ((-(C137535 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137676) /
                                    C137082) /
                                       C137060 -
                                   (C138245 * ce) / C137336)));
    const double C138613 = C138609 + C138612;
    const double C138677 = C138676 - C138672;
    const double C138699 = C138697 + C138698;
    const double C583 = C139463 * C565;
    const double C1413 = C139463 * C1402;
    const double C31724 = C30408 * C1402;
    const double C93757 = C92451 * C1402;
    const double C2281 = C139463 * C2270;
    const double C30830 = C139600 * C2270;
    const double C32763 = C30408 * C2270;
    const double C92867 = C139600 * C2270;
    const double C94759 = C92451 * C2270;
    const double C3117 = C139463 * C3110;
    const double C33705 = C30408 * C3110;
    const double C95681 = C92451 * C3110;
    const double C8766 = C139463 * C4414;
    const double C31716 = C139600 * C4414;
    const double C40757 = C30408 * C4414;
    const double C93749 = C139600 * C4414;
    const double C102505 = C92451 * C4414;
    const double C5203 = C139463 * C5196;
    const double C32755 = C139600 * C5196;
    const double C36229 = C30408 * C5196;
    const double C94751 = C139600 * C5196;
    const double C98111 = C92451 * C5196;
    const double C137746 = C137741 + C137745;
    const double C21252 =
        2 * (C137535 * C138373 - (ae * C138117) / C137336) -
        (ae * (C138374 * C137771 + C138117)) / C137336 +
        C137535 *
            (C138373 - (ae * C137535 * C138374) / C137336 +
             C137535 *
                 (C137535 * C137477 *
                      ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                        C137082) /
                           C137060 -
                       (C137731 * ce) / C137336) -
                  (ae * C138374) / C137336));
    const double C138432 = C138430 - C138204;
    const double C16958 = C139463 * C3709;
    const double C18636 = C139463 * C4417;
    const double C33703 = C139600 * C4417;
    const double C95679 = C139600 * C4417;
    const double C19592 = C139463 * C5953;
    const double C40755 = C139600 * C5953;
    const double C102503 = C139600 * C5953;
    const double C36227 = C139600 * C6507;
    const double C98109 = C139600 * C6507;
    const double C83346 =
        3 * ((-(ae * C138739) / C137082) / C137060 - C138376 / C137336 +
             C137535 * C138748) +
        (((-2 * C138739) / C137082 - (C137535 * C138745) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C138748 - (ae * C138745) / C137336 +
             C137535 * ((-(ae * C137535 * C138741) / C137082) / C137060 -
                        C138740 / C137336 +
                        C137535 * ((-(C137535 * C137477 * std::pow(C137339, 7) *
                                      bs[7] * C137700) /
                                    C137082) /
                                       C137060 -
                                   (ae * C138741) / C137336)));
    const double C138825 = C138819 + C138824;
    const double C66395 = C139463 * C17782;
    const double C67131 = C139463 * C18746;
    const double C79818 = C139600 * C18746;
    const double C112503 = C139600 * C18746;
    const double C68541 = C139463 * C20650;
    const double C80781 = C139600 * C20650;
    const double C113441 = C139600 * C20650;
    const double C82721 = C139600 * C21321;
    const double C115285 = C139600 * C21321;
    const double C1517 = C139463 * C1500;
    const double C2379 = C139463 * C2367;
    const double C30928 = C139600 * C2367;
    const double C92965 = C139600 * C2367;
    const double C3217 = C139463 * C3201;
    const double C8883 = C139463 * C4497;
    const double C31838 = C139600 * C4497;
    const double C93871 = C139600 * C4497;
    const double C5295 = C139463 * C5287;
    const double C32877 = C139600 * C5287;
    const double C94873 = C139600 * C5287;
    const double C17783 =
        3 * ((-(C138128 * ce) / C137082) / C137060 - C137992 / C137336 +
             C137477 * C138302) -
        ((2 * C138128 + C137477 * C138299) * ce) / C137336 +
        C137477 *
            (2 * C138302 - (C138299 * ce) / C137336 +
             C137477 * ((-(C137477 * C138295 * ce) / C137082) / C137060 -
                        C138293 / C137336 +
                        C137477 * ((-(C137477 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137752) /
                                    C137082) /
                                       C137060 -
                                   (C138295 * ce) / C137336)));
    const double C18747 =
        (((-2 * C137975) / C137082 - (C137477 * C138261) / C137082 -
          (C138250 * ce) / C137082) *
         ae) /
            C137060 +
        C137535 *
            (2 * C138302 - (C138299 * ce) / C137336 +
             C137477 * ((-(C137477 * C138295 * ce) / C137082) / C137060 -
                        C138293 / C137336 +
                        C137477 * ((-(C137477 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137752) /
                                    C137082) /
                                       C137060 -
                                   (C138295 * ce) / C137336)));
    const double C20651 =
        (-(C138128 * ce) / C137082) / C137060 - C137992 / C137336 +
        C137477 * C138302 - (ae * C137535 * C138261) / C137336 +
        C137535 *
            (C137535 * ((-(C137477 * C138295 * ce) / C137082) / C137060 -
                        C138293 / C137336 +
                        C137477 * ((-(C137477 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137752) /
                                    C137082) /
                                       C137060 -
                                   (C138295 * ce) / C137336)) -
             (ae * C138261) / C137336);
    const double C21320 =
        2 * (C137535 * C138302 - (ae * C137975) / C137336) -
        (ae * (C138254 * C137771 + C137975)) / C137336 +
        C137535 *
            (C138302 - (ae * C137535 * C138254) / C137336 +
             C137535 * (C137535 * ((-(C137477 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137752) /
                                    C137082) /
                                       C137060 -
                                   (C138295 * ce) / C137336) -
                        (ae * C138254) / C137336));
    const double C37965 =
        3 * ((-(ae * C138444) / C137082) / C137060 - C137992 / C137336 +
             C137535 * C138451) +
        (((-2 * C138444) / C137082 - (C137535 * C138448) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C138451 - (ae * C138448) / C137336 +
             C137535 * ((-(ae * C137535 * C138242) / C137082) / C137060 -
                        C138293 / C137336 +
                        C137535 * ((-(C137535 * C137335 * std::pow(C137339, 7) *
                                      bs[7] * C137752) /
                                    C137082) /
                                       C137060 -
                                   (ae * C138242) / C137336)));
    const double C138637 = C138634 + C138636;
    const double C138754 = C138751 - C138752;
    const double C138844 = C138838 + C138843;
    const double C66742 = C66739 - C66740;
    const double C129293 = C129292 - C82079;
    const double C137108 = C137107 - C137097;
    const double C70310 = C22989 + C22988;
    const double C134430 = C43510 + C43509;
    const double C69863 = C69855 + C69856;
    const double C85387 = C70566 + C70567;
    const double C85386 = C70567 + C70566;
    const double C134200 = C88630 + C88629;
    const double C137188 = C137186 - C137173;
    const double C7008 = C7000 + C7001;
    const double C7246 = C7238 + C7239;
    const double C40477 = C8537 + C8538;
    const double C40476 = C8538 + C8537;
    const double C136749 = C46570 + C46569;
    const double C136519 = C91688 + C91687;
    const double C137233 = C137231 - C137218;
    const double C9461 = C9453 + C9454;
    const double C9699 = C9691 + C9692;
    const double C26494 = C10609 + C10610;
    const double C26493 = C10610 + C10609;
    const double C75189 = C29453 + C29452;
    const double C74738 = C72356 + C72357;
    const double C129212 = C129210 * C139448;
    const double C424 = C422 * C139463;
    const double C42589 = C10192 - C42587;
    const double C42588 = C42586 - C10192;
    const double C129533 = C129527 - C36956;
    const double C24430 = C8987 - C24428;
    const double C24429 = C24427 - C8987;
    const double C65941 = C65939 * C139289;
    const double C67214 = C67208 - C18863;
    const double C2189 = C2188 * C139463;
    const double C14337 = C14322 + C14323;
    const double C47769 = C47754 + C47755;
    const double C32084 = C32069 + C32070;
    const double C94117 = C94102 + C94103;
    const double C16294 = C16279 + C16280;
    const double C49685 = C49670 + C49671;
    const double C63894 = C63880 + C63881;
    const double C23336 = C23329 + C23330;
    const double C56381 = C56374 + C56375;
    const double C76581 = C76577 + C76578;
    const double C35551 = C35536 + C35537;
    const double C97485 = C97470 + C97471;
    const double C126018 = C126014 + C126015;
    const double C14339 = C14326 + C14327;
    const double C47771 = C47758 + C47759;
    const double C32086 = C32073 + C32074;
    const double C94119 = C94106 + C94107;
    const double C16300 = C16291 + C16292;
    const double C49691 = C49682 + C49683;
    const double C63895 = C63882 + C63883;
    const double C23338 = C23333 + C23334;
    const double C56383 = C56378 + C56379;
    const double C76582 = C76579 + C76580;
    const double C35557 = C35548 + C35549;
    const double C97491 = C97482 + C97483;
    const double C126019 = C126016 + C126017;
    const double C137456 = C137449 - C137422;
    const double C81961 = C67975 + C67976;
    const double C81958 = C67976 + C67975;
    const double C129895 = C129890 * C139448;
    const double C137473 = C137471 + C137448;
    const double C138592 = C138590 + C138573;
    const double C138889 = C138887 + C138858;
    const double C137472 = C137426 - C137470;
    const double C138591 = C138561 - C138589;
    const double C138888 = C138863 - C138886;
    const double C2585 =
        2 * ((-((C137363 + C137390 * C137649) * ce) / C137082) / C137060 -
             (ae * (C137387 * C137649 + C137362)) / C137336 +
             C137335 * C137919) -
        (ae * (C137464 * C137649 + C137407)) / C137336 -
        ((C137408 + C137465 * C137649) * ce) / C137336 +
        C137335 *
            (C137919 - (ae * (C137452 * C137649 + C137398)) / C137336 -
             ((C137399 + C137455 * C137649) * ce) / C137336 +
             C137335 *
                 ((-((C137390 + C137439 * C137649) * ce) / C137082) / C137060 -
                  (ae * (C137436 * C137649 + C137387)) / C137336 +
                  C137335 * ((-((C137416 * C137417 +
                                 C137343 * bs[7] * std::pow(C137339, 7)) *
                                C137344 * C137649) /
                              C137082) /
                                 C137060 -
                             C137451 / C137336)));
    const double C3374 =
        (-2 * C137797) / C137336 + C137477 * C137919 +
        (((-2 * C137477 * C137398) / C137082 -
          (C137477 * (C137452 * C137649 + C137398)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137477 * C137399 + C137477 * (C137399 + C137455 * C137649)) *
         ce) /
            C137336 +
        C137335 *
            ((((-2 * C137800) / C137082 -
               (C137477 * (C137436 * C137649 + C137387)) / C137082) *
              ae) /
                 C137060 -
             ((2 * C137799 + C137477 * (C137390 + C137439 * C137649)) * ce) /
                 C137336 +
             C137335 * ((-2 * C137801) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137343 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137451 / C137336)));
    const double C3375 =
        (((-2 * C137477 * C137362) / C137082 -
          (C137477 * (C137387 * C137649 + C137362)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137477 * C137363 + C137477 * (C137363 + C137390 * C137649)) *
         ce) /
            C137336 +
        C137335 * ((-2 * C137797) / C137336 + C137477 * C137919);
    const double C3912 =
        C137535 * C137919 -
        (ae * C137535 * (C137452 * C137649 + C137398)) / C137336 -
        (C137535 * (C137399 + C137455 * C137649) * ce) / C137336 +
        C137335 * ((-(C137535 * (C137390 + C137439 * C137649) * ce) / C137082) /
                       C137060 -
                   (ae * C137535 * (C137436 * C137649 + C137387)) / C137336 +
                   C137335 * C137535 *
                       ((-((C137416 * C137417 +
                            C137343 * bs[7] * std::pow(C137339, 7)) *
                           C137344 * C137649) /
                         C137082) /
                            C137060 -
                        C137451 / C137336));
    const double C3913 =
        (-(C137535 * (C137363 + C137390 * C137649) * ce) / C137082) / C137060 -
        (ae * C137535 * (C137387 * C137649 + C137362)) / C137336 +
        C137335 * C137535 * C137919;
    const double C17256 =
        (((-3 * (C137387 * C137649 + C137362)) / C137082 +
          C137477 * ((-2 * C137800) / C137082 -
                     (C137477 * (C137436 * C137649 + C137387)) / C137082)) *
         ae) /
            C137060 -
        ((3 * (C137363 + C137390 * C137649) +
          C137477 * (2 * C137799 + C137477 * (C137390 + C137439 * C137649))) *
         ce) /
            C137336 +
        C137335 *
            (3 * C137919 +
             C137477 * ((-2 * C137801) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137343 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137451 / C137336)));
    const double C17257 =
        3 * ((-(C137397 * C137649) / C137082) / C137060 - C137367 / C137336) +
        C137477 * ((-2 * C137797) / C137336 + C137477 * C137919);
    const double C17965 =
        C137535 * ((-2 * C137797) / C137336 + C137477 * C137919);
    const double C19908 =
        (-((C138196 + (C137390 + C137439 * C137649) * C137771) * ce) /
         C137082) /
            C137060 -
        (ae * ((C137436 * C137649 + C137387) * C137771 + C138212)) / C137336 +
        C137335 *
            (C137919 +
             ((-((C137416 * C137417 + C137343 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137649) /
               C137082) /
                  C137060 -
              C137451 / C137336) *
                 C137771);
    const double C19909 = (-(C137397 * C137649) / C137082) / C137060 -
                          C137367 / C137336 + C137919 * C137771;
    const double C65994 =
        4 * ((-2 * C137797) / C137336 + C137477 * C137919) +
        C137477 *
            (3 * C137919 +
             C137477 * ((-2 * C137801) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137343 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137451 / C137336)));
    const double C66531 =
        C137535 *
        (3 * C137919 +
         C137477 * ((-2 * C137801) / C137336 +
                    C137477 * ((-((C137416 * C137417 +
                                   C137343 * bs[7] * std::pow(C137339, 7)) *
                                  C137344 * C137649) /
                                C137082) /
                                   C137060 -
                               C137451 / C137336)));
    const double C67961 =
        (-2 * C137797) / C137336 + C137477 * C137919 +
        ((-2 * C137801) / C137336 +
         C137477 *
             ((-((C137416 * C137417 + C137343 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137649) /
               C137082) /
                  C137060 -
              C137451 / C137336)) *
            C137771;
    const double C68679 =
        2 * C137535 * C137919 +
        C137535 *
            (C137919 +
             ((-((C137416 * C137417 + C137343 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137649) /
               C137082) /
                  C137060 -
              C137451 / C137336) *
                 C137771);
    const double C4671 =
        2 * ((-((C137363 + C137390 * C137771) * ce) / C137082) / C137060 -
             (ae * (C137387 * C137771 + C137362)) / C137336 +
             C137335 * C138060) -
        (ae * (C137464 * C137771 + C137407)) / C137336 -
        ((C137408 + C137465 * C137771) * ce) / C137336 +
        C137335 *
            (C138060 - (ae * (C137452 * C137771 + C137398)) / C137336 -
             ((C137399 + C137455 * C137771) * ce) / C137336 +
             C137335 *
                 ((-((C137390 + C137439 * C137771) * ce) / C137082) / C137060 -
                  (ae * (C137436 * C137771 + C137387)) / C137336 +
                  C137335 * ((-((C137416 * C137417 +
                                 C137343 * bs[7] * std::pow(C137339, 7)) *
                                C137344 * C137771) /
                              C137082) /
                                 C137060 -
                             C137451 / C137336)));
    const double C6172 =
        (-2 * C137856) / C137336 + C137535 * C138060 +
        (((-2 * C137535 * C137398) / C137082 -
          (C137535 * (C137452 * C137771 + C137398)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137535 * C137399 + C137535 * (C137399 + C137455 * C137771)) *
         ce) /
            C137336 +
        C137335 *
            ((((-2 * C137859) / C137082 -
               (C137535 * (C137436 * C137771 + C137387)) / C137082) *
              ae) /
                 C137060 -
             ((2 * C137858 + C137535 * (C137390 + C137439 * C137771)) * ce) /
                 C137336 +
             C137335 * ((-2 * C137860) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137343 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137771) /
                                    C137082) /
                                       C137060 -
                                   C137451 / C137336)));
    const double C6173 =
        (((-2 * C137535 * C137362) / C137082 -
          (C137535 * (C137387 * C137771 + C137362)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137535 * C137363 + C137535 * (C137363 + C137390 * C137771)) *
         ce) /
            C137336 +
        C137335 * ((-2 * C137856) / C137336 + C137535 * C138060);
    const double C37439 =
        (((-3 * (C137387 * C137771 + C137362)) / C137082 +
          C137535 * ((-2 * C137859) / C137082 -
                     (C137535 * (C137436 * C137771 + C137387)) / C137082)) *
         ae) /
            C137060 -
        ((3 * (C137363 + C137390 * C137771) +
          C137535 * (2 * C137858 + C137535 * (C137390 + C137439 * C137771))) *
         ce) /
            C137336 +
        C137335 *
            (3 * C138060 +
             C137535 * ((-2 * C137860) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137343 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137771) /
                                    C137082) /
                                       C137060 -
                                   C137451 / C137336)));
    const double C37440 =
        3 * ((-(C137397 * C137771) / C137082) / C137060 - C137367 / C137336) +
        C137535 * ((-2 * C137856) / C137336 + C137535 * C138060);
    const double C129888 =
        4 * ((-2 * C137856) / C137336 + C137535 * C138060) +
        C137535 *
            (3 * C138060 +
             C137535 * ((-2 * C137860) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137343 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137771) /
                                    C137082) /
                                       C137060 -
                                   C137451 / C137336)));
    const double C399 =
        4 * ((-2 * C137335 * C137659) / C137336 + C137335 * C137670) +
        C137335 *
            (3 * C137670 +
             C137335 * ((-2 * C137335 * C137665) / C137336 +
                        C137335 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C1198 =
        (((-2 * C137491) / C137082 - (C137335 * C137501) / C137082) * ae) /
            C137060 -
        ((2 * C137606 + C137335 * C137616) * ce) / C137336 +
        C137477 * ((-2 * C137335 * C137659) / C137336 + C137335 * C137670);
    const double C1199 =
        (((-3 * C137501) / C137082 + C137335 * C137530) * ae) / C137060 -
        ((3 * C137616 + C137335 * C137642) * ce) / C137336 +
        C137477 *
            (3 * C137670 +
             C137335 * ((-2 * C137335 * C137665) / C137336 +
                        C137335 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C2065 =
        C137535 * ((-2 * C137335 * C137659) / C137336 + C137335 * C137670);
    const double C2067 =
        C137535 *
        (3 * C137670 +
         C137335 * ((-2 * C137335 * C137665) / C137336 +
                    C137335 * ((-((C137416 * C137417 +
                                   C137649 * bs[7] * std::pow(C137339, 7)) *
                                  C137344 * C137343) /
                                C137082) /
                                   C137060 -
                               C137665 / C137336)));
    const double C2923 =
        (-(C137659 * C137343) / C137082) / C137060 - C137654 / C137336 -
        (ae * (C137477 * C137501 + C137389 * ce)) / C137336 -
        ((C137477 * C137616 + C137389 * ae) * ce) / C137336 +
        C137477 * ((-(C137616 * ce) / C137082) / C137060 -
                   (ae * C137501) / C137336 + C137477 * C137670);
    const double C2924 =
        (-2 * C137335 * C137659) / C137336 + C137335 * C137670 +
        ((C137477 * C137530 - (C137454 * ce) / C137082) * ae) / C137060 -
        ((C137477 * C137642 + C137454 * ae) * ce) / C137336 +
        C137477 *
            ((C137530 * ae) / C137060 - (C137642 * ce) / C137336 +
             C137477 * ((-2 * C137335 * C137665) / C137336 +
                        C137335 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C3601 =
        2 * ((-(C137616 * ce) / C137082) / C137060 - (ae * C137501) / C137336 +
             C137477 * C137670) -
        (ae * (C137477 * C137981 + C137501 + C137979 * ce)) / C137336 -
        ((C137616 + C137477 * C137982 + C137979 * ae) * ce) / C137336 +
        C137477 *
            (C137670 - (ae * C137981) / C137336 - (C137982 * ce) / C137336 +
             C137477 * ((-(C137636 * ce) / C137082) / C137060 -
                        (ae * C137522) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C4251 = (-(C137535 * C137616 * ce) / C137082) / C137060 -
                         (ae * C137535 * C137501) / C137336 +
                         C137477 * C137535 * C137670;
    const double C4252 =
        C137535 * C137670 - (ae * C137535 * C137981) / C137336 -
        (C137535 * C137982 * ce) / C137336 +
        C137477 * ((-(C137535 * C137636 * ce) / C137082) / C137060 -
                   (ae * C137535 * C137522) / C137336 +
                   C137477 * C137535 *
                       ((-((C137416 * C137417 +
                            C137649 * bs[7] * std::pow(C137339, 7)) *
                           C137344 * C137343) /
                         C137082) /
                            C137060 -
                        C137665 / C137336));
    const double C5009 = (-(C137659 * C137343) / C137082) / C137060 -
                         C137654 / C137336 + C137670 * C137771;
    const double C5010 =
        (-2 * C137971) / C137336 + C137335 * C137670 +
        ((-2 * C137335 * C137665) / C137336 +
         C137335 *
             ((-((C137416 * C137417 + C137649 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137343) /
               C137082) /
                  C137060 -
              C137665 / C137336)) *
            C137771;
    const double C5797 =
        (-((C137616 + C137636 * C137771) * ce) / C137082) / C137060 -
        (ae * (C137522 * C137771 + C137501)) / C137336 +
        C137477 *
            (C137670 +
             ((-((C137416 * C137417 + C137649 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137343) /
               C137082) /
                  C137060 -
              C137665 / C137336) *
                 C137771);
    const double C6397 =
        2 * C137535 * C137670 +
        C137535 *
            (C137670 +
             ((-((C137416 * C137417 + C137649 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137343) /
               C137082) /
                  C137060 -
              C137665 / C137336) *
                 C137771);
    const double C68304 =
        2 * ((-(C138423 * ce) / C137082) / C137060 - (ae * C138457) / C137336 +
             C137477 * C138695) -
        (ae * (C138582 * C137771 + C138237)) / C137336 -
        ((C138238 + C138583 * C137771) * ce) / C137336 +
        C137477 *
            (C138695 - (ae * (C138562 * C137771 + C138225)) / C137336 -
             ((C138228 + C138565 * C137771) * ce) / C137336 +
             C137477 *
                 ((-((C137612 + C137630 * C137771) * ce) / C137082) / C137060 -
                  (ae * (C137515 * C137771 + C137497)) / C137336 +
                  C137477 * ((-((C137416 * C137417 +
                                 C137649 * bs[7] * std::pow(C137339, 7)) *
                                C137344 * C137771) /
                              C137082) /
                                 C137060 -
                             C137665 / C137336)));
    const double C68886 =
        (-2 * C138317) / C137336 + C137535 * C138695 +
        (((-2 * C137535 * C138225) / C137082 -
          (C137535 * (C138562 * C137771 + C138225)) / C137082) *
         ae) /
            C137060 -
        ((2 * C137535 * C138228 + C137535 * (C138228 + C138565 * C137771)) *
         ce) /
            C137336 +
        C137477 *
            ((((-2 * C138656) / C137082 -
               (C137535 * (C137515 * C137771 + C137497)) / C137082) *
              ae) /
                 C137060 -
             ((2 * C138655 + C137535 * (C137612 + C137630 * C137771)) * ce) /
                 C137336 +
             C137477 * ((-2 * C138657) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137771) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C83199 =
        (((-3 * C138457) / C137082 +
          C137535 * ((-2 * C138656) / C137082 -
                     (C137535 * (C137515 * C137771 + C137497)) / C137082)) *
         ae) /
            C137060 -
        ((3 * C138423 +
          C137535 * (2 * C138655 + C137535 * (C137612 + C137630 * C137771))) *
         ce) /
            C137336 +
        C137477 *
            (3 * C138695 +
             C137535 * ((-2 * C138657) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137771) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C130124 =
        4 * ((-2 * C138317) / C137336 + C137535 * C138695) +
        C137535 *
            (3 * C138695 +
             C137535 * ((-2 * C138657) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137649 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137771) /
                                    C137082) /
                                       C137060 -
                                   C137665 / C137336)));
    const double C724 =
        4 * ((-2 * C137335 * C137781) / C137336 + C137335 * C137792) +
        C137335 *
            (3 * C137792 +
             C137335 * ((-2 * C137335 * C137787) / C137336 +
                        C137335 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C1603 =
        C137477 * ((-2 * C137335 * C137781) / C137336 + C137335 * C137792);
    const double C1604 =
        C137477 *
        (3 * C137792 +
         C137335 * ((-2 * C137335 * C137787) / C137336 +
                    C137335 * ((-((C137416 * C137417 +
                                   C137771 * bs[7] * std::pow(C137339, 7)) *
                                  C137344 * C137343) /
                                C137082) /
                                   C137060 -
                               C137787 / C137336)));
    const double C2463 =
        (((-2 * C137549) / C137082 - (C137335 * C137559) / C137082) * ae) /
            C137060 -
        ((2 * C137707 + C137335 * C137717) * ce) / C137336 +
        C137535 * ((-2 * C137335 * C137781) / C137336 + C137335 * C137792);
    const double C2464 =
        (((-3 * C137559) / C137082 + C137335 * C137588) * ae) / C137060 -
        ((3 * C137717 + C137335 * C137743) * ce) / C137336 +
        C137535 *
            (3 * C137792 +
             C137335 * ((-2 * C137335 * C137787) / C137336 +
                        C137335 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C3297 = (-(C137781 * C137343) / C137082) / C137060 -
                         C137776 / C137336 + C137792 * C137649;
    const double C3298 =
        (-2 * C137335 * C137781) / C137336 + C137335 * C137792 +
        ((-2 * C137335 * C137787) / C137336 +
         C137335 *
             ((-((C137416 * C137417 + C137771 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137343) /
               C137082) /
                  C137060 -
              C137787 / C137336)) *
            C137649;
    const double C3814 =
        2 * C137477 * C137792 +
        C137477 *
            (C137792 +
             ((-((C137416 * C137417 + C137771 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137343) /
               C137082) /
                  C137060 -
              C137787 / C137336) *
                 C137649);
    const double C4575 = (-(C137477 * C137717 * ce) / C137082) / C137060 -
                         (ae * C137477 * C137559) / C137336 +
                         C137535 * C137477 * C137792;
    const double C4578 =
        (-((C137717 + C137737 * C137649) * ce) / C137082) / C137060 -
        (ae * (C137580 * C137649 + C137559)) / C137336 +
        C137535 *
            (C137792 +
             ((-((C137416 * C137417 + C137771 * bs[7] * std::pow(C137339, 7)) *
                 C137344 * C137343) /
               C137082) /
                  C137060 -
              C137787 / C137336) *
                 C137649);
    const double C5375 =
        (-(C137781 * C137343) / C137082) / C137060 - C137776 / C137336 -
        (ae * (C137535 * C137559 + C137389 * ce)) / C137336 -
        ((C137535 * C137717 + C137389 * ae) * ce) / C137336 +
        C137535 * ((-(C137717 * ce) / C137082) / C137060 -
                   (ae * C137559) / C137336 + C137535 * C137792);
    const double C5376 =
        (-2 * C137996) / C137336 + C137335 * C137792 +
        ((C137535 * C137588 - (C137454 * ce) / C137082) * ae) / C137060 -
        ((C137535 * C137743 + C137454 * ae) * ce) / C137336 +
        C137535 *
            ((C137588 * ae) / C137060 - (C137743 * ce) / C137336 +
             C137535 * ((-2 * C137335 * C137787) / C137336 +
                        C137335 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C6108 =
        C137477 * C137792 -
        (ae * (C137535 * C138130 + C137979 * ce)) / C137336 -
        ((C137535 * C138131 + C137979 * ae) * ce) / C137336 +
        C137535 *
            ((-(C138131 * ce) / C137082) / C137060 - (ae * C138130) / C137336 +
             C137535 * C137477 *
                 ((-((C137416 * C137417 +
                      C137771 * bs[7] * std::pow(C137339, 7)) *
                     C137344 * C137343) /
                   C137082) /
                      C137060 -
                  C137787 / C137336));
    const double C6614 =
        2 * ((-(C137717 * ce) / C137082) / C137060 - (ae * C137559) / C137336 +
             C137535 * C137792) -
        (ae * (C137535 * C138172 + C137559 + C138170 * ce)) / C137336 -
        ((C137717 + C137535 * C138173 + C138170 * ae) * ce) / C137336 +
        C137535 *
            (C137792 - (ae * C138172) / C137336 - (C138173 * ce) / C137336 +
             C137535 * ((-(C137737 * ce) / C137082) / C137060 -
                        (ae * C137580) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137343) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C66446 =
        4 * ((-2 * C138380) / C137336 + C137477 * C138643) +
        C137477 *
            (3 * C138643 +
             C137477 * ((-2 * C137477 * C137787) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C67206 =
        (((-3 * C138278) / C137082 + C137477 * C138611) * ae) / C137060 -
        ((3 * C138288 + C137477 * C138633) * ce) / C137336 +
        C137535 *
            (3 * C138643 +
             C137477 * ((-2 * C137477 * C137787) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C68616 =
        (-2 * C138380) / C137336 + C137477 * C138643 +
        ((C137535 * C138611 - (C138578 * ce) / C137082) * ae) / C137060 -
        ((C137535 * C138633 + C138578 * ae) * ce) / C137336 +
        C137535 *
            ((C138611 * ae) / C137060 - (C138633 * ce) / C137336 +
             C137535 * ((-2 * C137477 * C137787) / C137336 +
                        C137477 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C69091 =
        2 * ((-(C138288 * ce) / C137082) / C137060 - (ae * C138278) / C137336 +
             C137535 * C138643) -
        (ae * (C137535 * C138715 + C138278 + C138713 * ce)) / C137336 -
        ((C138288 + C137535 * C138716 + C138713 * ae) * ce) / C137336 +
        C137535 *
            (C138643 - (ae * C138715) / C137336 - (C138716 * ce) / C137336 +
             C137535 * ((-(C138627 * ce) / C137082) / C137060 -
                        (ae * C138602) / C137336 +
                        C137535 * ((-((C137416 * C137417 +
                                       C137771 * bs[7] * std::pow(C137339, 7)) *
                                      C137344 * C137649) /
                                    C137082) /
                                       C137060 -
                                   C137787 / C137336)));
    const double C82407 = C82404 + C82405;
    const double C114971 = C114968 + C114969;
    const double C128135 = C128133 + C128134;
    const double C138584 = C138580 - C138558;
    const double C138878 = C138874 - C138860;
    const double C17559 =
        3 * ((-(ae * C137975) / C137082) / C137060 - C137971 / C137336 -
             (C137976 * ce) / C137336 + C137477 * C138256) +
        (((-2 * C137975) / C137082 - (C137477 * C138261) / C137082 -
          (C138250 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C137976 + C137477 * C138262 + C138250 * ae) * ce) / C137336 +
        C137477 *
            (2 * C138256 - (ae * C138261) / C137336 - (C138262 * ce) / C137336 +
             C137477 * ((-(ae * C138254) / C137082) / C137060 -
                        C138241 / C137336 - (C138255 * ce) / C137336 +
                        C137477 * ((-(C138245 * ce) / C137082) / C137060 -
                                   (ae * C138242) / C137336 -
                                   (C137477 * C137335 *
                                    (C137416 * C137417 +
                                     C137649 * bs[7] * std::pow(C137339, 7)) *
                                    C137344) /
                                       C137336)));
    const double C16734 = C16731 + C16732;
    const double C50125 = C50122 + C50123;
    const double C80445 = C80440 + C80441;
    const double C113105 = C113100 + C113101;
    const double C80333 = C80322 + C80323;
    const double C112993 = C112982 + C112983;
    const double C82301 = C82294 + C82295;
    const double C114865 = C114858 + C114859;
    const double C128050 = C128046 + C128047;
    const double C36003 = C5020 + C5012;
    const double C36002 = C5012 + C5020;
    const double C1225 = C1224 * C139463;
    const double C2085 = C2084 * C139463;
    const double C38034 =
        3 * ((-(ae * C138166) / C137082) / C137060 - C137996 / C137336 -
             (C138167 * ce) / C137336 + C137535 * C138497) +
        (((-2 * C138166) / C137082 - (C137535 * C138502) / C137082 -
          (C138494 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138167 + C137535 * C138503 + C138494 * ae) * ce) / C137336 +
        C137535 *
            (2 * C138497 - (ae * C138502) / C137336 - (C138503 * ce) / C137336 +
             C137535 * ((-(ae * C138492) / C137082) / C137060 -
                        C138304 / C137336 - (C138495 * ce) / C137336 +
                        C137535 * ((-(C138295 * ce) / C137082) / C137060 -
                                   (ae * C138266) / C137336 -
                                   (C137535 * C137335 *
                                    (C137416 * C137417 +
                                     C137771 * bs[7] * std::pow(C137339, 7)) *
                                    C137344) /
                                       C137336)));
    const double C36441 = C36438 + C36439;
    const double C98323 = C98320 + C98321;
    const double C83480 =
        3 * ((-(ae * C138386) / C137082) / C137060 - C138380 / C137336 -
             (C138387 * ce) / C137336 + C137535 * C138773) +
        (((-2 * C138386) / C137082 - (C137535 * C138778) / C137082 -
          (C138767 * ce) / C137082) *
         ae) /
            C137060 -
        ((2 * C138387 + C137535 * C138779 + C138767 * ae) * ce) / C137336 +
        C137535 *
            (2 * C138773 - (ae * C138778) / C137336 - (C138779 * ce) / C137336 +
             C137535 * ((-(ae * C138771) / C137082) / C137060 -
                        C138758 / C137336 - (C138772 * ce) / C137336 +
                        C137535 * ((-(C138762 * ce) / C137082) / C137060 -
                                   (ae * C138759) / C137336 -
                                   (C137535 * C137477 *
                                    (C137416 * C137417 +
                                     C137771 * bs[7] * std::pow(C137339, 7)) *
                                    C137344) /
                                       C137336)));
    const double C65940 = C17173 * C139289;
    const double C66452 = C66448 * C139289;
    const double C14455 = C14448 + C14449;
    const double C14453 = C14444 + C14445;
    const double C47887 = C47880 + C47881;
    const double C47885 = C47876 + C47877;
    const double C63998 = C63990 + C63991;
    const double C32201 = C32193 + C32194;
    const double C32199 = C32189 + C32190;
    const double C77642 = C77636 + C77637;
    const double C94234 = C94226 + C94227;
    const double C94232 = C94222 + C94223;
    const double C16410 = C16405 + C16406;
    const double C16408 = C16401 + C16402;
    const double C49801 = C49796 + C49797;
    const double C49799 = C49792 + C49793;
    const double C63997 = C63988 + C63989;
    const double C18102 = C18095 + C18096;
    const double C23474 = C23471 + C23472;
    const double C51371 = C51364 + C51365;
    const double C56519 = C56516 + C56517;
    const double C70686 = C70682 + C70683;
    const double C35666 = C35660 + C35661;
    const double C35664 = C35656 + C35657;
    const double C81135 = C81125 + C81126;
    const double C97600 = C97594 + C97595;
    const double C97598 = C97590 + C97591;
    const double C66066 = C66064 + C66065;
    const double C66642 = C66638 + C66639;
    const double C68060 = C68057 + C68058;
    const double C82086 = C82084 + C82085;
    const double C193 =
        4 * (2 * C137504 - (ae * C137501) / C137336 + C137335 * C137532) +
        (((-3 * C137501) / C137082 + C137335 * C137530) * ae) / C137060 +
        C137335 *
            (3 * C137532 + (C137530 * ae) / C137060 +
             C137335 *
                 (2 * C137529 - (ae * C137522) / C137336 +
                  C137335 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                             C137512 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137484) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137515) / C137336))));
    const double C933 =
        C137477 * (2 * C137504 - (ae * C137501) / C137336 + C137335 * C137532) -
        ((2 * C137369 + C137335 * C137408 + C137389 * ae) * ce) / C137336;
    const double C1798 =
        C137535 * (2 * C137504 - (ae * C137501) / C137336 + C137335 * C137532);
    const double C1800 =
        C137535 *
        (3 * C137532 + (C137530 * ae) / C137060 +
         C137335 * (2 * C137529 - (ae * C137522) / C137336 +
                    C137335 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                               C137512 / C137336 +
                               C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137484) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137515) / C137336))));
    const double C2669 =
        (-(ae * C137491) / C137082) / C137060 - C137488 / C137336 +
        C137335 * C137504 - (C137477 * C137408 * ce) / C137336 +
        C137477 * (C137477 * C137532 - (C137408 * ce) / C137336);
    const double C3434 =
        2 * (C137477 * C137532 - (C137408 * ce) / C137336) -
        ((C137408 + C137465 * C137649) * ce) / C137336 +
        C137477 *
            (C137532 - (C137477 * C137465 * ce) / C137336 +
             C137477 *
                 (C137477 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                             C137512 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137484) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137515) / C137336)) -
                  (C137465 * ce) / C137336));
    const double C3997 =
        C137535 * (C137477 * C137532 - (C137408 * ce) / C137336);
    const double C3998 =
        C137535 *
        (C137532 - (C137477 * C137465 * ce) / C137336 +
         C137477 * (C137477 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                               C137512 / C137336 +
                               C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137484) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137515) / C137336)) -
                    (C137465 * ce) / C137336));
    const double C4752 = (-(ae * C137491) / C137082) / C137060 -
                         C137488 / C137336 + C137335 * C137504 +
                         C137532 * C137771;
    const double C4753 =
        2 * C137504 - (ae * C137501) / C137336 + C137335 * C137532 +
        (2 * C137529 - (ae * C137522) / C137336 +
         C137335 *
             ((-(ae * C137335 * C137515) / C137082) / C137060 -
              C137512 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (ae * C137515) / C137336))) *
            C137771;
    const double C5558 =
        C137477 * C137532 - (C137408 * ce) / C137336 +
        (C137477 *
             ((-(ae * C137335 * C137515) / C137082) / C137060 -
              C137512 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (ae * C137515) / C137336)) -
         (C137465 * ce) / C137336) *
            C137771;
    const double C6228 =
        2 * C137535 * C137532 +
        C137535 *
            (C137532 +
             ((-(ae * C137335 * C137515) / C137082) / C137060 -
              C137512 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (ae * C137515) / C137336)) *
                 C137771);
    const double C17338 =
        3 * (C137504 - (C138102 * ce) / C137336 + C137477 * C138189) -
        ((2 * C138102 + C137477 * C138190) * ce) / C137336 +
        C137477 *
            (2 * C138189 - (C138190 * ce) / C137336 +
             C137477 *
                 (C137529 - (C137477 * C137455 * ce) / C137336 +
                  C137477 * (C137477 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137484) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137515) / C137336) -
                             (C137455 * ce) / C137336)));
    const double C18090 =
        C137535 *
        (2 * C138189 - (C138190 * ce) / C137336 +
         C137477 * (C137529 - (C137477 * C137455 * ce) / C137336 +
                    C137477 * (C137477 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137484) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137515) / C137336) -
                               (C137455 * ce) / C137336)));
    const double C20022 =
        C137504 - (C138102 * ce) / C137336 + C137477 * C138189 +
        (C137529 - (C137477 * C137455 * ce) / C137336 +
         C137477 *
             (C137477 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (ae * C137515) / C137336) -
              (C137455 * ce) / C137336)) *
            C137771;
    const double C20906 =
        2 * C137535 * C138189 +
        C137535 *
            (C138189 +
             (C137477 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (ae * C137515) / C137336) -
              (C137455 * ce) / C137336) *
                 C137771);
    const double C17345 = C17341 + C17342;
    const double C50672 = C50668 + C50669;
    const double C65400 = C65397 + C65398;
    const double C18103 = C18097 + C18098;
    const double C51372 = C51366 + C51367;
    const double C70687 = C70684 + C70685;
    const double C20029 = C20025 + C20026;
    const double C53190 = C53186 + C53187;
    const double C81136 = C81128 + C81129;
    const double C37529 = C37526 + C37527;
    const double C99355 = C99352 + C99353;
    const double C128605 = C128601 + C128602;
    const double C66062 =
        4 * (2 * C138199 - (C138196 * ce) / C137336 + C137477 * C138519) -
        ((3 * C138196 + C137477 * C138516) * ce) / C137336 +
        C137477 *
            (3 * C138519 - (C138516 * ce) / C137336 +
             C137477 *
                 (2 * C138517 - (C138512 * ce) / C137336 +
                  C137477 * ((-(C137477 * C137439 * ce) / C137082) / C137060 -
                             C137512 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137484) /
                                         C137082) /
                                            C137060 -
                                        (C137439 * ce) / C137336))));
    const double C66632 =
        C137535 *
        (3 * C138519 - (C138516 * ce) / C137336 +
         C137477 * (2 * C138517 - (C138512 * ce) / C137336 +
                    C137477 * ((-(C137477 * C137439 * ce) / C137082) / C137060 -
                               C137512 / C137336 +
                               C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                             bs[7] * C137484) /
                                           C137082) /
                                              C137060 -
                                          (C137439 * ce) / C137336))));
    const double C68053 =
        2 * C138199 - (C138196 * ce) / C137336 + C137477 * C138519 +
        (2 * C138517 - (C138512 * ce) / C137336 +
         C137477 *
             ((-(C137477 * C137439 * ce) / C137082) / C137060 -
              C137512 / C137336 +
              C137477 * ((-(C137477 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (C137439 * ce) / C137336))) *
            C137771;
    const double C68731 =
        2 * C137535 * C138519 +
        C137535 *
            (C138519 +
             ((-(C137477 * C137439 * ce) / C137082) / C137060 -
              C137512 / C137336 +
              C137477 * ((-(C137477 * std::pow(C137339, 7) * bs[7] * C137484) /
                          C137082) /
                             C137060 -
                         (C137439 * ce) / C137336)) *
                 C137771);
    const double C344 = C335 + C336;
    const double C1119 = C1110 + C1111;
    const double C13829 = C13812 + C13813;
    const double C14693 = C14684 + C14685;
    const double C47267 = C47250 + C47251;
    const double C48125 = C48116 + C48117;
    const double C1987 = C1978 + C1979;
    const double C15660 = C15651 + C15652;
    const double C49055 = C49046 + C49047;
    const double C2845 = C2838 + C2839;
    const double C14689 = C14676 + C14677;
    const double C16630 = C16625 + C16626;
    const double C48121 = C48108 + C48109;
    const double C50021 = C50016 + C50017;
    const double C8434 = C8427 + C8428;
    const double C15656 = C15643 + C15644;
    const double C23752 = C23747 + C23748;
    const double C49051 = C49038 + C49039;
    const double C56797 = C56792 + C56793;
    const double C4931 = C4924 + C4925;
    const double C19282 = C19277 + C19278;
    const double C52475 = C52470 + C52471;
    const double C319 =
        4 * (2 * C137619 - (C137616 * ce) / C137336 + C137335 * C137645) -
        ((3 * C137616 + C137335 * C137642) * ce) / C137336 +
        C137335 *
            (3 * C137645 - (C137642 * ce) / C137336 +
             C137335 *
                 (2 * C137643 - (C137636 * ce) / C137336 +
                  C137335 * ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                             C137627 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137599) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336))));
    const double C1101 =
        (((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
          (C137389 * ce) / C137082) *
         ae) /
            C137060 +
        C137477 * (2 * C137619 - (C137616 * ce) / C137336 + C137335 * C137645);
    const double C1969 =
        C137535 * (2 * C137619 - (C137616 * ce) / C137336 + C137335 * C137645);
    const double C1970 =
        C137535 *
        (3 * C137645 - (C137642 * ce) / C137336 +
         C137335 * (2 * C137643 - (C137636 * ce) / C137336 +
                    C137335 * ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                               C137627 / C137336 +
                               C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137599) /
                                           C137082) /
                                              C137060 -
                                          (C137630 * ce) / C137336))));
    const double C2833 =
        (-(C137606 * ce) / C137082) / C137060 - C137603 / C137336 +
        C137335 * C137619 - (ae * C137477 * C137407) / C137336 +
        C137477 * (C137477 * C137645 - (ae * C137407) / C137336);
    const double C3546 =
        2 * (C137477 * C137645 - (ae * C137407) / C137336) -
        (ae * (C137464 * C137649 + C137407)) / C137336 +
        C137477 *
            (C137645 - (ae * C137477 * C137464) / C137336 +
             C137477 *
                 (C137477 * ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                             C137627 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137599) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336)) -
                  (ae * C137464) / C137336));
    const double C4169 =
        C137477 * C137535 * C137645 - (ae * C137535 * C137407) / C137336;
    const double C4170 =
        C137535 * C137645 - (ae * C137535 * C137477 * C137464) / C137336 +
        C137477 *
            (C137477 * C137535 *
                 ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                  C137627 / C137336 +
                  C137335 *
                      ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                        C137082) /
                           C137060 -
                       (C137630 * ce) / C137336)) -
             (ae * C137535 * C137464) / C137336);
    const double C4919 = (-(C137606 * ce) / C137082) / C137060 -
                         C137603 / C137336 + C137335 * C137619 +
                         C137645 * C137771;
    const double C4920 =
        2 * C137619 - (C137616 * ce) / C137336 + C137335 * C137645 +
        (2 * C137643 - (C137636 * ce) / C137336 +
         C137335 *
             ((-(C137335 * C137630 * ce) / C137082) / C137060 -
              C137627 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                          C137082) /
                             C137060 -
                         (C137630 * ce) / C137336))) *
            C137771;
    const double C5718 =
        C137477 *
            (C137645 +
             ((-(C137335 * C137630 * ce) / C137082) / C137060 -
              C137627 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                          C137082) /
                             C137060 -
                         (C137630 * ce) / C137336)) *
                 C137771) -
        (ae * (C137464 * C137771 + C137407)) / C137336;
    const double C6344 =
        2 * C137535 * C137645 +
        C137535 *
            (C137645 +
             ((-(C137335 * C137630 * ce) / C137082) / C137060 -
              C137627 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137599) /
                          C137082) /
                             C137060 -
                         (C137630 * ce) / C137336)) *
                 C137771);
    const double C17490 =
        3 * (C137619 - (ae * C138117) / C137336 + C137477 * C138206) +
        (((-2 * C138117) / C137082 - (C137477 * C138207) / C137082) * ae) /
            C137060 +
        C137477 *
            (2 * C138206 - (ae * C138207) / C137336 +
             C137477 *
                 (C137643 - (ae * C137477 * C137452) / C137336 +
                  C137477 * (C137477 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137599) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336) -
                             (ae * C137452) / C137336)));
    const double C16629 = C16623 + C16624;
    const double C50020 = C50014 + C50015;
    const double C23751 = C23745 + C23746;
    const double C33389 = C33386 + C33387;
    const double C56796 = C56790 + C56791;
    const double C19281 = C19275 + C19276;
    const double C36849 = C36844 + C36845;
    const double C52474 = C52468 + C52469;
    const double C35901 = C35896 + C35897;
    const double C66175 =
        4 * (2 * C138215 - (ae * C138212) / C137336 + C137477 * C138544) +
        (((-3 * C138212) / C137082 + C137477 * C138542) * ae) / C137060 +
        C137477 *
            (3 * C138544 + (C138542 * ae) / C137060 +
             C137477 *
                 (2 * C138541 - (ae * C138534) / C137336 +
                  C137477 * ((-(ae * C137477 * C137436) / C137082) / C137060 -
                             C137627 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137599) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137436) / C137336))));
    const double C14570 = C14562 + C14563;
    const double C14569 = C14560 + C14561;
    const double C48002 = C47994 + C47995;
    const double C48001 = C47992 + C47993;
    const double C64096 = C64087 + C64088;
    const double C32318 = C32311 + C32312;
    const double C32316 = C32307 + C32308;
    const double C77752 = C77748 + C77749;
    const double C94351 = C94344 + C94345;
    const double C94349 = C94340 + C94341;
    const double C16519 = C16513 + C16514;
    const double C16517 = C16509 + C16510;
    const double C49910 = C49904 + C49905;
    const double C49908 = C49900 + C49901;
    const double C64095 = C64084 + C64085;
    const double C18215 = C18207 + C18208;
    const double C23609 = C23605 + C23606;
    const double C51480 = C51472 + C51473;
    const double C56654 = C56650 + C56651;
    const double C70796 = C70789 + C70790;
    const double C35777 = C35772 + C35773;
    const double C35775 = C35768 + C35769;
    const double C81246 = C81241 + C81242;
    const double C97711 = C97706 + C97707;
    const double C97709 = C97702 + C97703;
    const double C130013 = C130011 + C130012;
    const double C256 =
        4 * (2 * C137562 - (ae * C137559) / C137336 + C137335 * C137590) +
        (((-3 * C137559) / C137082 + C137335 * C137588) * ae) / C137060 +
        C137335 *
            (3 * C137590 + (C137588 * ae) / C137060 +
             C137335 *
                 (2 * C137587 - (ae * C137580) / C137336 +
                  C137335 * ((-(ae * C137335 * C137573) / C137082) / C137060 -
                             C137570 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137542) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137573) / C137336))));
    const double C1017 =
        C137477 * (2 * C137562 - (ae * C137559) / C137336 + C137335 * C137590);
    const double C1018 =
        C137477 *
        (3 * C137590 + (C137588 * ae) / C137060 +
         C137335 * (2 * C137587 - (ae * C137580) / C137336 +
                    C137335 * ((-(ae * C137335 * C137573) / C137082) / C137060 -
                               C137570 / C137336 +
                               C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137542) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137573) / C137336))));
    const double C1885 =
        C137535 * (2 * C137562 - (ae * C137559) / C137336 + C137335 * C137590) -
        ((2 * C137369 + C137335 * C137408 + C137389 * ae) * ce) / C137336;
    const double C2751 = (-(ae * C137549) / C137082) / C137060 -
                         C137546 / C137336 + C137335 * C137562 +
                         C137590 * C137649;
    const double C2752 =
        2 * C137562 - (ae * C137559) / C137336 + C137335 * C137590 +
        (2 * C137587 - (ae * C137580) / C137336 +
         C137335 *
             ((-(ae * C137335 * C137573) / C137082) / C137060 -
              C137570 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                          C137082) /
                             C137060 -
                         (ae * C137573) / C137336))) *
            C137649;
    const double C3490 =
        2 * C137477 * C137590 +
        C137477 *
            (C137590 +
             ((-(ae * C137335 * C137573) / C137082) / C137060 -
              C137570 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                          C137082) /
                             C137060 -
                         (ae * C137573) / C137336)) *
                 C137649);
    const double C4083 =
        C137535 * C137477 * C137590 - (C137477 * C137408 * ce) / C137336;
    const double C4084 =
        C137535 *
            (C137590 +
             ((-(ae * C137335 * C137573) / C137082) / C137060 -
              C137570 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                          C137082) /
                             C137060 -
                         (ae * C137573) / C137336)) *
                 C137649) -
        ((C137408 + C137465 * C137649) * ce) / C137336;
    const double C4837 =
        (-(ae * C137549) / C137082) / C137060 - C137546 / C137336 +
        C137335 * C137562 - (C137535 * C137408 * ce) / C137336 +
        C137535 * (C137535 * C137590 - (C137408 * ce) / C137336);
    const double C5638 =
        C137477 * C137590 - (C137535 * C138100 * ce) / C137336 +
        C137535 *
            (C137535 * C137477 *
                 ((-(ae * C137335 * C137573) / C137082) / C137060 -
                  C137570 / C137336 +
                  C137335 *
                      ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137542) /
                        C137082) /
                           C137060 -
                       (ae * C137573) / C137336)) -
             (C138100 * ce) / C137336);
    const double C6288 =
        2 * (C137535 * C137590 - (C137408 * ce) / C137336) -
        ((C137408 + C137465 * C137771) * ce) / C137336 +
        C137535 *
            (C137590 - (C137535 * C137465 * ce) / C137336 +
             C137535 *
                 (C137535 * ((-(ae * C137335 * C137573) / C137082) / C137060 -
                             C137570 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137542) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137573) / C137336)) -
                  (C137465 * ce) / C137336));
    const double C37597 =
        3 * (C137562 - (C138402 * ce) / C137336 + C137535 * C138405) -
        ((2 * C138402 + C137535 * C138406) * ce) / C137336 +
        C137535 *
            (2 * C138405 - (C138406 * ce) / C137336 +
             C137535 *
                 (C137587 - (C137535 * C137455 * ce) / C137336 +
                  C137535 * (C137535 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137542) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137573) / C137336) -
                             (C137455 * ce) / C137336)));
    const double C17422 = C17419 + C17420;
    const double C50745 = C50742 + C50743;
    const double C65484 = C65480 + C65481;
    const double C18218 = C18213 + C18214;
    const double C51483 = C51478 + C51479;
    const double C70797 = C70794 + C70795;
    const double C20138 = C20135 + C20136;
    const double C53295 = C53292 + C53293;
    const double C81247 = C81243 + C81244;
    const double C37604 = C37600 + C37601;
    const double C99426 = C99422 + C99423;
    const double C128683 = C128681 + C128682;
    const double C130009 =
        4 * (2 * C138415 - (C138412 * ce) / C137336 + C137535 * C138800) -
        ((3 * C138412 + C137535 * C138797) * ce) / C137336 +
        C137535 *
            (3 * C138800 - (C138797 * ce) / C137336 +
             C137535 *
                 (2 * C138798 - (C138793 * ce) / C137336 +
                  C137535 * ((-(C137535 * C137439 * ce) / C137082) / C137060 -
                             C137570 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137542) /
                                         C137082) /
                                            C137060 -
                                        (C137439 * ce) / C137336))));
    const double C80554 = C80548 + C80549;
    const double C113214 = C113208 + C113209;
    const double C82510 = C82506 + C82507;
    const double C115074 = C115070 + C115071;
    const double C128213 = C128211 + C128212;
    const double C83278 = C83274 + C83275;
    const double C115812 = C115808 + C115809;
    const double C129613 = C129611 + C129612;
    const double C130185 = C130183 + C130184;
    const double C1316 = C1312 + C1313;
    const double C14001 = C13994 + C13995;
    const double C47439 = C47432 + C47433;
    const double C2183 = C2178 + C2179;
    const double C3029 = C3026 + C3027;
    const double C14913 = C14908 + C14909;
    const double C48345 = C48340 + C48341;
    const double C8660 = C8657 + C8658;
    const double C15880 = C15875 + C15876;
    const double C49275 = C49270 + C49271;
    const double C5115 = C5112 + C5113;
    const double C66277 =
        4 * (2 * C138281 - (ae * C138278) / C137336 + C137477 * C138613) +
        (((-3 * C138278) / C137082 + C137477 * C138611) * ae) / C137060 +
        C137477 *
            (3 * C138613 + (C138611 * ae) / C137060 +
             C137477 *
                 (2 * C138610 - (ae * C138602) / C137336 +
                  C137477 * ((-(ae * C137477 * C137573) / C137082) / C137060 -
                             C137686 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137676) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137573) / C137336))));
    const double C66967 =
        3 * (C138325 - (ae * C138386) / C137336 + C137477 * C138677) +
        ((C137535 * C138611 - (C138578 * ce) / C137082) * ae) / C137060 +
        C137477 *
            (2 * C138677 - (ae * (C137535 * C138602 + C138570)) / C137336 +
             C137477 *
                 (C138675 -
                  (ae * (C137535 * C137477 * C137573 + C138563)) / C137336 +
                  C137477 * (C137477 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137676) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336) -
                             (ae * (C137535 * C137573 + C137428)) / C137336)));
    const double C68379 =
        2 * (C137477 * C138699 - (ae * C138482) / C137336) -
        (ae * (C137535 * (C137535 * C138602 + C138570) + C138278 +
               C137535 * C138564 * ce)) /
            C137336 +
        C137477 *
            (C138699 -
             (ae * (C137535 * (C137535 * C137477 * C137573 + C138563) +
                    C138381 + C137535 * C138552 * ce)) /
                 C137336 +
             C137477 *
                 (C137477 * ((-(C137535 * C137630 * ce) / C137082) / C137060 -
                             C137686 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137676) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336)) -
                  (ae * (C137535 * (C137535 * C137573 + C137428) + C137555 +
                         C137535 * C137415 * ce)) /
                      C137336));
    const double C68937 =
        2 * C138325 - (C138423 * ce) / C137336 + C137535 * C138699 +
        (((-2 * C138386) / C137082 -
          (C137535 * (C137535 * (C137535 * C137477 * C137573 + C138563) +
                      C138381 + C137535 * C138552 * ce)) /
              C137082 -
          ((C138220 + C138552 * C137771) * ce) / C137082) *
         ae) /
            C137060 +
        C137477 *
            ((((-2 * C138470) / C137082 -
               (C137535 * (C137535 * (C137535 * C137573 + C137428) + C137555 +
                           C137535 * C137415 * ce)) /
                   C137082 -
               ((C137373 + C137415 * C137771) * ce) / C137082) *
              ae) /
                 C137060 +
             C137477 *
                 (2 * C138675 - ((C137612 + C137630 * C137771) * ce) / C137336 +
                  C137535 * ((-(C137535 * C137630 * ce) / C137082) / C137060 -
                             C137686 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137676) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336))));
    const double C83272 =
        (((-3 * C138482) / C137082 +
          C137535 * ((-2 * C138470) / C137082 -
                     (C137535 * (C137535 * (C137535 * C137573 + C137428) +
                                 C137555 + C137535 * C137415 * ce)) /
                         C137082 -
                     (C138736 * ce) / C137082) -
          ((2 * C138465 + C137535 * C138736) * ce) / C137082) *
         ae) /
            C137060 +
        C137477 *
            (3 * C138699 - ((2 * C138655 + C137535 * C138737) * ce) / C137336 +
             C137535 *
                 (2 * C138675 - (C138737 * ce) / C137336 +
                  C137535 * ((-(C137535 * C137630 * ce) / C137082) / C137060 -
                             C137686 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137676) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336))));
    const double C130181 =
        4 * (2 * C138325 - (C138423 * ce) / C137336 + C137535 * C138699) -
        ((3 * C138423 + C137535 * C138806) * ce) / C137336 +
        C137535 *
            (3 * C138699 - (C138806 * ce) / C137336 +
             C137535 *
                 (2 * C138675 - (C138737 * ce) / C137336 +
                  C137535 * ((-(C137535 * C137630 * ce) / C137082) / C137060 -
                             C137686 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137676) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336))));
    const double C591 = C582 + C583;
    const double C1421 = C1412 + C1413;
    const double C31732 = C31723 + C31724;
    const double C93765 = C93756 + C93757;
    const double C2289 = C2280 + C2281;
    const double C30846 = C30829 + C30830;
    const double C32771 = C32762 + C32763;
    const double C92883 = C92866 + C92867;
    const double C94767 = C94758 + C94759;
    const double C3123 = C3116 + C3117;
    const double C33709 = C33704 + C33705;
    const double C95685 = C95680 + C95681;
    const double C8772 = C8765 + C8766;
    const double C31728 = C31715 + C31716;
    const double C40761 = C40756 + C40757;
    const double C93761 = C93748 + C93749;
    const double C102509 = C102504 + C102505;
    const double C5209 = C5202 + C5203;
    const double C32767 = C32754 + C32755;
    const double C36233 = C36228 + C36229;
    const double C94763 = C94750 + C94751;
    const double C98115 = C98110 + C98111;
    const double C566 =
        4 * (2 * C137720 - (C137717 * ce) / C137336 + C137335 * C137746) -
        ((3 * C137717 + C137335 * C137743) * ce) / C137336 +
        C137335 *
            (3 * C137746 - (C137743 * ce) / C137336 +
             C137335 *
                 (2 * C137744 - (C137737 * ce) / C137336 +
                  C137335 * ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                             C137728 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137700) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336))));
    const double C1403 =
        C137477 * (2 * C137720 - (C137717 * ce) / C137336 + C137335 * C137746);
    const double C1404 =
        C137477 *
        (3 * C137746 - (C137743 * ce) / C137336 +
         C137335 * (2 * C137744 - (C137737 * ce) / C137336 +
                    C137335 * ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                               C137728 / C137336 +
                               C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137700) /
                                           C137082) /
                                              C137060 -
                                          (C137731 * ce) / C137336))));
    const double C2271 =
        (((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
          (C137389 * ce) / C137082) *
         ae) /
            C137060 +
        C137535 * (2 * C137720 - (C137717 * ce) / C137336 + C137335 * C137746);
    const double C3111 = (-(C137707 * ce) / C137082) / C137060 -
                         C137704 / C137336 + C137335 * C137720 +
                         C137746 * C137649;
    const double C3112 =
        2 * C137720 - (C137717 * ce) / C137336 + C137335 * C137746 +
        (2 * C137744 - (C137737 * ce) / C137336 +
         C137335 *
             ((-(C137335 * C137731 * ce) / C137082) / C137060 -
              C137728 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                          C137082) /
                             C137060 -
                         (C137731 * ce) / C137336))) *
            C137649;
    const double C3708 =
        2 * C137477 * C137746 +
        C137477 *
            (C137746 +
             ((-(C137335 * C137731 * ce) / C137082) / C137060 -
              C137728 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                          C137082) /
                             C137060 -
                         (C137731 * ce) / C137336)) *
                 C137649);
    const double C4415 =
        C137535 * C137477 * C137746 - (ae * C137477 * C137407) / C137336;
    const double C4416 =
        C137535 *
            (C137746 +
             ((-(C137335 * C137731 * ce) / C137082) / C137060 -
              C137728 / C137336 +
              C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                          C137082) /
                             C137060 -
                         (C137731 * ce) / C137336)) *
                 C137649) -
        (ae * (C137464 * C137649 + C137407)) / C137336;
    const double C5197 =
        (-(C137707 * ce) / C137082) / C137060 - C137704 / C137336 +
        C137335 * C137720 - (ae * C137535 * C137407) / C137336 +
        C137535 * (C137535 * C137746 - (ae * C137407) / C137336);
    const double C5952 =
        C137477 * C137746 - (ae * C137535 * C138115) / C137336 +
        C137535 *
            (C137535 * C137477 *
                 ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                  C137728 / C137336 +
                  C137335 *
                      ((-(C137335 * std::pow(C137339, 7) * bs[7] * C137700) /
                        C137082) /
                           C137060 -
                       (C137731 * ce) / C137336)) -
             (ae * C138115) / C137336);
    const double C6506 =
        2 * (C137535 * C137746 - (ae * C137407) / C137336) -
        (ae * (C137464 * C137771 + C137407)) / C137336 +
        C137535 *
            (C137746 - (ae * C137535 * C137464) / C137336 +
             C137535 *
                 (C137535 * ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                             C137728 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137700) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336)) -
                  (ae * C137464) / C137336));
    const double C37897 =
        3 * (C137720 - (ae * C138429) / C137336 + C137535 * C138432) +
        (((-2 * C138429) / C137082 - (C137535 * C138433) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C138432 - (ae * C138433) / C137336 +
             C137535 *
                 (C137744 - (ae * C137535 * C137452) / C137336 +
                  C137535 * (C137535 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137700) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336) -
                             (ae * C137452) / C137336)));
    const double C16962 = C16957 + C16958;
    const double C18642 = C18635 + C18636;
    const double C33708 = C33702 + C33703;
    const double C95684 = C95678 + C95679;
    const double C19594 = C19591 + C19592;
    const double C40760 = C40754 + C40755;
    const double C102508 = C102502 + C102503;
    const double C36232 = C36226 + C36227;
    const double C98114 = C98108 + C98109;
    const double C130236 =
        4 * (2 * C138442 - (ae * C138439) / C137336 + C137535 * C138825) +
        (((-3 * C138439) / C137082 + C137535 * C138823) * ae) / C137060 +
        C137535 *
            (3 * C138825 + (C138823 * ae) / C137060 +
             C137535 *
                 (2 * C138822 - (ae * C138815) / C137336 +
                  C137535 * ((-(ae * C137535 * C137436) / C137082) / C137060 -
                             C137728 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137700) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137436) / C137336))));
    const double C66396 = C66394 + C66395;
    const double C67132 = C67130 + C67131;
    const double C79821 = C79817 + C79818;
    const double C112506 = C112502 + C112503;
    const double C68542 = C68540 + C68541;
    const double C80786 = C80780 + C80781;
    const double C113446 = C113440 + C113441;
    const double C82724 = C82720 + C82721;
    const double C115288 = C115284 + C115285;
    const double C1521 = C1516 + C1517;
    const double C2382 = C2378 + C2379;
    const double C30934 = C30927 + C30928;
    const double C92971 = C92964 + C92965;
    const double C3219 = C3216 + C3217;
    const double C8885 = C8882 + C8883;
    const double C31842 = C31837 + C31838;
    const double C93875 = C93870 + C93871;
    const double C5297 = C5294 + C5295;
    const double C32881 = C32876 + C32877;
    const double C94877 = C94872 + C94873;
    const double C66392 =
        4 * (2 * C138291 - (C138288 * ce) / C137336 + C137477 * C138637) -
        ((3 * C138288 + C137477 * C138633) * ce) / C137336 +
        C137477 *
            (3 * C138637 - (C138633 * ce) / C137336 +
             C137477 *
                 (2 * C138635 - (C138627 * ce) / C137336 +
                  C137477 * ((-(C137477 * C137731 * ce) / C137082) / C137060 -
                             C137762 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137752) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336))));
    const double C69040 =
        2 * (C137535 * C138637 - (ae * C138237) / C137336) -
        (ae * (C138582 * C137771 + C138237)) / C137336 +
        C137535 *
            (C138637 - (ae * C137535 * C138582) / C137336 +
             C137535 *
                 (C137535 * ((-(C137477 * C137731 * ce) / C137082) / C137060 -
                             C137762 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137752) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336)) -
                  (ae * C138582) / C137336));
    const double C83413 =
        3 * (C138291 - (ae * C138750) / C137336 + C137535 * C138754) +
        (((-2 * C138750) / C137082 - (C137535 * C138755) / C137082) * ae) /
            C137060 +
        C137535 *
            (2 * C138754 - (ae * C138755) / C137336 +
             C137535 *
                 (C138635 - (ae * C137535 * C138562) / C137336 +
                  C137535 * (C137535 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137752) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336) -
                             (ae * C138562) / C137336)));
    const double C130287 =
        4 * (2 * C138460 - (ae * C138457) / C137336 + C137535 * C138844) +
        (((-3 * C138457) / C137082 + C137535 * C138842) * ae) / C137060 +
        C137535 *
            (3 * C138844 + (C138842 * ae) / C137060 +
             C137535 *
                 (2 * C138841 - (ae * C138834) / C137336 +
                  C137535 * ((-(ae * C137535 * C137515) / C137082) / C137060 -
                             C137762 / C137336 +
                             C137535 * ((-(C137535 * std::pow(C137339, 7) *
                                           bs[7] * C137752) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137515) / C137336))));
    const double C129294 = C129293 * C139448;
    const double C16953 = C3122 * C137108;
    const double C16941 = C1418 * C137108;
    const double C16937 = C15026 * C137108;
    const double C16964 = C16960 * C137108;
    const double C28307 = C8771 * C137108;
    const double C28303 = C18638 * C137108;
    const double C35892 = C4930 * C137108;
    const double C35880 = C1984 * C137108;
    const double C35876 = C32431 * C137108;
    const double C35903 = C35899 * C137108;
    const double C44538 = C8433 * C137108;
    const double C44534 = C34920 * C137108;
    const double C65298 = C63890 * C137108;
    const double C65294 = C63884 * C137108;
    const double C65318 = C65313 * C137108;
    const double C65786 = C17713 * C137108;
    const double C73726 = C66546 * C137108;
    const double C73722 = C66548 * C137108;
    const double C74318 = C18639 * C137108;
    const double C81011 = C67971 * C137108;
    const double C80996 = C77515 * C137108;
    const double C81022 = C81016 * C137108;
    const double C128514 = C82904 * C137108;
    const double C128761 = C37682 * C137108;
    const double C135201 = C36846 * C137108;
    const double C103 =
        ((((0 - (C137080 * C137081) / C137082) * ce) / C137082 -
          (0 * de) / C137091 + C137083 / C137082) /
             C137087 -
         ((C137080 * C137104 + 0) * de) / C137082) /
            C137087 -
        ((C137080 * (C137104 / C137087 -
                     ((C137080 * C137108 + C139562) * de) / C137082 + C137101) +
          C139601) *
         de) /
            C137082 +
        C137108 / C137087 - ((C137080 * C137101 + C139308) * de) / C137082;
    const double C104 =
        (C137104 / C137087 - ((C137080 * C137108 + C139562) * de) / C137082 +
         C137101) /
            C137087 -
        ((C137080 * (C137108 / C137087 -
                     ((C137080 * C137101 + C139308) * de) / C137082) +
          C139590) *
         de) /
            C137082 +
        2 * (C137101 / C137087 - (0 * de) / C137082);
    const double C105 =
        (C137108 / C137087 - ((C137080 * C137101 + C139308) * de) / C137082) /
            C137087 -
        ((C137080 * (C137101 / C137087 - (0 * de) / C137082) + C6691) * de) /
            C137082;
    const double C6694 = C137104 / C137087 -
                         ((C137080 * C137108 + C139562) * de) / C137082 +
                         C137101;
    const double C6695 =
        C137108 / C137087 - ((C137080 * C137101 + C139308) * de) / C137082;
    const double C70315 = C70310 - C22987;
    const double C134435 = C134430 - C43508;
    const double C69864 = C69863 - C69857;
    const double C85393 = C70580 - C85387;
    const double C85392 = C85386 - C70580;
    const double C134205 = C134200 - C88628;
    const double C3427 =
        ((((0 - (C137135 * C137170) / C137082) * ce) / C137082 -
          (0 * de) / C137091 + C137154 / C137082) /
             C137087 -
         ((C137135 * C137187 + 0) * de) / C137082) /
            C137087 -
        ((C137135 * (C137187 / C137087 -
                     ((C137135 * C137188 + C139570) * de) / C137082 + C137182) +
          C139602) *
         de) /
            C137082 +
        C137188 / C137087 - ((C137135 * C137182 + C139360) * de) / C137082;
    const double C3428 =
        (C137187 / C137087 - ((C137135 * C137188 + C139570) * de) / C137082 +
         C137182) /
            C137087 -
        ((C137135 * (C137188 / C137087 -
                     ((C137135 * C137182 + C139360) * de) / C137082) +
          C139593) *
         de) /
            C137082 +
        2 * (C137182 / C137087 - (0 * de) / C137082);
    const double C3429 =
        (C137188 / C137087 - ((C137135 * C137182 + C139360) * de) / C137082) /
            C137087 -
        ((C137135 * (C137182 / C137087 - (0 * de) / C137082) + C7400) * de) /
            C137082;
    const double C7477 = C137187 / C137087 -
                         ((C137135 * C137188 + C139570) * de) / C137082 +
                         C137182;
    const double C7478 =
        C137188 / C137087 - ((C137135 * C137182 + C139360) * de) / C137082;
    const double C7009 = C7008 - C7002;
    const double C7247 = C7246 - C7240;
    const double C40483 = C8536 - C40477;
    const double C40482 = C40476 - C8536;
    const double C136754 = C136749 - C46568;
    const double C136524 = C136519 - C91686;
    const double C6281 =
        ((((0 - (C137142 * C137215) / C137082) * ce) / C137082 -
          (0 * de) / C137091 + C137201 / C137082) /
             C137087 -
         ((C137142 * C137232 + 0) * de) / C137082) /
            C137087 -
        ((C137142 * (C137232 / C137087 -
                     ((C137142 * C137233 + C139571) * de) / C137082 + C137227) +
          C139603) *
         de) /
            C137082 +
        C137233 / C137087 - ((C137142 * C137227 + C139384) * de) / C137082;
    const double C6282 =
        (C137232 / C137087 - ((C137142 * C137233 + C139571) * de) / C137082 +
         C137227) /
            C137087 -
        ((C137142 * (C137233 / C137087 -
                     ((C137142 * C137227 + C139384) * de) / C137082) +
          C139596) *
         de) /
            C137082 +
        2 * (C137227 / C137087 - (0 * de) / C137082);
    const double C6283 =
        (C137233 / C137087 - ((C137142 * C137227 + C139384) * de) / C137082) /
            C137087 -
        ((C137142 * (C137227 / C137087 - (0 * de) / C137082) + C10691) * de) /
            C137082;
    const double C10840 = C137232 / C137087 -
                          ((C137142 * C137233 + C139571) * de) / C137082 +
                          C137227;
    const double C10841 =
        C137233 / C137087 - ((C137142 * C137227 + C139384) * de) / C137082;
    const double C9462 = C9461 - C9455;
    const double C9700 = C9699 - C9693;
    const double C26500 = C10608 - C26494;
    const double C26499 = C26493 - C10608;
    const double C75194 = C75189 - C29451;
    const double C74743 = C74738 - C72358;
    const double C42591 = C42589 + C10195;
    const double C42590 = C42588 - C10195;
    const double C129535 = C129533 - C36968;
    const double C24432 = C24430 + C8999;
    const double C24431 = C24429 - C8999;
    const double C67216 = C67214 - C18877;
    const double C63906 = C63894 * C828;
    const double C64089 = C63894 * C244;
    const double C69177 = C63894 * C6696;
    const double C76583 = C76581 * C828;
    const double C76788 = C76581 * C244;
    const double C77638 = C76581 * C181;
    const double C83584 = C76581 * C6696;
    const double C126020 = C126018 * C828;
    const double C126096 = C126018 * C181;
    const double C132640 = C126018 * C6696;
    const double C63907 = C63895 * C823;
    const double C69178 = C63895 * C6691;
    const double C76584 = C76582 * C823;
    const double C83585 = C76582 * C6691;
    const double C126021 = C126019 * C823;
    const double C132641 = C126019 * C6691;
    const double C137469 = C137456 + C137466;
    const double C129211 = C81958 * C139448;
    const double C934 =
        C137477 *
            (3 * C137532 + (C137530 * ae) / C137060 +
             C137335 *
                 (2 * C137529 - (ae * C137522) / C137336 +
                  C137335 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                             C137512 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137484) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137515) / C137336)))) -
        ((3 * C137408 + C137335 * C137473 + C137454 * ae) * ce) / C137336;
    const double C1886 =
        C137535 *
            (3 * C137590 + (C137588 * ae) / C137060 +
             C137335 *
                 (2 * C137587 - (ae * C137580) / C137336 +
                  C137335 * ((-(ae * C137335 * C137573) / C137082) / C137060 -
                             C137570 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137542) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137573) / C137336)))) -
        ((3 * C137408 + C137335 * C137473 + C137454 * ae) * ce) / C137336;
    const double C2670 =
        2 * C137504 - (ae * C137501) / C137336 + C137335 * C137532 -
        (C137477 * C137473 * ce) / C137336 +
        C137477 *
            (C137477 *
                 (2 * C137529 - (ae * C137522) / C137336 +
                  C137335 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                             C137512 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137484) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137515) / C137336))) -
             (C137473 * ce) / C137336);
    const double C4838 =
        2 * C137562 - (ae * C137559) / C137336 + C137335 * C137590 -
        (C137535 * C137473 * ce) / C137336 +
        C137535 *
            (C137535 *
                 (2 * C137587 - (ae * C137580) / C137336 +
                  C137335 * ((-(ae * C137335 * C137573) / C137082) / C137060 -
                             C137570 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137542) /
                                         C137082) /
                                            C137060 -
                                        (ae * C137573) / C137336))) -
             (C137473 * ce) / C137336);
    const double C8223 =
        C137535 *
        (C137477 * (2 * C137529 - (ae * C137522) / C137336 +
                    C137335 * ((-(ae * C137335 * C137515) / C137082) / C137060 -
                               C137512 / C137336 +
                               C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                             bs[7] * C137484) /
                                           C137082) /
                                              C137060 -
                                          (ae * C137515) / C137336))) -
         (C137473 * ce) / C137336);
    const double C8323 =
        C137535 * C137477 *
            (2 * C137587 - (ae * C137580) / C137336 +
             C137335 * ((-(ae * C137335 * C137573) / C137082) / C137060 -
                        C137570 / C137336 +
                        C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] *
                                      C137542) /
                                    C137082) /
                                       C137060 -
                                   (ae * C137573) / C137336))) -
        (C137477 * C137473 * ce) / C137336;
    const double C123 =
        (4 * (2 * C137369 + C137335 * C137408 + C137389 * ae) +
         C137335 * (3 * C137408 + C137335 * C137473 + C137454 * ae) +
         (3 * C137389 + C137335 * C137454) * ae) /
        C137060;
    const double C842 =
        (C137477 * (3 * C137408 + C137335 * C137473 + C137454 * ae)) / C137060;
    const double C1710 =
        (C137535 * (3 * C137408 + C137335 * C137473 + C137454 * ae)) / C137060;
    const double C2580 =
        (2 * C137369 + C137335 * C137408 + C137389 * ae + C137473 * C137649) /
        C137060;
    const double C4666 =
        (2 * C137369 + C137335 * C137408 + C137389 * ae + C137473 * C137771) /
        C137060;
    const double C8121 = (C137535 * C137477 * C137473) / C137060;
    const double C66174 =
        (4 * (2 * C137969 + C137477 * C138238 + C138227 * ae) +
         C137477 * (3 * C138238 + C137477 * C138592 + C138578 * ae) +
         (3 * C138227 + C137477 * C138578) * ae) /
        C137060;
    const double C66816 =
        (C137535 * (3 * C138238 + C137477 * C138592 + C138578 * ae)) / C137060;
    const double C68228 =
        (2 * C137969 + C137477 * C138238 + C138227 * ae + C138592 * C137771) /
        C137060;
    const double C130235 =
        (4 * (2 * C138161 + C137535 * C138483 + C138472 * ae) +
         C137535 * (3 * C138483 + C137535 * C138889 + C138867 * ae) +
         (3 * C138472 + C137535 * C138867) * ae) /
        C137060;
    const double C137474 = C137472 - C137453;
    const double C138593 = C138591 - C138577;
    const double C138890 = C138888 - C138866;
    const double C17266 = C139587 * C3375;
    const double C50597 = C139587 * C3375;
    const double C65309 = C139289 * C3375;
    const double C17982 = C139587 * C3913;
    const double C51255 = C139587 * C3913;
    const double C70575 = C139289 * C3913;
    const double C66005 = C139289 * C17257;
    const double C66544 = C139289 * C17965;
    const double C67970 = C139289 * C19909;
    const double C37449 = C139587 * C6173;
    const double C99279 = C139587 * C6173;
    const double C128516 = C139289 * C6173;
    const double C129894 = C139289 * C37440;
    const double C1215 = C139448 * C1198;
    const double C13911 = C139598 * C1198;
    const double C47349 = C139598 * C1198;
    const double C2077 = C139448 * C2065;
    const double C2939 = C139448 * C2923;
    const double C14799 = C139598 * C2923;
    const double C48231 = C139598 * C2923;
    const double C8545 = C139448 * C4251;
    const double C15766 = C139598 * C4251;
    const double C49161 = C139598 * C4251;
    const double C5017 = C139448 * C5009;
    const double C1614 = C139463 * C1603;
    const double C2480 = C139463 * C2463;
    const double C31012 = C139600 * C2463;
    const double C93049 = C139600 * C2463;
    const double C3305 = C139463 * C3297;
    const double C8996 = C139463 * C4575;
    const double C31948 = C139600 * C4575;
    const double C93981 = C139600 * C4575;
    const double C5391 = C139463 * C5375;
    const double C32987 = C139600 * C5375;
    const double C94983 = C139600 * C5375;
    const double C128136 = C128135 * C2567;
    const double C136074 = C128135 * C7400;
    const double C138588 = C138584 + C138585;
    const double C138885 = C138878 + C138882;
    const double C128052 = C128050 * C3364;
    const double C128132 = C128050 * C2662;
    const double C136073 = C128050 * C7479;
    const double C77645 = C77642 * C139346;
    const double C77630 = C70686 * C139346;
    const double C85539 = C70686 * C6692;
    const double C85537 = C70686 * C139360;
    const double C87609 = C70686 * C139570;
    const double C87607 = C70686 * C139360;
    const double C81138 = C81135 * C139346;
    const double C131869 = C81135 * C6692;
    const double C133437 = C81135 * C139570;
    const double C80107 = C66642 * C2567;
    const double C90799 = C66642 * C7400;
    const double C82083 = C68060 * C139360;
    const double C91693 = C68060 * C139360;
    const double C127897 = C68060 * C2567;
    const double C135846 = C68060 * C7400;
    const double C82980 = C82086 * C139346;
    const double C129291 = C82086 * C139360;
    const double C136523 = C82086 * C139360;
    const double C14447 = C139587 * C933;
    const double C47879 = C139587 * C933;
    const double C32196 = C139587 * C1798;
    const double C94229 = C139587 * C1798;
    const double C16404 = C139587 * C2669;
    const double C49795 = C139587 * C2669;
    const double C63993 = C139289 * C2669;
    const double C23470 = C139587 * C3997;
    const double C56515 = C139587 * C3997;
    const double C76684 = C139289 * C3997;
    const double C35659 = C139587 * C4752;
    const double C97593 = C139587 * C4752;
    const double C126098 = C139289 * C4752;
    const double C85541 = C70687 * C139360;
    const double C87611 = C70687 * C139360;
    const double C81139 = C81136 * C139346;
    const double C131871 = C81136 * C139360;
    const double C133439 = C81136 * C139360;
    const double C128606 = C128605 * C139346;
    const double C32428 = C1987 * C822;
    const double C32424 = C1987 * C823;
    const double C35883 = C1987 * C139308;
    const double C40333 = C1987 * C139308;
    const double C41435 = C1987 * C139590;
    const double C41431 = C1987 * C6691;
    const double C34913 = C8434 * C139303;
    const double C40339 = C8434 * C7396;
    const double C40337 = C8434 * C139308;
    const double C44537 = C8434 * C139562;
    const double C44535 = C8434 * C139308;
    const double C35891 = C4931 * C139562;
    const double C35889 = C4931 * C139308;
    const double C36834 = C4931 * C139303;
    const double C43513 = C4931 * C7396;
    const double C43511 = C4931 * C139308;
    const double C126255 = C4931 * C822;
    const double C132867 = C4931 * C139590;
    const double C1115 = C139448 * C1101;
    const double C13819 = C139598 * C1101;
    const double C47257 = C139598 * C1101;
    const double C1983 = C139448 * C1969;
    const double C2843 = C139448 * C2833;
    const double C14683 = C139598 * C2833;
    const double C48115 = C139598 * C2833;
    const double C8432 = C139448 * C4169;
    const double C15650 = C139598 * C4169;
    const double C49045 = C139598 * C4169;
    const double C4929 = C139448 * C4919;
    const double C34919 = C33389 * C139303;
    const double C36853 = C36849 * C139303;
    const double C132071 = C36849 * C139308;
    const double C135202 = C36849 * C139308;
    const double C37681 = C35901 * C139303;
    const double C128762 = C35901 * C139308;
    const double C134434 = C35901 * C139308;
    const double C64102 = C64096 * C139372;
    const double C64101 = C64095 * C139372;
    const double C70792 = C64095 * C139571;
    const double C72365 = C64095 * C9074;
    const double C70798 = C70796 * C139384;
    const double C72363 = C70796 * C139384;
    const double C76787 = C70796 * C139372;
    const double C85673 = C70796 * C139571;
    const double C87747 = C70796 * C9074;
    const double C14565 = C139587 * C1017;
    const double C47997 = C139587 * C1017;
    const double C32310 = C139587 * C1885;
    const double C94343 = C139587 * C1885;
    const double C16516 = C139587 * C2751;
    const double C49907 = C139587 * C2751;
    const double C64091 = C139289 * C2751;
    const double C23608 = C139587 * C4083;
    const double C56653 = C139587 * C4083;
    const double C76790 = C139289 * C4083;
    const double C35771 = C139587 * C4837;
    const double C97705 = C139587 * C4837;
    const double C126176 = C139289 * C4837;
    const double C65486 = C65484 * C139372;
    const double C70799 = C70797 * C139384;
    const double C72367 = C70797 * C139384;
    const double C78662 = C70797 * C139372;
    const double C85675 = C81247 * C139384;
    const double C87749 = C81247 * C139384;
    const double C1319 = C1316 * C139372;
    const double C2187 = C2183 * C139384;
    const double C9460 = C2183 * C139384;
    const double C30746 = C2183 * C139372;
    const double C3031 = C3029 * C139372;
    const double C8662 = C8660 * C139384;
    const double C10305 = C8660 * C139384;
    const double C31610 = C8660 * C139372;
    const double C5117 = C5115 * C4655;
    const double C11077 = C5115 * C10691;
    const double C32648 = C5115 * C139384;
    const double C41641 = C5115 * C139384;
    const double C15023 = C1421 * C822;
    const double C15019 = C1421 * C823;
    const double C16944 = C1421 * C139308;
    const double C22086 = C1421 * C139590;
    const double C22082 = C1421 * C6691;
    const double C22986 = C1421 * C139308;
    const double C16952 = C3123 * C139562;
    const double C16950 = C3123 * C139308;
    const double C17703 = C3123 * C139303;
    const double C22992 = C3123 * C7396;
    const double C22990 = C3123 * C139308;
    const double C64403 = C3123 * C822;
    const double C69626 = C3123 * C139590;
    const double C18623 = C8772 * C139303;
    const double C24160 = C8772 * C7396;
    const double C24158 = C8772 * C139308;
    const double C28306 = C8772 * C139562;
    const double C28304 = C8772 * C139308;
    const double C1417 = C139463 * C1403;
    const double C2285 = C139463 * C2271;
    const double C30836 = C139600 * C2271;
    const double C92873 = C139600 * C2271;
    const double C3121 = C139463 * C3111;
    const double C8770 = C139463 * C4415;
    const double C31722 = C139600 * C4415;
    const double C93755 = C139600 * C4415;
    const double C5207 = C139463 * C5197;
    const double C32761 = C139600 * C5197;
    const double C94757 = C139600 * C5197;
    const double C17712 = C16962 * C139303;
    const double C65787 = C16962 * C139308;
    const double C70314 = C16962 * C139308;
    const double C18648 = C18642 * C139303;
    const double C71195 = C18642 * C139308;
    const double C74319 = C18642 * C139308;
    const double C20548 = C19594 * C139303;
    const double C1525 = C1521 * C139360;
    const double C7245 = C1521 * C139360;
    const double C14139 = C1521 * C139346;
    const double C2385 = C2382 * C139346;
    const double C3221 = C3219 * C2567;
    const double C7948 = C3219 * C7400;
    const double C15137 = C3219 * C139360;
    const double C22194 = C3219 * C139360;
    const double C8887 = C8885 * C139360;
    const double C10509 = C8885 * C139360;
    const double C16080 = C8885 * C139346;
    const double C5299 = C5297 * C139346;
    const double C65783 = C16964 + C16963;
    const double C128758 = C35903 + C35902;
    const double C65310 = C65298 + C65299;
    const double C89547 = C73721 + C73722;
    const double C89546 = C73722 + C73721;
    const double C128510 = C81022 + C81021;
    const double C22083 = C1418 * C6694;
    const double C22077 = C15026 * C6694;
    const double C41432 = C1984 * C6694;
    const double C41426 = C32431 * C6694;
    const double C69173 = C63890 * C6694;
    const double C69167 = C63884 * C6694;
    const double C69623 = C16960 * C6694;
    const double C83580 = C66548 * C6694;
    const double C86554 = C77515 * C6694;
    const double C132636 = C81016 * C6694;
    const double C132864 = C35899 * C6694;
    const double C22085 = C1420 * C6695;
    const double C22079 = C1418 * C6695;
    const double C41434 = C1986 * C6695;
    const double C41428 = C1984 * C6695;
    const double C69175 = C63892 * C6695;
    const double C69169 = C63886 * C6695;
    const double C69625 = C3122 * C6695;
    const double C83582 = C70576 * C6695;
    const double C86556 = C77517 * C6695;
    const double C132638 = C81014 * C6695;
    const double C132866 = C4930 * C6695;
    const double C69865 = C69864 - C69858;
    const double C85395 = C85393 + C70581;
    const double C85394 = C85392 - C70581;
    const double C134206 = C134205 - C88631;
    const double C7709 = C339 * C7477;
    const double C7703 = C337 * C7477;
    const double C7943 = C586 * C7477;
    const double C7937 = C584 * C7477;
    const double C23093 = C1418 * C7477;
    const double C39408 = C1984 * C7477;
    const double C45680 = C32431 * C7477;
    const double C90794 = C66548 * C7477;
    const double C90788 = C77515 * C7477;
    const double C135841 = C81016 * C7477;
    const double C136069 = C35899 * C7477;
    const double C7711 = C1118 * C7478;
    const double C7705 = C1116 * C7478;
    const double C7945 = C1420 * C7478;
    const double C7939 = C1418 * C7478;
    const double C23095 = C3122 * C7478;
    const double C39410 = C8433 * C7478;
    const double C45682 = C34920 * C7478;
    const double C90796 = C66546 * C7478;
    const double C90790 = C66548 * C7478;
    const double C135843 = C67971 * C7478;
    const double C136071 = C36846 * C7478;
    const double C7010 = C7009 - C7003;
    const double C7248 = C7247 - C7241;
    const double C40485 = C40483 + C8548;
    const double C40484 = C40482 - C8548;
    const double C136755 = C136754 - C46571;
    const double C136525 = C136524 - C91689;
    const double C11072 = C339 * C10840;
    const double C11066 = C337 * C10840;
    const double C11306 = C586 * C10840;
    const double C11300 = C584 * C10840;
    const double C27385 = C1418 * C10840;
    const double C30337 = C15026 * C10840;
    const double C43712 = C1984 * C10840;
    const double C75425 = C63890 * C10840;
    const double C75419 = C63884 * C10840;
    const double C75875 = C16960 * C10840;
    const double C91792 = C66548 * C10840;
    const double C11074 = C1986 * C10841;
    const double C11068 = C1984 * C10841;
    const double C11308 = C2288 * C10841;
    const double C11302 = C2286 * C10841;
    const double C27387 = C8771 * C10841;
    const double C30339 = C18638 * C10841;
    const double C43714 = C4930 * C10841;
    const double C75427 = C66546 * C10841;
    const double C75421 = C66548 * C10841;
    const double C75877 = C18639 * C10841;
    const double C91794 = C67971 * C10841;
    const double C9463 = C9462 - C9456;
    const double C9701 = C9700 - C9694;
    const double C26502 = C26500 + C10611;
    const double C26501 = C26499 - C10611;
    const double C75195 = C75194 - C29454;
    const double C74744 = C74743 - C72359;
    const double C67218 = C67216 * C139289;
    const double C130 =
        4 * (2 * C137406 - (ae * C137407) / C137336 - (C137408 * ce) / C137336 +
             C137335 * C137469) +
        (((-3 * C137407) / C137082 + C137335 * C137474 -
          (C137454 * ce) / C137082) *
         ae) /
            C137060 -
        ((3 * C137408 + C137335 * C137473 + C137454 * ae) * ce) / C137336 +
        C137335 *
            (3 * C137469 + (C137474 * ae) / C137060 - (C137473 * ce) / C137336 +
             C137335 *
                 (2 * C137463 - (ae * C137464) / C137336 -
                  (C137465 * ce) / C137336 +
                  C137335 *
                      ((-(ae * C137452) / C137082) / C137060 -
                       C137451 / C137336 - (C137455 * ce) / C137336 +
                       C137335 * ((-(C137439 * ce) / C137082) / C137060 -
                                  (ae * C137436) / C137336 -
                                  (C137335 *
                                   (C137416 * C137417 +
                                    C137343 * bs[7] * std::pow(C137339, 7)) *
                                   C137344) /
                                      C137336))));
    const double C848 =
        3 * ((-(ae * C137477 * C137398) / C137082) / C137060 -
             C137797 / C137336 - (C137477 * C137399 * ce) / C137336 +
             C137335 * C137811) +
        (C137477 * C137474 * ae) / C137060 -
        (C137477 * C137473 * ce) / C137336 +
        C137335 *
            (2 * C137811 - (ae * C137477 * C137464) / C137336 -
             (C137477 * C137465 * ce) / C137336 +
             C137335 *
                 ((-(ae * C137477 * C137452) / C137082) / C137060 -
                  C137801 / C137336 - (C137477 * C137455 * ce) / C137336 +
                  C137335 * ((-(C137477 * C137439 * ce) / C137082) / C137060 -
                             (ae * C137477 * C137436) / C137336 -
                             (C137335 * C137477 *
                              (C137416 * C137417 +
                               C137343 * bs[7] * std::pow(C137339, 7)) *
                              C137344) /
                                 C137336)));
    const double C1102 =
        (((-3 * C137407) / C137082 + C137335 * C137474 -
          (C137454 * ce) / C137082) *
         ae) /
            C137060 +
        C137477 *
            (3 * C137645 - (C137642 * ce) / C137336 +
             C137335 *
                 (2 * C137643 - (C137636 * ce) / C137336 +
                  C137335 * ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                             C137627 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137599) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336))));
    const double C1716 =
        3 * ((-(ae * C137535 * C137398) / C137082) / C137060 -
             C137856 / C137336 - (C137535 * C137399 * ce) / C137336 +
             C137335 * C137870) +
        (C137535 * C137474 * ae) / C137060 -
        (C137535 * C137473 * ce) / C137336 +
        C137335 *
            (2 * C137870 - (ae * C137535 * C137464) / C137336 -
             (C137535 * C137465 * ce) / C137336 +
             C137335 *
                 ((-(ae * C137535 * C137452) / C137082) / C137060 -
                  C137860 / C137336 - (C137535 * C137455 * ce) / C137336 +
                  C137335 * ((-(C137535 * C137439 * ce) / C137082) / C137060 -
                             (ae * C137535 * C137436) / C137336 -
                             (C137335 * C137535 *
                              (C137416 * C137417 +
                               C137343 * bs[7] * std::pow(C137339, 7)) *
                              C137344) /
                                 C137336)));
    const double C2272 =
        (((-3 * C137407) / C137082 + C137335 * C137474 -
          (C137454 * ce) / C137082) *
         ae) /
            C137060 +
        C137535 *
            (3 * C137746 - (C137743 * ce) / C137336 +
             C137335 *
                 (2 * C137744 - (C137737 * ce) / C137336 +
                  C137335 * ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                             C137728 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137700) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336))));
    const double C2834 =
        2 * C137619 - (C137616 * ce) / C137336 + C137335 * C137645 +
        (C137477 * C137474 * ae) / C137060 +
        C137477 *
            ((C137474 * ae) / C137060 +
             C137477 *
                 (2 * C137643 - (C137636 * ce) / C137336 +
                  C137335 * ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                             C137627 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137599) /
                                         C137082) /
                                            C137060 -
                                        (C137630 * ce) / C137336))));
    const double C5198 =
        2 * C137720 - (C137717 * ce) / C137336 + C137335 * C137746 +
        (C137535 * C137474 * ae) / C137060 +
        C137535 *
            ((C137474 * ae) / C137060 +
             C137535 *
                 (2 * C137744 - (C137737 * ce) / C137336 +
                  C137335 * ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                             C137728 / C137336 +
                             C137335 * ((-(C137335 * std::pow(C137339, 7) *
                                           bs[7] * C137700) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336))));
    const double C8423 =
        (C137535 * C137474 * ae) / C137060 +
        C137477 * C137535 *
            (2 * C137643 - (C137636 * ce) / C137336 +
             C137335 * ((-(C137335 * C137630 * ce) / C137082) / C137060 -
                        C137627 / C137336 +
                        C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] *
                                      C137599) /
                                    C137082) /
                                       C137060 -
                                   (C137630 * ce) / C137336)));
    const double C8761 =
        (C137477 * C137474 * ae) / C137060 +
        C137535 * C137477 *
            (2 * C137744 - (C137737 * ce) / C137336 +
             C137335 * ((-(C137335 * C137731 * ce) / C137082) / C137060 -
                        C137728 / C137336 +
                        C137335 * ((-(C137335 * std::pow(C137339, 7) * bs[7] *
                                      C137700) /
                                    C137082) /
                                       C137060 -
                                   (C137731 * ce) / C137336)));
    const double C124 =
        4 * ((-2 * C137368) / C137082 - (C137335 * C137407) / C137082 -
             (C137389 * ce) / C137082) +
        C137335 * ((-3 * C137407) / C137082 + C137335 * C137474 -
                   (C137454 * ce) / C137082) -
        ((3 * C137389 + C137335 * C137454) * ce) / C137082;
    const double C843 =
        C137477 * ((-3 * C137407) / C137082 + C137335 * C137474 -
                   (C137454 * ce) / C137082);
    const double C1711 =
        C137535 * ((-3 * C137407) / C137082 + C137335 * C137474 -
                   (C137454 * ce) / C137082);
    const double C2581 = (-2 * C137368) / C137082 -
                         (C137335 * C137407) / C137082 -
                         (C137389 * ce) / C137082 + C137474 * C137649;
    const double C4667 = (-2 * C137368) / C137082 -
                         (C137335 * C137407) / C137082 -
                         (C137389 * ce) / C137082 + C137474 * C137771;
    const double C8122 = C137535 * C137477 * C137474;
    const double C66892 =
        3 * ((-(ae * C137535 * C138225) / C137082) / C137060 -
             C138317 / C137336 - (C137535 * C138228 * ce) / C137336 +
             C137477 * C138667) +
        (C137535 * C138593 * ae) / C137060 -
        (C137535 * C138592 * ce) / C137336 +
        C137477 *
            (2 * C138667 - (ae * C137535 * C138582) / C137336 -
             (C137535 * C138583 * ce) / C137336 +
             C137477 *
                 ((-(ae * C137535 * C138562) / C137082) / C137060 -
                  C138657 / C137336 - (C137535 * C138565 * ce) / C137336 +
                  C137477 * ((-(C137535 * C137630 * ce) / C137082) / C137060 -
                             (ae * C137535 * C137515) / C137336 -
                             (C137477 * C137535 *
                              (C137416 * C137417 +
                               C137649 * bs[7] * std::pow(C137339, 7)) *
                              C137344) /
                                 C137336)));
    const double C67128 =
        (((-3 * C138237) / C137082 + C137477 * C138593 -
          (C138578 * ce) / C137082) *
         ae) /
            C137060 +
        C137535 *
            (3 * C138637 - (C138633 * ce) / C137336 +
             C137477 *
                 (2 * C138635 - (C138627 * ce) / C137336 +
                  C137477 * ((-(C137477 * C137731 * ce) / C137082) / C137060 -
                             C137762 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137752) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336))));
    const double C68538 =
        2 * C138291 - (C138288 * ce) / C137336 + C137477 * C138637 +
        (C137535 * C138593 * ae) / C137060 +
        C137535 *
            ((C138593 * ae) / C137060 +
             C137535 *
                 (2 * C138635 - (C138627 * ce) / C137336 +
                  C137477 * ((-(C137477 * C137731 * ce) / C137082) / C137060 -
                             C137762 / C137336 +
                             C137477 * ((-(C137477 * std::pow(C137339, 7) *
                                           bs[7] * C137752) /
                                         C137082) /
                                            C137060 -
                                        (C137731 * ce) / C137336))));
    const double C66061 =
        4 * ((-2 * C137968) / C137082 - (C137477 * C138237) / C137082 -
             (C138227 * ce) / C137082) +
        C137477 * ((-3 * C138237) / C137082 + C137477 * C138593 -
                   (C138578 * ce) / C137082) -
        ((3 * C138227 + C137477 * C138578) * ce) / C137082;
    const double C66631 =
        C137535 * ((-3 * C138237) / C137082 + C137477 * C138593 -
                   (C138578 * ce) / C137082);
    const double C68052 = (-2 * C137968) / C137082 -
                          (C137477 * C138237) / C137082 -
                          (C138227 * ce) / C137082 + C138593 * C137771;
    const double C130008 =
        4 * ((-2 * C138160) / C137082 - (C137535 * C138482) / C137082 -
             (C138472 * ce) / C137082) +
        C137535 * ((-3 * C138482) / C137082 + C137535 * C138890 -
                   (C138867 * ce) / C137082) -
        ((3 * C138472 + C137535 * C138867) * ce) / C137082;
    const double C17270 = C17265 + C17266;
    const double C50601 = C50596 + C50597;
    const double C65314 = C65308 + C65309;
    const double C17990 = C17981 + C17982;
    const double C51263 = C51254 + C51255;
    const double C70579 = C70574 + C70575;
    const double C66009 = C66004 + C66005;
    const double C66550 = C66543 + C66544;
    const double C67974 = C67969 + C67970;
    const double C37453 = C37448 + C37449;
    const double C99283 = C99278 + C99279;
    const double C128519 = C128515 + C128516;
    const double C129897 = C129893 + C129894;
    const double C1219 = C1214 + C1215;
    const double C13917 = C13910 + C13911;
    const double C47355 = C47348 + C47349;
    const double C2080 = C2076 + C2077;
    const double C2941 = C2938 + C2939;
    const double C14803 = C14798 + C14799;
    const double C48235 = C48230 + C48231;
    const double C8547 = C8544 + C8545;
    const double C15770 = C15765 + C15766;
    const double C49165 = C49160 + C49161;
    const double C5019 = C5016 + C5017;
    const double C1617 = C1613 + C1614;
    const double C2484 = C2479 + C2480;
    const double C31018 = C31011 + C31012;
    const double C93055 = C93048 + C93049;
    const double C3307 = C3304 + C3305;
    const double C8998 = C8995 + C8996;
    const double C31952 = C31947 + C31948;
    const double C93985 = C93980 + C93981;
    const double C5393 = C5390 + C5391;
    const double C32991 = C32986 + C32987;
    const double C94987 = C94982 + C94983;
    const double C66226 =
        4 * (2 * C138236 - (ae * C138237) / C137336 - (C138238 * ce) / C137336 +
             C137477 * C138588) +
        (((-3 * C138237) / C137082 + C137477 * C138593 -
          (C138578 * ce) / C137082) *
         ae) /
            C137060 -
        ((3 * C138238 + C137477 * C138592 + C138578 * ae) * ce) / C137336 +
        C137477 *
            (3 * C138588 + (C138593 * ae) / C137060 - (C138592 * ce) / C137336 +
             C137477 *
                 (2 * C138581 - (ae * C138582) / C137336 -
                  (C138583 * ce) / C137336 +
                  C137477 *
                      ((-(ae * C138562) / C137082) / C137060 -
                       C137665 / C137336 - (C138565 * ce) / C137336 +
                       C137477 * ((-(C137630 * ce) / C137082) / C137060 -
                                  (ae * C137515) / C137336 -
                                  (C137477 *
                                   (C137416 * C137417 +
                                    C137649 * bs[7] * std::pow(C137339, 7)) *
                                   C137344) /
                                      C137336))));
    const double C130338 =
        4 * (2 * C138481 - (ae * C138482) / C137336 - (C138483 * ce) / C137336 +
             C137535 * C138885) +
        (((-3 * C138482) / C137082 + C137535 * C138890 -
          (C138867 * ce) / C137082) *
         ae) /
            C137060 -
        ((3 * C138483 + C137535 * C138889 + C138867 * ae) * ce) / C137336 +
        C137535 *
            (3 * C138885 + (C138890 * ae) / C137060 - (C138889 * ce) / C137336 +
             C137535 *
                 (2 * C138879 - (ae * C138880) / C137336 -
                  (C138881 * ce) / C137336 +
                  C137535 *
                      ((-(ae * C138864) / C137082) / C137060 -
                       C137787 / C137336 - (C138868 * ce) / C137336 +
                       C137535 * ((-(C137731 * ce) / C137082) / C137060 -
                                  (ae * C137573) / C137336 -
                                  (C137535 *
                                   (C137416 * C137417 +
                                    C137771 * bs[7] * std::pow(C137339, 7)) *
                                   C137344) /
                                      C137336))));
    const double C128599 = C81138 + C81124;
    const double C14454 = C14446 + C14447;
    const double C47886 = C47878 + C47879;
    const double C32202 = C32195 + C32196;
    const double C94235 = C94228 + C94229;
    const double C16409 = C16403 + C16404;
    const double C49800 = C49794 + C49795;
    const double C63999 = C63992 + C63993;
    const double C23473 = C23469 + C23470;
    const double C56518 = C56514 + C56515;
    const double C76685 = C76683 + C76684;
    const double C35665 = C35658 + C35659;
    const double C97599 = C97592 + C97593;
    const double C126099 = C126097 + C126098;
    const double C134436 = C134435 - C43511;
    const double C1121 = C1114 + C1115;
    const double C13832 = C13818 + C13819;
    const double C47270 = C47256 + C47257;
    const double C1989 = C1982 + C1983;
    const double C2847 = C2842 + C2843;
    const double C14692 = C14682 + C14683;
    const double C48124 = C48114 + C48115;
    const double C8436 = C8431 + C8432;
    const double C15659 = C15649 + C15650;
    const double C49054 = C49044 + C49045;
    const double C4933 = C4928 + C4929;
    const double C65482 = C64101 + C64083;
    const double C14571 = C14564 + C14565;
    const double C48003 = C47996 + C47997;
    const double C32317 = C32309 + C32310;
    const double C94350 = C94342 + C94343;
    const double C16520 = C16515 + C16516;
    const double C49911 = C49906 + C49907;
    const double C64097 = C64090 + C64091;
    const double C23610 = C23607 + C23608;
    const double C56655 = C56652 + C56653;
    const double C76791 = C76789 + C76790;
    const double C35776 = C35770 + C35771;
    const double C97710 = C97704 + C97705;
    const double C126177 = C126175 + C126176;
    const double C70316 = C70315 - C22990;
    const double C1423 = C1416 + C1417;
    const double C2291 = C2284 + C2285;
    const double C30849 = C30835 + C30836;
    const double C92886 = C92872 + C92873;
    const double C3125 = C3120 + C3121;
    const double C8774 = C8769 + C8770;
    const double C31731 = C31721 + C31722;
    const double C93764 = C93754 + C93755;
    const double C5211 = C5206 + C5207;
    const double C32770 = C32760 + C32761;
    const double C94766 = C94756 + C94757;
    const double C65788 = C65783 - C16945;
    const double C128763 = C128758 - C35884;
    const double C65315 = C65310 - C65300;
    const double C89549 = C73720 - C89547;
    const double C89548 = C89546 - C73720;
    const double C128517 = C128510 - C81020;
    const double C134207 = C134206 * C139448;
    const double C7011 = C7010 * C139463;
    const double C136526 = C136525 * C139448;
    const double C9464 = C9463 * C139463;
    const double C75196 = C75195 * C139289;
    const double C65319 = C65314 * C139308;
    const double C69862 = C65314 * C139308;
    const double C70583 = C70579 * C139308;
    const double C73727 = C70579 * C139308;
    const double C66011 = C66009 * C139303;
    const double C66556 = C66550 * C139303;
    const double C67978 = C67974 * C139303;
    const double C128522 = C128519 * C139308;
    const double C134204 = C128519 * C139308;
    const double C129899 = C129897 * C139303;
    const double C1223 = C1219 * C139360;
    const double C7007 = C1219 * C139360;
    const double C2083 = C2080 * C139346;
    const double C2943 = C2941 * C2567;
    const double C7714 = C2941 * C7400;
    const double C8549 = C8547 * C139360;
    const double C10199 = C8547 * C139360;
    const double C5021 = C5019 * C139346;
    const double C1620 = C1617 * C139372;
    const double C2488 = C2484 * C139384;
    const double C9698 = C2484 * C139384;
    const double C3309 = C3307 * C139372;
    const double C9000 = C8998 * C139384;
    const double C10615 = C8998 * C139384;
    const double C5395 = C5393 * C4655;
    const double C11311 = C5393 * C10691;
    const double C128604 = C128599 * C139448;
    const double C77639 = C76685 * C139346;
    const double C126100 = C126099 * C139346;
    const double C32430 = C1989 * C823;
    const double C41437 = C1989 * C6691;
    const double C40341 = C8436 * C139308;
    const double C44539 = C8436 * C139308;
    const double C35893 = C4933 * C139308;
    const double C43515 = C4933 * C139308;
    const double C126257 = C4933 * C823;
    const double C132869 = C4933 * C6691;
    const double C64103 = C64097 * C139372;
    const double C76792 = C76791 * C139372;
    const double C70317 = C70316 * C139289;
    const double C15025 = C1423 * C823;
    const double C22088 = C1423 * C6691;
    const double C16954 = C3125 * C139308;
    const double C22994 = C3125 * C139308;
    const double C64405 = C3125 * C823;
    const double C69628 = C3125 * C6691;
    const double C24162 = C8774 * C139308;
    const double C28308 = C8774 * C139308;
    const double C65789 = C65788 - C16950;
    const double C128764 = C128763 - C35889;
    const double C65320 = C65315 - C65301;
    const double C89551 = C89549 + C73723;
    const double C89550 = C89548 - C73723;
    const double C128520 = C128517 - C81023;
    const double C65790 = C65789 * C139289;
    const double C128523 = C128520 * C139448;
    d2eexx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C6694 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C139601 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C6695 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139590 +
                    (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C6696 +
                    (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                     C102 * C122 + C91 * C129) *
                        C6691) *
                       C139448 * C139463 * C139372 * C6692 +
                   ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                     C102 * C831 + C91 * C836) *
                        C6695 -
                    ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                      C100 * C839 + C89 * C846) *
                         C139601 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6694) +
                    (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                     C102 * C841 + C91 * C847) *
                        C139590 -
                    (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                     C100 * C830 + C89 * C835) *
                        C6696 -
                    (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 +
                     C100 * C837 + C89 * C844) *
                        C6691) *
                       C139448 * C139463 * C139372 * C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C6771 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C6692 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C6772 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C139360) *
                       C139448 * C139463 * C139601 +
                   ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                     C102 * C831 + C91 * C836) *
                        C6772 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C6692 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C6771) +
                    (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                     C102 * C928 + C91 * C933) *
                        C139360) *
                       C139448 * C139463 * C139590 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C6771 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C6692 -
                    (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                     C100 * C830 + C89 * C835) *
                        C6772 -
                    (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 +
                     C100 * C925 + C89 * C930) *
                        C139360) *
                       C139448 * C139463 * C6691) *
                  C139372) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139372) *
                        C139448 * C139463 * C6692 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C139372 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C244) *
                        C139448 * C139463 * C139360) *
                       C139601 +
                   (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C244 +
                     (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                      C102 * C1012 + C91 * C1017) *
                         C139372) *
                        C139448 * C139463 * C139360 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139372 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139448 * C139463 * C6692) *
                       C139590 +
                   (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C244 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C139372) *
                        C139448 * C139463 * C6692 -
                    ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                      C100 * C1009 + C89 * C1014) *
                         C139372 +
                     (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                      C100 * C830 + C89 * C835) *
                         C244) *
                        C139448 * C139463 * C139360) *
                       C6691)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139448 * C308) * C6694 +
                     (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
                     C338 * C139590 + C339 * C6696 + C340 * C6691) *
                        C139463 * C89 +
                    (C337 * C6694 + C338 * C139601 - C339 * C6695 -
                     C340 * C139590 + C341 * C6696 + C342 * C6691) *
                        C139463 * C90 +
                    (C339 * C6694 + C340 * C139601 - C341 * C6695 -
                     C342 * C139590 + C343 * C6696 + C344 * C6691) *
                        C139463 * C91) *
                       C139372 * C6692 +
                   ((C1116 * C6695 -
                     ((C307 * C839 + C139448 * C1098) * C139601 +
                      (C307 * C832 + C139448 * C1094) * C6694) +
                     C1117 * C139590 - C1118 * C6696 - C1119 * C6691) *
                        C139463 * C89 +
                    (C1118 * C6695 - (C1117 * C139601 + C1116 * C6694) +
                     C1119 * C139590 - C1120 * C6696 - C1121 * C6691) *
                        C139463 * C90 +
                    (C1120 * C6695 - (C1119 * C139601 + C1118 * C6694) +
                     C1121 * C139590 - (C307 * C833 + C139448 * C1097) * C6696 -
                     (C307 * C843 + C139448 * C1102) * C6691) *
                        C139463 * C91) *
                       C139372 * C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6771 +
            (C307 * C182 + C139448 * C394) * C6692 -
            (C307 * C832 + C139448 * C1094) * C6772 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C139463 * C89 +
           (C6996 + C6997 - C6998 - C6999) * C139463 * C90 + C7011 * C91) *
              C139601 +
          ((C6998 - (C6997 + C6996) + C6999) * C139463 * C89 +
           (C7002 - (C7001 + C7000) + C7003) * C139463 * C90 +
           (C7004 - (C7005 + C7006) + C7007) * C139463 * C91) *
              C139590 +
          (C7011 * C89 + (C7006 + C7005 - C7004 - C7007) * C139463 * C90 +
           (C343 * C6771 + C416 * C6692 -
            (C307 * C833 + C139448 * C1097) * C6772 -
            (C307 * C929 + C139448 * C1199) * C139360) *
               C139463 * C91) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C139463 * C89 +
            (C481 + C497) * C139463 * C90 + C503 * C91) *
               C6692 -
           (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C139463 * C89) *
               C139360) *
              C139601 +
          (((C1310 + C1318) * C139463 * C89 + (C1307 + C1317) * C139463 * C90 +
            (C1311 + C1319) * C139463 * C91) *
               C139360 -
           (C504 * C91 + (C498 + C484) * C139463 * C90 +
            (C497 + C481) * C139463 * C89) *
               C6692) *
              C139590 +
          ((C503 * C89 + (C489 + C499) * C139463 * C90 +
            (C490 + C500) * C139463 * C91) *
               C6692 -
           (((C307 * C1013 + C139448 * C1303) * C139372 +
             (C307 * C833 + C139448 * C1097) * C244) *
                C139463 * C91 +
            (C1319 + C1311) * C139463 * C90 + C1321 * C89) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C6694 +
                     (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
                     C585 * C139590 + C586 * C6696 + C587 * C6691) *
                        C89 +
                    (C584 * C6694 + C585 * C139601 - C586 * C6695 -
                     C587 * C139590 + C588 * C6696 + C589 * C6691) *
                        C90 +
                    (C586 * C6694 + C587 * C139601 - C588 * C6695 -
                     C589 * C139590 + C590 * C6696 + C591 * C6691) *
                        C91) *
                       C139448 * C139372 * C6692 +
                   ((C1418 * C6695 -
                     ((C554 * C839 + C139463 * C1400) * C139601 +
                      (C554 * C832 + C139463 * C1396) * C6694) +
                     C1419 * C139590 - C1420 * C6696 - C1421 * C6691) *
                        C89 +
                    (C1420 * C6695 - (C1419 * C139601 + C1418 * C6694) +
                     C1421 * C139590 - C1422 * C6696 - C1423 * C6691) *
                        C90 +
                    (C1422 * C6695 - (C1421 * C139601 + C1420 * C6694) +
                     C1423 * C139590 - (C554 * C833 + C139463 * C1399) * C6696 -
                     (C554 * C843 + C139463 * C1404) * C6691) *
                        C91) *
                       C139448 * C139372 * C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C6771 +
                     (C554 * C182 + C139463 * C641) * C6692 -
                     (C554 * C832 + C139463 * C1396) * C6772 -
                     (C554 * C927 + C139463 * C1497) * C139360) *
                        C89 +
                    (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
                       C139448 * C139601 +
                   ((C7236 - (C7235 + C7234) + C7237) * C89 +
                    (C7240 - (C7239 + C7238) + C7241) * C90 +
                    (C7242 - (C7243 + C7244) + C7245) * C91) *
                       C139448 * C139590 +
                   (C7248 * C89 + (C7244 + C7243 - C7242 - C7245) * C90 +
                    (C590 * C6771 + C663 * C6692 -
                     (C554 * C833 + C139463 * C1399) * C6772 -
                     (C554 * C929 + C139463 * C1501) * C139360) *
                        C91) *
                       C139448 * C6691) *
                  C139372) /
                 (p * q * std::sqrt(p + q));
    d2eezz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C244 +
                      (C554 * C245 + C139463 * C719) * C139372) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139448 * C6692 -
                    (C1621 * C91 + (C1619 + C1611) * C90 +
                     ((C554 * C1011 + C139463 * C1602) * C139372 +
                      (C554 * C832 + C139463 * C1396) * C244) *
                         C89) *
                        C139448 * C139360) *
                       C139601 +
                   (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                     (C1612 + C1620) * C91) *
                        C139448 * C139360 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139448 * C6692) *
                       C139590 +
                   ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                        C139448 * C6692 -
                    (((C554 * C1013 + C139463 * C1604) * C139372 +
                      (C554 * C833 + C139463 * C1399) * C244) *
                         C91 +
                     (C1620 + C1612) * C90 + C1621 * C89) *
                        C139448 * C139360) *
                       C6691)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C7401 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C7396 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C7402 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139308) *
                       C139448 * C139463 * C139372 * C139602 +
                   ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                     C102 * C831 + C91 * C836) *
                        C7402 -
                    ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                      C100 * C839 + C89 * C846) *
                         C7396 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C7401) +
                    (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                     C102 * C841 + C91 * C847) *
                        C139308) *
                       C139448 * C139463 * C139372 * C139593 +
                   ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                     C102 * C2572 + C91 * C2576) *
                        C7401 +
                    (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                     C102 * C2579 + C91 * C2584) *
                        C7396 -
                    (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                     C100 * C2571 + C89 * C2575) *
                        C7402 -
                    (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
                     C100 * C2578 + C89 * C2583) *
                        C139308) *
                       C139448 * C139463 * C139372 * C7400)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C7477 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139602 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C7478 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C139593 +
                    (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                     C102 * C2572 + C91 * C2576) *
                        C7479 +
                    (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                     C102 * C2665 + C91 * C2669) *
                        C7400) *
                       C139448 * C139463 * C7396 +
                   ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                     C102 * C831 + C91 * C836) *
                        C7478 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139602 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C7477) +
                    (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                     C102 * C928 + C91 * C933) *
                        C139593 -
                    (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                     C100 * C2571 + C89 * C2575) *
                        C7479 -
                    (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
                     C100 * C2664 + C89 * C2668) *
                        C7400) *
                       C139448 * C139463 * C139308) *
                  C139372) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139372) *
                        C139448 * C139463 * C139602 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C139372 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C244) *
                        C139448 * C139463 * C139593 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C244 +
                     (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                      C102 * C2747 + C91 * C2751) *
                         C139372) *
                        C139448 * C139463 * C7400) *
                       C7396 +
                   (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C244 +
                     (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                      C102 * C1012 + C91 * C1017) *
                         C139372) *
                        C139448 * C139463 * C139593 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139372 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139448 * C139463 * C139602 -
                    ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                      C100 * C2746 + C89 * C2750) *
                         C139372 +
                     (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                      C100 * C2571 + C89 * C2575) *
                         C244) *
                        C139448 * C139463 * C7400) *
                       C139308)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7401 +
            (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
            C338 * C139308) *
               C139463 * C89 +
           (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
               C139463 * C90 +
           (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C139308) *
               C139463 * C91) *
              C139372 * C139602 +
          ((C1116 * C7402 -
            ((C307 * C839 + C139448 * C1098) * C7396 +
             (C307 * C832 + C139448 * C1094) * C7401) +
            C1117 * C139308) *
               C139463 * C89 +
           (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C139308) *
               C139463 * C90 +
           (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C139308) *
               C139463 * C91) *
              C139372 * C139593 +
          (((C307 * C2570 + C139448 * C2827) * C7401 +
            (C307 * C2577 + C139448 * C2831) * C7396 - C2844 * C7402 -
            C2845 * C139308) *
               C139463 * C89 +
           (C2844 * C7401 + C2845 * C7396 - C2846 * C7402 - C2847 * C139308) *
               C139463 * C90 +
           (C2846 * C7401 + C2847 * C7396 -
            (C307 * C2573 + C139448 * C2830) * C7402 -
            (C307 * C2581 + C139448 * C2834) * C139308) *
               C139463 * C91) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7477 +
            (C307 * C182 + C139448 * C394) * C139602 -
            (C307 * C832 + C139448 * C1094) * C7478 -
            (C307 * C927 + C139448 * C1195) * C139593 +
            (C307 * C2570 + C139448 * C2827) * C7479 +
            (C307 * C2663 + C139448 * C2921) * C7400) *
               C139463 * C89 +
           (C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C139463 * C90 +
           (C7709 + C7710 - C7711 - C7712 + C7713 + C7714) * C139463 * C91) *
              C7396 +
          ((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C139463 * C89 +
           (C7711 - (C7710 + C7709) + C7712 - C7713 - C7714) * C139463 * C90 +
           (C1120 * C7478 - (C415 * C139602 + C341 * C7477) + C1219 * C139593 -
            (C307 * C2573 + C139448 * C2830) * C7479 -
            (C307 * C2666 + C139448 * C2924) * C7400) *
               C139463 * C91) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C139463 * C89 +
            (C481 + C497) * C139463 * C90 + C503 * C91) *
               C139602 -
           (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C139463 * C89) *
               C139593 +
           (((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C139463 * C89 +
            (C3022 + C3030) * C139463 * C90 + (C3025 + C3031) * C139463 * C91) *
               C7400) *
              C7396 +
          (((C1310 + C1318) * C139463 * C89 + (C1307 + C1317) * C139463 * C90 +
            (C1311 + C1319) * C139463 * C91) *
               C139593 -
           (C504 * C91 + (C498 + C484) * C139463 * C90 +
            (C497 + C481) * C139463 * C89) *
               C139602 -
           (((C307 * C2748 + C139448 * C3020) * C139372 +
             (C307 * C2573 + C139448 * C2830) * C244) *
                C139463 * C91 +
            (C3031 + C3025) * C139463 * C90 + (C3030 + C3022) * C139463 * C89) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C7401 +
            (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
            C585 * C139308) *
               C89 +
           (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) * C90 +
           (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C139308) *
               C91) *
              C139448 * C139372 * C139602 +
          ((C1418 * C7402 -
            ((C554 * C839 + C139463 * C1400) * C7396 +
             (C554 * C832 + C139463 * C1396) * C7401) +
            C1419 * C139308) *
               C89 +
           (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C139308) *
               C90 +
           (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C139308) *
               C91) *
              C139448 * C139372 * C139593 +
          (((C554 * C2570 + C139463 * C3105) * C7401 +
            (C554 * C2577 + C139463 * C3109) * C7396 - C3122 * C7402 -
            C3123 * C139308) *
               C89 +
           (C3122 * C7401 + C3123 * C7396 - C3124 * C7402 - C3125 * C139308) *
               C90 +
           (C3124 * C7401 + C3125 * C7396 -
            (C554 * C2573 + C139463 * C3108) * C7402 -
            (C554 * C2581 + C139463 * C3112) * C139308) *
               C91) *
              C139448 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C7477 +
            (C554 * C182 + C139463 * C641) * C139602 -
            (C554 * C832 + C139463 * C1396) * C7478 -
            (C554 * C927 + C139463 * C1497) * C139593 +
            (C554 * C2570 + C139463 * C3105) * C7479 +
            (C554 * C2663 + C139463 * C3199) * C7400) *
               C89 +
           (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C90 +
           (C7943 + C7944 - C7945 - C7946 + C7947 + C7948) * C91) *
              C139448 * C7396 +
          ((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C89 +
           (C7945 - (C7944 + C7943) + C7946 - C7947 - C7948) * C90 +
           (C1422 * C7478 - (C662 * C139602 + C588 * C7477) + C1521 * C139593 -
            (C554 * C2573 + C139463 * C3108) * C7479 -
            (C554 * C2666 + C139463 * C3202) * C7400) *
               C91) *
              C139448 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C244 +
                      (C554 * C245 + C139463 * C719) * C139372) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139448 * C139602 -
                    (C1621 * C91 + (C1619 + C1611) * C90 +
                     ((C554 * C1011 + C139463 * C1602) * C139372 +
                      (C554 * C832 + C139463 * C1396) * C244) *
                         C89) *
                        C139448 * C139593 +
                    (((C554 * C2570 + C139463 * C3105) * C244 +
                      (C554 * C2745 + C139463 * C3295) * C139372) *
                         C89 +
                     (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                        C139448 * C7400) *
                       C7396 +
                   (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                     (C1612 + C1620) * C91) *
                        C139448 * C139593 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139448 * C139602 -
                    (((C554 * C2748 + C139463 * C3298) * C139372 +
                      (C554 * C2573 + C139463 * C3108) * C244) *
                         C91 +
                     (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
                        C139448 * C7400) *
                       C139308)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C7401 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C7396 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C7402 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139308) *
                        C139448 * C139463 * C139571 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C7402 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C7396 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C7401) +
                     (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                      C102 * C1709 + C91 * C1715) *
                         C139308) *
                        C139448 * C139463 * C139384) *
                       C6692 +
                   (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C7402 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C7396 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C7401) +
                     (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                      C102 * C841 + C91 * C847) *
                         C139308) *
                        C139448 * C139463 * C139571 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C7401 +
                     (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                      C102 * C3902 + C91 * C3911) *
                         C7396 -
                     (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                      C100 * C3892 + C89 * C3898) *
                         C7402 -
                     (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
                      C100 * C3901 + C89 * C3910) *
                         C139308) *
                        C139448 * C139463 * C139384) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C6771 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C6692 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6772 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C139360) *
                        C139448 * C139463 * C7396 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C6772 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C6692 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C6771) +
                     (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                      C102 * C928 + C91 * C933) *
                         C139360) *
                        C139448 * C139463 * C139308) *
                       C139571 +
                   (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C6772 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C6692 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C6771) +
                     (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                      C102 * C3991 + C91 * C3997) *
                         C139360) *
                        C139448 * C139463 * C7396 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C6771 +
                     (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                      C102 * C1793 + C91 * C1798) *
                         C6692 -
                     (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                      C100 * C3892 + C89 * C3898) *
                         C6772 -
                     (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                      C100 * C3990 + C89 * C3996) *
                         C139360) *
                        C139448 * C139463 * C139308) *
                       C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C1875 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139571 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C1876 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C139384) *
                        C139448 * C139463 * C6692 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C1876 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C139571 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C1875) +
                     (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                      C102 * C4077 + C91 * C4083) *
                         C139384) *
                        C139448 * C139463 * C139360) *
                       C7396 +
                   (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C1876 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139571 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C1875) +
                     (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                      C102 * C1880 + C91 * C1885) *
                         C139384) *
                        C139448 * C139463 * C6692 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C1875 +
                     (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                      C102 * C1012 + C91 * C1017) *
                         C139571 -
                     (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                      C100 * C3892 + C89 * C3898) *
                         C1876 -
                     (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                      C100 * C4076 + C89 * C4082) *
                         C139384) *
                        C139448 * C139463 * C139360) *
                       C139308)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7401 +
             (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
             C338 * C139308) *
                C139463 * C89 +
            (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                C139463 * C90 +
            (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C139308) *
                C139463 * C91) *
               C139571 +
           ((C1984 * C7402 -
             ((C307 * C1707 + C139448 * C1966) * C7396 +
              (C307 * C1700 + C139448 * C1962) * C7401) +
             C1985 * C139308) *
                C139463 * C89 +
            (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) +
             C1987 * C139308) *
                C139463 * C90 +
            (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) +
             C1989 * C139308) *
                C139463 * C91) *
               C139384) *
              C6692 +
          (((C1116 * C7402 -
             ((C307 * C839 + C139448 * C1098) * C7396 +
              (C307 * C832 + C139448 * C1094) * C7401) +
             C1117 * C139308) *
                C139463 * C89 +
            (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
             C1119 * C139308) *
                C139463 * C90 +
            (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) +
             C1121 * C139308) *
                C139463 * C91) *
               C139571 +
           (((C307 * C3891 + C139448 * C4161) * C7401 +
             (C307 * C3900 + C139448 * C4167) * C7396 - C8433 * C7402 -
             C8434 * C139308) *
                C139463 * C89 +
            (C8433 * C7401 + C8434 * C7396 - C8435 * C7402 - C8436 * C139308) *
                C139463 * C90 +
            (C8435 * C7401 + C8436 * C7396 -
             (C307 * C8120 + C139448 * C8422) * C7402 -
             (C307 * C8122 + C139448 * C8423) * C139308) *
                C139463 * C91) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C139463 * C89 +
            (C6996 + C6997 - C6998 - C6999) * C139463 * C90 + C7011 * C91) *
               C7396 +
           ((C6998 - (C6997 + C6996) + C6999) * C139463 * C89 +
            (C7002 - (C7001 + C7000) + C7003) * C139463 * C90 +
            (C7004 - (C7005 + C7006) + C7007) * C139463 * C91) *
               C139308) *
              C139571 +
          ((((C307 * C3891 + C139448 * C4161) * C6772 -
             ((C307 * C1794 + C139448 * C2066) * C6692 +
              (C307 * C1700 + C139448 * C1962) * C6771) +
             (C307 * C3989 + C139448 * C4247) * C139360) *
                C139463 * C89 +
            (C8536 - (C8537 + C8538) + C8548) * C139463 * C90 +
            (C8541 - (C8542 + C8543) + C8549) * C139463 * C91) *
               C7396 +
           ((C8538 + C8537 - C8536 - C8548) * C139463 * C89 +
            (C8543 + C8542 - C8541 - C8549) * C139463 * C90 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C139448 * C8422) * C6772 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139463 * C91) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 -
             (C307 * C1700 + C139448 * C1962) * C1876 -
             (C307 * C1879 + C139448 * C2159) * C139384) *
                C139463 * C89 +
            (C2165 + C2166 - C2167 - C2184) * C139463 * C90 + C2189 * C91) *
               C6692 +
           (((C307 * C3891 + C139448 * C4161) * C1876 -
             ((C307 * C1011 + C139448 * C1301) * C139571 +
              (C307 * C832 + C139448 * C1094) * C1875) +
             (C307 * C4075 + C139448 * C4327) * C139384) *
                C139463 * C89 +
            (C8649 - (C8650 + C8651) + C8661) * C139463 * C90 +
            (C8654 - (C8655 + C8656) + C8662) * C139463 * C91) *
               C139360) *
              C7396 +
          (((C2167 - (C2166 + C2165) + C2184) * C139463 * C89 +
            (C2172 - (C2171 + C2170) + C2186) * C139463 * C90 +
            (C2175 - (C2176 + C2177) + C2187) * C139463 * C91) *
               C6692 +
           ((C8651 + C8650 - C8649 - C8661) * C139463 * C89 +
            (C8656 + C8655 - C8654 - C8662) * C139463 * C90 +
            (C1120 * C1875 + C1316 * C139571 -
             (C307 * C8120 + C139448 * C8422) * C1876 -
             (C307 * C8322 + C139448 * C8647) * C139384) *
                C139463 * C91) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C89 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                C90 +
            (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C139308) *
                C91) *
               C139448 * C139571 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C139463 * C2268) * C7396 +
              (C554 * C1700 + C139463 * C2264) * C7401) +
             C2287 * C139308) *
                C89 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
             C2289 * C139308) *
                C90 +
            (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) +
             C2291 * C139308) *
                C91) *
               C139448 * C139384) *
              C6692 +
          (((C1418 * C7402 -
             ((C554 * C839 + C139463 * C1400) * C7396 +
              (C554 * C832 + C139463 * C1396) * C7401) +
             C1419 * C139308) *
                C89 +
            (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) +
             C1421 * C139308) *
                C90 +
            (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) +
             C1423 * C139308) *
                C91) *
               C139448 * C139571 +
           (((C554 * C3891 + C139463 * C4407) * C7401 +
             (C554 * C3900 + C139463 * C4413) * C7396 - C8771 * C7402 -
             C8772 * C139308) *
                C89 +
            (C8771 * C7401 + C8772 * C7396 - C8773 * C7402 - C8774 * C139308) *
                C90 +
            (C8773 * C7401 + C8774 * C7396 -
             (C554 * C8120 + C139463 * C8760) * C7402 -
             (C554 * C8122 + C139463 * C8761) * C139308) *
                C91) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C6771 +
                      (C554 * C182 + C139463 * C641) * C6692 -
                      (C554 * C832 + C139463 * C1396) * C6772 -
                      (C554 * C927 + C139463 * C1497) * C139360) *
                         C89 +
                     (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
                        C139448 * C7396 +
                    ((C7236 - (C7235 + C7234) + C7237) * C89 +
                     (C7240 - (C7239 + C7238) + C7241) * C90 +
                     (C7242 - (C7243 + C7244) + C7245) * C91) *
                        C139448 * C139308) *
                       C139571 +
                   ((((C554 * C3891 + C139463 * C4407) * C6772 -
                      ((C554 * C1794 + C139463 * C2368) * C6692 +
                       (C554 * C1700 + C139463 * C2264) * C6771) +
                      (C554 * C3989 + C139463 * C4493) * C139360) *
                         C89 +
                     (C8874 - (C8875 + C8876) + C8886) * C90 +
                     (C8879 - (C8880 + C8881) + C8887) * C91) *
                        C139448 * C7396 +
                    ((C8876 + C8875 - C8874 - C8886) * C89 +
                     (C8881 + C8880 - C8879 - C8887) * C90 +
                     (C2290 * C6771 + C2382 * C6692 -
                      (C554 * C8120 + C139463 * C8760) * C6772 -
                      (C554 * C8222 + C139463 * C8872) * C139360) *
                         C91) *
                        C139448 * C139308) *
                       C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[2] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C139448 * C6692 +
                    (((C554 * C3891 + C139463 * C4407) * C1876 -
                      ((C554 * C1011 + C139463 * C1602) * C139571 +
                       (C554 * C832 + C139463 * C1396) * C1875) +
                      (C554 * C4075 + C139463 * C4573) * C139384) *
                         C89 +
                     (C8987 - (C8988 + C8989) + C8999) * C90 +
                     (C8992 - (C8993 + C8994) + C9000) * C91) *
                        C139448 * C139360) *
                       C7396 +
                   (((C2468 - (C2467 + C2466) + C2485) * C89 +
                     (C2473 - (C2472 + C2471) + C2487) * C90 +
                     (C2476 - (C2477 + C2478) + C2488) * C91) *
                        C139448 * C6692 +
                    ((C8989 + C8988 - C8987 - C8999) * C89 +
                     (C8994 + C8993 - C8992 - C9000) * C90 +
                     (C1422 * C1875 + C1617 * C139571 -
                      (C554 * C8120 + C139463 * C8760) * C1876 -
                      (C554 * C8322 + C139463 * C8985) * C139384) *
                         C91) *
                        C139448 * C139360) *
                       C139308)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C137108 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139562 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C137101 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139308) *
                        C139448 * C139463 * C9074 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C137101 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C139562 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C137108) +
                     (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                      C102 * C1709 + C91 * C1715) *
                         C139308) *
                        C139448 * C139463 * C139384) *
                       C6692 +
                   (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C137101 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C139562 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C137108) +
                     (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                      C102 * C841 + C91 * C847) *
                         C139308) *
                        C139448 * C139463 * C9074 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C137108 +
                     (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                      C102 * C3902 + C91 * C3911) *
                         C139562 -
                     (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                      C100 * C3892 + C89 * C3898) *
                         C137101 -
                     (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
                      C100 * C3901 + C89 * C3910) *
                         C139308) *
                        C139448 * C139463 * C139384) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C6771 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C6692 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6772 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C139360) *
                        C139448 * C139463 * C139562 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C6772 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C6692 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C6771) +
                     (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                      C102 * C928 + C91 * C933) *
                         C139360) *
                        C139448 * C139463 * C139308) *
                       C9074 +
                   (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C6772 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C6692 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C6771) +
                     (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                      C102 * C3991 + C91 * C3997) *
                         C139360) *
                        C139448 * C139463 * C139562 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C6771 +
                     (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                      C102 * C1793 + C91 * C1798) *
                         C6692 -
                     (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                      C100 * C3892 + C89 * C3898) *
                         C6772 -
                     (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                      C100 * C3990 + C89 * C3996) *
                         C139360) *
                        C139448 * C139463 * C139308) *
                       C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C9224 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C9074 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C9225 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C139384) *
                        C139448 * C139463 * C6692 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C9225 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C9074 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C9224) +
                     (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                      C102 * C4077 + C91 * C4083) *
                         C139384) *
                        C139448 * C139463 * C139360) *
                       C139562 +
                   (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C9225 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C9074 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C9224) +
                     (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                      C102 * C1880 + C91 * C1885) *
                         C139384) *
                        C139448 * C139463 * C6692 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C9224 +
                     (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                      C102 * C1012 + C91 * C1017) *
                         C9074 -
                     (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                      C100 * C3892 + C89 * C3898) *
                         C9225 -
                     (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                      C100 * C4076 + C89 * C4082) *
                         C139384) *
                        C139448 * C139463 * C139360) *
                       C139308)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139448 * C308) * C137108 +
                      (C307 * C116 + C139448 * C314) * C139562 -
                      C337 * C137101 - C338 * C139308) *
                         C139463 * C89 +
                     (C337 * C137108 + C338 * C139562 - C339 * C137101 -
                      C340 * C139308) *
                         C139463 * C90 +
                     (C339 * C137108 + C340 * C139562 - C341 * C137101 -
                      C342 * C139308) *
                         C139463 * C91) *
                        C9074 +
                    ((C1984 * C137101 -
                      ((C307 * C1707 + C139448 * C1966) * C139562 +
                       (C307 * C1700 + C139448 * C1962) * C137108) +
                      C1985 * C139308) *
                         C139463 * C89 +
                     (C1986 * C137101 - (C1985 * C139562 + C1984 * C137108) +
                      C1987 * C139308) *
                         C139463 * C90 +
                     (C1988 * C137101 - (C1987 * C139562 + C1986 * C137108) +
                      C1989 * C139308) *
                         C139463 * C91) *
                        C139384) *
                       C6692 +
                   (((C1116 * C137101 -
                      ((C307 * C839 + C139448 * C1098) * C139562 +
                       (C307 * C832 + C139448 * C1094) * C137108) +
                      C1117 * C139308) *
                         C139463 * C89 +
                     (C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
                      C1119 * C139308) *
                         C139463 * C90 +
                     (C1120 * C137101 - (C1119 * C139562 + C1118 * C137108) +
                      C1121 * C139308) *
                         C139463 * C91) *
                        C9074 +
                    (((C307 * C3891 + C139448 * C4161) * C137108 +
                      (C307 * C3900 + C139448 * C4167) * C139562 -
                      C8433 * C137101 - C8434 * C139308) *
                         C139463 * C89 +
                     (C8433 * C137108 + C8434 * C139562 - C8435 * C137101 -
                      C8436 * C139308) *
                         C139463 * C90 +
                     (C8435 * C137108 + C8436 * C139562 -
                      (C307 * C8120 + C139448 * C8422) * C137101 -
                      (C307 * C8122 + C139448 * C8423) * C139308) *
                         C139463 * C91) *
                        C139384) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C139463 * C89 +
            (C6996 + C6997 - C6998 - C6999) * C139463 * C90 + C7011 * C91) *
               C139562 +
           ((C6998 - (C6997 + C6996) + C6999) * C139463 * C89 +
            (C7002 - (C7001 + C7000) + C7003) * C139463 * C90 +
            (C7004 - (C7005 + C7006) + C7007) * C139463 * C91) *
               C139308) *
              C9074 +
          ((((C307 * C3891 + C139448 * C4161) * C6772 -
             ((C307 * C1794 + C139448 * C2066) * C6692 +
              (C307 * C1700 + C139448 * C1962) * C6771) +
             (C307 * C3989 + C139448 * C4247) * C139360) *
                C139463 * C89 +
            (C8536 - (C8537 + C8538) + C8548) * C139463 * C90 +
            (C8541 - (C8542 + C8543) + C8549) * C139463 * C91) *
               C139562 +
           ((C8538 + C8537 - C8536 - C8548) * C139463 * C89 +
            (C8543 + C8542 - C8541 - C8549) * C139463 * C90 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C139448 * C8422) * C6772 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139463 * C91) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C9224 +
             (C307 * C245 + C139448 * C474) * C9074 -
             (C307 * C1700 + C139448 * C1962) * C9225 -
             (C307 * C1879 + C139448 * C2159) * C139384) *
                C139463 * C89 +
            (C9449 + C9450 - C9451 - C9452) * C139463 * C90 + C9464 * C91) *
               C6692 +
           (((C307 * C3891 + C139448 * C4161) * C9225 -
             ((C307 * C1011 + C139448 * C1301) * C9074 +
              (C307 * C832 + C139448 * C1094) * C9224) +
             (C307 * C4075 + C139448 * C4327) * C139384) *
                C139463 * C89 +
            (C10298 - (C10299 + C10300) + C10301) * C139463 * C90 +
            (C10302 - (C10303 + C10304) + C10305) * C139463 * C91) *
               C139360) *
              C139562 +
          (((C9451 - (C9450 + C9449) + C9452) * C139463 * C89 +
            (C9455 - (C9454 + C9453) + C9456) * C139463 * C90 +
            (C9457 - (C9458 + C9459) + C9460) * C139463 * C91) *
               C6692 +
           ((C10300 + C10299 - C10298 - C10301) * C139463 * C89 +
            (C10304 + C10303 - C10302 - C10305) * C139463 * C90 +
            (C1120 * C9224 + C1316 * C9074 -
             (C307 * C8120 + C139448 * C8422) * C9225 -
             (C307 * C8322 + C139448 * C8647) * C139384) *
                C139463 * C91) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C137108 +
                      (C554 * C116 + C139463 * C561) * C139562 -
                      C584 * C137101 - C585 * C139308) *
                         C89 +
                     (C584 * C137108 + C585 * C139562 - C586 * C137101 -
                      C587 * C139308) *
                         C90 +
                     (C586 * C137108 + C587 * C139562 - C588 * C137101 -
                      C589 * C139308) *
                         C91) *
                        C139448 * C9074 +
                    ((C2286 * C137101 -
                      ((C554 * C1707 + C139463 * C2268) * C139562 +
                       (C554 * C1700 + C139463 * C2264) * C137108) +
                      C2287 * C139308) *
                         C89 +
                     (C2288 * C137101 - (C2287 * C139562 + C2286 * C137108) +
                      C2289 * C139308) *
                         C90 +
                     (C2290 * C137101 - (C2289 * C139562 + C2288 * C137108) +
                      C2291 * C139308) *
                         C91) *
                        C139448 * C139384) *
                       C6692 +
                   (((C1418 * C137101 -
                      ((C554 * C839 + C139463 * C1400) * C139562 +
                       (C554 * C832 + C139463 * C1396) * C137108) +
                      C1419 * C139308) *
                         C89 +
                     (C1420 * C137101 - (C1419 * C139562 + C1418 * C137108) +
                      C1421 * C139308) *
                         C90 +
                     (C1422 * C137101 - (C1421 * C139562 + C1420 * C137108) +
                      C1423 * C139308) *
                         C91) *
                        C139448 * C9074 +
                    (((C554 * C3891 + C139463 * C4407) * C137108 +
                      (C554 * C3900 + C139463 * C4413) * C139562 -
                      C8771 * C137101 - C8772 * C139308) *
                         C89 +
                     (C8771 * C137108 + C8772 * C139562 - C8773 * C137101 -
                      C8774 * C139308) *
                         C90 +
                     (C8773 * C137108 + C8774 * C139562 -
                      (C554 * C8120 + C139463 * C8760) * C137101 -
                      (C554 * C8122 + C139463 * C8761) * C139308) *
                         C91) *
                        C139448 * C139384) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C6771 +
                      (C554 * C182 + C139463 * C641) * C6692 -
                      (C554 * C832 + C139463 * C1396) * C6772 -
                      (C554 * C927 + C139463 * C1497) * C139360) *
                         C89 +
                     (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
                        C139448 * C139562 +
                    ((C7236 - (C7235 + C7234) + C7237) * C89 +
                     (C7240 - (C7239 + C7238) + C7241) * C90 +
                     (C7242 - (C7243 + C7244) + C7245) * C91) *
                        C139448 * C139308) *
                       C9074 +
                   ((((C554 * C3891 + C139463 * C4407) * C6772 -
                      ((C554 * C1794 + C139463 * C2368) * C6692 +
                       (C554 * C1700 + C139463 * C2264) * C6771) +
                      (C554 * C3989 + C139463 * C4493) * C139360) *
                         C89 +
                     (C8874 - (C8875 + C8876) + C8886) * C90 +
                     (C8879 - (C8880 + C8881) + C8887) * C91) *
                        C139448 * C139562 +
                    ((C8876 + C8875 - C8874 - C8886) * C89 +
                     (C8881 + C8880 - C8879 - C8887) * C90 +
                     (C2290 * C6771 + C2382 * C6692 -
                      (C554 * C8120 + C139463 * C8760) * C6772 -
                      (C554 * C8222 + C139463 * C8872) * C139360) *
                         C91) *
                        C139448 * C139308) *
                       C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C9224 +
                      (C554 * C245 + C139463 * C719) * C9074 -
                      (C554 * C1700 + C139463 * C2264) * C9225 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C89 +
                     (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                        C139448 * C6692 +
                    (((C554 * C3891 + C139463 * C4407) * C9225 -
                      ((C554 * C1011 + C139463 * C1602) * C9074 +
                       (C554 * C832 + C139463 * C1396) * C9224) +
                      (C554 * C4075 + C139463 * C4573) * C139384) *
                         C89 +
                     (C10608 - (C10609 + C10610) + C10611) * C90 +
                     (C10612 - (C10613 + C10614) + C10615) * C91) *
                        C139448 * C139360) *
                       C139562 +
                   (((C9689 - (C9688 + C9687) + C9690) * C89 +
                     (C9693 - (C9692 + C9691) + C9694) * C90 +
                     (C9695 - (C9696 + C9697) + C9698) * C91) *
                        C139448 * C6692 +
                    ((C10610 + C10609 - C10608 - C10611) * C89 +
                     (C10614 + C10613 - C10612 - C10615) * C90 +
                     (C1422 * C9224 + C1617 * C9074 -
                      (C554 * C8120 + C139463 * C8760) * C9225 -
                      (C554 * C8322 + C139463 * C8985) * C139384) *
                         C91) *
                        C139448 * C139360) *
                       C139308)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C3364 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139303) *
                        C139448 * C139463 * C9074 -
                    ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                      C100 * C1707 + C89 * C1714) *
                         C139303 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C3364) *
                        C139448 * C139463 * C139384) *
                       C139602 +
                   (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C3364 +
                     (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                      C102 * C3902 + C91 * C3911) *
                         C139303) *
                        C139448 * C139463 * C139384 -
                    ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                      C100 * C839 + C89 * C846) *
                         C139303 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C3364) *
                        C139448 * C139463 * C9074) *
                       C139593 +
                   (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C3364 +
                     (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                      C102 * C2579 + C91 * C2584) *
                         C139303) *
                        C139448 * C139463 * C9074 -
                    ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
                      C100 * C3905 + C89 * C3914) *
                         C139303 +
                     (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                      C100 * C3896 + C89 * C3908) *
                         C3364) *
                        C139448 * C139463 * C139384) *
                       C7400)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C7477 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139602 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C7478 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C139593 +
                    (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                     C102 * C2572 + C91 * C2576) *
                        C7479 +
                    (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                     C102 * C2665 + C91 * C2669) *
                        C7400) *
                       C139448 * C139463 * C139303 * C9074 +
                   ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                     C102 * C3893 + C91 * C3899) *
                        C7478 -
                    ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                      C100 * C1794 + C89 * C1799) *
                         C139602 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C7477) +
                    (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                     C102 * C3991 + C91 * C3997) *
                        C139593 -
                    (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                     C100 * C3896 + C89 * C3908) *
                        C7479 -
                    (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
                     C100 * C3994 + C89 * C4000) *
                        C7400) *
                       C139448 * C139463 * C139303 * C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C9224 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C9074 -
                    (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                     C100 * C1700 + C89 * C1708) *
                        C9225 -
                    (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                     C100 * C1879 + C89 * C1884) *
                        C139384) *
                       C139448 * C139463 * C139602 +
                   ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                     C102 * C3893 + C91 * C3899) *
                        C9225 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C9074 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C9224) +
                    (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                     C102 * C4077 + C91 * C4083) *
                        C139384) *
                       C139448 * C139463 * C139593 +
                   ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                     C102 * C2572 + C91 * C2576) *
                        C9224 +
                    (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                     C102 * C2747 + C91 * C2751) *
                        C9074 -
                    (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                     C100 * C3896 + C89 * C3908) *
                        C9225 -
                    (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
                     C100 * C4080 + C89 * C4086) *
                        C139384) *
                       C139448 * C139463 * C7400) *
                  C139303) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139448 * C308) * C3364 +
                      (C307 * C116 + C139448 * C314) * C139303) *
                         C139463 * C89 +
                     (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                     (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                        C9074 -
                    ((C1987 * C139303 + C1986 * C3364) * C139463 * C91 +
                     (C1985 * C139303 + C1984 * C3364) * C139463 * C90 +
                     ((C307 * C1707 + C139448 * C1966) * C139303 +
                      (C307 * C1700 + C139448 * C1962) * C3364) *
                         C139463 * C89) *
                        C139384) *
                       C139602 +
                   ((((C307 * C3891 + C139448 * C4161) * C3364 +
                      (C307 * C3900 + C139448 * C4167) * C139303) *
                         C139463 * C89 +
                     (C8433 * C3364 + C8434 * C139303) * C139463 * C90 +
                     (C8435 * C3364 + C8436 * C139303) * C139463 * C91) *
                        C139384 -
                    ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                     (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                     ((C307 * C839 + C139448 * C1098) * C139303 +
                      (C307 * C832 + C139448 * C1094) * C3364) *
                         C139463 * C89) *
                        C9074) *
                       C139593 +
                   ((((C307 * C2570 + C139448 * C2827) * C3364 +
                      (C307 * C2577 + C139448 * C2831) * C139303) *
                         C139463 * C89 +
                     (C2844 * C3364 + C2845 * C139303) * C139463 * C90 +
                     (C2846 * C3364 + C2847 * C139303) * C139463 * C91) *
                        C9074 -
                    (((C307 * C3903 + C139448 * C4170) * C139303 +
                      (C307 * C3894 + C139448 * C4164) * C3364) *
                         C139463 * C91 +
                     ((C307 * C3904 + C139448 * C4171) * C139303 +
                      (C307 * C3895 + C139448 * C4165) * C3364) *
                         C139463 * C90 +
                     ((C307 * C3905 + C139448 * C4172) * C139303 +
                      (C307 * C3896 + C139448 * C4166) * C3364) *
                         C139463 * C89) *
                        C139384) *
                       C7400)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7477 +
            (C307 * C182 + C139448 * C394) * C139602 -
            (C307 * C832 + C139448 * C1094) * C7478 -
            (C307 * C927 + C139448 * C1195) * C139593 +
            (C307 * C2570 + C139448 * C2827) * C7479 +
            (C307 * C2663 + C139448 * C2921) * C7400) *
               C139463 * C89 +
           (C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C139463 * C90 +
           (C7709 + C7710 - C7711 - C7712 + C7713 + C7714) * C139463 * C91) *
              C139303 * C9074 +
          (((C307 * C3891 + C139448 * C4161) * C7478 -
            ((C307 * C1794 + C139448 * C2066) * C139602 +
             (C307 * C1700 + C139448 * C1962) * C7477) +
            (C307 * C3989 + C139448 * C4247) * C139593 -
            (C307 * C3896 + C139448 * C4166) * C7479 -
            (C307 * C3994 + C139448 * C4248) * C7400) *
               C139463 * C89 +
           (C8433 * C7478 - (C2078 * C139602 + C1984 * C7477) +
            C8546 * C139593 - (C307 * C3895 + C139448 * C4165) * C7479 -
            (C307 * C3993 + C139448 * C4250) * C7400) *
               C139463 * C90 +
           (C8435 * C7478 - (C2079 * C139602 + C1986 * C7477) +
            C8547 * C139593 - (C307 * C3894 + C139448 * C4164) * C7479 -
            (C307 * C3992 + C139448 * C4252) * C7400) *
               C139463 * C91) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C9224 +
            (C307 * C245 + C139448 * C474) * C9074 -
            (C307 * C1700 + C139448 * C1962) * C9225 -
            (C307 * C1879 + C139448 * C2159) * C139384) *
               C139463 * C89 +
           (C9449 + C9450 - C9451 - C9452) * C139463 * C90 + C9464 * C91) *
              C139602 +
          (((C307 * C3891 + C139448 * C4161) * C9225 -
            ((C307 * C1011 + C139448 * C1301) * C9074 +
             (C307 * C832 + C139448 * C1094) * C9224) +
            (C307 * C4075 + C139448 * C4327) * C139384) *
               C139463 * C89 +
           (C10298 - (C10299 + C10300) + C10301) * C139463 * C90 +
           (C10302 - (C10303 + C10304) + C10305) * C139463 * C91) *
              C139593 +
          (((C307 * C2570 + C139448 * C2827) * C9224 +
            (C307 * C2745 + C139448 * C3017) * C9074 -
            (C307 * C3896 + C139448 * C4166) * C9225 -
            (C307 * C4080 + C139448 * C4330) * C139384) *
               C139463 * C89 +
           (C2844 * C9224 + C3028 * C9074 -
            (C307 * C3895 + C139448 * C4165) * C9225 -
            (C307 * C4079 + C139448 * C4331) * C139384) *
               C139463 * C90 +
           (C2846 * C9224 + C3029 * C9074 -
            (C307 * C3894 + C139448 * C4164) * C9225 -
            (C307 * C4078 + C139448 * C4332) * C139384) *
               C139463 * C91) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C3364 +
                      (C554 * C116 + C139463 * C561) * C139303) *
                         C89 +
                     (C584 * C3364 + C585 * C139303) * C90 +
                     (C586 * C3364 + C587 * C139303) * C91) *
                        C139448 * C9074 -
                    ((C2289 * C139303 + C2288 * C3364) * C91 +
                     (C2287 * C139303 + C2286 * C3364) * C90 +
                     ((C554 * C1707 + C139463 * C2268) * C139303 +
                      (C554 * C1700 + C139463 * C2264) * C3364) *
                         C89) *
                        C139448 * C139384) *
                       C139602 +
                   ((((C554 * C3891 + C139463 * C4407) * C3364 +
                      (C554 * C3900 + C139463 * C4413) * C139303) *
                         C89 +
                     (C8771 * C3364 + C8772 * C139303) * C90 +
                     (C8773 * C3364 + C8774 * C139303) * C91) *
                        C139448 * C139384 -
                    ((C1421 * C139303 + C1420 * C3364) * C91 +
                     (C1419 * C139303 + C1418 * C3364) * C90 +
                     ((C554 * C839 + C139463 * C1400) * C139303 +
                      (C554 * C832 + C139463 * C1396) * C3364) *
                         C89) *
                        C139448 * C9074) *
                       C139593 +
                   ((((C554 * C2570 + C139463 * C3105) * C3364 +
                      (C554 * C2577 + C139463 * C3109) * C139303) *
                         C89 +
                     (C3122 * C3364 + C3123 * C139303) * C90 +
                     (C3124 * C3364 + C3125 * C139303) * C91) *
                        C139448 * C9074 -
                    (((C554 * C3903 + C139463 * C4416) * C139303 +
                      (C554 * C3894 + C139463 * C4410) * C3364) *
                         C91 +
                     ((C554 * C3904 + C139463 * C4417) * C139303 +
                      (C554 * C3895 + C139463 * C4411) * C3364) *
                         C90 +
                     ((C554 * C3905 + C139463 * C4418) * C139303 +
                      (C554 * C3896 + C139463 * C4412) * C3364) *
                         C89) *
                        C139448 * C139384) *
                       C7400)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C7477 +
            (C554 * C182 + C139463 * C641) * C139602 -
            (C554 * C832 + C139463 * C1396) * C7478 -
            (C554 * C927 + C139463 * C1497) * C139593 +
            (C554 * C2570 + C139463 * C3105) * C7479 +
            (C554 * C2663 + C139463 * C3199) * C7400) *
               C89 +
           (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C90 +
           (C7943 + C7944 - C7945 - C7946 + C7947 + C7948) * C91) *
              C139448 * C139303 * C9074 +
          (((C554 * C3891 + C139463 * C4407) * C7478 -
            ((C554 * C1794 + C139463 * C2368) * C139602 +
             (C554 * C1700 + C139463 * C2264) * C7477) +
            (C554 * C3989 + C139463 * C4493) * C139593 -
            (C554 * C3896 + C139463 * C4412) * C7479 -
            (C554 * C3994 + C139463 * C4494) * C7400) *
               C89 +
           (C8771 * C7478 - (C2380 * C139602 + C2286 * C7477) +
            C8884 * C139593 - (C554 * C3895 + C139463 * C4411) * C7479 -
            (C554 * C3993 + C139463 * C4496) * C7400) *
               C90 +
           (C8773 * C7478 - (C2381 * C139602 + C2288 * C7477) +
            C8885 * C139593 - (C554 * C3894 + C139463 * C4410) * C7479 -
            (C554 * C3992 + C139463 * C4498) * C7400) *
               C91) *
              C139448 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C9224 +
                     (C554 * C245 + C139463 * C719) * C9074 -
                     (C554 * C1700 + C139463 * C2264) * C9225 -
                     (C554 * C1879 + C139463 * C2460) * C139384) *
                        C89 +
                    (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                       C139448 * C139602 +
                   (((C554 * C3891 + C139463 * C4407) * C9225 -
                     ((C554 * C1011 + C139463 * C1602) * C9074 +
                      (C554 * C832 + C139463 * C1396) * C9224) +
                     (C554 * C4075 + C139463 * C4573) * C139384) *
                        C89 +
                    (C10608 - (C10609 + C10610) + C10611) * C90 +
                    (C10612 - (C10613 + C10614) + C10615) * C91) *
                       C139448 * C139593 +
                   (((C554 * C2570 + C139463 * C3105) * C9224 +
                     (C554 * C2745 + C139463 * C3295) * C9074 -
                     (C554 * C3896 + C139463 * C4412) * C9225 -
                     (C554 * C4080 + C139463 * C4576) * C139384) *
                        C89 +
                    (C3122 * C9224 + C3306 * C9074 -
                     (C554 * C3895 + C139463 * C4411) * C9225 -
                     (C554 * C4079 + C139463 * C4577) * C139384) *
                        C90 +
                    (C3124 * C9224 + C3307 * C9074 -
                     (C554 * C3894 + C139463 * C4410) * C9225 -
                     (C554 * C4078 + C139463 * C4578) * C139384) *
                        C91) *
                       C139448 * C7400) *
                  C139303) /
                 (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C3364 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139303) *
                        C139448 * C139463 * C139603 -
                    ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                      C100 * C1707 + C89 * C1714) *
                         C139303 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C3364) *
                        C139448 * C139463 * C139596 +
                    ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                      C102 * C4658 + C91 * C4662) *
                         C3364 +
                     (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
                      C102 * C4665 + C91 * C4670) *
                         C139303) *
                        C139448 * C139463 * C10691) *
                       C6692 +
                   (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C3364 +
                     (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                      C102 * C3902 + C91 * C3911) *
                         C139303) *
                        C139448 * C139463 * C139596 -
                    ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                      C100 * C839 + C89 * C846) *
                         C139303 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C3364) *
                        C139448 * C139463 * C139603 -
                    ((C102 * C5472 + C91 * C5478 + C101 * C5473 + C90 * C5479 +
                      C100 * C5474 + C89 * C5480) *
                         C139303 +
                     (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                      C100 * C5471 + C89 * C5477) *
                         C3364) *
                        C139448 * C139463 * C10691) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C6771 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C6692 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C6772 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C139360) *
                       C139448 * C139463 * C139303 * C139603 +
                   ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                     C102 * C3893 + C91 * C3899) *
                        C6772 -
                    ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                      C100 * C1794 + C89 * C1799) *
                         C6692 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C6771) +
                    (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                     C102 * C3991 + C91 * C3997) *
                        C139360) *
                       C139448 * C139463 * C139303 * C139596 +
                   ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                     C102 * C4658 + C91 * C4662) *
                        C6771 +
                    (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                     C102 * C4748 + C91 * C4752) *
                        C6692 -
                    (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                     C100 * C5471 + C89 * C5477) *
                        C6772 -
                    (C102 * C5555 + C91 * C5558 + C101 * C5556 + C90 * C5559 +
                     C100 * C5557 + C89 * C5560) *
                        C139360) *
                       C139448 * C139463 * C139303 * C10691)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C10840 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C139603 -
                    (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                     C100 * C1700 + C89 * C1708) *
                        C10841 -
                    (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                     C100 * C1879 + C89 * C1884) *
                        C139596 +
                    (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                     C102 * C4658 + C91 * C4662) *
                        C10842 +
                    (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
                     C102 * C4833 + C91 * C4837) *
                        C10691) *
                       C139448 * C139463 * C6692 +
                   ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                     C102 * C3893 + C91 * C3899) *
                        C10841 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C139603 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C10840) +
                    (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                     C102 * C4077 + C91 * C4083) *
                        C139596 -
                    (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                     C100 * C5471 + C89 * C5477) *
                        C10842 -
                    (C102 * C5635 + C91 * C5638 + C101 * C5636 + C90 * C5639 +
                     C100 * C5637 + C89 * C5640) *
                        C10691) *
                       C139448 * C139463 * C139360) *
                  C139303) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139448 * C308) * C3364 +
                      (C307 * C116 + C139448 * C314) * C139303) *
                         C139463 * C89 +
                     (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                     (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                        C139603 -
                    ((C1987 * C139303 + C1986 * C3364) * C139463 * C91 +
                     (C1985 * C139303 + C1984 * C3364) * C139463 * C90 +
                     ((C307 * C1707 + C139448 * C1966) * C139303 +
                      (C307 * C1700 + C139448 * C1962) * C3364) *
                         C139463 * C89) *
                        C139596 +
                    (((C307 * C4656 + C139448 * C4913) * C3364 +
                      (C307 * C4663 + C139448 * C4917) * C139303) *
                         C139463 * C89 +
                     (C4930 * C3364 + C4931 * C139303) * C139463 * C90 +
                     (C4932 * C3364 + C4933 * C139303) * C139463 * C91) *
                        C10691) *
                       C6692 +
                   ((((C307 * C3891 + C139448 * C4161) * C3364 +
                      (C307 * C3900 + C139448 * C4167) * C139303) *
                         C139463 * C89 +
                     (C8433 * C3364 + C8434 * C139303) * C139463 * C90 +
                     (C8435 * C3364 + C8436 * C139303) * C139463 * C91) *
                        C139596 -
                    ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                     (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                     ((C307 * C839 + C139448 * C1098) * C139303 +
                      (C307 * C832 + C139448 * C1094) * C3364) *
                         C139463 * C89) *
                        C139603 -
                    (((C307 * C5472 + C139448 * C5718) * C139303 +
                      (C307 * C5469 + C139448 * C5715) * C3364) *
                         C139463 * C91 +
                     ((C307 * C5473 + C139448 * C5719) * C139303 +
                      (C307 * C5470 + C139448 * C5716) * C3364) *
                         C139463 * C90 +
                     ((C307 * C5474 + C139448 * C5720) * C139303 +
                      (C307 * C5471 + C139448 * C5717) * C3364) *
                         C139463 * C89) *
                        C10691) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6771 +
            (C307 * C182 + C139448 * C394) * C6692 -
            (C307 * C832 + C139448 * C1094) * C6772 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C139463 * C89 +
           (C6996 + C6997 - C6998 - C6999) * C139463 * C90 + C7011 * C91) *
              C139303 * C139603 +
          (((C307 * C3891 + C139448 * C4161) * C6772 -
            ((C307 * C1794 + C139448 * C2066) * C6692 +
             (C307 * C1700 + C139448 * C1962) * C6771) +
            (C307 * C3989 + C139448 * C4247) * C139360) *
               C139463 * C89 +
           (C8536 - (C8537 + C8538) + C8548) * C139463 * C90 +
           (C8541 - (C8542 + C8543) + C8549) * C139463 * C91) *
              C139303 * C139596 +
          (((C307 * C4656 + C139448 * C4913) * C6771 +
            (C307 * C4746 + C139448 * C5007) * C6692 -
            (C307 * C5471 + C139448 * C5717) * C6772 -
            (C307 * C5557 + C139448 * C5795) * C139360) *
               C139463 * C89 +
           (C4930 * C6771 + C5018 * C6692 -
            (C307 * C5470 + C139448 * C5716) * C6772 -
            (C307 * C5556 + C139448 * C5796) * C139360) *
               C139463 * C90 +
           (C4932 * C6771 + C5019 * C6692 -
            (C307 * C5469 + C139448 * C5715) * C6772 -
            (C307 * C5555 + C139448 * C5797) * C139360) *
               C139463 * C91) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C10840 +
            (C307 * C245 + C139448 * C474) * C139603 -
            (C307 * C1700 + C139448 * C1962) * C10841 -
            (C307 * C1879 + C139448 * C2159) * C139596 +
            (C307 * C4656 + C139448 * C4913) * C10842 +
            (C307 * C4831 + C139448 * C5095) * C10691) *
               C139463 * C89 +
           (C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C139463 *
               C90 +
           (C11072 + C11073 - C11074 - C11075 + C11076 + C11077) * C139463 *
               C91) *
              C6692 +
          (((C307 * C3891 + C139448 * C4161) * C10841 -
            ((C307 * C1011 + C139448 * C1301) * C139603 +
             (C307 * C832 + C139448 * C1094) * C10840) +
            (C307 * C4075 + C139448 * C4327) * C139596 -
            (C307 * C5471 + C139448 * C5717) * C10842 -
            (C307 * C5637 + C139448 * C5872) * C10691) *
               C139463 * C89 +
           (C8433 * C10841 - (C1315 * C139603 + C1116 * C10840) +
            C8659 * C139596 - (C307 * C5470 + C139448 * C5716) * C10842 -
            (C307 * C5636 + C139448 * C5873) * C10691) *
               C139463 * C90 +
           (C8435 * C10841 - (C1314 * C139603 + C1118 * C10840) +
            C8660 * C139596 - (C307 * C5469 + C139448 * C5715) * C10842 -
            (C307 * C5635 + C139448 * C5874) * C10691) *
               C139463 * C91) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C3364 +
                      (C554 * C116 + C139463 * C561) * C139303) *
                         C89 +
                     (C584 * C3364 + C585 * C139303) * C90 +
                     (C586 * C3364 + C587 * C139303) * C91) *
                        C139448 * C139603 -
                    ((C2289 * C139303 + C2288 * C3364) * C91 +
                     (C2287 * C139303 + C2286 * C3364) * C90 +
                     ((C554 * C1707 + C139463 * C2268) * C139303 +
                      (C554 * C1700 + C139463 * C2264) * C3364) *
                         C89) *
                        C139448 * C139596 +
                    (((C554 * C4656 + C139463 * C5191) * C3364 +
                      (C554 * C4663 + C139463 * C5195) * C139303) *
                         C89 +
                     (C5208 * C3364 + C5209 * C139303) * C90 +
                     (C5210 * C3364 + C5211 * C139303) * C91) *
                        C139448 * C10691) *
                       C6692 +
                   ((((C554 * C3891 + C139463 * C4407) * C3364 +
                      (C554 * C3900 + C139463 * C4413) * C139303) *
                         C89 +
                     (C8771 * C3364 + C8772 * C139303) * C90 +
                     (C8773 * C3364 + C8774 * C139303) * C91) *
                        C139448 * C139596 -
                    ((C1421 * C139303 + C1420 * C3364) * C91 +
                     (C1419 * C139303 + C1418 * C3364) * C90 +
                     ((C554 * C839 + C139463 * C1400) * C139303 +
                      (C554 * C832 + C139463 * C1396) * C3364) *
                         C89) *
                        C139448 * C139603 -
                    (((C554 * C5472 + C139463 * C5952) * C139303 +
                      (C554 * C5469 + C139463 * C5949) * C3364) *
                         C91 +
                     ((C554 * C5473 + C139463 * C5953) * C139303 +
                      (C554 * C5470 + C139463 * C5950) * C3364) *
                         C90 +
                     ((C554 * C5474 + C139463 * C5954) * C139303 +
                      (C554 * C5471 + C139463 * C5951) * C3364) *
                         C89) *
                        C139448 * C10691) *
                       C139360)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C6771 +
                     (C554 * C182 + C139463 * C641) * C6692 -
                     (C554 * C832 + C139463 * C1396) * C6772 -
                     (C554 * C927 + C139463 * C1497) * C139360) *
                        C89 +
                    (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
                       C139448 * C139303 * C139603 +
                   (((C554 * C3891 + C139463 * C4407) * C6772 -
                     ((C554 * C1794 + C139463 * C2368) * C6692 +
                      (C554 * C1700 + C139463 * C2264) * C6771) +
                     (C554 * C3989 + C139463 * C4493) * C139360) *
                        C89 +
                    (C8874 - (C8875 + C8876) + C8886) * C90 +
                    (C8879 - (C8880 + C8881) + C8887) * C91) *
                       C139448 * C139303 * C139596 +
                   (((C554 * C4656 + C139463 * C5191) * C6771 +
                     (C554 * C4746 + C139463 * C5285) * C6692 -
                     (C554 * C5471 + C139463 * C5951) * C6772 -
                     (C554 * C5557 + C139463 * C6029) * C139360) *
                        C89 +
                    (C5208 * C6771 + C5296 * C6692 -
                     (C554 * C5470 + C139463 * C5950) * C6772 -
                     (C554 * C5556 + C139463 * C6030) * C139360) *
                        C90 +
                    (C5210 * C6771 + C5297 * C6692 -
                     (C554 * C5469 + C139463 * C5949) * C6772 -
                     (C554 * C5555 + C139463 * C6031) * C139360) *
                        C91) *
                       C139448 * C139303 * C10691)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C10840 +
            (C554 * C245 + C139463 * C719) * C139603 -
            (C554 * C1700 + C139463 * C2264) * C10841 -
            (C554 * C1879 + C139463 * C2460) * C139596 +
            (C554 * C4656 + C139463 * C5191) * C10842 +
            (C554 * C4831 + C139463 * C5373) * C10691) *
               C89 +
           (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C90 +
           (C11306 + C11307 - C11308 - C11309 + C11310 + C11311) * C91) *
              C139448 * C6692 +
          (((C554 * C3891 + C139463 * C4407) * C10841 -
            ((C554 * C1011 + C139463 * C1602) * C139603 +
             (C554 * C832 + C139463 * C1396) * C10840) +
            (C554 * C4075 + C139463 * C4573) * C139596 -
            (C554 * C5471 + C139463 * C5951) * C10842 -
            (C554 * C5637 + C139463 * C6106) * C10691) *
               C89 +
           (C8771 * C10841 - (C1616 * C139603 + C1418 * C10840) +
            C8997 * C139596 - (C554 * C5470 + C139463 * C5950) * C10842 -
            (C554 * C5636 + C139463 * C6107) * C10691) *
               C90 +
           (C8773 * C10841 - (C1615 * C139603 + C1420 * C10840) +
            C8998 * C139596 - (C554 * C5469 + C139463 * C5949) * C10842 -
            (C554 * C5635 + C139463 * C6108) * C10691) *
               C91) *
              C139448 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (-std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C137108 +
                                (C100 * C116 + C89 * C125 + C101 * C117 +
                                 C90 * C126 + C102 * C118 + C91 * C127) *
                                    C139562 -
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C137101 -
                                (C102 * C120 + C91 * C128 + C101 * C118 +
                                 C90 * C127 + C100 * C117 + C89 * C126) *
                                    C139308) *
                                   C139448 * C139463 * C139372 * C2565 +
                               ((C100 * C829 + C89 * C834 + C101 * C830 +
                                 C90 * C835 + C102 * C831 + C91 * C836) *
                                    C137101 -
                                ((C102 * C837 + C91 * C844 + C101 * C838 +
                                  C90 * C845 + C100 * C839 + C89 * C846) *
                                     C139562 +
                                 (C102 * C830 + C91 * C835 + C101 * C829 +
                                  C90 * C834 + C100 * C832 + C89 * C840) *
                                     C137108) +
                                (C100 * C838 + C89 * C845 + C101 * C837 +
                                 C90 * C844 + C102 * C841 + C91 * C847) *
                                    C139308) *
                                   C139448 * C139463 * C139372 * C2566 +
                               ((C100 * C2570 + C89 * C2574 + C101 * C2571 +
                                 C90 * C2575 + C102 * C2572 + C91 * C2576) *
                                    C137108 +
                                (C100 * C2577 + C89 * C2582 + C101 * C2578 +
                                 C90 * C2583 + C102 * C2579 + C91 * C2584) *
                                    C139562 -
                                (C102 * C2573 + C91 * C2580 + C101 * C2572 +
                                 C90 * C2576 + C100 * C2571 + C89 * C2575) *
                                    C137101 -
                                (C102 * C2581 + C91 * C2585 + C101 * C2579 +
                                 C90 * C2584 + C100 * C2578 + C89 * C2583) *
                                    C139308) *
                                   C139448 * C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C103 +
          (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
           C91 * C127) *
              C92 -
          (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
           C89 * C114) *
              C104 -
          (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
           C89 * C126) *
              C93 +
          (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
           C91 * C121) *
              C105 +
          (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
           C91 * C129) *
              C94 -
          (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
           C89 * C119) *
              C106 -
          (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 + C100 * C120 +
           C89 * C128) *
              C95) *
         C139448 * C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C137108 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C139562 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C137101 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C139308) *
              C139448 * C139463 * C4653 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C137101 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C139562 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C137108) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C139308) *
              C139448 * C139463 * C4654 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C137108 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C139562 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C137101 -
           (C102 * C4667 + C91 * C4671 + C101 * C4665 + C90 * C4670 +
            C100 * C4664 + C89 * C4669) *
               C139308) *
              C139448 * C139463 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[6] += (-std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C2660 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C2565 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C2661 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C2566 +
                    (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                     C102 * C2572 + C91 * C2576) *
                        C2662 +
                    (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                     C102 * C2665 + C91 * C2669) *
                        C2567) *
                       C139448 * C139463 * C139562 +
                   ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                     C102 * C831 + C91 * C836) *
                        C2661 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C2565 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C2660) +
                    (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                     C102 * C928 + C91 * C933) *
                        C2566 -
                    (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                     C100 * C2571 + C89 * C2575) *
                        C2662 -
                    (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
                     C100 * C2664 + C89 * C2668) *
                        C2567) *
                       C139448 * C139463 * C139308) *
                  C139372) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C181 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139346) *
                       C139448 * C139463 * C92 -
                   ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                     C100 * C183 + C89 * C189) *
                        C139346 +
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C181) *
                       C139448 * C139463 * C93 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C181 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C139346) *
                       C139448 * C139463 * C94 -
                   ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 +
                     C100 * C185 + C89 * C191) *
                        C139346 +
                    (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                     C100 * C110 + C89 * C119) *
                        C181) *
                       C139448 * C139463 * C95) *
                  C139372) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C181 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139346) *
                        C139448 * C139463 * C139562 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139346 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C181) *
                        C139448 * C139463 * C139308) *
                       C4653 +
                   (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C181 +
                     (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                      C102 * C1793 + C91 * C1798) *
                         C139346) *
                        C139448 * C139463 * C139308 -
                    ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                      C100 * C1794 + C89 * C1799) *
                         C139346 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C181) *
                        C139448 * C139463 * C139562) *
                       C4654 +
                   (((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                      C102 * C4658 + C91 * C4662) *
                         C181 +
                     (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                      C102 * C4748 + C91 * C4752) *
                         C139346) *
                        C139448 * C139463 * C139562 -
                    ((C102 * C4749 + C91 * C4753 + C101 * C4748 + C90 * C4752 +
                      C100 * C4747 + C89 * C4751) *
                         C139346 +
                     (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
                      C100 * C4657 + C89 * C4661) *
                         C181) *
                        C139448 * C139463 * C139308) *
                       C4655)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (-std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                  C90 * C114 + C102 * C109 + C91 * C115) *
                                     C244 +
                                 (C100 * C245 + C89 * C251 + C101 * C246 +
                                  C90 * C252 + C102 * C247 + C91 * C253) *
                                     C139372) *
                                    C139448 * C139463 * C2565 -
                                ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                                  C90 * C1015 + C100 * C1011 + C89 * C1016) *
                                     C139372 +
                                 (C102 * C830 + C91 * C835 + C101 * C829 +
                                  C90 * C834 + C100 * C832 + C89 * C840) *
                                     C244) *
                                    C139448 * C139463 * C2566 +
                                ((C100 * C2570 + C89 * C2574 + C101 * C2571 +
                                  C90 * C2575 + C102 * C2572 + C91 * C2576) *
                                     C244 +
                                 (C100 * C2745 + C89 * C2749 + C101 * C2746 +
                                  C90 * C2750 + C102 * C2747 + C91 * C2751) *
                                     C139372) *
                                    C139448 * C139463 * C2567) *
                                   C139562 +
                               (((C100 * C829 + C89 * C834 + C101 * C830 +
                                  C90 * C835 + C102 * C831 + C91 * C836) *
                                     C244 +
                                 (C100 * C1010 + C89 * C1015 + C101 * C1009 +
                                  C90 * C1014 + C102 * C1012 + C91 * C1017) *
                                     C139372) *
                                    C139448 * C139463 * C2566 -
                                ((C102 * C248 + C91 * C254 + C101 * C247 +
                                  C90 * C253 + C100 * C246 + C89 * C252) *
                                     C139372 +
                                 (C102 * C110 + C91 * C119 + C101 * C109 +
                                  C90 * C115 + C100 * C108 + C89 * C114) *
                                     C244) *
                                    C139448 * C139463 * C2565 -
                                ((C102 * C2748 + C91 * C2752 + C101 * C2747 +
                                  C90 * C2751 + C100 * C2746 + C89 * C2750) *
                                     C139372 +
                                 (C102 * C2573 + C91 * C2580 + C101 * C2572 +
                                  C90 * C2576 + C100 * C2571 + C89 * C2575) *
                                     C244) *
                                    C139448 * C139463 * C2567) *
                                   C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C244 +
                               (C100 * C245 + C89 * C251 + C101 * C246 +
                                C90 * C252 + C102 * C247 + C91 * C253) *
                                   C139372) *
                                  C139448 * C139463 * C139346 * C92 -
                              ((C102 * C248 + C91 * C254 + C101 * C247 +
                                C90 * C253 + C100 * C246 + C89 * C252) *
                                   C139372 +
                               (C102 * C110 + C91 * C119 + C101 * C109 +
                                C90 * C115 + C100 * C108 + C89 * C114) *
                                   C244) *
                                  C139448 * C139463 * C139346 * C93 +
                              ((C100 * C109 + C89 * C115 + C101 * C110 +
                                C90 * C119 + C102 * C111 + C91 * C121) *
                                   C244 +
                               (C100 * C247 + C89 * C253 + C101 * C248 +
                                C90 * C254 + C102 * C249 + C91 * C255) *
                                   C139372) *
                                  C139448 * C139463 * C139346 * C94 -
                              ((C102 * C250 + C91 * C256 + C101 * C249 +
                                C90 * C255 + C100 * C248 + C89 * C254) *
                                   C139372 +
                               (C102 * C112 + C91 * C123 + C101 * C111 +
                                C90 * C121 + C100 * C110 + C89 * C119) *
                                   C244) *
                                  C139448 * C139463 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C4828 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C4653 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C4829 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C4654 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C4830 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C4655) *
              C139448 * C139463 * C139346 * C139562 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C4829 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C4653 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C4828) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C4654 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C4830 -
           (C102 * C4834 + C91 * C4838 + C101 * C4833 + C90 * C4837 +
            C100 * C4832 + C89 * C4836) *
               C4655) *
              C139448 * C139463 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C137108 +
            (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
            C338 * C139308) *
               C139463 * C89 +
           (C337 * C137108 + C338 * C139562 - C339 * C137101 - C340 * C139308) *
               C139463 * C90 +
           (C339 * C137108 + C340 * C139562 - C341 * C137101 - C342 * C139308) *
               C139463 * C91) *
              C139372 * C2565 +
          ((C1116 * C137101 -
            ((C307 * C839 + C139448 * C1098) * C139562 +
             (C307 * C832 + C139448 * C1094) * C137108) +
            C1117 * C139308) *
               C139463 * C89 +
           (C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
            C1119 * C139308) *
               C139463 * C90 +
           (C1120 * C137101 - (C1119 * C139562 + C1118 * C137108) +
            C1121 * C139308) *
               C139463 * C91) *
              C139372 * C2566 +
          (((C307 * C2570 + C139448 * C2827) * C137108 +
            (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
            C2845 * C139308) *
               C139463 * C89 +
           (C2844 * C137108 + C2845 * C139562 - C2846 * C137101 -
            C2847 * C139308) *
               C139463 * C90 +
           (C2846 * C137108 + C2847 * C139562 -
            (C307 * C2573 + C139448 * C2830) * C137101 -
            (C307 * C2581 + C139448 * C2834) * C139308) *
               C139463 * C91) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C103 +
           (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C139463 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C139463 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C139448 * C313) * C106 -
           (C307 * C124 + C139448 * C319) * C95) *
              C139463 * C91) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C137108 +
            (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
            C338 * C139308) *
               C139463 * C89 +
           (C337 * C137108 + C338 * C139562 - C339 * C137101 - C340 * C139308) *
               C139463 * C90 +
           (C339 * C137108 + C340 * C139562 - C341 * C137101 - C342 * C139308) *
               C139463 * C91) *
              C4653 +
          ((C1984 * C137101 -
            ((C307 * C1707 + C139448 * C1966) * C139562 +
             (C307 * C1700 + C139448 * C1962) * C137108) +
            C1985 * C139308) *
               C139463 * C89 +
           (C1986 * C137101 - (C1985 * C139562 + C1984 * C137108) +
            C1987 * C139308) *
               C139463 * C90 +
           (C1988 * C137101 - (C1987 * C139562 + C1986 * C137108) +
            C1989 * C139308) *
               C139463 * C91) *
              C4654 +
          (((C307 * C4656 + C139448 * C4913) * C137108 +
            (C307 * C4663 + C139448 * C4917) * C139562 - C4930 * C137101 -
            C4931 * C139308) *
               C139463 * C89 +
           (C4930 * C137108 + C4931 * C139562 - C4932 * C137101 -
            C4933 * C139308) *
               C139463 * C90 +
           (C4932 * C137108 + C4933 * C139562 -
            (C307 * C4659 + C139448 * C4916) * C137101 -
            (C307 * C4667 + C139448 * C4920) * C139308) *
               C139463 * C91) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C139463 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C139463 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C139463 * C91) *
              C139562 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C139463 * C89 +
           (C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C139463 * C90 +
           (C1120 * C2661 - (C415 * C2565 + C341 * C2660) + C1219 * C2566 -
            (C307 * C2573 + C139448 * C2830) * C2662 -
            (C307 * C2666 + C139448 * C2924) * C2567) *
               C139463 * C91) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C181 +
            (C307 * C182 + C139448 * C394) * C139346) *
               C139463 * C89 +
           (C401 + C417) * C139463 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C139463 * C90 +
           (C417 + C401) * C139463 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C139463 * C90 +
           (C410 + C420) * C139463 * C91) *
              C94 -
          (((C307 * C187 + C139448 * C399) * C139346 +
            (C307 * C112 + C139448 * C313) * C181) *
               C139463 * C91 +
           (C420 + C410) * C139463 * C90 + C424 * C89) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C139463 * C89 +
            (C401 + C417) * C139463 * C90 + C423 * C91) *
               C139562 -
           (C424 * C91 + (C418 + C404) * C139463 * C90 +
            (C417 + C401) * C139463 * C89) *
               C139308) *
              C4653 +
          (((C2069 + C2081) * C139463 * C89 + (C2072 + C2082) * C139463 * C90 +
            (C2075 + C2083) * C139463 * C91) *
               C139308 -
           (C2085 * C91 + (C2081 + C2069) * C139463 * C90 +
            ((C307 * C1794 + C139448 * C2066) * C139346 +
             (C307 * C1700 + C139448 * C1962) * C181) *
                C139463 * C89) *
               C139562) *
              C4654 +
          ((((C307 * C4656 + C139448 * C4913) * C181 +
             (C307 * C4746 + C139448 * C5007) * C139346) *
                C139463 * C89 +
            (C5012 + C5020) * C139463 * C90 + (C5015 + C5021) * C139463 * C91) *
               C139562 -
           (((C307 * C4749 + C139448 * C5010) * C139346 +
             (C307 * C4659 + C139448 * C4916) * C181) *
                C139463 * C91 +
            (C5021 + C5015) * C139463 * C90 + (C5020 + C5012) * C139463 * C89) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C139463 * C89 +
            (C481 + C497) * C139463 * C90 + C503 * C91) *
               C2565 -
           (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C139463 * C89) *
               C2566 +
           (((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C139463 * C89 +
            (C3022 + C3030) * C139463 * C90 + (C3025 + C3031) * C139463 * C91) *
               C2567) *
              C139562 +
          (((C1310 + C1318) * C139463 * C89 + (C1307 + C1317) * C139463 * C90 +
            (C1311 + C1319) * C139463 * C91) *
               C2566 -
           (C504 * C91 + (C498 + C484) * C139463 * C90 +
            (C497 + C481) * C139463 * C89) *
               C2565 -
           (((C307 * C2748 + C139448 * C3020) * C139372 +
             (C307 * C2573 + C139448 * C2830) * C244) *
                C139463 * C91 +
            (C3031 + C3025) * C139463 * C90 + (C3030 + C3022) * C139463 * C89) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C307 * C107 + C139448 * C308) * C244 +
                                (C307 * C245 + C139448 * C474) * C139372) *
                                   C139463 * C89 +
                               (C481 + C497) * C139463 * C90 + C503 * C91) *
                                  C139346 * C92 -
                              (C504 * C91 + (C498 + C484) * C139463 * C90 +
                               (C497 + C481) * C139463 * C89) *
                                  C139346 * C93 +
                              (C503 * C89 + (C489 + C499) * C139463 * C90 +
                               (C490 + C500) * C139463 * C91) *
                                  C139346 * C94 -
                              (((C307 * C250 + C139448 * C479) * C139372 +
                                (C307 * C112 + C139448 * C313) * C244) *
                                   C139463 * C91 +
                               (C500 + C490) * C139463 * C90 + C504 * C89) *
                                  C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C4828 +
            (C307 * C245 + C139448 * C474) * C4653 -
            (C307 * C1700 + C139448 * C1962) * C4829 -
            (C307 * C1879 + C139448 * C2159) * C4654 +
            (C307 * C4656 + C139448 * C4913) * C4830 +
            (C307 * C4831 + C139448 * C5095) * C4655) *
               C139463 * C89 +
           (C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C139463 * C90 +
           (C5107 + C5108 - C5109 - C5110 + C5111 + C5117) * C139463 * C91) *
              C139346 * C139562 +
          ((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C139463 * C89 +
           (C5109 - (C5108 + C5107) + C5110 - C5111 - C5117) * C139463 * C90 +
           (C1988 * C4829 - (C495 * C4653 + C341 * C4828) + C2183 * C4654 -
            (C307 * C4659 + C139448 * C4916) * C4830 -
            (C307 * C4834 + C139448 * C5098) * C4655) *
               C139463 * C91) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C137108 +
            (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
            C585 * C139308) *
               C89 +
           (C584 * C137108 + C585 * C139562 - C586 * C137101 - C587 * C139308) *
               C90 +
           (C586 * C137108 + C587 * C139562 - C588 * C137101 - C589 * C139308) *
               C91) *
              C139448 * C139372 * C2565 +
          ((C1418 * C137101 -
            ((C554 * C839 + C139463 * C1400) * C139562 +
             (C554 * C832 + C139463 * C1396) * C137108) +
            C1419 * C139308) *
               C89 +
           (C1420 * C137101 - (C1419 * C139562 + C1418 * C137108) +
            C1421 * C139308) *
               C90 +
           (C1422 * C137101 - (C1421 * C139562 + C1420 * C137108) +
            C1423 * C139308) *
               C91) *
              C139448 * C139372 * C2566 +
          (((C554 * C2570 + C139463 * C3105) * C137108 +
            (C554 * C2577 + C139463 * C3109) * C139562 - C3122 * C137101 -
            C3123 * C139308) *
               C89 +
           (C3122 * C137108 + C3123 * C139562 - C3124 * C137101 -
            C3125 * C139308) *
               C90 +
           (C3124 * C137108 + C3125 * C139562 -
            (C554 * C2573 + C139463 * C3108) * C137101 -
            (C554 * C2581 + C139463 * C3112) * C139308) *
               C91) *
              C139448 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C554 * C107 + C139463 * C555) * C103 +
           (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C139463 * C560) * C106 -
           (C554 * C124 + C139463 * C566) * C95) *
              C91) *
         C139448 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C137108 +
            (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
            C585 * C139308) *
               C89 +
           (C584 * C137108 + C585 * C139562 - C586 * C137101 - C587 * C139308) *
               C90 +
           (C586 * C137108 + C587 * C139562 - C588 * C137101 - C589 * C139308) *
               C91) *
              C139448 * C4653 +
          ((C2286 * C137101 -
            ((C554 * C1707 + C139463 * C2268) * C139562 +
             (C554 * C1700 + C139463 * C2264) * C137108) +
            C2287 * C139308) *
               C89 +
           (C2288 * C137101 - (C2287 * C139562 + C2286 * C137108) +
            C2289 * C139308) *
               C90 +
           (C2290 * C137101 - (C2289 * C139562 + C2288 * C137108) +
            C2291 * C139308) *
               C91) *
              C139448 * C4654 +
          (((C554 * C4656 + C139463 * C5191) * C137108 +
            (C554 * C4663 + C139463 * C5195) * C139562 - C5208 * C137101 -
            C5209 * C139308) *
               C89 +
           (C5208 * C137108 + C5209 * C139562 - C5210 * C137101 -
            C5211 * C139308) *
               C90 +
           (C5210 * C137108 + C5211 * C139562 -
            (C554 * C4659 + C139463 * C5194) * C137101 -
            (C554 * C4667 + C139463 * C5198) * C139308) *
               C91) *
              C139448 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[6] += (-std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C2660 +
                     (C554 * C182 + C139463 * C641) * C2565 -
                     (C554 * C832 + C139463 * C1396) * C2661 -
                     (C554 * C927 + C139463 * C1497) * C2566 +
                     (C554 * C2570 + C139463 * C3105) * C2662 +
                     (C554 * C2663 + C139463 * C3199) * C2567) *
                        C89 +
                    (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
                    (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
                       C139448 * C139562 +
                   ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C89 +
                    (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C90 +
                    (C1422 * C2661 - (C662 * C2565 + C588 * C2660) +
                     C1521 * C2566 - (C554 * C2573 + C139463 * C3108) * C2662 -
                     (C554 * C2666 + C139463 * C3202) * C2567) *
                        C91) *
                       C139448 * C139308) *
                  C139372) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C181 +
                     (C554 * C182 + C139463 * C641) * C139346) *
                        C89 +
                    (C648 + C664) * C90 + C668 * C91) *
                       C139448 * C92 -
                   (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                       C139448 * C93 +
                   (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                       C139448 * C94 -
                   (((C554 * C187 + C139463 * C646) * C139346 +
                     (C554 * C112 + C139463 * C560) * C181) *
                        C91 +
                    (C667 + C657) * C90 + C669 * C89) *
                       C139448 * C95) *
                  C139372) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C181 +
                      (C554 * C182 + C139463 * C641) * C139346) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139448 * C139562 -
                    (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                        C139448 * C139308) *
                       C4653 +
                   (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                     (C2377 + C2385) * C91) *
                        C139448 * C139308 -
                    (C2386 * C91 + (C2383 + C2371) * C90 +
                     ((C554 * C1794 + C139463 * C2368) * C139346 +
                      (C554 * C1700 + C139463 * C2264) * C181) *
                         C89) *
                        C139448 * C139562) *
                       C4654 +
                   ((((C554 * C4656 + C139463 * C5191) * C181 +
                      (C554 * C4746 + C139463 * C5285) * C139346) *
                         C89 +
                     (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
                        C139448 * C139562 -
                    (((C554 * C4749 + C139463 * C5288) * C139346 +
                      (C554 * C4659 + C139463 * C5194) * C181) *
                         C91 +
                     (C5299 + C5293) * C90 + (C5298 + C5290) * C89) *
                        C139448 * C139308) *
                       C4655)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[6] += (-std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C244 +
                      (C554 * C245 + C139463 * C719) * C139372) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139448 * C2565 -
                    (C1621 * C91 + (C1619 + C1611) * C90 +
                     ((C554 * C1011 + C139463 * C1602) * C139372 +
                      (C554 * C832 + C139463 * C1396) * C244) *
                         C89) *
                        C139448 * C2566 +
                    (((C554 * C2570 + C139463 * C3105) * C244 +
                      (C554 * C2745 + C139463 * C3295) * C139372) *
                         C89 +
                     (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                        C139448 * C2567) *
                       C139562 +
                   (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                     (C1612 + C1620) * C91) *
                        C139448 * C2566 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139448 * C2565 -
                    (((C554 * C2748 + C139463 * C3298) * C139372 +
                      (C554 * C2573 + C139463 * C3108) * C244) *
                         C91 +
                     (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
                        C139448 * C2567) *
                       C139308)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C244 +
                     (C554 * C245 + C139463 * C719) * C139372) *
                        C89 +
                    (C726 + C742) * C90 + C746 * C91) *
                       C139448 * C139346 * C92 -
                   (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                       C139448 * C139346 * C93 +
                   (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                       C139448 * C139346 * C94 -
                   (((C554 * C250 + C139463 * C724) * C139372 +
                     (C554 * C112 + C139463 * C560) * C244) *
                        C91 +
                    (C745 + C735) * C90 + C747 * C89) *
                       C139448 * C139346 * C95)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C4828 +
                     (C554 * C245 + C139463 * C719) * C4653 -
                     (C554 * C1700 + C139463 * C2264) * C4829 -
                     (C554 * C1879 + C139463 * C2460) * C4654 +
                     (C554 * C4656 + C139463 * C5191) * C4830 +
                     (C554 * C4831 + C139463 * C5373) * C4655) *
                        C89 +
                    (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C90 +
                    (C5385 + C5386 - C5387 - C5388 + C5389 + C5395) * C91) *
                       C139448 * C139346 * C139562 +
                   ((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C89 +
                    (C5387 - (C5386 + C5385) + C5388 - C5389 - C5395) * C90 +
                    (C2290 * C4829 - (C740 * C4653 + C588 * C4828) +
                     C2484 * C4654 - (C554 * C4659 + C139463 * C5194) * C4830 -
                     (C554 * C4834 + C139463 * C5376) * C4655) *
                        C91) *
                       C139448 * C139346 * C139308)) /
                     (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C3364 +
                                (C100 * C116 + C89 * C125 + C101 * C117 +
                                 C90 * C126 + C102 * C118 + C91 * C127) *
                                    C139303) *
                                   C139448 * C139463 * C139372 * C3360 -
                               ((C102 * C837 + C91 * C844 + C101 * C838 +
                                 C90 * C845 + C100 * C839 + C89 * C846) *
                                    C139303 +
                                (C102 * C830 + C91 * C835 + C101 * C829 +
                                 C90 * C834 + C100 * C832 + C89 * C840) *
                                    C3364) *
                                   C139448 * C139463 * C139372 * C3361 +
                               ((C100 * C2570 + C89 * C2574 + C101 * C2571 +
                                 C90 * C2575 + C102 * C2572 + C91 * C2576) *
                                    C3364 +
                                (C100 * C2577 + C89 * C2582 + C101 * C2578 +
                                 C90 * C2583 + C102 * C2579 + C91 * C2584) *
                                    C139303) *
                                   C139448 * C139463 * C139372 * C3362 -
                               ((C102 * C3368 + C91 * C3374 + C101 * C3369 +
                                 C90 * C3375 + C100 * C3370 + C89 * C3376) *
                                    C139303 +
                                (C102 * C3365 + C91 * C3371 + C101 * C3366 +
                                 C90 * C3372 + C100 * C3367 + C89 * C3373) *
                                    C3364) *
                                   C139448 * C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C826 +
                               (C100 * C116 + C89 * C125 + C101 * C117 +
                                C90 * C126 + C102 * C118 + C91 * C127) *
                                   C821 -
                               (C102 * C110 + C91 * C119 + C101 * C109 +
                                C90 * C115 + C100 * C108 + C89 * C114) *
                                   C827 -
                               (C102 * C120 + C91 * C128 + C101 * C118 +
                                C90 * C127 + C100 * C117 + C89 * C126) *
                                   C822 +
                               (C100 * C109 + C89 * C115 + C101 * C110 +
                                C90 * C119 + C102 * C111 + C91 * C121) *
                                   C828 +
                               (C100 * C118 + C89 * C127 + C101 * C120 +
                                C90 * C128 + C102 * C122 + C91 * C129) *
                                   C823) *
                                  C139448 * C139463 * C139372 * C139570 +
                              ((C100 * C829 + C89 * C834 + C101 * C830 +
                                C90 * C835 + C102 * C831 + C91 * C836) *
                                   C827 -
                               ((C102 * C837 + C91 * C844 + C101 * C838 +
                                 C90 * C845 + C100 * C839 + C89 * C846) *
                                    C821 +
                                (C102 * C830 + C91 * C835 + C101 * C829 +
                                 C90 * C834 + C100 * C832 + C89 * C840) *
                                    C826) +
                               (C100 * C838 + C89 * C845 + C101 * C837 +
                                C90 * C844 + C102 * C841 + C91 * C847) *
                                   C822 -
                               (C102 * C833 + C91 * C842 + C101 * C831 +
                                C90 * C836 + C100 * C830 + C89 * C835) *
                                   C828 -
                               (C102 * C843 + C91 * C848 + C101 * C841 +
                                C90 * C847 + C100 * C837 + C89 * C844) *
                                   C823) *
                                  C139448 * C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C3364 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C139303) *
               C139448 * C139463 * C4653 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C139303 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C3364) *
               C139448 * C139463 * C4654 +
           ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
             C102 * C4658 + C91 * C4662) *
                C3364 +
            (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
             C102 * C4665 + C91 * C4670) *
                C139303) *
               C139448 * C139463 * C4655) *
              C139570 +
          (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C3364 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C139303) *
               C139448 * C139463 * C4654 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C139303 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C3364) *
               C139448 * C139463 * C4653 -
           ((C102 * C5472 + C91 * C5478 + C101 * C5473 + C90 * C5479 +
             C100 * C5474 + C89 * C5480) *
                C139303 +
            (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
             C100 * C5471 + C89 * C5477) *
                C3364) *
               C139448 * C139463 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] += (-std::pow(Pi, 2.5) *
                  ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                    C102 * C109 + C91 * C115) *
                       C3427 +
                   (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                    C102 * C184 + C91 * C190) *
                       C3360 -
                   (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                    C100 * C832 + C89 * C840) *
                       C3428 -
                   (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                    C100 * C927 + C89 * C932) *
                       C3361 +
                   (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                    C102 * C2572 + C91 * C2576) *
                       C3429 +
                   (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                    C102 * C2665 + C91 * C2669) *
                       C3362 -
                   (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                    C100 * C3367 + C89 * C3373) *
                       C3430 -
                   (C102 * C3431 + C91 * C3434 + C101 * C3432 + C90 * C3435 +
                    C100 * C3433 + C89 * C3436) *
                       C3363) *
                  C139448 * C139463 * C139303 * C139372) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C923 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139570 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C924 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C139360) *
                       C139448 * C139463 * C821 +
                   ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                     C102 * C831 + C91 * C836) *
                        C924 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139570 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C923) +
                    (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                     C102 * C928 + C91 * C933) *
                        C139360) *
                       C139448 * C139463 * C822 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C923 +
                    (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                     C102 * C186 + C91 * C192) *
                        C139570 -
                    (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                     C100 * C830 + C89 * C835) *
                        C924 -
                    (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 +
                     C100 * C925 + C89 * C930) *
                        C139360) *
                       C139448 * C139463 * C823) *
                  C139372) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C923 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C139570 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C924 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C139360) *
                       C139448 * C139463 * C139303 * C4653 +
                   ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                     C102 * C3893 + C91 * C3899) *
                        C924 -
                    ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                      C100 * C1794 + C89 * C1799) *
                         C139570 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C923) +
                    (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                     C102 * C3991 + C91 * C3997) *
                        C139360) *
                       C139448 * C139463 * C139303 * C4654 +
                   ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                     C102 * C4658 + C91 * C4662) *
                        C923 +
                    (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                     C102 * C4748 + C91 * C4752) *
                        C139570 -
                    (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                     C100 * C5471 + C89 * C5477) *
                        C924 -
                    (C102 * C5555 + C91 * C5558 + C101 * C5556 + C90 * C5559 +
                     C100 * C5557 + C89 * C5560) *
                        C139360) *
                       C139448 * C139463 * C139303 * C4655)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C244 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C139372) *
              C139448 * C139463 * C3360 -
          ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
            C100 * C1011 + C89 * C1016) *
               C139372 +
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C244) *
              C139448 * C139463 * C3361 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C244 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C139372) *
              C139448 * C139463 * C3362 -
          ((C102 * C3487 + C91 * C3490 + C101 * C3488 + C90 * C3491 +
            C100 * C3489 + C89 * C3492) *
               C139372 +
           (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
            C100 * C3367 + C89 * C3373) *
               C244) *
              C139448 * C139463 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C244 +
                                (C100 * C245 + C89 * C251 + C101 * C246 +
                                 C90 * C252 + C102 * C247 + C91 * C253) *
                                    C139372) *
                                   C139448 * C139463 * C139570 -
                               ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                                 C90 * C1015 + C100 * C1011 + C89 * C1016) *
                                    C139372 +
                                (C102 * C830 + C91 * C835 + C101 * C829 +
                                 C90 * C834 + C100 * C832 + C89 * C840) *
                                    C244) *
                                   C139448 * C139463 * C139360) *
                                  C821 +
                              (((C100 * C829 + C89 * C834 + C101 * C830 +
                                 C90 * C835 + C102 * C831 + C91 * C836) *
                                    C244 +
                                (C100 * C1010 + C89 * C1015 + C101 * C1009 +
                                 C90 * C1014 + C102 * C1012 + C91 * C1017) *
                                    C139372) *
                                   C139448 * C139463 * C139360 -
                               ((C102 * C248 + C91 * C254 + C101 * C247 +
                                 C90 * C253 + C100 * C246 + C89 * C252) *
                                    C139372 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C244) *
                                   C139448 * C139463 * C139570) *
                                  C822 +
                              (((C100 * C109 + C89 * C115 + C101 * C110 +
                                 C90 * C119 + C102 * C111 + C91 * C121) *
                                    C244 +
                                (C100 * C247 + C89 * C253 + C101 * C248 +
                                 C90 * C254 + C102 * C249 + C91 * C255) *
                                    C139372) *
                                   C139448 * C139463 * C139570 -
                               ((C102 * C1013 + C91 * C1018 + C101 * C1012 +
                                 C90 * C1017 + C100 * C1009 + C89 * C1014) *
                                    C139372 +
                                (C102 * C833 + C91 * C842 + C101 * C831 +
                                 C90 * C836 + C100 * C830 + C89 * C835) *
                                    C244) *
                                   C139448 * C139463 * C139360) *
                                  C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C4828 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C4653 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C4829 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C4654 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C4830 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C4655) *
              C139448 * C139463 * C139570 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C4829 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C4653 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C4828) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C4654 -
           (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
            C100 * C5471 + C89 * C5477) *
               C4830 -
           (C102 * C5635 + C91 * C5638 + C101 * C5636 + C90 * C5639 +
            C100 * C5637 + C89 * C5640) *
               C4655) *
              C139448 * C139463 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] += (-std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139448 * C308) * C3364 +
                     (C307 * C116 + C139448 * C314) * C139303) *
                        C139463 * C89 +
                    (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                    (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                       C139372 * C3360 -
                   ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                    (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                    ((C307 * C839 + C139448 * C1098) * C139303 +
                     (C307 * C832 + C139448 * C1094) * C3364) *
                        C139463 * C89) *
                       C139372 * C3361 +
                   (((C307 * C2570 + C139448 * C2827) * C3364 +
                     (C307 * C2577 + C139448 * C2831) * C139303) *
                        C139463 * C89 +
                    (C2844 * C3364 + C2845 * C139303) * C139463 * C90 +
                    (C2846 * C3364 + C2847 * C139303) * C139463 * C91) *
                       C139372 * C3362 -
                   (((C307 * C3368 + C139448 * C3546) * C139303 +
                     (C307 * C3365 + C139448 * C3543) * C3364) *
                        C139463 * C91 +
                    ((C307 * C3369 + C139448 * C3547) * C139303 +
                     (C307 * C3366 + C139448 * C3544) * C3364) *
                        C139463 * C90 +
                    ((C307 * C3370 + C139448 * C3548) * C139303 +
                     (C307 * C3367 + C139448 * C3545) * C3364) *
                        C139463 * C89) *
                       C139372 * C3363)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139448 * C308) * C826 +
                     (C307 * C116 + C139448 * C314) * C821 - C337 * C827 -
                     C338 * C822 + C339 * C828 + C340 * C823) *
                        C139463 * C89 +
                    (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                     C341 * C828 + C342 * C823) *
                        C139463 * C90 +
                    (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                     C343 * C828 + C344 * C823) *
                        C139463 * C91) *
                       C139372 * C139570 +
                   ((C1116 * C827 -
                     ((C307 * C839 + C139448 * C1098) * C821 +
                      (C307 * C832 + C139448 * C1094) * C826) +
                     C1117 * C822 - C1118 * C828 - C1119 * C823) *
                        C139463 * C89 +
                    (C1118 * C827 - (C1117 * C821 + C1116 * C826) +
                     C1119 * C822 - C1120 * C828 - C1121 * C823) *
                        C139463 * C90 +
                    (C1120 * C827 - (C1119 * C821 + C1118 * C826) +
                     C1121 * C822 - (C307 * C833 + C139448 * C1097) * C828 -
                     (C307 * C843 + C139448 * C1102) * C823) *
                        C139463 * C91) *
                       C139372 * C139360)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139448 * C308) * C3364 +
                      (C307 * C116 + C139448 * C314) * C139303) *
                         C139463 * C89 +
                     (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                     (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                        C4653 -
                    ((C1987 * C139303 + C1986 * C3364) * C139463 * C91 +
                     (C1985 * C139303 + C1984 * C3364) * C139463 * C90 +
                     ((C307 * C1707 + C139448 * C1966) * C139303 +
                      (C307 * C1700 + C139448 * C1962) * C3364) *
                         C139463 * C89) *
                        C4654 +
                    (((C307 * C4656 + C139448 * C4913) * C3364 +
                      (C307 * C4663 + C139448 * C4917) * C139303) *
                         C139463 * C89 +
                     (C4930 * C3364 + C4931 * C139303) * C139463 * C90 +
                     (C4932 * C3364 + C4933 * C139303) * C139463 * C91) *
                        C4655) *
                       C139570 +
                   ((((C307 * C3891 + C139448 * C4161) * C3364 +
                      (C307 * C3900 + C139448 * C4167) * C139303) *
                         C139463 * C89 +
                     ((C307 * C3892 + C139448 * C4162) * C3364 +
                      (C307 * C3901 + C139448 * C4168) * C139303) *
                         C139463 * C90 +
                     ((C307 * C3893 + C139448 * C4163) * C3364 +
                      (C307 * C3902 + C139448 * C4169) * C139303) *
                         C139463 * C91) *
                        C4654 -
                    ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                     (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                     ((C307 * C839 + C139448 * C1098) * C139303 +
                      (C307 * C832 + C139448 * C1094) * C3364) *
                         C139463 * C89) *
                        C4653 -
                    (((C307 * C5472 + C139448 * C5718) * C139303 +
                      (C307 * C5469 + C139448 * C5715) * C3364) *
                         C139463 * C91 +
                     ((C307 * C5473 + C139448 * C5719) * C139303 +
                      (C307 * C5470 + C139448 * C5716) * C3364) *
                         C139463 * C90 +
                     ((C307 * C5474 + C139448 * C5720) * C139303 +
                      (C307 * C5471 + C139448 * C5717) * C3364) *
                         C139463 * C89) *
                        C4655) *
                       C139360)) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C3427 +
           (C307 * C182 + C139448 * C394) * C3360 -
           (C307 * C832 + C139448 * C1094) * C3428 -
           (C307 * C927 + C139448 * C1195) * C3361 +
           (C307 * C2570 + C139448 * C2827) * C3429 +
           (C307 * C2663 + C139448 * C2921) * C3362 -
           (C307 * C3367 + C139448 * C3545) * C3430 -
           (C307 * C3433 + C139448 * C3599) * C3363) *
              C139463 * C89 +
          (C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
           C2844 * C3429 + C2940 * C3362 -
           (C307 * C3366 + C139448 * C3544) * C3430 -
           (C307 * C3432 + C139448 * C3600) * C3363) *
              C139463 * C90 +
          (C339 * C3427 + C414 * C3360 - C1118 * C3428 - C1218 * C3361 +
           C2846 * C3429 + C2941 * C3362 -
           (C307 * C3365 + C139448 * C3543) * C3430 -
           (C307 * C3431 + C139448 * C3601) * C3363) *
              C139463 * C91) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C923 +
            (C307 * C182 + C139448 * C394) * C139570 -
            (C307 * C832 + C139448 * C1094) * C924 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C139463 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C139463 * C90 + C1225 * C91) *
              C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C139463 * C89 +
           (C1208 - (C1207 + C1206) + C1222) * C139463 * C90 +
           (C1211 - (C1212 + C1213) + C1223) * C139463 * C91) *
              C822 +
          (C1225 * C89 + (C1213 + C1212 - C1211 - C1223) * C139463 * C90 +
           (C343 * C923 + C416 * C139570 -
            (C307 * C833 + C139448 * C1097) * C924 -
            (C307 * C929 + C139448 * C1199) * C139360) *
               C139463 * C91) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C923 +
            (C307 * C182 + C139448 * C394) * C139570 -
            (C307 * C832 + C139448 * C1094) * C924 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C139463 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C139463 * C90 + C1225 * C91) *
              C139303 * C4653 +
          (((C307 * C3891 + C139448 * C4161) * C924 -
            ((C307 * C1794 + C139448 * C2066) * C139570 +
             (C307 * C1700 + C139448 * C1962) * C923) +
            (C307 * C3989 + C139448 * C4247) * C139360) *
               C139463 * C89 +
           ((C307 * C3892 + C139448 * C4162) * C924 -
            (C2078 * C139570 + C1984 * C923) +
            (C307 * C3990 + C139448 * C4249) * C139360) *
               C139463 * C90 +
           ((C307 * C3893 + C139448 * C4163) * C924 -
            (C2079 * C139570 + C1986 * C923) +
            (C307 * C3991 + C139448 * C4251) * C139360) *
               C139463 * C91) *
              C139303 * C4654 +
          (((C307 * C4656 + C139448 * C4913) * C923 +
            (C307 * C4746 + C139448 * C5007) * C139570 -
            (C307 * C5471 + C139448 * C5717) * C924 -
            (C307 * C5557 + C139448 * C5795) * C139360) *
               C139463 * C89 +
           (C4930 * C923 + C5018 * C139570 -
            (C307 * C5470 + C139448 * C5716) * C924 -
            (C307 * C5556 + C139448 * C5796) * C139360) *
               C139463 * C90 +
           (C4932 * C923 + C5019 * C139570 -
            (C307 * C5469 + C139448 * C5715) * C924 -
            (C307 * C5555 + C139448 * C5797) * C139360) *
               C139463 * C91) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C244 +
            (C307 * C245 + C139448 * C474) * C139372) *
               C139463 * C89 +
           (C481 + C497) * C139463 * C90 + C503 * C91) *
              C3360 -
          (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
           ((C307 * C1011 + C139448 * C1301) * C139372 +
            (C307 * C832 + C139448 * C1094) * C244) *
               C139463 * C89) *
              C3361 +
          (((C307 * C2570 + C139448 * C2827) * C244 +
            (C307 * C2745 + C139448 * C3017) * C139372) *
               C139463 * C89 +
           (C3022 + C3030) * C139463 * C90 + (C3025 + C3031) * C139463 * C91) *
              C3362 -
          (((C307 * C3487 + C139448 * C3652) * C139372 +
            (C307 * C3365 + C139448 * C3543) * C244) *
               C139463 * C91 +
           ((C307 * C3488 + C139448 * C3653) * C139372 +
            (C307 * C3366 + C139448 * C3544) * C244) *
               C139463 * C90 +
           ((C307 * C3489 + C139448 * C3654) * C139372 +
            (C307 * C3367 + C139448 * C3545) * C244) *
               C139463 * C89) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C139463 * C89 +
            (C481 + C497) * C139463 * C90 + C503 * C91) *
               C139570 -
           (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C139463 * C89) *
               C139360) *
              C821 +
          (((C1310 + C1318) * C139463 * C89 + (C1307 + C1317) * C139463 * C90 +
            (C1311 + C1319) * C139463 * C91) *
               C139360 -
           (C504 * C91 + (C498 + C484) * C139463 * C90 +
            (C497 + C481) * C139463 * C89) *
               C139570) *
              C822 +
          ((C503 * C89 + (C489 + C499) * C139463 * C90 +
            (C490 + C500) * C139463 * C91) *
               C139570 -
           (((C307 * C1013 + C139448 * C1303) * C139372 +
             (C307 * C833 + C139448 * C1097) * C244) *
                C139463 * C91 +
            (C1319 + C1311) * C139463 * C90 + C1321 * C89) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C4828 +
            (C307 * C245 + C139448 * C474) * C4653 -
            (C307 * C1700 + C139448 * C1962) * C4829 -
            (C307 * C1879 + C139448 * C2159) * C4654 +
            (C307 * C4656 + C139448 * C4913) * C4830 +
            (C307 * C4831 + C139448 * C5095) * C4655) *
               C139463 * C89 +
           (C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C139463 * C90 +
           (C5107 + C5108 - C5109 - C5110 + C5111 + C5117) * C139463 * C91) *
              C139570 +
          (((C307 * C3891 + C139448 * C4161) * C4829 -
            ((C307 * C1011 + C139448 * C1301) * C4653 +
             (C307 * C832 + C139448 * C1094) * C4828) +
            (C307 * C4075 + C139448 * C4327) * C4654 -
            (C307 * C5471 + C139448 * C5717) * C4830 -
            (C307 * C5637 + C139448 * C5872) * C4655) *
               C139463 * C89 +
           ((C307 * C3892 + C139448 * C4162) * C4829 -
            (C1315 * C4653 + C1116 * C4828) +
            (C307 * C4076 + C139448 * C4328) * C4654 -
            (C307 * C5470 + C139448 * C5716) * C4830 -
            (C307 * C5636 + C139448 * C5873) * C4655) *
               C139463 * C90 +
           ((C307 * C3893 + C139448 * C4163) * C4829 -
            (C1314 * C4653 + C1118 * C4828) +
            (C307 * C4077 + C139448 * C4329) * C4654 -
            (C307 * C5469 + C139448 * C5715) * C4830 -
            (C307 * C5635 + C139448 * C5874) * C4655) *
               C139463 * C91) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::pow(Pi, 2.5) * ((((C554 * C107 + C139463 * C555) * C3364 +
                                 (C554 * C116 + C139463 * C561) * C139303) *
                                    C89 +
                                (C584 * C3364 + C585 * C139303) * C90 +
                                (C586 * C3364 + C587 * C139303) * C91) *
                                   C139448 * C139372 * C3360 -
                               ((C1421 * C139303 + C1420 * C3364) * C91 +
                                (C1419 * C139303 + C1418 * C3364) * C90 +
                                ((C554 * C839 + C139463 * C1400) * C139303 +
                                 (C554 * C832 + C139463 * C1396) * C3364) *
                                    C89) *
                                   C139448 * C139372 * C3361 +
                               (((C554 * C2570 + C139463 * C3105) * C3364 +
                                 (C554 * C2577 + C139463 * C3109) * C139303) *
                                    C89 +
                                (C3122 * C3364 + C3123 * C139303) * C90 +
                                (C3124 * C3364 + C3125 * C139303) * C91) *
                                   C139448 * C139372 * C3362 -
                               (((C554 * C3368 + C139463 * C3708) * C139303 +
                                 (C554 * C3365 + C139463 * C3705) * C3364) *
                                    C91 +
                                ((C554 * C3369 + C139463 * C3709) * C139303 +
                                 (C554 * C3366 + C139463 * C3706) * C3364) *
                                    C90 +
                                ((C554 * C3370 + C139463 * C3710) * C139303 +
                                 (C554 * C3367 + C139463 * C3707) * C3364) *
                                    C89) *
                                   C139448 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C826 +
            (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
            C586 * C828 + C587 * C823) *
               C89 +
           (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
            C588 * C828 + C589 * C823) *
               C90 +
           (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
            C590 * C828 + C591 * C823) *
               C91) *
              C139448 * C139372 * C139570 +
          ((C1418 * C827 -
            ((C554 * C839 + C139463 * C1400) * C821 +
             (C554 * C832 + C139463 * C1396) * C826) +
            C1419 * C822 - C1420 * C828 - C1421 * C823) *
               C89 +
           (C1420 * C827 - (C1419 * C821 + C1418 * C826) + C1421 * C822 -
            C1422 * C828 - C1423 * C823) *
               C90 +
           (C1422 * C827 - (C1421 * C821 + C1420 * C826) + C1423 * C822 -
            (C554 * C833 + C139463 * C1399) * C828 -
            (C554 * C843 + C139463 * C1404) * C823) *
               C91) *
              C139448 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C89 +
            (C584 * C3364 + C585 * C139303) * C90 +
            (C586 * C3364 + C587 * C139303) * C91) *
               C139448 * C4653 -
           ((C2289 * C139303 + C2288 * C3364) * C91 +
            (C2287 * C139303 + C2286 * C3364) * C90 +
            ((C554 * C1707 + C139463 * C2268) * C139303 +
             (C554 * C1700 + C139463 * C2264) * C3364) *
                C89) *
               C139448 * C4654 +
           (((C554 * C4656 + C139463 * C5191) * C3364 +
             (C554 * C4663 + C139463 * C5195) * C139303) *
                C89 +
            (C5208 * C3364 + C5209 * C139303) * C90 +
            (C5210 * C3364 + C5211 * C139303) * C91) *
               C139448 * C4655) *
              C139570 +
          ((((C554 * C3891 + C139463 * C4407) * C3364 +
             (C554 * C3900 + C139463 * C4413) * C139303) *
                C89 +
            ((C554 * C3892 + C139463 * C4408) * C3364 +
             (C554 * C3901 + C139463 * C4414) * C139303) *
                C90 +
            ((C554 * C3893 + C139463 * C4409) * C3364 +
             (C554 * C3902 + C139463 * C4415) * C139303) *
                C91) *
               C139448 * C4654 -
           ((C1421 * C139303 + C1420 * C3364) * C91 +
            (C1419 * C139303 + C1418 * C3364) * C90 +
            ((C554 * C839 + C139463 * C1400) * C139303 +
             (C554 * C832 + C139463 * C1396) * C3364) *
                C89) *
               C139448 * C4653 -
           (((C554 * C5472 + C139463 * C5952) * C139303 +
             (C554 * C5469 + C139463 * C5949) * C3364) *
                C91 +
            ((C554 * C5473 + C139463 * C5953) * C139303 +
             (C554 * C5470 + C139463 * C5950) * C3364) *
                C90 +
            ((C554 * C5474 + C139463 * C5954) * C139303 +
             (C554 * C5471 + C139463 * C5951) * C3364) *
                C89) *
               C139448 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] += (-std::pow(Pi, 2.5) *
                  (((C554 * C107 + C139463 * C555) * C3427 +
                    (C554 * C182 + C139463 * C641) * C3360 -
                    (C554 * C832 + C139463 * C1396) * C3428 -
                    (C554 * C927 + C139463 * C1497) * C3361 +
                    (C554 * C2570 + C139463 * C3105) * C3429 +
                    (C554 * C2663 + C139463 * C3199) * C3362 -
                    (C554 * C3367 + C139463 * C3707) * C3430 -
                    (C554 * C3433 + C139463 * C3761) * C3363) *
                       C89 +
                   (C584 * C3427 + C660 * C3360 - C1418 * C3428 -
                    C1518 * C3361 + C3122 * C3429 + C3218 * C3362 -
                    (C554 * C3366 + C139463 * C3706) * C3430 -
                    (C554 * C3432 + C139463 * C3762) * C3363) *
                       C90 +
                   (C586 * C3427 + C661 * C3360 - C1420 * C3428 -
                    C1520 * C3361 + C3124 * C3429 + C3219 * C3362 -
                    (C554 * C3365 + C139463 * C3705) * C3430 -
                    (C554 * C3431 + C139463 * C3763) * C3363) *
                       C91) *
                  C139448 * C139303 * C139372) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C923 +
                     (C554 * C182 + C139463 * C641) * C139570 -
                     (C554 * C832 + C139463 * C1396) * C924 -
                     (C554 * C927 + C139463 * C1497) * C139360) *
                        C89 +
                    (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
                       C139448 * C821 +
                   ((C1505 - (C1504 + C1503) + C1522) * C89 +
                    (C1510 - (C1509 + C1508) + C1524) * C90 +
                    (C1513 - (C1514 + C1515) + C1525) * C91) *
                       C139448 * C822 +
                   (C1526 * C89 + (C1515 + C1514 - C1513 - C1525) * C90 +
                    (C590 * C923 + C663 * C139570 -
                     (C554 * C833 + C139463 * C1399) * C924 -
                     (C554 * C929 + C139463 * C1501) * C139360) *
                        C91) *
                       C139448 * C823) *
                  C139372) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C923 +
                     (C554 * C182 + C139463 * C641) * C139570 -
                     (C554 * C832 + C139463 * C1396) * C924 -
                     (C554 * C927 + C139463 * C1497) * C139360) *
                        C89 +
                    (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
                       C139448 * C139303 * C4653 +
                   (((C554 * C3891 + C139463 * C4407) * C924 -
                     ((C554 * C1794 + C139463 * C2368) * C139570 +
                      (C554 * C1700 + C139463 * C2264) * C923) +
                     (C554 * C3989 + C139463 * C4493) * C139360) *
                        C89 +
                    ((C554 * C3892 + C139463 * C4408) * C924 -
                     (C2380 * C139570 + C2286 * C923) +
                     (C554 * C3990 + C139463 * C4495) * C139360) *
                        C90 +
                    ((C554 * C3893 + C139463 * C4409) * C924 -
                     (C2381 * C139570 + C2288 * C923) +
                     (C554 * C3991 + C139463 * C4497) * C139360) *
                        C91) *
                       C139448 * C139303 * C4654 +
                   (((C554 * C4656 + C139463 * C5191) * C923 +
                     (C554 * C4746 + C139463 * C5285) * C139570 -
                     (C554 * C5471 + C139463 * C5951) * C924 -
                     (C554 * C5557 + C139463 * C6029) * C139360) *
                        C89 +
                    (C5208 * C923 + C5296 * C139570 -
                     (C554 * C5470 + C139463 * C5950) * C924 -
                     (C554 * C5556 + C139463 * C6030) * C139360) *
                        C90 +
                    (C5210 * C923 + C5297 * C139570 -
                     (C554 * C5469 + C139463 * C5949) * C924 -
                     (C554 * C5555 + C139463 * C6031) * C139360) *
                        C91) *
                       C139448 * C139303 * C4655)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[7] += (-std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C244 +
                     (C554 * C245 + C139463 * C719) * C139372) *
                        C89 +
                    (C726 + C742) * C90 + C746 * C91) *
                       C139448 * C3360 -
                   (C1621 * C91 + (C1619 + C1611) * C90 +
                    ((C554 * C1011 + C139463 * C1602) * C139372 +
                     (C554 * C832 + C139463 * C1396) * C244) *
                        C89) *
                       C139448 * C3361 +
                   (((C554 * C2570 + C139463 * C3105) * C244 +
                     (C554 * C2745 + C139463 * C3295) * C139372) *
                        C89 +
                    (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                       C139448 * C3362 -
                   (((C554 * C3487 + C139463 * C3814) * C139372 +
                     (C554 * C3365 + C139463 * C3705) * C244) *
                        C91 +
                    ((C554 * C3488 + C139463 * C3815) * C139372 +
                     (C554 * C3366 + C139463 * C3706) * C244) *
                        C90 +
                    ((C554 * C3489 + C139463 * C3816) * C139372 +
                     (C554 * C3367 + C139463 * C3707) * C244) *
                        C89) *
                       C139448 * C3363) *
                  C139303) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C244 +
                      (C554 * C245 + C139463 * C719) * C139372) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139448 * C139570 -
                    (C1621 * C91 + (C1619 + C1611) * C90 +
                     ((C554 * C1011 + C139463 * C1602) * C139372 +
                      (C554 * C832 + C139463 * C1396) * C244) *
                         C89) *
                        C139448 * C139360) *
                       C821 +
                   (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                     (C1612 + C1620) * C91) *
                        C139448 * C139360 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139448 * C139570) *
                       C822 +
                   ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                        C139448 * C139570 -
                    (((C554 * C1013 + C139463 * C1604) * C139372 +
                      (C554 * C833 + C139463 * C1399) * C244) *
                         C91 +
                     (C1620 + C1612) * C90 + C1621 * C89) *
                        C139448 * C139360) *
                       C823)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C4828 +
                     (C554 * C245 + C139463 * C719) * C4653 -
                     (C554 * C1700 + C139463 * C2264) * C4829 -
                     (C554 * C1879 + C139463 * C2460) * C4654 +
                     (C554 * C4656 + C139463 * C5191) * C4830 +
                     (C554 * C4831 + C139463 * C5373) * C4655) *
                        C89 +
                    (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C90 +
                    (C5385 + C5386 - C5387 - C5388 + C5389 + C5395) * C91) *
                       C139448 * C139570 +
                   (((C554 * C3891 + C139463 * C4407) * C4829 -
                     ((C554 * C1011 + C139463 * C1602) * C4653 +
                      (C554 * C832 + C139463 * C1396) * C4828) +
                     (C554 * C4075 + C139463 * C4573) * C4654 -
                     (C554 * C5471 + C139463 * C5951) * C4830 -
                     (C554 * C5637 + C139463 * C6106) * C4655) *
                        C89 +
                    ((C554 * C3892 + C139463 * C4408) * C4829 -
                     (C1616 * C4653 + C1418 * C4828) +
                     (C554 * C4076 + C139463 * C4574) * C4654 -
                     (C554 * C5470 + C139463 * C5950) * C4830 -
                     (C554 * C5636 + C139463 * C6107) * C4655) *
                        C90 +
                    ((C554 * C3893 + C139463 * C4409) * C4829 -
                     (C1615 * C4653 + C1420 * C4828) +
                     (C554 * C4077 + C139463 * C4575) * C4654 -
                     (C554 * C5469 + C139463 * C5949) * C4830 -
                     (C554 * C5635 + C139463 * C6108) * C4655) *
                        C91) *
                       C139448 * C139360) *
                  C139303) /
                     (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (-std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                  C90 * C114 + C102 * C109 + C91 * C115) *
                                     C3364 +
                                 (C100 * C116 + C89 * C125 + C101 * C117 +
                                  C90 * C126 + C102 * C118 + C91 * C127) *
                                     C139303) *
                                    C139448 * C139463 * C139571 -
                                ((C102 * C1705 + C91 * C1712 + C101 * C1706 +
                                  C90 * C1713 + C100 * C1707 + C89 * C1714) *
                                     C139303 +
                                 (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                  C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                     C3364) *
                                    C139448 * C139463 * C139384) *
                                   C2565 +
                               (((C100 * C3891 + C89 * C3897 + C101 * C3892 +
                                  C90 * C3898 + C102 * C3893 + C91 * C3899) *
                                     C3364 +
                                 (C100 * C3900 + C89 * C3909 + C101 * C3901 +
                                  C90 * C3910 + C102 * C3902 + C91 * C3911) *
                                     C139303) *
                                    C139448 * C139463 * C139384 -
                                ((C102 * C837 + C91 * C844 + C101 * C838 +
                                  C90 * C845 + C100 * C839 + C89 * C846) *
                                     C139303 +
                                 (C102 * C830 + C91 * C835 + C101 * C829 +
                                  C90 * C834 + C100 * C832 + C89 * C840) *
                                     C3364) *
                                    C139448 * C139463 * C139571) *
                                   C2566 +
                               (((C100 * C2570 + C89 * C2574 + C101 * C2571 +
                                  C90 * C2575 + C102 * C2572 + C91 * C2576) *
                                     C3364 +
                                 (C100 * C2577 + C89 * C2582 + C101 * C2578 +
                                  C90 * C2583 + C102 * C2579 + C91 * C2584) *
                                     C139303) *
                                    C139448 * C139463 * C139571 -
                                ((C102 * C3903 + C91 * C3912 + C101 * C3904 +
                                  C90 * C3913 + C100 * C3905 + C89 * C3914) *
                                     C139303 +
                                 (C102 * C3894 + C91 * C3906 + C101 * C3895 +
                                  C90 * C3907 + C100 * C3896 + C89 * C3908) *
                                     C3364) *
                                    C139448 * C139463 * C139384) *
                                   C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C139448 * C139463 * C139571 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C827 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C821 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C826) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C822 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C828 -
           (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
            C100 * C1705 + C89 * C1712) *
               C823) *
              C139448 * C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C3364 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C139303) *
              C139448 * C139463 * C6159 -
          ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
            C100 * C1707 + C89 * C1714) *
               C139303 +
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C3364) *
              C139448 * C139463 * C6160 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C3364 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C139303) *
              C139448 * C139463 * C6161 -
          ((C102 * C6166 + C91 * C6172 + C101 * C6167 + C90 * C6173 +
            C100 * C6168 + C89 * C6174) *
               C139303 +
           (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
            C100 * C6165 + C89 * C6171) *
               C3364) *
              C139448 * C139463 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (-std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C2660 +
                                (C100 * C182 + C89 * C188 + C101 * C183 +
                                 C90 * C189 + C102 * C184 + C91 * C190) *
                                    C2565 -
                                (C102 * C830 + C91 * C835 + C101 * C829 +
                                 C90 * C834 + C100 * C832 + C89 * C840) *
                                    C2661 -
                                (C102 * C925 + C91 * C930 + C101 * C926 +
                                 C90 * C931 + C100 * C927 + C89 * C932) *
                                    C2566 +
                                (C100 * C2570 + C89 * C2574 + C101 * C2571 +
                                 C90 * C2575 + C102 * C2572 + C91 * C2576) *
                                    C2662 +
                                (C100 * C2663 + C89 * C2667 + C101 * C2664 +
                                 C90 * C2668 + C102 * C2665 + C91 * C2669) *
                                    C2567) *
                                   C139448 * C139463 * C139303 * C139571 +
                               ((C100 * C3891 + C89 * C3897 + C101 * C3892 +
                                 C90 * C3898 + C102 * C3893 + C91 * C3899) *
                                    C2661 -
                                ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                                  C90 * C1796 + C100 * C1794 + C89 * C1799) *
                                     C2565 +
                                 (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                  C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                     C2660) +
                                (C100 * C3989 + C89 * C3995 + C101 * C3990 +
                                 C90 * C3996 + C102 * C3991 + C91 * C3997) *
                                    C2566 -
                                (C102 * C3894 + C91 * C3906 + C101 * C3895 +
                                 C90 * C3907 + C100 * C3896 + C89 * C3908) *
                                    C2662 -
                                (C102 * C3992 + C91 * C3998 + C101 * C3993 +
                                 C90 * C3999 + C100 * C3994 + C89 * C4000) *
                                    C2567) *
                                   C139448 * C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C181 +
                                (C100 * C182 + C89 * C188 + C101 * C183 +
                                 C90 * C189 + C102 * C184 + C91 * C190) *
                                    C139346) *
                                   C139448 * C139463 * C821 -
                               ((C102 * C185 + C91 * C191 + C101 * C184 +
                                 C90 * C190 + C100 * C183 + C89 * C189) *
                                    C139346 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C181) *
                                   C139448 * C139463 * C822 +
                               ((C100 * C109 + C89 * C115 + C101 * C110 +
                                 C90 * C119 + C102 * C111 + C91 * C121) *
                                    C181 +
                                (C100 * C184 + C89 * C190 + C101 * C185 +
                                 C90 * C191 + C102 * C186 + C91 * C192) *
                                    C139346) *
                                   C139448 * C139463 * C823) *
                                  C139571 +
                              (((C100 * C1697 + C89 * C1702 + C101 * C1698 +
                                 C90 * C1703 + C102 * C1699 + C91 * C1704) *
                                    C181 +
                                (C100 * C1791 + C89 * C1796 + C101 * C1792 +
                                 C90 * C1797 + C102 * C1793 + C91 * C1798) *
                                    C139346) *
                                   C139448 * C139463 * C822 -
                               ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                                 C90 * C1796 + C100 * C1794 + C89 * C1799) *
                                    C139346 +
                                (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                 C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                    C181) *
                                   C139448 * C139463 * C821 -
                               ((C102 * C1795 + C91 * C1800 + C101 * C1793 +
                                 C90 * C1798 + C100 * C1792 + C89 * C1797) *
                                    C139346 +
                                (C102 * C1701 + C91 * C1710 + C101 * C1699 +
                                 C90 * C1704 + C100 * C1698 + C89 * C1703) *
                                    C181) *
                                   C139448 * C139463 * C823) *
                                  C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C181 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C139346) *
              C139448 * C139463 * C139303 * C6159 -
          ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
            C100 * C1794 + C89 * C1799) *
               C139346 +
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C181) *
              C139448 * C139463 * C139303 * C6160 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C181 +
           (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
            C102 * C4748 + C91 * C4752) *
               C139346) *
              C139448 * C139463 * C139303 * C6161 -
          ((C102 * C6225 + C91 * C6228 + C101 * C6226 + C90 * C6229 +
            C100 * C6227 + C89 * C6230) *
               C139346 +
           (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
            C100 * C6165 + C89 * C6171) *
               C181) *
              C139448 * C139463 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (-std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C139571 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C139384) *
              C139448 * C139463 * C2565 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C1876 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C139571 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C1875) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C139384) *
              C139448 * C139463 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C1875 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C139571 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C1876 -
           (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
            C100 * C4080 + C89 * C4086) *
               C139384) *
              C139448 * C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C1875 +
                               (C100 * C245 + C89 * C251 + C101 * C246 +
                                C90 * C252 + C102 * C247 + C91 * C253) *
                                   C139571 -
                               (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                   C1876 -
                               (C102 * C1877 + C91 * C1882 + C101 * C1878 +
                                C90 * C1883 + C100 * C1879 + C89 * C1884) *
                                   C139384) *
                                  C139448 * C139463 * C139346 * C821 +
                              ((C100 * C1697 + C89 * C1702 + C101 * C1698 +
                                C90 * C1703 + C102 * C1699 + C91 * C1704) *
                                   C1876 -
                               ((C102 * C248 + C91 * C254 + C101 * C247 +
                                 C90 * C253 + C100 * C246 + C89 * C252) *
                                    C139571 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C1875) +
                               (C100 * C1878 + C89 * C1883 + C101 * C1877 +
                                C90 * C1882 + C102 * C1880 + C91 * C1885) *
                                   C139384) *
                                  C139448 * C139463 * C139346 * C822 +
                              ((C100 * C109 + C89 * C115 + C101 * C110 +
                                C90 * C119 + C102 * C111 + C91 * C121) *
                                   C1875 +
                               (C100 * C247 + C89 * C253 + C101 * C248 +
                                C90 * C254 + C102 * C249 + C91 * C255) *
                                   C139571 -
                               (C102 * C1701 + C91 * C1710 + C101 * C1699 +
                                C90 * C1704 + C100 * C1698 + C89 * C1703) *
                                   C1876 -
                               (C102 * C1881 + C91 * C1886 + C101 * C1880 +
                                C90 * C1885 + C100 * C1877 + C89 * C1882) *
                                   C139384) *
                                  C139448 * C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C6281 +
          (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
           C91 * C253) *
              C6159 -
          (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
           C100 * C1700 + C89 * C1708) *
              C6282 -
          (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
           C100 * C1879 + C89 * C1884) *
              C6160 +
          (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
           C102 * C4658 + C91 * C4662) *
              C6283 +
          (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
           C102 * C4833 + C91 * C4837) *
              C6161 -
          (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
           C100 * C6165 + C89 * C6171) *
              C6284 -
          (C102 * C6285 + C91 * C6288 + C101 * C6286 + C90 * C6289 +
           C100 * C6287 + C89 * C6290) *
              C6162) *
         C139448 * C139463 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[8] += (-std::pow(Pi, 2.5) *
                  (((((C307 * C107 + C139448 * C308) * C3364 +
                      (C307 * C116 + C139448 * C314) * C139303) *
                         C139463 * C89 +
                     (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                     (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                        C139571 -
                    ((C1987 * C139303 + C1986 * C3364) * C139463 * C91 +
                     (C1985 * C139303 + C1984 * C3364) * C139463 * C90 +
                     ((C307 * C1707 + C139448 * C1966) * C139303 +
                      (C307 * C1700 + C139448 * C1962) * C3364) *
                         C139463 * C89) *
                        C139384) *
                       C2565 +
                   ((((C307 * C3891 + C139448 * C4161) * C3364 +
                      (C307 * C3900 + C139448 * C4167) * C139303) *
                         C139463 * C89 +
                     ((C307 * C3892 + C139448 * C4162) * C3364 +
                      (C307 * C3901 + C139448 * C4168) * C139303) *
                         C139463 * C90 +
                     ((C307 * C3893 + C139448 * C4163) * C3364 +
                      (C307 * C3902 + C139448 * C4169) * C139303) *
                         C139463 * C91) *
                        C139384 -
                    ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                     (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                     ((C307 * C839 + C139448 * C1098) * C139303 +
                      (C307 * C832 + C139448 * C1094) * C3364) *
                         C139463 * C89) *
                        C139571) *
                       C2566 +
                   ((((C307 * C2570 + C139448 * C2827) * C3364 +
                      (C307 * C2577 + C139448 * C2831) * C139303) *
                         C139463 * C89 +
                     (C2844 * C3364 + C2845 * C139303) * C139463 * C90 +
                     (C2846 * C3364 + C2847 * C139303) * C139463 * C91) *
                        C139571 -
                    (((C307 * C3903 + C139448 * C4170) * C139303 +
                      (C307 * C3894 + C139448 * C4164) * C3364) *
                         C139463 * C91 +
                     ((C307 * C3904 + C139448 * C4171) * C139303 +
                      (C307 * C3895 + C139448 * C4165) * C3364) *
                         C139463 * C90 +
                     ((C307 * C3905 + C139448 * C4172) * C139303 +
                      (C307 * C3896 + C139448 * C4166) * C3364) *
                         C139463 * C89) *
                        C139384) *
                       C2567)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139448 * C308) * C826 +
                     (C307 * C116 + C139448 * C314) * C821 - C337 * C827 -
                     C338 * C822 + C339 * C828 + C340 * C823) *
                        C139463 * C89 +
                    (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                     C341 * C828 + C342 * C823) *
                        C139463 * C90 +
                    (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                     C343 * C828 + C344 * C823) *
                        C139463 * C91) *
                       C139571 +
                   ((C1984 * C827 -
                     ((C307 * C1707 + C139448 * C1966) * C821 +
                      (C307 * C1700 + C139448 * C1962) * C826) +
                     C1985 * C822 - C1986 * C828 - C1987 * C823) *
                        C139463 * C89 +
                    (C1986 * C827 - (C1985 * C821 + C1984 * C826) +
                     C1987 * C822 - C1988 * C828 - C1989 * C823) *
                        C139463 * C90 +
                    (C1988 * C827 - (C1987 * C821 + C1986 * C826) +
                     C1989 * C822 - (C307 * C1701 + C139448 * C1965) * C828 -
                     (C307 * C1711 + C139448 * C1970) * C823) *
                        C139463 * C91) *
                       C139384) *
                  C139346) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C307 * C107 + C139448 * C308) * C3364 +
                     (C307 * C116 + C139448 * C314) * C139303) *
                        C139463 * C89 +
                    (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                    (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                       C6159 -
                   ((C1987 * C139303 + C1986 * C3364) * C139463 * C91 +
                    (C1985 * C139303 + C1984 * C3364) * C139463 * C90 +
                    ((C307 * C1707 + C139448 * C1966) * C139303 +
                     (C307 * C1700 + C139448 * C1962) * C3364) *
                        C139463 * C89) *
                       C6160 +
                   (((C307 * C4656 + C139448 * C4913) * C3364 +
                     (C307 * C4663 + C139448 * C4917) * C139303) *
                        C139463 * C89 +
                    (C4930 * C3364 + C4931 * C139303) * C139463 * C90 +
                    (C4932 * C3364 + C4933 * C139303) * C139463 * C91) *
                       C6161 -
                   (((C307 * C6166 + C139448 * C6344) * C139303 +
                     (C307 * C6163 + C139448 * C6341) * C3364) *
                        C139463 * C91 +
                    ((C307 * C6167 + C139448 * C6345) * C139303 +
                     (C307 * C6164 + C139448 * C6342) * C3364) *
                        C139463 * C90 +
                    ((C307 * C6168 + C139448 * C6346) * C139303 +
                     (C307 * C6165 + C139448 * C6343) * C3364) *
                        C139463 * C89) *
                       C6162) *
                  C139346) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C139463 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C139463 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C139463 * C91) *
              C139303 * C139571 +
          (((C307 * C3891 + C139448 * C4161) * C2661 -
            ((C307 * C1794 + C139448 * C2066) * C2565 +
             (C307 * C1700 + C139448 * C1962) * C2660) +
            (C307 * C3989 + C139448 * C4247) * C2566 -
            (C307 * C3896 + C139448 * C4166) * C2662 -
            (C307 * C3994 + C139448 * C4248) * C2567) *
               C139463 * C89 +
           ((C307 * C3892 + C139448 * C4162) * C2661 -
            (C2078 * C2565 + C1984 * C2660) +
            (C307 * C3990 + C139448 * C4249) * C2566 -
            (C307 * C3895 + C139448 * C4165) * C2662 -
            (C307 * C3993 + C139448 * C4250) * C2567) *
               C139463 * C90 +
           ((C307 * C3893 + C139448 * C4163) * C2661 -
            (C2079 * C2565 + C1986 * C2660) +
            (C307 * C3991 + C139448 * C4251) * C2566 -
            (C307 * C3894 + C139448 * C4164) * C2662 -
            (C307 * C3992 + C139448 * C4252) * C2567) *
               C139463 * C91) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C139463 * C89 +
            (C401 + C417) * C139463 * C90 + C423 * C91) *
               C821 -
           (C424 * C91 + (C418 + C404) * C139463 * C90 +
            (C417 + C401) * C139463 * C89) *
               C822 +
           (C423 * C89 + (C409 + C419) * C139463 * C90 +
            (C410 + C420) * C139463 * C91) *
               C823) *
              C139571 +
          (((C2069 + C2081) * C139463 * C89 + (C2072 + C2082) * C139463 * C90 +
            (C2075 + C2083) * C139463 * C91) *
               C822 -
           (C2085 * C91 + (C2081 + C2069) * C139463 * C90 +
            ((C307 * C1794 + C139448 * C2066) * C139346 +
             (C307 * C1700 + C139448 * C1962) * C181) *
                C139463 * C89) *
               C821 -
           (((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139463 * C91 +
            (C2083 + C2075) * C139463 * C90 + C2085 * C89) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C181 +
            (C307 * C182 + C139448 * C394) * C139346) *
               C139463 * C89 +
           (C401 + C417) * C139463 * C90 + C423 * C91) *
              C139303 * C6159 -
          (C2085 * C91 + (C2081 + C2069) * C139463 * C90 +
           ((C307 * C1794 + C139448 * C2066) * C139346 +
            (C307 * C1700 + C139448 * C1962) * C181) *
               C139463 * C89) *
              C139303 * C6160 +
          (((C307 * C4656 + C139448 * C4913) * C181 +
            (C307 * C4746 + C139448 * C5007) * C139346) *
               C139463 * C89 +
           (C5012 + C5020) * C139463 * C90 + (C5015 + C5021) * C139463 * C91) *
              C139303 * C6161 -
          (((C307 * C6225 + C139448 * C6397) * C139346 +
            (C307 * C6163 + C139448 * C6341) * C181) *
               C139463 * C91 +
           ((C307 * C6226 + C139448 * C6398) * C139346 +
            (C307 * C6164 + C139448 * C6342) * C181) *
               C139463 * C90 +
           ((C307 * C6227 + C139448 * C6399) * C139346 +
            (C307 * C6165 + C139448 * C6343) * C181) *
               C139463 * C89) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 -
            (C307 * C1700 + C139448 * C1962) * C1876 -
            (C307 * C1879 + C139448 * C2159) * C139384) *
               C139463 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C139463 * C90 + C2189 * C91) *
              C2565 +
          (((C307 * C3891 + C139448 * C4161) * C1876 -
            ((C307 * C1011 + C139448 * C1301) * C139571 +
             (C307 * C832 + C139448 * C1094) * C1875) +
            (C307 * C4075 + C139448 * C4327) * C139384) *
               C139463 * C89 +
           ((C307 * C3892 + C139448 * C4162) * C1876 -
            (C1315 * C139571 + C1116 * C1875) +
            (C307 * C4076 + C139448 * C4328) * C139384) *
               C139463 * C90 +
           ((C307 * C3893 + C139448 * C4163) * C1876 -
            (C1314 * C139571 + C1118 * C1875) +
            (C307 * C4077 + C139448 * C4329) * C139384) *
               C139463 * C91) *
              C2566 +
          (((C307 * C2570 + C139448 * C2827) * C1875 +
            (C307 * C2745 + C139448 * C3017) * C139571 -
            (C307 * C3896 + C139448 * C4166) * C1876 -
            (C307 * C4080 + C139448 * C4330) * C139384) *
               C139463 * C89 +
           (C2844 * C1875 + C3028 * C139571 -
            (C307 * C3895 + C139448 * C4165) * C1876 -
            (C307 * C4079 + C139448 * C4331) * C139384) *
               C139463 * C90 +
           (C2846 * C1875 + C3029 * C139571 -
            (C307 * C3894 + C139448 * C4164) * C1876 -
            (C307 * C4078 + C139448 * C4332) * C139384) *
               C139463 * C91) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 -
            (C307 * C1700 + C139448 * C1962) * C1876 -
            (C307 * C1879 + C139448 * C2159) * C139384) *
               C139463 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C139463 * C90 + C2189 * C91) *
              C139346 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C139463 * C89 +
           (C2172 - (C2171 + C2170) + C2186) * C139463 * C90 +
           (C2175 - (C2176 + C2177) + C2187) * C139463 * C91) *
              C139346 * C822 +
          (C2189 * C89 + (C2177 + C2176 - C2175 - C2187) * C139463 * C90 +
           (C343 * C1875 + C496 * C139571 -
            (C307 * C1701 + C139448 * C1965) * C1876 -
            (C307 * C1881 + C139448 * C2163) * C139384) *
               C139463 * C91) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C6281 +
           (C307 * C245 + C139448 * C474) * C6159 -
           (C307 * C1700 + C139448 * C1962) * C6282 -
           (C307 * C1879 + C139448 * C2159) * C6160 +
           (C307 * C4656 + C139448 * C4913) * C6283 +
           (C307 * C4831 + C139448 * C5095) * C6161 -
           (C307 * C6165 + C139448 * C6343) * C6284 -
           (C307 * C6287 + C139448 * C6450) * C6162) *
              C139463 * C89 +
          (C337 * C6281 + C493 * C6159 - C1984 * C6282 - C2180 * C6160 +
           C4930 * C6283 + C5114 * C6161 -
           (C307 * C6164 + C139448 * C6342) * C6284 -
           (C307 * C6286 + C139448 * C6451) * C6162) *
              C139463 * C90 +
          (C339 * C6281 + C494 * C6159 - C1986 * C6282 - C2182 * C6160 +
           C4932 * C6283 + C5115 * C6161 -
           (C307 * C6163 + C139448 * C6341) * C6284 -
           (C307 * C6285 + C139448 * C6452) * C6162) *
              C139463 * C91) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (-std::pow(Pi, 2.5) * (((((C554 * C107 + C139463 * C555) * C3364 +
                                  (C554 * C116 + C139463 * C561) * C139303) *
                                     C89 +
                                 (C584 * C3364 + C585 * C139303) * C90 +
                                 (C586 * C3364 + C587 * C139303) * C91) *
                                    C139448 * C139571 -
                                ((C2289 * C139303 + C2288 * C3364) * C91 +
                                 (C2287 * C139303 + C2286 * C3364) * C90 +
                                 ((C554 * C1707 + C139463 * C2268) * C139303 +
                                  (C554 * C1700 + C139463 * C2264) * C3364) *
                                     C89) *
                                    C139448 * C139384) *
                                   C2565 +
                               ((((C554 * C3891 + C139463 * C4407) * C3364 +
                                  (C554 * C3900 + C139463 * C4413) * C139303) *
                                     C89 +
                                 ((C554 * C3892 + C139463 * C4408) * C3364 +
                                  (C554 * C3901 + C139463 * C4414) * C139303) *
                                     C90 +
                                 ((C554 * C3893 + C139463 * C4409) * C3364 +
                                  (C554 * C3902 + C139463 * C4415) * C139303) *
                                     C91) *
                                    C139448 * C139384 -
                                ((C1421 * C139303 + C1420 * C3364) * C91 +
                                 (C1419 * C139303 + C1418 * C3364) * C90 +
                                 ((C554 * C839 + C139463 * C1400) * C139303 +
                                  (C554 * C832 + C139463 * C1396) * C3364) *
                                     C89) *
                                    C139448 * C139571) *
                                   C2566 +
                               ((((C554 * C2570 + C139463 * C3105) * C3364 +
                                  (C554 * C2577 + C139463 * C3109) * C139303) *
                                     C89 +
                                 (C3122 * C3364 + C3123 * C139303) * C90 +
                                 (C3124 * C3364 + C3125 * C139303) * C91) *
                                    C139448 * C139571 -
                                (((C554 * C3903 + C139463 * C4416) * C139303 +
                                  (C554 * C3894 + C139463 * C4410) * C3364) *
                                     C91 +
                                 ((C554 * C3904 + C139463 * C4417) * C139303 +
                                  (C554 * C3895 + C139463 * C4411) * C3364) *
                                     C90 +
                                 ((C554 * C3905 + C139463 * C4418) * C139303 +
                                  (C554 * C3896 + C139463 * C4412) * C3364) *
                                     C89) *
                                    C139448 * C139384) *
                                   C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C826 +
            (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
            C586 * C828 + C587 * C823) *
               C89 +
           (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
            C588 * C828 + C589 * C823) *
               C90 +
           (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
            C590 * C828 + C591 * C823) *
               C91) *
              C139448 * C139571 +
          ((C2286 * C827 -
            ((C554 * C1707 + C139463 * C2268) * C821 +
             (C554 * C1700 + C139463 * C2264) * C826) +
            C2287 * C822 - C2288 * C828 - C2289 * C823) *
               C89 +
           (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
            C2290 * C828 - C2291 * C823) *
               C90 +
           (C2290 * C827 - (C2289 * C821 + C2288 * C826) + C2291 * C822 -
            (C554 * C1701 + C139463 * C2267) * C828 -
            (C554 * C1711 + C139463 * C2272) * C823) *
               C91) *
              C139448 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C3364 +
            (C554 * C116 + C139463 * C561) * C139303) *
               C89 +
           (C584 * C3364 + C585 * C139303) * C90 +
           (C586 * C3364 + C587 * C139303) * C91) *
              C139448 * C6159 -
          ((C2289 * C139303 + C2288 * C3364) * C91 +
           (C2287 * C139303 + C2286 * C3364) * C90 +
           ((C554 * C1707 + C139463 * C2268) * C139303 +
            (C554 * C1700 + C139463 * C2264) * C3364) *
               C89) *
              C139448 * C6160 +
          (((C554 * C4656 + C139463 * C5191) * C3364 +
            (C554 * C4663 + C139463 * C5195) * C139303) *
               C89 +
           (C5208 * C3364 + C5209 * C139303) * C90 +
           (C5210 * C3364 + C5211 * C139303) * C91) *
              C139448 * C6161 -
          (((C554 * C6166 + C139463 * C6506) * C139303 +
            (C554 * C6163 + C139463 * C6503) * C3364) *
               C91 +
           ((C554 * C6167 + C139463 * C6507) * C139303 +
            (C554 * C6164 + C139463 * C6504) * C3364) *
               C90 +
           ((C554 * C6168 + C139463 * C6508) * C139303 +
            (C554 * C6165 + C139463 * C6505) * C3364) *
               C89) *
              C139448 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[8] += (-std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C2660 +
                     (C554 * C182 + C139463 * C641) * C2565 -
                     (C554 * C832 + C139463 * C1396) * C2661 -
                     (C554 * C927 + C139463 * C1497) * C2566 +
                     (C554 * C2570 + C139463 * C3105) * C2662 +
                     (C554 * C2663 + C139463 * C3199) * C2567) *
                        C89 +
                    (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
                    (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
                       C139448 * C139303 * C139571 +
                   (((C554 * C3891 + C139463 * C4407) * C2661 -
                     ((C554 * C1794 + C139463 * C2368) * C2565 +
                      (C554 * C1700 + C139463 * C2264) * C2660) +
                     (C554 * C3989 + C139463 * C4493) * C2566 -
                     (C554 * C3896 + C139463 * C4412) * C2662 -
                     (C554 * C3994 + C139463 * C4494) * C2567) *
                        C89 +
                    ((C554 * C3892 + C139463 * C4408) * C2661 -
                     (C2380 * C2565 + C2286 * C2660) +
                     (C554 * C3990 + C139463 * C4495) * C2566 -
                     (C554 * C3895 + C139463 * C4411) * C2662 -
                     (C554 * C3993 + C139463 * C4496) * C2567) *
                        C90 +
                    ((C554 * C3893 + C139463 * C4409) * C2661 -
                     (C2381 * C2565 + C2288 * C2660) +
                     (C554 * C3991 + C139463 * C4497) * C2566 -
                     (C554 * C3894 + C139463 * C4410) * C2662 -
                     (C554 * C3992 + C139463 * C4498) * C2567) *
                        C91) *
                       C139448 * C139303 * C139384)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C181 +
                      (C554 * C182 + C139463 * C641) * C139346) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139448 * C821 -
                    (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                        C139448 * C822 +
                    (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                        C139448 * C823) *
                       C139571 +
                   (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                     (C2377 + C2385) * C91) *
                        C139448 * C822 -
                    (C2386 * C91 + (C2383 + C2371) * C90 +
                     ((C554 * C1794 + C139463 * C2368) * C139346 +
                      (C554 * C1700 + C139463 * C2264) * C181) *
                         C89) *
                        C139448 * C821 -
                    (((C554 * C1795 + C139463 * C2369) * C139346 +
                      (C554 * C1701 + C139463 * C2267) * C181) *
                         C91 +
                     (C2385 + C2377) * C90 + C2386 * C89) *
                        C139448 * C823) *
                       C139384)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C181 +
                     (C554 * C182 + C139463 * C641) * C139346) *
                        C89 +
                    (C648 + C664) * C90 + C668 * C91) *
                       C139448 * C139303 * C6159 -
                   (C2386 * C91 + (C2383 + C2371) * C90 +
                    ((C554 * C1794 + C139463 * C2368) * C139346 +
                     (C554 * C1700 + C139463 * C2264) * C181) *
                        C89) *
                       C139448 * C139303 * C6160 +
                   (((C554 * C4656 + C139463 * C5191) * C181 +
                     (C554 * C4746 + C139463 * C5285) * C139346) *
                        C89 +
                    (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
                       C139448 * C139303 * C6161 -
                   (((C554 * C6225 + C139463 * C6559) * C139346 +
                     (C554 * C6163 + C139463 * C6503) * C181) *
                        C91 +
                    ((C554 * C6226 + C139463 * C6560) * C139346 +
                     (C554 * C6164 + C139463 * C6504) * C181) *
                        C90 +
                    ((C554 * C6227 + C139463 * C6561) * C139346 +
                     (C554 * C6165 + C139463 * C6505) * C181) *
                        C89) *
                       C139448 * C139303 * C6162)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[8] += (-std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C1875 +
                     (C554 * C245 + C139463 * C719) * C139571 -
                     (C554 * C1700 + C139463 * C2264) * C1876 -
                     (C554 * C1879 + C139463 * C2460) * C139384) *
                        C89 +
                    (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                       C139448 * C2565 +
                   (((C554 * C3891 + C139463 * C4407) * C1876 -
                     ((C554 * C1011 + C139463 * C1602) * C139571 +
                      (C554 * C832 + C139463 * C1396) * C1875) +
                     (C554 * C4075 + C139463 * C4573) * C139384) *
                        C89 +
                    ((C554 * C3892 + C139463 * C4408) * C1876 -
                     (C1616 * C139571 + C1418 * C1875) +
                     (C554 * C4076 + C139463 * C4574) * C139384) *
                        C90 +
                    ((C554 * C3893 + C139463 * C4409) * C1876 -
                     (C1615 * C139571 + C1420 * C1875) +
                     (C554 * C4077 + C139463 * C4575) * C139384) *
                        C91) *
                       C139448 * C2566 +
                   (((C554 * C2570 + C139463 * C3105) * C1875 +
                     (C554 * C2745 + C139463 * C3295) * C139571 -
                     (C554 * C3896 + C139463 * C4412) * C1876 -
                     (C554 * C4080 + C139463 * C4576) * C139384) *
                        C89 +
                    (C3122 * C1875 + C3306 * C139571 -
                     (C554 * C3895 + C139463 * C4411) * C1876 -
                     (C554 * C4079 + C139463 * C4577) * C139384) *
                        C90 +
                    (C3124 * C1875 + C3307 * C139571 -
                     (C554 * C3894 + C139463 * C4410) * C1876 -
                     (C554 * C4078 + C139463 * C4578) * C139384) *
                        C91) *
                       C139448 * C2567) *
                  C139303) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C1875 +
                     (C554 * C245 + C139463 * C719) * C139571 -
                     (C554 * C1700 + C139463 * C2264) * C1876 -
                     (C554 * C1879 + C139463 * C2460) * C139384) *
                        C89 +
                    (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                       C139448 * C139346 * C821 +
                   ((C2468 - (C2467 + C2466) + C2485) * C89 +
                    (C2473 - (C2472 + C2471) + C2487) * C90 +
                    (C2476 - (C2477 + C2478) + C2488) * C91) *
                       C139448 * C139346 * C822 +
                   (C2489 * C89 + (C2478 + C2477 - C2476 - C2488) * C90 +
                    (C590 * C1875 + C741 * C139571 -
                     (C554 * C1701 + C139463 * C2267) * C1876 -
                     (C554 * C1881 + C139463 * C2464) * C139384) *
                        C91) *
                       C139448 * C139346 * C823)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C554 * C107 + C139463 * C555) * C6281 +
                    (C554 * C245 + C139463 * C719) * C6159 -
                    (C554 * C1700 + C139463 * C2264) * C6282 -
                    (C554 * C1879 + C139463 * C2460) * C6160 +
                    (C554 * C4656 + C139463 * C5191) * C6283 +
                    (C554 * C4831 + C139463 * C5373) * C6161 -
                    (C554 * C6165 + C139463 * C6505) * C6284 -
                    (C554 * C6287 + C139463 * C6612) * C6162) *
                       C89 +
                   (C584 * C6281 + C738 * C6159 - C2286 * C6282 -
                    C2481 * C6160 + C5208 * C6283 + C5392 * C6161 -
                    (C554 * C6164 + C139463 * C6504) * C6284 -
                    (C554 * C6286 + C139463 * C6613) * C6162) *
                       C90 +
                   (C586 * C6281 + C739 * C6159 - C2288 * C6282 -
                    C2483 * C6160 + C5210 * C6283 + C5393 * C6161 -
                    (C554 * C6163 + C139463 * C6503) * C6284 -
                    (C554 * C6285 + C139463 * C6614) * C6162) *
                       C91) *
                  C139448 * C139346 * C139303) /
                     (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C6694 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C139601 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C6695 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C139590 +
                    (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C6696 +
                    (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                     C102 * C122 + C91 * C129) *
                        C6691) *
                       C139448 * C139463 * C9074 +
                   ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                     C102 * C1699 + C91 * C1704) *
                        C6695 -
                    ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                      C100 * C1707 + C89 * C1714) *
                         C139601 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C6694) +
                    (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                     C102 * C1709 + C91 * C1715) *
                        C139590 -
                    (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                     C100 * C1698 + C89 * C1703) *
                        C6696 -
                    (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
                     C100 * C1705 + C89 * C1712) *
                        C6691) *
                       C139448 * C139463 * C139384) *
                  C139346) /
                 (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C181 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139346) *
                        C139448 * C139463 * C139601 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139346 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C181) *
                        C139448 * C139463 * C139590 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C181 +
                     (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                      C102 * C186 + C91 * C192) *
                         C139346) *
                        C139448 * C139463 * C6691) *
                       C9074 +
                   (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C181 +
                     (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                      C102 * C1793 + C91 * C1798) *
                         C139346) *
                        C139448 * C139463 * C139590 -
                    ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                      C100 * C1794 + C89 * C1799) *
                         C139346 +
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C181) *
                        C139448 * C139463 * C139601 -
                    ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
                      C100 * C1792 + C89 * C1797) *
                         C139346 +
                     (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                      C100 * C1698 + C89 * C1703) *
                         C181) *
                        C139448 * C139463 * C6691) *
                       C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C9224 +
                    (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                     C102 * C247 + C91 * C253) *
                        C9074 -
                    (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                     C100 * C1700 + C89 * C1708) *
                        C9225 -
                    (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                     C100 * C1879 + C89 * C1884) *
                        C139384) *
                       C139448 * C139463 * C139346 * C139601 +
                   ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                     C102 * C1699 + C91 * C1704) *
                        C9225 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C9074 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C9224) +
                    (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                     C102 * C1880 + C91 * C1885) *
                        C139384) *
                       C139448 * C139463 * C139346 * C139590 +
                   ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C9224 +
                    (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                     C102 * C249 + C91 * C255) *
                        C9074 -
                    (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                     C100 * C1698 + C89 * C1703) *
                        C9225 -
                    (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
                     C100 * C1877 + C89 * C1882) *
                        C139384) *
                       C139448 * C139463 * C139346 * C6691)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6694 +
            (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
            C338 * C139590 + C339 * C6696 + C340 * C6691) *
               C139463 * C89 +
           (C337 * C6694 + C338 * C139601 - C339 * C6695 - C340 * C139590 +
            C341 * C6696 + C342 * C6691) *
               C139463 * C90 +
           (C339 * C6694 + C340 * C139601 - C341 * C6695 - C342 * C139590 +
            C343 * C6696 + C344 * C6691) *
               C139463 * C91) *
              C9074 +
          ((C1984 * C6695 -
            ((C307 * C1707 + C139448 * C1966) * C139601 +
             (C307 * C1700 + C139448 * C1962) * C6694) +
            C1985 * C139590 - C1986 * C6696 - C1987 * C6691) *
               C139463 * C89 +
           (C1986 * C6695 - (C1985 * C139601 + C1984 * C6694) +
            C1987 * C139590 - C1988 * C6696 - C1989 * C6691) *
               C139463 * C90 +
           (C1988 * C6695 - (C1987 * C139601 + C1986 * C6694) +
            C1989 * C139590 - (C307 * C1701 + C139448 * C1965) * C6696 -
            (C307 * C1711 + C139448 * C1970) * C6691) *
               C139463 * C91) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C139463 * C89 +
            (C401 + C417) * C139463 * C90 + C423 * C91) *
               C139601 -
           (C424 * C91 + (C418 + C404) * C139463 * C90 +
            (C417 + C401) * C139463 * C89) *
               C139590 +
           (C423 * C89 + (C409 + C419) * C139463 * C90 +
            (C410 + C420) * C139463 * C91) *
               C6691) *
              C9074 +
          (((C2069 + C2081) * C139463 * C89 + (C2072 + C2082) * C139463 * C90 +
            (C2075 + C2083) * C139463 * C91) *
               C139590 -
           (C2085 * C91 + (C2081 + C2069) * C139463 * C90 +
            ((C307 * C1794 + C139448 * C2066) * C139346 +
             (C307 * C1700 + C139448 * C1962) * C181) *
                C139463 * C89) *
               C139601 -
           (((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139463 * C91 +
            (C2083 + C2075) * C139463 * C90 + C2085 * C89) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C9224 +
            (C307 * C245 + C139448 * C474) * C9074 -
            (C307 * C1700 + C139448 * C1962) * C9225 -
            (C307 * C1879 + C139448 * C2159) * C139384) *
               C139463 * C89 +
           (C9449 + C9450 - C9451 - C9452) * C139463 * C90 + C9464 * C91) *
              C139346 * C139601 +
          ((C9451 - (C9450 + C9449) + C9452) * C139463 * C89 +
           (C9455 - (C9454 + C9453) + C9456) * C139463 * C90 +
           (C9457 - (C9458 + C9459) + C9460) * C139463 * C91) *
              C139346 * C139590 +
          (C9464 * C89 + (C9459 + C9458 - C9457 - C9460) * C139463 * C90 +
           (C343 * C9224 + C496 * C9074 -
            (C307 * C1701 + C139448 * C1965) * C9225 -
            (C307 * C1881 + C139448 * C2163) * C139384) *
               C139463 * C91) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C6694 +
            (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
            C585 * C139590 + C586 * C6696 + C587 * C6691) *
               C89 +
           (C584 * C6694 + C585 * C139601 - C586 * C6695 - C587 * C139590 +
            C588 * C6696 + C589 * C6691) *
               C90 +
           (C586 * C6694 + C587 * C139601 - C588 * C6695 - C589 * C139590 +
            C590 * C6696 + C591 * C6691) *
               C91) *
              C139448 * C9074 +
          ((C2286 * C6695 -
            ((C554 * C1707 + C139463 * C2268) * C139601 +
             (C554 * C1700 + C139463 * C2264) * C6694) +
            C2287 * C139590 - C2288 * C6696 - C2289 * C6691) *
               C89 +
           (C2288 * C6695 - (C2287 * C139601 + C2286 * C6694) +
            C2289 * C139590 - C2290 * C6696 - C2291 * C6691) *
               C90 +
           (C2290 * C6695 - (C2289 * C139601 + C2288 * C6694) +
            C2291 * C139590 - (C554 * C1701 + C139463 * C2267) * C6696 -
            (C554 * C1711 + C139463 * C2272) * C6691) *
               C91) *
              C139448 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C554 * C107 + C139463 * C555) * C181 +
                      (C554 * C182 + C139463 * C641) * C139346) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139448 * C139601 -
                    (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                        C139448 * C139590 +
                    (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                        C139448 * C6691) *
                       C9074 +
                   (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                     (C2377 + C2385) * C91) *
                        C139448 * C139590 -
                    (C2386 * C91 + (C2383 + C2371) * C90 +
                     ((C554 * C1794 + C139463 * C2368) * C139346 +
                      (C554 * C1700 + C139463 * C2264) * C181) *
                         C89) *
                        C139448 * C139601 -
                    (((C554 * C1795 + C139463 * C2369) * C139346 +
                      (C554 * C1701 + C139463 * C2267) * C181) *
                         C91 +
                     (C2385 + C2377) * C90 + C2386 * C89) *
                        C139448 * C6691) *
                       C139384)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[9] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C554 * C107 + C139463 * C555) * C9224 +
                     (C554 * C245 + C139463 * C719) * C9074 -
                     (C554 * C1700 + C139463 * C2264) * C9225 -
                     (C554 * C1879 + C139463 * C2460) * C139384) *
                        C89 +
                    (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                       C139448 * C139346 * C139601 +
                   ((C9689 - (C9688 + C9687) + C9690) * C89 +
                    (C9693 - (C9692 + C9691) + C9694) * C90 +
                    (C9695 - (C9696 + C9697) + C9698) * C91) *
                       C139448 * C139346 * C139590 +
                   (C9701 * C89 + (C9697 + C9696 - C9695 - C9698) * C90 +
                    (C590 * C9224 + C741 * C9074 -
                     (C554 * C1701 + C139463 * C2267) * C9225 -
                     (C554 * C1881 + C139463 * C2464) * C139384) *
                        C91) *
                       C139448 * C139346 * C6691)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C7401 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C7396 -
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C7402 -
                      (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                       C100 * C117 + C89 * C126) *
                          C139308) *
                         C139448 * C139463 * C9074 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C7402 -
                      ((C102 * C1705 + C91 * C1712 + C101 * C1706 +
                        C90 * C1713 + C100 * C1707 + C89 * C1714) *
                           C7396 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C7401) +
                      (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                       C102 * C1709 + C91 * C1715) *
                          C139308) *
                         C139448 * C139463 * C139384) *
                        C139570 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C7402 -
                      ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                        C100 * C839 + C89 * C846) *
                           C7396 +
                       (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                        C100 * C832 + C89 * C840) *
                           C7401) +
                      (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                       C102 * C841 + C91 * C847) *
                          C139308) *
                         C139448 * C139463 * C9074 +
                     ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C7401 +
                      (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                       C102 * C3902 + C91 * C3911) *
                          C7396 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C7402 -
                      (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
                       C100 * C3901 + C89 * C3910) *
                          C139308) *
                         C139448 * C139463 * C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C923 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C139570 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C924 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C139360) *
                         C139448 * C139463 * C7396 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C924 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C139570 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C923) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C139360) *
                         C139448 * C139463 * C139308) *
                        C9074 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C924 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C139570 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C923) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C139360) *
                         C139448 * C139463 * C7396 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C923 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C139570 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C924 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C139360) *
                         C139448 * C139463 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C9224 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C9074 -
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C9225 -
                      (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                       C100 * C1879 + C89 * C1884) *
                          C139384) *
                         C139448 * C139463 * C139570 +
                     ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C9225 -
                      ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                        C90 * C1015 + C100 * C1011 + C89 * C1016) *
                           C9074 +
                       (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                        C100 * C832 + C89 * C840) *
                           C9224) +
                      (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                       C102 * C4077 + C91 * C4083) *
                          C139384) *
                         C139448 * C139463 * C139360) *
                        C7396 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C9225 -
                      ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                        C100 * C246 + C89 * C252) *
                           C9074 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C9224) +
                      (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                       C102 * C1880 + C91 * C1885) *
                          C139384) *
                         C139448 * C139463 * C139570 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C9224 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C9074 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C9225 -
                      (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                       C100 * C4076 + C89 * C4082) *
                          C139384) *
                         C139448 * C139463 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7401 +
             (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
             C338 * C139308) *
                C139463 * C89 +
            (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                C139463 * C90 +
            (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C139308) *
                C139463 * C91) *
               C9074 +
           ((C1984 * C7402 -
             ((C307 * C1707 + C139448 * C1966) * C7396 +
              (C307 * C1700 + C139448 * C1962) * C7401) +
             C1985 * C139308) *
                C139463 * C89 +
            (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) +
             C1987 * C139308) *
                C139463 * C90 +
            (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) +
             C1989 * C139308) *
                C139463 * C91) *
               C139384) *
              C139570 +
          (((C1116 * C7402 -
             ((C307 * C839 + C139448 * C1098) * C7396 +
              (C307 * C832 + C139448 * C1094) * C7401) +
             C1117 * C139308) *
                C139463 * C89 +
            (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
             C1119 * C139308) *
                C139463 * C90 +
            (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) +
             C1121 * C139308) *
                C139463 * C91) *
               C9074 +
           (((C307 * C3891 + C139448 * C4161) * C7401 +
             (C307 * C3900 + C139448 * C4167) * C7396 - C8433 * C7402 -
             C8434 * C139308) *
                C139463 * C89 +
            (C8433 * C7401 + C8434 * C7396 - C8435 * C7402 - C8436 * C139308) *
                C139463 * C90 +
            (C8435 * C7401 + C8436 * C7396 -
             (C307 * C8120 + C139448 * C8422) * C7402 -
             (C307 * C8122 + C139448 * C8423) * C139308) *
                C139463 * C91) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C139463 * C89 +
            (C1201 + C1202 - C1203 - C1220) * C139463 * C90 + C1225 * C91) *
               C7396 +
           ((C1203 - (C1202 + C1201) + C1220) * C139463 * C89 +
            (C1208 - (C1207 + C1206) + C1222) * C139463 * C90 +
            (C1211 - (C1212 + C1213) + C1223) * C139463 * C91) *
               C139308) *
              C9074 +
          ((((C307 * C3891 + C139448 * C4161) * C924 -
             ((C307 * C1794 + C139448 * C2066) * C139570 +
              (C307 * C1700 + C139448 * C1962) * C923) +
             (C307 * C3989 + C139448 * C4247) * C139360) *
                C139463 * C89 +
            (C10192 - (C10193 + C10194) + C10195) * C139463 * C90 +
            (C10196 - (C10197 + C10198) + C10199) * C139463 * C91) *
               C7396 +
           ((C10194 + C10193 - C10192 - C10195) * C139463 * C89 +
            (C10198 + C10197 - C10196 - C10199) * C139463 * C90 +
            (C1988 * C923 + C2080 * C139570 -
             (C307 * C8120 + C139448 * C8422) * C924 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139463 * C91) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C9224 +
             (C307 * C245 + C139448 * C474) * C9074 -
             (C307 * C1700 + C139448 * C1962) * C9225 -
             (C307 * C1879 + C139448 * C2159) * C139384) *
                C139463 * C89 +
            (C9449 + C9450 - C9451 - C9452) * C139463 * C90 + C9464 * C91) *
               C139570 +
           (((C307 * C3891 + C139448 * C4161) * C9225 -
             ((C307 * C1011 + C139448 * C1301) * C9074 +
              (C307 * C832 + C139448 * C1094) * C9224) +
             (C307 * C4075 + C139448 * C4327) * C139384) *
                C139463 * C89 +
            (C10298 - (C10299 + C10300) + C10301) * C139463 * C90 +
            (C10302 - (C10303 + C10304) + C10305) * C139463 * C91) *
               C139360) *
              C7396 +
          (((C9451 - (C9450 + C9449) + C9452) * C139463 * C89 +
            (C9455 - (C9454 + C9453) + C9456) * C139463 * C90 +
            (C9457 - (C9458 + C9459) + C9460) * C139463 * C91) *
               C139570 +
           ((C10300 + C10299 - C10298 - C10301) * C139463 * C89 +
            (C10304 + C10303 - C10302 - C10305) * C139463 * C90 +
            (C1120 * C9224 + C1316 * C9074 -
             (C307 * C8120 + C139448 * C8422) * C9225 -
             (C307 * C8322 + C139448 * C8647) * C139384) *
                C139463 * C91) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C89 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                C90 +
            (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C139308) *
                C91) *
               C139448 * C9074 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C139463 * C2268) * C7396 +
              (C554 * C1700 + C139463 * C2264) * C7401) +
             C2287 * C139308) *
                C89 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
             C2289 * C139308) *
                C90 +
            (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) +
             C2291 * C139308) *
                C91) *
               C139448 * C139384) *
              C139570 +
          (((C1418 * C7402 -
             ((C554 * C839 + C139463 * C1400) * C7396 +
              (C554 * C832 + C139463 * C1396) * C7401) +
             C1419 * C139308) *
                C89 +
            (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) +
             C1421 * C139308) *
                C90 +
            (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) +
             C1423 * C139308) *
                C91) *
               C139448 * C9074 +
           (((C554 * C3891 + C139463 * C4407) * C7401 +
             (C554 * C3900 + C139463 * C4413) * C7396 - C8771 * C7402 -
             C8772 * C139308) *
                C89 +
            (C8771 * C7401 + C8772 * C7396 - C8773 * C7402 - C8774 * C139308) *
                C90 +
            (C8773 * C7401 + C8774 * C7396 -
             (C554 * C8120 + C139463 * C8760) * C7402 -
             (C554 * C8122 + C139463 * C8761) * C139308) *
                C91) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C923 +
                       (C554 * C182 + C139463 * C641) * C139570 -
                       (C554 * C832 + C139463 * C1396) * C924 -
                       (C554 * C927 + C139463 * C1497) * C139360) *
                          C89 +
                      (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
                         C139448 * C7396 +
                     ((C1505 - (C1504 + C1503) + C1522) * C89 +
                      (C1510 - (C1509 + C1508) + C1524) * C90 +
                      (C1513 - (C1514 + C1515) + C1525) * C91) *
                         C139448 * C139308) *
                        C9074 +
                    ((((C554 * C3891 + C139463 * C4407) * C924 -
                       ((C554 * C1794 + C139463 * C2368) * C139570 +
                        (C554 * C1700 + C139463 * C2264) * C923) +
                       (C554 * C3989 + C139463 * C4493) * C139360) *
                          C89 +
                      (C10502 - (C10503 + C10504) + C10505) * C90 +
                      (C10506 - (C10507 + C10508) + C10509) * C91) *
                         C139448 * C7396 +
                     ((C10504 + C10503 - C10502 - C10505) * C89 +
                      (C10508 + C10507 - C10506 - C10509) * C90 +
                      (C2290 * C923 + C2382 * C139570 -
                       (C554 * C8120 + C139463 * C8760) * C924 -
                       (C554 * C8222 + C139463 * C8872) * C139360) *
                          C91) *
                         C139448 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C9224 +
                       (C554 * C245 + C139463 * C719) * C9074 -
                       (C554 * C1700 + C139463 * C2264) * C9225 -
                       (C554 * C1879 + C139463 * C2460) * C139384) *
                          C89 +
                      (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                         C139448 * C139570 +
                     (((C554 * C3891 + C139463 * C4407) * C9225 -
                       ((C554 * C1011 + C139463 * C1602) * C9074 +
                        (C554 * C832 + C139463 * C1396) * C9224) +
                       (C554 * C4075 + C139463 * C4573) * C139384) *
                          C89 +
                      (C10608 - (C10609 + C10610) + C10611) * C90 +
                      (C10612 - (C10613 + C10614) + C10615) * C91) *
                         C139448 * C139360) *
                        C7396 +
                    (((C9689 - (C9688 + C9687) + C9690) * C89 +
                      (C9693 - (C9692 + C9691) + C9694) * C90 +
                      (C9695 - (C9696 + C9697) + C9698) * C91) *
                         C139448 * C139570 +
                     ((C10610 + C10609 - C10608 - C10611) * C89 +
                      (C10614 + C10613 - C10612 - C10615) * C90 +
                      (C1422 * C9224 + C1617 * C9074 -
                       (C554 * C8120 + C139463 * C8760) * C9225 -
                       (C554 * C8322 + C139463 * C8985) * C139384) *
                          C91) *
                         C139448 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C7401 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C7396 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C7402 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139308) *
                        C139448 * C139463 * C139603 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C7402 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C7396 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C7401) +
                     (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                      C102 * C1709 + C91 * C1715) *
                         C139308) *
                        C139448 * C139463 * C139596 +
                    ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                      C102 * C4658 + C91 * C4662) *
                         C7401 +
                     (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
                      C102 * C4665 + C91 * C4670) *
                         C7396 -
                     (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
                      C100 * C4657 + C89 * C4661) *
                         C7402 -
                     (C102 * C4667 + C91 * C4671 + C101 * C4665 + C90 * C4670 +
                      C100 * C4664 + C89 * C4669) *
                         C139308) *
                        C139448 * C139463 * C10691) *
                   C139346) /
                  (p * q * std::sqrt(p + q));
    d2eexy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C139346) *
                         C139448 * C139463 * C7396 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C139346 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C139448 * C139463 * C139308) *
                        C139603 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C181 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C139346) *
                         C139448 * C139463 * C139308 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C139346 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C181) *
                         C139448 * C139463 * C7396) *
                        C139596 +
                    (((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                       C102 * C4658 + C91 * C4662) *
                          C181 +
                      (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                       C102 * C4748 + C91 * C4752) *
                          C139346) *
                         C139448 * C139463 * C7396 -
                     ((C102 * C4749 + C91 * C4753 + C101 * C4748 + C90 * C4752 +
                       C100 * C4747 + C89 * C4751) *
                          C139346 +
                      (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
                       C100 * C4657 + C89 * C4661) *
                          C181) *
                         C139448 * C139463 * C139308) *
                        C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C10840 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139603 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C10841 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C139596 +
                     (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                      C102 * C4658 + C91 * C4662) *
                         C10842 +
                     (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
                      C102 * C4833 + C91 * C4837) *
                         C10691) *
                        C139448 * C139463 * C139346 * C7396 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C10841 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139603 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C10840) +
                     (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                      C102 * C1880 + C91 * C1885) *
                         C139596 -
                     (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
                      C100 * C4657 + C89 * C4661) *
                         C10842 -
                     (C102 * C4834 + C91 * C4838 + C101 * C4833 + C90 * C4837 +
                      C100 * C4832 + C89 * C4836) *
                         C10691) *
                        C139448 * C139463 * C139346 * C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7401 +
            (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
            C338 * C139308) *
               C139463 * C89 +
           (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
               C139463 * C90 +
           (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C139308) *
               C139463 * C91) *
              C139603 +
          ((C1984 * C7402 -
            ((C307 * C1707 + C139448 * C1966) * C7396 +
             (C307 * C1700 + C139448 * C1962) * C7401) +
            C1985 * C139308) *
               C139463 * C89 +
           (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C139308) *
               C139463 * C90 +
           (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C139308) *
               C139463 * C91) *
              C139596 +
          (((C307 * C4656 + C139448 * C4913) * C7401 +
            (C307 * C4663 + C139448 * C4917) * C7396 - C4930 * C7402 -
            C4931 * C139308) *
               C139463 * C89 +
           (C4930 * C7401 + C4931 * C7396 - C4932 * C7402 - C4933 * C139308) *
               C139463 * C90 +
           (C4932 * C7401 + C4933 * C7396 -
            (C307 * C4659 + C139448 * C4916) * C7402 -
            (C307 * C4667 + C139448 * C4920) * C139308) *
               C139463 * C91) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C139463 * C89 +
            (C401 + C417) * C139463 * C90 + C423 * C91) *
               C7396 -
           (C424 * C91 + (C418 + C404) * C139463 * C90 +
            (C417 + C401) * C139463 * C89) *
               C139308) *
              C139603 +
          (((C2069 + C2081) * C139463 * C89 + (C2072 + C2082) * C139463 * C90 +
            (C2075 + C2083) * C139463 * C91) *
               C139308 -
           (C2085 * C91 + (C2081 + C2069) * C139463 * C90 +
            ((C307 * C1794 + C139448 * C2066) * C139346 +
             (C307 * C1700 + C139448 * C1962) * C181) *
                C139463 * C89) *
               C7396) *
              C139596 +
          ((((C307 * C4656 + C139448 * C4913) * C181 +
             (C307 * C4746 + C139448 * C5007) * C139346) *
                C139463 * C89 +
            (C5012 + C5020) * C139463 * C90 + (C5015 + C5021) * C139463 * C91) *
               C7396 -
           (((C307 * C4749 + C139448 * C5010) * C139346 +
             (C307 * C4659 + C139448 * C4916) * C181) *
                C139463 * C91 +
            (C5021 + C5015) * C139463 * C90 + (C5020 + C5012) * C139463 * C89) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C10840 +
            (C307 * C245 + C139448 * C474) * C139603 -
            (C307 * C1700 + C139448 * C1962) * C10841 -
            (C307 * C1879 + C139448 * C2159) * C139596 +
            (C307 * C4656 + C139448 * C4913) * C10842 +
            (C307 * C4831 + C139448 * C5095) * C10691) *
               C139463 * C89 +
           (C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C139463 *
               C90 +
           (C11072 + C11073 - C11074 - C11075 + C11076 + C11077) * C139463 *
               C91) *
              C139346 * C7396 +
          ((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C139463 *
               C89 +
           (C11074 - (C11073 + C11072) + C11075 - C11076 - C11077) * C139463 *
               C90 +
           (C1988 * C10841 - (C495 * C139603 + C341 * C10840) +
            C2183 * C139596 - (C307 * C4659 + C139448 * C4916) * C10842 -
            (C307 * C4834 + C139448 * C5098) * C10691) *
               C139463 * C91) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C7401 +
            (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
            C585 * C139308) *
               C89 +
           (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) * C90 +
           (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C139308) *
               C91) *
              C139448 * C139603 +
          ((C2286 * C7402 -
            ((C554 * C1707 + C139463 * C2268) * C7396 +
             (C554 * C1700 + C139463 * C2264) * C7401) +
            C2287 * C139308) *
               C89 +
           (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C139308) *
               C90 +
           (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C139308) *
               C91) *
              C139448 * C139596 +
          (((C554 * C4656 + C139463 * C5191) * C7401 +
            (C554 * C4663 + C139463 * C5195) * C7396 - C5208 * C7402 -
            C5209 * C139308) *
               C89 +
           (C5208 * C7401 + C5209 * C7396 - C5210 * C7402 - C5211 * C139308) *
               C90 +
           (C5210 * C7401 + C5211 * C7396 -
            (C554 * C4659 + C139463 * C5194) * C7402 -
            (C554 * C4667 + C139463 * C5198) * C139308) *
               C91) *
              C139448 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C181 +
                       (C554 * C182 + C139463 * C641) * C139346) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C139448 * C7396 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C139448 * C139308) *
                        C139603 +
                    (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                      (C2377 + C2385) * C91) *
                         C139448 * C139308 -
                     (C2386 * C91 + (C2383 + C2371) * C90 +
                      ((C554 * C1794 + C139463 * C2368) * C139346 +
                       (C554 * C1700 + C139463 * C2264) * C181) *
                          C89) *
                         C139448 * C7396) *
                        C139596 +
                    ((((C554 * C4656 + C139463 * C5191) * C181 +
                       (C554 * C4746 + C139463 * C5285) * C139346) *
                          C89 +
                      (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
                         C139448 * C7396 -
                     (((C554 * C4749 + C139463 * C5288) * C139346 +
                       (C554 * C4659 + C139463 * C5194) * C181) *
                          C91 +
                      (C5299 + C5293) * C90 + (C5298 + C5290) * C89) *
                         C139448 * C139308) *
                        C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C10840 +
            (C554 * C245 + C139463 * C719) * C139603 -
            (C554 * C1700 + C139463 * C2264) * C10841 -
            (C554 * C1879 + C139463 * C2460) * C139596 +
            (C554 * C4656 + C139463 * C5191) * C10842 +
            (C554 * C4831 + C139463 * C5373) * C10691) *
               C89 +
           (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C90 +
           (C11306 + C11307 - C11308 - C11309 + C11310 + C11311) * C91) *
              C139448 * C139346 * C7396 +
          ((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C89 +
           (C11308 - (C11307 + C11306) + C11309 - C11310 - C11311) * C90 +
           (C2290 * C10841 - (C740 * C139603 + C588 * C10840) +
            C2484 * C139596 - (C554 * C4659 + C139463 * C5194) * C10842 -
            (C554 * C4834 + C139463 * C5376) * C10691) *
               C91) *
              C139448 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C103 +
                    (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                     C102 * C118 + C91 * C127) *
                        C92 -
                    (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                     C100 * C108 + C89 * C114) *
                        C104 -
                    (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                     C100 * C117 + C89 * C126) *
                        C93 +
                    (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                     C102 * C111 + C91 * C121) *
                        C105 +
                    (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                     C102 * C122 + C91 * C129) *
                        C94 -
                    (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                     C100 * C110 + C89 * C119) *
                        C106 -
                    (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 +
                     C100 * C120 + C89 * C128) *
                        C95) *
                   C139448 * C139463 * C139372 * C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C137108 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139562 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C137101 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C139308) *
                        C139448 * C139463 * C139372 * C2565 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C137101 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C139562 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C137108) +
                     (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                      C102 * C841 + C91 * C847) *
                         C139308) *
                        C139448 * C139463 * C139372 * C2566 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C137108 +
                     (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                      C102 * C2579 + C91 * C2584) *
                         C139562 -
                     (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                      C100 * C2571 + C89 * C2575) *
                         C137101 -
                     (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
                      C100 * C2578 + C89 * C2583) *
                         C139308) *
                        C139448 * C139463 * C139372 * C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[12] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C181 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139346) *
                        C139448 * C139463 * C92 -
                    ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                      C100 * C183 + C89 * C189) *
                         C139346 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C181) *
                        C139448 * C139463 * C93 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C181 +
                     (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                      C102 * C186 + C91 * C192) *
                         C139346) *
                        C139448 * C139463 * C94 -
                    ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 +
                      C100 * C185 + C89 * C191) *
                         C139346 +
                     (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                      C100 * C110 + C89 * C119) *
                         C181) *
                        C139448 * C139463 * C95) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C2660 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C2565 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C2661 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C2566 +
                     (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C2662 +
                     (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                      C102 * C2665 + C91 * C2669) *
                         C2567) *
                        C139448 * C139463 * C139562 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C2661 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C2565 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C2660) +
                     (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                      C102 * C928 + C91 * C933) *
                         C2566 -
                     (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                      C100 * C2571 + C89 * C2575) *
                         C2662 -
                     (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
                      C100 * C2664 + C89 * C2668) *
                         C2567) *
                        C139448 * C139463 * C139308) *
                   C139372) /
                      (p * q * std::sqrt(p + q));
    d2eexz[12] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139372) *
                        C139448 * C139463 * C139346 * C92 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C139372 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C139448 * C139463 * C139346 * C93 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C244 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C139372) *
                        C139448 * C139463 * C139346 * C94 -
                    ((C102 * C250 + C91 * C256 + C101 * C249 + C90 * C255 +
                      C100 * C248 + C89 * C254) *
                         C139372 +
                     (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                      C100 * C110 + C89 * C119) *
                         C244) *
                        C139448 * C139463 * C139346 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C139372) *
                         C139448 * C139463 * C2565 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C139372 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C139448 * C139463 * C2566 +
                     ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C244 +
                      (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                       C102 * C2747 + C91 * C2751) *
                          C139372) *
                         C139448 * C139463 * C2567) *
                        C139562 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C139372) *
                         C139448 * C139463 * C2566 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139372 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C139448 * C139463 * C2565 -
                     ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                       C100 * C2746 + C89 * C2750) *
                          C139372 +
                      (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                       C100 * C2571 + C89 * C2575) *
                          C244) *
                         C139448 * C139463 * C2567) *
                        C139308)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C103 +
           (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C139463 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C139463 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C139448 * C313) * C106 -
           (C307 * C124 + C139448 * C319) * C95) *
              C139463 * C91) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C137108 +
            (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
            C338 * C139308) *
               C139463 * C89 +
           (C337 * C137108 + C338 * C139562 - C339 * C137101 - C340 * C139308) *
               C139463 * C90 +
           (C339 * C137108 + C340 * C139562 - C341 * C137101 - C342 * C139308) *
               C139463 * C91) *
              C139372 * C2565 +
          ((C1116 * C137101 -
            ((C307 * C839 + C139448 * C1098) * C139562 +
             (C307 * C832 + C139448 * C1094) * C137108) +
            C1117 * C139308) *
               C139463 * C89 +
           (C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
            C1119 * C139308) *
               C139463 * C90 +
           (C1120 * C137101 - (C1119 * C139562 + C1118 * C137108) +
            C1121 * C139308) *
               C139463 * C91) *
              C139372 * C2566 +
          (((C307 * C2570 + C139448 * C2827) * C137108 +
            (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
            C2845 * C139308) *
               C139463 * C89 +
           (C2844 * C137108 + C2845 * C139562 - C2846 * C137101 -
            C2847 * C139308) *
               C139463 * C90 +
           (C2846 * C137108 + C2847 * C139562 -
            (C307 * C2573 + C139448 * C2830) * C137101 -
            (C307 * C2581 + C139448 * C2834) * C139308) *
               C139463 * C91) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C181 +
            (C307 * C182 + C139448 * C394) * C139346) *
               C139463 * C89 +
           (C401 + C417) * C139463 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C139463 * C90 +
           (C417 + C401) * C139463 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C139463 * C90 +
           (C410 + C420) * C139463 * C91) *
              C94 -
          (((C307 * C187 + C139448 * C399) * C139346 +
            (C307 * C112 + C139448 * C313) * C181) *
               C139463 * C91 +
           (C420 + C410) * C139463 * C90 + C424 * C89) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C139463 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C139463 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C139463 * C91) *
              C139562 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C139463 * C89 +
           (C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C139463 * C90 +
           (C1120 * C2661 - (C415 * C2565 + C341 * C2660) + C1219 * C2566 -
            (C307 * C2573 + C139448 * C2830) * C2662 -
            (C307 * C2666 + C139448 * C2924) * C2567) *
               C139463 * C91) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C244 +
            (C307 * C245 + C139448 * C474) * C139372) *
               C139463 * C89 +
           (C481 + C497) * C139463 * C90 + C503 * C91) *
              C139346 * C92 -
          (C504 * C91 + (C498 + C484) * C139463 * C90 +
           (C497 + C481) * C139463 * C89) *
              C139346 * C93 +
          (C503 * C89 + (C489 + C499) * C139463 * C90 +
           (C490 + C500) * C139463 * C91) *
              C139346 * C94 -
          (((C307 * C250 + C139448 * C479) * C139372 +
            (C307 * C112 + C139448 * C313) * C244) *
               C139463 * C91 +
           (C500 + C490) * C139463 * C90 + C504 * C89) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C139463 * C89 +
            (C481 + C497) * C139463 * C90 + C503 * C91) *
               C2565 -
           (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C139463 * C89) *
               C2566 +
           (((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C139463 * C89 +
            (C3022 + C3030) * C139463 * C90 + (C3025 + C3031) * C139463 * C91) *
               C2567) *
              C139562 +
          (((C1310 + C1318) * C139463 * C89 + (C1307 + C1317) * C139463 * C90 +
            (C1311 + C1319) * C139463 * C91) *
               C2566 -
           (C504 * C91 + (C498 + C484) * C139463 * C90 +
            (C497 + C481) * C139463 * C89) *
               C2565 -
           (((C307 * C2748 + C139448 * C3020) * C139372 +
             (C307 * C2573 + C139448 * C2830) * C244) *
                C139463 * C91 +
            (C3031 + C3025) * C139463 * C90 + (C3030 + C3022) * C139463 * C89) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139463 * C555) * C103 +
           (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C139463 * C560) * C106 -
           (C554 * C124 + C139463 * C566) * C95) *
              C91) *
         C139448 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C137108 +
            (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
            C585 * C139308) *
               C89 +
           (C584 * C137108 + C585 * C139562 - C586 * C137101 - C587 * C139308) *
               C90 +
           (C586 * C137108 + C587 * C139562 - C588 * C137101 - C589 * C139308) *
               C91) *
              C139448 * C139372 * C2565 +
          ((C1418 * C137101 -
            ((C554 * C839 + C139463 * C1400) * C139562 +
             (C554 * C832 + C139463 * C1396) * C137108) +
            C1419 * C139308) *
               C89 +
           (C1420 * C137101 - (C1419 * C139562 + C1418 * C137108) +
            C1421 * C139308) *
               C90 +
           (C1422 * C137101 - (C1421 * C139562 + C1420 * C137108) +
            C1423 * C139308) *
               C91) *
              C139448 * C139372 * C2566 +
          (((C554 * C2570 + C139463 * C3105) * C137108 +
            (C554 * C2577 + C139463 * C3109) * C139562 - C3122 * C137101 -
            C3123 * C139308) *
               C89 +
           (C3122 * C137108 + C3123 * C139562 - C3124 * C137101 -
            C3125 * C139308) *
               C90 +
           (C3124 * C137108 + C3125 * C139562 -
            (C554 * C2573 + C139463 * C3108) * C137101 -
            (C554 * C2581 + C139463 * C3112) * C139308) *
               C91) *
              C139448 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C181 +
                      (C554 * C182 + C139463 * C641) * C139346) *
                         C89 +
                     (C648 + C664) * C90 + C668 * C91) *
                        C139448 * C92 -
                    (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                        C139448 * C93 +
                    (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                        C139448 * C94 -
                    (((C554 * C187 + C139463 * C646) * C139346 +
                      (C554 * C112 + C139463 * C560) * C181) *
                         C91 +
                     (C667 + C657) * C90 + C669 * C89) *
                        C139448 * C95) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C2660 +
                      (C554 * C182 + C139463 * C641) * C2565 -
                      (C554 * C832 + C139463 * C1396) * C2661 -
                      (C554 * C927 + C139463 * C1497) * C2566 +
                      (C554 * C2570 + C139463 * C3105) * C2662 +
                      (C554 * C2663 + C139463 * C3199) * C2567) *
                         C89 +
                     (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
                     (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
                        C139448 * C139562 +
                    ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C89 +
                     (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C90 +
                     (C1422 * C2661 - (C662 * C2565 + C588 * C2660) +
                      C1521 * C2566 - (C554 * C2573 + C139463 * C3108) * C2662 -
                      (C554 * C2666 + C139463 * C3202) * C2567) *
                         C91) *
                        C139448 * C139308) *
                   C139372) /
                      (p * q * std::sqrt(p + q));
    d2eezz[12] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C244 +
                      (C554 * C245 + C139463 * C719) * C139372) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139448 * C139346 * C92 -
                    (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                        C139448 * C139346 * C93 +
                    (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                        C139448 * C139346 * C94 -
                    (((C554 * C250 + C139463 * C724) * C139372 +
                      (C554 * C112 + C139463 * C560) * C244) *
                         C91 +
                     (C745 + C735) * C90 + C747 * C89) *
                        C139448 * C139346 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C244 +
                       (C554 * C245 + C139463 * C719) * C139372) *
                          C89 +
                      (C726 + C742) * C90 + C746 * C91) *
                         C139448 * C2565 -
                     (C1621 * C91 + (C1619 + C1611) * C90 +
                      ((C554 * C1011 + C139463 * C1602) * C139372 +
                       (C554 * C832 + C139463 * C1396) * C244) *
                          C89) *
                         C139448 * C2566 +
                     (((C554 * C2570 + C139463 * C3105) * C244 +
                       (C554 * C2745 + C139463 * C3295) * C139372) *
                          C89 +
                      (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                         C139448 * C2567) *
                        C139562 +
                    (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                      (C1612 + C1620) * C91) *
                         C139448 * C2566 -
                     (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                         C139448 * C2565 -
                     (((C554 * C2748 + C139463 * C3298) * C139372 +
                       (C554 * C2573 + C139463 * C3108) * C244) *
                          C91 +
                      (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
                         C139448 * C2567) *
                        C139308)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C826 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C821 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C827 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C822 +
                     (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C828 +
                     (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                      C102 * C122 + C91 * C129) *
                         C823) *
                        C139448 * C139463 * C139372 * C139570 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C827 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C821 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C826) +
                     (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                      C102 * C841 + C91 * C847) *
                         C822 -
                     (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                      C100 * C830 + C89 * C835) *
                         C828 -
                     (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 +
                      C100 * C837 + C89 * C844) *
                         C823) *
                        C139448 * C139463 * C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C3364 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C139303) *
                        C139448 * C139463 * C139372 * C3360 -
                    ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                      C100 * C839 + C89 * C846) *
                         C139303 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C3364) *
                        C139448 * C139463 * C139372 * C3361 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C3364 +
                     (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                      C102 * C2579 + C91 * C2584) *
                         C139303) *
                        C139448 * C139463 * C139372 * C3362 -
                    ((C102 * C3368 + C91 * C3374 + C101 * C3369 + C90 * C3375 +
                      C100 * C3370 + C89 * C3376) *
                         C139303 +
                     (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                      C100 * C3367 + C89 * C3373) *
                         C3364) *
                        C139448 * C139463 * C139372 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C923 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C139570 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C924 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C139360) *
                        C139448 * C139463 * C821 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C924 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C139570 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C923) +
                     (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                      C102 * C928 + C91 * C933) *
                         C139360) *
                        C139448 * C139463 * C822 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C923 +
                     (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                      C102 * C186 + C91 * C192) *
                         C139570 -
                     (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                      C100 * C830 + C89 * C835) *
                         C924 -
                     (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 +
                      C100 * C925 + C89 * C930) *
                         C139360) *
                        C139448 * C139463 * C823) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                     C102 * C109 + C91 * C115) *
                        C3427 +
                    (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                     C102 * C184 + C91 * C190) *
                        C3360 -
                    (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                     C100 * C832 + C89 * C840) *
                        C3428 -
                    (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                     C100 * C927 + C89 * C932) *
                        C3361 +
                    (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                     C102 * C2572 + C91 * C2576) *
                        C3429 +
                    (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                     C102 * C2665 + C91 * C2669) *
                        C3362 -
                    (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                     C100 * C3367 + C89 * C3373) *
                        C3430 -
                    (C102 * C3431 + C91 * C3434 + C101 * C3432 + C90 * C3435 +
                     C100 * C3433 + C89 * C3436) *
                        C3363) *
                   C139448 * C139463 * C139303 * C139372) /
                      (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C139372) *
                         C139448 * C139463 * C139570 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C139372 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C139448 * C139463 * C139360) *
                        C821 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C139372) *
                         C139448 * C139463 * C139360 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139372 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C139448 * C139463 * C139570) *
                        C822 +
                    (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C244 +
                      (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                       C102 * C249 + C91 * C255) *
                          C139372) *
                         C139448 * C139463 * C139570 -
                     ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                       C100 * C1009 + C89 * C1014) *
                          C139372 +
                      (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                       C100 * C830 + C89 * C835) *
                          C244) *
                         C139448 * C139463 * C139360) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139372) *
                        C139448 * C139463 * C3360 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C139372 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C244) *
                        C139448 * C139463 * C3361 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C244 +
                     (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                      C102 * C2747 + C91 * C2751) *
                         C139372) *
                        C139448 * C139463 * C3362 -
                    ((C102 * C3487 + C91 * C3490 + C101 * C3488 + C90 * C3491 +
                      C100 * C3489 + C89 * C3492) *
                         C139372 +
                     (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                      C100 * C3367 + C89 * C3373) *
                         C244) *
                        C139448 * C139463 * C3363) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C139448 * C308) * C826 +
                      (C307 * C116 + C139448 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C139463 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C139463 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C139463 * C91) *
                        C139372 * C139570 +
                    ((C1116 * C827 -
                      ((C307 * C839 + C139448 * C1098) * C821 +
                       (C307 * C832 + C139448 * C1094) * C826) +
                      C1117 * C822 - C1118 * C828 - C1119 * C823) *
                         C139463 * C89 +
                     (C1118 * C827 - (C1117 * C821 + C1116 * C826) +
                      C1119 * C822 - C1120 * C828 - C1121 * C823) *
                         C139463 * C90 +
                     (C1120 * C827 - (C1119 * C821 + C1118 * C826) +
                      C1121 * C822 - (C307 * C833 + C139448 * C1097) * C828 -
                      (C307 * C843 + C139448 * C1102) * C823) *
                         C139463 * C91) *
                        C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C139448 * C308) * C3364 +
                      (C307 * C116 + C139448 * C314) * C139303) *
                         C139463 * C89 +
                     (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                     (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                        C139372 * C3360 -
                    ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                     (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                     ((C307 * C839 + C139448 * C1098) * C139303 +
                      (C307 * C832 + C139448 * C1094) * C3364) *
                         C139463 * C89) *
                        C139372 * C3361 +
                    (((C307 * C2570 + C139448 * C2827) * C3364 +
                      (C307 * C2577 + C139448 * C2831) * C139303) *
                         C139463 * C89 +
                     (C2844 * C3364 + C2845 * C139303) * C139463 * C90 +
                     (C2846 * C3364 + C2847 * C139303) * C139463 * C91) *
                        C139372 * C3362 -
                    (((C307 * C3368 + C139448 * C3546) * C139303 +
                      (C307 * C3365 + C139448 * C3543) * C3364) *
                         C139463 * C91 +
                     ((C307 * C3369 + C139448 * C3547) * C139303 +
                      (C307 * C3366 + C139448 * C3544) * C3364) *
                         C139463 * C90 +
                     ((C307 * C3370 + C139448 * C3548) * C139303 +
                      (C307 * C3367 + C139448 * C3545) * C3364) *
                         C139463 * C89) *
                        C139372 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C923 +
            (C307 * C182 + C139448 * C394) * C139570 -
            (C307 * C832 + C139448 * C1094) * C924 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C139463 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C139463 * C90 + C1225 * C91) *
              C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C139463 * C89 +
           (C1208 - (C1207 + C1206) + C1222) * C139463 * C90 +
           (C1211 - (C1212 + C1213) + C1223) * C139463 * C91) *
              C822 +
          (C1225 * C89 + (C1213 + C1212 - C1211 - C1223) * C139463 * C90 +
           (C343 * C923 + C416 * C139570 -
            (C307 * C833 + C139448 * C1097) * C924 -
            (C307 * C929 + C139448 * C1199) * C139360) *
               C139463 * C91) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C3427 +
           (C307 * C182 + C139448 * C394) * C3360 -
           (C307 * C832 + C139448 * C1094) * C3428 -
           (C307 * C927 + C139448 * C1195) * C3361 +
           (C307 * C2570 + C139448 * C2827) * C3429 +
           (C307 * C2663 + C139448 * C2921) * C3362 -
           (C307 * C3367 + C139448 * C3545) * C3430 -
           (C307 * C3433 + C139448 * C3599) * C3363) *
              C139463 * C89 +
          (C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
           C2844 * C3429 + C2940 * C3362 -
           (C307 * C3366 + C139448 * C3544) * C3430 -
           (C307 * C3432 + C139448 * C3600) * C3363) *
              C139463 * C90 +
          (C339 * C3427 + C414 * C3360 - C1118 * C3428 - C1218 * C3361 +
           C2846 * C3429 + C2941 * C3362 -
           (C307 * C3365 + C139448 * C3543) * C3430 -
           (C307 * C3431 + C139448 * C3601) * C3363) *
              C139463 * C91) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C139463 * C89 +
            (C481 + C497) * C139463 * C90 + C503 * C91) *
               C139570 -
           (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C139463 * C89) *
               C139360) *
              C821 +
          (((C1310 + C1318) * C139463 * C89 + (C1307 + C1317) * C139463 * C90 +
            (C1311 + C1319) * C139463 * C91) *
               C139360 -
           (C504 * C91 + (C498 + C484) * C139463 * C90 +
            (C497 + C481) * C139463 * C89) *
               C139570) *
              C822 +
          ((C503 * C89 + (C489 + C499) * C139463 * C90 +
            (C490 + C500) * C139463 * C91) *
               C139570 -
           (((C307 * C1013 + C139448 * C1303) * C139372 +
             (C307 * C833 + C139448 * C1097) * C244) *
                C139463 * C91 +
            (C1319 + C1311) * C139463 * C90 + C1321 * C89) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C244 +
            (C307 * C245 + C139448 * C474) * C139372) *
               C139463 * C89 +
           (C481 + C497) * C139463 * C90 + C503 * C91) *
              C3360 -
          (C1321 * C91 + (C1318 + C1310) * C139463 * C90 +
           ((C307 * C1011 + C139448 * C1301) * C139372 +
            (C307 * C832 + C139448 * C1094) * C244) *
               C139463 * C89) *
              C3361 +
          (((C307 * C2570 + C139448 * C2827) * C244 +
            (C307 * C2745 + C139448 * C3017) * C139372) *
               C139463 * C89 +
           (C3022 + C3030) * C139463 * C90 + (C3025 + C3031) * C139463 * C91) *
              C3362 -
          (((C307 * C3487 + C139448 * C3652) * C139372 +
            (C307 * C3365 + C139448 * C3543) * C244) *
               C139463 * C91 +
           ((C307 * C3488 + C139448 * C3653) * C139372 +
            (C307 * C3366 + C139448 * C3544) * C244) *
               C139463 * C90 +
           ((C307 * C3489 + C139448 * C3654) * C139372 +
            (C307 * C3367 + C139448 * C3545) * C244) *
               C139463 * C89) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C826 +
                      (C554 * C116 + C139463 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C139448 * C139372 * C139570 +
                    ((C1418 * C827 -
                      ((C554 * C839 + C139463 * C1400) * C821 +
                       (C554 * C832 + C139463 * C1396) * C826) +
                      C1419 * C822 - C1420 * C828 - C1421 * C823) *
                         C89 +
                     (C1420 * C827 - (C1419 * C821 + C1418 * C826) +
                      C1421 * C822 - C1422 * C828 - C1423 * C823) *
                         C90 +
                     (C1422 * C827 - (C1421 * C821 + C1420 * C826) +
                      C1423 * C822 - (C554 * C833 + C139463 * C1399) * C828 -
                      (C554 * C843 + C139463 * C1404) * C823) *
                         C91) *
                        C139448 * C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C3364 +
                      (C554 * C116 + C139463 * C561) * C139303) *
                         C89 +
                     (C584 * C3364 + C585 * C139303) * C90 +
                     (C586 * C3364 + C587 * C139303) * C91) *
                        C139448 * C139372 * C3360 -
                    ((C1421 * C139303 + C1420 * C3364) * C91 +
                     (C1419 * C139303 + C1418 * C3364) * C90 +
                     ((C554 * C839 + C139463 * C1400) * C139303 +
                      (C554 * C832 + C139463 * C1396) * C3364) *
                         C89) *
                        C139448 * C139372 * C3361 +
                    (((C554 * C2570 + C139463 * C3105) * C3364 +
                      (C554 * C2577 + C139463 * C3109) * C139303) *
                         C89 +
                     (C3122 * C3364 + C3123 * C139303) * C90 +
                     (C3124 * C3364 + C3125 * C139303) * C91) *
                        C139448 * C139372 * C3362 -
                    (((C554 * C3368 + C139463 * C3708) * C139303 +
                      (C554 * C3365 + C139463 * C3705) * C3364) *
                         C91 +
                     ((C554 * C3369 + C139463 * C3709) * C139303 +
                      (C554 * C3366 + C139463 * C3706) * C3364) *
                         C90 +
                     ((C554 * C3370 + C139463 * C3710) * C139303 +
                      (C554 * C3367 + C139463 * C3707) * C3364) *
                         C89) *
                        C139448 * C139372 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C923 +
                      (C554 * C182 + C139463 * C641) * C139570 -
                      (C554 * C832 + C139463 * C1396) * C924 -
                      (C554 * C927 + C139463 * C1497) * C139360) *
                         C89 +
                     (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
                        C139448 * C821 +
                    ((C1505 - (C1504 + C1503) + C1522) * C89 +
                     (C1510 - (C1509 + C1508) + C1524) * C90 +
                     (C1513 - (C1514 + C1515) + C1525) * C91) *
                        C139448 * C822 +
                    (C1526 * C89 + (C1515 + C1514 - C1513 - C1525) * C90 +
                     (C590 * C923 + C663 * C139570 -
                      (C554 * C833 + C139463 * C1399) * C924 -
                      (C554 * C929 + C139463 * C1501) * C139360) *
                         C91) *
                        C139448 * C823) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C554 * C107 + C139463 * C555) * C3427 +
                     (C554 * C182 + C139463 * C641) * C3360 -
                     (C554 * C832 + C139463 * C1396) * C3428 -
                     (C554 * C927 + C139463 * C1497) * C3361 +
                     (C554 * C2570 + C139463 * C3105) * C3429 +
                     (C554 * C2663 + C139463 * C3199) * C3362 -
                     (C554 * C3367 + C139463 * C3707) * C3430 -
                     (C554 * C3433 + C139463 * C3761) * C3363) *
                        C89 +
                    (C584 * C3427 + C660 * C3360 - C1418 * C3428 -
                     C1518 * C3361 + C3122 * C3429 + C3218 * C3362 -
                     (C554 * C3366 + C139463 * C3706) * C3430 -
                     (C554 * C3432 + C139463 * C3762) * C3363) *
                        C90 +
                    (C586 * C3427 + C661 * C3360 - C1420 * C3428 -
                     C1520 * C3361 + C3124 * C3429 + C3219 * C3362 -
                     (C554 * C3365 + C139463 * C3705) * C3430 -
                     (C554 * C3431 + C139463 * C3763) * C3363) *
                        C91) *
                   C139448 * C139303 * C139372) /
                      (p * q * std::sqrt(p + q));
    d2eezz[13] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C244 +
                       (C554 * C245 + C139463 * C719) * C139372) *
                          C89 +
                      (C726 + C742) * C90 + C746 * C91) *
                         C139448 * C139570 -
                     (C1621 * C91 + (C1619 + C1611) * C90 +
                      ((C554 * C1011 + C139463 * C1602) * C139372 +
                       (C554 * C832 + C139463 * C1396) * C244) *
                          C89) *
                         C139448 * C139360) *
                        C821 +
                    (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                      (C1612 + C1620) * C91) *
                         C139448 * C139360 -
                     (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                         C139448 * C139570) *
                        C822 +
                    ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                         C139448 * C139570 -
                     (((C554 * C1013 + C139463 * C1604) * C139372 +
                       (C554 * C833 + C139463 * C1399) * C244) *
                          C91 +
                      (C1620 + C1612) * C90 + C1621 * C89) *
                         C139448 * C139360) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C244 +
                      (C554 * C245 + C139463 * C719) * C139372) *
                         C89 +
                     (C726 + C742) * C90 + C746 * C91) *
                        C139448 * C3360 -
                    (C1621 * C91 + (C1619 + C1611) * C90 +
                     ((C554 * C1011 + C139463 * C1602) * C139372 +
                      (C554 * C832 + C139463 * C1396) * C244) *
                         C89) *
                        C139448 * C3361 +
                    (((C554 * C2570 + C139463 * C3105) * C244 +
                      (C554 * C2745 + C139463 * C3295) * C139372) *
                         C89 +
                     (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                        C139448 * C3362 -
                    (((C554 * C3487 + C139463 * C3814) * C139372 +
                      (C554 * C3365 + C139463 * C3705) * C244) *
                         C91 +
                     ((C554 * C3488 + C139463 * C3815) * C139372 +
                      (C554 * C3366 + C139463 * C3706) * C244) *
                         C90 +
                     ((C554 * C3489 + C139463 * C3816) * C139372 +
                      (C554 * C3367 + C139463 * C3707) * C244) *
                         C89) *
                        C139448 * C3363) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eexx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C826 +
                     (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                      C102 * C118 + C91 * C127) *
                         C821 -
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C827 -
                     (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                      C100 * C117 + C89 * C126) *
                         C822 +
                     (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C828 +
                     (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                      C102 * C122 + C91 * C129) *
                         C823) *
                        C139448 * C139463 * C139571 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C827 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C821 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C826) +
                     (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                      C102 * C1709 + C91 * C1715) *
                         C822 -
                     (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                      C100 * C1698 + C89 * C1703) *
                         C828 -
                     (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
                      C100 * C1705 + C89 * C1712) *
                         C823) *
                        C139448 * C139463 * C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C3364 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C139303) *
                         C139448 * C139463 * C139571 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C139303 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C3364) *
                         C139448 * C139463 * C139384) *
                        C2565 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C3364 +
                      (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                       C102 * C3902 + C91 * C3911) *
                          C139303) *
                         C139448 * C139463 * C139384 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C139303 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C3364) *
                         C139448 * C139463 * C139571) *
                        C2566 +
                    (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C3364 +
                      (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                       C102 * C2579 + C91 * C2584) *
                          C139303) *
                         C139448 * C139463 * C139571 -
                     ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
                       C100 * C3905 + C89 * C3914) *
                          C139303 +
                      (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                       C100 * C3896 + C89 * C3908) *
                          C3364) *
                         C139448 * C139463 * C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C139346) *
                         C139448 * C139463 * C821 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C139346 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C139448 * C139463 * C822 +
                     ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C181 +
                      (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                       C102 * C186 + C91 * C192) *
                          C139346) *
                         C139448 * C139463 * C823) *
                        C139571 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C181 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C139346) *
                         C139448 * C139463 * C822 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C139346 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C181) *
                         C139448 * C139463 * C821 -
                     ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
                       C100 * C1792 + C89 * C1797) *
                          C139346 +
                      (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                       C100 * C1698 + C89 * C1703) *
                          C181) *
                         C139448 * C139463 * C823) *
                        C139384)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C2660 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C2565 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C2661 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C2566 +
                     (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C2662 +
                     (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                      C102 * C2665 + C91 * C2669) *
                         C2567) *
                        C139448 * C139463 * C139303 * C139571 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C2661 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C2565 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C2660) +
                     (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                      C102 * C3991 + C91 * C3997) *
                         C2566 -
                     (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                      C100 * C3896 + C89 * C3908) *
                         C2662 -
                     (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
                      C100 * C3994 + C89 * C4000) *
                         C2567) *
                        C139448 * C139463 * C139303 * C139384)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C1875 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139571 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C1876 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C139384) *
                        C139448 * C139463 * C139346 * C821 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C1876 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C139571 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C1875) +
                     (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                      C102 * C1880 + C91 * C1885) *
                         C139384) *
                        C139448 * C139463 * C139346 * C822 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C1875 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C139571 -
                     (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                      C100 * C1698 + C89 * C1703) *
                         C1876 -
                     (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
                      C100 * C1877 + C89 * C1882) *
                         C139384) *
                        C139448 * C139463 * C139346 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C1875 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C139571 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C1876 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C139384) *
                        C139448 * C139463 * C2565 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C1876 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C139571 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C1875) +
                     (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                      C102 * C4077 + C91 * C4083) *
                         C139384) *
                        C139448 * C139463 * C2566 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C1875 +
                     (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                      C102 * C2747 + C91 * C2751) *
                         C139571 -
                     (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                      C100 * C3896 + C89 * C3908) *
                         C1876 -
                     (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
                      C100 * C4080 + C89 * C4086) *
                         C139384) *
                        C139448 * C139463 * C2567) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C139448 * C308) * C826 +
                      (C307 * C116 + C139448 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C139463 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C139463 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C139463 * C91) *
                        C139571 +
                    ((C1984 * C827 -
                      ((C307 * C1707 + C139448 * C1966) * C821 +
                       (C307 * C1700 + C139448 * C1962) * C826) +
                      C1985 * C822 - C1986 * C828 - C1987 * C823) *
                         C139463 * C89 +
                     (C1986 * C827 - (C1985 * C821 + C1984 * C826) +
                      C1987 * C822 - C1988 * C828 - C1989 * C823) *
                         C139463 * C90 +
                     (C1988 * C827 - (C1987 * C821 + C1986 * C826) +
                      C1989 * C822 - (C307 * C1701 + C139448 * C1965) * C828 -
                      (C307 * C1711 + C139448 * C1970) * C823) *
                         C139463 * C91) *
                        C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139448 * C308) * C3364 +
                       (C307 * C116 + C139448 * C314) * C139303) *
                          C139463 * C89 +
                      (C337 * C3364 + C338 * C139303) * C139463 * C90 +
                      (C339 * C3364 + C340 * C139303) * C139463 * C91) *
                         C139571 -
                     ((C1987 * C139303 + C1986 * C3364) * C139463 * C91 +
                      (C1985 * C139303 + C1984 * C3364) * C139463 * C90 +
                      ((C307 * C1707 + C139448 * C1966) * C139303 +
                       (C307 * C1700 + C139448 * C1962) * C3364) *
                          C139463 * C89) *
                         C139384) *
                        C2565 +
                    ((((C307 * C3891 + C139448 * C4161) * C3364 +
                       (C307 * C3900 + C139448 * C4167) * C139303) *
                          C139463 * C89 +
                      ((C307 * C3892 + C139448 * C4162) * C3364 +
                       (C307 * C3901 + C139448 * C4168) * C139303) *
                          C139463 * C90 +
                      ((C307 * C3893 + C139448 * C4163) * C3364 +
                       (C307 * C3902 + C139448 * C4169) * C139303) *
                          C139463 * C91) *
                         C139384 -
                     ((C1119 * C139303 + C1118 * C3364) * C139463 * C91 +
                      (C1117 * C139303 + C1116 * C3364) * C139463 * C90 +
                      ((C307 * C839 + C139448 * C1098) * C139303 +
                       (C307 * C832 + C139448 * C1094) * C3364) *
                          C139463 * C89) *
                         C139571) *
                        C2566 +
                    ((((C307 * C2570 + C139448 * C2827) * C3364 +
                       (C307 * C2577 + C139448 * C2831) * C139303) *
                          C139463 * C89 +
                      (C2844 * C3364 + C2845 * C139303) * C139463 * C90 +
                      (C2846 * C3364 + C2847 * C139303) * C139463 * C91) *
                         C139571 -
                     (((C307 * C3903 + C139448 * C4170) * C139303 +
                       (C307 * C3894 + C139448 * C4164) * C3364) *
                          C139463 * C91 +
                      ((C307 * C3904 + C139448 * C4171) * C139303 +
                       (C307 * C3895 + C139448 * C4165) * C3364) *
                          C139463 * C90 +
                      ((C307 * C3905 + C139448 * C4172) * C139303 +
                       (C307 * C3896 + C139448 * C4166) * C3364) *
                          C139463 * C89) *
                         C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C139463 * C89 +
            (C401 + C417) * C139463 * C90 + C423 * C91) *
               C821 -
           (C424 * C91 + (C418 + C404) * C139463 * C90 +
            (C417 + C401) * C139463 * C89) *
               C822 +
           (C423 * C89 + (C409 + C419) * C139463 * C90 +
            (C410 + C420) * C139463 * C91) *
               C823) *
              C139571 +
          (((C2069 + C2081) * C139463 * C89 + (C2072 + C2082) * C139463 * C90 +
            (C2075 + C2083) * C139463 * C91) *
               C822 -
           (C2085 * C91 + (C2081 + C2069) * C139463 * C90 +
            ((C307 * C1794 + C139448 * C2066) * C139346 +
             (C307 * C1700 + C139448 * C1962) * C181) *
                C139463 * C89) *
               C821 -
           (((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139463 * C91 +
            (C2083 + C2075) * C139463 * C90 + C2085 * C89) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C139463 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C139463 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C139463 * C91) *
              C139303 * C139571 +
          (((C307 * C3891 + C139448 * C4161) * C2661 -
            ((C307 * C1794 + C139448 * C2066) * C2565 +
             (C307 * C1700 + C139448 * C1962) * C2660) +
            (C307 * C3989 + C139448 * C4247) * C2566 -
            (C307 * C3896 + C139448 * C4166) * C2662 -
            (C307 * C3994 + C139448 * C4248) * C2567) *
               C139463 * C89 +
           ((C307 * C3892 + C139448 * C4162) * C2661 -
            (C2078 * C2565 + C1984 * C2660) +
            (C307 * C3990 + C139448 * C4249) * C2566 -
            (C307 * C3895 + C139448 * C4165) * C2662 -
            (C307 * C3993 + C139448 * C4250) * C2567) *
               C139463 * C90 +
           ((C307 * C3893 + C139448 * C4163) * C2661 -
            (C2079 * C2565 + C1986 * C2660) +
            (C307 * C3991 + C139448 * C4251) * C2566 -
            (C307 * C3894 + C139448 * C4164) * C2662 -
            (C307 * C3992 + C139448 * C4252) * C2567) *
               C139463 * C91) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 -
            (C307 * C1700 + C139448 * C1962) * C1876 -
            (C307 * C1879 + C139448 * C2159) * C139384) *
               C139463 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C139463 * C90 + C2189 * C91) *
              C139346 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C139463 * C89 +
           (C2172 - (C2171 + C2170) + C2186) * C139463 * C90 +
           (C2175 - (C2176 + C2177) + C2187) * C139463 * C91) *
              C139346 * C822 +
          (C2189 * C89 + (C2177 + C2176 - C2175 - C2187) * C139463 * C90 +
           (C343 * C1875 + C496 * C139571 -
            (C307 * C1701 + C139448 * C1965) * C1876 -
            (C307 * C1881 + C139448 * C2163) * C139384) *
               C139463 * C91) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 -
            (C307 * C1700 + C139448 * C1962) * C1876 -
            (C307 * C1879 + C139448 * C2159) * C139384) *
               C139463 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C139463 * C90 + C2189 * C91) *
              C2565 +
          (((C307 * C3891 + C139448 * C4161) * C1876 -
            ((C307 * C1011 + C139448 * C1301) * C139571 +
             (C307 * C832 + C139448 * C1094) * C1875) +
            (C307 * C4075 + C139448 * C4327) * C139384) *
               C139463 * C89 +
           ((C307 * C3892 + C139448 * C4162) * C1876 -
            (C1315 * C139571 + C1116 * C1875) +
            (C307 * C4076 + C139448 * C4328) * C139384) *
               C139463 * C90 +
           ((C307 * C3893 + C139448 * C4163) * C1876 -
            (C1314 * C139571 + C1118 * C1875) +
            (C307 * C4077 + C139448 * C4329) * C139384) *
               C139463 * C91) *
              C2566 +
          (((C307 * C2570 + C139448 * C2827) * C1875 +
            (C307 * C2745 + C139448 * C3017) * C139571 -
            (C307 * C3896 + C139448 * C4166) * C1876 -
            (C307 * C4080 + C139448 * C4330) * C139384) *
               C139463 * C89 +
           (C2844 * C1875 + C3028 * C139571 -
            (C307 * C3895 + C139448 * C4165) * C1876 -
            (C307 * C4079 + C139448 * C4331) * C139384) *
               C139463 * C90 +
           (C2846 * C1875 + C3029 * C139571 -
            (C307 * C3894 + C139448 * C4164) * C1876 -
            (C307 * C4078 + C139448 * C4332) * C139384) *
               C139463 * C91) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C826 +
                      (C554 * C116 + C139463 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C139448 * C139571 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C139463 * C2268) * C821 +
                       (C554 * C1700 + C139463 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C89 +
                     (C2288 * C827 - (C2287 * C821 + C2286 * C826) +
                      C2289 * C822 - C2290 * C828 - C2291 * C823) *
                         C90 +
                     (C2290 * C827 - (C2289 * C821 + C2288 * C826) +
                      C2291 * C822 - (C554 * C1701 + C139463 * C2267) * C828 -
                      (C554 * C1711 + C139463 * C2272) * C823) *
                         C91) *
                        C139448 * C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C3364 +
                       (C554 * C116 + C139463 * C561) * C139303) *
                          C89 +
                      (C584 * C3364 + C585 * C139303) * C90 +
                      (C586 * C3364 + C587 * C139303) * C91) *
                         C139448 * C139571 -
                     ((C2289 * C139303 + C2288 * C3364) * C91 +
                      (C2287 * C139303 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C139463 * C2268) * C139303 +
                       (C554 * C1700 + C139463 * C2264) * C3364) *
                          C89) *
                         C139448 * C139384) *
                        C2565 +
                    ((((C554 * C3891 + C139463 * C4407) * C3364 +
                       (C554 * C3900 + C139463 * C4413) * C139303) *
                          C89 +
                      ((C554 * C3892 + C139463 * C4408) * C3364 +
                       (C554 * C3901 + C139463 * C4414) * C139303) *
                          C90 +
                      ((C554 * C3893 + C139463 * C4409) * C3364 +
                       (C554 * C3902 + C139463 * C4415) * C139303) *
                          C91) *
                         C139448 * C139384 -
                     ((C1421 * C139303 + C1420 * C3364) * C91 +
                      (C1419 * C139303 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C139463 * C1400) * C139303 +
                       (C554 * C832 + C139463 * C1396) * C3364) *
                          C89) *
                         C139448 * C139571) *
                        C2566 +
                    ((((C554 * C2570 + C139463 * C3105) * C3364 +
                       (C554 * C2577 + C139463 * C3109) * C139303) *
                          C89 +
                      (C3122 * C3364 + C3123 * C139303) * C90 +
                      (C3124 * C3364 + C3125 * C139303) * C91) *
                         C139448 * C139571 -
                     (((C554 * C3903 + C139463 * C4416) * C139303 +
                       (C554 * C3894 + C139463 * C4410) * C3364) *
                          C91 +
                      ((C554 * C3904 + C139463 * C4417) * C139303 +
                       (C554 * C3895 + C139463 * C4411) * C3364) *
                          C90 +
                      ((C554 * C3905 + C139463 * C4418) * C139303 +
                       (C554 * C3896 + C139463 * C4412) * C3364) *
                          C89) *
                         C139448 * C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C181 +
                       (C554 * C182 + C139463 * C641) * C139346) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C139448 * C821 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C139448 * C822 +
                     (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                         C139448 * C823) *
                        C139571 +
                    (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                      (C2377 + C2385) * C91) *
                         C139448 * C822 -
                     (C2386 * C91 + (C2383 + C2371) * C90 +
                      ((C554 * C1794 + C139463 * C2368) * C139346 +
                       (C554 * C1700 + C139463 * C2264) * C181) *
                          C89) *
                         C139448 * C821 -
                     (((C554 * C1795 + C139463 * C2369) * C139346 +
                       (C554 * C1701 + C139463 * C2267) * C181) *
                          C91 +
                      (C2385 + C2377) * C90 + C2386 * C89) *
                         C139448 * C823) *
                        C139384)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C2660 +
                      (C554 * C182 + C139463 * C641) * C2565 -
                      (C554 * C832 + C139463 * C1396) * C2661 -
                      (C554 * C927 + C139463 * C1497) * C2566 +
                      (C554 * C2570 + C139463 * C3105) * C2662 +
                      (C554 * C2663 + C139463 * C3199) * C2567) *
                         C89 +
                     (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
                     (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
                        C139448 * C139303 * C139571 +
                    (((C554 * C3891 + C139463 * C4407) * C2661 -
                      ((C554 * C1794 + C139463 * C2368) * C2565 +
                       (C554 * C1700 + C139463 * C2264) * C2660) +
                      (C554 * C3989 + C139463 * C4493) * C2566 -
                      (C554 * C3896 + C139463 * C4412) * C2662 -
                      (C554 * C3994 + C139463 * C4494) * C2567) *
                         C89 +
                     ((C554 * C3892 + C139463 * C4408) * C2661 -
                      (C2380 * C2565 + C2286 * C2660) +
                      (C554 * C3990 + C139463 * C4495) * C2566 -
                      (C554 * C3895 + C139463 * C4411) * C2662 -
                      (C554 * C3993 + C139463 * C4496) * C2567) *
                         C90 +
                     ((C554 * C3893 + C139463 * C4409) * C2661 -
                      (C2381 * C2565 + C2288 * C2660) +
                      (C554 * C3991 + C139463 * C4497) * C2566 -
                      (C554 * C3894 + C139463 * C4410) * C2662 -
                      (C554 * C3992 + C139463 * C4498) * C2567) *
                         C91) *
                        C139448 * C139303 * C139384)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C139448 * C139346 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C89 +
                     (C2473 - (C2472 + C2471) + C2487) * C90 +
                     (C2476 - (C2477 + C2478) + C2488) * C91) *
                        C139448 * C139346 * C822 +
                    (C2489 * C89 + (C2478 + C2477 - C2476 - C2488) * C90 +
                     (C590 * C1875 + C741 * C139571 -
                      (C554 * C1701 + C139463 * C2267) * C1876 -
                      (C554 * C1881 + C139463 * C2464) * C139384) *
                         C91) *
                        C139448 * C139346 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C139448 * C2565 +
                    (((C554 * C3891 + C139463 * C4407) * C1876 -
                      ((C554 * C1011 + C139463 * C1602) * C139571 +
                       (C554 * C832 + C139463 * C1396) * C1875) +
                      (C554 * C4075 + C139463 * C4573) * C139384) *
                         C89 +
                     ((C554 * C3892 + C139463 * C4408) * C1876 -
                      (C1616 * C139571 + C1418 * C1875) +
                      (C554 * C4076 + C139463 * C4574) * C139384) *
                         C90 +
                     ((C554 * C3893 + C139463 * C4409) * C1876 -
                      (C1615 * C139571 + C1420 * C1875) +
                      (C554 * C4077 + C139463 * C4575) * C139384) *
                         C91) *
                        C139448 * C2566 +
                    (((C554 * C2570 + C139463 * C3105) * C1875 +
                      (C554 * C2745 + C139463 * C3295) * C139571 -
                      (C554 * C3896 + C139463 * C4412) * C1876 -
                      (C554 * C4080 + C139463 * C4576) * C139384) *
                         C89 +
                     (C3122 * C1875 + C3306 * C139571 -
                      (C554 * C3895 + C139463 * C4411) * C1876 -
                      (C554 * C4079 + C139463 * C4577) * C139384) *
                         C90 +
                     (C3124 * C1875 + C3307 * C139571 -
                      (C554 * C3894 + C139463 * C4410) * C1876 -
                      (C554 * C4078 + C139463 * C4578) * C139384) *
                         C91) *
                        C139448 * C2567) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6694 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139601 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C6695 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C6696 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C6691) *
               C13593 +
           ((C14328 + C14329) * C6694 + (C14330 + C14331) * C139601 -
            (C14332 + C14333) * C6695 - (C14334 + C14335) * C139590 +
            (C14336 + C14337) * C6696 + (C14338 + C14339) * C6691) *
               C139598) *
              C139463 * C139372 * C6692 +
          (((C14333 + C14332) * C6695 -
            ((C14331 + C14330) * C139601 + (C14329 + C14328) * C6694) +
            (C14335 + C14334) * C139590 - (C14337 + C14336) * C6696 -
            (C14339 + C14338) * C6691) *
               C13593 +
           ((C16293 + C16294) * C6695 -
            ((C16295 + C16296) * C139601 + (C16297 + C16298) * C6694) +
            (C16299 + C16300) * C139590 -
            (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
             C13591 * C2576) *
                C6696 -
            (C13596 * C2581 + C139587 * C2585 + C13595 * C2579 +
             C13591 * C2584) *
                C6691) *
               C139598) *
              C139463 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6771 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C6692 -
            (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
               C13593 +
           ((C14328 + C14329) * C6771 + (C14451 + C14450) * C6692 -
            (C16297 + C16298) * C6772 - (C16408 + C16407) * C139360) *
               C139598) *
              C139463 * C139601 +
          (((C14333 + C14332) * C6772 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C6692 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C6771) +
            (C14452 + C14453) * C139360) *
               C13593 +
           ((C16293 + C16294) * C6772 -
            ((C14453 + C14452) * C6692 + (C14332 + C14333) * C6771) +
            (C16410 + C16409) * C139360) *
               C139598) *
              C139463 * C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C6771 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C6692 -
            (C14337 + C14336) * C6772 - (C14454 + C14455) * C139360) *
               C13593 +
           ((C14336 + C14337) * C6771 + (C14455 + C14454) * C6692 -
            (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
             C13591 * C2576) *
                C6772 -
            (C13596 * C2666 + C139587 * C2670 + C13595 * C2665 +
             C13591 * C2669) *
                C139360) *
               C139598) *
              C139463 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C13593 +
            ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) *
                C139598) *
               C139463 * C6692 -
           (((C16517 + C16518) * C139372 + (C16297 + C16298) * C244) * C139598 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
               C139463 * C139360) *
              C139601 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C13593 +
            ((C16293 + C16294) * C244 + (C16519 + C16520) * C139372) *
                C139598) *
               C139463 * C139360 -
           (((C14569 + C14568) * C139372 + (C14332 + C14333) * C244) * C139598 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139463 * C6692) *
              C139590 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                 C139372) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14570 + C14571) * C139372) *
                C139598) *
               C139463 * C6692 -
           (((C13596 * C2748 + C139587 * C2752 + C13595 * C2747 +
              C13591 * C2751) *
                 C139372 +
             (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
              C13591 * C2576) *
                 C244) *
                C139598 +
            ((C14571 + C14570) * C139372 + (C14337 + C14336) * C244) * C13593) *
               C139463 * C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6694 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139601 -
            (C13822 + C13823) * C6695 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C6696 + (C13828 + C13829) * C6691) *
               C139463 * C13591 +
           ((C13823 + C13822) * C6694 + (C13825 + C13824) * C139601 -
            (C13827 + C13826) * C6695 - (C13829 + C13828) * C139590 +
            (C13831 + C13830) * C6696 + (C13833 + C13832) * C6691) *
               C139463 * C139587) *
              C139372 * C6692 +
          (((C14686 + C14687) * C6695 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139601 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C6694) +
            (C14688 + C14689) * C139590 - (C14690 + C14691) * C6696 -
            (C14692 + C14693) * C6691) *
               C139463 * C13591 +
           ((C14691 + C14690) * C6695 -
            ((C14689 + C14688) * C139601 + (C14687 + C14686) * C6694) +
            (C14693 + C14692) * C139590 -
            (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
             C13593 * C1096) *
                C6696 -
            (C13796 * C2581 + C139598 * C2834 + C13795 * C841 +
             C13593 * C1101) *
                C6691) *
               C139463 * C139587) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6771 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C6692 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C6772 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C139463 * C13591 +
           ((C13823 + C13822) * C6771 + (C13912 + C13913) * C6692 -
            (C14687 + C14686) * C6772 - (C14800 + C14801) * C139360) *
               C139463 * C139587) *
              C139601 +
          (((C14686 + C14687) * C6772 -
            ((C13913 + C13912) * C6692 + (C13822 + C13823) * C6771) +
            (C14801 + C14800) * C139360) *
               C139463 * C13591 +
           ((C14691 + C14690) * C6772 -
            ((C13914 + C13915) * C6692 + (C13827 + C13826) * C6771) +
            (C14802 + C14803) * C139360) *
               C139463 * C139587) *
              C139590 +
          (((C13826 + C13827) * C6771 + (C13915 + C13914) * C6692 -
            (C14690 + C14691) * C6772 - (C14803 + C14802) * C139360) *
               C139463 * C13591 +
           ((C13831 + C13830) * C6771 + (C13916 + C13917) * C6692 -
            (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
             C13593 * C1096) *
                C6772 -
            (C13796 * C2666 + C139598 * C2924 + C13795 * C928 +
             C13593 * C1198) *
                C139360) *
               C139463 * C139587) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
                C139587) *
               C6692 -
           (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
                C139587 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C139463 * C13591) *
               C139360) *
              C139601 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C139463 *
                C13591 +
            ((C14691 + C14690) * C244 + (C14912 + C14913) * C139372) * C139463 *
                C139587) *
               C139360 -
           (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
                C139587 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
                C13591) *
               C6692) *
              C139590 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C139463 *
                C13591 +
            ((C13831 + C13830) * C244 + (C14000 + C14001) * C139372) * C139463 *
                C139587) *
               C6692 -
           (((C13796 * C2748 + C139598 * C3020 + C13795 * C1012 +
              C13593 * C1302) *
                 C139372 +
             (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
              C13593 * C1096) *
                 C244) *
                C139463 * C139587 +
            ((C14913 + C14912) * C139372 + (C14690 + C14691) * C244) * C139463 *
                C13591) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C6694 +
             (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
             C585 * C139590 + C586 * C6696 + C587 * C6691) *
                C13591 +
            (C584 * C6694 + C585 * C139601 - C586 * C6695 - C587 * C139590 +
             C588 * C6696 + C589 * C6691) *
                C139587) *
               C13593 +
           ((C22077 + C22078 - C22079 - C22080 + C22081 + C22082) * C13591 +
            (C22083 + C22084 - C22085 - C22086 + C22087 + C22088) * C139587) *
               C139598) *
              C139372 * C6692 +
          (((C22079 - (C22078 + C22077) + C22080 - C22081 - C22082) * C13591 +
            (C22085 - (C22084 + C22083) + C22086 - C22087 - C22088) * C139587) *
               C13593 +
           ((C3122 * C6695 - (C16959 * C139601 + C16960 * C6694) +
             C3123 * C139590 - C3124 * C6696 - C3125 * C6691) *
                C13591 +
            (C3124 * C6695 - (C3123 * C139601 + C3122 * C6694) +
             C3125 * C139590 - (C554 * C2573 + C139463 * C3108) * C6696 -
             (C554 * C2581 + C139463 * C3112) * C6691) *
                C139587) *
               C139598) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C6771 +
             (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
             C15138 * C139360) *
                C13591 +
            (C7234 + C7235 - C7236 - C7237) * C139587) *
               C13593 +
           ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
             C17072 * C139360) *
                C13591 +
            (C22187 + C22188 - C22189 - C22190) * C139587) *
               C139598) *
              C139601 +
          (((C7236 - (C7235 + C7234) + C7237) * C13591 +
            (C7240 - (C7239 + C7238) + C7241) * C139587) *
               C13593 +
           ((C22189 - (C22188 + C22187) + C22190) * C13591 +
            (C22191 - (C22192 + C22193) + C22194) * C139587) *
               C139598) *
              C139590 +
          ((C7248 * C13591 + (C7244 + C7243 - C7242 - C7245) * C139587) *
               C13593 +
           ((C22193 + C22192 - C22191 - C22194) * C13591 +
            (C1422 * C6771 + C1521 * C6692 -
             (C554 * C2573 + C139463 * C3108) * C6772 -
             (C554 * C2666 + C139463 * C3202) * C139360) *
                C139587) *
               C139598) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C13591 +
             (C726 + C742) * C139587) *
                C13593 +
            ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
               C6692 -
           ((C17173 * C139587 + (C17183 + C17176) * C13591) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
               C139360) *
              C139601 +
          (((C15240 * C13591 + C15242 * C139587) * C13593 +
            (C17177 * C13591 + (C3303 + C3309) * C139587) * C139598) *
               C139360 -
           ((C1621 * C139587 + C15241 * C13591) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
               C6692) *
              C139590 +
          (((C746 * C13591 + (C734 + C744) * C139587) * C13593 +
            (C15242 * C13591 + (C1612 + C1620) * C139587) * C139598) *
               C6692 -
           ((((C554 * C2748 + C139463 * C3298) * C139372 +
              (C554 * C2573 + C139463 * C3108) * C244) *
                 C139587 +
             (C3309 + C3303) * C13591) *
                C139598 +
            ((C1620 + C1612) * C139587 + C1621 * C13591) * C13593) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7401 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C7396 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C7402 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C13593 +
           ((C14328 + C14329) * C7401 + (C14330 + C14331) * C7396 -
            (C14332 + C14333) * C7402 - (C14334 + C14335) * C139308) *
               C139598) *
              C139463 * C139372 * C139602 +
          (((C14333 + C14332) * C7402 -
            ((C14331 + C14330) * C7396 + (C14329 + C14328) * C7401) +
            (C14335 + C14334) * C139308) *
               C13593 +
           ((C16293 + C16294) * C7402 -
            ((C16295 + C16296) * C7396 + (C16297 + C16298) * C7401) +
            (C16299 + C16300) * C139308) *
               C139598) *
              C139463 * C139372 * C139593 +
          (((C16298 + C16297) * C7401 + (C16296 + C16295) * C7396 -
            (C16294 + C16293) * C7402 - (C16300 + C16299) * C139308) *
               C13593 +
           ((C17267 + C17268) * C7401 + (C17269 + C17270) * C7396 -
            (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
             C13591 * C3372) *
                C7402 -
            (C13596 * C3368 + C139587 * C3374 + C13595 * C3369 +
             C13591 * C3375) *
                C139308) *
               C139598) *
              C139463 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7477 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139602 -
            (C14329 + C14328) * C7478 - (C14450 + C14451) * C139593 +
            (C16298 + C16297) * C7479 + (C16407 + C16408) * C7400) *
               C13593 +
           ((C14328 + C14329) * C7477 + (C14451 + C14450) * C139602 -
            (C16297 + C16298) * C7478 - (C16408 + C16407) * C139593 +
            (C17267 + C17268) * C7479 + (C17346 + C17345) * C7400) *
               C139598) *
              C139463 * C7396 +
          (((C14333 + C14332) * C7478 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139602 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C7477) +
            (C14452 + C14453) * C139593 - (C16294 + C16293) * C7479 -
            (C16409 + C16410) * C7400) *
               C13593 +
           ((C16293 + C16294) * C7478 -
            ((C14453 + C14452) * C139602 + (C14332 + C14333) * C7477) +
            (C16410 + C16409) * C139593 -
            (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
             C13591 * C3372) *
                C7479 -
            (C13596 * C3431 + C139587 * C3434 + C13595 * C3432 +
             C13591 * C3435) *
                C7400) *
               C139598) *
              C139463 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C13593 +
            ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) *
                C139598) *
               C139463 * C139602 -
           (((C16517 + C16518) * C139372 + (C16297 + C16298) * C244) * C139598 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
               C139463 * C139593 +
           (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C13593 +
            ((C17267 + C17268) * C244 + (C17421 + C17422) * C139372) *
                C139598) *
               C139463 * C7400) *
              C7396 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C13593 +
            ((C16293 + C16294) * C244 + (C16519 + C16520) * C139372) *
                C139598) *
               C139463 * C139593 -
           (((C14569 + C14568) * C139372 + (C14332 + C14333) * C244) * C139598 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139463 * C139602 -
           (((C13596 * C3487 + C139587 * C3490 + C13595 * C3488 +
              C13591 * C3491) *
                 C139372 +
             (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
              C13591 * C3372) *
                 C244) *
                C139598 +
            ((C16520 + C16519) * C139372 + (C16294 + C16293) * C244) * C13593) *
               C139463 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7401 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C7396 -
            (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
               C139463 * C13591 +
           ((C13823 + C13822) * C7401 + (C13825 + C13824) * C7396 -
            (C13827 + C13826) * C7402 - (C13829 + C13828) * C139308) *
               C139463 * C139587) *
              C139372 * C139602 +
          (((C14686 + C14687) * C7402 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C7396 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C7401) +
            (C14688 + C14689) * C139308) *
               C139463 * C13591 +
           ((C14691 + C14690) * C7402 -
            ((C14689 + C14688) * C7396 + (C14687 + C14686) * C7401) +
            (C14693 + C14692) * C139308) *
               C139463 * C139587) *
              C139372 * C139593 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C7401 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C7396 -
            (C16627 + C16628) * C7402 - (C16629 + C16630) * C139308) *
               C139463 * C13591 +
           ((C16628 + C16627) * C7401 + (C16630 + C16629) * C7396 -
            (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
             C13593 * C2829) *
                C7402 -
            (C13796 * C3368 + C139598 * C3546 + C13795 * C2579 +
             C13593 * C2833) *
                C139308) *
               C139463 * C139587) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7477 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139602 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C7478 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139593 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C7400) *
               C139463 * C13591 +
           ((C13823 + C13822) * C7477 + (C13912 + C13913) * C139602 -
            (C14687 + C14686) * C7478 - (C14800 + C14801) * C139593 +
            (C16628 + C16627) * C7479 + (C16733 + C16734) * C7400) *
               C139463 * C139587) *
              C7396 +
          (((C14686 + C14687) * C7478 -
            ((C13913 + C13912) * C139602 + (C13822 + C13823) * C7477) +
            (C14801 + C14800) * C139593 - (C16627 + C16628) * C7479 -
            (C16734 + C16733) * C7400) *
               C139463 * C13591 +
           ((C14691 + C14690) * C7478 -
            ((C13914 + C13915) * C139602 + (C13827 + C13826) * C7477) +
            (C14802 + C14803) * C139593 -
            (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
             C13593 * C2829) *
                C7479 -
            (C13796 * C3431 + C139598 * C3601 + C13795 * C2665 +
             C13593 * C2923) *
                C7400) *
               C139463 * C139587) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
                C139587) *
               C139602 -
           (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
                C139587 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C139463 * C13591) *
               C139593 +
           (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C139463 * C13591 +
            ((C16628 + C16627) * C244 + (C16837 + C16838) * C139372) * C139463 *
                C139587) *
               C7400) *
              C7396 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C139463 *
                C13591 +
            ((C14691 + C14690) * C244 + (C14912 + C14913) * C139372) * C139463 *
                C139587) *
               C139593 -
           (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
                C139587 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
                C13591) *
               C139602 -
           (((C13796 * C3487 + C139598 * C3652 + C13795 * C2747 +
              C13593 * C3019) *
                 C139372 +
             (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
              C13593 * C2829) *
                 C244) *
                C139463 * C139587 +
            ((C16838 + C16837) * C139372 + (C16627 + C16628) * C244) * C139463 *
                C13591) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C13591 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                C139587) *
               C13593 +
           ((C22979 + C22980 - C22981 - C22982) * C13591 +
            (C22983 + C22984 - C22985 - C22986) * C139587) *
               C139598) *
              C139372 * C139602 +
          (((C22981 - (C22980 + C22979) + C22982) * C13591 +
            (C22985 - (C22984 + C22983) + C22986) * C139587) *
               C13593 +
           ((C22987 - (C22988 + C22989) + C22990) * C13591 +
            (C22991 - (C22992 + C22993) + C22994) * C139587) *
               C139598) *
              C139372 * C139593 +
          (((C22989 + C22988 - C22987 - C22990) * C13591 +
            (C22993 + C22992 - C22991 - C22994) * C139587) *
               C13593 +
           ((C17713 * C7401 + C17714 * C7396 - C16961 * C7402 -
             C16962 * C139308) *
                C13591 +
            (C16961 * C7401 + C16962 * C7396 -
             (C554 * C3365 + C139463 * C3705) * C7402 -
             (C554 * C3368 + C139463 * C3708) * C139308) *
                C139587) *
               C139598) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7477 +
             (C554 * C182 + C139463 * C641) * C139602 - C15026 * C7478 -
             C15138 * C139593 + C16960 * C7479 + C17072 * C7400) *
                C13591 +
            (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C139587) *
               C13593 +
           ((C15026 * C7477 + C15138 * C139602 - C16960 * C7478 -
             C17072 * C139593 + C17713 * C7479 + C17787 * C7400) *
                C13591 +
            (C23093 + C23094 - C23095 - C23096 + C23097 + C23098) * C139587) *
               C139598) *
              C7396 +
          (((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C13591 +
            (C7945 - (C7944 + C7943) + C7946 - C7947 - C7948) * C139587) *
               C13593 +
           ((C23095 - (C23094 + C23093) + C23096 - C23097 - C23098) * C13591 +
            (C3124 * C7478 - (C1520 * C139602 + C1420 * C7477) +
             C3219 * C139593 - (C554 * C3365 + C139463 * C3705) * C7479 -
             (C554 * C3431 + C139463 * C3763) * C7400) *
                C139587) *
               C139598) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C13591 +
             (C726 + C742) * C139587) *
                C13593 +
            ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
               C139602 -
           ((C17173 * C139587 + (C17183 + C17176) * C13591) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
               C139593 +
           (((C17176 + C17183) * C13591 + C17177 * C139587) * C13593 +
            ((C17856 + C17860) * C13591 + (C17178 + C17184) * C139587) *
                C139598) *
               C7400) *
              C7396 +
          (((C15240 * C13591 + C15242 * C139587) * C13593 +
            (C17177 * C13591 + (C3303 + C3309) * C139587) * C139598) *
               C139593 -
           ((C1621 * C139587 + C15241 * C13591) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
               C139602 -
           ((((C554 * C3487 + C139463 * C3814) * C139372 +
              (C554 * C3365 + C139463 * C3705) * C244) *
                 C139587 +
             (C17184 + C17178) * C13591) *
                C139598 +
            ((C3309 + C3303) * C139587 + C17173 * C13591) * C13593) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C7401 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C7396 -
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C7402 -
             (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                 C139308) *
                C13593 +
            ((C14328 + C14329) * C7401 + (C14330 + C14331) * C7396 -
             (C14332 + C14333) * C7402 - (C14334 + C14335) * C139308) *
                C139598) *
               C139463 * C139571 +
           (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C7402 -
             ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
               C13591 * C1714) *
                  C7396 +
              (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
               C13591 * C1708) *
                  C7401) +
             (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
              C139587 * C1712) *
                 C139308) *
                C13593 +
            ((C23335 + C23336) * C7402 -
             ((C17983 + C17984) * C7396 + (C17985 + C17986) * C7401) +
             (C23337 + C23338) * C139308) *
                C139598) *
               C139463 * C139384) *
              C6692 +
          ((((C14333 + C14332) * C7402 -
             ((C14331 + C14330) * C7396 + (C14329 + C14328) * C7401) +
             (C14335 + C14334) * C139308) *
                C13593 +
            ((C16293 + C16294) * C7402 -
             ((C16295 + C16296) * C7396 + (C16297 + C16298) * C7401) +
             (C16299 + C16300) * C139308) *
                C139598) *
               C139463 * C139571 +
           (((C17986 + C17985) * C7401 + (C17984 + C17983) * C7396 -
             (C23336 + C23335) * C7402 - (C23338 + C23337) * C139308) *
                C13593 +
            ((C17987 + C17988) * C7401 + (C17989 + C17990) * C7396 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C7402 -
             (C13596 * C3903 + C139587 * C3912 + C13595 * C3904 +
              C13591 * C3913) *
                 C139308) *
                C139598) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C6771 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C6692 -
             (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
                C13593 +
            ((C14328 + C14329) * C6771 + (C14451 + C14450) * C6692 -
             (C16297 + C16298) * C6772 - (C16408 + C16407) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C14333 + C14332) * C6772 -
             ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                  C6692 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C6771) +
             (C14452 + C14453) * C139360) *
                C13593 +
            ((C16293 + C16294) * C6772 -
             ((C14453 + C14452) * C6692 + (C14332 + C14333) * C6771) +
             (C16410 + C16409) * C139360) *
                C139598) *
               C139463 * C139308) *
              C139571 +
          ((((C17986 + C17985) * C6772 -
             ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
               C13591 * C1799) *
                  C6692 +
              (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
               C13591 * C1708) *
                  C6771) +
             (C18101 + C18102) * C139360) *
                C13593 +
            ((C17987 + C17988) * C6772 -
             ((C18102 + C18101) * C6692 + (C17985 + C17986) * C6771) +
             (C18104 + C18103) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C6771 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C6692 -
             (C23336 + C23335) * C6772 - (C23473 + C23474) * C139360) *
                C13593 +
            ((C23335 + C23336) * C6771 + (C23474 + C23473) * C6692 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C6772 -
             (C13596 * C3992 + C139587 * C3998 + C13595 * C3993 +
              C13591 * C3999) *
                 C139360) *
                C139598) *
               C139463 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C1875 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139571 -
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C1876 -
             (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
              C13591 * C1884) *
                 C139384) *
                C13593 +
            ((C14328 + C14329) * C1875 + (C14566 + C14567) * C139571 -
             (C17985 + C17986) * C1876 - (C18215 + C18216) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C17986 + C17985) * C1876 -
             ((C14567 + C14566) * C139571 + (C14329 + C14328) * C1875) +
             (C18216 + C18215) * C139384) *
                C13593 +
            ((C17987 + C17988) * C1876 -
             ((C16517 + C16518) * C139571 + (C16297 + C16298) * C1875) +
             (C18217 + C18218) * C139384) *
                C139598) *
               C139463 * C139360) *
              C7396 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C1876 -
             ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                  C139571 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C1875) +
             (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
              C139587 * C1882) *
                 C139384) *
                C13593 +
            ((C23335 + C23336) * C1876 -
             ((C14569 + C14568) * C139571 + (C14332 + C14333) * C1875) +
             (C23609 + C23610) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C14333 + C14332) * C1875 + (C14568 + C14569) * C139571 -
             (C23336 + C23335) * C1876 - (C23610 + C23609) * C139384) *
                C13593 +
            ((C16293 + C16294) * C1875 + (C16519 + C16520) * C139571 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C1876 -
             (C13596 * C4078 + C139587 * C4084 + C13595 * C4079 +
              C13591 * C4085) *
                 C139384) *
                C139598) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C7401 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C7396 -
             (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
                C139463 * C13591 +
            ((C13823 + C13822) * C7401 + (C13825 + C13824) * C7396 -
             (C13827 + C13826) * C7402 - (C13829 + C13828) * C139308) *
                C139463 * C139587) *
               C139571 +
           (((C15653 + C15654) * C7402 -
             ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
               C13593 * C1966) *
                  C7396 +
              (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
               C13593 * C1962) *
                  C7401) +
             (C15655 + C15656) * C139308) *
                C139463 * C13591 +
            ((C15658 + C15657) * C7402 -
             ((C15656 + C15655) * C7396 + (C15654 + C15653) * C7401) +
             (C15660 + C15659) * C139308) *
                C139463 * C139587) *
               C139384) *
              C6692 +
          ((((C14686 + C14687) * C7402 -
             ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
               C13593 * C1098) *
                  C7396 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C7401) +
             (C14688 + C14689) * C139308) *
                C139463 * C13591 +
            ((C14691 + C14690) * C7402 -
             ((C14689 + C14688) * C7396 + (C14687 + C14686) * C7401) +
             (C14693 + C14692) * C139308) *
                C139463 * C139587) *
               C139571 +
           (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C7401 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C7396 -
             (C23749 + C23750) * C7402 - (C23751 + C23752) * C139308) *
                C139463 * C13591 +
            ((C23750 + C23749) * C7401 + (C23752 + C23751) * C7396 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C7402 -
             (C13796 * C3903 + C139598 * C4170 + C13795 * C3902 +
              C13593 * C4169) *
                 C139308) *
                C139463 * C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C6771 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C6692 -
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C6772 -
             (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
              C13593 * C1195) *
                 C139360) *
                C139463 * C13591 +
            ((C13823 + C13822) * C6771 + (C13912 + C13913) * C6692 -
             (C14687 + C14686) * C6772 - (C14800 + C14801) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C14686 + C14687) * C6772 -
             ((C13913 + C13912) * C6692 + (C13822 + C13823) * C6771) +
             (C14801 + C14800) * C139360) *
                C139463 * C13591 +
            ((C14691 + C14690) * C6772 -
             ((C13914 + C13915) * C6692 + (C13827 + C13826) * C6771) +
             (C14802 + C14803) * C139360) *
                C139463 * C139587) *
               C139308) *
              C139571 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C6772 -
             ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
               C13593 * C2066) *
                  C6692 +
              (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
               C13593 * C1962) *
                  C6771) +
             (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
              C139598 * C4248) *
                 C139360) *
                C139463 * C13591 +
            ((C23750 + C23749) * C6772 -
             ((C15768 + C15767) * C6692 + (C15654 + C15653) * C6771) +
             (C23887 + C23888) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C15653 + C15654) * C6771 + (C15767 + C15768) * C6692 -
             (C23749 + C23750) * C6772 - (C23888 + C23887) * C139360) *
                C139463 * C13591 +
            ((C15658 + C15657) * C6771 + (C15769 + C15770) * C6692 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C6772 -
             (C13796 * C3992 + C139598 * C4252 + C13795 * C3991 +
              C13593 * C4251) *
                 C139360) *
                C139463 * C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C1875 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139571 -
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C1876 -
             (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
              C13593 * C2159) *
                 C139384) *
                C139463 * C13591 +
            ((C13823 + C13822) * C1875 + (C13996 + C13997) * C139571 -
             (C15654 + C15653) * C1876 - (C15877 + C15878) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C1876 -
             ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
               C13593 * C1301) *
                  C139571 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C1875) +
             (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
              C139598 * C4330) *
                 C139384) *
                C139463 * C13591 +
            ((C23750 + C23749) * C1876 -
             ((C14910 + C14911) * C139571 + (C14687 + C14686) * C1875) +
             (C24023 + C24024) * C139384) *
                C139463 * C139587) *
               C139360) *
              C7396 +
          ((((C15653 + C15654) * C1876 -
             ((C13997 + C13996) * C139571 + (C13822 + C13823) * C1875) +
             (C15878 + C15877) * C139384) *
                C139463 * C13591 +
            ((C15658 + C15657) * C1876 -
             ((C13998 + C13999) * C139571 + (C13827 + C13826) * C1875) +
             (C15879 + C15880) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C14686 + C14687) * C1875 + (C14911 + C14910) * C139571 -
             (C23749 + C23750) * C1876 - (C24024 + C24023) * C139384) *
                C139463 * C13591 +
            ((C14691 + C14690) * C1875 + (C14912 + C14913) * C139571 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C1876 -
             (C13796 * C4078 + C139598 * C4332 + C13795 * C4077 +
              C13593 * C4329) *
                 C139384) *
                C139463 * C139587) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C7401 +
              (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
              C585 * C139308) *
                 C13591 +
             (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                 C139587) *
                C13593 +
            ((C22979 + C22980 - C22981 - C22982) * C13591 +
             (C22983 + C22984 - C22985 - C22986) * C139587) *
                C139598) *
               C139571 +
           (((C2286 * C7402 -
              ((C554 * C1707 + C139463 * C2268) * C7396 +
               (C554 * C1700 + C139463 * C2264) * C7401) +
              C2287 * C139308) *
                 C13591 +
             (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
              C2289 * C139308) *
                 C139587) *
                C13593 +
            ((C24155 - (C24156 + C24157) + C24158) * C13591 +
             (C24159 - (C24160 + C24161) + C24162) * C139587) *
                C139598) *
               C139384) *
              C6692 +
          ((((C22981 - (C22980 + C22979) + C22982) * C13591 +
             (C22985 - (C22984 + C22983) + C22986) * C139587) *
                C13593 +
            ((C22987 - (C22988 + C22989) + C22990) * C13591 +
             (C22991 - (C22992 + C22993) + C22994) * C139587) *
                C139598) *
               C139571 +
           (((C24157 + C24156 - C24155 - C24158) * C13591 +
             (C24161 + C24160 - C24159 - C24162) * C139587) *
                C13593 +
            ((C18639 * C7401 + C18640 * C7396 - C18641 * C7402 -
              C18642 * C139308) *
                 C13591 +
             (C18641 * C7401 + C18642 * C7396 -
              (C554 * C3894 + C139463 * C4410) * C7402 -
              (C554 * C3903 + C139463 * C4416) * C139308) *
                 C139587) *
                C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C6771 +
                        (C554 * C182 + C139463 * C641) * C6692 -
                        C15026 * C6772 - C15138 * C139360) *
                           C13591 +
                       (C7234 + C7235 - C7236 - C7237) * C139587) *
                          C13593 +
                      ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                        C17072 * C139360) *
                           C13591 +
                       (C22187 + C22188 - C22189 - C22190) * C139587) *
                          C139598) *
                         C7396 +
                     (((C7236 - (C7235 + C7234) + C7237) * C13591 +
                       (C7240 - (C7239 + C7238) + C7241) * C139587) *
                          C13593 +
                      ((C22189 - (C22188 + C22187) + C22190) * C13591 +
                       (C22191 - (C22192 + C22193) + C22194) * C139587) *
                          C139598) *
                         C139308) *
                        C139571 +
                    ((((C18638 * C6772 -
                        ((C554 * C1794 + C139463 * C2368) * C6692 +
                         (C554 * C1700 + C139463 * C2264) * C6771) +
                        C18755 * C139360) *
                           C13591 +
                       (C8874 - (C8875 + C8876) + C8886) * C139587) *
                          C13593 +
                      ((C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                        C18756 * C139360) *
                           C13591 +
                       (C24293 - (C24294 + C24295) + C24296) * C139587) *
                          C139598) *
                         C7396 +
                     (((C8876 + C8875 - C8874 - C8886) * C13591 +
                       (C8881 + C8880 - C8879 - C8887) * C139587) *
                          C13593 +
                      ((C24295 + C24294 - C24293 - C24296) * C13591 +
                       (C8773 * C6771 + C8885 * C6692 -
                        (C554 * C3894 + C139463 * C4410) * C6772 -
                        (C554 * C3992 + C139463 * C4498) * C139360) *
                           C139587) *
                          C139598) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C1875 +
              (C554 * C245 + C139463 * C719) * C139571 -
              (C554 * C1700 + C139463 * C2264) * C1876 -
              (C554 * C1879 + C139463 * C2460) * C139384) *
                 C13591 +
             (C2466 + C2467 - C2468 - C2485) * C139587) *
                C13593 +
            ((C18858 + C18859 - C18860 - C18876) * C13591 + C24431 * C139587) *
                C139598) *
               C6692 +
           (((C18860 - (C18859 + C18858) + C18876) * C13591 +
             C24432 * C139587) *
                C13593 +
            ((C18863 - (C18864 + C18865) + C18877) * C13591 +
             (C18868 - (C18869 + C18870) + C18878) * C139587) *
                C139598) *
               C139360) *
              C7396 +
          ((((C2468 - (C2467 + C2466) + C2485) * C13591 +
             (C2473 - (C2472 + C2471) + C2487) * C139587) *
                C13593 +
            (C24432 * C13591 + (C8992 - (C8993 + C8994) + C9000) * C139587) *
                C139598) *
               C6692 +
           ((C24431 * C13591 + (C8994 + C8993 - C8992 - C9000) * C139587) *
                C13593 +
            ((C18870 + C18869 - C18868 - C18878) * C13591 +
             (C3124 * C1875 + C3307 * C139571 -
              (C554 * C3894 + C139463 * C4410) * C1876 -
              (C554 * C4078 + C139463 * C4578) * C139384) *
                 C139587) *
                C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C137108 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139562 -
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C137101 -
             (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                 C139308) *
                C13593 +
            ((C14328 + C14329) * C137108 + (C14330 + C14331) * C139562 -
             (C14332 + C14333) * C137101 - (C14334 + C14335) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C137101 -
             ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
               C13591 * C1714) *
                  C139562 +
              (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
               C13591 * C1708) *
                  C137108) +
             (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
              C139587 * C1712) *
                 C139308) *
                C13593 +
            ((C23335 + C23336) * C137101 -
             ((C17983 + C17984) * C139562 + (C17985 + C17986) * C137108) +
             (C23337 + C23338) * C139308) *
                C139598) *
               C139463 * C139384) *
              C6692 +
          ((((C14333 + C14332) * C137101 -
             ((C14331 + C14330) * C139562 + (C14329 + C14328) * C137108) +
             (C14335 + C14334) * C139308) *
                C13593 +
            ((C16293 + C16294) * C137101 -
             ((C16295 + C16296) * C139562 + (C16297 + C16298) * C137108) +
             (C16299 + C16300) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C17986 + C17985) * C137108 + (C17984 + C17983) * C139562 -
             (C23336 + C23335) * C137101 - (C23338 + C23337) * C139308) *
                C13593 +
            ((C17987 + C17988) * C137108 + (C17989 + C17990) * C139562 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C137101 -
             (C13596 * C3903 + C139587 * C3912 + C13595 * C3904 +
              C13591 * C3913) *
                 C139308) *
                C139598) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C6771 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C6692 -
             (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
                C13593 +
            ((C14328 + C14329) * C6771 + (C14451 + C14450) * C6692 -
             (C16297 + C16298) * C6772 - (C16408 + C16407) * C139360) *
                C139598) *
               C139463 * C139562 +
           (((C14333 + C14332) * C6772 -
             ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                  C6692 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C6771) +
             (C14452 + C14453) * C139360) *
                C13593 +
            ((C16293 + C16294) * C6772 -
             ((C14453 + C14452) * C6692 + (C14332 + C14333) * C6771) +
             (C16410 + C16409) * C139360) *
                C139598) *
               C139463 * C139308) *
              C9074 +
          ((((C17986 + C17985) * C6772 -
             ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
               C13591 * C1799) *
                  C6692 +
              (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
               C13591 * C1708) *
                  C6771) +
             (C18101 + C18102) * C139360) *
                C13593 +
            ((C17987 + C17988) * C6772 -
             ((C18102 + C18101) * C6692 + (C17985 + C17986) * C6771) +
             (C18104 + C18103) * C139360) *
                C139598) *
               C139463 * C139562 +
           (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C6771 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C6692 -
             (C23336 + C23335) * C6772 - (C23473 + C23474) * C139360) *
                C13593 +
            ((C23335 + C23336) * C6771 + (C23474 + C23473) * C6692 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C6772 -
             (C13596 * C3992 + C139587 * C3998 + C13595 * C3993 +
              C13591 * C3999) *
                 C139360) *
                C139598) *
               C139463 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C9224 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C9074 -
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C9225 -
             (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
              C13591 * C1884) *
                 C139384) *
                C13593 +
            ((C14328 + C14329) * C9224 + (C14566 + C14567) * C9074 -
             (C17985 + C17986) * C9225 - (C18215 + C18216) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C17986 + C17985) * C9225 -
             ((C14567 + C14566) * C9074 + (C14329 + C14328) * C9224) +
             (C18216 + C18215) * C139384) *
                C13593 +
            ((C17987 + C17988) * C9225 -
             ((C16517 + C16518) * C9074 + (C16297 + C16298) * C9224) +
             (C18217 + C18218) * C139384) *
                C139598) *
               C139463 * C139360) *
              C139562 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C9225 -
             ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                  C9074 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C9224) +
             (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
              C139587 * C1882) *
                 C139384) *
                C13593 +
            ((C23335 + C23336) * C9225 -
             ((C14569 + C14568) * C9074 + (C14332 + C14333) * C9224) +
             (C23609 + C23610) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C14333 + C14332) * C9224 + (C14568 + C14569) * C9074 -
             (C23336 + C23335) * C9225 - (C23610 + C23609) * C139384) *
                C13593 +
            ((C16293 + C16294) * C9224 + (C16519 + C16520) * C9074 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C9225 -
             (C13596 * C4078 + C139587 * C4084 + C13595 * C4079 +
              C13591 * C4085) *
                 C139384) *
                C139598) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C137108 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139562 -
             (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
                C139463 * C13591 +
            ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139562 -
             (C13827 + C13826) * C137101 - (C13829 + C13828) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C15653 + C15654) * C137101 -
             ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
               C13593 * C1966) *
                  C139562 +
              (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
               C13593 * C1962) *
                  C137108) +
             (C15655 + C15656) * C139308) *
                C139463 * C13591 +
            ((C15658 + C15657) * C137101 -
             ((C15656 + C15655) * C139562 + (C15654 + C15653) * C137108) +
             (C15660 + C15659) * C139308) *
                C139463 * C139587) *
               C139384) *
              C6692 +
          ((((C14686 + C14687) * C137101 -
             ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
               C13593 * C1098) *
                  C139562 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C137108) +
             (C14688 + C14689) * C139308) *
                C139463 * C13591 +
            ((C14691 + C14690) * C137101 -
             ((C14689 + C14688) * C139562 + (C14687 + C14686) * C137108) +
             (C14693 + C14692) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C137108 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C139562 -
             (C23749 + C23750) * C137101 - (C23751 + C23752) * C139308) *
                C139463 * C13591 +
            ((C23750 + C23749) * C137108 + (C23752 + C23751) * C139562 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C137101 -
             (C13796 * C3903 + C139598 * C4170 + C13795 * C3902 +
              C13593 * C4169) *
                 C139308) *
                C139463 * C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C6771 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C6692 -
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C6772 -
             (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
              C13593 * C1195) *
                 C139360) *
                C139463 * C13591 +
            ((C13823 + C13822) * C6771 + (C13912 + C13913) * C6692 -
             (C14687 + C14686) * C6772 - (C14800 + C14801) * C139360) *
                C139463 * C139587) *
               C139562 +
           (((C14686 + C14687) * C6772 -
             ((C13913 + C13912) * C6692 + (C13822 + C13823) * C6771) +
             (C14801 + C14800) * C139360) *
                C139463 * C13591 +
            ((C14691 + C14690) * C6772 -
             ((C13914 + C13915) * C6692 + (C13827 + C13826) * C6771) +
             (C14802 + C14803) * C139360) *
                C139463 * C139587) *
               C139308) *
              C9074 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C6772 -
             ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
               C13593 * C2066) *
                  C6692 +
              (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
               C13593 * C1962) *
                  C6771) +
             (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
              C139598 * C4248) *
                 C139360) *
                C139463 * C13591 +
            ((C23750 + C23749) * C6772 -
             ((C15768 + C15767) * C6692 + (C15654 + C15653) * C6771) +
             (C23887 + C23888) * C139360) *
                C139463 * C139587) *
               C139562 +
           (((C15653 + C15654) * C6771 + (C15767 + C15768) * C6692 -
             (C23749 + C23750) * C6772 - (C23888 + C23887) * C139360) *
                C139463 * C13591 +
            ((C15658 + C15657) * C6771 + (C15769 + C15770) * C6692 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C6772 -
             (C13796 * C3992 + C139598 * C4252 + C13795 * C3991 +
              C13593 * C4251) *
                 C139360) *
                C139463 * C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C9224 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C9225 -
             (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
              C13593 * C2159) *
                 C139384) *
                C139463 * C13591 +
            ((C13823 + C13822) * C9224 + (C13996 + C13997) * C9074 -
             (C15654 + C15653) * C9225 - (C15877 + C15878) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C9225 -
             ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
               C13593 * C1301) *
                  C9074 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C9224) +
             (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
              C139598 * C4330) *
                 C139384) *
                C139463 * C13591 +
            ((C23750 + C23749) * C9225 -
             ((C14910 + C14911) * C9074 + (C14687 + C14686) * C9224) +
             (C24023 + C24024) * C139384) *
                C139463 * C139587) *
               C139360) *
              C139562 +
          ((((C15653 + C15654) * C9225 -
             ((C13997 + C13996) * C9074 + (C13822 + C13823) * C9224) +
             (C15878 + C15877) * C139384) *
                C139463 * C13591 +
            ((C15658 + C15657) * C9225 -
             ((C13998 + C13999) * C9074 + (C13827 + C13826) * C9224) +
             (C15879 + C15880) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C14686 + C14687) * C9224 + (C14911 + C14910) * C9074 -
             (C23749 + C23750) * C9225 - (C24024 + C24023) * C139384) *
                C139463 * C13591 +
            ((C14691 + C14690) * C9224 + (C14912 + C14913) * C9074 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C9225 -
             (C13796 * C4078 + C139598 * C4332 + C13795 * C4077 +
              C13593 * C4329) *
                 C139384) *
                C139463 * C139587) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C137108 +
                        (C554 * C116 + C139463 * C561) * C139562 -
                        C584 * C137101 - C585 * C139308) *
                           C13591 +
                       (C584 * C137108 + C585 * C139562 - C586 * C137101 -
                        C587 * C139308) *
                           C139587) *
                          C13593 +
                      ((C16937 + C16938 - C16939 - C16940) * C13591 +
                       (C16941 + C16942 - C16943 - C16944) * C139587) *
                          C139598) *
                         C9074 +
                     (((C2286 * C137101 -
                        ((C554 * C1707 + C139463 * C2268) * C139562 +
                         (C554 * C1700 + C139463 * C2264) * C137108) +
                        C2287 * C139308) *
                           C13591 +
                       (C2288 * C137101 - (C2287 * C139562 + C2286 * C137108) +
                        C2289 * C139308) *
                           C139587) *
                          C13593 +
                      ((C28301 - (C28302 + C28303) + C28304) * C13591 +
                       (C28305 - (C28306 + C28307) + C28308) * C139587) *
                          C139598) *
                         C139384) *
                        C6692 +
                    ((((C16939 - (C16938 + C16937) + C16940) * C13591 +
                       (C16943 - (C16942 + C16941) + C16944) * C139587) *
                          C13593 +
                      ((C16945 - (C16963 + C16964) + C16950) * C13591 +
                       (C16951 - (C16952 + C16953) + C16954) * C139587) *
                          C139598) *
                         C9074 +
                     (((C28303 + C28302 - C28301 - C28304) * C13591 +
                       (C28307 + C28306 - C28305 - C28308) * C139587) *
                          C13593 +
                      ((C18639 * C137108 + C18640 * C139562 - C18641 * C137101 -
                        C18642 * C139308) *
                           C13591 +
                       (C18641 * C137108 + C18642 * C139562 -
                        (C554 * C3894 + C139463 * C4410) * C137101 -
                        (C554 * C3903 + C139463 * C4416) * C139308) *
                           C139587) *
                          C139598) *
                         C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[18] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C6771 +
                        (C554 * C182 + C139463 * C641) * C6692 -
                        C15026 * C6772 - C15138 * C139360) *
                           C13591 +
                       (C7234 + C7235 - C7236 - C7237) * C139587) *
                          C13593 +
                      ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                        C17072 * C139360) *
                           C13591 +
                       (C22187 + C22188 - C22189 - C22190) * C139587) *
                          C139598) *
                         C139562 +
                     (((C7236 - (C7235 + C7234) + C7237) * C13591 +
                       (C7240 - (C7239 + C7238) + C7241) * C139587) *
                          C13593 +
                      ((C22189 - (C22188 + C22187) + C22190) * C13591 +
                       (C22191 - (C22192 + C22193) + C22194) * C139587) *
                          C139598) *
                         C139308) *
                        C9074 +
                    ((((C18638 * C6772 -
                        ((C554 * C1794 + C139463 * C2368) * C6692 +
                         (C554 * C1700 + C139463 * C2264) * C6771) +
                        C18755 * C139360) *
                           C13591 +
                       (C8874 - (C8875 + C8876) + C8886) * C139587) *
                          C13593 +
                      ((C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                        C18756 * C139360) *
                           C13591 +
                       (C24293 - (C24294 + C24295) + C24296) * C139587) *
                          C139598) *
                         C139562 +
                     (((C8876 + C8875 - C8874 - C8886) * C13591 +
                       (C8881 + C8880 - C8879 - C8887) * C139587) *
                          C13593 +
                      ((C24295 + C24294 - C24293 - C24296) * C13591 +
                       (C8773 * C6771 + C8885 * C6692 -
                        (C554 * C3894 + C139463 * C4410) * C6772 -
                        (C554 * C3992 + C139463 * C4498) * C139360) *
                           C139587) *
                          C139598) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C9224 +
              (C554 * C245 + C139463 * C719) * C9074 -
              (C554 * C1700 + C139463 * C2264) * C9225 -
              (C554 * C1879 + C139463 * C2460) * C139384) *
                 C13591 +
             (C9687 + C9688 - C9689 - C9690) * C139587) *
                C13593 +
            ((C26489 + C26490 - C26491 - C26492) * C13591 + C26501 * C139587) *
                C139598) *
               C6692 +
           (((C26491 - (C26490 + C26489) + C26492) * C13591 +
             C26502 * C139587) *
                C13593 +
            ((C18639 * C9225 - (C17181 * C9074 + C16960 * C9224) +
              C18874 * C139384) *
                 C13591 +
             (C26495 - (C26496 + C26497) + C26498) * C139587) *
                C139598) *
               C139360) *
              C139562 +
          ((((C9689 - (C9688 + C9687) + C9690) * C13591 +
             (C9693 - (C9692 + C9691) + C9694) * C139587) *
                C13593 +
            (C26502 * C13591 +
             (C10612 - (C10613 + C10614) + C10615) * C139587) *
                C139598) *
               C6692 +
           ((C26501 * C13591 + (C10614 + C10613 - C10612 - C10615) * C139587) *
                C13593 +
            ((C26497 + C26496 - C26495 - C26498) * C13591 +
             (C3124 * C9224 + C3307 * C9074 -
              (C554 * C3894 + C139463 * C4410) * C9225 -
              (C554 * C4078 + C139463 * C4578) * C139384) *
                 C139587) *
                C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C13593 +
            ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
                C139598) *
               C139463 * C9074 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139598 +
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139303 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C3364) *
                C13593) *
               C139463 * C139384) *
              C139602 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) * C13593 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139598) *
               C139463 * C139384 -
           (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) *
                C139598 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C13593) *
               C139463 * C9074) *
              C139593 +
          ((((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C13593 +
            ((C17267 + C17268) * C3364 + (C17269 + C17270) * C139303) *
                C139598) *
               C139463 * C9074 -
           (((C13596 * C17960 + C139587 * C17964 + C13595 * C17961 +
              C13591 * C17965) *
                 C139303 +
             (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
              C13591 * C17963) *
                 C3364) *
                C139598 +
            ((C17990 + C17989) * C139303 + (C17988 + C17987) * C3364) *
                C13593) *
               C139463 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7477 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139602 -
            (C14329 + C14328) * C7478 - (C14450 + C14451) * C139593 +
            (C16298 + C16297) * C7479 + (C16407 + C16408) * C7400) *
               C13593 +
           ((C14328 + C14329) * C7477 + (C14451 + C14450) * C139602 -
            (C16297 + C16298) * C7478 - (C16408 + C16407) * C139593 +
            (C17267 + C17268) * C7479 + (C17346 + C17345) * C7400) *
               C139598) *
              C139463 * C139303 * C9074 +
          (((C17986 + C17985) * C7478 -
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139602 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C7477) +
            (C18101 + C18102) * C139593 - (C17988 + C17987) * C7479 -
            (C18103 + C18104) * C7400) *
               C13593 +
           ((C17987 + C17988) * C7478 -
            ((C18102 + C18101) * C139602 + (C17985 + C17986) * C7477) +
            (C18104 + C18103) * C139593 -
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C7479 -
            (C13596 * C18088 + C139587 * C18090 + C13595 * C18089 +
             C13591 * C18091) *
                C7400) *
               C139598) *
              C139463 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C9224 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C9074 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C9225 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139384) *
               C13593 +
           ((C14328 + C14329) * C9224 + (C14566 + C14567) * C9074 -
            (C17985 + C17986) * C9225 - (C18215 + C18216) * C139384) *
               C139598) *
              C139463 * C139602 +
          (((C17986 + C17985) * C9225 -
            ((C14567 + C14566) * C9074 + (C14329 + C14328) * C9224) +
            (C18216 + C18215) * C139384) *
               C13593 +
           ((C17987 + C17988) * C9225 -
            ((C16517 + C16518) * C9074 + (C16297 + C16298) * C9224) +
            (C18217 + C18218) * C139384) *
               C139598) *
              C139463 * C139593 +
          (((C16298 + C16297) * C9224 + (C16518 + C16517) * C9074 -
            (C17988 + C17987) * C9225 - (C18218 + C18217) * C139384) *
               C13593 +
           ((C17267 + C17268) * C9224 + (C17421 + C17422) * C9074 -
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C9225 -
            (C13596 * C18202 + C139587 * C18204 + C13595 * C18203 +
             C13591 * C18205) *
                C139384) *
               C139598) *
              C139463 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C13591 +
            ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) *
                C139463 * C139587) *
               C9074 -
           (((C15656 + C15655) * C139303 + (C15654 + C15653) * C3364) *
                C139463 * C139587 +
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139303 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C3364) *
                C139463 * C13591) *
               C139384) *
              C139602 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C13591 +
            ((C23750 + C23749) * C3364 + (C23752 + C23751) * C139303) *
                C139463 * C139587) *
               C139384 -
           (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) *
                C139463 * C139587 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C139463 * C13591) *
               C9074) *
              C139593 +
          ((((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C139463 * C13591 +
            ((C16628 + C16627) * C3364 + (C16630 + C16629) * C139303) *
                C139463 * C139587) *
               C9074 -
           (((C13796 * C17960 + C139598 * C18318 + C13795 * C3904 +
              C13593 * C4171) *
                 C139303 +
             (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
              C13593 * C4165) *
                 C3364) *
                C139463 * C139587 +
            ((C13796 * C17961 + C139598 * C18319 + C13795 * C3905 +
              C13593 * C4172) *
                 C139303 +
             (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
              C13593 * C4166) *
                 C3364) *
                C139463 * C13591) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7477 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139602 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C7478 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139593 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C7400) *
               C139463 * C13591 +
           ((C13823 + C13822) * C7477 + (C13912 + C13913) * C139602 -
            (C14687 + C14686) * C7478 - (C14800 + C14801) * C139593 +
            (C16628 + C16627) * C7479 + (C16733 + C16734) * C7400) *
               C139463 * C139587) *
              C139303 * C9074 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C7478 -
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139602 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C7477) +
            (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
             C139598 * C4248) *
                C139593 -
            (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
             C13593 * C4166) *
                C7479 -
            (C13796 * C18089 + C139598 * C18418 + C13795 * C3994 +
             C13593 * C4248) *
                C7400) *
               C139463 * C13591 +
           ((C23750 + C23749) * C7478 -
            ((C15768 + C15767) * C139602 + (C15654 + C15653) * C7477) +
            (C23887 + C23888) * C139593 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C7479 -
            (C13796 * C18088 + C139598 * C18419 + C13795 * C3993 +
             C13593 * C4250) *
                C7400) *
               C139463 * C139587) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C9224 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C9074 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C9225 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139384) *
               C139463 * C13591 +
           ((C13823 + C13822) * C9224 + (C13996 + C13997) * C9074 -
            (C15654 + C15653) * C9225 - (C15877 + C15878) * C139384) *
               C139463 * C139587) *
              C139602 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C9225 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C9074 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C9224) +
            (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
             C139598 * C4330) *
                C139384) *
               C139463 * C13591 +
           ((C23750 + C23749) * C9225 -
            ((C14910 + C14911) * C9074 + (C14687 + C14686) * C9224) +
            (C24023 + C24024) * C139384) *
               C139463 * C139587) *
              C139593 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C9224 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C9074 -
            (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
             C13593 * C4166) *
                C9225 -
            (C13796 * C18203 + C139598 * C18518 + C13795 * C4080 +
             C13593 * C4330) *
                C139384) *
               C139463 * C13591 +
           ((C16628 + C16627) * C9224 + (C16837 + C16838) * C9074 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C9225 -
            (C13796 * C18202 + C139598 * C18519 + C13795 * C4079 +
             C13593 * C4331) *
                C139384) *
               C139463 * C139587) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C13591 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C13593 +
            ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
                C139598) *
               C9074 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C13591) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C13591) *
                C13593) *
               C139384) *
              C139602 +
          ((((C18644 + C18643) * C13591 + (C18624 + C18623) * C139587) *
                C13593 +
            ((C18645 + C18646) * C13591 + (C18647 + C18648) * C139587) *
                C139598) *
               C139384 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
                C13593) *
               C9074) *
              C139593 +
          ((((C17706 + C17705) * C13591 + (C17704 + C17703) * C139587) *
                C13593 +
            ((C17715 + C17716) * C13591 + (C17711 + C17712) * C139587) *
                C139598) *
               C9074 -
           ((((C554 * C17960 + C139463 * C18620) * C139303 +
              (C554 * C17958 + C139463 * C18618) * C3364) *
                 C139587 +
             ((C554 * C17961 + C139463 * C18621) * C139303 +
              (C554 * C17959 + C139463 * C18619) * C3364) *
                 C13591) *
                C139598 +
            ((C18648 + C18647) * C139587 + (C18646 + C18645) * C13591) *
                C13593) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7477 +
             (C554 * C182 + C139463 * C641) * C139602 - C15026 * C7478 -
             C15138 * C139593 + C16960 * C7479 + C17072 * C7400) *
                C13591 +
            (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C139587) *
               C13593 +
           ((C15026 * C7477 + C15138 * C139602 - C16960 * C7478 -
             C17072 * C139593 + C17713 * C7479 + C17787 * C7400) *
                C13591 +
            (C23093 + C23094 - C23095 - C23096 + C23097 + C23098) * C139587) *
               C139598) *
              C139303 * C9074 +
          (((C18638 * C7478 -
             ((C554 * C1794 + C139463 * C2368) * C139602 +
              (C554 * C1700 + C139463 * C2264) * C7477) +
             C18755 * C139593 - C18639 * C7479 - C18756 * C7400) *
                C13591 +
            (C8771 * C7478 - (C2380 * C139602 + C2286 * C7477) +
             C8884 * C139593 - C18641 * C7479 - C18757 * C7400) *
                C139587) *
               C13593 +
           ((C18639 * C7478 - (C18755 * C139602 + C18638 * C7477) +
             C18756 * C139593 - (C554 * C17959 + C139463 * C18619) * C7479 -
             (C554 * C18089 + C139463 * C18746) * C7400) *
                C13591 +
            (C18641 * C7478 - (C8884 * C139602 + C8771 * C7477) +
             C18757 * C139593 - (C554 * C17958 + C139463 * C18618) * C7479 -
             (C554 * C18088 + C139463 * C18747) * C7400) *
                C139587) *
               C139598) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C9224 +
             (C554 * C245 + C139463 * C719) * C9074 -
             (C554 * C1700 + C139463 * C2264) * C9225 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C13591 +
            (C9687 + C9688 - C9689 - C9690) * C139587) *
               C13593 +
           ((C26489 + C26490 - C26491 - C26492) * C13591 + C26501 * C139587) *
               C139598) *
              C139602 +
          (((C26491 - (C26490 + C26489) + C26492) * C13591 + C26502 * C139587) *
               C13593 +
           ((C29451 - (C29452 + C29453) + C29454) * C13591 +
            (C26495 - (C26496 + C26497) + C26498) * C139587) *
               C139598) *
              C139593 +
          (((C29453 + C29452 - C29451 - C29454) * C13591 +
            (C26497 + C26496 - C26495 - C26498) * C139587) *
               C13593 +
           ((C17713 * C9224 + C17859 * C9074 -
             (C554 * C17959 + C139463 * C18619) * C9225 -
             (C554 * C18203 + C139463 * C18855) * C139384) *
                C13591 +
            (C16961 * C9224 + C17182 * C9074 -
             (C554 * C17958 + C139463 * C18618) * C9225 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139587) *
               C139598) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C13593 +
            ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
                C139598) *
               C139463 * C139603 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139598 +
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139303 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C3364) *
                C13593) *
               C139463 * C139596 +
           (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
              C139587 * C4661) *
                 C3364 +
             (C13595 * C4663 + C13591 * C4668 + C13596 * C4664 +
              C139587 * C4669) *
                 C139303) *
                C13593 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139598) *
               C139463 * C10691) *
              C6692 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) * C13593 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139598) *
               C139463 * C139596 -
           (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) *
                C139598 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C13593) *
               C139463 * C139603 -
           (((C13596 * C19904 + C139587 * C19908 + C13595 * C19905 +
              C13591 * C19909) *
                 C139303 +
             (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
              C13591 * C19907) *
                 C3364) *
                C139598 +
            ((C19922 + C19921) * C139303 + (C19920 + C19919) * C3364) *
                C13593) *
               C139463 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6771 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C6692 -
            (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
               C13593 +
           ((C14328 + C14329) * C6771 + (C14451 + C14450) * C6692 -
            (C16297 + C16298) * C6772 - (C16408 + C16407) * C139360) *
               C139598) *
              C139463 * C139303 * C139603 +
          (((C17986 + C17985) * C6772 -
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C6692 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C6771) +
            (C18101 + C18102) * C139360) *
               C13593 +
           ((C17987 + C17988) * C6772 -
            ((C18102 + C18101) * C6692 + (C17985 + C17986) * C6771) +
            (C18104 + C18103) * C139360) *
               C139598) *
              C139463 * C139303 * C139596 +
          (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C6771 +
            (C13595 * C4746 + C13591 * C4750 + C13596 * C4747 +
             C139587 * C4751) *
                C6692 -
            (C19920 + C19919) * C6772 - (C20029 + C20030) * C139360) *
               C13593 +
           ((C19919 + C19920) * C6771 + (C20030 + C20029) * C6692 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C6772 -
            (C13596 * C20020 + C139587 * C20022 + C13595 * C20021 +
             C13591 * C20023) *
                C139360) *
               C139598) *
              C139463 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C10840 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139603 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C10841 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139596 +
            (C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C10842 +
            (C13595 * C4831 + C13591 * C4835 + C13596 * C4832 +
             C139587 * C4836) *
                C10691) *
               C13593 +
           ((C14328 + C14329) * C10840 + (C14566 + C14567) * C139603 -
            (C17985 + C17986) * C10841 - (C18215 + C18216) * C139596 +
            (C19919 + C19920) * C10842 + (C20137 + C20138) * C10691) *
               C139598) *
              C139463 * C6692 +
          (((C17986 + C17985) * C10841 -
            ((C14567 + C14566) * C139603 + (C14329 + C14328) * C10840) +
            (C18216 + C18215) * C139596 - (C19920 + C19919) * C10842 -
            (C20138 + C20137) * C10691) *
               C13593 +
           ((C17987 + C17988) * C10841 -
            ((C16517 + C16518) * C139603 + (C16297 + C16298) * C10840) +
            (C18217 + C18218) * C139596 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C10842 -
            (C13596 * C20128 + C139587 * C20130 + C13595 * C20129 +
             C13591 * C20131) *
                C10691) *
               C139598) *
              C139463 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C13591 +
            ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) *
                C139463 * C139587) *
               C139603 -
           (((C15656 + C15655) * C139303 + (C15654 + C15653) * C3364) *
                C139463 * C139587 +
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139303 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C3364) *
                C139463 * C13591) *
               C139596 +
           (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
              C139598 * C5717) *
                 C3364 +
             (C13795 * C4663 + C13593 * C4917 + C13796 * C5474 +
              C139598 * C5720) *
                 C139303) *
                C139463 * C13591 +
            ((C19280 + C19279) * C3364 + (C19282 + C19281) * C139303) *
                C139463 * C139587) *
               C10691) *
              C6692 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C13591 +
            ((C23750 + C23749) * C3364 + (C23752 + C23751) * C139303) *
                C139463 * C139587) *
               C139596 -
           (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) *
                C139463 * C139587 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C139463 * C13591) *
               C139603 -
           (((C13796 * C19904 + C139598 * C20238 + C13795 * C5473 +
              C13593 * C5719) *
                 C139303 +
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C3364) *
                C139463 * C139587 +
            ((C13796 * C19905 + C139598 * C20239 + C13795 * C5474 +
              C13593 * C5720) *
                 C139303 +
             (C13796 * C19903 + C139598 * C20237 + C13795 * C5471 +
              C13593 * C5717) *
                 C3364) *
                C139463 * C13591) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6771 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C6692 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C6772 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C139463 * C13591 +
           ((C13823 + C13822) * C6771 + (C13912 + C13913) * C6692 -
            (C14687 + C14686) * C6772 - (C14800 + C14801) * C139360) *
               C139463 * C139587) *
              C139303 * C139603 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C6772 -
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C6692 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C6771) +
            (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
             C139598 * C4248) *
                C139360) *
               C139463 * C13591 +
           ((C23750 + C23749) * C6772 -
            ((C15768 + C15767) * C6692 + (C15654 + C15653) * C6771) +
            (C23887 + C23888) * C139360) *
               C139463 * C139587) *
              C139303 * C139596 +
          (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C6771 +
            (C13795 * C4746 + C13593 * C5007 + C13796 * C5557 +
             C139598 * C5795) *
                C6692 -
            (C13796 * C19903 + C139598 * C20237 + C13795 * C5471 +
             C13593 * C5717) *
                C6772 -
            (C13796 * C20021 + C139598 * C20338 + C13795 * C5557 +
             C13593 * C5795) *
                C139360) *
               C139463 * C13591 +
           ((C19280 + C19279) * C6771 + (C19385 + C19386) * C6692 -
            (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
             C13593 * C5716) *
                C6772 -
            (C13796 * C20020 + C139598 * C20339 + C13795 * C5556 +
             C13593 * C5796) *
                C139360) *
               C139463 * C139587) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C10840 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139603 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C10841 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139596 +
            (C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C10842 +
            (C13795 * C4831 + C13593 * C5095 + C13796 * C5637 +
             C139598 * C5872) *
                C10691) *
               C139463 * C13591 +
           ((C13823 + C13822) * C10840 + (C13996 + C13997) * C139603 -
            (C15654 + C15653) * C10841 - (C15877 + C15878) * C139596 +
            (C19280 + C19279) * C10842 + (C19489 + C19490) * C10691) *
               C139463 * C139587) *
              C6692 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C10841 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139603 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C10840) +
            (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
             C139598 * C4330) *
                C139596 -
            (C13796 * C19903 + C139598 * C20237 + C13795 * C5471 +
             C13593 * C5717) *
                C10842 -
            (C13796 * C20129 + C139598 * C20438 + C13795 * C5637 +
             C13593 * C5872) *
                C10691) *
               C139463 * C13591 +
           ((C23750 + C23749) * C10841 -
            ((C14910 + C14911) * C139603 + (C14687 + C14686) * C10840) +
            (C24023 + C24024) * C139596 -
            (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
             C13593 * C5716) *
                C10842 -
            (C13796 * C20128 + C139598 * C20439 + C13795 * C5636 +
             C13593 * C5873) *
                C10691) *
               C139463 * C139587) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C13591 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C13593 +
            ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
                C139598) *
               C139603 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C13591) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C13591) *
                C13593) *
               C139596 +
           ((((C554 * C4656 + C139463 * C5191) * C3364 +
              (C554 * C4663 + C139463 * C5195) * C139303) *
                 C13591 +
             (C5208 * C3364 + C5209 * C139303) * C139587) *
                C13593 +
            ((C20551 + C20552) * C13591 + (C20547 + C20548) * C139587) *
                C139598) *
               C10691) *
              C6692 +
          ((((C18644 + C18643) * C13591 + (C18624 + C18623) * C139587) *
                C13593 +
            ((C18645 + C18646) * C13591 + (C18647 + C18648) * C139587) *
                C139598) *
               C139596 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
                C13593) *
               C139603 -
           ((((C554 * C19904 + C139463 * C20540) * C139303 +
              (C554 * C19902 + C139463 * C20538) * C3364) *
                 C139587 +
             ((C554 * C19905 + C139463 * C20541) * C139303 +
              (C554 * C19903 + C139463 * C20539) * C3364) *
                 C13591) *
                C139598 +
            ((C20548 + C20547) * C139587 + (C20552 + C20551) * C13591) *
                C13593) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C6771 +
                       (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
                       C15138 * C139360) *
                          C13591 +
                      (C7234 + C7235 - C7236 - C7237) * C139587) *
                         C13593 +
                     ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                       C17072 * C139360) *
                          C13591 +
                      (C22187 + C22188 - C22189 - C22190) * C139587) *
                         C139598) *
                        C139303 * C139603 +
                    (((C18638 * C6772 -
                       ((C554 * C1794 + C139463 * C2368) * C6692 +
                        (C554 * C1700 + C139463 * C2264) * C6771) +
                       C18755 * C139360) *
                          C13591 +
                      (C8874 - (C8875 + C8876) + C8886) * C139587) *
                         C13593 +
                     ((C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                       C18756 * C139360) *
                          C13591 +
                      (C24293 - (C24294 + C24295) + C24296) * C139587) *
                         C139598) *
                        C139303 * C139596 +
                    ((((C554 * C4656 + C139463 * C5191) * C6771 +
                       (C554 * C4746 + C139463 * C5285) * C6692 -
                       C20549 * C6772 - C20655 * C139360) *
                          C13591 +
                      (C5208 * C6771 + C5296 * C6692 - C19593 * C6772 -
                       C19696 * C139360) *
                          C139587) *
                         C13593 +
                     ((C20549 * C6771 + C20655 * C6692 -
                       (C554 * C19903 + C139463 * C20539) * C6772 -
                       (C554 * C20021 + C139463 * C20650) * C139360) *
                          C13591 +
                      (C19593 * C6771 + C19696 * C6692 -
                       (C554 * C19902 + C139463 * C20538) * C6772 -
                       (C554 * C20020 + C139463 * C20651) * C139360) *
                          C139587) *
                         C139598) *
                        C139303 * C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C10840 +
             (C554 * C245 + C139463 * C719) * C139603 -
             (C554 * C1700 + C139463 * C2264) * C10841 -
             (C554 * C1879 + C139463 * C2460) * C139596 +
             (C554 * C4656 + C139463 * C5191) * C10842 +
             (C554 * C4831 + C139463 * C5373) * C10691) *
                C13591 +
            (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C139587) *
               C13593 +
           ((C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C13591 +
            (C27385 + C27386 - C27387 - C27388 + C27389 + C27390) * C139587) *
               C139598) *
              C6692 +
          (((C30339 - (C30338 + C30337) + C30340 - C30341 - C30342) * C13591 +
            (C27387 - (C27386 + C27385) + C27388 - C27389 - C27390) * C139587) *
               C13593 +
           ((C18639 * C10841 - (C17181 * C139603 + C16960 * C10840) +
             C18874 * C139596 - (C554 * C19903 + C139463 * C20539) * C10842 -
             (C554 * C20129 + C139463 * C20753) * C10691) *
                C13591 +
            (C18641 * C10841 - (C3306 * C139603 + C3122 * C10840) +
             C18875 * C139596 - (C554 * C19902 + C139463 * C20538) * C10842 -
             (C554 * C20128 + C139463 * C20754) * C10691) *
                C139587) *
               C139598) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139562 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C13593 +
           ((C14328 + C14329) * C137108 + (C14330 + C14331) * C139562 -
            (C14332 + C14333) * C137101 - (C14334 + C14335) * C139308) *
               C139598) *
              C139463 * C139372 * C2565 +
          (((C14333 + C14332) * C137101 -
            ((C14331 + C14330) * C139562 + (C14329 + C14328) * C137108) +
            (C14335 + C14334) * C139308) *
               C13593 +
           ((C16293 + C16294) * C137101 -
            ((C16295 + C16296) * C139562 + (C16297 + C16298) * C137108) +
            (C16299 + C16300) * C139308) *
               C139598) *
              C139463 * C139372 * C2566 +
          (((C16298 + C16297) * C137108 + (C16296 + C16295) * C139562 -
            (C16294 + C16293) * C137101 - (C16300 + C16299) * C139308) *
               C13593 +
           ((C13595 * C3367 + C13591 * C3373 + C13596 * C3366 +
             C139587 * C3372) *
                C137108 +
            (C13595 * C3370 + C13591 * C3376 + C13596 * C3369 +
             C139587 * C3375) *
                C139562 -
            (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
             C13591 * C3372) *
                C137101 -
            (C13596 * C3368 + C139587 * C3374 + C13595 * C3369 +
             C13591 * C3375) *
                C139308) *
               C139598) *
              C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
               C92 -
           (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
               C94 -
           (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139587 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C13593 +
          ((C13595 * C832 + C13591 * C840 + C13596 * C829 + C139587 * C834) *
               C103 +
           (C13595 * C839 + C13591 * C846 + C13596 * C838 + C139587 * C845) *
               C92 -
           (C13596 * C830 + C139587 * C835 + C13595 * C829 + C13591 * C834) *
               C104 -
           (C13596 * C837 + C139587 * C844 + C13595 * C838 + C13591 * C845) *
               C93 +
           (C13595 * C830 + C13591 * C835 + C13596 * C831 + C139587 * C836) *
               C105 +
           (C13595 * C837 + C13591 * C844 + C13596 * C841 + C139587 * C847) *
               C94 -
           (C13596 * C833 + C139587 * C842 + C13595 * C831 + C13591 * C836) *
               C106 -
           (C13596 * C843 + C139587 * C848 + C13595 * C841 + C13591 * C847) *
               C95) *
              C139598) *
         C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139562 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C13593 +
           ((C14328 + C14329) * C137108 + (C14330 + C14331) * C139562 -
            (C14332 + C14333) * C137101 - (C14334 + C14335) * C139308) *
               C139598) *
              C139463 * C4653 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C137101 -
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139562 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C137108) +
            (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
             C139587 * C1712) *
                C139308) *
               C13593 +
           ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
             C139587 * C3899) *
                C137101 -
            ((C17983 + C17984) * C139562 + (C17985 + C17986) * C137108) +
            (C13595 * C3901 + C13591 * C3910 + C13596 * C3902 +
             C139587 * C3911) *
                C139308) *
               C139598) *
              C139463 * C4654 +
          (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C137108 +
            (C13595 * C4663 + C13591 * C4668 + C13596 * C4664 +
             C139587 * C4669) *
                C139562 -
            (C13596 * C4658 + C139587 * C4662 + C13595 * C4657 +
             C13591 * C4661) *
                C137101 -
            (C13596 * C4665 + C139587 * C4670 + C13595 * C4664 +
             C13591 * C4669) *
                C139308) *
               C13593 +
           ((C13595 * C5471 + C13591 * C5477 + C13596 * C5470 +
             C139587 * C5476) *
                C137108 +
            (C13595 * C5474 + C13591 * C5480 + C13596 * C5473 +
             C139587 * C5479) *
                C139562 -
            (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
             C13591 * C5476) *
                C137101 -
            (C13596 * C5472 + C139587 * C5478 + C13595 * C5473 +
             C13591 * C5479) *
                C139308) *
               C139598) *
              C139463 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C13593 +
           ((C14328 + C14329) * C2660 + (C14451 + C14450) * C2565 -
            (C16297 + C16298) * C2661 - (C16408 + C16407) * C2566 +
            (C13595 * C3367 + C13591 * C3373 + C13596 * C3366 +
             C139587 * C3372) *
                C2662 +
            (C13595 * C3433 + C13591 * C3436 + C13596 * C3432 +
             C139587 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139562 +
          (((C14333 + C14332) * C2661 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C2565 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C2660) +
            (C14452 + C14453) * C2566 - (C16294 + C16293) * C2662 -
            (C16409 + C16410) * C2567) *
               C13593 +
           ((C16293 + C16294) * C2661 -
            ((C14453 + C14452) * C2565 + (C14332 + C14333) * C2660) +
            (C16410 + C16409) * C2566 -
            (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
             C13591 * C3372) *
                C2662 -
            (C13596 * C3431 + C139587 * C3434 + C13595 * C3432 +
             C13591 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139346) *
               C13593 +
           ((C13595 * C832 + C13591 * C840 + C13596 * C829 + C139587 * C834) *
                C181 +
            (C13595 * C927 + C13591 * C932 + C13596 * C926 + C139587 * C931) *
                C139346) *
               C139598) *
              C139463 * C92 -
          (((C13596 * C925 + C139587 * C930 + C13595 * C926 + C13591 * C931) *
                C139346 +
            (C13596 * C830 + C139587 * C835 + C13595 * C829 + C13591 * C834) *
                C181) *
               C139598 +
           ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                C139346 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C13593) *
              C139463 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139346) *
               C13593 +
           ((C13595 * C830 + C13591 * C835 + C13596 * C831 + C139587 * C836) *
                C181 +
            (C13595 * C925 + C13591 * C930 + C13596 * C928 + C139587 * C933) *
                C139346) *
               C139598) *
              C139463 * C94 -
          (((C13596 * C929 + C139587 * C934 + C13595 * C928 + C13591 * C933) *
                C139346 +
            (C13596 * C833 + C139587 * C842 + C13595 * C831 + C13591 * C836) *
                C181) *
               C139598 +
           ((C13596 * C186 + C139587 * C192 + C13595 * C185 + C13591 * C191) *
                C139346 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C13593) *
              C139463 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C13593 +
            ((C14328 + C14329) * C181 + (C14451 + C14450) * C139346) *
                C139598) *
               C139463 * C139562 -
           (((C14453 + C14452) * C139346 + (C14332 + C14333) * C181) * C139598 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139463 * C139308) *
              C4653 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C13593 +
            ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
              C139587 * C3899) *
                 C181 +
             (C13595 * C3990 + C13591 * C3996 + C13596 * C3991 +
              C139587 * C3997) *
                 C139346) *
                C139598) *
               C139463 * C139308 -
           (((C18102 + C18101) * C139346 + (C17985 + C17986) * C181) * C139598 +
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139346 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C181) *
                C13593) *
               C139463 * C139562) *
              C4654 +
          ((((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
              C139587 * C4661) *
                 C181 +
             (C13595 * C4746 + C13591 * C4750 + C13596 * C4747 +
              C139587 * C4751) *
                 C139346) *
                C13593 +
            ((C13595 * C5471 + C13591 * C5477 + C13596 * C5470 +
              C139587 * C5476) *
                 C181 +
             (C13595 * C5557 + C13591 * C5560 + C13596 * C5556 +
              C139587 * C5559) *
                 C139346) *
                C139598) *
               C139463 * C139562 -
           (((C13596 * C5555 + C139587 * C5558 + C13595 * C5556 +
              C13591 * C5559) *
                 C139346 +
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C181) *
                C139598 +
            ((C13596 * C4748 + C139587 * C4752 + C13595 * C4747 +
              C13591 * C4751) *
                 C139346 +
             (C13596 * C4658 + C139587 * C4662 + C13595 * C4657 +
              C13591 * C4661) *
                 C181) *
                C13593) *
               C139463 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C13593 +
            ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) *
                C139598) *
               C139463 * C2565 -
           (((C16517 + C16518) * C139372 + (C16297 + C16298) * C244) * C139598 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
               C139463 * C2566 +
           (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C13593 +
            ((C13595 * C3367 + C13591 * C3373 + C13596 * C3366 +
              C139587 * C3372) *
                 C244 +
             (C13595 * C3489 + C13591 * C3492 + C13596 * C3488 +
              C139587 * C3491) *
                 C139372) *
                C139598) *
               C139463 * C2567) *
              C139562 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C13593 +
            ((C16293 + C16294) * C244 + (C16519 + C16520) * C139372) *
                C139598) *
               C139463 * C2566 -
           (((C14569 + C14568) * C139372 + (C14332 + C14333) * C244) * C139598 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139463 * C2565 -
           (((C13596 * C3487 + C139587 * C3490 + C13595 * C3488 +
              C13591 * C3491) *
                 C139372 +
             (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
              C13591 * C3372) *
                 C244) *
                C139598 +
            ((C16520 + C16519) * C139372 + (C16294 + C16293) * C244) * C13593) *
               C139463 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C13593 +
           ((C13595 * C832 + C13591 * C840 + C13596 * C829 + C139587 * C834) *
                C244 +
            (C13595 * C1011 + C13591 * C1016 + C13596 * C1010 +
             C139587 * C1015) *
                C139372) *
               C139598) *
              C139463 * C139346 * C92 -
          (((C13596 * C1009 + C139587 * C1014 + C13595 * C1010 +
             C13591 * C1015) *
                C139372 +
            (C13596 * C830 + C139587 * C835 + C13595 * C829 + C13591 * C834) *
                C244) *
               C139598 +
           ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                C139372 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C13593) *
              C139463 * C139346 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139372) *
               C13593 +
           ((C13595 * C830 + C13591 * C835 + C13596 * C831 + C139587 * C836) *
                C244 +
            (C13595 * C1009 + C13591 * C1014 + C13596 * C1012 +
             C139587 * C1017) *
                C139372) *
               C139598) *
              C139463 * C139346 * C94 -
          (((C13596 * C1013 + C139587 * C1018 + C13595 * C1012 +
             C13591 * C1017) *
                C139372 +
            (C13596 * C833 + C139587 * C842 + C13595 * C831 + C13591 * C836) *
                C244) *
               C139598 +
           ((C13596 * C249 + C139587 * C255 + C13595 * C248 + C13591 * C254) *
                C139372 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C13593) *
              C139463 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C4828 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C4653 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C4829 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C4654 +
            (C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C4830 +
            (C13595 * C4831 + C13591 * C4835 + C13596 * C4832 +
             C139587 * C4836) *
                C4655) *
               C13593 +
           ((C14328 + C14329) * C4828 + (C14566 + C14567) * C4653 -
            (C17985 + C17986) * C4829 - (C18215 + C18216) * C4654 +
            (C13595 * C5471 + C13591 * C5477 + C13596 * C5470 +
             C139587 * C5476) *
                C4830 +
            (C13595 * C5637 + C13591 * C5640 + C13596 * C5636 +
             C139587 * C5639) *
                C4655) *
               C139598) *
              C139463 * C139346 * C139562 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C4829 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C4653 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C4828) +
            (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
             C139587 * C1882) *
                C4654 -
            (C13596 * C4658 + C139587 * C4662 + C13595 * C4657 +
             C13591 * C4661) *
                C4830 -
            (C13596 * C4833 + C139587 * C4837 + C13595 * C4832 +
             C13591 * C4836) *
                C4655) *
               C13593 +
           ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
             C139587 * C3899) *
                C4829 -
            ((C14569 + C14568) * C4653 + (C14332 + C14333) * C4828) +
            (C13595 * C4076 + C13591 * C4082 + C13596 * C4077 +
             C139587 * C4083) *
                C4654 -
            (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
             C13591 * C5476) *
                C4830 -
            (C13596 * C5635 + C139587 * C5638 + C13595 * C5636 +
             C13591 * C5639) *
                C4655) *
               C139598) *
              C139463 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139562 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
               C139463 * C13591 +
           ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139562 -
            (C13827 + C13826) * C137101 - (C13829 + C13828) * C139308) *
               C139463 * C139587) *
              C139372 * C2565 +
          (((C14686 + C14687) * C137101 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139562 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C137108) +
            (C14688 + C14689) * C139308) *
               C139463 * C13591 +
           ((C14691 + C14690) * C137101 -
            ((C14689 + C14688) * C139562 + (C14687 + C14686) * C137108) +
            (C14693 + C14692) * C139308) *
               C139463 * C139587) *
              C139372 * C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C16627 + C16628) * C137101 - (C16629 + C16630) * C139308) *
               C139463 * C13591 +
           ((C16628 + C16627) * C137108 + (C16630 + C16629) * C139562 -
            (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
             C13593 * C2829) *
                C137101 -
            (C13796 * C3368 + C139598 * C3546 + C13795 * C2579 +
             C13593 * C2833) *
                C139308) *
               C139463 * C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C139463 * C13591 +
          ((C13823 + C13822) * C103 + (C13825 + C13824) * C92 -
           (C13827 + C13826) * C104 - (C13829 + C13828) * C93 +
           (C13831 + C13830) * C105 + (C13833 + C13832) * C94 -
           (C13796 * C833 + C139598 * C1097 + C13795 * C111 + C13593 * C312) *
               C106 -
           (C13796 * C843 + C139598 * C1102 + C13795 * C122 + C13593 * C318) *
               C95) *
              C139463 * C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139562 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
               C139463 * C13591 +
           ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139562 -
            (C13827 + C13826) * C137101 - (C13829 + C13828) * C139308) *
               C139463 * C139587) *
              C4653 +
          (((C15653 + C15654) * C137101 -
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139562 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C137108) +
            (C15655 + C15656) * C139308) *
               C139463 * C13591 +
           ((C15658 + C15657) * C137101 -
            ((C15656 + C15655) * C139562 + (C15654 + C15653) * C137108) +
            (C15660 + C15659) * C139308) *
               C139463 * C139587) *
              C4654 +
          (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C137108 +
            (C13795 * C4663 + C13593 * C4917 + C13796 * C5474 +
             C139598 * C5720) *
                C139562 -
            (C19279 + C19280) * C137101 - (C19281 + C19282) * C139308) *
               C139463 * C13591 +
           ((C19280 + C19279) * C137108 + (C19282 + C19281) * C139562 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C137101 -
            (C13796 * C5472 + C139598 * C5718 + C13795 * C4665 +
             C13593 * C4919) *
                C139308) *
               C139463 * C139587) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C13591 +
           ((C13823 + C13822) * C2660 + (C13912 + C13913) * C2565 -
            (C14687 + C14686) * C2661 - (C14800 + C14801) * C2566 +
            (C16628 + C16627) * C2662 + (C16733 + C16734) * C2567) *
               C139463 * C139587) *
              C139562 +
          (((C14686 + C14687) * C2661 -
            ((C13913 + C13912) * C2565 + (C13822 + C13823) * C2660) +
            (C14801 + C14800) * C2566 - (C16627 + C16628) * C2662 -
            (C16734 + C16733) * C2567) *
               C139463 * C13591 +
           ((C14691 + C14690) * C2661 -
            ((C13914 + C13915) * C2565 + (C13827 + C13826) * C2660) +
            (C14802 + C14803) * C2566 -
            (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
             C13593 * C2829) *
                C2662 -
            (C13796 * C3431 + C139598 * C3601 + C13795 * C2665 +
             C13593 * C2923) *
                C2567) *
               C139463 * C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139346) *
               C139463 * C13591 +
           ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
               C139587) *
              C92 -
          (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
               C139587 +
           ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
               C13591) *
              C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C139463 *
               C13591 +
           ((C13831 + C13830) * C181 + (C13916 + C13917) * C139346) * C139463 *
               C139587) *
              C94 -
          (((C13796 * C929 + C139598 * C1199 + C13795 * C186 + C13593 * C398) *
                C139346 +
            (C13796 * C833 + C139598 * C1097 + C13795 * C111 + C13593 * C312) *
                C181) *
               C139463 * C139587 +
           ((C13917 + C13916) * C139346 + (C13830 + C13831) * C181) * C139463 *
               C13591) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
                C139587) *
               C139562 -
           (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
                C139587 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
                C13591) *
               C139308) *
              C4653 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C139463 *
                C13591 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139463 *
                C139587) *
               C139308 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139463 *
                C139587 +
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139346 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C181) *
                C139463 * C13591) *
               C139562) *
              C4654 +
          ((((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
              C139598 * C5717) *
                 C181 +
             (C13795 * C4746 + C13593 * C5007 + C13796 * C5557 +
              C139598 * C5795) *
                 C139346) *
                C139463 * C13591 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) * C139463 *
                C139587) *
               C139562 -
           (((C13796 * C5555 + C139598 * C5797 + C13795 * C4748 +
              C13593 * C5009) *
                 C139346 +
             (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
              C13593 * C4915) *
                 C181) *
                C139463 * C139587 +
            ((C19386 + C19385) * C139346 + (C19279 + C19280) * C181) * C139463 *
                C13591) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
                C139587) *
               C2565 -
           (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
                C139587 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C139463 * C13591) *
               C2566 +
           (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C139463 * C13591 +
            ((C16628 + C16627) * C244 + (C16837 + C16838) * C139372) * C139463 *
                C139587) *
               C2567) *
              C139562 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C139463 *
                C13591 +
            ((C14691 + C14690) * C244 + (C14912 + C14913) * C139372) * C139463 *
                C139587) *
               C2566 -
           (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
                C139587 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
                C13591) *
               C2565 -
           (((C13796 * C3487 + C139598 * C3652 + C13795 * C2747 +
              C13593 * C3019) *
                 C139372 +
             (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
              C13593 * C2829) *
                 C244) *
                C139463 * C139587 +
            ((C16838 + C16837) * C139372 + (C16627 + C16628) * C244) * C139463 *
                C13591) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
               C139587) *
              C139346 * C92 -
          (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
               C139587 +
           ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
               C13591) *
              C139346 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C139463 *
               C13591 +
           ((C13831 + C13830) * C244 + (C14000 + C14001) * C139372) * C139463 *
               C139587) *
              C139346 * C94 -
          (((C13796 * C1013 + C139598 * C1303 + C13795 * C249 + C13593 * C478) *
                C139372 +
            (C13796 * C833 + C139598 * C1097 + C13795 * C111 + C13593 * C312) *
                C244) *
               C139463 * C139587 +
           ((C14001 + C14000) * C139372 + (C13830 + C13831) * C244) * C139463 *
               C13591) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C4828 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C4653 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C4829 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C4654 +
            (C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C4830 +
            (C13795 * C4831 + C13593 * C5095 + C13796 * C5637 +
             C139598 * C5872) *
                C4655) *
               C139463 * C13591 +
           ((C13823 + C13822) * C4828 + (C13996 + C13997) * C4653 -
            (C15654 + C15653) * C4829 - (C15877 + C15878) * C4654 +
            (C19280 + C19279) * C4830 + (C19489 + C19490) * C4655) *
               C139463 * C139587) *
              C139346 * C139562 +
          (((C15653 + C15654) * C4829 -
            ((C13997 + C13996) * C4653 + (C13822 + C13823) * C4828) +
            (C15878 + C15877) * C4654 - (C19279 + C19280) * C4830 -
            (C19490 + C19489) * C4655) *
               C139463 * C13591 +
           ((C15658 + C15657) * C4829 -
            ((C13998 + C13999) * C4653 + (C13827 + C13826) * C4828) +
            (C15879 + C15880) * C4654 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C4830 -
            (C13796 * C5635 + C139598 * C5874 + C13795 * C4833 +
             C13593 * C5097) *
                C4655) *
               C139463 * C139587) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C13591 +
            (C584 * C137108 + C585 * C139562 - C586 * C137101 -
             C587 * C139308) *
                C139587) *
               C13593 +
           ((C16937 + C16938 - C16939 - C16940) * C13591 +
            (C16941 + C16942 - C16943 - C16944) * C139587) *
               C139598) *
              C139372 * C2565 +
          (((C16939 - (C16938 + C16937) + C16940) * C13591 +
            (C16943 - (C16942 + C16941) + C16944) * C139587) *
               C13593 +
           ((C16945 - (C16963 + C16964) + C16950) * C13591 +
            (C16951 - (C16952 + C16953) + C16954) * C139587) *
               C139598) *
              C139372 * C2566 +
          (((C16964 + C16963 - C16945 - C16950) * C13591 +
            (C16953 + C16952 - C16951 - C16954) * C139587) *
               C13593 +
           (((C554 * C3367 + C139463 * C3707) * C137108 +
             (C554 * C3370 + C139463 * C3710) * C139562 - C16961 * C137101 -
             C16962 * C139308) *
                C13591 +
            (C16961 * C137108 + C16962 * C139562 -
             (C554 * C3365 + C139463 * C3705) * C137101 -
             (C554 * C3368 + C139463 * C3708) * C139308) *
                C139587) *
               C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C103 +
            (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C13591 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139587) *
              C13593 +
          (((C554 * C832 + C139463 * C1396) * C103 +
            (C554 * C839 + C139463 * C1400) * C92 - C1418 * C104 - C1419 * C93 +
            C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
               C13591 +
           (C1418 * C103 + C1419 * C92 - C1420 * C104 - C1421 * C93 +
            C1422 * C105 + C1423 * C94 -
            (C554 * C833 + C139463 * C1399) * C106 -
            (C554 * C843 + C139463 * C1404) * C95) *
               C139587) *
              C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C13591 +
            (C584 * C137108 + C585 * C139562 - C586 * C137101 -
             C587 * C139308) *
                C139587) *
               C13593 +
           ((C16937 + C16938 - C16939 - C16940) * C13591 +
            (C16941 + C16942 - C16943 - C16944) * C139587) *
               C139598) *
              C4653 +
          (((C2286 * C137101 -
             ((C554 * C1707 + C139463 * C2268) * C139562 +
              (C554 * C1700 + C139463 * C2264) * C137108) +
             C2287 * C139308) *
                C13591 +
            (C2288 * C137101 - (C2287 * C139562 + C2286 * C137108) +
             C2289 * C139308) *
                C139587) *
               C13593 +
           ((C8771 * C137101 - (C18637 * C139562 + C18638 * C137108) +
             C8772 * C139308) *
                C13591 +
            (C8773 * C137101 - (C8772 * C139562 + C8771 * C137108) +
             C8774 * C139308) *
                C139587) *
               C139598) *
              C4654 +
          ((((C554 * C4656 + C139463 * C5191) * C137108 +
             (C554 * C4663 + C139463 * C5195) * C139562 - C5208 * C137101 -
             C5209 * C139308) *
                C13591 +
            (C5208 * C137108 + C5209 * C139562 - C5210 * C137101 -
             C5211 * C139308) *
                C139587) *
               C13593 +
           (((C554 * C5471 + C139463 * C5951) * C137108 +
             (C554 * C5474 + C139463 * C5954) * C139562 - C19593 * C137101 -
             C19594 * C139308) *
                C13591 +
            (C19593 * C137108 + C19594 * C139562 -
             (C554 * C5469 + C139463 * C5949) * C137101 -
             (C554 * C5472 + C139463 * C5952) * C139308) *
                C139587) *
               C139598) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C13591 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C13593 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             (C554 * C3367 + C139463 * C3707) * C2662 +
             (C554 * C3433 + C139463 * C3761) * C2567) *
                C13591 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139562 +
          (((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C13591 +
            (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C139587) *
               C13593 +
           ((C17067 - (C17066 + C17065) + C17068 - C17069 - C17074) * C13591 +
            (C3124 * C2661 - (C1520 * C2565 + C1420 * C2660) + C3219 * C2566 -
             (C554 * C3365 + C139463 * C3705) * C2662 -
             (C554 * C3431 + C139463 * C3763) * C2567) *
                C139587) *
               C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C13591 +
            (C648 + C664) * C139587) *
               C13593 +
           (((C554 * C832 + C139463 * C1396) * C181 +
             (C554 * C927 + C139463 * C1497) * C139346) *
                C13591 +
            (C14134 + C14135) * C139587) *
               C139598) *
              C92 -
          (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
               C139598 +
           ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
              C93 +
          ((C668 * C13591 + (C656 + C666) * C139587) * C13593 +
           ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139587) *
               C139598) *
              C94 -
          ((((C554 * C929 + C139463 * C1501) * C139346 +
             (C554 * C833 + C139463 * C1399) * C181) *
                C139587 +
            (C14139 + C14138) * C13591) *
               C139598 +
           ((C667 + C657) * C139587 + C669 * C13591) * C13593) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C13591 +
             (C648 + C664) * C139587) *
                C13593 +
            ((C15026 * C181 + C15138 * C139346) * C13591 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C139562 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
               C139308) *
              C4653 +
          ((((C2371 + C2383) * C13591 + (C2374 + C2384) * C139587) * C13593 +
            ((C16077 + C16078) * C13591 + (C16079 + C16080) * C139587) *
                C139598) *
               C139308 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C13591) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C13591) *
                C13593) *
               C139562) *
              C4654 +
          (((((C554 * C4656 + C139463 * C5191) * C181 +
              (C554 * C4746 + C139463 * C5285) * C139346) *
                 C13591 +
             (C5290 + C5298) * C139587) *
                C13593 +
            (((C554 * C5471 + C139463 * C5951) * C181 +
              (C554 * C5557 + C139463 * C6029) * C139346) *
                 C13591 +
             (C19693 + C19697) * C139587) *
                C139598) *
               C139562 -
           ((((C554 * C5555 + C139463 * C6031) * C139346 +
              (C554 * C5469 + C139463 * C5949) * C181) *
                 C139587 +
             (C19697 + C19693) * C13591) *
                C139598 +
            ((C5299 + C5293) * C139587 + (C5298 + C5290) * C13591) * C13593) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C13591 +
             (C726 + C742) * C139587) *
                C13593 +
            ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
               C2565 -
           ((C17173 * C139587 + (C17183 + C17176) * C13591) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
               C2566 +
           (((C17176 + C17183) * C13591 + C17177 * C139587) * C13593 +
            (((C554 * C3367 + C139463 * C3707) * C244 +
              (C554 * C3489 + C139463 * C3816) * C139372) *
                 C13591 +
             (C17178 + C17184) * C139587) *
                C139598) *
               C2567) *
              C139562 +
          (((C15240 * C13591 + C15242 * C139587) * C13593 +
            (C17177 * C13591 + (C3303 + C3309) * C139587) * C139598) *
               C2566 -
           ((C1621 * C139587 + C15241 * C13591) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
               C2565 -
           ((((C554 * C3487 + C139463 * C3814) * C139372 +
              (C554 * C3365 + C139463 * C3705) * C244) *
                 C139587 +
             (C17184 + C17178) * C13591) *
                C139598 +
            ((C3309 + C3303) * C139587 + C17173 * C13591) * C13593) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C13591 +
            (C726 + C742) * C139587) *
               C13593 +
           (((C554 * C832 + C139463 * C1396) * C244 +
             (C554 * C1011 + C139463 * C1602) * C139372) *
                C13591 +
            (C1611 + C1619) * C139587) *
               C139598) *
              C139346 * C92 -
          ((C1621 * C139587 + (C1619 + C1611) * C13591) * C139598 +
           ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
              C139346 * C93 +
          ((C746 * C13591 + (C734 + C744) * C139587) * C13593 +
           ((C1608 + C1618) * C13591 + (C1612 + C1620) * C139587) * C139598) *
              C139346 * C94 -
          ((((C554 * C1013 + C139463 * C1604) * C139372 +
             (C554 * C833 + C139463 * C1399) * C244) *
                C139587 +
            (C1620 + C1612) * C13591) *
               C139598 +
           ((C745 + C735) * C139587 + C747 * C13591) * C13593) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C4828 +
             (C554 * C245 + C139463 * C719) * C4653 -
             (C554 * C1700 + C139463 * C2264) * C4829 -
             (C554 * C1879 + C139463 * C2460) * C4654 +
             (C554 * C4656 + C139463 * C5191) * C4830 +
             (C554 * C4831 + C139463 * C5373) * C4655) *
                C13591 +
            (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C139587) *
               C13593 +
           ((C15026 * C4828 + C15243 * C4653 - C18638 * C4829 - C18873 * C4654 +
             (C554 * C5471 + C139463 * C5951) * C4830 +
             (C554 * C5637 + C139463 * C6106) * C4655) *
                C13591 +
            (C19796 + C19797 - C19798 - C19799 + C19800 + C19804) * C139587) *
               C139598) *
              C139346 * C139562 +
          (((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C13591 +
            (C5387 - (C5386 + C5385) + C5388 - C5389 - C5395) * C139587) *
               C13593 +
           ((C19798 - (C19797 + C19796) + C19799 - C19800 - C19804) * C13591 +
            (C8773 * C4829 - (C1615 * C4653 + C1420 * C4828) + C8998 * C4654 -
             (C554 * C5469 + C139463 * C5949) * C4830 -
             (C554 * C5635 + C139463 * C6108) * C4655) *
                C139587) *
               C139598) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C3364 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139303) *
               C13593 +
           ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
               C139598) *
              C139463 * C139372 * C3360 -
          (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) * C139598 +
           ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) * C13593) *
              C139463 * C139372 * C3361 +
          (((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C13593 +
           ((C17267 + C17268) * C3364 + (C17269 + C17270) * C139303) *
               C139598) *
              C139463 * C139372 * C3362 -
          (((C13596 * C17252 + C139587 * C17256 + C13595 * C17253 +
             C13591 * C17257) *
                C139303 +
            (C13596 * C17250 + C139587 * C17254 + C13595 * C17251 +
             C13591 * C17255) *
                C3364) *
               C139598 +
           ((C17270 + C17269) * C139303 + (C17268 + C17267) * C3364) * C13593) *
              C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C13593 +
           ((C14328 + C14329) * C826 + (C14330 + C14331) * C821 -
            (C14332 + C14333) * C827 - (C14334 + C14335) * C822 +
            (C14336 + C14337) * C828 + (C14338 + C14339) * C823) *
               C139598) *
              C139463 * C139372 * C139570 +
          (((C14333 + C14332) * C827 -
            ((C14331 + C14330) * C821 + (C14329 + C14328) * C826) +
            (C14335 + C14334) * C822 - (C14337 + C14336) * C828 -
            (C14339 + C14338) * C823) *
               C13593 +
           ((C13595 * C2571 + C13591 * C2575 + C13596 * C2572 +
             C139587 * C2576) *
                C827 -
            ((C13596 * C2578 + C139587 * C2583 + C13595 * C2577 +
              C13591 * C2582) *
                 C821 +
             (C13596 * C2571 + C139587 * C2575 + C13595 * C2570 +
              C13591 * C2574) *
                 C826) +
            (C13595 * C2578 + C13591 * C2583 + C13596 * C2579 +
             C139587 * C2584) *
                C822 -
            (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
             C13591 * C2576) *
                C828 -
            (C13596 * C2581 + C139587 * C2585 + C13595 * C2579 +
             C13591 * C2584) *
                C823) *
               C139598) *
              C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C13593 +
            ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
                C139598) *
               C139463 * C4653 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139598 +
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139303 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C3364) *
                C13593) *
               C139463 * C4654 +
           (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
              C139587 * C4661) *
                 C3364 +
             (C13595 * C4663 + C13591 * C4668 + C13596 * C4664 +
              C139587 * C4669) *
                 C139303) *
                C13593 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139598) *
               C139463 * C4655) *
              C139570 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) * C13593 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139598) *
               C139463 * C4654 -
           (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) *
                C139598 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C13593) *
               C139463 * C4653 -
           (((C13596 * C19904 + C139587 * C19908 + C13595 * C19905 +
              C13591 * C19909) *
                 C139303 +
             (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
              C13591 * C19907) *
                 C3364) *
                C139598 +
            ((C19922 + C19921) * C139303 + (C19920 + C19919) * C3364) *
                C13593) *
               C139463 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C3427 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
               C3360 -
           (C14329 + C14328) * C3428 - (C14450 + C14451) * C3361 +
           (C16298 + C16297) * C3429 + (C16407 + C16408) * C3362 -
           (C17268 + C17267) * C3430 - (C17345 + C17346) * C3363) *
              C13593 +
          ((C14328 + C14329) * C3427 + (C14451 + C14450) * C3360 -
           (C16297 + C16298) * C3428 - (C16408 + C16407) * C3361 +
           (C17267 + C17268) * C3429 + (C17346 + C17345) * C3362 -
           (C13596 * C17250 + C139587 * C17254 + C13595 * C17251 +
            C13591 * C17255) *
               C3430 -
           (C13596 * C17336 + C139587 * C17338 + C13595 * C17337 +
            C13591 * C17339) *
               C3363) *
              C139598) *
         C139463 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C923 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139570 -
            (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
               C13593 +
           ((C14328 + C14329) * C923 + (C14451 + C14450) * C139570 -
            (C13596 * C2571 + C139587 * C2575 + C13595 * C2570 +
             C13591 * C2574) *
                C924 -
            (C13596 * C2664 + C139587 * C2668 + C13595 * C2663 +
             C13591 * C2667) *
                C139360) *
               C139598) *
              C139463 * C821 +
          (((C14333 + C14332) * C924 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139570 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C923) +
            (C14452 + C14453) * C139360) *
               C13593 +
           ((C13595 * C2571 + C13591 * C2575 + C13596 * C2572 +
             C139587 * C2576) *
                C924 -
            ((C14453 + C14452) * C139570 + (C14332 + C14333) * C923) +
            (C13595 * C2664 + C13591 * C2668 + C13596 * C2665 +
             C139587 * C2669) *
                C139360) *
               C139598) *
              C139463 * C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C923 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139570 -
            (C14337 + C14336) * C924 - (C14454 + C14455) * C139360) *
               C13593 +
           ((C14336 + C14337) * C923 + (C14455 + C14454) * C139570 -
            (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
             C13591 * C2576) *
                C924 -
            (C13596 * C2666 + C139587 * C2670 + C13595 * C2665 +
             C13591 * C2669) *
                C139360) *
               C139598) *
              C139463 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C923 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139570 -
            (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
               C13593 +
           ((C14328 + C14329) * C923 + (C14451 + C14450) * C139570 -
            (C16297 + C16298) * C924 - (C16408 + C16407) * C139360) *
               C139598) *
              C139463 * C139303 * C4653 +
          (((C17986 + C17985) * C924 -
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139570 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C923) +
            (C18101 + C18102) * C139360) *
               C13593 +
           ((C17987 + C17988) * C924 -
            ((C18102 + C18101) * C139570 + (C17985 + C17986) * C923) +
            (C18104 + C18103) * C139360) *
               C139598) *
              C139463 * C139303 * C4654 +
          (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C923 +
            (C13595 * C4746 + C13591 * C4750 + C13596 * C4747 +
             C139587 * C4751) *
                C139570 -
            (C19920 + C19919) * C924 - (C20029 + C20030) * C139360) *
               C13593 +
           ((C19919 + C19920) * C923 + (C20030 + C20029) * C139570 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C924 -
            (C13596 * C20020 + C139587 * C20022 + C13595 * C20021 +
             C13591 * C20023) *
                C139360) *
               C139598) *
              C139463 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C13593 +
           ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) * C139598) *
              C139463 * C3360 -
          (((C16517 + C16518) * C139372 + (C16297 + C16298) * C244) * C139598 +
           ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
              C139463 * C3361 +
          (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C13593 +
           ((C17267 + C17268) * C244 + (C17421 + C17422) * C139372) * C139598) *
              C139463 * C3362 -
          (((C13596 * C17412 + C139587 * C17414 + C13595 * C17413 +
             C13591 * C17415) *
                C139372 +
            (C13596 * C17250 + C139587 * C17254 + C13595 * C17251 +
             C13591 * C17255) *
                C244) *
               C139598 +
           ((C17422 + C17421) * C139372 + (C17268 + C17267) * C244) * C13593) *
              C139463 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C13593 +
            ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C13596 * C2746 + C139587 * C2750 + C13595 * C2745 +
              C13591 * C2749) *
                 C139372 +
             (C13596 * C2571 + C139587 * C2575 + C13595 * C2570 +
              C13591 * C2574) *
                 C244) *
                C139598 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
               C139463 * C139360) *
              C821 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C13593 +
            ((C13595 * C2571 + C13591 * C2575 + C13596 * C2572 +
              C139587 * C2576) *
                 C244 +
             (C13595 * C2746 + C13591 * C2750 + C13596 * C2747 +
              C139587 * C2751) *
                 C139372) *
                C139598) *
               C139463 * C139360 -
           (((C14569 + C14568) * C139372 + (C14332 + C14333) * C244) * C139598 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139463 * C139570) *
              C822 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                 C139372) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14570 + C14571) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C13596 * C2748 + C139587 * C2752 + C13595 * C2747 +
              C13591 * C2751) *
                 C139372 +
             (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
              C13591 * C2576) *
                 C244) *
                C139598 +
            ((C14571 + C14570) * C139372 + (C14337 + C14336) * C244) * C13593) *
               C139463 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C4828 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C4653 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C4829 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C4654 +
            (C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C4830 +
            (C13595 * C4831 + C13591 * C4835 + C13596 * C4832 +
             C139587 * C4836) *
                C4655) *
               C13593 +
           ((C14328 + C14329) * C4828 + (C14566 + C14567) * C4653 -
            (C17985 + C17986) * C4829 - (C18215 + C18216) * C4654 +
            (C19919 + C19920) * C4830 + (C20137 + C20138) * C4655) *
               C139598) *
              C139463 * C139570 +
          (((C17986 + C17985) * C4829 -
            ((C14567 + C14566) * C4653 + (C14329 + C14328) * C4828) +
            (C18216 + C18215) * C4654 - (C19920 + C19919) * C4830 -
            (C20138 + C20137) * C4655) *
               C13593 +
           ((C17987 + C17988) * C4829 -
            ((C16517 + C16518) * C4653 + (C16297 + C16298) * C4828) +
            (C18217 + C18218) * C4654 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C4830 -
            (C13596 * C20128 + C139587 * C20130 + C13595 * C20129 +
             C13591 * C20131) *
                C4655) *
               C139598) *
              C139463 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C3364 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139303) *
               C139463 * C13591 +
           ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) * C139463 *
               C139587) *
              C139372 * C3360 -
          (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) * C139463 *
               C139587 +
           ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
             C13593 * C1098) *
                C139303 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C3364) *
               C139463 * C13591) *
              C139372 * C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139303) *
               C139463 * C13591 +
           ((C16628 + C16627) * C3364 + (C16630 + C16629) * C139303) * C139463 *
               C139587) *
              C139372 * C3362 -
          (((C13796 * C17252 + C139598 * C17490 + C13795 * C3369 +
             C13593 * C3547) *
                C139303 +
            (C13796 * C17250 + C139598 * C17488 + C13795 * C3366 +
             C13593 * C3544) *
                C3364) *
               C139463 * C139587 +
           ((C13796 * C17253 + C139598 * C17491 + C13795 * C3370 +
             C13593 * C3548) *
                C139303 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C3364) *
               C139463 * C13591) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C139463 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C822 +
            (C13831 + C13830) * C828 + (C13833 + C13832) * C823) *
               C139463 * C139587) *
              C139372 * C139570 +
          (((C14686 + C14687) * C827 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C821 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C826) +
            (C14688 + C14689) * C822 - (C14690 + C14691) * C828 -
            (C14692 + C14693) * C823) *
               C139463 * C13591 +
           ((C14691 + C14690) * C827 -
            ((C14689 + C14688) * C821 + (C14687 + C14686) * C826) +
            (C14693 + C14692) * C822 -
            (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
             C13593 * C1096) *
                C828 -
            (C13796 * C2581 + C139598 * C2834 + C13795 * C841 +
             C13593 * C1101) *
                C823) *
               C139463 * C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C13591 +
            ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) *
                C139463 * C139587) *
               C4653 -
           (((C15656 + C15655) * C139303 + (C15654 + C15653) * C3364) *
                C139463 * C139587 +
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139303 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C3364) *
                C139463 * C13591) *
               C4654 +
           (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
              C139598 * C5717) *
                 C3364 +
             (C13795 * C4663 + C13593 * C4917 + C13796 * C5474 +
              C139598 * C5720) *
                 C139303) *
                C139463 * C13591 +
            ((C19280 + C19279) * C3364 + (C19282 + C19281) * C139303) *
                C139463 * C139587) *
               C4655) *
              C139570 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C13591 +
            ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
              C139598 * C4165) *
                 C3364 +
             (C13795 * C3901 + C13593 * C4168 + C13796 * C3904 +
              C139598 * C4171) *
                 C139303) *
                C139463 * C139587) *
               C4654 -
           (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) *
                C139463 * C139587 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C139463 * C13591) *
               C4653 -
           (((C13796 * C19904 + C139598 * C20238 + C13795 * C5473 +
              C13593 * C5719) *
                 C139303 +
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C3364) *
                C139463 * C139587 +
            ((C13796 * C19905 + C139598 * C20239 + C13795 * C5474 +
              C13593 * C5720) *
                 C139303 +
             (C13796 * C19903 + C139598 * C20237 + C13795 * C5471 +
              C13593 * C5717) *
                 C3364) *
                C139463 * C13591) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C3427 +
           (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
               C3360 -
           (C13796 * C2570 + C139598 * C2827 + C13795 * C832 + C13593 * C1094) *
               C3428 -
           (C13796 * C2663 + C139598 * C2921 + C13795 * C927 + C13593 * C1195) *
               C3361 +
           (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
            C13593 * C3545) *
               C3430 -
           (C13796 * C17337 + C139598 * C17558 + C13795 * C3433 +
            C13593 * C3599) *
               C3363) *
              C139463 * C13591 +
          ((C13823 + C13822) * C3427 + (C13912 + C13913) * C3360 -
           (C14687 + C14686) * C3428 - (C14800 + C14801) * C3361 +
           (C16628 + C16627) * C3429 + (C16733 + C16734) * C3362 -
           (C13796 * C17250 + C139598 * C17488 + C13795 * C3366 +
            C13593 * C3544) *
               C3430 -
           (C13796 * C17336 + C139598 * C17559 + C13795 * C3432 +
            C13593 * C3600) *
               C3363) *
              C139463 * C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C923 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139570 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C924 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C139463 * C13591 +
           ((C13823 + C13822) * C923 + (C13912 + C13913) * C139570 -
            (C14687 + C14686) * C924 - (C14800 + C14801) * C139360) *
               C139463 * C139587) *
              C821 +
          (((C14686 + C14687) * C924 -
            ((C13913 + C13912) * C139570 + (C13822 + C13823) * C923) +
            (C14801 + C14800) * C139360) *
               C139463 * C13591 +
           ((C14691 + C14690) * C924 -
            ((C13914 + C13915) * C139570 + (C13827 + C13826) * C923) +
            (C14802 + C14803) * C139360) *
               C139463 * C139587) *
              C822 +
          (((C13826 + C13827) * C923 + (C13915 + C13914) * C139570 -
            (C14690 + C14691) * C924 - (C14803 + C14802) * C139360) *
               C139463 * C13591 +
           ((C13831 + C13830) * C923 + (C13916 + C13917) * C139570 -
            (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
             C13593 * C1096) *
                C924 -
            (C13796 * C2666 + C139598 * C2924 + C13795 * C928 +
             C13593 * C1198) *
                C139360) *
               C139463 * C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C923 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139570 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C924 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C139463 * C13591 +
           ((C13823 + C13822) * C923 + (C13912 + C13913) * C139570 -
            (C14687 + C14686) * C924 - (C14800 + C14801) * C139360) *
               C139463 * C139587) *
              C139303 * C4653 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C924 -
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139570 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C923) +
            (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
             C139598 * C4248) *
                C139360) *
               C139463 * C13591 +
           ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
             C139598 * C4165) *
                C924 -
            ((C15768 + C15767) * C139570 + (C15654 + C15653) * C923) +
            (C13795 * C3990 + C13593 * C4249 + C13796 * C3993 +
             C139598 * C4250) *
                C139360) *
               C139463 * C139587) *
              C139303 * C4654 +
          (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C923 +
            (C13795 * C4746 + C13593 * C5007 + C13796 * C5557 +
             C139598 * C5795) *
                C139570 -
            (C13796 * C19903 + C139598 * C20237 + C13795 * C5471 +
             C13593 * C5717) *
                C924 -
            (C13796 * C20021 + C139598 * C20338 + C13795 * C5557 +
             C13593 * C5795) *
                C139360) *
               C139463 * C13591 +
           ((C19280 + C19279) * C923 + (C19385 + C19386) * C139570 -
            (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
             C13593 * C5716) *
                C924 -
            (C13796 * C20020 + C139598 * C20339 + C13795 * C5556 +
             C13593 * C5796) *
                C139360) *
               C139463 * C139587) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
               C139587) *
              C3360 -
          (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
               C139587 +
           ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
             C13593 * C1301) *
                C139372 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C244) *
               C139463 * C13591) *
              C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C244 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139372) *
               C139463 * C13591 +
           ((C16628 + C16627) * C244 + (C16837 + C16838) * C139372) * C139463 *
               C139587) *
              C3362 -
          (((C13796 * C17412 + C139598 * C17626 + C13795 * C3488 +
             C13593 * C3653) *
                C139372 +
            (C13796 * C17250 + C139598 * C17488 + C13795 * C3366 +
             C13593 * C3544) *
                C244) *
               C139463 * C139587 +
           ((C13796 * C17413 + C139598 * C17627 + C13795 * C3489 +
             C13593 * C3654) *
                C139372 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C244) *
               C139463 * C13591) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
                C139587 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C139463 * C13591) *
               C139360) *
              C821 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C139463 *
                C13591 +
            ((C14691 + C14690) * C244 + (C14912 + C14913) * C139372) * C139463 *
                C139587) *
               C139360 -
           (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
                C139587 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
                C13591) *
               C139570) *
              C822 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C139463 *
                C13591 +
            ((C13831 + C13830) * C244 + (C14000 + C14001) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C13796 * C2748 + C139598 * C3020 + C13795 * C1012 +
              C13593 * C1302) *
                 C139372 +
             (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
              C13593 * C1096) *
                 C244) *
                C139463 * C139587 +
            ((C14913 + C14912) * C139372 + (C14690 + C14691) * C244) * C139463 *
                C13591) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C4828 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C4653 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C4829 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C4654 +
            (C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C4830 +
            (C13795 * C4831 + C13593 * C5095 + C13796 * C5637 +
             C139598 * C5872) *
                C4655) *
               C139463 * C13591 +
           ((C13823 + C13822) * C4828 + (C13996 + C13997) * C4653 -
            (C15654 + C15653) * C4829 - (C15877 + C15878) * C4654 +
            (C19280 + C19279) * C4830 + (C19489 + C19490) * C4655) *
               C139463 * C139587) *
              C139570 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C4829 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C4653 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C4828) +
            (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
             C139598 * C4330) *
                C4654 -
            (C13796 * C19903 + C139598 * C20237 + C13795 * C5471 +
             C13593 * C5717) *
                C4830 -
            (C13796 * C20129 + C139598 * C20438 + C13795 * C5637 +
             C13593 * C5872) *
                C4655) *
               C139463 * C13591 +
           ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
             C139598 * C4165) *
                C4829 -
            ((C14910 + C14911) * C4653 + (C14687 + C14686) * C4828) +
            (C13795 * C4076 + C13593 * C4328 + C13796 * C4079 +
             C139598 * C4331) *
                C4654 -
            (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
             C13593 * C5716) *
                C4830 -
            (C13796 * C20128 + C139598 * C20439 + C13795 * C5636 +
             C13593 * C5873) *
                C4655) *
               C139463 * C139587) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C13591 +
            (C584 * C3364 + C585 * C139303) * C139587) *
               C13593 +
           ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
               C139598) *
              C139372 * C3360 -
          (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
               C139598 +
           ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
               C13593) *
              C139372 * C3361 +
          (((C17706 + C17705) * C13591 + (C17704 + C17703) * C139587) * C13593 +
           ((C17715 + C17716) * C13591 + (C17711 + C17712) * C139587) *
               C139598) *
              C139372 * C3362 -
          ((((C554 * C17252 + C139463 * C17696) * C139303 +
             (C554 * C17250 + C139463 * C17694) * C3364) *
                C139587 +
            ((C554 * C17253 + C139463 * C17697) * C139303 +
             (C554 * C17251 + C139463 * C17695) * C3364) *
                C13591) *
               C139598 +
           ((C17712 + C17711) * C139587 + (C17716 + C17715) * C13591) *
               C13593) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C13593 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C13591 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139372 * C139570 +
          (((C15016 - (C15029 + C15028) + C15017 - C15018 - C15019) * C13591 +
            (C15022 - (C15021 + C15020) + C15023 - C15024 - C15025) * C139587) *
               C13593 +
           ((C3122 * C827 -
             ((C554 * C2577 + C139463 * C3109) * C821 +
              (C554 * C2570 + C139463 * C3105) * C826) +
             C3123 * C822 - C3124 * C828 - C3125 * C823) *
                C13591 +
            (C3124 * C827 - (C3123 * C821 + C3122 * C826) + C3125 * C822 -
             (C554 * C2573 + C139463 * C3108) * C828 -
             (C554 * C2581 + C139463 * C3112) * C823) *
                C139587) *
               C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C13591 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C13593 +
            ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
                C139598) *
               C4653 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C13591) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C13591) *
                C13593) *
               C4654 +
           ((((C554 * C4656 + C139463 * C5191) * C3364 +
              (C554 * C4663 + C139463 * C5195) * C139303) *
                 C13591 +
             (C5208 * C3364 + C5209 * C139303) * C139587) *
                C13593 +
            ((C20551 + C20552) * C13591 + (C20547 + C20548) * C139587) *
                C139598) *
               C4655) *
              C139570 +
          ((((C18644 + C18643) * C13591 + (C18624 + C18623) * C139587) *
                C13593 +
            ((C18645 + C18646) * C13591 + (C18647 + C18648) * C139587) *
                C139598) *
               C4654 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
                C13593) *
               C4653 -
           ((((C554 * C19904 + C139463 * C20540) * C139303 +
              (C554 * C19902 + C139463 * C20538) * C3364) *
                 C139587 +
             ((C554 * C19905 + C139463 * C20541) * C139303 +
              (C554 * C19903 + C139463 * C20539) * C3364) *
                 C13591) *
                C139598 +
            ((C20548 + C20547) * C139587 + (C20552 + C20551) * C13591) *
                C13593) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C3427 +
            (C554 * C182 + C139463 * C641) * C3360 - C15026 * C3428 -
            C15138 * C3361 + C16960 * C3429 + C17072 * C3362 - C17713 * C3430 -
            C17787 * C3363) *
               C13591 +
           (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
            C3122 * C3429 + C3218 * C3362 - C16961 * C3430 - C17073 * C3363) *
               C139587) *
              C13593 +
          ((C15026 * C3427 + C15138 * C3360 - C16960 * C3428 - C17072 * C3361 +
            C17713 * C3429 + C17787 * C3362 -
            (C554 * C17251 + C139463 * C17695) * C3430 -
            (C554 * C17337 + C139463 * C17782) * C3363) *
               C13591 +
           (C1418 * C3427 + C1518 * C3360 - C3122 * C3428 - C3218 * C3361 +
            C16961 * C3429 + C17073 * C3362 -
            (C554 * C17250 + C139463 * C17694) * C3430 -
            (C554 * C17336 + C139463 * C17783) * C3363) *
               C139587) *
              C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C923 +
             (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
             C15138 * C139360) *
                C13591 +
            (C1503 + C1504 - C1505 - C1522) * C139587) *
               C13593 +
           ((C15026 * C923 + C15138 * C139570 -
             (C554 * C2570 + C139463 * C3105) * C924 -
             (C554 * C2663 + C139463 * C3199) * C139360) *
                C13591 +
            (C15130 + C15131 - C15132 - C15133) * C139587) *
               C139598) *
              C821 +
          (((C1505 - (C1504 + C1503) + C1522) * C13591 +
            (C1510 - (C1509 + C1508) + C1524) * C139587) *
               C13593 +
           ((C15132 - (C15131 + C15130) + C15133) * C13591 +
            (C15134 - (C15135 + C15136) + C15137) * C139587) *
               C139598) *
              C822 +
          ((C1526 * C13591 + (C1515 + C1514 - C1513 - C1525) * C139587) *
               C13593 +
           ((C15136 + C15135 - C15134 - C15137) * C13591 +
            (C1422 * C923 + C1521 * C139570 -
             (C554 * C2573 + C139463 * C3108) * C924 -
             (C554 * C2666 + C139463 * C3202) * C139360) *
                C139587) *
               C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C923 +
             (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
             C15138 * C139360) *
                C13591 +
            (C1503 + C1504 - C1505 - C1522) * C139587) *
               C13593 +
           ((C15026 * C923 + C15138 * C139570 - C16960 * C924 -
             C17072 * C139360) *
                C13591 +
            (C15130 + C15131 - C15132 - C15133) * C139587) *
               C139598) *
              C139303 * C4653 +
          (((C18638 * C924 -
             ((C554 * C1794 + C139463 * C2368) * C139570 +
              (C554 * C1700 + C139463 * C2264) * C923) +
             C18755 * C139360) *
                C13591 +
            (C10502 - (C10503 + C10504) + C10505) * C139587) *
               C13593 +
           ((C18639 * C924 - (C18755 * C139570 + C18638 * C923) +
             C18756 * C139360) *
                C13591 +
            (C18641 * C924 - (C8884 * C139570 + C8771 * C923) +
             C18757 * C139360) *
                C139587) *
               C139598) *
              C139303 * C4654 +
          ((((C554 * C4656 + C139463 * C5191) * C923 +
             (C554 * C4746 + C139463 * C5285) * C139570 - C20549 * C924 -
             C20655 * C139360) *
                C13591 +
            (C5208 * C923 + C5296 * C139570 - C19593 * C924 -
             C19696 * C139360) *
                C139587) *
               C13593 +
           ((C20549 * C923 + C20655 * C139570 -
             (C554 * C19903 + C139463 * C20539) * C924 -
             (C554 * C20021 + C139463 * C20650) * C139360) *
                C13591 +
            (C19593 * C923 + C19696 * C139570 -
             (C554 * C19902 + C139463 * C20538) * C924 -
             (C554 * C20020 + C139463 * C20651) * C139360) *
                C139587) *
               C139598) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C13591 +
            (C726 + C742) * C139587) *
               C13593 +
           ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
              C3360 -
          ((C17173 * C139587 + (C17183 + C17176) * C13591) * C139598 +
           (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
              C3361 +
          (((C17176 + C17183) * C13591 + C17177 * C139587) * C13593 +
           ((C17856 + C17860) * C13591 + (C17178 + C17184) * C139587) *
               C139598) *
              C3362 -
          ((((C554 * C17412 + C139463 * C17853) * C139372 +
             (C554 * C17250 + C139463 * C17694) * C244) *
                C139587 +
            ((C554 * C17413 + C139463 * C17854) * C139372 +
             (C554 * C17251 + C139463 * C17695) * C244) *
                C13591) *
               C139598 +
           ((C17184 + C17178) * C139587 + (C17860 + C17856) * C13591) *
               C13593) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C13591 +
             (C726 + C742) * C139587) *
                C13593 +
            ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
               C139570 -
           (((C3308 + C3300) * C139587 +
             ((C554 * C2745 + C139463 * C3295) * C139372 +
              (C554 * C2570 + C139463 * C3105) * C244) *
                 C13591) *
                C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
               C139360) *
              C821 +
          (((C15240 * C13591 + C15242 * C139587) * C13593 +
            ((C3300 + C3308) * C13591 + (C3303 + C3309) * C139587) * C139598) *
               C139360 -
           ((C1621 * C139587 + C15241 * C13591) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
               C139570) *
              C822 +
          (((C746 * C13591 + (C734 + C744) * C139587) * C13593 +
            (C15242 * C13591 + (C1612 + C1620) * C139587) * C139598) *
               C139570 -
           ((((C554 * C2748 + C139463 * C3298) * C139372 +
              (C554 * C2573 + C139463 * C3108) * C244) *
                 C139587 +
             (C3309 + C3303) * C13591) *
                C139598 +
            ((C1620 + C1612) * C139587 + C1621 * C13591) * C13593) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C4828 +
             (C554 * C245 + C139463 * C719) * C4653 -
             (C554 * C1700 + C139463 * C2264) * C4829 -
             (C554 * C1879 + C139463 * C2460) * C4654 +
             (C554 * C4656 + C139463 * C5191) * C4830 +
             (C554 * C4831 + C139463 * C5373) * C4655) *
                C13591 +
            (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C139587) *
               C13593 +
           ((C20756 + C20757 - C20758 - C20759 + C20760 + C20764) * C13591 +
            (C19796 + C19797 - C19798 - C19799 + C19800 + C19804) * C139587) *
               C139598) *
              C139570 +
          (((C20758 - (C20757 + C20756) + C20759 - C20760 - C20764) * C13591 +
            (C19798 - (C19797 + C19796) + C19799 - C19800 - C19804) * C139587) *
               C13593 +
           ((C18639 * C4829 - (C17181 * C4653 + C16960 * C4828) +
             C18874 * C4654 - (C554 * C19903 + C139463 * C20539) * C4830 -
             (C554 * C20129 + C139463 * C20753) * C4655) *
                C13591 +
            (C18641 * C4829 - (C3306 * C4653 + C3122 * C4828) + C18875 * C4654 -
             (C554 * C19902 + C139463 * C20538) * C4830 -
             (C554 * C20128 + C139463 * C20754) * C4655) *
                C139587) *
               C139598) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C13593 +
            ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139598 +
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139303 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C3364) *
                C13593) *
               C139463 * C139384) *
              C2565 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) * C13593 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139598) *
               C139463 * C139384 -
           (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) *
                C139598 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C13593) *
               C139463 * C139571) *
              C2566 +
          ((((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C13593 +
            ((C17267 + C17268) * C3364 + (C17269 + C17270) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C13596 * C17960 + C139587 * C17964 + C13595 * C17961 +
              C13591 * C17965) *
                 C139303 +
             (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
              C13591 * C17963) *
                 C3364) *
                C139598 +
            ((C17990 + C17989) * C139303 + (C17988 + C17987) * C3364) *
                C13593) *
               C139463 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C13593 +
           ((C14328 + C14329) * C826 + (C14330 + C14331) * C821 -
            (C14332 + C14333) * C827 - (C14334 + C14335) * C822 +
            (C14336 + C14337) * C828 + (C14338 + C14339) * C823) *
               C139598) *
              C139463 * C139571 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C827 -
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C821 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C826) +
            (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
             C139587 * C1712) *
                C822 -
            (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
             C13591 * C1703) *
                C828 -
            (C13596 * C1709 + C139587 * C1715 + C13595 * C1705 +
             C13591 * C1712) *
                C823) *
               C13593 +
           ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
             C139587 * C3899) *
                C827 -
            ((C13596 * C3901 + C139587 * C3910 + C13595 * C3900 +
              C13591 * C3909) *
                 C821 +
             (C13596 * C3892 + C139587 * C3898 + C13595 * C3891 +
              C13591 * C3897) *
                 C826) +
            (C13595 * C3901 + C13591 * C3910 + C13596 * C3902 +
             C139587 * C3911) *
                C822 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C828 -
            (C13596 * C8122 + C139587 * C8123 + C13595 * C3902 +
             C13591 * C3911) *
                C823) *
               C139598) *
              C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C3364 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139303) *
               C13593 +
           ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
               C139598) *
              C139463 * C6159 -
          (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) * C139598 +
           ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
             C13591 * C1714) *
                C139303 +
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C3364) *
               C13593) *
              C139463 * C6160 +
          (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C3364 +
            (C13595 * C4663 + C13591 * C4668 + C13596 * C4664 +
             C139587 * C4669) *
                C139303) *
               C13593 +
           ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
               C139598) *
              C139463 * C6161 -
          (((C13596 * C20832 + C139587 * C20836 + C13595 * C20833 +
             C13591 * C20837) *
                C139303 +
            (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
             C13591 * C20835) *
                C3364) *
               C139598 +
           ((C13596 * C6167 + C139587 * C6173 + C13595 * C6168 +
             C13591 * C6174) *
                C139303 +
            (C13596 * C6164 + C139587 * C6170 + C13595 * C6165 +
             C13591 * C6171) *
                C3364) *
               C13593) *
              C139463 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C13593 +
           ((C14328 + C14329) * C2660 + (C14451 + C14450) * C2565 -
            (C16297 + C16298) * C2661 - (C16408 + C16407) * C2566 +
            (C17267 + C17268) * C2662 + (C17346 + C17345) * C2567) *
               C139598) *
              C139463 * C139303 * C139571 +
          (((C17986 + C17985) * C2661 -
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C2565 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C2660) +
            (C18101 + C18102) * C2566 - (C17988 + C17987) * C2662 -
            (C18103 + C18104) * C2567) *
               C13593 +
           ((C17987 + C17988) * C2661 -
            ((C18102 + C18101) * C2565 + (C17985 + C17986) * C2660) +
            (C18104 + C18103) * C2566 -
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C2662 -
            (C13596 * C18088 + C139587 * C18090 + C13595 * C18089 +
             C13591 * C18091) *
                C2567) *
               C139598) *
              C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C13593 +
            ((C14328 + C14329) * C181 + (C14451 + C14450) * C139346) *
                C139598) *
               C139463 * C821 -
           (((C14453 + C14452) * C139346 + (C14332 + C14333) * C181) * C139598 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139463 * C822 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                 C139346) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14455 + C14454) * C139346) *
                C139598) *
               C139463 * C823) *
              C139571 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C13593 +
            ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
              C139587 * C3899) *
                 C181 +
             (C13595 * C3990 + C13591 * C3996 + C13596 * C3991 +
              C139587 * C3997) *
                 C139346) *
                C139598) *
               C139463 * C822 -
           (((C13596 * C3990 + C139587 * C3996 + C13595 * C3989 +
              C13591 * C3995) *
                 C139346 +
             (C13596 * C3892 + C139587 * C3898 + C13595 * C3891 +
              C13591 * C3897) *
                 C181) *
                C139598 +
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139346 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C181) *
                C13593) *
               C139463 * C821 -
           (((C13596 * C8222 + C139587 * C8223 + C13595 * C3991 +
              C13591 * C3997) *
                 C139346 +
             (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
              C13591 * C3899) *
                 C181) *
                C139598 +
            ((C13596 * C1793 + C139587 * C1798 + C13595 * C1792 +
              C13591 * C1797) *
                 C139346 +
             (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
              C13591 * C1703) *
                 C181) *
                C13593) *
               C139463 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139346) *
               C13593 +
           ((C14328 + C14329) * C181 + (C14451 + C14450) * C139346) * C139598) *
              C139463 * C139303 * C6159 -
          (((C18102 + C18101) * C139346 + (C17985 + C17986) * C181) * C139598 +
           ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
             C13591 * C1799) *
                C139346 +
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C181) *
               C13593) *
              C139463 * C139303 * C6160 +
          (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C181 +
            (C13595 * C4746 + C13591 * C4750 + C13596 * C4747 +
             C139587 * C4751) *
                C139346) *
               C13593 +
           ((C19919 + C19920) * C181 + (C20030 + C20029) * C139346) * C139598) *
              C139463 * C139303 * C6161 -
          (((C13596 * C20904 + C139587 * C20906 + C13595 * C20905 +
             C13591 * C20907) *
                C139346 +
            (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
             C13591 * C20835) *
                C181) *
               C139598 +
           ((C13596 * C6226 + C139587 * C6229 + C13595 * C6227 +
             C13591 * C6230) *
                C139346 +
            (C13596 * C6164 + C139587 * C6170 + C13595 * C6165 +
             C13591 * C6171) *
                C181) *
               C13593) *
              C139463 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C1876 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139384) *
               C13593 +
           ((C14328 + C14329) * C1875 + (C14566 + C14567) * C139571 -
            (C17985 + C17986) * C1876 - (C18215 + C18216) * C139384) *
               C139598) *
              C139463 * C2565 +
          (((C17986 + C17985) * C1876 -
            ((C14567 + C14566) * C139571 + (C14329 + C14328) * C1875) +
            (C18216 + C18215) * C139384) *
               C13593 +
           ((C17987 + C17988) * C1876 -
            ((C16517 + C16518) * C139571 + (C16297 + C16298) * C1875) +
            (C18217 + C18218) * C139384) *
               C139598) *
              C139463 * C2566 +
          (((C16298 + C16297) * C1875 + (C16518 + C16517) * C139571 -
            (C17988 + C17987) * C1876 - (C18218 + C18217) * C139384) *
               C13593 +
           ((C17267 + C17268) * C1875 + (C17421 + C17422) * C139571 -
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C1876 -
            (C13596 * C18202 + C139587 * C18204 + C13595 * C18203 +
             C13591 * C18205) *
                C139384) *
               C139598) *
              C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C1876 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139384) *
               C13593 +
           ((C14328 + C14329) * C1875 + (C14566 + C14567) * C139571 -
            (C13596 * C3892 + C139587 * C3898 + C13595 * C3891 +
             C13591 * C3897) *
                C1876 -
            (C13596 * C4076 + C139587 * C4082 + C13595 * C4075 +
             C13591 * C4081) *
                C139384) *
               C139598) *
              C139463 * C139346 * C821 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C1876 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139571 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C1875) +
            (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
             C139587 * C1882) *
                C139384) *
               C13593 +
           ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
             C139587 * C3899) *
                C1876 -
            ((C14569 + C14568) * C139571 + (C14332 + C14333) * C1875) +
            (C13595 * C4076 + C13591 * C4082 + C13596 * C4077 +
             C139587 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C1875 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139571 -
            (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
             C13591 * C1703) *
                C1876 -
            (C13596 * C1880 + C139587 * C1885 + C13595 * C1877 +
             C13591 * C1882) *
                C139384) *
               C13593 +
           ((C14336 + C14337) * C1875 + (C14570 + C14571) * C139571 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C1876 -
            (C13596 * C8322 + C139587 * C8323 + C13595 * C4077 +
             C13591 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C6281 +
           (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
               C6159 -
           (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
            C13591 * C1708) *
               C6282 -
           (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
            C13591 * C1884) *
               C6160 +
           (C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
            C139587 * C4661) *
               C6283 +
           (C13595 * C4831 + C13591 * C4835 + C13596 * C4832 +
            C139587 * C4836) *
               C6161 -
           (C13596 * C6164 + C139587 * C6170 + C13595 * C6165 +
            C13591 * C6171) *
               C6284 -
           (C13596 * C6286 + C139587 * C6289 + C13595 * C6287 +
            C13591 * C6290) *
               C6162) *
              C13593 +
          ((C14328 + C14329) * C6281 + (C14566 + C14567) * C6159 -
           (C17985 + C17986) * C6282 - (C18215 + C18216) * C6160 +
           (C19919 + C19920) * C6283 + (C20137 + C20138) * C6161 -
           (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
            C13591 * C20835) *
               C6284 -
           (C13596 * C20974 + C139587 * C20976 + C13595 * C20975 +
            C13591 * C20977) *
               C6162) *
              C139598) *
         C139463 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C13591 +
            ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C15656 + C15655) * C139303 + (C15654 + C15653) * C3364) *
                C139463 * C139587 +
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139303 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C3364) *
                C139463 * C13591) *
               C139384) *
              C2565 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C13591 +
            ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
              C139598 * C4165) *
                 C3364 +
             (C13795 * C3901 + C13593 * C4168 + C13796 * C3904 +
              C139598 * C4171) *
                 C139303) *
                C139463 * C139587) *
               C139384 -
           (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) *
                C139463 * C139587 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C139463 * C13591) *
               C139571) *
              C2566 +
          ((((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C139463 * C13591 +
            ((C16628 + C16627) * C3364 + (C16630 + C16629) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C13796 * C17960 + C139598 * C18318 + C13795 * C3904 +
              C13593 * C4171) *
                 C139303 +
             (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
              C13593 * C4165) *
                 C3364) *
                C139463 * C139587 +
            ((C13796 * C17961 + C139598 * C18319 + C13795 * C3905 +
              C13593 * C4172) *
                 C139303 +
             (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
              C13593 * C4166) *
                 C3364) *
                C139463 * C13591) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C139463 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C822 +
            (C13831 + C13830) * C828 + (C13833 + C13832) * C823) *
               C139463 * C139587) *
              C139571 +
          (((C15653 + C15654) * C827 -
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C821 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C826) +
            (C15655 + C15656) * C822 - (C15657 + C15658) * C828 -
            (C15659 + C15660) * C823) *
               C139463 * C13591 +
           ((C15658 + C15657) * C827 -
            ((C15656 + C15655) * C821 + (C15654 + C15653) * C826) +
            (C15660 + C15659) * C822 -
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C828 -
            (C13796 * C8122 + C139598 * C8423 + C13795 * C1709 +
             C13593 * C1969) *
                C823) *
               C139463 * C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C3364 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139303) *
               C139463 * C13591 +
           ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) * C139463 *
               C139587) *
              C6159 -
          (((C15656 + C15655) * C139303 + (C15654 + C15653) * C3364) * C139463 *
               C139587 +
           ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
             C13593 * C1966) *
                C139303 +
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C3364) *
               C139463 * C13591) *
              C6160 +
          (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C3364 +
            (C13795 * C4663 + C13593 * C4917 + C13796 * C5474 +
             C139598 * C5720) *
                C139303) *
               C139463 * C13591 +
           ((C19280 + C19279) * C3364 + (C19282 + C19281) * C139303) * C139463 *
               C139587) *
              C6161 -
          (((C13796 * C20832 + C139598 * C21046 + C13795 * C6167 +
             C13593 * C6345) *
                C139303 +
            (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
             C13593 * C6342) *
                C3364) *
               C139463 * C139587 +
           ((C13796 * C20833 + C139598 * C21047 + C13795 * C6168 +
             C13593 * C6346) *
                C139303 +
            (C13796 * C20831 + C139598 * C21045 + C13795 * C6165 +
             C13593 * C6343) *
                C3364) *
               C139463 * C13591) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C13591 +
           ((C13823 + C13822) * C2660 + (C13912 + C13913) * C2565 -
            (C14687 + C14686) * C2661 - (C14800 + C14801) * C2566 +
            (C16628 + C16627) * C2662 + (C16733 + C16734) * C2567) *
               C139463 * C139587) *
              C139303 * C139571 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C2661 -
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C2565 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C2660) +
            (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
             C139598 * C4248) *
                C2566 -
            (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
             C13593 * C4166) *
                C2662 -
            (C13796 * C18089 + C139598 * C18418 + C13795 * C3994 +
             C13593 * C4248) *
                C2567) *
               C139463 * C13591 +
           ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
             C139598 * C4165) *
                C2661 -
            ((C15768 + C15767) * C2565 + (C15654 + C15653) * C2660) +
            (C13795 * C3990 + C13593 * C4249 + C13796 * C3993 +
             C139598 * C4250) *
                C2566 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C2662 -
            (C13796 * C18088 + C139598 * C18419 + C13795 * C3993 +
             C13593 * C4250) *
                C2567) *
               C139463 * C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
                C139587) *
               C821 -
           (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
                C139587 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
                C13591) *
               C822 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C139463 *
                C13591 +
            ((C13831 + C13830) * C181 + (C13916 + C13917) * C139346) * C139463 *
                C139587) *
               C823) *
              C139571 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C139463 *
                C13591 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139463 *
                C139587) *
               C822 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139463 *
                C139587 +
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139346 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C181) *
                C139463 * C13591) *
               C821 -
           (((C13796 * C8222 + C139598 * C8534 + C13795 * C1793 +
              C13593 * C2065) *
                 C139346 +
             (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
              C13593 * C1964) *
                 C181) *
                C139463 * C139587 +
            ((C15770 + C15769) * C139346 + (C15657 + C15658) * C181) * C139463 *
                C13591) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139346) *
               C139463 * C13591 +
           ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
               C139587) *
              C139303 * C6159 -
          (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139463 *
               C139587 +
           ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
             C13593 * C2066) *
                C139346 +
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C181) *
               C139463 * C13591) *
              C139303 * C6160 +
          (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C181 +
            (C13795 * C4746 + C13593 * C5007 + C13796 * C5557 +
             C139598 * C5795) *
                C139346) *
               C139463 * C13591 +
           ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) * C139463 *
               C139587) *
              C139303 * C6161 -
          (((C13796 * C20904 + C139598 * C21114 + C13795 * C6226 +
             C13593 * C6398) *
                C139346 +
            (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
             C13593 * C6342) *
                C181) *
               C139463 * C139587 +
           ((C13796 * C20905 + C139598 * C21115 + C13795 * C6227 +
             C13593 * C6399) *
                C139346 +
            (C13796 * C20831 + C139598 * C21045 + C13795 * C6165 +
             C13593 * C6343) *
                C181) *
               C139463 * C13591) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C1876 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139384) *
               C139463 * C13591 +
           ((C13823 + C13822) * C1875 + (C13996 + C13997) * C139571 -
            (C15654 + C15653) * C1876 - (C15877 + C15878) * C139384) *
               C139463 * C139587) *
              C2565 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C1876 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139571 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C1875) +
            (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
             C139598 * C4330) *
                C139384) *
               C139463 * C13591 +
           ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
             C139598 * C4165) *
                C1876 -
            ((C14910 + C14911) * C139571 + (C14687 + C14686) * C1875) +
            (C13795 * C4076 + C13593 * C4328 + C13796 * C4079 +
             C139598 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
             C13593 * C4166) *
                C1876 -
            (C13796 * C18203 + C139598 * C18518 + C13795 * C4080 +
             C13593 * C4330) *
                C139384) *
               C139463 * C13591 +
           ((C16628 + C16627) * C1875 + (C16837 + C16838) * C139571 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C1876 -
            (C13796 * C18202 + C139598 * C18519 + C13795 * C4079 +
             C13593 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C1876 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139384) *
               C139463 * C13591 +
           ((C13823 + C13822) * C1875 + (C13996 + C13997) * C139571 -
            (C15654 + C15653) * C1876 - (C15877 + C15878) * C139384) *
               C139463 * C139587) *
              C139346 * C821 +
          (((C15653 + C15654) * C1876 -
            ((C13997 + C13996) * C139571 + (C13822 + C13823) * C1875) +
            (C15878 + C15877) * C139384) *
               C139463 * C13591 +
           ((C15658 + C15657) * C1876 -
            ((C13998 + C13999) * C139571 + (C13827 + C13826) * C1875) +
            (C15879 + C15880) * C139384) *
               C139463 * C139587) *
              C139346 * C822 +
          (((C13826 + C13827) * C1875 + (C13999 + C13998) * C139571 -
            (C15657 + C15658) * C1876 - (C15880 + C15879) * C139384) *
               C139463 * C13591 +
           ((C13831 + C13830) * C1875 + (C14000 + C14001) * C139571 -
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C1876 -
            (C13796 * C8322 + C139598 * C8647 + C13795 * C1880 +
             C13593 * C2162) *
                C139384) *
               C139463 * C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C6281 +
           (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
               C6159 -
           (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
            C13593 * C1962) *
               C6282 -
           (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
            C13593 * C2159) *
               C6160 +
           (C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
            C139598 * C5717) *
               C6283 +
           (C13795 * C4831 + C13593 * C5095 + C13796 * C5637 +
            C139598 * C5872) *
               C6161 -
           (C13796 * C20831 + C139598 * C21045 + C13795 * C6165 +
            C13593 * C6343) *
               C6284 -
           (C13796 * C20975 + C139598 * C21182 + C13795 * C6287 +
            C13593 * C6450) *
               C6162) *
              C139463 * C13591 +
          ((C13823 + C13822) * C6281 + (C13996 + C13997) * C6159 -
           (C15654 + C15653) * C6282 - (C15877 + C15878) * C6160 +
           (C19280 + C19279) * C6283 + (C19489 + C19490) * C6161 -
           (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
            C13593 * C6342) *
               C6284 -
           (C13796 * C20974 + C139598 * C21183 + C13795 * C6286 +
            C13593 * C6451) *
               C6162) *
              C139463 * C139587) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C13591 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C13593 +
            ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
                C139598) *
               C139571 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C13591) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C13591) *
                C13593) *
               C139384) *
              C2565 +
          ((((C18644 + C18643) * C13591 + (C18624 + C18623) * C139587) *
                C13593 +
            ((C18645 + C18646) * C13591 + (C18647 + C18648) * C139587) *
                C139598) *
               C139384 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
                C13593) *
               C139571) *
              C2566 +
          ((((C17706 + C17705) * C13591 + (C17704 + C17703) * C139587) *
                C13593 +
            ((C17715 + C17716) * C13591 + (C17711 + C17712) * C139587) *
                C139598) *
               C139571 -
           ((((C554 * C17960 + C139463 * C18620) * C139303 +
              (C554 * C17958 + C139463 * C18618) * C3364) *
                 C139587 +
             ((C554 * C17961 + C139463 * C18621) * C139303 +
              (C554 * C17959 + C139463 * C18619) * C3364) *
                 C13591) *
                C139598 +
            ((C18648 + C18647) * C139587 + (C18646 + C18645) * C13591) *
                C13593) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C13593 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C13591 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139571 +
          (((C2286 * C827 -
             ((C554 * C1707 + C139463 * C2268) * C821 +
              (C554 * C1700 + C139463 * C2264) * C826) +
             C2287 * C822 - C2288 * C828 - C2289 * C823) *
                C13591 +
            (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
             C2290 * C828 - C2291 * C823) *
                C139587) *
               C13593 +
           ((C8771 * C827 -
             ((C554 * C3900 + C139463 * C4413) * C821 +
              (C554 * C3891 + C139463 * C4407) * C826) +
             C8772 * C822 - C8773 * C828 - C8774 * C823) *
                C13591 +
            (C8773 * C827 - (C8772 * C821 + C8771 * C826) + C8774 * C822 -
             (C554 * C8120 + C139463 * C8760) * C828 -
             (C554 * C8122 + C139463 * C8761) * C823) *
                C139587) *
               C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C13591 +
            (C584 * C3364 + C585 * C139303) * C139587) *
               C13593 +
           ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
               C139598) *
              C6159 -
          (((C18623 + C18624) * C139587 + (C18643 + C18644) * C13591) *
               C139598 +
           ((C2287 * C139303 + C2286 * C3364) * C139587 +
            ((C554 * C1707 + C139463 * C2268) * C139303 +
             (C554 * C1700 + C139463 * C2264) * C3364) *
                C13591) *
               C13593) *
              C6160 +
          ((((C554 * C4656 + C139463 * C5191) * C3364 +
             (C554 * C4663 + C139463 * C5195) * C139303) *
                C13591 +
            (C5208 * C3364 + C5209 * C139303) * C139587) *
               C13593 +
           ((C20551 + C20552) * C13591 + (C20547 + C20548) * C139587) *
               C139598) *
              C6161 -
          ((((C554 * C20832 + C139463 * C21252) * C139303 +
             (C554 * C20830 + C139463 * C21250) * C3364) *
                C139587 +
            ((C554 * C20833 + C139463 * C21253) * C139303 +
             (C554 * C20831 + C139463 * C21251) * C3364) *
                C13591) *
               C139598 +
           (((C554 * C6167 + C139463 * C6507) * C139303 +
             (C554 * C6164 + C139463 * C6504) * C3364) *
                C139587 +
            ((C554 * C6168 + C139463 * C6508) * C139303 +
             (C554 * C6165 + C139463 * C6505) * C3364) *
                C13591) *
               C13593) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C13591 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C13593 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             C17713 * C2662 + C17787 * C2567) *
                C13591 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139303 * C139571 +
          (((C18638 * C2661 -
             ((C554 * C1794 + C139463 * C2368) * C2565 +
              (C554 * C1700 + C139463 * C2264) * C2660) +
             C18755 * C2566 - C18639 * C2662 - C18756 * C2567) *
                C13591 +
            (C8771 * C2661 - (C2380 * C2565 + C2286 * C2660) + C8884 * C2566 -
             C18641 * C2662 - C18757 * C2567) *
                C139587) *
               C13593 +
           ((C18639 * C2661 - (C18755 * C2565 + C18638 * C2660) +
             C18756 * C2566 - (C554 * C17959 + C139463 * C18619) * C2662 -
             (C554 * C18089 + C139463 * C18746) * C2567) *
                C13591 +
            (C18641 * C2661 - (C8884 * C2565 + C8771 * C2660) + C18757 * C2566 -
             (C554 * C17958 + C139463 * C18618) * C2662 -
             (C554 * C18088 + C139463 * C18747) * C2567) *
                C139587) *
               C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C13591 +
             (C648 + C664) * C139587) *
                C13593 +
            ((C15026 * C181 + C15138 * C139346) * C13591 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C821 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
               C822 +
           ((C668 * C13591 + (C656 + C666) * C139587) * C13593 +
            ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139587) *
                C139598) *
               C823) *
              C139571 +
          ((((C2371 + C2383) * C13591 + (C2374 + C2384) * C139587) * C13593 +
            ((C16077 + C16078) * C13591 + (C16079 + C16080) * C139587) *
                C139598) *
               C822 -
           (((C16078 + C16077) * C139587 +
             ((C554 * C3989 + C139463 * C4493) * C139346 +
              (C554 * C3891 + C139463 * C4407) * C181) *
                 C13591) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C13591) *
                C13593) *
               C821 -
           ((((C554 * C8222 + C139463 * C8872) * C139346 +
              (C554 * C8120 + C139463 * C8760) * C181) *
                 C139587 +
             (C16080 + C16079) * C13591) *
                C139598 +
            ((C2385 + C2377) * C139587 + C2386 * C13591) * C13593) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C13591 +
            (C648 + C664) * C139587) *
               C13593 +
           ((C15026 * C181 + C15138 * C139346) * C13591 +
            (C14134 + C14135) * C139587) *
               C139598) *
              C139303 * C6159 -
          (((C16078 + C16077) * C139587 +
            (C18755 * C139346 + C18638 * C181) * C13591) *
               C139598 +
           ((C2383 + C2371) * C139587 +
            ((C554 * C1794 + C139463 * C2368) * C139346 +
             (C554 * C1700 + C139463 * C2264) * C181) *
                C13591) *
               C13593) *
              C139303 * C6160 +
          ((((C554 * C4656 + C139463 * C5191) * C181 +
             (C554 * C4746 + C139463 * C5285) * C139346) *
                C13591 +
            (C5290 + C5298) * C139587) *
               C13593 +
           ((C20549 * C181 + C20655 * C139346) * C13591 +
            (C19693 + C19697) * C139587) *
               C139598) *
              C139303 * C6161 -
          ((((C554 * C20904 + C139463 * C21320) * C139346 +
             (C554 * C20830 + C139463 * C21250) * C181) *
                C139587 +
            ((C554 * C20905 + C139463 * C21321) * C139346 +
             (C554 * C20831 + C139463 * C21251) * C181) *
                C13591) *
               C139598 +
           (((C554 * C6226 + C139463 * C6560) * C139346 +
             (C554 * C6164 + C139463 * C6504) * C181) *
                C139587 +
            ((C554 * C6227 + C139463 * C6561) * C139346 +
             (C554 * C6165 + C139463 * C6505) * C181) *
                C13591) *
               C13593) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C13591 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C13593 +
           ((C18858 + C18859 - C18860 - C18876) * C13591 +
            (C8989 + C8988 - C8987 - C8999) * C139587) *
               C139598) *
              C2565 +
          (((C18860 - (C18859 + C18858) + C18876) * C13591 +
            (C8987 - (C8988 + C8989) + C8999) * C139587) *
               C13593 +
           ((C18863 - (C18864 + C18865) + C18877) * C13591 +
            (C18868 - (C18869 + C18870) + C18878) * C139587) *
               C139598) *
              C2566 +
          (((C18865 + C18864 - C18863 - C18877) * C13591 +
            (C18870 + C18869 - C18868 - C18878) * C139587) *
               C13593 +
           ((C17713 * C1875 + C17859 * C139571 -
             (C554 * C17959 + C139463 * C18619) * C1876 -
             (C554 * C18203 + C139463 * C18855) * C139384) *
                C13591 +
            (C16961 * C1875 + C17182 * C139571 -
             (C554 * C17958 + C139463 * C18618) * C1876 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139587) *
               C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C13591 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C13593 +
           ((C15026 * C1875 + C15243 * C139571 -
             (C554 * C3891 + C139463 * C4407) * C1876 -
             (C554 * C4075 + C139463 * C4573) * C139384) *
                C13591 +
            (C8989 + C8988 - C8987 - C8999) * C139587) *
               C139598) *
              C139346 * C821 +
          (((C2468 - (C2467 + C2466) + C2485) * C13591 +
            (C2473 - (C2472 + C2471) + C2487) * C139587) *
               C13593 +
           ((C8987 - (C8988 + C8989) + C8999) * C13591 +
            (C8992 - (C8993 + C8994) + C9000) * C139587) *
               C139598) *
              C139346 * C822 +
          ((C2489 * C13591 + (C2478 + C2477 - C2476 - C2488) * C139587) *
               C13593 +
           ((C8994 + C8993 - C8992 - C9000) * C13591 +
            (C1422 * C1875 + C1617 * C139571 -
             (C554 * C8120 + C139463 * C8760) * C1876 -
             (C554 * C8322 + C139463 * C8985) * C139384) *
                C139587) *
               C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C6281 +
            (C554 * C245 + C139463 * C719) * C6159 -
            (C554 * C1700 + C139463 * C2264) * C6282 -
            (C554 * C1879 + C139463 * C2460) * C6160 +
            (C554 * C4656 + C139463 * C5191) * C6283 +
            (C554 * C4831 + C139463 * C5373) * C6161 -
            (C554 * C6165 + C139463 * C6505) * C6284 -
            (C554 * C6287 + C139463 * C6612) * C6162) *
               C13591 +
           (C584 * C6281 + C738 * C6159 - C2286 * C6282 - C2481 * C6160 +
            C5208 * C6283 + C5392 * C6161 -
            (C554 * C6164 + C139463 * C6504) * C6284 -
            (C554 * C6286 + C139463 * C6613) * C6162) *
               C139587) *
              C13593 +
          ((C15026 * C6281 + C15243 * C6159 - C18638 * C6282 - C18873 * C6160 +
            C20549 * C6283 + C20763 * C6161 -
            (C554 * C20831 + C139463 * C21251) * C6284 -
            (C554 * C20975 + C139463 * C21388) * C6162) *
               C13591 +
           (C1418 * C6281 + C1616 * C6159 - C8771 * C6282 - C8997 * C6160 +
            C19593 * C6283 + C19803 * C6161 -
            (C554 * C20830 + C139463 * C21250) * C6284 -
            (C554 * C20974 + C139463 * C21389) * C6162) *
               C139587) *
              C139598) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6694 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139601 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C6695 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C6696 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C6691) *
               C13593 +
           ((C14328 + C14329) * C6694 + (C14330 + C14331) * C139601 -
            (C14332 + C14333) * C6695 - (C14334 + C14335) * C139590 +
            (C14336 + C14337) * C6696 + (C14338 + C14339) * C6691) *
               C139598) *
              C139463 * C9074 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C6695 -
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139601 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C6694) +
            (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
             C139587 * C1712) *
                C139590 -
            (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
             C13591 * C1703) *
                C6696 -
            (C13596 * C1709 + C139587 * C1715 + C13595 * C1705 +
             C13591 * C1712) *
                C6691) *
               C13593 +
           ((C23335 + C23336) * C6695 -
            ((C17983 + C17984) * C139601 + (C17985 + C17986) * C6694) +
            (C23337 + C23338) * C139590 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C6696 -
            (C13596 * C8122 + C139587 * C8123 + C13595 * C3902 +
             C13591 * C3911) *
                C6691) *
               C139598) *
              C139463 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C13593 +
            ((C14328 + C14329) * C181 + (C14451 + C14450) * C139346) *
                C139598) *
               C139463 * C139601 -
           (((C14453 + C14452) * C139346 + (C14332 + C14333) * C181) * C139598 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139463 * C139590 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                 C139346) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14455 + C14454) * C139346) *
                C139598) *
               C139463 * C6691) *
              C9074 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C13593 +
            ((C23335 + C23336) * C181 + (C23474 + C23473) * C139346) *
                C139598) *
               C139463 * C139590 -
           (((C18102 + C18101) * C139346 + (C17985 + C17986) * C181) * C139598 +
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139346 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C181) *
                C13593) *
               C139463 * C139601 -
           (((C13596 * C8222 + C139587 * C8223 + C13595 * C3991 +
              C13591 * C3997) *
                 C139346 +
             (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
              C13591 * C3899) *
                 C181) *
                C139598 +
            ((C13596 * C1793 + C139587 * C1798 + C13595 * C1792 +
              C13591 * C1797) *
                 C139346 +
             (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
              C13591 * C1703) *
                 C181) *
                C13593) *
               C139463 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C9224 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C9074 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C9225 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139384) *
               C13593 +
           ((C14328 + C14329) * C9224 + (C14566 + C14567) * C9074 -
            (C17985 + C17986) * C9225 - (C18215 + C18216) * C139384) *
               C139598) *
              C139463 * C139346 * C139601 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C9225 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C9074 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C9224) +
            (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
             C139587 * C1882) *
                C139384) *
               C13593 +
           ((C23335 + C23336) * C9225 -
            ((C14569 + C14568) * C9074 + (C14332 + C14333) * C9224) +
            (C23609 + C23610) * C139384) *
               C139598) *
              C139463 * C139346 * C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C9224 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C9074 -
            (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
             C13591 * C1703) *
                C9225 -
            (C13596 * C1880 + C139587 * C1885 + C13595 * C1877 +
             C13591 * C1882) *
                C139384) *
               C13593 +
           ((C14336 + C14337) * C9224 + (C14570 + C14571) * C9074 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C9225 -
            (C13596 * C8322 + C139587 * C8323 + C13595 * C4077 +
             C13591 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6694 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139601 -
            (C13822 + C13823) * C6695 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C6696 + (C13828 + C13829) * C6691) *
               C139463 * C13591 +
           ((C13823 + C13822) * C6694 + (C13825 + C13824) * C139601 -
            (C13827 + C13826) * C6695 - (C13829 + C13828) * C139590 +
            (C13831 + C13830) * C6696 + (C13833 + C13832) * C6691) *
               C139463 * C139587) *
              C9074 +
          (((C15653 + C15654) * C6695 -
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139601 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C6694) +
            (C15655 + C15656) * C139590 - (C15657 + C15658) * C6696 -
            (C15659 + C15660) * C6691) *
               C139463 * C13591 +
           ((C15658 + C15657) * C6695 -
            ((C15656 + C15655) * C139601 + (C15654 + C15653) * C6694) +
            (C15660 + C15659) * C139590 -
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C6696 -
            (C13796 * C8122 + C139598 * C8423 + C13795 * C1709 +
             C13593 * C1969) *
                C6691) *
               C139463 * C139587) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
                C139587) *
               C139601 -
           (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
                C139587 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
                C13591) *
               C139590 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C139463 *
                C13591 +
            ((C13831 + C13830) * C181 + (C13916 + C13917) * C139346) * C139463 *
                C139587) *
               C6691) *
              C9074 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C139463 *
                C13591 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139463 *
                C139587) *
               C139590 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139463 *
                C139587 +
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139346 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C181) *
                C139463 * C13591) *
               C139601 -
           (((C13796 * C8222 + C139598 * C8534 + C13795 * C1793 +
              C13593 * C2065) *
                 C139346 +
             (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
              C13593 * C1964) *
                 C181) *
                C139463 * C139587 +
            ((C15770 + C15769) * C139346 + (C15657 + C15658) * C181) * C139463 *
                C13591) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C9224 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C9074 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C9225 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139384) *
               C139463 * C13591 +
           ((C13823 + C13822) * C9224 + (C13996 + C13997) * C9074 -
            (C15654 + C15653) * C9225 - (C15877 + C15878) * C139384) *
               C139463 * C139587) *
              C139346 * C139601 +
          (((C15653 + C15654) * C9225 -
            ((C13997 + C13996) * C9074 + (C13822 + C13823) * C9224) +
            (C15878 + C15877) * C139384) *
               C139463 * C13591 +
           ((C15658 + C15657) * C9225 -
            ((C13998 + C13999) * C9074 + (C13827 + C13826) * C9224) +
            (C15879 + C15880) * C139384) *
               C139463 * C139587) *
              C139346 * C139590 +
          (((C13826 + C13827) * C9224 + (C13999 + C13998) * C9074 -
            (C15657 + C15658) * C9225 - (C15880 + C15879) * C139384) *
               C139463 * C13591 +
           ((C13831 + C13830) * C9224 + (C14000 + C14001) * C9074 -
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C9225 -
            (C13796 * C8322 + C139598 * C8647 + C13795 * C1880 +
             C13593 * C2162) *
                C139384) *
               C139463 * C139587) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C6694 +
             (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
             C585 * C139590 + C586 * C6696 + C587 * C6691) *
                C13591 +
            (C584 * C6694 + C585 * C139601 - C586 * C6695 - C587 * C139590 +
             C588 * C6696 + C589 * C6691) *
                C139587) *
               C13593 +
           ((C22077 + C22078 - C22079 - C22080 + C22081 + C22082) * C13591 +
            (C22083 + C22084 - C22085 - C22086 + C22087 + C22088) * C139587) *
               C139598) *
              C9074 +
          (((C2286 * C6695 -
             ((C554 * C1707 + C139463 * C2268) * C139601 +
              (C554 * C1700 + C139463 * C2264) * C6694) +
             C2287 * C139590 - C2288 * C6696 - C2289 * C6691) *
                C13591 +
            (C2288 * C6695 - (C2287 * C139601 + C2286 * C6694) +
             C2289 * C139590 - C2290 * C6696 - C2291 * C6691) *
                C139587) *
               C13593 +
           ((C8771 * C6695 - (C18637 * C139601 + C18638 * C6694) +
             C8772 * C139590 - C8773 * C6696 - C8774 * C6691) *
                C13591 +
            (C8773 * C6695 - (C8772 * C139601 + C8771 * C6694) +
             C8774 * C139590 - (C554 * C8120 + C139463 * C8760) * C6696 -
             (C554 * C8122 + C139463 * C8761) * C6691) *
                C139587) *
               C139598) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C13591 +
             (C648 + C664) * C139587) *
                C13593 +
            ((C15026 * C181 + C15138 * C139346) * C13591 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C139601 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
               C139590 +
           ((C668 * C13591 + (C656 + C666) * C139587) * C13593 +
            ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139587) *
                C139598) *
               C6691) *
              C9074 +
          ((((C2371 + C2383) * C13591 + (C2374 + C2384) * C139587) * C13593 +
            ((C16077 + C16078) * C13591 + (C16079 + C16080) * C139587) *
                C139598) *
               C139590 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C13591) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C13591) *
                C13593) *
               C139601 -
           ((((C554 * C8222 + C139463 * C8872) * C139346 +
              (C554 * C8120 + C139463 * C8760) * C181) *
                 C139587 +
             (C16080 + C16079) * C13591) *
                C139598 +
            ((C2385 + C2377) * C139587 + C2386 * C13591) * C13593) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C9224 +
             (C554 * C245 + C139463 * C719) * C9074 -
             (C554 * C1700 + C139463 * C2264) * C9225 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C13591 +
            (C9687 + C9688 - C9689 - C9690) * C139587) *
               C13593 +
           ((C15026 * C9224 + C15243 * C9074 - C18638 * C9225 -
             C18873 * C139384) *
                C13591 +
            (C10610 + C10609 - C10608 - C10611) * C139587) *
               C139598) *
              C139346 * C139601 +
          (((C9689 - (C9688 + C9687) + C9690) * C13591 +
            (C9693 - (C9692 + C9691) + C9694) * C139587) *
               C13593 +
           ((C10608 - (C10609 + C10610) + C10611) * C13591 +
            (C10612 - (C10613 + C10614) + C10615) * C139587) *
               C139598) *
              C139346 * C139590 +
          ((C9701 * C13591 + (C9697 + C9696 - C9695 - C9698) * C139587) *
               C13593 +
           ((C10614 + C10613 - C10612 - C10615) * C13591 +
            (C1422 * C9224 + C1617 * C9074 -
             (C554 * C8120 + C139463 * C8760) * C9225 -
             (C554 * C8322 + C139463 * C8985) * C139384) *
                C139587) *
               C139598) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C7401 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C7396 -
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C7402 -
             (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                 C139308) *
                C13593 +
            ((C14328 + C14329) * C7401 + (C14330 + C14331) * C7396 -
             (C14332 + C14333) * C7402 - (C14334 + C14335) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C7402 -
             ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
               C13591 * C1714) *
                  C7396 +
              (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
               C13591 * C1708) *
                  C7401) +
             (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
              C139587 * C1712) *
                 C139308) *
                C13593 +
            ((C23335 + C23336) * C7402 -
             ((C17983 + C17984) * C7396 + (C17985 + C17986) * C7401) +
             (C23337 + C23338) * C139308) *
                C139598) *
               C139463 * C139384) *
              C139570 +
          ((((C14333 + C14332) * C7402 -
             ((C14331 + C14330) * C7396 + (C14329 + C14328) * C7401) +
             (C14335 + C14334) * C139308) *
                C13593 +
            ((C16293 + C16294) * C7402 -
             ((C16295 + C16296) * C7396 + (C16297 + C16298) * C7401) +
             (C16299 + C16300) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C17986 + C17985) * C7401 + (C17984 + C17983) * C7396 -
             (C23336 + C23335) * C7402 - (C23338 + C23337) * C139308) *
                C13593 +
            ((C17987 + C17988) * C7401 + (C17989 + C17990) * C7396 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C7402 -
             (C13596 * C3903 + C139587 * C3912 + C13595 * C3904 +
              C13591 * C3913) *
                 C139308) *
                C139598) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C923 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139570 -
             (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
                C13593 +
            ((C14328 + C14329) * C923 + (C14451 + C14450) * C139570 -
             (C16297 + C16298) * C924 - (C16408 + C16407) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C14333 + C14332) * C924 -
             ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                  C139570 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C923) +
             (C14452 + C14453) * C139360) *
                C13593 +
            ((C16293 + C16294) * C924 -
             ((C14453 + C14452) * C139570 + (C14332 + C14333) * C923) +
             (C16410 + C16409) * C139360) *
                C139598) *
               C139463 * C139308) *
              C9074 +
          ((((C17986 + C17985) * C924 -
             ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
               C13591 * C1799) *
                  C139570 +
              (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
               C13591 * C1708) *
                  C923) +
             (C18101 + C18102) * C139360) *
                C13593 +
            ((C17987 + C17988) * C924 -
             ((C18102 + C18101) * C139570 + (C17985 + C17986) * C923) +
             (C18104 + C18103) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C923 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C139570 -
             (C23336 + C23335) * C924 - (C23473 + C23474) * C139360) *
                C13593 +
            ((C23335 + C23336) * C923 + (C23474 + C23473) * C139570 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C924 -
             (C13596 * C3992 + C139587 * C3998 + C13595 * C3993 +
              C13591 * C3999) *
                 C139360) *
                C139598) *
               C139463 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C9224 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C9074 -
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C9225 -
             (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
              C13591 * C1884) *
                 C139384) *
                C13593 +
            ((C14328 + C14329) * C9224 + (C14566 + C14567) * C9074 -
             (C17985 + C17986) * C9225 - (C18215 + C18216) * C139384) *
                C139598) *
               C139463 * C139570 +
           (((C17986 + C17985) * C9225 -
             ((C14567 + C14566) * C9074 + (C14329 + C14328) * C9224) +
             (C18216 + C18215) * C139384) *
                C13593 +
            ((C17987 + C17988) * C9225 -
             ((C16517 + C16518) * C9074 + (C16297 + C16298) * C9224) +
             (C18217 + C18218) * C139384) *
                C139598) *
               C139463 * C139360) *
              C7396 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C9225 -
             ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                  C9074 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C9224) +
             (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
              C139587 * C1882) *
                 C139384) *
                C13593 +
            ((C23335 + C23336) * C9225 -
             ((C14569 + C14568) * C9074 + (C14332 + C14333) * C9224) +
             (C23609 + C23610) * C139384) *
                C139598) *
               C139463 * C139570 +
           (((C14333 + C14332) * C9224 + (C14568 + C14569) * C9074 -
             (C23336 + C23335) * C9225 - (C23610 + C23609) * C139384) *
                C13593 +
            ((C16293 + C16294) * C9224 + (C16519 + C16520) * C9074 -
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C9225 -
             (C13596 * C4078 + C139587 * C4084 + C13595 * C4079 +
              C13591 * C4085) *
                 C139384) *
                C139598) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C7401 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C7396 -
             (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
                C139463 * C13591 +
            ((C13823 + C13822) * C7401 + (C13825 + C13824) * C7396 -
             (C13827 + C13826) * C7402 - (C13829 + C13828) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C15653 + C15654) * C7402 -
             ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
               C13593 * C1966) *
                  C7396 +
              (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
               C13593 * C1962) *
                  C7401) +
             (C15655 + C15656) * C139308) *
                C139463 * C13591 +
            ((C15658 + C15657) * C7402 -
             ((C15656 + C15655) * C7396 + (C15654 + C15653) * C7401) +
             (C15660 + C15659) * C139308) *
                C139463 * C139587) *
               C139384) *
              C139570 +
          ((((C14686 + C14687) * C7402 -
             ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
               C13593 * C1098) *
                  C7396 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C7401) +
             (C14688 + C14689) * C139308) *
                C139463 * C13591 +
            ((C14691 + C14690) * C7402 -
             ((C14689 + C14688) * C7396 + (C14687 + C14686) * C7401) +
             (C14693 + C14692) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C7401 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C7396 -
             (C23749 + C23750) * C7402 - (C23751 + C23752) * C139308) *
                C139463 * C13591 +
            ((C23750 + C23749) * C7401 + (C23752 + C23751) * C7396 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C7402 -
             (C13796 * C3903 + C139598 * C4170 + C13795 * C3902 +
              C13593 * C4169) *
                 C139308) *
                C139463 * C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C923 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139570 -
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C924 -
             (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
              C13593 * C1195) *
                 C139360) *
                C139463 * C13591 +
            ((C13823 + C13822) * C923 + (C13912 + C13913) * C139570 -
             (C14687 + C14686) * C924 - (C14800 + C14801) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C14686 + C14687) * C924 -
             ((C13913 + C13912) * C139570 + (C13822 + C13823) * C923) +
             (C14801 + C14800) * C139360) *
                C139463 * C13591 +
            ((C14691 + C14690) * C924 -
             ((C13914 + C13915) * C139570 + (C13827 + C13826) * C923) +
             (C14802 + C14803) * C139360) *
                C139463 * C139587) *
               C139308) *
              C9074 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C924 -
             ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
               C13593 * C2066) *
                  C139570 +
              (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
               C13593 * C1962) *
                  C923) +
             (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
              C139598 * C4248) *
                 C139360) *
                C139463 * C13591 +
            ((C23750 + C23749) * C924 -
             ((C15768 + C15767) * C139570 + (C15654 + C15653) * C923) +
             (C23887 + C23888) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C15653 + C15654) * C923 + (C15767 + C15768) * C139570 -
             (C23749 + C23750) * C924 - (C23888 + C23887) * C139360) *
                C139463 * C13591 +
            ((C15658 + C15657) * C923 + (C15769 + C15770) * C139570 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C924 -
             (C13796 * C3992 + C139598 * C4252 + C13795 * C3991 +
              C13593 * C4251) *
                 C139360) *
                C139463 * C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C9224 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C9225 -
             (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
              C13593 * C2159) *
                 C139384) *
                C139463 * C13591 +
            ((C13823 + C13822) * C9224 + (C13996 + C13997) * C9074 -
             (C15654 + C15653) * C9225 - (C15877 + C15878) * C139384) *
                C139463 * C139587) *
               C139570 +
           (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C9225 -
             ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
               C13593 * C1301) *
                  C9074 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C9224) +
             (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
              C139598 * C4330) *
                 C139384) *
                C139463 * C13591 +
            ((C23750 + C23749) * C9225 -
             ((C14910 + C14911) * C9074 + (C14687 + C14686) * C9224) +
             (C24023 + C24024) * C139384) *
                C139463 * C139587) *
               C139360) *
              C7396 +
          ((((C15653 + C15654) * C9225 -
             ((C13997 + C13996) * C9074 + (C13822 + C13823) * C9224) +
             (C15878 + C15877) * C139384) *
                C139463 * C13591 +
            ((C15658 + C15657) * C9225 -
             ((C13998 + C13999) * C9074 + (C13827 + C13826) * C9224) +
             (C15879 + C15880) * C139384) *
                C139463 * C139587) *
               C139570 +
           (((C14686 + C14687) * C9224 + (C14911 + C14910) * C9074 -
             (C23749 + C23750) * C9225 - (C24024 + C24023) * C139384) *
                C139463 * C13591 +
            ((C14691 + C14690) * C9224 + (C14912 + C14913) * C9074 -
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C9225 -
             (C13796 * C4078 + C139598 * C4332 + C13795 * C4077 +
              C13593 * C4329) *
                 C139384) *
                C139463 * C139587) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C7401 +
              (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
              C585 * C139308) *
                 C13591 +
             (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                 C139587) *
                C13593 +
            ((C22979 + C22980 - C22981 - C22982) * C13591 +
             (C22983 + C22984 - C22985 - C22986) * C139587) *
                C139598) *
               C9074 +
           (((C2286 * C7402 -
              ((C554 * C1707 + C139463 * C2268) * C7396 +
               (C554 * C1700 + C139463 * C2264) * C7401) +
              C2287 * C139308) *
                 C13591 +
             (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
              C2289 * C139308) *
                 C139587) *
                C13593 +
            ((C24155 - (C24156 + C24157) + C24158) * C13591 +
             (C24159 - (C24160 + C24161) + C24162) * C139587) *
                C139598) *
               C139384) *
              C139570 +
          ((((C22981 - (C22980 + C22979) + C22982) * C13591 +
             (C22985 - (C22984 + C22983) + C22986) * C139587) *
                C13593 +
            ((C22987 - (C22988 + C22989) + C22990) * C13591 +
             (C22991 - (C22992 + C22993) + C22994) * C139587) *
                C139598) *
               C9074 +
           (((C24157 + C24156 - C24155 - C24158) * C13591 +
             (C24161 + C24160 - C24159 - C24162) * C139587) *
                C13593 +
            ((C18639 * C7401 + C18640 * C7396 - C18641 * C7402 -
              C18642 * C139308) *
                 C13591 +
             (C18641 * C7401 + C18642 * C7396 -
              (C554 * C3894 + C139463 * C4410) * C7402 -
              (C554 * C3903 + C139463 * C4416) * C139308) *
                 C139587) *
                C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C923 +
                        (C554 * C182 + C139463 * C641) * C139570 -
                        C15026 * C924 - C15138 * C139360) *
                           C13591 +
                       (C1503 + C1504 - C1505 - C1522) * C139587) *
                          C13593 +
                      ((C15026 * C923 + C15138 * C139570 - C16960 * C924 -
                        C17072 * C139360) *
                           C13591 +
                       (C15130 + C15131 - C15132 - C15133) * C139587) *
                          C139598) *
                         C7396 +
                     (((C1505 - (C1504 + C1503) + C1522) * C13591 +
                       (C1510 - (C1509 + C1508) + C1524) * C139587) *
                          C13593 +
                      ((C15132 - (C15131 + C15130) + C15133) * C13591 +
                       (C15134 - (C15135 + C15136) + C15137) * C139587) *
                          C139598) *
                         C139308) *
                        C9074 +
                    ((((C18638 * C924 -
                        ((C554 * C1794 + C139463 * C2368) * C139570 +
                         (C554 * C1700 + C139463 * C2264) * C923) +
                        C18755 * C139360) *
                           C13591 +
                       (C10502 - (C10503 + C10504) + C10505) * C139587) *
                          C13593 +
                      ((C18639 * C924 - (C18755 * C139570 + C18638 * C923) +
                        C18756 * C139360) *
                           C13591 +
                       (C26355 - (C26356 + C26357) + C26358) * C139587) *
                          C139598) *
                         C7396 +
                     (((C10504 + C10503 - C10502 - C10505) * C13591 +
                       (C10508 + C10507 - C10506 - C10509) * C139587) *
                          C13593 +
                      ((C26357 + C26356 - C26355 - C26358) * C13591 +
                       (C8773 * C923 + C8885 * C139570 -
                        (C554 * C3894 + C139463 * C4410) * C924 -
                        (C554 * C3992 + C139463 * C4498) * C139360) *
                           C139587) *
                          C139598) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C9224 +
              (C554 * C245 + C139463 * C719) * C9074 -
              (C554 * C1700 + C139463 * C2264) * C9225 -
              (C554 * C1879 + C139463 * C2460) * C139384) *
                 C13591 +
             (C9687 + C9688 - C9689 - C9690) * C139587) *
                C13593 +
            ((C26489 + C26490 - C26491 - C26492) * C13591 + C26501 * C139587) *
                C139598) *
               C139570 +
           (((C26491 - (C26490 + C26489) + C26492) * C13591 +
             C26502 * C139587) *
                C13593 +
            ((C18639 * C9225 - (C17181 * C9074 + C16960 * C9224) +
              C18874 * C139384) *
                 C13591 +
             (C26495 - (C26496 + C26497) + C26498) * C139587) *
                C139598) *
               C139360) *
              C7396 +
          ((((C9689 - (C9688 + C9687) + C9690) * C13591 +
             (C9693 - (C9692 + C9691) + C9694) * C139587) *
                C13593 +
            (C26502 * C13591 +
             (C10612 - (C10613 + C10614) + C10615) * C139587) *
                C139598) *
               C139570 +
           ((C26501 * C13591 + (C10614 + C10613 - C10612 - C10615) * C139587) *
                C13593 +
            ((C26497 + C26496 - C26495 - C26498) * C13591 +
             (C3124 * C9224 + C3307 * C9074 -
              (C554 * C3894 + C139463 * C4410) * C9225 -
              (C554 * C4078 + C139463 * C4578) * C139384) *
                 C139587) *
                C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7401 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C7396 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C7402 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C13593 +
           ((C14328 + C14329) * C7401 + (C14330 + C14331) * C7396 -
            (C14332 + C14333) * C7402 - (C14334 + C14335) * C139308) *
               C139598) *
              C139463 * C139603 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C7402 -
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C7396 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C7401) +
            (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
             C139587 * C1712) *
                C139308) *
               C13593 +
           ((C23335 + C23336) * C7402 -
            ((C17983 + C17984) * C7396 + (C17985 + C17986) * C7401) +
            (C23337 + C23338) * C139308) *
               C139598) *
              C139463 * C139596 +
          (((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C7401 +
            (C13595 * C4663 + C13591 * C4668 + C13596 * C4664 +
             C139587 * C4669) *
                C7396 -
            (C13596 * C4658 + C139587 * C4662 + C13595 * C4657 +
             C13591 * C4661) *
                C7402 -
            (C13596 * C4665 + C139587 * C4670 + C13595 * C4664 +
             C13591 * C4669) *
                C139308) *
               C13593 +
           ((C19919 + C19920) * C7401 + (C19921 + C19922) * C7396 -
            (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
             C13591 * C5476) *
                C7402 -
            (C13596 * C5472 + C139587 * C5478 + C13595 * C5473 +
             C13591 * C5479) *
                C139308) *
               C139598) *
              C139463 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C13593 +
            ((C14328 + C14329) * C181 + (C14451 + C14450) * C139346) *
                C139598) *
               C139463 * C7396 -
           (((C14453 + C14452) * C139346 + (C14332 + C14333) * C181) * C139598 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139463 * C139308) *
              C139603 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C13593 +
            ((C23335 + C23336) * C181 + (C23474 + C23473) * C139346) *
                C139598) *
               C139463 * C139308 -
           (((C18102 + C18101) * C139346 + (C17985 + C17986) * C181) * C139598 +
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139346 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C181) *
                C13593) *
               C139463 * C7396) *
              C139596 +
          ((((C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
              C139587 * C4661) *
                 C181 +
             (C13595 * C4746 + C13591 * C4750 + C13596 * C4747 +
              C139587 * C4751) *
                 C139346) *
                C13593 +
            ((C19919 + C19920) * C181 + (C20030 + C20029) * C139346) *
                C139598) *
               C139463 * C7396 -
           (((C13596 * C5555 + C139587 * C5558 + C13595 * C5556 +
              C13591 * C5559) *
                 C139346 +
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C181) *
                C139598 +
            ((C13596 * C4748 + C139587 * C4752 + C13595 * C4747 +
              C13591 * C4751) *
                 C139346 +
             (C13596 * C4658 + C139587 * C4662 + C13595 * C4657 +
              C13591 * C4661) *
                 C181) *
                C13593) *
               C139463 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C10840 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139603 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C10841 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139596 +
            (C13595 * C4656 + C13591 * C4660 + C13596 * C4657 +
             C139587 * C4661) *
                C10842 +
            (C13595 * C4831 + C13591 * C4835 + C13596 * C4832 +
             C139587 * C4836) *
                C10691) *
               C13593 +
           ((C14328 + C14329) * C10840 + (C14566 + C14567) * C139603 -
            (C17985 + C17986) * C10841 - (C18215 + C18216) * C139596 +
            (C19919 + C19920) * C10842 + (C20137 + C20138) * C10691) *
               C139598) *
              C139463 * C139346 * C7396 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C10841 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139603 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C10840) +
            (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
             C139587 * C1882) *
                C139596 -
            (C13596 * C4658 + C139587 * C4662 + C13595 * C4657 +
             C13591 * C4661) *
                C10842 -
            (C13596 * C4833 + C139587 * C4837 + C13595 * C4832 +
             C13591 * C4836) *
                C10691) *
               C13593 +
           ((C23335 + C23336) * C10841 -
            ((C14569 + C14568) * C139603 + (C14332 + C14333) * C10840) +
            (C23609 + C23610) * C139596 -
            (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
             C13591 * C5476) *
                C10842 -
            (C13596 * C5635 + C139587 * C5638 + C13595 * C5636 +
             C13591 * C5639) *
                C10691) *
               C139598) *
              C139463 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7401 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C7396 -
            (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
               C139463 * C13591 +
           ((C13823 + C13822) * C7401 + (C13825 + C13824) * C7396 -
            (C13827 + C13826) * C7402 - (C13829 + C13828) * C139308) *
               C139463 * C139587) *
              C139603 +
          (((C15653 + C15654) * C7402 -
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C7396 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C7401) +
            (C15655 + C15656) * C139308) *
               C139463 * C13591 +
           ((C15658 + C15657) * C7402 -
            ((C15656 + C15655) * C7396 + (C15654 + C15653) * C7401) +
            (C15660 + C15659) * C139308) *
               C139463 * C139587) *
              C139596 +
          (((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C7401 +
            (C13795 * C4663 + C13593 * C4917 + C13796 * C5474 +
             C139598 * C5720) *
                C7396 -
            (C19279 + C19280) * C7402 - (C19281 + C19282) * C139308) *
               C139463 * C13591 +
           ((C19280 + C19279) * C7401 + (C19282 + C19281) * C7396 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C7402 -
            (C13796 * C5472 + C139598 * C5718 + C13795 * C4665 +
             C13593 * C4919) *
                C139308) *
               C139463 * C139587) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
                C139587) *
               C7396 -
           (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
                C139587 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
                C13591) *
               C139308) *
              C139603 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C139463 *
                C13591 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139463 *
                C139587) *
               C139308 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139463 *
                C139587 +
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139346 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C181) *
                C139463 * C13591) *
               C7396) *
              C139596 +
          ((((C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
              C139598 * C5717) *
                 C181 +
             (C13795 * C4746 + C13593 * C5007 + C13796 * C5557 +
              C139598 * C5795) *
                 C139346) *
                C139463 * C13591 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) * C139463 *
                C139587) *
               C7396 -
           (((C13796 * C5555 + C139598 * C5797 + C13795 * C4748 +
              C13593 * C5009) *
                 C139346 +
             (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
              C13593 * C4915) *
                 C181) *
                C139463 * C139587 +
            ((C19386 + C19385) * C139346 + (C19279 + C19280) * C181) * C139463 *
                C13591) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C10840 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139603 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C10841 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139596 +
            (C13795 * C4656 + C13593 * C4913 + C13796 * C5471 +
             C139598 * C5717) *
                C10842 +
            (C13795 * C4831 + C13593 * C5095 + C13796 * C5637 +
             C139598 * C5872) *
                C10691) *
               C139463 * C13591 +
           ((C13823 + C13822) * C10840 + (C13996 + C13997) * C139603 -
            (C15654 + C15653) * C10841 - (C15877 + C15878) * C139596 +
            (C19280 + C19279) * C10842 + (C19489 + C19490) * C10691) *
               C139463 * C139587) *
              C139346 * C7396 +
          (((C15653 + C15654) * C10841 -
            ((C13997 + C13996) * C139603 + (C13822 + C13823) * C10840) +
            (C15878 + C15877) * C139596 - (C19279 + C19280) * C10842 -
            (C19490 + C19489) * C10691) *
               C139463 * C13591 +
           ((C15658 + C15657) * C10841 -
            ((C13998 + C13999) * C139603 + (C13827 + C13826) * C10840) +
            (C15879 + C15880) * C139596 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C10842 -
            (C13796 * C5635 + C139598 * C5874 + C13795 * C4833 +
             C13593 * C5097) *
                C10691) *
               C139463 * C139587) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C13591 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                C139587) *
               C13593 +
           ((C22979 + C22980 - C22981 - C22982) * C13591 +
            (C22983 + C22984 - C22985 - C22986) * C139587) *
               C139598) *
              C139603 +
          (((C2286 * C7402 -
             ((C554 * C1707 + C139463 * C2268) * C7396 +
              (C554 * C1700 + C139463 * C2264) * C7401) +
             C2287 * C139308) *
                C13591 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
             C2289 * C139308) *
                C139587) *
               C13593 +
           ((C24155 - (C24156 + C24157) + C24158) * C13591 +
            (C24159 - (C24160 + C24161) + C24162) * C139587) *
               C139598) *
              C139596 +
          ((((C554 * C4656 + C139463 * C5191) * C7401 +
             (C554 * C4663 + C139463 * C5195) * C7396 - C5208 * C7402 -
             C5209 * C139308) *
                C13591 +
            (C5208 * C7401 + C5209 * C7396 - C5210 * C7402 - C5211 * C139308) *
                C139587) *
               C13593 +
           ((C20549 * C7401 + C20550 * C7396 - C19593 * C7402 -
             C19594 * C139308) *
                C13591 +
            (C19593 * C7401 + C19594 * C7396 -
             (C554 * C5469 + C139463 * C5949) * C7402 -
             (C554 * C5472 + C139463 * C5952) * C139308) *
                C139587) *
               C139598) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C13591 +
             (C648 + C664) * C139587) *
                C13593 +
            ((C15026 * C181 + C15138 * C139346) * C13591 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C7396 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
               C139308) *
              C139603 +
          ((((C2371 + C2383) * C13591 + (C2374 + C2384) * C139587) * C13593 +
            ((C16077 + C16078) * C13591 + (C16079 + C16080) * C139587) *
                C139598) *
               C139308 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C13591) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C13591) *
                C13593) *
               C7396) *
              C139596 +
          (((((C554 * C4656 + C139463 * C5191) * C181 +
              (C554 * C4746 + C139463 * C5285) * C139346) *
                 C13591 +
             (C5290 + C5298) * C139587) *
                C13593 +
            ((C20549 * C181 + C20655 * C139346) * C13591 +
             (C19693 + C19697) * C139587) *
                C139598) *
               C7396 -
           ((((C554 * C5555 + C139463 * C6031) * C139346 +
              (C554 * C5469 + C139463 * C5949) * C181) *
                 C139587 +
             (C19697 + C19693) * C13591) *
                C139598 +
            ((C5299 + C5293) * C139587 + (C5298 + C5290) * C13591) * C13593) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C10840 +
             (C554 * C245 + C139463 * C719) * C139603 -
             (C554 * C1700 + C139463 * C2264) * C10841 -
             (C554 * C1879 + C139463 * C2460) * C139596 +
             (C554 * C4656 + C139463 * C5191) * C10842 +
             (C554 * C4831 + C139463 * C5373) * C10691) *
                C13591 +
            (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C139587) *
               C13593 +
           ((C15026 * C10840 + C15243 * C139603 - C18638 * C10841 -
             C18873 * C139596 + C20549 * C10842 + C20763 * C10691) *
                C13591 +
            (C27385 + C27386 - C27387 - C27388 + C27389 + C27390) * C139587) *
               C139598) *
              C139346 * C7396 +
          (((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C13591 +
            (C11308 - (C11307 + C11306) + C11309 - C11310 - C11311) * C139587) *
               C13593 +
           ((C27387 - (C27386 + C27385) + C27388 - C27389 - C27390) * C13591 +
            (C8773 * C10841 - (C1615 * C139603 + C1420 * C10840) +
             C8998 * C139596 - (C554 * C5469 + C139463 * C5949) * C10842 -
             (C554 * C5635 + C139463 * C6108) * C10691) *
                C139587) *
               C139598) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
               C92 -
           (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
               C94 -
           (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139587 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C13593 +
          ((C13595 * C832 + C13591 * C840 + C13596 * C829 + C139587 * C834) *
               C103 +
           (C13595 * C839 + C13591 * C846 + C13596 * C838 + C139587 * C845) *
               C92 -
           (C13596 * C830 + C139587 * C835 + C13595 * C829 + C13591 * C834) *
               C104 -
           (C13596 * C837 + C139587 * C844 + C13595 * C838 + C13591 * C845) *
               C93 +
           (C13595 * C830 + C13591 * C835 + C13596 * C831 + C139587 * C836) *
               C105 +
           (C13595 * C837 + C13591 * C844 + C13596 * C841 + C139587 * C847) *
               C94 -
           (C13596 * C833 + C139587 * C842 + C13595 * C831 + C13591 * C836) *
               C106 -
           (C13596 * C843 + C139587 * C848 + C13595 * C841 + C13591 * C847) *
               C95) *
              C139598) *
         C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139562 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C13593 +
           ((C14328 + C14329) * C137108 + (C14330 + C14331) * C139562 -
            (C14332 + C14333) * C137101 - (C14334 + C14335) * C139308) *
               C139598) *
              C139463 * C139372 * C2565 +
          (((C14333 + C14332) * C137101 -
            ((C14331 + C14330) * C139562 + (C14329 + C14328) * C137108) +
            (C14335 + C14334) * C139308) *
               C13593 +
           ((C16293 + C16294) * C137101 -
            ((C16295 + C16296) * C139562 + (C16297 + C16298) * C137108) +
            (C16299 + C16300) * C139308) *
               C139598) *
              C139463 * C139372 * C2566 +
          (((C16298 + C16297) * C137108 + (C16296 + C16295) * C139562 -
            (C16294 + C16293) * C137101 - (C16300 + C16299) * C139308) *
               C13593 +
           ((C13595 * C3367 + C13591 * C3373 + C13596 * C3366 +
             C139587 * C3372) *
                C137108 +
            (C13595 * C3370 + C13591 * C3376 + C13596 * C3369 +
             C139587 * C3375) *
                C139562 -
            (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
             C13591 * C3372) *
                C137101 -
            (C13596 * C3368 + C139587 * C3374 + C13595 * C3369 +
             C13591 * C3375) *
                C139308) *
               C139598) *
              C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139346) *
               C13593 +
           ((C13595 * C832 + C13591 * C840 + C13596 * C829 + C139587 * C834) *
                C181 +
            (C13595 * C927 + C13591 * C932 + C13596 * C926 + C139587 * C931) *
                C139346) *
               C139598) *
              C139463 * C92 -
          (((C13596 * C925 + C139587 * C930 + C13595 * C926 + C13591 * C931) *
                C139346 +
            (C13596 * C830 + C139587 * C835 + C13595 * C829 + C13591 * C834) *
                C181) *
               C139598 +
           ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                C139346 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C13593) *
              C139463 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139346) *
               C13593 +
           ((C13595 * C830 + C13591 * C835 + C13596 * C831 + C139587 * C836) *
                C181 +
            (C13595 * C925 + C13591 * C930 + C13596 * C928 + C139587 * C933) *
                C139346) *
               C139598) *
              C139463 * C94 -
          (((C13596 * C929 + C139587 * C934 + C13595 * C928 + C13591 * C933) *
                C139346 +
            (C13596 * C833 + C139587 * C842 + C13595 * C831 + C13591 * C836) *
                C181) *
               C139598 +
           ((C13596 * C186 + C139587 * C192 + C13595 * C185 + C13591 * C191) *
                C139346 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C13593) *
              C139463 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C13593 +
           ((C14328 + C14329) * C2660 + (C14451 + C14450) * C2565 -
            (C16297 + C16298) * C2661 - (C16408 + C16407) * C2566 +
            (C13595 * C3367 + C13591 * C3373 + C13596 * C3366 +
             C139587 * C3372) *
                C2662 +
            (C13595 * C3433 + C13591 * C3436 + C13596 * C3432 +
             C139587 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139562 +
          (((C14333 + C14332) * C2661 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C2565 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C2660) +
            (C14452 + C14453) * C2566 - (C16294 + C16293) * C2662 -
            (C16409 + C16410) * C2567) *
               C13593 +
           ((C16293 + C16294) * C2661 -
            ((C14453 + C14452) * C2565 + (C14332 + C14333) * C2660) +
            (C16410 + C16409) * C2566 -
            (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
             C13591 * C3372) *
                C2662 -
            (C13596 * C3431 + C139587 * C3434 + C13595 * C3432 +
             C13591 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C13593 +
           ((C13595 * C832 + C13591 * C840 + C13596 * C829 + C139587 * C834) *
                C244 +
            (C13595 * C1011 + C13591 * C1016 + C13596 * C1010 +
             C139587 * C1015) *
                C139372) *
               C139598) *
              C139463 * C139346 * C92 -
          (((C13596 * C1009 + C139587 * C1014 + C13595 * C1010 +
             C13591 * C1015) *
                C139372 +
            (C13596 * C830 + C139587 * C835 + C13595 * C829 + C13591 * C834) *
                C244) *
               C139598 +
           ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                C139372 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C13593) *
              C139463 * C139346 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139372) *
               C13593 +
           ((C13595 * C830 + C13591 * C835 + C13596 * C831 + C139587 * C836) *
                C244 +
            (C13595 * C1009 + C13591 * C1014 + C13596 * C1012 +
             C139587 * C1017) *
                C139372) *
               C139598) *
              C139463 * C139346 * C94 -
          (((C13596 * C1013 + C139587 * C1018 + C13595 * C1012 +
             C13591 * C1017) *
                C139372 +
            (C13596 * C833 + C139587 * C842 + C13595 * C831 + C13591 * C836) *
                C244) *
               C139598 +
           ((C13596 * C249 + C139587 * C255 + C13595 * C248 + C13591 * C254) *
                C139372 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C13593) *
              C139463 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C13593 +
            ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) *
                C139598) *
               C139463 * C2565 -
           (((C16517 + C16518) * C139372 + (C16297 + C16298) * C244) * C139598 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
               C139463 * C2566 +
           (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C13593 +
            ((C13595 * C3367 + C13591 * C3373 + C13596 * C3366 +
              C139587 * C3372) *
                 C244 +
             (C13595 * C3489 + C13591 * C3492 + C13596 * C3488 +
              C139587 * C3491) *
                 C139372) *
                C139598) *
               C139463 * C2567) *
              C139562 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C13593 +
            ((C16293 + C16294) * C244 + (C16519 + C16520) * C139372) *
                C139598) *
               C139463 * C2566 -
           (((C14569 + C14568) * C139372 + (C14332 + C14333) * C244) * C139598 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139463 * C2565 -
           (((C13596 * C3487 + C139587 * C3490 + C13595 * C3488 +
              C13591 * C3491) *
                 C139372 +
             (C13596 * C3365 + C139587 * C3371 + C13595 * C3366 +
              C13591 * C3372) *
                 C244) *
                C139598 +
            ((C16520 + C16519) * C139372 + (C16294 + C16293) * C244) * C13593) *
               C139463 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C139463 * C13591 +
          ((C13823 + C13822) * C103 + (C13825 + C13824) * C92 -
           (C13827 + C13826) * C104 - (C13829 + C13828) * C93 +
           (C13831 + C13830) * C105 + (C13833 + C13832) * C94 -
           (C13796 * C833 + C139598 * C1097 + C13795 * C111 + C13593 * C312) *
               C106 -
           (C13796 * C843 + C139598 * C1102 + C13795 * C122 + C13593 * C318) *
               C95) *
              C139463 * C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139562 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
               C139463 * C13591 +
           ((C13823 + C13822) * C137108 + (C13825 + C13824) * C139562 -
            (C13827 + C13826) * C137101 - (C13829 + C13828) * C139308) *
               C139463 * C139587) *
              C139372 * C2565 +
          (((C14686 + C14687) * C137101 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139562 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C137108) +
            (C14688 + C14689) * C139308) *
               C139463 * C13591 +
           ((C14691 + C14690) * C137101 -
            ((C14689 + C14688) * C139562 + (C14687 + C14686) * C137108) +
            (C14693 + C14692) * C139308) *
               C139463 * C139587) *
              C139372 * C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C16627 + C16628) * C137101 - (C16629 + C16630) * C139308) *
               C139463 * C13591 +
           ((C16628 + C16627) * C137108 + (C16630 + C16629) * C139562 -
            (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
             C13593 * C2829) *
                C137101 -
            (C13796 * C3368 + C139598 * C3546 + C13795 * C2579 +
             C13593 * C2833) *
                C139308) *
               C139463 * C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139346) *
               C139463 * C13591 +
           ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
               C139587) *
              C92 -
          (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
               C139587 +
           ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
               C13591) *
              C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C139463 *
               C13591 +
           ((C13831 + C13830) * C181 + (C13916 + C13917) * C139346) * C139463 *
               C139587) *
              C94 -
          (((C13796 * C929 + C139598 * C1199 + C13795 * C186 + C13593 * C398) *
                C139346 +
            (C13796 * C833 + C139598 * C1097 + C13795 * C111 + C13593 * C312) *
                C181) *
               C139463 * C139587 +
           ((C13917 + C13916) * C139346 + (C13830 + C13831) * C181) * C139463 *
               C13591) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C13591 +
           ((C13823 + C13822) * C2660 + (C13912 + C13913) * C2565 -
            (C14687 + C14686) * C2661 - (C14800 + C14801) * C2566 +
            (C16628 + C16627) * C2662 + (C16733 + C16734) * C2567) *
               C139463 * C139587) *
              C139562 +
          (((C14686 + C14687) * C2661 -
            ((C13913 + C13912) * C2565 + (C13822 + C13823) * C2660) +
            (C14801 + C14800) * C2566 - (C16627 + C16628) * C2662 -
            (C16734 + C16733) * C2567) *
               C139463 * C13591 +
           ((C14691 + C14690) * C2661 -
            ((C13914 + C13915) * C2565 + (C13827 + C13826) * C2660) +
            (C14802 + C14803) * C2566 -
            (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
             C13593 * C2829) *
                C2662 -
            (C13796 * C3431 + C139598 * C3601 + C13795 * C2665 +
             C13593 * C2923) *
                C2567) *
               C139463 * C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
               C139587) *
              C139346 * C92 -
          (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
               C139587 +
           ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
               C13591) *
              C139346 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C139463 *
               C13591 +
           ((C13831 + C13830) * C244 + (C14000 + C14001) * C139372) * C139463 *
               C139587) *
              C139346 * C94 -
          (((C13796 * C1013 + C139598 * C1303 + C13795 * C249 + C13593 * C478) *
                C139372 +
            (C13796 * C833 + C139598 * C1097 + C13795 * C111 + C13593 * C312) *
                C244) *
               C139463 * C139587 +
           ((C14001 + C14000) * C139372 + (C13830 + C13831) * C244) * C139463 *
               C13591) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
                C139587) *
               C2565 -
           (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
                C139587 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C139463 * C13591) *
               C2566 +
           (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C139463 * C13591 +
            ((C16628 + C16627) * C244 + (C16837 + C16838) * C139372) * C139463 *
                C139587) *
               C2567) *
              C139562 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C139463 *
                C13591 +
            ((C14691 + C14690) * C244 + (C14912 + C14913) * C139372) * C139463 *
                C139587) *
               C2566 -
           (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
                C139587 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
                C13591) *
               C2565 -
           (((C13796 * C3487 + C139598 * C3652 + C13795 * C2747 +
              C13593 * C3019) *
                 C139372 +
             (C13796 * C3365 + C139598 * C3543 + C13795 * C2572 +
              C13593 * C2829) *
                 C244) *
                C139463 * C139587 +
            ((C16838 + C16837) * C139372 + (C16627 + C16628) * C244) * C139463 *
                C13591) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C103 +
            (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C13591 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139587) *
              C13593 +
          (((C554 * C832 + C139463 * C1396) * C103 +
            (C554 * C839 + C139463 * C1400) * C92 - C1418 * C104 - C1419 * C93 +
            C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
               C13591 +
           (C1418 * C103 + C1419 * C92 - C1420 * C104 - C1421 * C93 +
            C1422 * C105 + C1423 * C94 -
            (C554 * C833 + C139463 * C1399) * C106 -
            (C554 * C843 + C139463 * C1404) * C95) *
               C139587) *
              C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C13591 +
            (C584 * C137108 + C585 * C139562 - C586 * C137101 -
             C587 * C139308) *
                C139587) *
               C13593 +
           ((C16937 + C16938 - C16939 - C16940) * C13591 +
            (C16941 + C16942 - C16943 - C16944) * C139587) *
               C139598) *
              C139372 * C2565 +
          (((C16939 - (C16938 + C16937) + C16940) * C13591 +
            (C16943 - (C16942 + C16941) + C16944) * C139587) *
               C13593 +
           ((C16945 - (C16963 + C16964) + C16950) * C13591 +
            (C16951 - (C16952 + C16953) + C16954) * C139587) *
               C139598) *
              C139372 * C2566 +
          (((C16964 + C16963 - C16945 - C16950) * C13591 +
            (C16953 + C16952 - C16951 - C16954) * C139587) *
               C13593 +
           (((C554 * C3367 + C139463 * C3707) * C137108 +
             (C554 * C3370 + C139463 * C3710) * C139562 - C16961 * C137101 -
             C16962 * C139308) *
                C13591 +
            (C16961 * C137108 + C16962 * C139562 -
             (C554 * C3365 + C139463 * C3705) * C137101 -
             (C554 * C3368 + C139463 * C3708) * C139308) *
                C139587) *
               C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C13591 +
            (C648 + C664) * C139587) *
               C13593 +
           (((C554 * C832 + C139463 * C1396) * C181 +
             (C554 * C927 + C139463 * C1497) * C139346) *
                C13591 +
            (C14134 + C14135) * C139587) *
               C139598) *
              C92 -
          (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
               C139598 +
           ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
              C93 +
          ((C668 * C13591 + (C656 + C666) * C139587) * C13593 +
           ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139587) *
               C139598) *
              C94 -
          ((((C554 * C929 + C139463 * C1501) * C139346 +
             (C554 * C833 + C139463 * C1399) * C181) *
                C139587 +
            (C14139 + C14138) * C13591) *
               C139598 +
           ((C667 + C657) * C139587 + C669 * C13591) * C13593) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C13591 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C13593 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             (C554 * C3367 + C139463 * C3707) * C2662 +
             (C554 * C3433 + C139463 * C3761) * C2567) *
                C13591 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139562 +
          (((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C13591 +
            (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C139587) *
               C13593 +
           ((C17067 - (C17066 + C17065) + C17068 - C17069 - C17074) * C13591 +
            (C3124 * C2661 - (C1520 * C2565 + C1420 * C2660) + C3219 * C2566 -
             (C554 * C3365 + C139463 * C3705) * C2662 -
             (C554 * C3431 + C139463 * C3763) * C2567) *
                C139587) *
               C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C13591 +
            (C726 + C742) * C139587) *
               C13593 +
           (((C554 * C832 + C139463 * C1396) * C244 +
             (C554 * C1011 + C139463 * C1602) * C139372) *
                C13591 +
            (C1611 + C1619) * C139587) *
               C139598) *
              C139346 * C92 -
          ((C1621 * C139587 + (C1619 + C1611) * C13591) * C139598 +
           ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
              C139346 * C93 +
          ((C746 * C13591 + (C734 + C744) * C139587) * C13593 +
           ((C1608 + C1618) * C13591 + (C1612 + C1620) * C139587) * C139598) *
              C139346 * C94 -
          ((((C554 * C1013 + C139463 * C1604) * C139372 +
             (C554 * C833 + C139463 * C1399) * C244) *
                C139587 +
            (C1620 + C1612) * C13591) *
               C139598 +
           ((C745 + C735) * C139587 + C747 * C13591) * C13593) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C13591 +
             (C726 + C742) * C139587) *
                C13593 +
            ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
               C2565 -
           ((C17173 * C139587 + (C17183 + C17176) * C13591) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
               C2566 +
           (((C17176 + C17183) * C13591 + C17177 * C139587) * C13593 +
            (((C554 * C3367 + C139463 * C3707) * C244 +
              (C554 * C3489 + C139463 * C3816) * C139372) *
                 C13591 +
             (C17178 + C17184) * C139587) *
                C139598) *
               C2567) *
              C139562 +
          (((C15240 * C13591 + C15242 * C139587) * C13593 +
            (C17177 * C13591 + (C3303 + C3309) * C139587) * C139598) *
               C2566 -
           ((C1621 * C139587 + C15241 * C13591) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
               C2565 -
           ((((C554 * C3487 + C139463 * C3814) * C139372 +
              (C554 * C3365 + C139463 * C3705) * C244) *
                 C139587 +
             (C17184 + C17178) * C13591) *
                C139598 +
            ((C3309 + C3303) * C139587 + C17173 * C13591) * C13593) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C13593 +
           ((C14328 + C14329) * C826 + (C14330 + C14331) * C821 -
            (C14332 + C14333) * C827 - (C14334 + C14335) * C822 +
            (C14336 + C14337) * C828 + (C14338 + C14339) * C823) *
               C139598) *
              C139463 * C139372 * C139570 +
          (((C14333 + C14332) * C827 -
            ((C14331 + C14330) * C821 + (C14329 + C14328) * C826) +
            (C14335 + C14334) * C822 - (C14337 + C14336) * C828 -
            (C14339 + C14338) * C823) *
               C13593 +
           ((C13595 * C2571 + C13591 * C2575 + C13596 * C2572 +
             C139587 * C2576) *
                C827 -
            ((C13596 * C2578 + C139587 * C2583 + C13595 * C2577 +
              C13591 * C2582) *
                 C821 +
             (C13596 * C2571 + C139587 * C2575 + C13595 * C2570 +
              C13591 * C2574) *
                 C826) +
            (C13595 * C2578 + C13591 * C2583 + C13596 * C2579 +
             C139587 * C2584) *
                C822 -
            (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
             C13591 * C2576) *
                C828 -
            (C13596 * C2581 + C139587 * C2585 + C13595 * C2579 +
             C13591 * C2584) *
                C823) *
               C139598) *
              C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C3364 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139303) *
               C13593 +
           ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
               C139598) *
              C139463 * C139372 * C3360 -
          (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) * C139598 +
           ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) * C13593) *
              C139463 * C139372 * C3361 +
          (((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C13593 +
           ((C17267 + C17268) * C3364 + (C17269 + C17270) * C139303) *
               C139598) *
              C139463 * C139372 * C3362 -
          (((C13596 * C17252 + C139587 * C17256 + C13595 * C17253 +
             C13591 * C17257) *
                C139303 +
            (C13596 * C17250 + C139587 * C17254 + C13595 * C17251 +
             C13591 * C17255) *
                C3364) *
               C139598 +
           ((C17270 + C17269) * C139303 + (C17268 + C17267) * C3364) * C13593) *
              C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C923 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139570 -
            (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
               C13593 +
           ((C14328 + C14329) * C923 + (C14451 + C14450) * C139570 -
            (C13596 * C2571 + C139587 * C2575 + C13595 * C2570 +
             C13591 * C2574) *
                C924 -
            (C13596 * C2664 + C139587 * C2668 + C13595 * C2663 +
             C13591 * C2667) *
                C139360) *
               C139598) *
              C139463 * C821 +
          (((C14333 + C14332) * C924 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139570 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C923) +
            (C14452 + C14453) * C139360) *
               C13593 +
           ((C13595 * C2571 + C13591 * C2575 + C13596 * C2572 +
             C139587 * C2576) *
                C924 -
            ((C14453 + C14452) * C139570 + (C14332 + C14333) * C923) +
            (C13595 * C2664 + C13591 * C2668 + C13596 * C2665 +
             C139587 * C2669) *
                C139360) *
               C139598) *
              C139463 * C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C923 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139570 -
            (C14337 + C14336) * C924 - (C14454 + C14455) * C139360) *
               C13593 +
           ((C14336 + C14337) * C923 + (C14455 + C14454) * C139570 -
            (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
             C13591 * C2576) *
                C924 -
            (C13596 * C2666 + C139587 * C2670 + C13595 * C2665 +
             C13591 * C2669) *
                C139360) *
               C139598) *
              C139463 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C3427 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
               C3360 -
           (C14329 + C14328) * C3428 - (C14450 + C14451) * C3361 +
           (C16298 + C16297) * C3429 + (C16407 + C16408) * C3362 -
           (C17268 + C17267) * C3430 - (C17345 + C17346) * C3363) *
              C13593 +
          ((C14328 + C14329) * C3427 + (C14451 + C14450) * C3360 -
           (C16297 + C16298) * C3428 - (C16408 + C16407) * C3361 +
           (C17267 + C17268) * C3429 + (C17346 + C17345) * C3362 -
           (C13596 * C17250 + C139587 * C17254 + C13595 * C17251 +
            C13591 * C17255) *
               C3430 -
           (C13596 * C17336 + C139587 * C17338 + C13595 * C17337 +
            C13591 * C17339) *
               C3363) *
              C139598) *
         C139463 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C13593 +
            ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C13596 * C2746 + C139587 * C2750 + C13595 * C2745 +
              C13591 * C2749) *
                 C139372 +
             (C13596 * C2571 + C139587 * C2575 + C13595 * C2570 +
              C13591 * C2574) *
                 C244) *
                C139598 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
               C139463 * C139360) *
              C821 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C13593 +
            ((C13595 * C2571 + C13591 * C2575 + C13596 * C2572 +
              C139587 * C2576) *
                 C244 +
             (C13595 * C2746 + C13591 * C2750 + C13596 * C2747 +
              C139587 * C2751) *
                 C139372) *
                C139598) *
               C139463 * C139360 -
           (((C14569 + C14568) * C139372 + (C14332 + C14333) * C244) * C139598 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C13593) *
               C139463 * C139570) *
              C822 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                 C139372) *
                C13593 +
            ((C14336 + C14337) * C244 + (C14570 + C14571) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C13596 * C2748 + C139587 * C2752 + C13595 * C2747 +
              C13591 * C2751) *
                 C139372 +
             (C13596 * C2573 + C139587 * C2580 + C13595 * C2572 +
              C13591 * C2576) *
                 C244) *
                C139598 +
            ((C14571 + C14570) * C139372 + (C14337 + C14336) * C244) * C13593) *
               C139463 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C13593 +
           ((C14328 + C14329) * C244 + (C14566 + C14567) * C139372) * C139598) *
              C139463 * C3360 -
          (((C16517 + C16518) * C139372 + (C16297 + C16298) * C244) * C139598 +
           ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C13593) *
              C139463 * C3361 +
          (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C13593 +
           ((C17267 + C17268) * C244 + (C17421 + C17422) * C139372) * C139598) *
              C139463 * C3362 -
          (((C13596 * C17412 + C139587 * C17414 + C13595 * C17413 +
             C13591 * C17415) *
                C139372 +
            (C13596 * C17250 + C139587 * C17254 + C13595 * C17251 +
             C13591 * C17255) *
                C244) *
               C139598 +
           ((C17422 + C17421) * C139372 + (C17268 + C17267) * C244) * C13593) *
              C139463 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C139463 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C822 +
            (C13831 + C13830) * C828 + (C13833 + C13832) * C823) *
               C139463 * C139587) *
              C139372 * C139570 +
          (((C14686 + C14687) * C827 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C821 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C826) +
            (C14688 + C14689) * C822 - (C14690 + C14691) * C828 -
            (C14692 + C14693) * C823) *
               C139463 * C13591 +
           ((C14691 + C14690) * C827 -
            ((C14689 + C14688) * C821 + (C14687 + C14686) * C826) +
            (C14693 + C14692) * C822 -
            (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
             C13593 * C1096) *
                C828 -
            (C13796 * C2581 + C139598 * C2834 + C13795 * C841 +
             C13593 * C1101) *
                C823) *
               C139463 * C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C3364 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139303) *
               C139463 * C13591 +
           ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) * C139463 *
               C139587) *
              C139372 * C3360 -
          (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) * C139463 *
               C139587 +
           ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
             C13593 * C1098) *
                C139303 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C3364) *
               C139463 * C13591) *
              C139372 * C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139303) *
               C139463 * C13591 +
           ((C16628 + C16627) * C3364 + (C16630 + C16629) * C139303) * C139463 *
               C139587) *
              C139372 * C3362 -
          (((C13796 * C17252 + C139598 * C17490 + C13795 * C3369 +
             C13593 * C3547) *
                C139303 +
            (C13796 * C17250 + C139598 * C17488 + C13795 * C3366 +
             C13593 * C3544) *
                C3364) *
               C139463 * C139587 +
           ((C13796 * C17253 + C139598 * C17491 + C13795 * C3370 +
             C13593 * C3548) *
                C139303 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C3364) *
               C139463 * C13591) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C923 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139570 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C924 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C139463 * C13591 +
           ((C13823 + C13822) * C923 + (C13912 + C13913) * C139570 -
            (C14687 + C14686) * C924 - (C14800 + C14801) * C139360) *
               C139463 * C139587) *
              C821 +
          (((C14686 + C14687) * C924 -
            ((C13913 + C13912) * C139570 + (C13822 + C13823) * C923) +
            (C14801 + C14800) * C139360) *
               C139463 * C13591 +
           ((C14691 + C14690) * C924 -
            ((C13914 + C13915) * C139570 + (C13827 + C13826) * C923) +
            (C14802 + C14803) * C139360) *
               C139463 * C139587) *
              C822 +
          (((C13826 + C13827) * C923 + (C13915 + C13914) * C139570 -
            (C14690 + C14691) * C924 - (C14803 + C14802) * C139360) *
               C139463 * C13591 +
           ((C13831 + C13830) * C923 + (C13916 + C13917) * C139570 -
            (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
             C13593 * C1096) *
                C924 -
            (C13796 * C2666 + C139598 * C2924 + C13795 * C928 +
             C13593 * C1198) *
                C139360) *
               C139463 * C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C3427 +
           (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
               C3360 -
           (C13796 * C2570 + C139598 * C2827 + C13795 * C832 + C13593 * C1094) *
               C3428 -
           (C13796 * C2663 + C139598 * C2921 + C13795 * C927 + C13593 * C1195) *
               C3361 +
           (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
            C13593 * C3545) *
               C3430 -
           (C13796 * C17337 + C139598 * C17558 + C13795 * C3433 +
            C13593 * C3599) *
               C3363) *
              C139463 * C13591 +
          ((C13823 + C13822) * C3427 + (C13912 + C13913) * C3360 -
           (C14687 + C14686) * C3428 - (C14800 + C14801) * C3361 +
           (C16628 + C16627) * C3429 + (C16733 + C16734) * C3362 -
           (C13796 * C17250 + C139598 * C17488 + C13795 * C3366 +
            C13593 * C3544) *
               C3430 -
           (C13796 * C17336 + C139598 * C17559 + C13795 * C3432 +
            C13593 * C3600) *
               C3363) *
              C139463 * C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C13591 +
            ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
                C139587 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C139463 * C13591) *
               C139360) *
              C821 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C139463 *
                C13591 +
            ((C14691 + C14690) * C244 + (C14912 + C14913) * C139372) * C139463 *
                C139587) *
               C139360 -
           (((C13998 + C13999) * C139372 + (C13827 + C13826) * C244) * C139463 *
                C139587 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C139463 *
                C13591) *
               C139570) *
              C822 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C139463 *
                C13591 +
            ((C13831 + C13830) * C244 + (C14000 + C14001) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C13796 * C2748 + C139598 * C3020 + C13795 * C1012 +
              C13593 * C1302) *
                 C139372 +
             (C13796 * C2573 + C139598 * C2830 + C13795 * C831 +
              C13593 * C1096) *
                 C244) *
                C139463 * C139587 +
            ((C14913 + C14912) * C139372 + (C14690 + C14691) * C244) * C139463 *
                C13591) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C13591 +
           ((C13823 + C13822) * C244 + (C13996 + C13997) * C139372) * C139463 *
               C139587) *
              C3360 -
          (((C14910 + C14911) * C139372 + (C14687 + C14686) * C244) * C139463 *
               C139587 +
           ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
             C13593 * C1301) *
                C139372 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C244) *
               C139463 * C13591) *
              C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C244 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139372) *
               C139463 * C13591 +
           ((C16628 + C16627) * C244 + (C16837 + C16838) * C139372) * C139463 *
               C139587) *
              C3362 -
          (((C13796 * C17412 + C139598 * C17626 + C13795 * C3488 +
             C13593 * C3653) *
                C139372 +
            (C13796 * C17250 + C139598 * C17488 + C13795 * C3366 +
             C13593 * C3544) *
                C244) *
               C139463 * C139587 +
           ((C13796 * C17413 + C139598 * C17627 + C13795 * C3489 +
             C13593 * C3654) *
                C139372 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C244) *
               C139463 * C13591) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C13593 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C13591 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139372 * C139570 +
          (((C15016 - (C15029 + C15028) + C15017 - C15018 - C15019) * C13591 +
            (C15022 - (C15021 + C15020) + C15023 - C15024 - C15025) * C139587) *
               C13593 +
           ((C3122 * C827 -
             ((C554 * C2577 + C139463 * C3109) * C821 +
              (C554 * C2570 + C139463 * C3105) * C826) +
             C3123 * C822 - C3124 * C828 - C3125 * C823) *
                C13591 +
            (C3124 * C827 - (C3123 * C821 + C3122 * C826) + C3125 * C822 -
             (C554 * C2573 + C139463 * C3108) * C828 -
             (C554 * C2581 + C139463 * C3112) * C823) *
                C139587) *
               C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C13591 +
            (C584 * C3364 + C585 * C139303) * C139587) *
               C13593 +
           ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
               C139598) *
              C139372 * C3360 -
          (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
               C139598 +
           ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
               C13593) *
              C139372 * C3361 +
          (((C17706 + C17705) * C13591 + (C17704 + C17703) * C139587) * C13593 +
           ((C17715 + C17716) * C13591 + (C17711 + C17712) * C139587) *
               C139598) *
              C139372 * C3362 -
          ((((C554 * C17252 + C139463 * C17696) * C139303 +
             (C554 * C17250 + C139463 * C17694) * C3364) *
                C139587 +
            ((C554 * C17253 + C139463 * C17697) * C139303 +
             (C554 * C17251 + C139463 * C17695) * C3364) *
                C13591) *
               C139598 +
           ((C17712 + C17711) * C139587 + (C17716 + C17715) * C13591) *
               C13593) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C923 +
             (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
             C15138 * C139360) *
                C13591 +
            (C1503 + C1504 - C1505 - C1522) * C139587) *
               C13593 +
           ((C15026 * C923 + C15138 * C139570 -
             (C554 * C2570 + C139463 * C3105) * C924 -
             (C554 * C2663 + C139463 * C3199) * C139360) *
                C13591 +
            (C15130 + C15131 - C15132 - C15133) * C139587) *
               C139598) *
              C821 +
          (((C1505 - (C1504 + C1503) + C1522) * C13591 +
            (C1510 - (C1509 + C1508) + C1524) * C139587) *
               C13593 +
           ((C15132 - (C15131 + C15130) + C15133) * C13591 +
            (C15134 - (C15135 + C15136) + C15137) * C139587) *
               C139598) *
              C822 +
          ((C1526 * C13591 + (C1515 + C1514 - C1513 - C1525) * C139587) *
               C13593 +
           ((C15136 + C15135 - C15134 - C15137) * C13591 +
            (C1422 * C923 + C1521 * C139570 -
             (C554 * C2573 + C139463 * C3108) * C924 -
             (C554 * C2666 + C139463 * C3202) * C139360) *
                C139587) *
               C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C3427 +
            (C554 * C182 + C139463 * C641) * C3360 - C15026 * C3428 -
            C15138 * C3361 + C16960 * C3429 + C17072 * C3362 - C17713 * C3430 -
            C17787 * C3363) *
               C13591 +
           (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
            C3122 * C3429 + C3218 * C3362 - C16961 * C3430 - C17073 * C3363) *
               C139587) *
              C13593 +
          ((C15026 * C3427 + C15138 * C3360 - C16960 * C3428 - C17072 * C3361 +
            C17713 * C3429 + C17787 * C3362 -
            (C554 * C17251 + C139463 * C17695) * C3430 -
            (C554 * C17337 + C139463 * C17782) * C3363) *
               C13591 +
           (C1418 * C3427 + C1518 * C3360 - C3122 * C3428 - C3218 * C3361 +
            C16961 * C3429 + C17073 * C3362 -
            (C554 * C17250 + C139463 * C17694) * C3430 -
            (C554 * C17336 + C139463 * C17783) * C3363) *
               C139587) *
              C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C13591 +
             (C726 + C742) * C139587) *
                C13593 +
            ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
               C139570 -
           (((C3308 + C3300) * C139587 +
             ((C554 * C2745 + C139463 * C3295) * C139372 +
              (C554 * C2570 + C139463 * C3105) * C244) *
                 C13591) *
                C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
               C139360) *
              C821 +
          (((C15240 * C13591 + C15242 * C139587) * C13593 +
            ((C3300 + C3308) * C13591 + (C3303 + C3309) * C139587) * C139598) *
               C139360 -
           ((C1621 * C139587 + C15241 * C13591) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C13591) * C13593) *
               C139570) *
              C822 +
          (((C746 * C13591 + (C734 + C744) * C139587) * C13593 +
            (C15242 * C13591 + (C1612 + C1620) * C139587) * C139598) *
               C139570 -
           ((((C554 * C2748 + C139463 * C3298) * C139372 +
              (C554 * C2573 + C139463 * C3108) * C244) *
                 C139587 +
             (C3309 + C3303) * C13591) *
                C139598 +
            ((C1620 + C1612) * C139587 + C1621 * C13591) * C13593) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C13591 +
            (C726 + C742) * C139587) *
               C13593 +
           ((C15237 + C15244) * C13591 + C15240 * C139587) * C139598) *
              C3360 -
          ((C17173 * C139587 + (C17183 + C17176) * C13591) * C139598 +
           (C15241 * C139587 + (C15244 + C15237) * C13591) * C13593) *
              C3361 +
          (((C17176 + C17183) * C13591 + C17177 * C139587) * C13593 +
           ((C17856 + C17860) * C13591 + (C17178 + C17184) * C139587) *
               C139598) *
              C3362 -
          ((((C554 * C17412 + C139463 * C17853) * C139372 +
             (C554 * C17250 + C139463 * C17694) * C244) *
                C139587 +
            ((C554 * C17413 + C139463 * C17854) * C139372 +
             (C554 * C17251 + C139463 * C17695) * C244) *
                C13591) *
               C139598 +
           ((C17184 + C17178) * C139587 + (C17860 + C17856) * C13591) *
               C13593) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C13593 +
           ((C14328 + C14329) * C826 + (C14330 + C14331) * C821 -
            (C14332 + C14333) * C827 - (C14334 + C14335) * C822 +
            (C14336 + C14337) * C828 + (C14338 + C14339) * C823) *
               C139598) *
              C139463 * C139571 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C827 -
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C821 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C826) +
            (C13595 * C1706 + C13591 * C1713 + C13596 * C1705 +
             C139587 * C1712) *
                C822 -
            (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
             C13591 * C1703) *
                C828 -
            (C13596 * C1709 + C139587 * C1715 + C13595 * C1705 +
             C13591 * C1712) *
                C823) *
               C13593 +
           ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
             C139587 * C3899) *
                C827 -
            ((C13596 * C3901 + C139587 * C3910 + C13595 * C3900 +
              C13591 * C3909) *
                 C821 +
             (C13596 * C3892 + C139587 * C3898 + C13595 * C3891 +
              C13591 * C3897) *
                 C826) +
            (C13595 * C3901 + C13591 * C3910 + C13596 * C3902 +
             C139587 * C3911) *
                C822 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C828 -
            (C13596 * C8122 + C139587 * C8123 + C13595 * C3902 +
             C13591 * C3911) *
                C823) *
               C139598) *
              C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C13593 +
            ((C14328 + C14329) * C3364 + (C14330 + C14331) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139598 +
            ((C13596 * C1706 + C139587 * C1713 + C13595 * C1707 +
              C13591 * C1714) *
                 C139303 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C3364) *
                C13593) *
               C139463 * C139384) *
              C2565 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) * C13593 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139598) *
               C139463 * C139384 -
           (((C16295 + C16296) * C139303 + (C16297 + C16298) * C3364) *
                C139598 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C13593) *
               C139463 * C139571) *
              C2566 +
          ((((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C13593 +
            ((C17267 + C17268) * C3364 + (C17269 + C17270) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C13596 * C17960 + C139587 * C17964 + C13595 * C17961 +
              C13591 * C17965) *
                 C139303 +
             (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
              C13591 * C17963) *
                 C3364) *
                C139598 +
            ((C17990 + C17989) * C139303 + (C17988 + C17987) * C3364) *
                C13593) *
               C139463 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C13593 +
            ((C14328 + C14329) * C181 + (C14451 + C14450) * C139346) *
                C139598) *
               C139463 * C821 -
           (((C14453 + C14452) * C139346 + (C14332 + C14333) * C181) * C139598 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C13593) *
               C139463 * C822 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                 C139346) *
                C13593 +
            ((C14336 + C14337) * C181 + (C14455 + C14454) * C139346) *
                C139598) *
               C139463 * C823) *
              C139571 +
          ((((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C13595 * C1791 + C13591 * C1796 + C13596 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C13593 +
            ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
              C139587 * C3899) *
                 C181 +
             (C13595 * C3990 + C13591 * C3996 + C13596 * C3991 +
              C139587 * C3997) *
                 C139346) *
                C139598) *
               C139463 * C822 -
           (((C13596 * C3990 + C139587 * C3996 + C13595 * C3989 +
              C13591 * C3995) *
                 C139346 +
             (C13596 * C3892 + C139587 * C3898 + C13595 * C3891 +
              C13591 * C3897) *
                 C181) *
                C139598 +
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C139346 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C181) *
                C13593) *
               C139463 * C821 -
           (((C13596 * C8222 + C139587 * C8223 + C13595 * C3991 +
              C13591 * C3997) *
                 C139346 +
             (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
              C13591 * C3899) *
                 C181) *
                C139598 +
            ((C13596 * C1793 + C139587 * C1798 + C13595 * C1792 +
              C13591 * C1797) *
                 C139346 +
             (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
              C13591 * C1703) *
                 C181) *
                C13593) *
               C139463 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C13593 +
           ((C14328 + C14329) * C2660 + (C14451 + C14450) * C2565 -
            (C16297 + C16298) * C2661 - (C16408 + C16407) * C2566 +
            (C17267 + C17268) * C2662 + (C17346 + C17345) * C2567) *
               C139598) *
              C139463 * C139303 * C139571 +
          (((C17986 + C17985) * C2661 -
            ((C13596 * C1791 + C139587 * C1796 + C13595 * C1794 +
              C13591 * C1799) *
                 C2565 +
             (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
              C13591 * C1708) *
                 C2660) +
            (C18101 + C18102) * C2566 - (C17988 + C17987) * C2662 -
            (C18103 + C18104) * C2567) *
               C13593 +
           ((C17987 + C17988) * C2661 -
            ((C18102 + C18101) * C2565 + (C17985 + C17986) * C2660) +
            (C18104 + C18103) * C2566 -
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C2662 -
            (C13596 * C18088 + C139587 * C18090 + C13595 * C18089 +
             C13591 * C18091) *
                C2567) *
               C139598) *
              C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C1876 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139384) *
               C13593 +
           ((C14328 + C14329) * C1875 + (C14566 + C14567) * C139571 -
            (C13596 * C3892 + C139587 * C3898 + C13595 * C3891 +
             C13591 * C3897) *
                C1876 -
            (C13596 * C4076 + C139587 * C4082 + C13595 * C4075 +
             C13591 * C4081) *
                C139384) *
               C139598) *
              C139463 * C139346 * C821 +
          (((C13595 * C1697 + C13591 * C1702 + C13596 * C1698 +
             C139587 * C1703) *
                C1876 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139571 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C1875) +
            (C13595 * C1878 + C13591 * C1883 + C13596 * C1877 +
             C139587 * C1882) *
                C139384) *
               C13593 +
           ((C13595 * C3892 + C13591 * C3898 + C13596 * C3893 +
             C139587 * C3899) *
                C1876 -
            ((C14569 + C14568) * C139571 + (C14332 + C14333) * C1875) +
            (C13595 * C4076 + C13591 * C4082 + C13596 * C4077 +
             C139587 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C1875 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139571 -
            (C13596 * C1699 + C139587 * C1704 + C13595 * C1698 +
             C13591 * C1703) *
                C1876 -
            (C13596 * C1880 + C139587 * C1885 + C13595 * C1877 +
             C13591 * C1882) *
                C139384) *
               C13593 +
           ((C14336 + C14337) * C1875 + (C14570 + C14571) * C139571 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C1876 -
            (C13596 * C8322 + C139587 * C8323 + C13595 * C4077 +
             C13591 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C13596 * C1697 + C139587 * C1702 + C13595 * C1700 +
             C13591 * C1708) *
                C1876 -
            (C13596 * C1878 + C139587 * C1883 + C13595 * C1879 +
             C13591 * C1884) *
                C139384) *
               C13593 +
           ((C14328 + C14329) * C1875 + (C14566 + C14567) * C139571 -
            (C17985 + C17986) * C1876 - (C18215 + C18216) * C139384) *
               C139598) *
              C139463 * C2565 +
          (((C17986 + C17985) * C1876 -
            ((C14567 + C14566) * C139571 + (C14329 + C14328) * C1875) +
            (C18216 + C18215) * C139384) *
               C13593 +
           ((C17987 + C17988) * C1876 -
            ((C16517 + C16518) * C139571 + (C16297 + C16298) * C1875) +
            (C18217 + C18218) * C139384) *
               C139598) *
              C139463 * C2566 +
          (((C16298 + C16297) * C1875 + (C16518 + C16517) * C139571 -
            (C17988 + C17987) * C1876 - (C18218 + C18217) * C139384) *
               C13593 +
           ((C17267 + C17268) * C1875 + (C17421 + C17422) * C139571 -
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C1876 -
            (C13596 * C18202 + C139587 * C18204 + C13595 * C18203 +
             C13591 * C18205) *
                C139384) *
               C139598) *
              C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C139463 * C13591 +
           ((C13823 + C13822) * C826 + (C13825 + C13824) * C821 -
            (C13827 + C13826) * C827 - (C13829 + C13828) * C822 +
            (C13831 + C13830) * C828 + (C13833 + C13832) * C823) *
               C139463 * C139587) *
              C139571 +
          (((C15653 + C15654) * C827 -
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C821 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C826) +
            (C15655 + C15656) * C822 - (C15657 + C15658) * C828 -
            (C15659 + C15660) * C823) *
               C139463 * C13591 +
           ((C15658 + C15657) * C827 -
            ((C15656 + C15655) * C821 + (C15654 + C15653) * C826) +
            (C15660 + C15659) * C822 -
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C828 -
            (C13796 * C8122 + C139598 * C8423 + C13795 * C1709 +
             C13593 * C1969) *
                C823) *
               C139463 * C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C13591 +
            ((C13823 + C13822) * C3364 + (C13825 + C13824) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C15656 + C15655) * C139303 + (C15654 + C15653) * C3364) *
                C139463 * C139587 +
            ((C13796 * C3900 + C139598 * C4167 + C13795 * C1707 +
              C13593 * C1966) *
                 C139303 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C3364) *
                C139463 * C13591) *
               C139384) *
              C2565 +
          ((((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C13795 * C3900 + C13593 * C4167 + C13796 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C13591 +
            ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
              C139598 * C4165) *
                 C3364 +
             (C13795 * C3901 + C13593 * C4168 + C13796 * C3904 +
              C139598 * C4171) *
                 C139303) *
                C139463 * C139587) *
               C139384 -
           (((C14689 + C14688) * C139303 + (C14687 + C14686) * C3364) *
                C139463 * C139587 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C139463 * C13591) *
               C139571) *
              C2566 +
          ((((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C139463 * C13591 +
            ((C16628 + C16627) * C3364 + (C16630 + C16629) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C13796 * C17960 + C139598 * C18318 + C13795 * C3904 +
              C13593 * C4171) *
                 C139303 +
             (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
              C13593 * C4165) *
                 C3364) *
                C139463 * C139587 +
            ((C13796 * C17961 + C139598 * C18319 + C13795 * C3905 +
              C13593 * C4172) *
                 C139303 +
             (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
              C13593 * C4166) *
                 C3364) *
                C139463 * C13591) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C13591 +
            ((C13823 + C13822) * C181 + (C13912 + C13913) * C139346) * C139463 *
                C139587) *
               C821 -
           (((C13914 + C13915) * C139346 + (C13827 + C13826) * C181) * C139463 *
                C139587 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C139463 *
                C13591) *
               C822 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C139463 *
                C13591 +
            ((C13831 + C13830) * C181 + (C13916 + C13917) * C139346) * C139463 *
                C139587) *
               C823) *
              C139571 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C139463 *
                C13591 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139463 *
                C139587) *
               C822 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139463 *
                C139587 +
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C139346 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C181) *
                C139463 * C13591) *
               C821 -
           (((C13796 * C8222 + C139598 * C8534 + C13795 * C1793 +
              C13593 * C2065) *
                 C139346 +
             (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
              C13593 * C1964) *
                 C181) *
                C139463 * C139587 +
            ((C15770 + C15769) * C139346 + (C15657 + C15658) * C181) * C139463 *
                C13591) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C13591 +
           ((C13823 + C13822) * C2660 + (C13912 + C13913) * C2565 -
            (C14687 + C14686) * C2661 - (C14800 + C14801) * C2566 +
            (C16628 + C16627) * C2662 + (C16733 + C16734) * C2567) *
               C139463 * C139587) *
              C139303 * C139571 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C2661 -
            ((C13796 * C3989 + C139598 * C4247 + C13795 * C1794 +
              C13593 * C2066) *
                 C2565 +
             (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
              C13593 * C1962) *
                 C2660) +
            (C13795 * C3989 + C13593 * C4247 + C13796 * C3994 +
             C139598 * C4248) *
                C2566 -
            (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
             C13593 * C4166) *
                C2662 -
            (C13796 * C18089 + C139598 * C18418 + C13795 * C3994 +
             C13593 * C4248) *
                C2567) *
               C139463 * C13591 +
           ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
             C139598 * C4165) *
                C2661 -
            ((C15768 + C15767) * C2565 + (C15654 + C15653) * C2660) +
            (C13795 * C3990 + C13593 * C4249 + C13796 * C3993 +
             C139598 * C4250) *
                C2566 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C2662 -
            (C13796 * C18088 + C139598 * C18419 + C13795 * C3993 +
             C13593 * C4250) *
                C2567) *
               C139463 * C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C1876 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139384) *
               C139463 * C13591 +
           ((C13823 + C13822) * C1875 + (C13996 + C13997) * C139571 -
            (C15654 + C15653) * C1876 - (C15877 + C15878) * C139384) *
               C139463 * C139587) *
              C139346 * C821 +
          (((C15653 + C15654) * C1876 -
            ((C13997 + C13996) * C139571 + (C13822 + C13823) * C1875) +
            (C15878 + C15877) * C139384) *
               C139463 * C13591 +
           ((C15658 + C15657) * C1876 -
            ((C13998 + C13999) * C139571 + (C13827 + C13826) * C1875) +
            (C15879 + C15880) * C139384) *
               C139463 * C139587) *
              C139346 * C822 +
          (((C13826 + C13827) * C1875 + (C13999 + C13998) * C139571 -
            (C15657 + C15658) * C1876 - (C15880 + C15879) * C139384) *
               C139463 * C13591 +
           ((C13831 + C13830) * C1875 + (C14000 + C14001) * C139571 -
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C1876 -
            (C13796 * C8322 + C139598 * C8647 + C13795 * C1880 +
             C13593 * C2162) *
                C139384) *
               C139463 * C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C13796 * C3891 + C139598 * C4161 + C13795 * C1700 +
             C13593 * C1962) *
                C1876 -
            (C13796 * C4075 + C139598 * C4327 + C13795 * C1879 +
             C13593 * C2159) *
                C139384) *
               C139463 * C13591 +
           ((C13823 + C13822) * C1875 + (C13996 + C13997) * C139571 -
            (C15654 + C15653) * C1876 - (C15877 + C15878) * C139384) *
               C139463 * C139587) *
              C2565 +
          (((C13795 * C3891 + C13593 * C4161 + C13796 * C3896 +
             C139598 * C4166) *
                C1876 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139571 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C1875) +
            (C13795 * C4075 + C13593 * C4327 + C13796 * C4080 +
             C139598 * C4330) *
                C139384) *
               C139463 * C13591 +
           ((C13795 * C3892 + C13593 * C4162 + C13796 * C3895 +
             C139598 * C4165) *
                C1876 -
            ((C14910 + C14911) * C139571 + (C14687 + C14686) * C1875) +
            (C13795 * C4076 + C13593 * C4328 + C13796 * C4079 +
             C139598 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C13796 * C17959 + C139598 * C18317 + C13795 * C3896 +
             C13593 * C4166) *
                C1876 -
            (C13796 * C18203 + C139598 * C18518 + C13795 * C4080 +
             C13593 * C4330) *
                C139384) *
               C139463 * C13591 +
           ((C16628 + C16627) * C1875 + (C16837 + C16838) * C139571 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C1876 -
            (C13796 * C18202 + C139598 * C18519 + C13795 * C4079 +
             C13593 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C13591 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C13593 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C13591 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139571 +
          (((C2286 * C827 -
             ((C554 * C1707 + C139463 * C2268) * C821 +
              (C554 * C1700 + C139463 * C2264) * C826) +
             C2287 * C822 - C2288 * C828 - C2289 * C823) *
                C13591 +
            (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
             C2290 * C828 - C2291 * C823) *
                C139587) *
               C13593 +
           ((C8771 * C827 -
             ((C554 * C3900 + C139463 * C4413) * C821 +
              (C554 * C3891 + C139463 * C4407) * C826) +
             C8772 * C822 - C8773 * C828 - C8774 * C823) *
                C13591 +
            (C8773 * C827 - (C8772 * C821 + C8771 * C826) + C8774 * C822 -
             (C554 * C8120 + C139463 * C8760) * C828 -
             (C554 * C8122 + C139463 * C8761) * C823) *
                C139587) *
               C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C13591 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C13593 +
            ((C17699 + C17700) * C13591 + (C17701 + C17702) * C139587) *
                C139598) *
               C139571 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C13591) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C13591) *
                C13593) *
               C139384) *
              C2565 +
          ((((C18644 + C18643) * C13591 + (C18624 + C18623) * C139587) *
                C13593 +
            ((C18645 + C18646) * C13591 + (C18647 + C18648) * C139587) *
                C139598) *
               C139384 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C13591) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C13591) *
                C13593) *
               C139571) *
              C2566 +
          ((((C17706 + C17705) * C13591 + (C17704 + C17703) * C139587) *
                C13593 +
            ((C17715 + C17716) * C13591 + (C17711 + C17712) * C139587) *
                C139598) *
               C139571 -
           ((((C554 * C17960 + C139463 * C18620) * C139303 +
              (C554 * C17958 + C139463 * C18618) * C3364) *
                 C139587 +
             ((C554 * C17961 + C139463 * C18621) * C139303 +
              (C554 * C17959 + C139463 * C18619) * C3364) *
                 C13591) *
                C139598 +
            ((C18648 + C18647) * C139587 + (C18646 + C18645) * C13591) *
                C13593) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C13591 +
             (C648 + C664) * C139587) *
                C13593 +
            ((C15026 * C181 + C15138 * C139346) * C13591 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C821 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C13591) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C13591) * C13593) *
               C822 +
           ((C668 * C13591 + (C656 + C666) * C139587) * C13593 +
            ((C14137 + C14136) * C13591 + (C14138 + C14139) * C139587) *
                C139598) *
               C823) *
              C139571 +
          ((((C2371 + C2383) * C13591 + (C2374 + C2384) * C139587) * C13593 +
            ((C16077 + C16078) * C13591 + (C16079 + C16080) * C139587) *
                C139598) *
               C822 -
           (((C16078 + C16077) * C139587 +
             ((C554 * C3989 + C139463 * C4493) * C139346 +
              (C554 * C3891 + C139463 * C4407) * C181) *
                 C13591) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C13591) *
                C13593) *
               C821 -
           ((((C554 * C8222 + C139463 * C8872) * C139346 +
              (C554 * C8120 + C139463 * C8760) * C181) *
                 C139587 +
             (C16080 + C16079) * C13591) *
                C139598 +
            ((C2385 + C2377) * C139587 + C2386 * C13591) * C13593) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C13591 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C13593 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             C17713 * C2662 + C17787 * C2567) *
                C13591 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139303 * C139571 +
          (((C18638 * C2661 -
             ((C554 * C1794 + C139463 * C2368) * C2565 +
              (C554 * C1700 + C139463 * C2264) * C2660) +
             C18755 * C2566 - C18639 * C2662 - C18756 * C2567) *
                C13591 +
            (C8771 * C2661 - (C2380 * C2565 + C2286 * C2660) + C8884 * C2566 -
             C18641 * C2662 - C18757 * C2567) *
                C139587) *
               C13593 +
           ((C18639 * C2661 - (C18755 * C2565 + C18638 * C2660) +
             C18756 * C2566 - (C554 * C17959 + C139463 * C18619) * C2662 -
             (C554 * C18089 + C139463 * C18746) * C2567) *
                C13591 +
            (C18641 * C2661 - (C8884 * C2565 + C8771 * C2660) + C18757 * C2566 -
             (C554 * C17958 + C139463 * C18618) * C2662 -
             (C554 * C18088 + C139463 * C18747) * C2567) *
                C139587) *
               C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C13591 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C13593 +
           ((C15026 * C1875 + C15243 * C139571 -
             (C554 * C3891 + C139463 * C4407) * C1876 -
             (C554 * C4075 + C139463 * C4573) * C139384) *
                C13591 +
            (C8989 + C8988 - C8987 - C8999) * C139587) *
               C139598) *
              C139346 * C821 +
          (((C2468 - (C2467 + C2466) + C2485) * C13591 +
            (C2473 - (C2472 + C2471) + C2487) * C139587) *
               C13593 +
           ((C8987 - (C8988 + C8989) + C8999) * C13591 +
            (C8992 - (C8993 + C8994) + C9000) * C139587) *
               C139598) *
              C139346 * C822 +
          ((C2489 * C13591 + (C2478 + C2477 - C2476 - C2488) * C139587) *
               C13593 +
           ((C8994 + C8993 - C8992 - C9000) * C13591 +
            (C1422 * C1875 + C1617 * C139571 -
             (C554 * C8120 + C139463 * C8760) * C1876 -
             (C554 * C8322 + C139463 * C8985) * C139384) *
                C139587) *
               C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C13591 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C13593 +
           ((C18858 + C18859 - C18860 - C18876) * C13591 +
            (C8989 + C8988 - C8987 - C8999) * C139587) *
               C139598) *
              C2565 +
          (((C18860 - (C18859 + C18858) + C18876) * C13591 +
            (C8987 - (C8988 + C8989) + C8999) * C139587) *
               C13593 +
           ((C18863 - (C18864 + C18865) + C18877) * C13591 +
            (C18868 - (C18869 + C18870) + C18878) * C139587) *
               C139598) *
              C2566 +
          (((C18865 + C18864 - C18863 - C18877) * C13591 +
            (C18870 + C18869 - C18868 - C18878) * C139587) *
               C13593 +
           ((C17713 * C1875 + C17859 * C139571 -
             (C554 * C17959 + C139463 * C18619) * C1876 -
             (C554 * C18203 + C139463 * C18855) * C139384) *
                C13591 +
            (C16961 * C1875 + C17182 * C139571 -
             (C554 * C17958 + C139463 * C18618) * C1876 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139587) *
               C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6694 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139601 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C6695 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C6696 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C6691) *
               C139448 * C30408 +
           ((C32075 + C32076) * C6694 + (C32077 + C32078) * C139601 -
            (C32079 + C32080) * C6695 - (C32081 + C32082) * C139590 +
            (C32083 + C32084) * C6696 + (C32085 + C32086) * C6691) *
               C139448 * C139600) *
              C139372 * C6692 +
          (((C14333 + C14332) * C6695 -
            ((C14331 + C14330) * C139601 + (C14329 + C14328) * C6694) +
            (C14335 + C14334) * C139590 - (C14337 + C14336) * C6696 -
            (C14339 + C14338) * C6691) *
               C139448 * C30408 +
           ((C23335 + C23336) * C6695 -
            ((C17983 + C17984) * C139601 + (C17985 + C17986) * C6694) +
            (C23337 + C23338) * C139590 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C6696 -
            (C13596 * C8122 + C139587 * C8123 + C13595 * C3902 +
             C13591 * C3911) *
                C6691) *
               C139448 * C139600) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6771 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C6692 -
            (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
               C139448 * C30408 +
           ((C32075 + C32076) * C6771 + (C32197 + C32198) * C6692 -
            (C17985 + C17986) * C6772 - (C18102 + C18101) * C139360) *
               C139448 * C139600) *
              C139601 +
          (((C14333 + C14332) * C6772 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C6692 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C6771) +
            (C14452 + C14453) * C139360) *
               C139448 * C30408 +
           ((C23335 + C23336) * C6772 -
            ((C32199 + C32200) * C6692 + (C32079 + C32080) * C6771) +
            (C23474 + C23473) * C139360) *
               C139448 * C139600) *
              C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C6771 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C6692 -
            (C14337 + C14336) * C6772 - (C14454 + C14455) * C139360) *
               C139448 * C30408 +
           ((C32083 + C32084) * C6771 + (C32201 + C32202) * C6692 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C6772 -
            (C13596 * C8222 + C139587 * C8223 + C13595 * C3991 +
             C13591 * C3997) *
                C139360) *
               C139448 * C139600) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C30408 +
            ((C32075 + C32076) * C244 + (C32314 + C32313) * C139372) * C139448 *
                C139600) *
               C6692 -
           (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
                C139600 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
                C30408) *
               C139360) *
              C139601 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C139448 *
                C30408 +
            ((C23335 + C23336) * C244 + (C23609 + C23610) * C139372) * C139448 *
                C139600) *
               C139360 -
           (((C32316 + C32315) * C139372 + (C32079 + C32080) * C244) * C139448 *
                C139600 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139448 * C30408) *
               C6692) *
              C139590 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                 C139372) *
                C139448 * C30408 +
            ((C32083 + C32084) * C244 + (C32318 + C32317) * C139372) * C139448 *
                C139600) *
               C6692 -
           (((C13596 * C8322 + C139587 * C8323 + C13595 * C4077 +
              C13591 * C4083) *
                 C139372 +
             (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
              C13591 * C3899) *
                 C244) *
                C139448 * C139600 +
            ((C14571 + C14570) * C139372 + (C14337 + C14336) * C244) * C139448 *
                C30408) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6694 +
             (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
             C338 * C139590 + C339 * C6696 + C340 * C6691) *
                C30408 +
            (C32431 * C6694 + C32432 * C139601 - C1984 * C6695 -
             C1985 * C139590 + C1986 * C6696 + C1987 * C6691) *
                C139600) *
               C13591 +
           ((C337 * C6694 + C338 * C139601 - C339 * C6695 - C340 * C139590 +
             C341 * C6696 + C342 * C6691) *
                C30408 +
            (C1984 * C6694 + C1985 * C139601 - C1986 * C6695 - C1987 * C139590 +
             C1988 * C6696 + C1989 * C6691) *
                C139600) *
               C139587) *
              C139372 * C6692 +
          (((C1116 * C6695 -
             ((C307 * C839 + C139448 * C1098) * C139601 +
              (C307 * C832 + C139448 * C1094) * C6694) +
             C1117 * C139590 - C1118 * C6696 - C1119 * C6691) *
                C30408 +
            (C8433 * C6695 - (C34921 * C139601 + C34920 * C6694) +
             C8434 * C139590 - C8435 * C6696 - C8436 * C6691) *
                C139600) *
               C13591 +
           ((C1118 * C6695 - (C1117 * C139601 + C1116 * C6694) +
             C1119 * C139590 - C1120 * C6696 - C1121 * C6691) *
                C30408 +
            (C8435 * C6695 - (C8434 * C139601 + C8433 * C6694) +
             C8436 * C139590 - (C307 * C8120 + C139448 * C8422) * C6696 -
             (C307 * C8122 + C139448 * C8423) * C6691) *
                C139600) *
               C139587) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C30408 +
            (C32431 * C6771 + C32539 * C6692 - C34920 * C6772 -
             C35034 * C139360) *
                C139600) *
               C13591 +
           ((C6996 + C6997 - C6998 - C6999) * C30408 +
            (C8538 + C8537 - C8536 - C8548) * C139600) *
               C139587) *
              C139601 +
          (((C6998 - (C6997 + C6996) + C6999) * C30408 +
            (C8536 - (C8537 + C8538) + C8548) * C139600) *
               C13591 +
           ((C7002 - (C7001 + C7000) + C7003) * C30408 +
            (C8541 - (C8542 + C8543) + C8549) * C139600) *
               C139587) *
              C139590 +
          ((C7010 * C30408 + (C8543 + C8542 - C8541 - C8549) * C139600) *
               C13591 +
           ((C7006 + C7005 - C7004 - C7007) * C30408 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C139448 * C8422) * C6772 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139600) *
               C139587) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C30408 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
               C6692 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C30408) *
                C13591) *
               C139360) *
              C139601 +
          ((((C1310 + C1318) * C30408 + (C31608 + C31607) * C139600) * C13591 +
            ((C1307 + C1317) * C30408 + (C31609 + C31610) * C139600) *
                C139587) *
               C139360 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
               C6692) *
              C139590 +
          (((C501 * C30408 + (C30744 + C30743) * C139600) * C13591 +
            ((C489 + C499) * C30408 + (C30745 + C30746) * C139600) * C139587) *
               C6692 -
           ((((C307 * C8322 + C139448 * C8647) * C139372 +
              (C307 * C8120 + C139448 * C8422) * C244) *
                 C139600 +
             (C1319 + C1311) * C30408) *
                C139587 +
            ((C31610 + C31609) * C139600 + C1320 * C30408) * C13591) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6694 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139601 -
            (C30839 + C30840) * C6695 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C6696 + (C30845 + C30846) * C6691) *
               C13591 +
           ((C30840 + C30839) * C6694 + (C30842 + C30841) * C139601 -
            (C30844 + C30843) * C6695 - (C30846 + C30845) * C139590 +
            (C30848 + C30847) * C6696 + (C30850 + C30849) * C6691) *
               C139587) *
              C139448 * C139372 * C6692 +
          (((C31725 + C31726) * C6695 -
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139601 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C6694) +
            (C31727 + C31728) * C139590 - (C31729 + C31730) * C6696 -
            (C31731 + C31732) * C6691) *
               C13591 +
           ((C31730 + C31729) * C6695 -
            ((C31728 + C31727) * C139601 + (C31726 + C31725) * C6694) +
            (C31732 + C31731) * C139590 -
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C6696 -
            (C30813 * C8122 + C139600 * C8761 + C30812 * C841 +
             C30408 * C1403) *
                C6691) *
               C139587) *
              C139448 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6771 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C6692 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C6772 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139360) *
               C13591 +
           ((C30840 + C30839) * C6771 + (C30929 + C30930) * C6692 -
            (C31726 + C31725) * C6772 - (C31839 + C31840) * C139360) *
               C139587) *
              C139448 * C139601 +
          (((C31725 + C31726) * C6772 -
            ((C30930 + C30929) * C6692 + (C30839 + C30840) * C6771) +
            (C31840 + C31839) * C139360) *
               C13591 +
           ((C31730 + C31729) * C6772 -
            ((C30931 + C30932) * C6692 + (C30844 + C30843) * C6771) +
            (C31841 + C31842) * C139360) *
               C139587) *
              C139448 * C139590 +
          (((C30843 + C30844) * C6771 + (C30932 + C30931) * C6692 -
            (C31729 + C31730) * C6772 - (C31842 + C31841) * C139360) *
               C13591 +
           ((C30848 + C30847) * C6771 + (C30933 + C30934) * C6692 -
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C6772 -
            (C30813 * C8222 + C139600 * C8872 + C30812 * C928 +
             C30408 * C1500) *
                C139360) *
               C139587) *
              C139448 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) *
                C139587) *
               C139448 * C6692 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139372 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C244) *
                C13591) *
               C139448 * C139360) *
              C139601 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C13591 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                C139587) *
               C139448 * C139360 -
           (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
               C139448 * C6692) *
              C139590 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C13591 +
            ((C30848 + C30847) * C244 + (C31017 + C31018) * C139372) *
                C139587) *
               C139448 * C6692 -
           (((C30813 * C8322 + C139600 * C8985 + C30812 * C1012 +
              C30408 * C1603) *
                 C139372 +
             (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
              C30408 * C1398) *
                 C244) *
                C139587 +
            ((C31952 + C31951) * C139372 + (C31729 + C31730) * C244) * C13591) *
               C139448 * C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7401 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C7396 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C7402 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C139448 * C30408 +
           ((C32075 + C32076) * C7401 + (C32077 + C32078) * C7396 -
            (C32079 + C32080) * C7402 - (C32081 + C32082) * C139308) *
               C139448 * C139600) *
              C139372 * C139602 +
          (((C14333 + C14332) * C7402 -
            ((C14331 + C14330) * C7396 + (C14329 + C14328) * C7401) +
            (C14335 + C14334) * C139308) *
               C139448 * C30408 +
           ((C23335 + C23336) * C7402 -
            ((C17983 + C17984) * C7396 + (C17985 + C17986) * C7401) +
            (C23337 + C23338) * C139308) *
               C139448 * C139600) *
              C139372 * C139593 +
          (((C16298 + C16297) * C7401 + (C16296 + C16295) * C7396 -
            (C16294 + C16293) * C7402 - (C16300 + C16299) * C139308) *
               C139448 * C30408 +
           ((C17987 + C17988) * C7401 + (C17989 + C17990) * C7396 -
            (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
             C13591 * C3907) *
                C7402 -
            (C13596 * C3903 + C139587 * C3912 + C13595 * C3904 +
             C13591 * C3913) *
                C139308) *
               C139448 * C139600) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7477 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139602 -
            (C14329 + C14328) * C7478 - (C14450 + C14451) * C139593 +
            (C16298 + C16297) * C7479 + (C16407 + C16408) * C7400) *
               C139448 * C30408 +
           ((C32075 + C32076) * C7477 + (C32197 + C32198) * C139602 -
            (C17985 + C17986) * C7478 - (C18102 + C18101) * C139593 +
            (C17987 + C17988) * C7479 + (C18104 + C18103) * C7400) *
               C139448 * C139600) *
              C7396 +
          (((C14333 + C14332) * C7478 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139602 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C7477) +
            (C14452 + C14453) * C139593 - (C16294 + C16293) * C7479 -
            (C16409 + C16410) * C7400) *
               C139448 * C30408 +
           ((C23335 + C23336) * C7478 -
            ((C32199 + C32200) * C139602 + (C32079 + C32080) * C7477) +
            (C23474 + C23473) * C139593 -
            (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
             C13591 * C3907) *
                C7479 -
            (C13596 * C3992 + C139587 * C3998 + C13595 * C3993 +
             C13591 * C3999) *
                C7400) *
               C139448 * C139600) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C30408 +
            ((C32075 + C32076) * C244 + (C32314 + C32313) * C139372) * C139448 *
                C139600) *
               C139602 -
           (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
                C139600 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
                C30408) *
               C139593 +
           (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C139448 *
                C30408 +
            ((C17987 + C17988) * C244 + (C18217 + C18218) * C139372) * C139448 *
                C139600) *
               C7400) *
              C7396 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C139448 *
                C30408 +
            ((C23335 + C23336) * C244 + (C23609 + C23610) * C139372) * C139448 *
                C139600) *
               C139593 -
           (((C32316 + C32315) * C139372 + (C32079 + C32080) * C244) * C139448 *
                C139600 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139448 * C30408) *
               C139602 -
           (((C13596 * C4078 + C139587 * C4084 + C13595 * C4079 +
              C13591 * C4085) *
                 C139372 +
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C244) *
                C139448 * C139600 +
            ((C16520 + C16519) * C139372 + (C16294 + C16293) * C244) * C139448 *
                C30408) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7401 +
             (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
             C338 * C139308) *
                C30408 +
            (C32431 * C7401 + C32432 * C7396 - C1984 * C7402 -
             C1985 * C139308) *
                C139600) *
               C13591 +
           ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                C30408 +
            (C1984 * C7401 + C1985 * C7396 - C1986 * C7402 - C1987 * C139308) *
                C139600) *
               C139587) *
              C139372 * C139602 +
          (((C1116 * C7402 -
             ((C307 * C839 + C139448 * C1098) * C7396 +
              (C307 * C832 + C139448 * C1094) * C7401) +
             C1117 * C139308) *
                C30408 +
            (C8433 * C7402 - (C34921 * C7396 + C34920 * C7401) +
             C8434 * C139308) *
                C139600) *
               C13591 +
           ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
             C1119 * C139308) *
                C30408 +
            (C8435 * C7402 - (C8434 * C7396 + C8433 * C7401) +
             C8436 * C139308) *
                C139600) *
               C139587) *
              C139372 * C139593 +
          ((((C307 * C2570 + C139448 * C2827) * C7401 +
             (C307 * C2577 + C139448 * C2831) * C7396 - C2844 * C7402 -
             C2845 * C139308) *
                C30408 +
            (C34922 * C7401 + C34923 * C7396 - C33388 * C7402 -
             C33389 * C139308) *
                C139600) *
               C13591 +
           ((C2844 * C7401 + C2845 * C7396 - C2846 * C7402 - C2847 * C139308) *
                C30408 +
            (C33388 * C7401 + C33389 * C7396 -
             (C307 * C3894 + C139448 * C4164) * C7402 -
             (C307 * C3903 + C139448 * C4170) * C139308) *
                C139600) *
               C139587) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7477 +
             (C307 * C182 + C139448 * C394) * C139602 -
             (C307 * C832 + C139448 * C1094) * C7478 -
             (C307 * C927 + C139448 * C1195) * C139593 +
             (C307 * C2570 + C139448 * C2827) * C7479 +
             (C307 * C2663 + C139448 * C2921) * C7400) *
                C30408 +
            (C32431 * C7477 + C32539 * C139602 - C34920 * C7478 -
             C35034 * C139593 + C34922 * C7479 + C35035 * C7400) *
                C139600) *
               C13591 +
           ((C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C30408 +
            (C39408 + C39409 - C39410 - C39411 + C39412 + C39413) * C139600) *
               C139587) *
              C7396 +
          (((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C30408 +
            (C39410 - (C39409 + C39408) + C39411 - C39412 - C39413) * C139600) *
               C13591 +
           ((C7711 - (C7710 + C7709) + C7712 - C7713 - C7714) * C30408 +
            (C8435 * C7478 - (C2079 * C139602 + C1986 * C7477) +
             C8547 * C139593 - (C307 * C3894 + C139448 * C4164) * C7479 -
             (C307 * C3992 + C139448 * C4252) * C7400) *
                C139600) *
               C139587) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C30408 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
               C139602 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C30408) *
                C13591) *
               C139593 +
           ((((C307 * C2570 + C139448 * C2827) * C244 +
              (C307 * C2745 + C139448 * C3017) * C139372) *
                 C30408 +
             (C34922 * C244 + C35141 * C139372) * C139600) *
                C13591 +
            ((C3022 + C3030) * C30408 + (C33595 + C33599) * C139600) *
                C139587) *
               C7400) *
              C7396 +
          ((((C1310 + C1318) * C30408 + (C31608 + C31607) * C139600) * C13591 +
            ((C1307 + C1317) * C30408 + (C31609 + C31610) * C139600) *
                C139587) *
               C139593 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
               C139602 -
           ((((C307 * C4078 + C139448 * C4332) * C139372 +
              (C307 * C3894 + C139448 * C4164) * C244) *
                 C139600 +
             (C3031 + C3025) * C30408) *
                C139587 +
            ((C33599 + C33595) * C139600 + (C3030 + C3022) * C30408) * C13591) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7401 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C7396 -
            (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
               C13591 +
           ((C30840 + C30839) * C7401 + (C30842 + C30841) * C7396 -
            (C30844 + C30843) * C7402 - (C30846 + C30845) * C139308) *
               C139587) *
              C139448 * C139372 * C139602 +
          (((C31725 + C31726) * C7402 -
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C7396 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C7401) +
            (C31727 + C31728) * C139308) *
               C13591 +
           ((C31730 + C31729) * C7402 -
            ((C31728 + C31727) * C7396 + (C31726 + C31725) * C7401) +
            (C31732 + C31731) * C139308) *
               C139587) *
              C139448 * C139372 * C139593 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C7401 +
            (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
             C139600 * C4418) *
                C7396 -
            (C33706 + C33707) * C7402 - (C33708 + C33709) * C139308) *
               C13591 +
           ((C33707 + C33706) * C7401 + (C33709 + C33708) * C7396 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C7402 -
            (C30813 * C3903 + C139600 * C4416 + C30812 * C2579 +
             C30408 * C3111) *
                C139308) *
               C139587) *
              C139448 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7477 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139602 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C7478 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139593 +
            (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C7479 +
            (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
             C139600 * C4494) *
                C7400) *
               C13591 +
           ((C30840 + C30839) * C7477 + (C30929 + C30930) * C139602 -
            (C31726 + C31725) * C7478 - (C31839 + C31840) * C139593 +
            (C33707 + C33706) * C7479 + (C33812 + C33813) * C7400) *
               C139587) *
              C139448 * C7396 +
          (((C31725 + C31726) * C7478 -
            ((C30930 + C30929) * C139602 + (C30839 + C30840) * C7477) +
            (C31840 + C31839) * C139593 - (C33706 + C33707) * C7479 -
            (C33813 + C33812) * C7400) *
               C13591 +
           ((C31730 + C31729) * C7478 -
            ((C30931 + C30932) * C139602 + (C30844 + C30843) * C7477) +
            (C31841 + C31842) * C139593 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C7479 -
            (C30813 * C3992 + C139600 * C4498 + C30812 * C2665 +
             C30408 * C3201) *
                C7400) *
               C139587) *
              C139448 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) *
                C139587) *
               C139448 * C139602 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139372 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C244) *
                C13591) *
               C139448 * C139593 +
           (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
              C139600 * C4412) *
                 C244 +
             (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
              C139600 * C4576) *
                 C139372) *
                C13591 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) *
                C139587) *
               C139448 * C7400) *
              C7396 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C13591 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                C139587) *
               C139448 * C139593 -
           (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
               C139448 * C139602 -
           (((C30813 * C4078 + C139600 * C4578 + C30812 * C2747 +
              C30408 * C3297) *
                 C139372 +
             (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
              C30408 * C3107) *
                 C244) *
                C139587 +
            ((C33917 + C33916) * C139372 + (C33706 + C33707) * C244) * C13591) *
               C139448 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C7401 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C7396 -
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C7402 -
             (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                 C139308) *
                C139448 * C30408 +
            ((C32075 + C32076) * C7401 + (C32077 + C32078) * C7396 -
             (C32079 + C32080) * C7402 - (C32081 + C32082) * C139308) *
                C139448 * C139600) *
               C139571 +
           (((C32080 + C32079) * C7402 -
             ((C32078 + C32077) * C7396 + (C32076 + C32075) * C7401) +
             (C32082 + C32081) * C139308) *
                C139448 * C30408 +
            ((C35550 + C35551) * C7402 -
             ((C35552 + C35553) * C7396 + (C35554 + C35555) * C7401) +
             (C35556 + C35557) * C139308) *
                C139448 * C139600) *
               C139384) *
              C6692 +
          ((((C14333 + C14332) * C7402 -
             ((C14331 + C14330) * C7396 + (C14329 + C14328) * C7401) +
             (C14335 + C14334) * C139308) *
                C139448 * C30408 +
            ((C23335 + C23336) * C7402 -
             ((C17983 + C17984) * C7396 + (C17985 + C17986) * C7401) +
             (C23337 + C23338) * C139308) *
                C139448 * C139600) *
               C139571 +
           (((C17986 + C17985) * C7401 + (C17984 + C17983) * C7396 -
             (C23336 + C23335) * C7402 - (C23338 + C23337) * C139308) *
                C139448 * C30408 +
            ((C19919 + C19920) * C7401 + (C19921 + C19922) * C7396 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C7402 -
             (C13596 * C5472 + C139587 * C5478 + C13595 * C5473 +
              C13591 * C5479) *
                 C139308) *
                C139448 * C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C6771 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C6692 -
             (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
                C139448 * C30408 +
            ((C32075 + C32076) * C6771 + (C32197 + C32198) * C6692 -
             (C17985 + C17986) * C6772 - (C18102 + C18101) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C14333 + C14332) * C6772 -
             ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                  C6692 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C6771) +
             (C14452 + C14453) * C139360) *
                C139448 * C30408 +
            ((C23335 + C23336) * C6772 -
             ((C32199 + C32200) * C6692 + (C32079 + C32080) * C6771) +
             (C23474 + C23473) * C139360) *
                C139448 * C139600) *
               C139308) *
              C139571 +
          ((((C17986 + C17985) * C6772 -
             ((C32198 + C32197) * C6692 + (C32076 + C32075) * C6771) +
             (C18101 + C18102) * C139360) *
                C139448 * C30408 +
            ((C19919 + C19920) * C6772 -
             ((C35666 + C35667) * C6692 + (C35554 + C35555) * C6771) +
             (C20030 + C20029) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C32080 + C32079) * C6771 + (C32200 + C32199) * C6692 -
             (C23336 + C23335) * C6772 - (C23473 + C23474) * C139360) *
                C139448 * C30408 +
            ((C35550 + C35551) * C6771 + (C35664 + C35665) * C6692 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C6772 -
             (C13596 * C5555 + C139587 * C5558 + C13595 * C5556 +
              C13591 * C5559) *
                 C139360) *
                C139448 * C139600) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C1875 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139571 -
             (C32076 + C32075) * C1876 - (C32313 + C32314) * C139384) *
                C139448 * C30408 +
            ((C32075 + C32076) * C1875 + (C32314 + C32313) * C139571 -
             (C35554 + C35555) * C1876 - (C35775 + C35774) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C17986 + C17985) * C1876 -
             ((C14567 + C14566) * C139571 + (C14329 + C14328) * C1875) +
             (C18216 + C18215) * C139384) *
                C139448 * C30408 +
            ((C19919 + C19920) * C1876 -
             ((C18215 + C18216) * C139571 + (C17985 + C17986) * C1875) +
             (C20137 + C20138) * C139384) *
                C139448 * C139600) *
               C139360) *
              C7396 +
          ((((C32080 + C32079) * C1876 -
             ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                  C139571 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C1875) +
             (C32315 + C32316) * C139384) *
                C139448 * C30408 +
            ((C35550 + C35551) * C1876 -
             ((C32316 + C32315) * C139571 + (C32079 + C32080) * C1875) +
             (C35777 + C35776) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C14333 + C14332) * C1875 + (C14568 + C14569) * C139571 -
             (C23336 + C23335) * C1876 - (C23610 + C23609) * C139384) *
                C139448 * C30408 +
            ((C23335 + C23336) * C1875 + (C23609 + C23610) * C139571 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C1876 -
             (C13596 * C5635 + C139587 * C5638 + C13595 * C5636 +
              C13591 * C5639) *
                 C139384) *
                C139448 * C139600) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C7401 +
              (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
              C338 * C139308) *
                 C30408 +
             (C40326 + C40327 - C40328 - C40329) * C139600) *
                C13591 +
            ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                 C30408 +
             (C40330 + C40331 - C40332 - C40333) * C139600) *
                C139587) *
               C139571 +
           (((C40328 - (C40327 + C40326) + C40329) * C30408 +
             (C4930 * C7402 - (C35898 * C7396 + C35899 * C7401) +
              C4931 * C139308) *
                 C139600) *
                C13591 +
            ((C40332 - (C40331 + C40330) + C40333) * C30408 +
             (C4932 * C7402 - (C4931 * C7396 + C4930 * C7401) +
              C4933 * C139308) *
                 C139600) *
                C139587) *
               C139384) *
              C6692 +
          ((((C1116 * C7402 -
              ((C307 * C839 + C139448 * C1098) * C7396 +
               (C307 * C832 + C139448 * C1094) * C7401) +
              C1117 * C139308) *
                 C30408 +
             (C40334 - (C40335 + C40336) + C40337) * C139600) *
                C13591 +
            ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
              C1119 * C139308) *
                 C30408 +
             (C40338 - (C40339 + C40340) + C40341) * C139600) *
                C139587) *
               C139571 +
           (((C40336 + C40335 - C40334 - C40337) * C30408 +
             (C36846 * C7401 + C36847 * C7396 - C36848 * C7402 -
              C36849 * C139308) *
                 C139600) *
                C13591 +
            ((C40340 + C40339 - C40338 - C40341) * C30408 +
             (C36848 * C7401 + C36849 * C7396 -
              (C307 * C5469 + C139448 * C5715) * C7402 -
              (C307 * C5472 + C139448 * C5718) * C139308) *
                 C139600) *
                C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C6771 +
              (C307 * C182 + C139448 * C394) * C6692 -
              (C307 * C832 + C139448 * C1094) * C6772 -
              (C307 * C927 + C139448 * C1195) * C139360) *
                 C30408 +
             (C40472 + C40473 - C40474 - C40475) * C139600) *
                C13591 +
            ((C6996 + C6997 - C6998 - C6999) * C30408 + C40484 * C139600) *
                C139587) *
               C7396 +
           (((C6998 - (C6997 + C6996) + C6999) * C30408 + C40485 * C139600) *
                C13591 +
            ((C7002 - (C7001 + C7000) + C7003) * C30408 +
             (C8541 - (C8542 + C8543) + C8549) * C139600) *
                C139587) *
               C139308) *
              C139571 +
          ((((C40474 - (C40473 + C40472) + C40475) * C30408 +
             (C36846 * C6772 - (C36010 * C6692 + C35899 * C6771) +
              C36966 * C139360) *
                 C139600) *
                C13591 +
            (C40485 * C30408 +
             (C40478 - (C40479 + C40480) + C40481) * C139600) *
                C139587) *
               C7396 +
           ((C40484 * C30408 + (C40480 + C40479 - C40478 - C40481) * C139600) *
                C13591 +
            ((C8543 + C8542 - C8541 - C8549) * C30408 +
             (C4932 * C6771 + C5019 * C6692 -
              (C307 * C5469 + C139448 * C5715) * C6772 -
              (C307 * C5555 + C139448 * C5797) * C139360) *
                 C139600) *
                C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[32] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C1875 +
                        (C307 * C245 + C139448 * C474) * C139571 -
                        C32431 * C1876 - C32649 * C139384) *
                           C30408 +
                       (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
                        C36121 * C139384) *
                           C139600) *
                          C13591 +
                      ((C2165 + C2166 - C2167 - C2184) * C30408 +
                       (C32641 + C32642 - C32643 - C32644) * C139600) *
                          C139587) *
                         C6692 +
                     (((C34920 * C1876 -
                        ((C307 * C1011 + C139448 * C1301) * C139571 +
                         (C307 * C832 + C139448 * C1094) * C1875) +
                        C35140 * C139384) *
                           C30408 +
                       (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
                        C37072 * C139384) *
                           C139600) *
                          C13591 +
                      ((C8649 - (C8650 + C8651) + C8661) * C30408 +
                       (C40616 - (C40617 + C40618) + C40619) * C139600) *
                          C139587) *
                         C139360) *
                        C7396 +
                    ((((C2167 - (C2166 + C2165) + C2184) * C30408 +
                       (C32643 - (C32642 + C32641) + C32644) * C139600) *
                          C13591 +
                      ((C2172 - (C2171 + C2170) + C2186) * C30408 +
                       (C32645 - (C32646 + C32647) + C32648) * C139600) *
                          C139587) *
                         C6692 +
                     (((C8651 + C8650 - C8649 - C8661) * C30408 +
                       (C40618 + C40617 - C40616 - C40619) * C139600) *
                          C13591 +
                      ((C8656 + C8655 - C8654 - C8662) * C30408 +
                       (C8435 * C1875 + C8660 * C139571 -
                        (C307 * C5469 + C139448 * C5715) * C1876 -
                        (C307 * C5635 + C139448 * C5874) * C139384) *
                           C139600) *
                          C139587) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
                C13591 +
            ((C30840 + C30839) * C7401 + (C30842 + C30841) * C7396 -
             (C30844 + C30843) * C7402 - (C30846 + C30845) * C139308) *
                C139587) *
               C139448 * C139571 +
           (((C32764 + C32765) * C7402 -
             ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
               C30408 * C2268) *
                  C7396 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C7401) +
             (C32766 + C32767) * C139308) *
                C13591 +
            ((C32769 + C32768) * C7402 -
             ((C32767 + C32766) * C7396 + (C32765 + C32764) * C7401) +
             (C32771 + C32770) * C139308) *
                C139587) *
               C139448 * C139384) *
              C6692 +
          ((((C31725 + C31726) * C7402 -
             ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
               C30408 * C1400) *
                  C7396 +
              (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
               C30408 * C1396) *
                  C7401) +
             (C31727 + C31728) * C139308) *
                C13591 +
            ((C31730 + C31729) * C7402 -
             ((C31728 + C31727) * C7396 + (C31726 + C31725) * C7401) +
             (C31732 + C31731) * C139308) *
                C139587) *
               C139448 * C139571 +
           (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C7401 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C7396 -
             (C40758 + C40759) * C7402 - (C40760 + C40761) * C139308) *
                C13591 +
            ((C40759 + C40758) * C7401 + (C40761 + C40760) * C7396 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C7402 -
             (C30813 * C5472 + C139600 * C5952 + C30812 * C3902 +
              C30408 * C4415) *
                 C139308) *
                C139587) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C6772 -
             (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
              C30408 * C1497) *
                 C139360) *
                C13591 +
            ((C30840 + C30839) * C6771 + (C30929 + C30930) * C6692 -
             (C31726 + C31725) * C6772 - (C31839 + C31840) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C31725 + C31726) * C6772 -
             ((C30930 + C30929) * C6692 + (C30839 + C30840) * C6771) +
             (C31840 + C31839) * C139360) *
                C13591 +
            ((C31730 + C31729) * C6772 -
             ((C30931 + C30932) * C6692 + (C30844 + C30843) * C6771) +
             (C31841 + C31842) * C139360) *
                C139587) *
               C139448 * C139308) *
              C139571 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C6772 -
             ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
               C30408 * C2368) *
                  C6692 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C6771) +
             (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
              C139600 * C6029) *
                 C139360) *
                C13591 +
            ((C40759 + C40758) * C6772 -
             ((C32879 + C32878) * C6692 + (C32765 + C32764) * C6771) +
             (C40896 + C40897) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C32764 + C32765) * C6771 + (C32878 + C32879) * C6692 -
             (C40758 + C40759) * C6772 - (C40897 + C40896) * C139360) *
                C13591 +
            ((C32769 + C32768) * C6771 + (C32880 + C32881) * C6692 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C6772 -
             (C30813 * C5555 + C139600 * C6031 + C30812 * C3991 +
              C30408 * C4497) *
                 C139360) *
                C139587) *
               C139448 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C1875 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139571 -
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C1876 -
             (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
              C30408 * C2460) *
                 C139384) *
                C13591 +
            ((C30840 + C30839) * C1875 + (C31013 + C31014) * C139571 -
             (C32765 + C32764) * C1876 - (C32988 + C32989) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C1876 -
             ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
               C30408 * C1602) *
                  C139571 +
              (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
               C30408 * C1396) *
                  C1875) +
             (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
              C139600 * C6106) *
                 C139384) *
                C13591 +
            ((C40759 + C40758) * C1876 -
             ((C31949 + C31950) * C139571 + (C31726 + C31725) * C1875) +
             (C41032 + C41033) * C139384) *
                C139587) *
               C139448 * C139360) *
              C7396 +
          ((((C32764 + C32765) * C1876 -
             ((C31014 + C31013) * C139571 + (C30839 + C30840) * C1875) +
             (C32989 + C32988) * C139384) *
                C13591 +
            ((C32769 + C32768) * C1876 -
             ((C31015 + C31016) * C139571 + (C30844 + C30843) * C1875) +
             (C32990 + C32991) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C31725 + C31726) * C1875 + (C31950 + C31949) * C139571 -
             (C40758 + C40759) * C1876 - (C41033 + C41032) * C139384) *
                C13591 +
            ((C31730 + C31729) * C1875 + (C31951 + C31952) * C139571 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C1876 -
             (C30813 * C5635 + C139600 * C6108 + C30812 * C4077 +
              C30408 * C4575) *
                 C139384) *
                C139587) *
               C139448 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C137108 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139562 -
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C137101 -
             (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                 C139308) *
                C139448 * C30408 +
            ((C32075 + C32076) * C137108 + (C32077 + C32078) * C139562 -
             (C32079 + C32080) * C137101 - (C32081 + C32082) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C32080 + C32079) * C137101 -
             ((C32078 + C32077) * C139562 + (C32076 + C32075) * C137108) +
             (C32082 + C32081) * C139308) *
                C139448 * C30408 +
            ((C35550 + C35551) * C137101 -
             ((C35552 + C35553) * C139562 + (C35554 + C35555) * C137108) +
             (C35556 + C35557) * C139308) *
                C139448 * C139600) *
               C139384) *
              C6692 +
          ((((C14333 + C14332) * C137101 -
             ((C14331 + C14330) * C139562 + (C14329 + C14328) * C137108) +
             (C14335 + C14334) * C139308) *
                C139448 * C30408 +
            ((C23335 + C23336) * C137101 -
             ((C17983 + C17984) * C139562 + (C17985 + C17986) * C137108) +
             (C23337 + C23338) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C17986 + C17985) * C137108 + (C17984 + C17983) * C139562 -
             (C23336 + C23335) * C137101 - (C23338 + C23337) * C139308) *
                C139448 * C30408 +
            ((C19919 + C19920) * C137108 + (C19921 + C19922) * C139562 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C137101 -
             (C13596 * C5472 + C139587 * C5478 + C13595 * C5473 +
              C13591 * C5479) *
                 C139308) *
                C139448 * C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C6771 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C6692 -
             (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
                C139448 * C30408 +
            ((C32075 + C32076) * C6771 + (C32197 + C32198) * C6692 -
             (C17985 + C17986) * C6772 - (C18102 + C18101) * C139360) *
                C139448 * C139600) *
               C139562 +
           (((C14333 + C14332) * C6772 -
             ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                  C6692 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C6771) +
             (C14452 + C14453) * C139360) *
                C139448 * C30408 +
            ((C23335 + C23336) * C6772 -
             ((C32199 + C32200) * C6692 + (C32079 + C32080) * C6771) +
             (C23474 + C23473) * C139360) *
                C139448 * C139600) *
               C139308) *
              C9074 +
          ((((C17986 + C17985) * C6772 -
             ((C32198 + C32197) * C6692 + (C32076 + C32075) * C6771) +
             (C18101 + C18102) * C139360) *
                C139448 * C30408 +
            ((C19919 + C19920) * C6772 -
             ((C35666 + C35667) * C6692 + (C35554 + C35555) * C6771) +
             (C20030 + C20029) * C139360) *
                C139448 * C139600) *
               C139562 +
           (((C32080 + C32079) * C6771 + (C32200 + C32199) * C6692 -
             (C23336 + C23335) * C6772 - (C23473 + C23474) * C139360) *
                C139448 * C30408 +
            ((C35550 + C35551) * C6771 + (C35664 + C35665) * C6692 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C6772 -
             (C13596 * C5555 + C139587 * C5558 + C13595 * C5556 +
              C13591 * C5559) *
                 C139360) *
                C139448 * C139600) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C9224 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C9074 -
             (C32076 + C32075) * C9225 - (C32313 + C32314) * C139384) *
                C139448 * C30408 +
            ((C32075 + C32076) * C9224 + (C32314 + C32313) * C9074 -
             (C35554 + C35555) * C9225 - (C35775 + C35774) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C17986 + C17985) * C9225 -
             ((C14567 + C14566) * C9074 + (C14329 + C14328) * C9224) +
             (C18216 + C18215) * C139384) *
                C139448 * C30408 +
            ((C19919 + C19920) * C9225 -
             ((C18215 + C18216) * C9074 + (C17985 + C17986) * C9224) +
             (C20137 + C20138) * C139384) *
                C139448 * C139600) *
               C139360) *
              C139562 +
          ((((C32080 + C32079) * C9225 -
             ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                  C9074 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C9224) +
             (C32315 + C32316) * C139384) *
                C139448 * C30408 +
            ((C35550 + C35551) * C9225 -
             ((C32316 + C32315) * C9074 + (C32079 + C32080) * C9224) +
             (C35777 + C35776) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C14333 + C14332) * C9224 + (C14568 + C14569) * C9074 -
             (C23336 + C23335) * C9225 - (C23610 + C23609) * C139384) *
                C139448 * C30408 +
            ((C23335 + C23336) * C9224 + (C23609 + C23610) * C9074 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C9225 -
             (C13596 * C5635 + C139587 * C5638 + C13595 * C5636 +
              C13591 * C5639) *
                 C139384) *
                C139448 * C139600) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C137108 +
                        (C307 * C116 + C139448 * C314) * C139562 -
                        C337 * C137101 - C338 * C139308) *
                           C30408 +
                       (C35876 + C35877 - C35878 - C35879) * C139600) *
                          C13591 +
                      ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
                        C340 * C139308) *
                           C30408 +
                       (C35880 + C35881 - C35882 - C35883) * C139600) *
                          C139587) *
                         C9074 +
                     (((C35878 - (C35877 + C35876) + C35879) * C30408 +
                       (C35884 - (C35902 + C35903) + C35889) * C139600) *
                          C13591 +
                      ((C35882 - (C35881 + C35880) + C35883) * C30408 +
                       (C35890 - (C35891 + C35892) + C35893) * C139600) *
                          C139587) *
                         C139384) *
                        C6692 +
                    ((((C1116 * C137101 -
                        ((C307 * C839 + C139448 * C1098) * C139562 +
                         (C307 * C832 + C139448 * C1094) * C137108) +
                        C1117 * C139308) *
                           C30408 +
                       (C44532 - (C44533 + C44534) + C44535) * C139600) *
                          C13591 +
                      ((C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
                        C1119 * C139308) *
                           C30408 +
                       (C44536 - (C44537 + C44538) + C44539) * C139600) *
                          C139587) *
                         C9074 +
                     (((C44534 + C44533 - C44532 - C44535) * C30408 +
                       (C36846 * C137108 + C36847 * C139562 - C36848 * C137101 -
                        C36849 * C139308) *
                           C139600) *
                          C13591 +
                      ((C44538 + C44537 - C44536 - C44539) * C30408 +
                       (C36848 * C137108 + C36849 * C139562 -
                        (C307 * C5469 + C139448 * C5715) * C137101 -
                        (C307 * C5472 + C139448 * C5718) * C139308) *
                           C139600) *
                          C139587) *
                         C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C6771 +
              (C307 * C182 + C139448 * C394) * C6692 -
              (C307 * C832 + C139448 * C1094) * C6772 -
              (C307 * C927 + C139448 * C1195) * C139360) *
                 C30408 +
             (C40472 + C40473 - C40474 - C40475) * C139600) *
                C13591 +
            ((C6996 + C6997 - C6998 - C6999) * C30408 + C40484 * C139600) *
                C139587) *
               C139562 +
           (((C6998 - (C6997 + C6996) + C6999) * C30408 + C40485 * C139600) *
                C13591 +
            ((C7002 - (C7001 + C7000) + C7003) * C30408 +
             (C8541 - (C8542 + C8543) + C8549) * C139600) *
                C139587) *
               C139308) *
              C9074 +
          ((((C40474 - (C40473 + C40472) + C40475) * C30408 +
             (C36846 * C6772 - (C36010 * C6692 + C35899 * C6771) +
              C36966 * C139360) *
                 C139600) *
                C13591 +
            (C40485 * C30408 +
             (C40478 - (C40479 + C40480) + C40481) * C139600) *
                C139587) *
               C139562 +
           ((C40484 * C30408 + (C40480 + C40479 - C40478 - C40481) * C139600) *
                C13591 +
            ((C8543 + C8542 - C8541 - C8549) * C30408 +
             (C4932 * C6771 + C5019 * C6692 -
              (C307 * C5469 + C139448 * C5715) * C6772 -
              (C307 * C5555 + C139448 * C5797) * C139360) *
                 C139600) *
                C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C9224 +
                        (C307 * C245 + C139448 * C474) * C9074 -
                        C32431 * C9225 - C32649 * C139384) *
                           C30408 +
                       (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                        C36121 * C139384) *
                           C139600) *
                          C13591 +
                      ((C9449 + C9450 - C9451 - C9452) * C30408 +
                       (C41634 + C41635 - C41636 - C41637) * C139600) *
                          C139587) *
                         C6692 +
                     (((C34920 * C9225 -
                        ((C307 * C1011 + C139448 * C1301) * C9074 +
                         (C307 * C832 + C139448 * C1094) * C9224) +
                        C35140 * C139384) *
                           C30408 +
                       (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                        C37072 * C139384) *
                           C139600) *
                          C13591 +
                      ((C10298 - (C10299 + C10300) + C10301) * C30408 +
                       (C42722 - (C42723 + C42724) + C42725) * C139600) *
                          C139587) *
                         C139360) *
                        C139562 +
                    ((((C9451 - (C9450 + C9449) + C9452) * C30408 +
                       (C41636 - (C41635 + C41634) + C41637) * C139600) *
                          C13591 +
                      ((C9455 - (C9454 + C9453) + C9456) * C30408 +
                       (C41638 - (C41639 + C41640) + C41641) * C139600) *
                          C139587) *
                         C6692 +
                     (((C10300 + C10299 - C10298 - C10301) * C30408 +
                       (C42724 + C42723 - C42722 - C42725) * C139600) *
                          C13591 +
                      ((C10304 + C10303 - C10302 - C10305) * C30408 +
                       (C8435 * C9224 + C8660 * C9074 -
                        (C307 * C5469 + C139448 * C5715) * C9225 -
                        (C307 * C5635 + C139448 * C5874) * C139384) *
                           C139600) *
                          C139587) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C137108 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139562 -
             (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
                C13591 +
            ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139562 -
             (C30844 + C30843) * C137101 - (C30846 + C30845) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C32764 + C32765) * C137101 -
             ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
               C30408 * C2268) *
                  C139562 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C137108) +
             (C32766 + C32767) * C139308) *
                C13591 +
            ((C32769 + C32768) * C137101 -
             ((C32767 + C32766) * C139562 + (C32765 + C32764) * C137108) +
             (C32771 + C32770) * C139308) *
                C139587) *
               C139448 * C139384) *
              C6692 +
          ((((C31725 + C31726) * C137101 -
             ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
               C30408 * C1400) *
                  C139562 +
              (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
               C30408 * C1396) *
                  C137108) +
             (C31727 + C31728) * C139308) *
                C13591 +
            ((C31730 + C31729) * C137101 -
             ((C31728 + C31727) * C139562 + (C31726 + C31725) * C137108) +
             (C31732 + C31731) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C137108 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C139562 -
             (C40758 + C40759) * C137101 - (C40760 + C40761) * C139308) *
                C13591 +
            ((C40759 + C40758) * C137108 + (C40761 + C40760) * C139562 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C137101 -
             (C30813 * C5472 + C139600 * C5952 + C30812 * C3902 +
              C30408 * C4415) *
                 C139308) *
                C139587) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C6772 -
             (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
              C30408 * C1497) *
                 C139360) *
                C13591 +
            ((C30840 + C30839) * C6771 + (C30929 + C30930) * C6692 -
             (C31726 + C31725) * C6772 - (C31839 + C31840) * C139360) *
                C139587) *
               C139448 * C139562 +
           (((C31725 + C31726) * C6772 -
             ((C30930 + C30929) * C6692 + (C30839 + C30840) * C6771) +
             (C31840 + C31839) * C139360) *
                C13591 +
            ((C31730 + C31729) * C6772 -
             ((C30931 + C30932) * C6692 + (C30844 + C30843) * C6771) +
             (C31841 + C31842) * C139360) *
                C139587) *
               C139448 * C139308) *
              C9074 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C6772 -
             ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
               C30408 * C2368) *
                  C6692 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C6771) +
             (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
              C139600 * C6029) *
                 C139360) *
                C13591 +
            ((C40759 + C40758) * C6772 -
             ((C32879 + C32878) * C6692 + (C32765 + C32764) * C6771) +
             (C40896 + C40897) * C139360) *
                C139587) *
               C139448 * C139562 +
           (((C32764 + C32765) * C6771 + (C32878 + C32879) * C6692 -
             (C40758 + C40759) * C6772 - (C40897 + C40896) * C139360) *
                C13591 +
            ((C32769 + C32768) * C6771 + (C32880 + C32881) * C6692 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C6772 -
             (C30813 * C5555 + C139600 * C6031 + C30812 * C3991 +
              C30408 * C4497) *
                 C139360) *
                C139587) *
               C139448 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C9225 -
             (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
              C30408 * C2460) *
                 C139384) *
                C13591 +
            ((C30840 + C30839) * C9224 + (C31013 + C31014) * C9074 -
             (C32765 + C32764) * C9225 - (C32988 + C32989) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C9225 -
             ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
               C30408 * C1602) *
                  C9074 +
              (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
               C30408 * C1396) *
                  C9224) +
             (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
              C139600 * C6106) *
                 C139384) *
                C13591 +
            ((C40759 + C40758) * C9225 -
             ((C31949 + C31950) * C9074 + (C31726 + C31725) * C9224) +
             (C41032 + C41033) * C139384) *
                C139587) *
               C139448 * C139360) *
              C139562 +
          ((((C32764 + C32765) * C9225 -
             ((C31014 + C31013) * C9074 + (C30839 + C30840) * C9224) +
             (C32989 + C32988) * C139384) *
                C13591 +
            ((C32769 + C32768) * C9225 -
             ((C31015 + C31016) * C9074 + (C30844 + C30843) * C9224) +
             (C32990 + C32991) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C31725 + C31726) * C9224 + (C31950 + C31949) * C9074 -
             (C40758 + C40759) * C9225 - (C41033 + C41032) * C139384) *
                C13591 +
            ((C31730 + C31729) * C9224 + (C31951 + C31952) * C9074 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C9225 -
             (C30813 * C5635 + C139600 * C6108 + C30812 * C4077 +
              C30408 * C4575) *
                 C139384) *
                C139587) *
               C139448 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C30408 +
            ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) *
                C139448 * C139600) *
               C9074 -
           (((C35552 + C35553) * C139303 + (C35554 + C35555) * C3364) *
                C139448 * C139600 +
            ((C32078 + C32077) * C139303 + (C32076 + C32075) * C3364) *
                C139448 * C30408) *
               C139384) *
              C139602 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) *
                C139448 * C30408 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139448 * C139600) *
               C139384 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139448 * C139600 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C139448 * C30408) *
               C9074) *
              C139593 +
          ((((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) *
                C139448 * C30408 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139448 * C139600) *
               C9074 -
           (((C13596 * C19904 + C139587 * C19908 + C13595 * C19905 +
              C13591 * C19909) *
                 C139303 +
             (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
              C13591 * C19907) *
                 C3364) *
                C139448 * C139600 +
            ((C17990 + C17989) * C139303 + (C17988 + C17987) * C3364) *
                C139448 * C30408) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7477 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139602 -
            (C14329 + C14328) * C7478 - (C14450 + C14451) * C139593 +
            (C16298 + C16297) * C7479 + (C16407 + C16408) * C7400) *
               C139448 * C30408 +
           ((C32075 + C32076) * C7477 + (C32197 + C32198) * C139602 -
            (C17985 + C17986) * C7478 - (C18102 + C18101) * C139593 +
            (C17987 + C17988) * C7479 + (C18104 + C18103) * C7400) *
               C139448 * C139600) *
              C139303 * C9074 +
          (((C17986 + C17985) * C7478 -
            ((C32198 + C32197) * C139602 + (C32076 + C32075) * C7477) +
            (C18101 + C18102) * C139593 - (C17988 + C17987) * C7479 -
            (C18103 + C18104) * C7400) *
               C139448 * C30408 +
           ((C19919 + C19920) * C7478 -
            ((C35666 + C35667) * C139602 + (C35554 + C35555) * C7477) +
            (C20030 + C20029) * C139593 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C7479 -
            (C13596 * C20020 + C139587 * C20022 + C13595 * C20021 +
             C13591 * C20023) *
                C7400) *
               C139448 * C139600) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C9224 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C9074 -
            (C32076 + C32075) * C9225 - (C32313 + C32314) * C139384) *
               C139448 * C30408 +
           ((C32075 + C32076) * C9224 + (C32314 + C32313) * C9074 -
            (C35554 + C35555) * C9225 - (C35775 + C35774) * C139384) *
               C139448 * C139600) *
              C139602 +
          (((C17986 + C17985) * C9225 -
            ((C14567 + C14566) * C9074 + (C14329 + C14328) * C9224) +
            (C18216 + C18215) * C139384) *
               C139448 * C30408 +
           ((C19919 + C19920) * C9225 -
            ((C18215 + C18216) * C9074 + (C17985 + C17986) * C9224) +
            (C20137 + C20138) * C139384) *
               C139448 * C139600) *
              C139593 +
          (((C16298 + C16297) * C9224 + (C16518 + C16517) * C9074 -
            (C17988 + C17987) * C9225 - (C18218 + C18217) * C139384) *
               C139448 * C30408 +
           ((C17987 + C17988) * C9224 + (C18217 + C18218) * C9074 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C9225 -
            (C13596 * C20128 + C139587 * C20130 + C13595 * C20129 +
             C13591 * C20131) *
                C139384) *
               C139448 * C139600) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C30408 +
             (C34904 + C34905) * C139600) *
                C13591 +
            ((C337 * C3364 + C338 * C139303) * C30408 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C9074 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C30408) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C30408) *
                C13591) *
               C139384) *
              C139602 +
          ((((C34924 + C34925) * C30408 + (C36850 + C36851) * C139600) *
                C13591 +
            ((C34912 + C34913) * C30408 + (C36852 + C36853) * C139600) *
                C139587) *
               C139384 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C30408) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C30408) *
                C13591) *
               C9074) *
              C139593 +
          (((((C307 * C2570 + C139448 * C2827) * C3364 +
              (C307 * C2577 + C139448 * C2831) * C139303) *
                 C30408 +
             (C34926 + C34927) * C139600) *
                C13591 +
            ((C2844 * C3364 + C2845 * C139303) * C30408 +
             (C34918 + C34919) * C139600) *
                C139587) *
               C9074 -
           ((((C307 * C19904 + C139448 * C20238) * C139303 +
              (C307 * C19902 + C139448 * C20236) * C3364) *
                 C139600 +
             (C34919 + C34918) * C30408) *
                C139587 +
            (((C307 * C19905 + C139448 * C20239) * C139303 +
              (C307 * C19903 + C139448 * C20237) * C3364) *
                 C139600 +
             (C34927 + C34926) * C30408) *
                C13591) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7477 +
             (C307 * C182 + C139448 * C394) * C139602 -
             (C307 * C832 + C139448 * C1094) * C7478 -
             (C307 * C927 + C139448 * C1195) * C139593 +
             (C307 * C2570 + C139448 * C2827) * C7479 +
             (C307 * C2663 + C139448 * C2921) * C7400) *
                C30408 +
            (C45680 + C45681 - C45682 - C45683 + C45684 + C45685) * C139600) *
               C13591 +
           ((C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C30408 +
            (C39408 + C39409 - C39410 - C39411 + C39412 + C39413) * C139600) *
               C139587) *
              C139303 * C9074 +
          (((C45682 - (C45681 + C45680) + C45683 - C45684 - C45685) * C30408 +
            (C36846 * C7478 - (C36010 * C139602 + C35899 * C7477) +
             C36966 * C139593 - (C307 * C19903 + C139448 * C20237) * C7479 -
             (C307 * C20021 + C139448 * C20338) * C7400) *
                C139600) *
               C13591 +
           ((C39410 - (C39409 + C39408) + C39411 - C39412 - C39413) * C30408 +
            (C36848 * C7478 - (C5018 * C139602 + C4930 * C7477) +
             C36967 * C139593 - (C307 * C19902 + C139448 * C20236) * C7479 -
             (C307 * C20020 + C139448 * C20339) * C7400) *
                C139600) *
               C139587) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[34] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139448 * C308) * C9224 +
                       (C307 * C245 + C139448 * C474) * C9074 - C32431 * C9225 -
                       C32649 * C139384) *
                          C30408 +
                      (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                       C36121 * C139384) *
                          C139600) *
                         C13591 +
                     ((C9449 + C9450 - C9451 - C9452) * C30408 +
                      (C41634 + C41635 - C41636 - C41637) * C139600) *
                         C139587) *
                        C139602 +
                    (((C34920 * C9225 -
                       ((C307 * C1011 + C139448 * C1301) * C9074 +
                        (C307 * C832 + C139448 * C1094) * C9224) +
                       C35140 * C139384) *
                          C30408 +
                      (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                       C37072 * C139384) *
                          C139600) *
                         C13591 +
                     ((C10298 - (C10299 + C10300) + C10301) * C30408 +
                      (C42722 - (C42723 + C42724) + C42725) * C139600) *
                         C139587) *
                        C139593 +
                    ((((C307 * C2570 + C139448 * C2827) * C9224 +
                       (C307 * C2745 + C139448 * C3017) * C9074 -
                       C34922 * C9225 - C35141 * C139384) *
                          C30408 +
                      (C34922 * C9224 + C35141 * C9074 -
                       (C307 * C19903 + C139448 * C20237) * C9225 -
                       (C307 * C20129 + C139448 * C20438) * C139384) *
                          C139600) *
                         C13591 +
                     ((C2844 * C9224 + C3028 * C9074 - C33388 * C9225 -
                       C33598 * C139384) *
                          C30408 +
                      (C33388 * C9224 + C33598 * C9074 -
                       (C307 * C19902 + C139448 * C20236) * C9225 -
                       (C307 * C20128 + C139448 * C20439) * C139384) *
                          C139600) *
                         C139587) *
                        C7400) *
                   C139303) /
                  (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C13591 +
            ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
                C139587) *
               C139448 * C9074 -
           (((C32767 + C32766) * C139303 + (C32765 + C32764) * C3364) *
                C139587 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C13591) *
               C139448 * C139384) *
              C139602 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C13591 +
            ((C40759 + C40758) * C3364 + (C40761 + C40760) * C139303) *
                C139587) *
               C139448 * C139384 -
           (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) *
                C139587 +
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139303 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C3364) *
                C13591) *
               C139448 * C9074) *
              C139593 +
          ((((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
              C139600 * C4412) *
                 C3364 +
             (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
              C139600 * C4418) *
                 C139303) *
                C13591 +
            ((C33707 + C33706) * C3364 + (C33709 + C33708) * C139303) *
                C139587) *
               C139448 * C9074 -
           (((C30813 * C19904 + C139600 * C20540 + C30812 * C3904 +
              C30408 * C4417) *
                 C139303 +
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C3364) *
                C139587 +
            ((C30813 * C19905 + C139600 * C20541 + C30812 * C3905 +
              C30408 * C4418) *
                 C139303 +
             (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
              C30408 * C4412) *
                 C3364) *
                C13591) *
               C139448 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7477 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139602 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C7478 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139593 +
            (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C7479 +
            (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
             C139600 * C4494) *
                C7400) *
               C13591 +
           ((C30840 + C30839) * C7477 + (C30929 + C30930) * C139602 -
            (C31726 + C31725) * C7478 - (C31839 + C31840) * C139593 +
            (C33707 + C33706) * C7479 + (C33812 + C33813) * C7400) *
               C139587) *
              C139448 * C139303 * C9074 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C7478 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139602 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C7477) +
            (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
             C139600 * C6029) *
                C139593 -
            (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
             C30408 * C4412) *
                C7479 -
            (C30813 * C20021 + C139600 * C20650 + C30812 * C3994 +
             C30408 * C4494) *
                C7400) *
               C13591 +
           ((C40759 + C40758) * C7478 -
            ((C32879 + C32878) * C139602 + (C32765 + C32764) * C7477) +
            (C40896 + C40897) * C139593 -
            (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
             C30408 * C4411) *
                C7479 -
            (C30813 * C20020 + C139600 * C20651 + C30812 * C3993 +
             C30408 * C4496) *
                C7400) *
               C139587) *
              C139448 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C9224 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C9074 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C9225 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C13591 +
           ((C30840 + C30839) * C9224 + (C31013 + C31014) * C9074 -
            (C32765 + C32764) * C9225 - (C32988 + C32989) * C139384) *
               C139587) *
              C139448 * C139602 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C9225 -
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C9074 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C9224) +
            (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
             C139600 * C6106) *
                C139384) *
               C13591 +
           ((C40759 + C40758) * C9225 -
            ((C31949 + C31950) * C9074 + (C31726 + C31725) * C9224) +
            (C41032 + C41033) * C139384) *
               C139587) *
              C139448 * C139593 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C9224 +
            (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
             C139600 * C4576) *
                C9074 -
            (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
             C30408 * C4412) *
                C9225 -
            (C30813 * C20129 + C139600 * C20753 + C30812 * C4080 +
             C30408 * C4576) *
                C139384) *
               C13591 +
           ((C33707 + C33706) * C9224 + (C33916 + C33917) * C9074 -
            (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
             C30408 * C4411) *
                C9225 -
            (C30813 * C20128 + C139600 * C20754 + C30812 * C4079 +
             C30408 * C4577) *
                C139384) *
               C139587) *
              C139448 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C30408 +
            ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) *
                C139448 * C139600) *
               C139603 -
           (((C35552 + C35553) * C139303 + (C35554 + C35555) * C3364) *
                C139448 * C139600 +
            ((C32078 + C32077) * C139303 + (C32076 + C32075) * C3364) *
                C139448 * C30408) *
               C139596 +
           (((C35555 + C35554) * C3364 + (C35553 + C35552) * C139303) *
                C139448 * C30408 +
            ((C37450 + C37451) * C3364 + (C37452 + C37453) * C139303) *
                C139448 * C139600) *
               C10691) *
              C6692 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) *
                C139448 * C30408 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139448 * C139600) *
               C139596 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139448 * C139600 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C139448 * C30408) *
               C139603 -
           (((C13596 * C20832 + C139587 * C20836 + C13595 * C20833 +
              C13591 * C20837) *
                 C139303 +
             (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
              C13591 * C20835) *
                 C3364) *
                C139448 * C139600 +
            ((C19922 + C19921) * C139303 + (C19920 + C19919) * C3364) *
                C139448 * C30408) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6771 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C6692 -
            (C14329 + C14328) * C6772 - (C14450 + C14451) * C139360) *
               C139448 * C30408 +
           ((C32075 + C32076) * C6771 + (C32197 + C32198) * C6692 -
            (C17985 + C17986) * C6772 - (C18102 + C18101) * C139360) *
               C139448 * C139600) *
              C139303 * C139603 +
          (((C17986 + C17985) * C6772 -
            ((C32198 + C32197) * C6692 + (C32076 + C32075) * C6771) +
            (C18101 + C18102) * C139360) *
               C139448 * C30408 +
           ((C19919 + C19920) * C6772 -
            ((C35666 + C35667) * C6692 + (C35554 + C35555) * C6771) +
            (C20030 + C20029) * C139360) *
               C139448 * C139600) *
              C139303 * C139596 +
          (((C35555 + C35554) * C6771 + (C35667 + C35666) * C6692 -
            (C19920 + C19919) * C6772 - (C20029 + C20030) * C139360) *
               C139448 * C30408 +
           ((C37450 + C37451) * C6771 + (C37528 + C37529) * C6692 -
            (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
             C13591 * C20835) *
                C6772 -
            (C13596 * C20904 + C139587 * C20906 + C13595 * C20905 +
             C13591 * C20907) *
                C139360) *
               C139448 * C139600) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C10840 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139603 -
            (C32076 + C32075) * C10841 - (C32313 + C32314) * C139596 +
            (C35555 + C35554) * C10842 + (C35774 + C35775) * C10691) *
               C139448 * C30408 +
           ((C32075 + C32076) * C10840 + (C32314 + C32313) * C139603 -
            (C35554 + C35555) * C10841 - (C35775 + C35774) * C139596 +
            (C37450 + C37451) * C10842 + (C37605 + C37604) * C10691) *
               C139448 * C139600) *
              C6692 +
          (((C17986 + C17985) * C10841 -
            ((C14567 + C14566) * C139603 + (C14329 + C14328) * C10840) +
            (C18216 + C18215) * C139596 - (C19920 + C19919) * C10842 -
            (C20138 + C20137) * C10691) *
               C139448 * C30408 +
           ((C19919 + C19920) * C10841 -
            ((C18215 + C18216) * C139603 + (C17985 + C17986) * C10840) +
            (C20137 + C20138) * C139596 -
            (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
             C13591 * C20835) *
                C10842 -
            (C13596 * C20974 + C139587 * C20976 + C13595 * C20975 +
             C13591 * C20977) *
                C10691) *
               C139448 * C139600) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C30408 +
             (C34904 + C34905) * C139600) *
                C13591 +
            ((C337 * C3364 + C338 * C139303) * C30408 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C139603 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C30408) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C30408) *
                C13591) *
               C139596 +
           (((C36837 + C36836) * C30408 + (C37684 + C37685) * C139600) *
                C13591 +
            ((C36835 + C36834) * C30408 + (C37680 + C37681) * C139600) *
                C139587) *
               C10691) *
              C6692 +
          ((((C34924 + C34925) * C30408 + (C36850 + C36851) * C139600) *
                C13591 +
            ((C34912 + C34913) * C30408 + (C36852 + C36853) * C139600) *
                C139587) *
               C139596 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C30408) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C30408) *
                C13591) *
               C139603 -
           ((((C307 * C20832 + C139448 * C21046) * C139303 +
              (C307 * C20830 + C139448 * C21044) * C3364) *
                 C139600 +
             (C36853 + C36852) * C30408) *
                C139587 +
            (((C307 * C20833 + C139448 * C21047) * C139303 +
              (C307 * C20831 + C139448 * C21045) * C3364) *
                 C139600 +
             (C36851 + C36850) * C30408) *
                C13591) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C30408 +
            (C40472 + C40473 - C40474 - C40475) * C139600) *
               C13591 +
           ((C6996 + C6997 - C6998 - C6999) * C30408 + C40484 * C139600) *
               C139587) *
              C139303 * C139603 +
          (((C40474 - (C40473 + C40472) + C40475) * C30408 +
            (C46568 - (C46569 + C46570) + C46571) * C139600) *
               C13591 +
           (C40485 * C30408 + (C40478 - (C40479 + C40480) + C40481) * C139600) *
               C139587) *
              C139303 * C139596 +
          (((C46570 + C46569 - C46568 - C46571) * C30408 +
            (C37682 * C6771 + C37757 * C6692 -
             (C307 * C20831 + C139448 * C21045) * C6772 -
             (C307 * C20905 + C139448 * C21115) * C139360) *
                C139600) *
               C13591 +
           ((C40480 + C40479 - C40478 - C40481) * C30408 +
            (C35900 * C6771 + C36011 * C6692 -
             (C307 * C20830 + C139448 * C21044) * C6772 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C139600) *
               C139587) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C10840 +
             (C307 * C245 + C139448 * C474) * C139603 - C32431 * C10841 -
             C32649 * C139596 + C35899 * C10842 + C36121 * C10691) *
                C30408 +
            (C32431 * C10840 + C32649 * C139603 - C35899 * C10841 -
             C36121 * C139596 + C37682 * C10842 + C37829 * C10691) *
                C139600) *
               C13591 +
           ((C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C30408 +
            (C43712 + C43713 - C43714 - C43715 + C43716 + C43717) * C139600) *
               C139587) *
              C6692 +
          (((C34920 * C10841 -
             ((C307 * C1011 + C139448 * C1301) * C139603 +
              (C307 * C832 + C139448 * C1094) * C10840) +
             C35140 * C139596 - C36846 * C10842 - C37072 * C10691) *
                C30408 +
            (C36846 * C10841 - (C35140 * C139603 + C34920 * C10840) +
             C37072 * C139596 - (C307 * C20831 + C139448 * C21045) * C10842 -
             (C307 * C20975 + C139448 * C21182) * C10691) *
                C139600) *
               C13591 +
           ((C8433 * C10841 - (C1315 * C139603 + C1116 * C10840) +
             C8659 * C139596 - C36848 * C10842 - C37073 * C10691) *
                C30408 +
            (C36848 * C10841 - (C8659 * C139603 + C8433 * C10840) +
             C37073 * C139596 - (C307 * C20830 + C139448 * C21044) * C10842 -
             (C307 * C20974 + C139448 * C21183) * C10691) *
                C139600) *
               C139587) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C13591 +
            ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
                C139587) *
               C139448 * C139603 -
           (((C32767 + C32766) * C139303 + (C32765 + C32764) * C3364) *
                C139587 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C13591) *
               C139448 * C139596 +
           (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C13591 +
            ((C36231 + C36230) * C3364 + (C36233 + C36232) * C139303) *
                C139587) *
               C139448 * C10691) *
              C6692 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C13591 +
            ((C40759 + C40758) * C3364 + (C40761 + C40760) * C139303) *
                C139587) *
               C139448 * C139596 -
           (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) *
                C139587 +
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139303 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C3364) *
                C13591) *
               C139448 * C139603 -
           (((C30813 * C20832 + C139600 * C21252 + C30812 * C5473 +
              C30408 * C5953) *
                 C139303 +
             (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
              C30408 * C5950) *
                 C3364) *
                C139587 +
            ((C30813 * C20833 + C139600 * C21253 + C30812 * C5474 +
              C30408 * C5954) *
                 C139303 +
             (C30813 * C20831 + C139600 * C21251 + C30812 * C5471 +
              C30408 * C5951) *
                 C3364) *
                C13591) *
               C139448 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6771 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C6692 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C6772 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139360) *
               C13591 +
           ((C30840 + C30839) * C6771 + (C30929 + C30930) * C6692 -
            (C31726 + C31725) * C6772 - (C31839 + C31840) * C139360) *
               C139587) *
              C139448 * C139303 * C139603 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C6772 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C6692 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C6771) +
            (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
             C139600 * C6029) *
                C139360) *
               C13591 +
           ((C40759 + C40758) * C6772 -
            ((C32879 + C32878) * C6692 + (C32765 + C32764) * C6771) +
            (C40896 + C40897) * C139360) *
               C139587) *
              C139448 * C139303 * C139596 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C6771 +
            (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
             C139600 * C6561) *
                C6692 -
            (C30813 * C20831 + C139600 * C21251 + C30812 * C5471 +
             C30408 * C5951) *
                C6772 -
            (C30813 * C20905 + C139600 * C21321 + C30812 * C5557 +
             C30408 * C6029) *
                C139360) *
               C13591 +
           ((C36231 + C36230) * C6771 + (C36336 + C36337) * C6692 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C6772 -
            (C30813 * C20904 + C139600 * C21320 + C30812 * C5556 +
             C30408 * C6030) *
                C139360) *
               C139587) *
              C139448 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C10840 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139603 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C10841 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139596 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C10691) *
               C13591 +
           ((C30840 + C30839) * C10840 + (C31013 + C31014) * C139603 -
            (C32765 + C32764) * C10841 - (C32988 + C32989) * C139596 +
            (C36231 + C36230) * C10842 + (C36440 + C36441) * C10691) *
               C139587) *
              C139448 * C6692 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C10841 -
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139603 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C10840) +
            (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
             C139600 * C6106) *
                C139596 -
            (C30813 * C20831 + C139600 * C21251 + C30812 * C5471 +
             C30408 * C5951) *
                C10842 -
            (C30813 * C20975 + C139600 * C21388 + C30812 * C5637 +
             C30408 * C6106) *
                C10691) *
               C13591 +
           ((C40759 + C40758) * C10841 -
            ((C31949 + C31950) * C139603 + (C31726 + C31725) * C10840) +
            (C41032 + C41033) * C139596 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C10842 -
            (C30813 * C20974 + C139600 * C21389 + C30812 * C5636 +
             C30408 * C6107) *
                C10691) *
               C139587) *
              C139448 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139562 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C139448 * C30408 +
           ((C32075 + C32076) * C137108 + (C32077 + C32078) * C139562 -
            (C32079 + C32080) * C137101 - (C32081 + C32082) * C139308) *
               C139448 * C139600) *
              C139372 * C2565 +
          (((C14333 + C14332) * C137101 -
            ((C14331 + C14330) * C139562 + (C14329 + C14328) * C137108) +
            (C14335 + C14334) * C139308) *
               C139448 * C30408 +
           ((C23335 + C23336) * C137101 -
            ((C17983 + C17984) * C139562 + (C17985 + C17986) * C137108) +
            (C23337 + C23338) * C139308) *
               C139448 * C139600) *
              C139372 * C2566 +
          (((C16298 + C16297) * C137108 + (C16296 + C16295) * C139562 -
            (C16294 + C16293) * C137101 - (C16300 + C16299) * C139308) *
               C139448 * C30408 +
           ((C17987 + C17988) * C137108 + (C17989 + C17990) * C139562 -
            (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
             C13591 * C3907) *
                C137101 -
            (C13596 * C3903 + C139587 * C3912 + C13595 * C3904 +
             C13591 * C3913) *
                C139308) *
               C139448 * C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
               C92 -
           (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
               C94 -
           (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139587 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C139448 * C30408 +
          ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
            C139587 * C1702) *
               C103 +
           (C13595 * C1707 + C13591 * C1714 + C13596 * C1706 +
            C139587 * C1713) *
               C92 -
           (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
            C13591 * C1702) *
               C104 -
           (C13596 * C1705 + C139587 * C1712 + C13595 * C1706 +
            C13591 * C1713) *
               C93 +
           (C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
            C139587 * C1704) *
               C105 +
           (C13595 * C1705 + C13591 * C1712 + C13596 * C1709 +
            C139587 * C1715) *
               C94 -
           (C13596 * C1701 + C139587 * C1710 + C13595 * C1699 +
            C13591 * C1704) *
               C106 -
           (C13596 * C1711 + C139587 * C1716 + C13595 * C1709 +
            C13591 * C1715) *
               C95) *
              C139448 * C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139562 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C139448 * C30408 +
           ((C32075 + C32076) * C137108 + (C32077 + C32078) * C139562 -
            (C32079 + C32080) * C137101 - (C32081 + C32082) * C139308) *
               C139448 * C139600) *
              C4653 +
          (((C32080 + C32079) * C137101 -
            ((C32078 + C32077) * C139562 + (C32076 + C32075) * C137108) +
            (C32082 + C32081) * C139308) *
               C139448 * C30408 +
           ((C35550 + C35551) * C137101 -
            ((C35552 + C35553) * C139562 + (C35554 + C35555) * C137108) +
            (C35556 + C35557) * C139308) *
               C139448 * C139600) *
              C4654 +
          (((C35555 + C35554) * C137108 + (C35553 + C35552) * C139562 -
            (C35551 + C35550) * C137101 - (C35557 + C35556) * C139308) *
               C139448 * C30408 +
           ((C13595 * C6165 + C13591 * C6171 + C13596 * C6164 +
             C139587 * C6170) *
                C137108 +
            (C13595 * C6168 + C13591 * C6174 + C13596 * C6167 +
             C139587 * C6173) *
                C139562 -
            (C13596 * C6163 + C139587 * C6169 + C13595 * C6164 +
             C13591 * C6170) *
                C137101 -
            (C13596 * C6166 + C139587 * C6172 + C13595 * C6167 +
             C13591 * C6173) *
                C139308) *
               C139448 * C139600) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C139448 * C30408 +
           ((C32075 + C32076) * C2660 + (C32197 + C32198) * C2565 -
            (C17985 + C17986) * C2661 - (C18102 + C18101) * C2566 +
            (C17987 + C17988) * C2662 + (C18104 + C18103) * C2567) *
               C139448 * C139600) *
              C139562 +
          (((C14333 + C14332) * C2661 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C2565 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C2660) +
            (C14452 + C14453) * C2566 - (C16294 + C16293) * C2662 -
            (C16409 + C16410) * C2567) *
               C139448 * C30408 +
           ((C23335 + C23336) * C2661 -
            ((C32199 + C32200) * C2565 + (C32079 + C32080) * C2660) +
            (C23474 + C23473) * C2566 -
            (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
             C13591 * C3907) *
                C2662 -
            (C13596 * C3992 + C139587 * C3998 + C13595 * C3993 +
             C13591 * C3999) *
                C2567) *
               C139448 * C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139346) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C181 +
            (C13595 * C1794 + C13591 * C1799 + C13596 * C1791 +
             C139587 * C1796) *
                C139346) *
               C139448 * C139600) *
              C92 -
          (((C13596 * C1792 + C139587 * C1797 + C13595 * C1791 +
             C13591 * C1796) *
                C139346 +
            (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
             C13591 * C1702) *
                C181) *
               C139448 * C139600 +
           ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                C139346 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C139448 * C30408) *
              C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139346) *
               C139448 * C30408 +
           ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C181 +
            (C13595 * C1792 + C13591 * C1797 + C13596 * C1793 +
             C139587 * C1798) *
                C139346) *
               C139448 * C139600) *
              C94 -
          (((C13596 * C1795 + C139587 * C1800 + C13595 * C1793 +
             C13591 * C1798) *
                C139346 +
            (C13596 * C1701 + C139587 * C1710 + C13595 * C1699 +
             C13591 * C1704) *
                C181) *
               C139448 * C139600 +
           ((C13596 * C186 + C139587 * C192 + C13595 * C185 + C13591 * C191) *
                C139346 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C139448 * C30408) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C30408 +
            ((C32075 + C32076) * C181 + (C32197 + C32198) * C139346) * C139448 *
                C139600) *
               C139562 -
           (((C32199 + C32200) * C139346 + (C32079 + C32080) * C181) * C139448 *
                C139600 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139448 * C30408) *
               C139308) *
              C4653 +
          ((((C32080 + C32079) * C181 + (C32200 + C32199) * C139346) * C139448 *
                C30408 +
            ((C35550 + C35551) * C181 + (C35664 + C35665) * C139346) * C139448 *
                C139600) *
               C139308 -
           (((C35666 + C35667) * C139346 + (C35554 + C35555) * C181) * C139448 *
                C139600 +
            ((C32198 + C32197) * C139346 + (C32076 + C32075) * C181) * C139448 *
                C30408) *
               C139562) *
              C4654 +
          ((((C35555 + C35554) * C181 + (C35667 + C35666) * C139346) * C139448 *
                C30408 +
            ((C13595 * C6165 + C13591 * C6171 + C13596 * C6164 +
              C139587 * C6170) *
                 C181 +
             (C13595 * C6227 + C13591 * C6230 + C13596 * C6226 +
              C139587 * C6229) *
                 C139346) *
                C139448 * C139600) *
               C139562 -
           (((C13596 * C6225 + C139587 * C6228 + C13595 * C6226 +
              C13591 * C6229) *
                 C139346 +
             (C13596 * C6163 + C139587 * C6169 + C13595 * C6164 +
              C13591 * C6170) *
                 C181) *
                C139448 * C139600 +
            ((C35665 + C35664) * C139346 + (C35551 + C35550) * C181) * C139448 *
                C30408) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C30408 +
            ((C32075 + C32076) * C244 + (C32314 + C32313) * C139372) * C139448 *
                C139600) *
               C2565 -
           (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
                C139600 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
                C30408) *
               C2566 +
           (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C139448 *
                C30408 +
            ((C17987 + C17988) * C244 + (C18217 + C18218) * C139372) * C139448 *
                C139600) *
               C2567) *
              C139562 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C139448 *
                C30408 +
            ((C23335 + C23336) * C244 + (C23609 + C23610) * C139372) * C139448 *
                C139600) *
               C2566 -
           (((C32316 + C32315) * C139372 + (C32079 + C32080) * C244) * C139448 *
                C139600 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139448 * C30408) *
               C2565 -
           (((C13596 * C4078 + C139587 * C4084 + C13595 * C4079 +
              C13591 * C4085) *
                 C139372 +
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C244) *
                C139448 * C139600 +
            ((C16520 + C16519) * C139372 + (C16294 + C16293) * C244) * C139448 *
                C30408) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C244 +
            (C13595 * C1879 + C13591 * C1884 + C13596 * C1878 +
             C139587 * C1883) *
                C139372) *
               C139448 * C139600) *
              C139346 * C92 -
          (((C13596 * C1877 + C139587 * C1882 + C13595 * C1878 +
             C13591 * C1883) *
                C139372 +
            (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
             C13591 * C1702) *
                C244) *
               C139448 * C139600 +
           ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                C139372 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C139448 * C30408) *
              C139346 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139372) *
               C139448 * C30408 +
           ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C244 +
            (C13595 * C1877 + C13591 * C1882 + C13596 * C1880 +
             C139587 * C1885) *
                C139372) *
               C139448 * C139600) *
              C139346 * C94 -
          (((C13596 * C1881 + C139587 * C1886 + C13595 * C1880 +
             C13591 * C1885) *
                C139372 +
            (C13596 * C1701 + C139587 * C1710 + C13595 * C1699 +
             C13591 * C1704) *
                C244) *
               C139448 * C139600 +
           ((C13596 * C249 + C139587 * C255 + C13595 * C248 + C13591 * C254) *
                C139372 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C139448 * C30408) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C4828 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C4653 -
            (C32076 + C32075) * C4829 - (C32313 + C32314) * C4654 +
            (C35555 + C35554) * C4830 + (C35774 + C35775) * C4655) *
               C139448 * C30408 +
           ((C32075 + C32076) * C4828 + (C32314 + C32313) * C4653 -
            (C35554 + C35555) * C4829 - (C35775 + C35774) * C4654 +
            (C13595 * C6165 + C13591 * C6171 + C13596 * C6164 +
             C139587 * C6170) *
                C4830 +
            (C13595 * C6287 + C13591 * C6290 + C13596 * C6286 +
             C139587 * C6289) *
                C4655) *
               C139448 * C139600) *
              C139346 * C139562 +
          (((C32080 + C32079) * C4829 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C4653 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C4828) +
            (C32315 + C32316) * C4654 - (C35551 + C35550) * C4830 -
            (C35776 + C35777) * C4655) *
               C139448 * C30408 +
           ((C35550 + C35551) * C4829 -
            ((C32316 + C32315) * C4653 + (C32079 + C32080) * C4828) +
            (C35777 + C35776) * C4654 -
            (C13596 * C6163 + C139587 * C6169 + C13595 * C6164 +
             C13591 * C6170) *
                C4830 -
            (C13596 * C6285 + C139587 * C6288 + C13595 * C6286 +
             C13591 * C6289) *
                C4655) *
               C139448 * C139600) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C30408 +
            (C32431 * C137108 + C32432 * C139562 - C1984 * C137101 -
             C1985 * C139308) *
                C139600) *
               C13591 +
           ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
             C340 * C139308) *
                C30408 +
            (C1984 * C137108 + C1985 * C139562 - C1986 * C137101 -
             C1987 * C139308) *
                C139600) *
               C139587) *
              C139372 * C2565 +
          (((C1116 * C137101 -
             ((C307 * C839 + C139448 * C1098) * C139562 +
              (C307 * C832 + C139448 * C1094) * C137108) +
             C1117 * C139308) *
                C30408 +
            (C8433 * C137101 -
             ((C307 * C3900 + C139448 * C4167) * C139562 +
              (C307 * C3891 + C139448 * C4161) * C137108) +
             C8434 * C139308) *
                C139600) *
               C13591 +
           ((C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
             C1119 * C139308) *
                C30408 +
            (C8435 * C137101 - (C8434 * C139562 + C8433 * C137108) +
             C8436 * C139308) *
                C139600) *
               C139587) *
              C139372 * C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C137108 +
             (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
             C2845 * C139308) *
                C30408 +
            ((C307 * C3896 + C139448 * C4166) * C137108 +
             (C307 * C3905 + C139448 * C4172) * C139562 - C33388 * C137101 -
             C33389 * C139308) *
                C139600) *
               C13591 +
           ((C2844 * C137108 + C2845 * C139562 - C2846 * C137101 -
             C2847 * C139308) *
                C30408 +
            (C33388 * C137108 + C33389 * C139562 -
             (C307 * C3894 + C139448 * C4164) * C137101 -
             (C307 * C3903 + C139448 * C4170) * C139308) *
                C139600) *
               C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C103 +
            (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C30408 +
           ((C307 * C1700 + C139448 * C1962) * C103 +
            (C307 * C1707 + C139448 * C1966) * C92 - C1984 * C104 -
            C1985 * C93 + C1986 * C105 + C1987 * C94 - C1988 * C106 -
            C1989 * C95) *
               C139600) *
              C13591 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C30408 +
           (C1984 * C103 + C1985 * C92 - C1986 * C104 - C1987 * C93 +
            C1988 * C105 + C1989 * C94 -
            (C307 * C1701 + C139448 * C1965) * C106 -
            (C307 * C1711 + C139448 * C1970) * C95) *
               C139600) *
              C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C30408 +
            (C35876 + C35877 - C35878 - C35879) * C139600) *
               C13591 +
           ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
             C340 * C139308) *
                C30408 +
            (C35880 + C35881 - C35882 - C35883) * C139600) *
               C139587) *
              C4653 +
          (((C35878 - (C35877 + C35876) + C35879) * C30408 +
            (C35884 - (C35902 + C35903) + C35889) * C139600) *
               C13591 +
           ((C35882 - (C35881 + C35880) + C35883) * C30408 +
            (C35890 - (C35891 + C35892) + C35893) * C139600) *
               C139587) *
              C4654 +
          (((C35903 + C35902 - C35884 - C35889) * C30408 +
            ((C307 * C6165 + C139448 * C6343) * C137108 +
             (C307 * C6168 + C139448 * C6346) * C139562 - C35900 * C137101 -
             C35901 * C139308) *
                C139600) *
               C13591 +
           ((C35892 + C35891 - C35890 - C35893) * C30408 +
            (C35900 * C137108 + C35901 * C139562 -
             (C307 * C6163 + C139448 * C6341) * C137101 -
             (C307 * C6166 + C139448 * C6344) * C139308) *
                C139600) *
               C139587) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C30408 +
            (C32431 * C2660 + C32539 * C2565 -
             (C307 * C3891 + C139448 * C4161) * C2661 -
             (C307 * C3989 + C139448 * C4247) * C2566 +
             (C307 * C3896 + C139448 * C4166) * C2662 +
             (C307 * C3994 + C139448 * C4248) * C2567) *
                C139600) *
               C13591 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C30408 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139562 +
          (((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C30408 +
            (C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C139600) *
               C13591 +
           ((C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C30408 +
            (C8435 * C2661 - (C2079 * C2565 + C1986 * C2660) + C8547 * C2566 -
             (C307 * C3894 + C139448 * C4164) * C2662 -
             (C307 * C3992 + C139448 * C4252) * C2567) *
                C139600) *
               C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C181 +
             (C307 * C1794 + C139448 * C2066) * C139346) *
                C139600) *
               C13591 +
           ((C401 + C417) * C30408 + (C2069 + C2081) * C139600) * C139587) *
              C92 -
          ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
           ((C2081 + C2069) * C139600 + (C417 + C401) * C30408) * C13591) *
              C93 +
          ((C421 * C30408 + (C2072 + C2082) * C139600) * C13591 +
           ((C409 + C419) * C30408 + (C2075 + C2083) * C139600) * C139587) *
              C94 -
          ((((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139600 +
            (C420 + C410) * C30408) *
               C139587 +
           ((C2083 + C2075) * C139600 + C422 * C30408) * C13591) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C30408 +
             (C32533 + C32540) * C139600) *
                C13591 +
            ((C401 + C417) * C30408 + C32536 * C139600) * C139587) *
               C139562 -
           ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C30408) * C13591) *
               C139308) *
              C4653 +
          (((C32536 * C30408 + C36002 * C139600) * C13591 +
            (C32538 * C30408 + (C5015 + C5021) * C139600) * C139587) *
               C139308 -
           ((C36003 * C139600 + C32537 * C30408) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C30408) *
                C13591) *
               C139562) *
              C4654 +
          ((((C36006 + C36012) * C30408 +
             ((C307 * C6165 + C139448 * C6343) * C181 +
              (C307 * C6227 + C139448 * C6399) * C139346) *
                 C139600) *
                C13591 +
            (C36002 * C30408 + (C36007 + C36013) * C139600) * C139587) *
               C139562 -
           ((((C307 * C6225 + C139448 * C6397) * C139346 +
              (C307 * C6163 + C139448 * C6341) * C181) *
                 C139600 +
             (C5021 + C5015) * C30408) *
                C139587 +
            ((C36013 + C36007) * C139600 + C36003 * C30408) * C13591) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C30408 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
               C2565 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
            (((C307 * C4075 + C139448 * C4327) * C139372 +
              (C307 * C3891 + C139448 * C4161) * C244) *
                 C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C30408) *
                C13591) *
               C2566 +
           ((((C307 * C2570 + C139448 * C2827) * C244 +
              (C307 * C2745 + C139448 * C3017) * C139372) *
                 C30408 +
             ((C307 * C3896 + C139448 * C4166) * C244 +
              (C307 * C4080 + C139448 * C4330) * C139372) *
                 C139600) *
                C13591 +
            ((C3022 + C3030) * C30408 + (C33595 + C33599) * C139600) *
                C139587) *
               C2567) *
              C139562 +
          ((((C1310 + C1318) * C30408 + (C31608 + C31607) * C139600) * C13591 +
            ((C1307 + C1317) * C30408 + (C31609 + C31610) * C139600) *
                C139587) *
               C2566 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
               C2565 -
           ((((C307 * C4078 + C139448 * C4332) * C139372 +
              (C307 * C3894 + C139448 * C4164) * C244) *
                 C139600 +
             (C3031 + C3025) * C30408) *
                C139587 +
            ((C33599 + C33595) * C139600 + (C3030 + C3022) * C30408) * C13591) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C244 +
             (C307 * C1879 + C139448 * C2159) * C139372) *
                C139600) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
              C139346 * C92 -
          (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
           ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
              C139346 * C93 +
          ((C501 * C30408 + (C30744 + C30743) * C139600) * C13591 +
           ((C489 + C499) * C30408 + (C30745 + C30746) * C139600) * C139587) *
              C139346 * C94 -
          ((((C307 * C1881 + C139448 * C2163) * C139372 +
             (C307 * C1701 + C139448 * C1965) * C244) *
                C139600 +
            (C500 + C490) * C30408) *
               C139587 +
           ((C30746 + C30745) * C139600 + C502 * C30408) * C13591) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C4828 +
             (C307 * C245 + C139448 * C474) * C4653 - C32431 * C4829 -
             C32649 * C4654 + C35899 * C4830 + C36121 * C4655) *
                C30408 +
            (C32431 * C4828 + C32649 * C4653 - C35899 * C4829 - C36121 * C4654 +
             (C307 * C6165 + C139448 * C6343) * C4830 +
             (C307 * C6287 + C139448 * C6450) * C4655) *
                C139600) *
               C13591 +
           ((C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C30408 +
            (C36114 + C36115 - C36116 - C36117 + C36118 + C36123) * C139600) *
               C139587) *
              C139346 * C139562 +
          (((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C30408 +
            (C36116 - (C36115 + C36114) + C36117 - C36118 - C36123) * C139600) *
               C13591 +
           ((C5109 - (C5108 + C5107) + C5110 - C5111 - C5117) * C30408 +
            (C4932 * C4829 - (C2182 * C4653 + C1986 * C4828) + C5115 * C4654 -
             (C307 * C6163 + C139448 * C6341) * C4830 -
             (C307 * C6285 + C139448 * C6452) * C4655) *
                C139600) *
               C139587) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139562 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
               C13591 +
           ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139562 -
            (C30844 + C30843) * C137101 - (C30846 + C30845) * C139308) *
               C139587) *
              C139448 * C139372 * C2565 +
          (((C31725 + C31726) * C137101 -
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139562 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C137108) +
            (C31727 + C31728) * C139308) *
               C13591 +
           ((C31730 + C31729) * C137101 -
            ((C31728 + C31727) * C139562 + (C31726 + C31725) * C137108) +
            (C31732 + C31731) * C139308) *
               C139587) *
              C139448 * C139372 * C2566 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C137108 +
            (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
             C139600 * C4418) *
                C139562 -
            (C33706 + C33707) * C137101 - (C33708 + C33709) * C139308) *
               C13591 +
           ((C33707 + C33706) * C137108 + (C33709 + C33708) * C139562 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C137101 -
            (C30813 * C3903 + C139600 * C4416 + C30812 * C2579 +
             C30408 * C3111) *
                C139308) *
               C139587) *
              C139448 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C13591 +
          ((C30840 + C30839) * C103 + (C30842 + C30841) * C92 -
           (C30844 + C30843) * C104 - (C30846 + C30845) * C93 +
           (C30848 + C30847) * C105 + (C30850 + C30849) * C94 -
           (C30813 * C1701 + C139600 * C2267 + C30812 * C111 + C30408 * C559) *
               C106 -
           (C30813 * C1711 + C139600 * C2272 + C30812 * C122 + C30408 * C565) *
               C95) *
              C139587) *
         C139448 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139562 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
               C13591 +
           ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139562 -
            (C30844 + C30843) * C137101 - (C30846 + C30845) * C139308) *
               C139587) *
              C139448 * C4653 +
          (((C32764 + C32765) * C137101 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139562 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C137108) +
            (C32766 + C32767) * C139308) *
               C13591 +
           ((C32769 + C32768) * C137101 -
            ((C32767 + C32766) * C139562 + (C32765 + C32764) * C137108) +
            (C32771 + C32770) * C139308) *
               C139587) *
              C139448 * C4654 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C137108 +
            (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
             C139600 * C6508) *
                C139562 -
            (C36230 + C36231) * C137101 - (C36232 + C36233) * C139308) *
               C13591 +
           ((C36231 + C36230) * C137108 + (C36233 + C36232) * C139562 -
            (C30813 * C6163 + C139600 * C6503 + C30812 * C4658 +
             C30408 * C5193) *
                C137101 -
            (C30813 * C6166 + C139600 * C6506 + C30812 * C4665 +
             C30408 * C5197) *
                C139308) *
               C139587) *
              C139448 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C2661 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C2566 +
            (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
             C139600 * C4494) *
                C2567) *
               C13591 +
           ((C30840 + C30839) * C2660 + (C30929 + C30930) * C2565 -
            (C31726 + C31725) * C2661 - (C31839 + C31840) * C2566 +
            (C33707 + C33706) * C2662 + (C33812 + C33813) * C2567) *
               C139587) *
              C139448 * C139562 +
          (((C31725 + C31726) * C2661 -
            ((C30930 + C30929) * C2565 + (C30839 + C30840) * C2660) +
            (C31840 + C31839) * C2566 - (C33706 + C33707) * C2662 -
            (C33813 + C33812) * C2567) *
               C13591 +
           ((C31730 + C31729) * C2661 -
            ((C30931 + C30932) * C2565 + (C30844 + C30843) * C2660) +
            (C31841 + C31842) * C2566 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C2662 -
            (C30813 * C3992 + C139600 * C4498 + C30812 * C2665 +
             C30408 * C3201) *
                C2567) *
               C139587) *
              C139448 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139346) *
               C13591 +
           ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) * C139587) *
              C139448 * C92 -
          (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
           ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
              C139448 * C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C13591 +
           ((C30848 + C30847) * C181 + (C30933 + C30934) * C139346) * C139587) *
              C139448 * C94 -
          (((C30813 * C1795 + C139600 * C2369 + C30812 * C186 + C30408 * C645) *
                C139346 +
            (C30813 * C1701 + C139600 * C2267 + C30812 * C111 + C30408 * C559) *
                C181) *
               C139587 +
           ((C30934 + C30933) * C139346 + (C30847 + C30848) * C181) * C13591) *
              C139448 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) *
                C139587) *
               C139448 * C139562 -
           (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
               C139448 * C139308) *
              C4653 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C13591 +
            ((C32769 + C32768) * C181 + (C32880 + C32881) * C139346) *
                C139587) *
               C139448 * C139308 -
           (((C32879 + C32878) * C139346 + (C32765 + C32764) * C181) * C139587 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C13591) *
               C139448 * C139562) *
              C4654 +
          ((((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C13591 +
            ((C36231 + C36230) * C181 + (C36336 + C36337) * C139346) *
                C139587) *
               C139448 * C139562 -
           (((C30813 * C6225 + C139600 * C6559 + C30812 * C4748 +
              C30408 * C5287) *
                 C139346 +
             (C30813 * C6163 + C139600 * C6503 + C30812 * C4658 +
              C30408 * C5193) *
                 C181) *
                C139587 +
            ((C36337 + C36336) * C139346 + (C36230 + C36231) * C181) * C13591) *
               C139448 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) *
                C139587) *
               C139448 * C2565 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139372 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C244) *
                C13591) *
               C139448 * C2566 +
           (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
              C139600 * C4412) *
                 C244 +
             (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
              C139600 * C4576) *
                 C139372) *
                C13591 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) *
                C139587) *
               C139448 * C2567) *
              C139562 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C13591 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                C139587) *
               C139448 * C2566 -
           (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
               C139448 * C2565 -
           (((C30813 * C4078 + C139600 * C4578 + C30812 * C2747 +
              C30408 * C3297) *
                 C139372 +
             (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
              C30408 * C3107) *
                 C244) *
                C139587 +
            ((C33917 + C33916) * C139372 + (C33706 + C33707) * C244) * C13591) *
               C139448 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) * C139587) *
              C139448 * C139346 * C92 -
          (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
           ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
              C139448 * C139346 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C13591 +
           ((C30848 + C30847) * C244 + (C31017 + C31018) * C139372) * C139587) *
              C139448 * C139346 * C94 -
          (((C30813 * C1881 + C139600 * C2464 + C30812 * C249 + C30408 * C723) *
                C139372 +
            (C30813 * C1701 + C139600 * C2267 + C30812 * C111 + C30408 * C559) *
                C244) *
               C139587 +
           ((C31018 + C31017) * C139372 + (C30847 + C30848) * C244) * C13591) *
              C139448 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C4828 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C4653 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C4829 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C4654 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C4655) *
               C13591 +
           ((C30840 + C30839) * C4828 + (C31013 + C31014) * C4653 -
            (C32765 + C32764) * C4829 - (C32988 + C32989) * C4654 +
            (C36231 + C36230) * C4830 + (C36440 + C36441) * C4655) *
               C139587) *
              C139448 * C139346 * C139562 +
          (((C32764 + C32765) * C4829 -
            ((C31014 + C31013) * C4653 + (C30839 + C30840) * C4828) +
            (C32989 + C32988) * C4654 - (C36230 + C36231) * C4830 -
            (C36441 + C36440) * C4655) *
               C13591 +
           ((C32769 + C32768) * C4829 -
            ((C31015 + C31016) * C4653 + (C30844 + C30843) * C4828) +
            (C32990 + C32991) * C4654 -
            (C30813 * C6163 + C139600 * C6503 + C30812 * C4658 +
             C30408 * C5193) *
                C4830 -
            (C30813 * C6285 + C139600 * C6614 + C30812 * C4833 +
             C30408 * C5375) *
                C4655) *
               C139587) *
              C139448 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C3364 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139303) *
               C139448 * C30408 +
           ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) * C139448 *
               C139600) *
              C139372 * C3360 -
          (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) * C139448 *
               C139600 +
           ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) * C139448 *
               C30408) *
              C139372 * C3361 +
          (((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C139448 *
               C30408 +
           ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) * C139448 *
               C139600) *
              C139372 * C3362 -
          (((C13596 * C17960 + C139587 * C17964 + C13595 * C17961 +
             C13591 * C17965) *
                C139303 +
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C3364) *
               C139448 * C139600 +
           ((C17270 + C17269) * C139303 + (C17268 + C17267) * C3364) * C139448 *
               C30408) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C826 +
            (C13595 * C1707 + C13591 * C1714 + C13596 * C1706 +
             C139587 * C1713) *
                C821 -
            (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
             C13591 * C1702) *
                C827 -
            (C13596 * C1705 + C139587 * C1712 + C13595 * C1706 +
             C13591 * C1713) *
                C822 +
            (C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C828 +
            (C13595 * C1705 + C13591 * C1712 + C13596 * C1709 +
             C139587 * C1715) *
                C823) *
               C139448 * C139600) *
              C139372 * C139570 +
          (((C14333 + C14332) * C827 -
            ((C14331 + C14330) * C821 + (C14329 + C14328) * C826) +
            (C14335 + C14334) * C822 - (C14337 + C14336) * C828 -
            (C14339 + C14338) * C823) *
               C139448 * C30408 +
           ((C23335 + C23336) * C827 -
            ((C17983 + C17984) * C821 + (C17985 + C17986) * C826) +
            (C23337 + C23338) * C822 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C828 -
            (C13596 * C8122 + C139587 * C8123 + C13595 * C3902 +
             C13591 * C3911) *
                C823) *
               C139448 * C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C30408 +
            ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) *
                C139448 * C139600) *
               C4653 -
           (((C35552 + C35553) * C139303 + (C35554 + C35555) * C3364) *
                C139448 * C139600 +
            ((C32078 + C32077) * C139303 + (C32076 + C32075) * C3364) *
                C139448 * C30408) *
               C4654 +
           (((C35555 + C35554) * C3364 + (C35553 + C35552) * C139303) *
                C139448 * C30408 +
            ((C13595 * C6165 + C13591 * C6171 + C13596 * C6164 +
              C139587 * C6170) *
                 C3364 +
             (C13595 * C6168 + C13591 * C6174 + C13596 * C6167 +
              C139587 * C6173) *
                 C139303) *
                C139448 * C139600) *
               C4655) *
              C139570 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) *
                C139448 * C30408 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139448 * C139600) *
               C4654 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139448 * C139600 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C139448 * C30408) *
               C4653 -
           (((C13596 * C20832 + C139587 * C20836 + C13595 * C20833 +
              C13591 * C20837) *
                 C139303 +
             (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
              C13591 * C20835) *
                 C3364) *
                C139448 * C139600 +
            ((C19922 + C19921) * C139303 + (C19920 + C19919) * C3364) *
                C139448 * C30408) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (-std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C3427 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
               C3360 -
           (C14329 + C14328) * C3428 - (C14450 + C14451) * C3361 +
           (C16298 + C16297) * C3429 + (C16407 + C16408) * C3362 -
           (C17268 + C17267) * C3430 - (C17345 + C17346) * C3363) *
              C139448 * C30408 +
          ((C32075 + C32076) * C3427 + (C32197 + C32198) * C3360 -
           (C17985 + C17986) * C3428 - (C18102 + C18101) * C3361 +
           (C17987 + C17988) * C3429 + (C18104 + C18103) * C3362 -
           (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
            C13591 * C17963) *
               C3430 -
           (C13596 * C18088 + C139587 * C18090 + C13595 * C18089 +
            C13591 * C18091) *
               C3363) *
              C139448 * C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C923 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139570 -
            (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C923 +
            (C13595 * C1794 + C13591 * C1799 + C13596 * C1791 +
             C139587 * C1796) *
                C139570 -
            (C17985 + C17986) * C924 - (C18102 + C18101) * C139360) *
               C139448 * C139600) *
              C821 +
          (((C14333 + C14332) * C924 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139570 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C923) +
            (C14452 + C14453) * C139360) *
               C139448 * C30408 +
           ((C23335 + C23336) * C924 -
            ((C13596 * C1792 + C139587 * C1797 + C13595 * C1791 +
              C13591 * C1796) *
                 C139570 +
             (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
              C13591 * C1702) *
                 C923) +
            (C23474 + C23473) * C139360) *
               C139448 * C139600) *
              C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C923 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139570 -
            (C14337 + C14336) * C924 - (C14454 + C14455) * C139360) *
               C139448 * C30408 +
           ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C923 +
            (C13595 * C1792 + C13591 * C1797 + C13596 * C1793 +
             C139587 * C1798) *
                C139570 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C924 -
            (C13596 * C8222 + C139587 * C8223 + C13595 * C3991 +
             C13591 * C3997) *
                C139360) *
               C139448 * C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C923 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139570 -
            (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
               C139448 * C30408 +
           ((C32075 + C32076) * C923 + (C32197 + C32198) * C139570 -
            (C17985 + C17986) * C924 - (C18102 + C18101) * C139360) *
               C139448 * C139600) *
              C139303 * C4653 +
          (((C17986 + C17985) * C924 -
            ((C32198 + C32197) * C139570 + (C32076 + C32075) * C923) +
            (C18101 + C18102) * C139360) *
               C139448 * C30408 +
           ((C19919 + C19920) * C924 -
            ((C35666 + C35667) * C139570 + (C35554 + C35555) * C923) +
            (C20030 + C20029) * C139360) *
               C139448 * C139600) *
              C139303 * C4654 +
          (((C35555 + C35554) * C923 + (C35667 + C35666) * C139570 -
            (C19920 + C19919) * C924 - (C20029 + C20030) * C139360) *
               C139448 * C30408 +
           ((C13595 * C6165 + C13591 * C6171 + C13596 * C6164 +
             C139587 * C6170) *
                C923 +
            (C13595 * C6227 + C13591 * C6230 + C13596 * C6226 +
             C139587 * C6229) *
                C139570 -
            (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
             C13591 * C20835) *
                C924 -
            (C13596 * C20904 + C139587 * C20906 + C13595 * C20905 +
             C13591 * C20907) *
                C139360) *
               C139448 * C139600) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C30408 +
           ((C32075 + C32076) * C244 + (C32314 + C32313) * C139372) * C139448 *
               C139600) *
              C3360 -
          (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
               C139600 +
           ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
               C30408) *
              C3361 +
          (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C139448 *
               C30408 +
           ((C17987 + C17988) * C244 + (C18217 + C18218) * C139372) * C139448 *
               C139600) *
              C3362 -
          (((C13596 * C18202 + C139587 * C18204 + C13595 * C18203 +
             C13591 * C18205) *
                C139372 +
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C244) *
               C139448 * C139600 +
           ((C17422 + C17421) * C139372 + (C17268 + C17267) * C244) * C139448 *
               C30408) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C30408 +
            ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
              C139587 * C1702) *
                 C244 +
             (C13595 * C1879 + C13591 * C1884 + C13596 * C1878 +
              C139587 * C1883) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
                C139600 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
                C30408) *
               C139360) *
              C821 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C139448 *
                C30408 +
            ((C23335 + C23336) * C244 + (C23609 + C23610) * C139372) * C139448 *
                C139600) *
               C139360 -
           (((C13596 * C1877 + C139587 * C1882 + C13595 * C1878 +
              C13591 * C1883) *
                 C139372 +
             (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
              C13591 * C1702) *
                 C244) *
                C139448 * C139600 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139448 * C30408) *
               C139570) *
              C822 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                 C139372) *
                C139448 * C30408 +
            ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
              C139587 * C1704) *
                 C244 +
             (C13595 * C1877 + C13591 * C1882 + C13596 * C1880 +
              C139587 * C1885) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C13596 * C8322 + C139587 * C8323 + C13595 * C4077 +
              C13591 * C4083) *
                 C139372 +
             (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
              C13591 * C3899) *
                 C244) *
                C139448 * C139600 +
            ((C14571 + C14570) * C139372 + (C14337 + C14336) * C244) * C139448 *
                C30408) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C4828 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C4653 -
            (C32076 + C32075) * C4829 - (C32313 + C32314) * C4654 +
            (C35555 + C35554) * C4830 + (C35774 + C35775) * C4655) *
               C139448 * C30408 +
           ((C32075 + C32076) * C4828 + (C32314 + C32313) * C4653 -
            (C35554 + C35555) * C4829 - (C35775 + C35774) * C4654 +
            (C13595 * C6165 + C13591 * C6171 + C13596 * C6164 +
             C139587 * C6170) *
                C4830 +
            (C13595 * C6287 + C13591 * C6290 + C13596 * C6286 +
             C139587 * C6289) *
                C4655) *
               C139448 * C139600) *
              C139570 +
          (((C17986 + C17985) * C4829 -
            ((C14567 + C14566) * C4653 + (C14329 + C14328) * C4828) +
            (C18216 + C18215) * C4654 - (C19920 + C19919) * C4830 -
            (C20138 + C20137) * C4655) *
               C139448 * C30408 +
           ((C19919 + C19920) * C4829 -
            ((C18215 + C18216) * C4653 + (C17985 + C17986) * C4828) +
            (C20137 + C20138) * C4654 -
            (C13596 * C20830 + C139587 * C20834 + C13595 * C20831 +
             C13591 * C20835) *
                C4830 -
            (C13596 * C20974 + C139587 * C20976 + C13595 * C20975 +
             C13591 * C20977) *
                C4655) *
               C139448 * C139600) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C30408 +
            (C32431 * C3364 + C32432 * C139303) * C139600) *
               C13591 +
           ((C337 * C3364 + C338 * C139303) * C30408 +
            (C1984 * C3364 + C1985 * C139303) * C139600) *
               C139587) *
              C139372 * C3360 -
          (((C8434 * C139303 + C8433 * C3364) * C139600 +
            (C1117 * C139303 + C1116 * C3364) * C30408) *
               C139587 +
           (((C307 * C3900 + C139448 * C4167) * C139303 +
             (C307 * C3891 + C139448 * C4161) * C3364) *
                C139600 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C30408) *
               C13591) *
              C139372 * C3361 +
          ((((C307 * C2570 + C139448 * C2827) * C3364 +
             (C307 * C2577 + C139448 * C2831) * C139303) *
                C30408 +
            ((C307 * C3896 + C139448 * C4166) * C3364 +
             (C307 * C3905 + C139448 * C4172) * C139303) *
                C139600) *
               C13591 +
           ((C2844 * C3364 + C2845 * C139303) * C30408 +
            (C33388 * C3364 + C33389 * C139303) * C139600) *
               C139587) *
              C139372 * C3362 -
          ((((C307 * C17960 + C139448 * C18318) * C139303 +
             (C307 * C17958 + C139448 * C18316) * C3364) *
                C139600 +
            ((C307 * C3369 + C139448 * C3547) * C139303 +
             (C307 * C3366 + C139448 * C3544) * C3364) *
                C30408) *
               C139587 +
           (((C307 * C17961 + C139448 * C18319) * C139303 +
             (C307 * C17959 + C139448 * C18317) * C3364) *
                C139600 +
            ((C307 * C3370 + C139448 * C3548) * C139303 +
             (C307 * C3367 + C139448 * C3545) * C3364) *
                C30408) *
               C13591) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C826 +
             (C307 * C1707 + C139448 * C1966) * C821 - C1984 * C827 -
             C1985 * C822 + C1986 * C828 + C1987 * C823) *
                C139600) *
               C13591 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C30408 +
            (C1984 * C826 + C1985 * C821 - C1986 * C827 - C1987 * C822 +
             C1988 * C828 + C1989 * C823) *
                C139600) *
               C139587) *
              C139372 * C139570 +
          (((C1116 * C827 -
             ((C307 * C839 + C139448 * C1098) * C821 +
              (C307 * C832 + C139448 * C1094) * C826) +
             C1117 * C822 - C1118 * C828 - C1119 * C823) *
                C30408 +
            (C8433 * C827 -
             ((C307 * C3900 + C139448 * C4167) * C821 +
              (C307 * C3891 + C139448 * C4161) * C826) +
             C8434 * C822 - C8435 * C828 - C8436 * C823) *
                C139600) *
               C13591 +
           ((C1118 * C827 - (C1117 * C821 + C1116 * C826) + C1119 * C822 -
             C1120 * C828 - C1121 * C823) *
                C30408 +
            (C8435 * C827 - (C8434 * C821 + C8433 * C826) + C8436 * C822 -
             (C307 * C8120 + C139448 * C8422) * C828 -
             (C307 * C8122 + C139448 * C8423) * C823) *
                C139600) *
               C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C30408 +
             (C34904 + C34905) * C139600) *
                C13591 +
            ((C337 * C3364 + C338 * C139303) * C30408 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C4653 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C30408) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C30408) *
                C13591) *
               C4654 +
           (((C36837 + C36836) * C30408 +
             ((C307 * C6165 + C139448 * C6343) * C3364 +
              (C307 * C6168 + C139448 * C6346) * C139303) *
                 C139600) *
                C13591 +
            ((C36835 + C36834) * C30408 +
             (C35900 * C3364 + C35901 * C139303) * C139600) *
                C139587) *
               C4655) *
              C139570 +
          ((((C34924 + C34925) * C30408 + (C36850 + C36851) * C139600) *
                C13591 +
            ((C34912 + C34913) * C30408 + (C36852 + C36853) * C139600) *
                C139587) *
               C4654 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C30408) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C30408) *
                C13591) *
               C4653 -
           ((((C307 * C20832 + C139448 * C21046) * C139303 +
              (C307 * C20830 + C139448 * C21044) * C3364) *
                 C139600 +
             (C36853 + C36852) * C30408) *
                C139587 +
            (((C307 * C20833 + C139448 * C21047) * C139303 +
              (C307 * C20831 + C139448 * C21045) * C3364) *
                 C139600 +
             (C36851 + C36850) * C30408) *
                C13591) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3427 +
            (C307 * C182 + C139448 * C394) * C3360 -
            (C307 * C832 + C139448 * C1094) * C3428 -
            (C307 * C927 + C139448 * C1195) * C3361 +
            (C307 * C2570 + C139448 * C2827) * C3429 +
            (C307 * C2663 + C139448 * C2921) * C3362 -
            (C307 * C3367 + C139448 * C3545) * C3430 -
            (C307 * C3433 + C139448 * C3599) * C3363) *
               C30408 +
           (C32431 * C3427 + C32539 * C3360 -
            (C307 * C3891 + C139448 * C4161) * C3428 -
            (C307 * C3989 + C139448 * C4247) * C3361 +
            (C307 * C3896 + C139448 * C4166) * C3429 +
            (C307 * C3994 + C139448 * C4248) * C3362 -
            (C307 * C17959 + C139448 * C18317) * C3430 -
            (C307 * C18089 + C139448 * C18418) * C3363) *
               C139600) *
              C13591 +
          ((C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
            C2844 * C3429 + C2940 * C3362 -
            (C307 * C3366 + C139448 * C3544) * C3430 -
            (C307 * C3432 + C139448 * C3600) * C3363) *
               C30408 +
           (C1984 * C3427 + C2078 * C3360 - C8433 * C3428 - C8546 * C3361 +
            C33388 * C3429 + C33495 * C3362 -
            (C307 * C17958 + C139448 * C18316) * C3430 -
            (C307 * C18088 + C139448 * C18419) * C3363) *
               C139600) *
              C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C923 +
             (C307 * C1794 + C139448 * C2066) * C139570 -
             (C307 * C3891 + C139448 * C4161) * C924 -
             (C307 * C3989 + C139448 * C4247) * C139360) *
                C139600) *
               C13591 +
           ((C1201 + C1202 - C1203 - C1220) * C30408 +
            (C10194 + C10193 - C10192 - C10195) * C139600) *
               C139587) *
              C821 +
          (((C1203 - (C1202 + C1201) + C1220) * C30408 +
            (C10192 - (C10193 + C10194) + C10195) * C139600) *
               C13591 +
           ((C1208 - (C1207 + C1206) + C1222) * C30408 +
            (C10196 - (C10197 + C10198) + C10199) * C139600) *
               C139587) *
              C822 +
          ((C1224 * C30408 + (C10198 + C10197 - C10196 - C10199) * C139600) *
               C13591 +
           ((C1213 + C1212 - C1211 - C1223) * C30408 +
            (C1988 * C923 + C2080 * C139570 -
             (C307 * C8120 + C139448 * C8422) * C924 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139600) *
               C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C30408 +
            (C36952 + C36953 - C36954 - C36955) * C139600) *
               C13591 +
           ((C1201 + C1202 - C1203 - C1220) * C30408 +
            (C10194 + C10193 - C10192 - C10195) * C139600) *
               C139587) *
              C139303 * C4653 +
          (((C36954 - (C36953 + C36952) + C36955) * C30408 +
            (C36956 - (C36957 + C36958) + C36968) * C139600) *
               C13591 +
           ((C10192 - (C10193 + C10194) + C10195) * C30408 +
            (C36961 - (C36962 + C36963) + C36969) * C139600) *
               C139587) *
              C139303 * C4654 +
          (((C36958 + C36957 - C36956 - C36968) * C30408 +
            ((C307 * C6165 + C139448 * C6343) * C923 +
             (C307 * C6227 + C139448 * C6399) * C139570 -
             (C307 * C20831 + C139448 * C21045) * C924 -
             (C307 * C20905 + C139448 * C21115) * C139360) *
                C139600) *
               C13591 +
           ((C36963 + C36962 - C36961 - C36969) * C30408 +
            (C35900 * C923 + C36011 * C139570 -
             (C307 * C20830 + C139448 * C21044) * C924 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C139600) *
               C139587) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C30408 +
            (C32431 * C244 + C32649 * C139372) * C139600) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
              C3360 -
          (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
           (((C307 * C4075 + C139448 * C4327) * C139372 +
             (C307 * C3891 + C139448 * C4161) * C244) *
                C139600 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C30408) *
               C13591) *
              C3361 +
          ((((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C30408 +
            ((C307 * C3896 + C139448 * C4166) * C244 +
             (C307 * C4080 + C139448 * C4330) * C139372) *
                C139600) *
               C13591 +
           ((C3022 + C3030) * C30408 + (C33595 + C33599) * C139600) * C139587) *
              C3362 -
          ((((C307 * C18202 + C139448 * C18519) * C139372 +
             (C307 * C17958 + C139448 * C18316) * C244) *
                C139600 +
            ((C307 * C3488 + C139448 * C3653) * C139372 +
             (C307 * C3366 + C139448 * C3544) * C244) *
                C30408) *
               C139587 +
           (((C307 * C18203 + C139448 * C18518) * C139372 +
             (C307 * C17959 + C139448 * C18317) * C244) *
                C139600 +
            ((C307 * C3489 + C139448 * C3654) * C139372 +
             (C307 * C3367 + C139448 * C3545) * C244) *
                C30408) *
               C13591) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C30408 +
             ((C307 * C1700 + C139448 * C1962) * C244 +
              (C307 * C1879 + C139448 * C2159) * C139372) *
                 C139600) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
               C139570 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
            (((C307 * C4075 + C139448 * C4327) * C139372 +
              (C307 * C3891 + C139448 * C4161) * C244) *
                 C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C30408) *
                C13591) *
               C139360) *
              C821 +
          ((((C1310 + C1318) * C30408 + (C31608 + C31607) * C139600) * C13591 +
            ((C1307 + C1317) * C30408 + (C31609 + C31610) * C139600) *
                C139587) *
               C139360 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
               C139570) *
              C822 +
          (((C501 * C30408 + (C30744 + C30743) * C139600) * C13591 +
            ((C489 + C499) * C30408 + (C30745 + C30746) * C139600) * C139587) *
               C139570 -
           ((((C307 * C8322 + C139448 * C8647) * C139372 +
              (C307 * C8120 + C139448 * C8422) * C244) *
                 C139600 +
             (C1319 + C1311) * C30408) *
                C139587 +
            ((C31610 + C31609) * C139600 + C1320 * C30408) * C13591) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C4828 +
             (C307 * C245 + C139448 * C474) * C4653 - C32431 * C4829 -
             C32649 * C4654 + C35899 * C4830 + C36121 * C4655) *
                C30408 +
            (C32431 * C4828 + C32649 * C4653 - C35899 * C4829 - C36121 * C4654 +
             (C307 * C6165 + C139448 * C6343) * C4830 +
             (C307 * C6287 + C139448 * C6450) * C4655) *
                C139600) *
               C13591 +
           ((C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C30408 +
            (C36114 + C36115 - C36116 - C36117 + C36118 + C36123) * C139600) *
               C139587) *
              C139570 +
          (((C34920 * C4829 -
             ((C307 * C1011 + C139448 * C1301) * C4653 +
              (C307 * C832 + C139448 * C1094) * C4828) +
             C35140 * C4654 - C36846 * C4830 - C37072 * C4655) *
                C30408 +
            (C36846 * C4829 - (C35140 * C4653 + C34920 * C4828) +
             C37072 * C4654 - (C307 * C20831 + C139448 * C21045) * C4830 -
             (C307 * C20975 + C139448 * C21182) * C4655) *
                C139600) *
               C13591 +
           ((C8433 * C4829 - (C1315 * C4653 + C1116 * C4828) + C8659 * C4654 -
             C36848 * C4830 - C37073 * C4655) *
                C30408 +
            (C36848 * C4829 - (C8659 * C4653 + C8433 * C4828) + C37073 * C4654 -
             (C307 * C20830 + C139448 * C21044) * C4830 -
             (C307 * C20974 + C139448 * C21183) * C4655) *
                C139600) *
               C139587) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C3364 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139303) *
               C13591 +
           ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
               C139587) *
              C139448 * C139372 * C3360 -
          (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) * C139587 +
           ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
             C30408 * C1400) *
                C139303 +
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C3364) *
               C13591) *
              C139448 * C139372 * C3361 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C3364 +
            (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
             C139600 * C4418) *
                C139303) *
               C13591 +
           ((C33707 + C33706) * C3364 + (C33709 + C33708) * C139303) *
               C139587) *
              C139448 * C139372 * C3362 -
          (((C30813 * C17960 + C139600 * C18620 + C30812 * C3369 +
             C30408 * C3709) *
                C139303 +
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C3364) *
               C139587 +
           ((C30813 * C17961 + C139600 * C18621 + C30812 * C3370 +
             C30408 * C3710) *
                C139303 +
            (C30813 * C17959 + C139600 * C18619 + C30812 * C3367 +
             C30408 * C3707) *
                C3364) *
               C13591) *
              C139448 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C822 +
            (C30848 + C30847) * C828 + (C30850 + C30849) * C823) *
               C139587) *
              C139448 * C139372 * C139570 +
          (((C31725 + C31726) * C827 -
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C821 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C826) +
            (C31727 + C31728) * C822 - (C31729 + C31730) * C828 -
            (C31731 + C31732) * C823) *
               C13591 +
           ((C31730 + C31729) * C827 -
            ((C31728 + C31727) * C821 + (C31726 + C31725) * C826) +
            (C31732 + C31731) * C822 -
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C828 -
            (C30813 * C8122 + C139600 * C8761 + C30812 * C841 +
             C30408 * C1403) *
                C823) *
               C139587) *
              C139448 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C13591 +
            ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
                C139587) *
               C139448 * C4653 -
           (((C32767 + C32766) * C139303 + (C32765 + C32764) * C3364) *
                C139587 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C13591) *
               C139448 * C4654 +
           (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C13591 +
            ((C36231 + C36230) * C3364 + (C36233 + C36232) * C139303) *
                C139587) *
               C139448 * C4655) *
              C139570 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C13591 +
            ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
              C139600 * C5950) *
                 C3364 +
             (C30812 * C3901 + C30408 * C4414 + C30813 * C5473 +
              C139600 * C5953) *
                 C139303) *
                C139587) *
               C139448 * C4654 -
           (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) *
                C139587 +
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139303 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C3364) *
                C13591) *
               C139448 * C4653 -
           (((C30813 * C20832 + C139600 * C21252 + C30812 * C5473 +
              C30408 * C5953) *
                 C139303 +
             (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
              C30408 * C5950) *
                 C3364) *
                C139587 +
            ((C30813 * C20833 + C139600 * C21253 + C30812 * C5474 +
              C30408 * C5954) *
                 C139303 +
             (C30813 * C20831 + C139600 * C21251 + C30812 * C5471 +
              C30408 * C5951) *
                 C3364) *
                C13591) *
               C139448 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (-std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C3427 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
               C3360 -
           (C30813 * C3891 + C139600 * C4407 + C30812 * C832 + C30408 * C1396) *
               C3428 -
           (C30813 * C3989 + C139600 * C4493 + C30812 * C927 + C30408 * C1497) *
               C3361 +
           (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
            C139600 * C4412) *
               C3429 +
           (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
            C139600 * C4494) *
               C3362 -
           (C30813 * C17959 + C139600 * C18619 + C30812 * C3367 +
            C30408 * C3707) *
               C3430 -
           (C30813 * C18089 + C139600 * C18746 + C30812 * C3433 +
            C30408 * C3761) *
               C3363) *
              C13591 +
          ((C30840 + C30839) * C3427 + (C30929 + C30930) * C3360 -
           (C31726 + C31725) * C3428 - (C31839 + C31840) * C3361 +
           (C33707 + C33706) * C3429 + (C33812 + C33813) * C3362 -
           (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
            C30408 * C3706) *
               C3430 -
           (C30813 * C18088 + C139600 * C18747 + C30812 * C3432 +
            C30408 * C3762) *
               C3363) *
              C139587) *
         C139448 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C923 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139570 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C924 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139360) *
               C13591 +
           ((C30840 + C30839) * C923 + (C30929 + C30930) * C139570 -
            (C31726 + C31725) * C924 - (C31839 + C31840) * C139360) *
               C139587) *
              C139448 * C821 +
          (((C31725 + C31726) * C924 -
            ((C30930 + C30929) * C139570 + (C30839 + C30840) * C923) +
            (C31840 + C31839) * C139360) *
               C13591 +
           ((C31730 + C31729) * C924 -
            ((C30931 + C30932) * C139570 + (C30844 + C30843) * C923) +
            (C31841 + C31842) * C139360) *
               C139587) *
              C139448 * C822 +
          (((C30843 + C30844) * C923 + (C30932 + C30931) * C139570 -
            (C31729 + C31730) * C924 - (C31842 + C31841) * C139360) *
               C13591 +
           ((C30848 + C30847) * C923 + (C30933 + C30934) * C139570 -
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C924 -
            (C30813 * C8222 + C139600 * C8872 + C30812 * C928 +
             C30408 * C1500) *
                C139360) *
               C139587) *
              C139448 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C923 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139570 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C924 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139360) *
               C13591 +
           ((C30840 + C30839) * C923 + (C30929 + C30930) * C139570 -
            (C31726 + C31725) * C924 - (C31839 + C31840) * C139360) *
               C139587) *
              C139448 * C139303 * C4653 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C924 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139570 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C923) +
            (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
             C139600 * C6029) *
                C139360) *
               C13591 +
           ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
             C139600 * C5950) *
                C924 -
            ((C32879 + C32878) * C139570 + (C32765 + C32764) * C923) +
            (C30812 * C3990 + C30408 * C4495 + C30813 * C5556 +
             C139600 * C6030) *
                C139360) *
               C139587) *
              C139448 * C139303 * C4654 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C923 +
            (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
             C139600 * C6561) *
                C139570 -
            (C30813 * C20831 + C139600 * C21251 + C30812 * C5471 +
             C30408 * C5951) *
                C924 -
            (C30813 * C20905 + C139600 * C21321 + C30812 * C5557 +
             C30408 * C6029) *
                C139360) *
               C13591 +
           ((C36231 + C36230) * C923 + (C36336 + C36337) * C139570 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C924 -
            (C30813 * C20904 + C139600 * C21320 + C30812 * C5556 +
             C30408 * C6030) *
                C139360) *
               C139587) *
              C139448 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) * C139587) *
              C139448 * C3360 -
          (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
           ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
             C30408 * C1602) *
                C139372 +
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C244) *
               C13591) *
              C139448 * C3361 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C244 +
            (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
             C139600 * C4576) *
                C139372) *
               C13591 +
           ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) * C139587) *
              C139448 * C3362 -
          (((C30813 * C18202 + C139600 * C18856 + C30812 * C3488 +
             C30408 * C3815) *
                C139372 +
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C244) *
               C139587 +
           ((C30813 * C18203 + C139600 * C18855 + C30812 * C3489 +
             C30408 * C3816) *
                C139372 +
            (C30813 * C17959 + C139600 * C18619 + C30812 * C3367 +
             C30408 * C3707) *
                C244) *
               C13591) *
              C139448 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139372 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C244) *
                C13591) *
               C139448 * C139360) *
              C821 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C13591 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                C139587) *
               C139448 * C139360 -
           (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
               C139448 * C139570) *
              C822 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C13591 +
            ((C30848 + C30847) * C244 + (C31017 + C31018) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C30813 * C8322 + C139600 * C8985 + C30812 * C1012 +
              C30408 * C1603) *
                 C139372 +
             (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
              C30408 * C1398) *
                 C244) *
                C139587 +
            ((C31952 + C31951) * C139372 + (C31729 + C31730) * C244) * C13591) *
               C139448 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C4828 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C4653 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C4829 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C4654 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C4655) *
               C13591 +
           ((C30840 + C30839) * C4828 + (C31013 + C31014) * C4653 -
            (C32765 + C32764) * C4829 - (C32988 + C32989) * C4654 +
            (C36231 + C36230) * C4830 + (C36440 + C36441) * C4655) *
               C139587) *
              C139448 * C139570 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C4829 -
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C4653 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C4828) +
            (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
             C139600 * C6106) *
                C4654 -
            (C30813 * C20831 + C139600 * C21251 + C30812 * C5471 +
             C30408 * C5951) *
                C4830 -
            (C30813 * C20975 + C139600 * C21388 + C30812 * C5637 +
             C30408 * C6106) *
                C4655) *
               C13591 +
           ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
             C139600 * C5950) *
                C4829 -
            ((C31949 + C31950) * C4653 + (C31726 + C31725) * C4828) +
            (C30812 * C4076 + C30408 * C4574 + C30813 * C5636 +
             C139600 * C6107) *
                C4654 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C4830 -
            (C30813 * C20974 + C139600 * C21389 + C30812 * C5636 +
             C30408 * C6107) *
                C4655) *
               C139587) *
              C139448 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (-std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C30408 +
            ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C13596 * C4664 + C139587 * C4669 + C13595 * C4663 +
              C13591 * C4668) *
                 C139303 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C3364) *
                C139448 * C139600 +
            ((C32078 + C32077) * C139303 + (C32076 + C32075) * C3364) *
                C139448 * C30408) *
               C139384) *
              C2565 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) *
                C139448 * C30408 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139448 * C139600) *
               C139384 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139448 * C139600 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C139448 * C30408) *
               C139571) *
              C2566 +
          ((((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) *
                C139448 * C30408 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C13596 * C19904 + C139587 * C19908 + C13595 * C19905 +
              C13591 * C19909) *
                 C139303 +
             (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
              C13591 * C19907) *
                 C3364) *
                C139448 * C139600 +
            ((C17990 + C17989) * C139303 + (C17988 + C17987) * C3364) *
                C139448 * C30408) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C139448 * C30408 +
           ((C32075 + C32076) * C826 + (C32077 + C32078) * C821 -
            (C32079 + C32080) * C827 - (C32081 + C32082) * C822 +
            (C32083 + C32084) * C828 + (C32085 + C32086) * C823) *
               C139448 * C139600) *
              C139571 +
          (((C32080 + C32079) * C827 -
            ((C32078 + C32077) * C821 + (C32076 + C32075) * C826) +
            (C32082 + C32081) * C822 - (C32084 + C32083) * C828 -
            (C32086 + C32085) * C823) *
               C139448 * C30408 +
           ((C13595 * C4657 + C13591 * C4661 + C13596 * C4658 +
             C139587 * C4662) *
                C827 -
            ((C13596 * C4664 + C139587 * C4669 + C13595 * C4663 +
              C13591 * C4668) *
                 C821 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C826) +
            (C13595 * C4664 + C13591 * C4669 + C13596 * C4665 +
             C139587 * C4670) *
                C822 -
            (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
             C13591 * C4662) *
                C828 -
            (C13596 * C4667 + C139587 * C4671 + C13595 * C4665 +
             C13591 * C4670) *
                C823) *
               C139448 * C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C3364 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139303) *
               C139448 * C30408 +
           ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) * C139448 *
               C139600) *
              C6159 -
          (((C35552 + C35553) * C139303 + (C35554 + C35555) * C3364) * C139448 *
               C139600 +
           ((C32078 + C32077) * C139303 + (C32076 + C32075) * C3364) * C139448 *
               C30408) *
              C6160 +
          (((C35555 + C35554) * C3364 + (C35553 + C35552) * C139303) * C139448 *
               C30408 +
           ((C37450 + C37451) * C3364 + (C37452 + C37453) * C139303) * C139448 *
               C139600) *
              C6161 -
          (((C13596 * C37435 + C139587 * C37439 + C13595 * C37436 +
             C13591 * C37440) *
                C139303 +
            (C13596 * C37433 + C139587 * C37437 + C13595 * C37434 +
             C13591 * C37438) *
                C3364) *
               C139448 * C139600 +
           ((C37453 + C37452) * C139303 + (C37451 + C37450) * C3364) * C139448 *
               C30408) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C139448 * C30408 +
           ((C32075 + C32076) * C2660 + (C32197 + C32198) * C2565 -
            (C17985 + C17986) * C2661 - (C18102 + C18101) * C2566 +
            (C17987 + C17988) * C2662 + (C18104 + C18103) * C2567) *
               C139448 * C139600) *
              C139303 * C139571 +
          (((C17986 + C17985) * C2661 -
            ((C32198 + C32197) * C2565 + (C32076 + C32075) * C2660) +
            (C18101 + C18102) * C2566 - (C17988 + C17987) * C2662 -
            (C18103 + C18104) * C2567) *
               C139448 * C30408 +
           ((C19919 + C19920) * C2661 -
            ((C13596 * C4747 + C139587 * C4751 + C13595 * C4746 +
              C13591 * C4750) *
                 C2565 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C2660) +
            (C20030 + C20029) * C2566 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C2662 -
            (C13596 * C20020 + C139587 * C20022 + C13595 * C20021 +
             C13591 * C20023) *
                C2567) *
               C139448 * C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C30408 +
            ((C32075 + C32076) * C181 + (C32197 + C32198) * C139346) * C139448 *
                C139600) *
               C821 -
           (((C32199 + C32200) * C139346 + (C32079 + C32080) * C181) * C139448 *
                C139600 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139448 * C30408) *
               C822 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                 C139346) *
                C139448 * C30408 +
            ((C32083 + C32084) * C181 + (C32201 + C32202) * C139346) * C139448 *
                C139600) *
               C823) *
              C139571 +
          ((((C32080 + C32079) * C181 + (C32200 + C32199) * C139346) * C139448 *
                C30408 +
            ((C13595 * C4657 + C13591 * C4661 + C13596 * C4658 +
              C139587 * C4662) *
                 C181 +
             (C13595 * C4747 + C13591 * C4751 + C13596 * C4748 +
              C139587 * C4752) *
                 C139346) *
                C139448 * C139600) *
               C822 -
           (((C13596 * C4747 + C139587 * C4751 + C13595 * C4746 +
              C13591 * C4750) *
                 C139346 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C181) *
                C139448 * C139600 +
            ((C32198 + C32197) * C139346 + (C32076 + C32075) * C181) * C139448 *
                C30408) *
               C821 -
           (((C13596 * C4749 + C139587 * C4753 + C13595 * C4748 +
              C13591 * C4752) *
                 C139346 +
             (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
              C13591 * C4662) *
                 C181) *
                C139448 * C139600 +
            ((C32202 + C32201) * C139346 + (C32084 + C32083) * C181) * C139448 *
                C30408) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139346) *
               C139448 * C30408 +
           ((C32075 + C32076) * C181 + (C32197 + C32198) * C139346) * C139448 *
               C139600) *
              C139303 * C6159 -
          (((C35666 + C35667) * C139346 + (C35554 + C35555) * C181) * C139448 *
               C139600 +
           ((C32198 + C32197) * C139346 + (C32076 + C32075) * C181) * C139448 *
               C30408) *
              C139303 * C6160 +
          (((C35555 + C35554) * C181 + (C35667 + C35666) * C139346) * C139448 *
               C30408 +
           ((C37450 + C37451) * C181 + (C37528 + C37529) * C139346) * C139448 *
               C139600) *
              C139303 * C6161 -
          (((C13596 * C37519 + C139587 * C37521 + C13595 * C37520 +
             C13591 * C37522) *
                C139346 +
            (C13596 * C37433 + C139587 * C37437 + C13595 * C37434 +
             C13591 * C37438) *
                C181) *
               C139448 * C139600 +
           ((C37529 + C37528) * C139346 + (C37451 + C37450) * C181) * C139448 *
               C30408) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (-std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C32076 + C32075) * C1876 - (C32313 + C32314) * C139384) *
               C139448 * C30408 +
           ((C32075 + C32076) * C1875 + (C32314 + C32313) * C139571 -
            (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
             C13591 * C4660) *
                C1876 -
            (C13596 * C4832 + C139587 * C4836 + C13595 * C4831 +
             C13591 * C4835) *
                C139384) *
               C139448 * C139600) *
              C2565 +
          (((C17986 + C17985) * C1876 -
            ((C14567 + C14566) * C139571 + (C14329 + C14328) * C1875) +
            (C18216 + C18215) * C139384) *
               C139448 * C30408 +
           ((C19919 + C19920) * C1876 -
            ((C18215 + C18216) * C139571 + (C17985 + C17986) * C1875) +
            (C20137 + C20138) * C139384) *
               C139448 * C139600) *
              C2566 +
          (((C16298 + C16297) * C1875 + (C16518 + C16517) * C139571 -
            (C17988 + C17987) * C1876 - (C18218 + C18217) * C139384) *
               C139448 * C30408 +
           ((C17987 + C17988) * C1875 + (C18217 + C18218) * C139571 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C1876 -
            (C13596 * C20128 + C139587 * C20130 + C13595 * C20129 +
             C13591 * C20131) *
                C139384) *
               C139448 * C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C32076 + C32075) * C1876 - (C32313 + C32314) * C139384) *
               C139448 * C30408 +
           ((C32075 + C32076) * C1875 + (C32314 + C32313) * C139571 -
            (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
             C13591 * C4660) *
                C1876 -
            (C13596 * C4832 + C139587 * C4836 + C13595 * C4831 +
             C13591 * C4835) *
                C139384) *
               C139448 * C139600) *
              C139346 * C821 +
          (((C32080 + C32079) * C1876 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139571 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C1875) +
            (C32315 + C32316) * C139384) *
               C139448 * C30408 +
           ((C13595 * C4657 + C13591 * C4661 + C13596 * C4658 +
             C139587 * C4662) *
                C1876 -
            ((C32316 + C32315) * C139571 + (C32079 + C32080) * C1875) +
            (C13595 * C4832 + C13591 * C4836 + C13596 * C4833 +
             C139587 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C1875 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139571 -
            (C32084 + C32083) * C1876 - (C32317 + C32318) * C139384) *
               C139448 * C30408 +
           ((C32083 + C32084) * C1875 + (C32318 + C32317) * C139571 -
            (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
             C13591 * C4662) *
                C1876 -
            (C13596 * C4834 + C139587 * C4838 + C13595 * C4833 +
             C13591 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C6281 +
           (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
               C6159 -
           (C32076 + C32075) * C6282 - (C32313 + C32314) * C6160 +
           (C35555 + C35554) * C6283 + (C35774 + C35775) * C6161 -
           (C37451 + C37450) * C6284 - (C37604 + C37605) * C6162) *
              C139448 * C30408 +
          ((C32075 + C32076) * C6281 + (C32314 + C32313) * C6159 -
           (C35554 + C35555) * C6282 - (C35775 + C35774) * C6160 +
           (C37450 + C37451) * C6283 + (C37605 + C37604) * C6161 -
           (C13596 * C37433 + C139587 * C37437 + C13595 * C37434 +
            C13591 * C37438) *
               C6284 -
           (C13596 * C37595 + C139587 * C37597 + C13595 * C37596 +
            C13591 * C37598) *
               C6162) *
              C139448 * C139600) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C30408 +
             (C34904 + C34905) * C139600) *
                C13591 +
            ((C337 * C3364 + C338 * C139303) * C30408 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C139571 -
           (((C4931 * C139303 + C4930 * C3364) * C139600 +
             (C34907 + C34906) * C30408) *
                C139587 +
            (((C307 * C4663 + C139448 * C4917) * C139303 +
              (C307 * C4656 + C139448 * C4913) * C3364) *
                 C139600 +
             (C34905 + C34904) * C30408) *
                C13591) *
               C139384) *
              C2565 +
          ((((C34924 + C34925) * C30408 +
             ((C307 * C5471 + C139448 * C5717) * C3364 +
              (C307 * C5474 + C139448 * C5720) * C139303) *
                 C139600) *
                C13591 +
            ((C34912 + C34913) * C30408 +
             ((C307 * C5470 + C139448 * C5716) * C3364 +
              (C307 * C5473 + C139448 * C5719) * C139303) *
                 C139600) *
                C139587) *
               C139384 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C30408) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C30408) *
                C13591) *
               C139571) *
              C2566 +
          (((((C307 * C2570 + C139448 * C2827) * C3364 +
              (C307 * C2577 + C139448 * C2831) * C139303) *
                 C30408 +
             (C34926 + C34927) * C139600) *
                C13591 +
            ((C2844 * C3364 + C2845 * C139303) * C30408 +
             (C34918 + C34919) * C139600) *
                C139587) *
               C139571 -
           ((((C307 * C19904 + C139448 * C20238) * C139303 +
              (C307 * C19902 + C139448 * C20236) * C3364) *
                 C139600 +
             (C34919 + C34918) * C30408) *
                C139587 +
            (((C307 * C19905 + C139448 * C20239) * C139303 +
              (C307 * C19903 + C139448 * C20237) * C3364) *
                 C139600 +
             (C34927 + C34926) * C30408) *
                C13591) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C30408 +
            (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C139600) *
               C13591 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C30408 +
            (C32425 + C32426 - C32427 - C32428 + C32429 + C32430) * C139600) *
               C139587) *
              C139571 +
          (((C32421 - (C32434 + C32433) + C32422 - C32423 - C32424) * C30408 +
            (C4930 * C827 -
             ((C307 * C4663 + C139448 * C4917) * C821 +
              (C307 * C4656 + C139448 * C4913) * C826) +
             C4931 * C822 - C4932 * C828 - C4933 * C823) *
                C139600) *
               C13591 +
           ((C32427 - (C32426 + C32425) + C32428 - C32429 - C32430) * C30408 +
            (C4932 * C827 - (C4931 * C821 + C4930 * C826) + C4933 * C822 -
             (C307 * C4659 + C139448 * C4916) * C828 -
             (C307 * C4667 + C139448 * C4920) * C823) *
                C139600) *
               C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C30408 +
            (C34904 + C34905) * C139600) *
               C13591 +
           ((C337 * C3364 + C338 * C139303) * C30408 +
            (C34906 + C34907) * C139600) *
               C139587) *
              C6159 -
          (((C36834 + C36835) * C139600 + (C34907 + C34906) * C30408) *
               C139587 +
           ((C36836 + C36837) * C139600 + (C34905 + C34904) * C30408) *
               C13591) *
              C6160 +
          (((C36837 + C36836) * C30408 + (C37684 + C37685) * C139600) * C13591 +
           ((C36835 + C36834) * C30408 + (C37680 + C37681) * C139600) *
               C139587) *
              C6161 -
          ((((C307 * C37435 + C139448 * C37673) * C139303 +
             (C307 * C37433 + C139448 * C37671) * C3364) *
                C139600 +
            (C37681 + C37680) * C30408) *
               C139587 +
           (((C307 * C37436 + C139448 * C37674) * C139303 +
             (C307 * C37434 + C139448 * C37672) * C3364) *
                C139600 +
            (C37685 + C37684) * C30408) *
               C13591) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C30408 +
            (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C139600) *
               C13591 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C30408 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139303 * C139571 +
          (((C35028 - (C35027 + C35026) + C35036 - C35031 - C35037) * C30408 +
            ((C307 * C5471 + C139448 * C5717) * C2661 -
             ((C307 * C4746 + C139448 * C5007) * C2565 +
              (C307 * C4656 + C139448 * C4913) * C2660) +
             (C307 * C5557 + C139448 * C5795) * C2566 -
             (C307 * C19903 + C139448 * C20237) * C2662 -
             (C307 * C20021 + C139448 * C20338) * C2567) *
                C139600) *
               C13591 +
           ((C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C30408 +
            ((C307 * C5470 + C139448 * C5716) * C2661 -
             (C5018 * C2565 + C4930 * C2660) +
             (C307 * C5556 + C139448 * C5796) * C2566 -
             (C307 * C19902 + C139448 * C20236) * C2662 -
             (C307 * C20020 + C139448 * C20339) * C2567) *
                C139600) *
               C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C30408 +
             (C32533 + C32540) * C139600) *
                C13591 +
            ((C401 + C417) * C30408 + C32536 * C139600) * C139587) *
               C821 -
           ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C30408) * C13591) *
               C822 +
           ((C421 * C30408 + C32538 * C139600) * C13591 +
            ((C409 + C419) * C30408 + (C2075 + C2083) * C139600) * C139587) *
               C823) *
              C139571 +
          (((C32536 * C30408 + (C5012 + C5020) * C139600) * C13591 +
            (C32538 * C30408 + (C5015 + C5021) * C139600) * C139587) *
               C822 -
           (((C5020 + C5012) * C139600 + C32537 * C30408) * C139587 +
            (((C307 * C4746 + C139448 * C5007) * C139346 +
              (C307 * C4656 + C139448 * C4913) * C181) *
                 C139600 +
             (C32540 + C32533) * C30408) *
                C13591) *
               C821 -
           ((((C307 * C4749 + C139448 * C5010) * C139346 +
              (C307 * C4659 + C139448 * C4916) * C181) *
                 C139600 +
             (C2083 + C2075) * C30408) *
                C139587 +
            ((C5021 + C5015) * C139600 + C2084 * C30408) * C13591) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C30408 +
            (C32533 + C32540) * C139600) *
               C13591 +
           ((C401 + C417) * C30408 + C32536 * C139600) * C139587) *
              C139303 * C6159 -
          ((C36003 * C139600 + C32537 * C30408) * C139587 +
           ((C36012 + C36006) * C139600 + (C32540 + C32533) * C30408) *
               C13591) *
              C139303 * C6160 +
          (((C36006 + C36012) * C30408 + (C37754 + C37758) * C139600) * C13591 +
           (C36002 * C30408 + (C36007 + C36013) * C139600) * C139587) *
              C139303 * C6161 -
          ((((C307 * C37519 + C139448 * C37751) * C139346 +
             (C307 * C37433 + C139448 * C37671) * C181) *
                C139600 +
            (C36013 + C36007) * C30408) *
               C139587 +
           (((C307 * C37520 + C139448 * C37752) * C139346 +
             (C307 * C37434 + C139448 * C37672) * C181) *
                C139600 +
            (C37758 + C37754) * C30408) *
               C13591) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C30408 +
            (C32431 * C1875 + C32649 * C139571 -
             (C307 * C4656 + C139448 * C4913) * C1876 -
             (C307 * C4831 + C139448 * C5095) * C139384) *
                C139600) *
               C13591 +
           ((C2165 + C2166 - C2167 - C2184) * C30408 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C2565 +
          (((C34920 * C1876 -
             ((C307 * C1011 + C139448 * C1301) * C139571 +
              (C307 * C832 + C139448 * C1094) * C1875) +
             C35140 * C139384) *
                C30408 +
            ((C307 * C5471 + C139448 * C5717) * C1876 -
             (C35140 * C139571 + C34920 * C1875) +
             (C307 * C5637 + C139448 * C5872) * C139384) *
                C139600) *
               C13591 +
           ((C8649 - (C8650 + C8651) + C8661) * C30408 +
            ((C307 * C5470 + C139448 * C5716) * C1876 -
             (C8659 * C139571 + C8433 * C1875) +
             (C307 * C5636 + C139448 * C5873) * C139384) *
                C139600) *
               C139587) *
              C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C1875 +
             (C307 * C2745 + C139448 * C3017) * C139571 - C34922 * C1876 -
             C35141 * C139384) *
                C30408 +
            (C34922 * C1875 + C35141 * C139571 -
             (C307 * C19903 + C139448 * C20237) * C1876 -
             (C307 * C20129 + C139448 * C20438) * C139384) *
                C139600) *
               C13591 +
           ((C2844 * C1875 + C3028 * C139571 - C33388 * C1876 -
             C33598 * C139384) *
                C30408 +
            (C33388 * C1875 + C33598 * C139571 -
             (C307 * C19902 + C139448 * C20236) * C1876 -
             (C307 * C20128 + C139448 * C20439) * C139384) *
                C139600) *
               C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C30408 +
            (C32431 * C1875 + C32649 * C139571 -
             (C307 * C4656 + C139448 * C4913) * C1876 -
             (C307 * C4831 + C139448 * C5095) * C139384) *
                C139600) *
               C13591 +
           ((C2165 + C2166 - C2167 - C2184) * C30408 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C139346 * C821 +
          (((C2167 - (C2166 + C2165) + C2184) * C30408 +
            (C32643 - (C32642 + C32641) + C32644) * C139600) *
               C13591 +
           ((C2172 - (C2171 + C2170) + C2186) * C30408 +
            (C32645 - (C32646 + C32647) + C32648) * C139600) *
               C139587) *
              C139346 * C822 +
          ((C2188 * C30408 + (C32647 + C32646 - C32645 - C32648) * C139600) *
               C13591 +
           ((C2177 + C2176 - C2175 - C2187) * C30408 +
            (C1988 * C1875 + C2183 * C139571 -
             (C307 * C4659 + C139448 * C4916) * C1876 -
             (C307 * C4834 + C139448 * C5098) * C139384) *
                C139600) *
               C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6281 +
            (C307 * C245 + C139448 * C474) * C6159 - C32431 * C6282 -
            C32649 * C6160 + C35899 * C6283 + C36121 * C6161 - C37682 * C6284 -
            C37829 * C6162) *
               C30408 +
           (C32431 * C6281 + C32649 * C6159 - C35899 * C6282 - C36121 * C6160 +
            C37682 * C6283 + C37829 * C6161 -
            (C307 * C37434 + C139448 * C37672) * C6284 -
            (C307 * C37596 + C139448 * C37824) * C6162) *
               C139600) *
              C13591 +
          ((C337 * C6281 + C493 * C6159 - C1984 * C6282 - C2180 * C6160 +
            C4930 * C6283 + C5114 * C6161 - C35900 * C6284 - C36122 * C6162) *
               C30408 +
           (C1984 * C6281 + C2180 * C6159 - C4930 * C6282 - C5114 * C6160 +
            C35900 * C6283 + C36122 * C6161 -
            (C307 * C37433 + C139448 * C37671) * C6284 -
            (C307 * C37595 + C139448 * C37825) * C6162) *
               C139600) *
              C139587) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C13591 +
            ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C32767 + C32766) * C139303 + (C32765 + C32764) * C3364) *
                C139587 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C13591) *
               C139448 * C139384) *
              C2565 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C13591 +
            ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
              C139600 * C5950) *
                 C3364 +
             (C30812 * C3901 + C30408 * C4414 + C30813 * C5473 +
              C139600 * C5953) *
                 C139303) *
                C139587) *
               C139448 * C139384 -
           (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) *
                C139587 +
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139303 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C3364) *
                C13591) *
               C139448 * C139571) *
              C2566 +
          ((((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
              C139600 * C4412) *
                 C3364 +
             (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
              C139600 * C4418) *
                 C139303) *
                C13591 +
            ((C33707 + C33706) * C3364 + (C33709 + C33708) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C30813 * C19904 + C139600 * C20540 + C30812 * C3904 +
              C30408 * C4417) *
                 C139303 +
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C3364) *
                C139587 +
            ((C30813 * C19905 + C139600 * C20541 + C30812 * C3905 +
              C30408 * C4418) *
                 C139303 +
             (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
              C30408 * C4412) *
                 C3364) *
                C13591) *
               C139448 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C822 +
            (C30848 + C30847) * C828 + (C30850 + C30849) * C823) *
               C139587) *
              C139448 * C139571 +
          (((C32764 + C32765) * C827 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C821 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C826) +
            (C32766 + C32767) * C822 - (C32768 + C32769) * C828 -
            (C32770 + C32771) * C823) *
               C13591 +
           ((C32769 + C32768) * C827 -
            ((C32767 + C32766) * C821 + (C32765 + C32764) * C826) +
            (C32771 + C32770) * C822 -
            (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
             C30408 * C2266) *
                C828 -
            (C30813 * C4667 + C139600 * C5198 + C30812 * C1709 +
             C30408 * C2271) *
                C823) *
               C139587) *
              C139448 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C3364 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139303) *
               C13591 +
           ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
               C139587) *
              C139448 * C6159 -
          (((C32767 + C32766) * C139303 + (C32765 + C32764) * C3364) * C139587 +
           ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
             C30408 * C2268) *
                C139303 +
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C3364) *
               C13591) *
              C139448 * C6160 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C3364 +
            (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
             C139600 * C6508) *
                C139303) *
               C13591 +
           ((C36231 + C36230) * C3364 + (C36233 + C36232) * C139303) *
               C139587) *
              C139448 * C6161 -
          (((C30813 * C37435 + C139600 * C37897 + C30812 * C6167 +
             C30408 * C6507) *
                C139303 +
            (C30813 * C37433 + C139600 * C37895 + C30812 * C6164 +
             C30408 * C6504) *
                C3364) *
               C139587 +
           ((C30813 * C37436 + C139600 * C37898 + C30812 * C6168 +
             C30408 * C6508) *
                C139303 +
            (C30813 * C37434 + C139600 * C37896 + C30812 * C6165 +
             C30408 * C6505) *
                C3364) *
               C13591) *
              C139448 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C2661 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C2566 +
            (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
             C139600 * C4494) *
                C2567) *
               C13591 +
           ((C30840 + C30839) * C2660 + (C30929 + C30930) * C2565 -
            (C31726 + C31725) * C2661 - (C31839 + C31840) * C2566 +
            (C33707 + C33706) * C2662 + (C33812 + C33813) * C2567) *
               C139587) *
              C139448 * C139303 * C139571 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C2661 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C2565 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C2660) +
            (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
             C139600 * C6029) *
                C2566 -
            (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
             C30408 * C4412) *
                C2662 -
            (C30813 * C20021 + C139600 * C20650 + C30812 * C3994 +
             C30408 * C4494) *
                C2567) *
               C13591 +
           ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
             C139600 * C5950) *
                C2661 -
            ((C32879 + C32878) * C2565 + (C32765 + C32764) * C2660) +
            (C30812 * C3990 + C30408 * C4495 + C30813 * C5556 +
             C139600 * C6030) *
                C2566 -
            (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
             C30408 * C4411) *
                C2662 -
            (C30813 * C20020 + C139600 * C20651 + C30812 * C3993 +
             C30408 * C4496) *
                C2567) *
               C139587) *
              C139448 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) *
                C139587) *
               C139448 * C821 -
           (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
               C139448 * C822 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C13591 +
            ((C30848 + C30847) * C181 + (C30933 + C30934) * C139346) *
                C139587) *
               C139448 * C823) *
              C139571 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C13591 +
            ((C32769 + C32768) * C181 + (C32880 + C32881) * C139346) *
                C139587) *
               C139448 * C822 -
           (((C32879 + C32878) * C139346 + (C32765 + C32764) * C181) * C139587 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C13591) *
               C139448 * C821 -
           (((C30813 * C4749 + C139600 * C5288 + C30812 * C1793 +
              C30408 * C2367) *
                 C139346 +
             (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
              C30408 * C2266) *
                 C181) *
                C139587 +
            ((C32881 + C32880) * C139346 + (C32768 + C32769) * C181) * C13591) *
               C139448 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139346) *
               C13591 +
           ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) * C139587) *
              C139448 * C139303 * C6159 -
          (((C32879 + C32878) * C139346 + (C32765 + C32764) * C181) * C139587 +
           ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
             C30408 * C2368) *
                C139346 +
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C181) *
               C13591) *
              C139448 * C139303 * C6160 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C181 +
            (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
             C139600 * C6561) *
                C139346) *
               C13591 +
           ((C36231 + C36230) * C181 + (C36336 + C36337) * C139346) * C139587) *
              C139448 * C139303 * C6161 -
          (((C30813 * C37519 + C139600 * C37965 + C30812 * C6226 +
             C30408 * C6560) *
                C139346 +
            (C30813 * C37433 + C139600 * C37895 + C30812 * C6164 +
             C30408 * C6504) *
                C181) *
               C139587 +
           ((C30813 * C37520 + C139600 * C37966 + C30812 * C6227 +
             C30408 * C6561) *
                C139346 +
            (C30813 * C37434 + C139600 * C37896 + C30812 * C6165 +
             C30408 * C6505) *
                C181) *
               C13591) *
              C139448 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C13591 +
           ((C30840 + C30839) * C1875 + (C31013 + C31014) * C139571 -
            (C32765 + C32764) * C1876 - (C32988 + C32989) * C139384) *
               C139587) *
              C139448 * C2565 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C1876 -
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139571 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C1875) +
            (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
             C139600 * C6106) *
                C139384) *
               C13591 +
           ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
             C139600 * C5950) *
                C1876 -
            ((C31949 + C31950) * C139571 + (C31726 + C31725) * C1875) +
            (C30812 * C4076 + C30408 * C4574 + C30813 * C5636 +
             C139600 * C6107) *
                C139384) *
               C139587) *
              C139448 * C2566 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C1875 +
            (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
             C139600 * C4576) *
                C139571 -
            (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
             C30408 * C4412) *
                C1876 -
            (C30813 * C20129 + C139600 * C20753 + C30812 * C4080 +
             C30408 * C4576) *
                C139384) *
               C13591 +
           ((C33707 + C33706) * C1875 + (C33916 + C33917) * C139571 -
            (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
             C30408 * C4411) *
                C1876 -
            (C30813 * C20128 + C139600 * C20754 + C30812 * C4079 +
             C30408 * C4577) *
                C139384) *
               C139587) *
              C139448 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C13591 +
           ((C30840 + C30839) * C1875 + (C31013 + C31014) * C139571 -
            (C32765 + C32764) * C1876 - (C32988 + C32989) * C139384) *
               C139587) *
              C139448 * C139346 * C821 +
          (((C32764 + C32765) * C1876 -
            ((C31014 + C31013) * C139571 + (C30839 + C30840) * C1875) +
            (C32989 + C32988) * C139384) *
               C13591 +
           ((C32769 + C32768) * C1876 -
            ((C31015 + C31016) * C139571 + (C30844 + C30843) * C1875) +
            (C32990 + C32991) * C139384) *
               C139587) *
              C139448 * C139346 * C822 +
          (((C30843 + C30844) * C1875 + (C31016 + C31015) * C139571 -
            (C32768 + C32769) * C1876 - (C32991 + C32990) * C139384) *
               C13591 +
           ((C30848 + C30847) * C1875 + (C31017 + C31018) * C139571 -
            (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
             C30408 * C2266) *
                C1876 -
            (C30813 * C4834 + C139600 * C5376 + C30812 * C1880 +
             C30408 * C2463) *
                C139384) *
               C139587) *
              C139448 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C6281 +
           (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
               C6159 -
           (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
            C30408 * C2264) *
               C6282 -
           (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
            C30408 * C2460) *
               C6160 +
           (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
            C139600 * C6505) *
               C6283 +
           (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
            C139600 * C6612) *
               C6161 -
           (C30813 * C37434 + C139600 * C37896 + C30812 * C6165 +
            C30408 * C6505) *
               C6284 -
           (C30813 * C37596 + C139600 * C38033 + C30812 * C6287 +
            C30408 * C6612) *
               C6162) *
              C13591 +
          ((C30840 + C30839) * C6281 + (C31013 + C31014) * C6159 -
           (C32765 + C32764) * C6282 - (C32988 + C32989) * C6160 +
           (C36231 + C36230) * C6283 + (C36440 + C36441) * C6161 -
           (C30813 * C37433 + C139600 * C37895 + C30812 * C6164 +
            C30408 * C6504) *
               C6284 -
           (C30813 * C37595 + C139600 * C38034 + C30812 * C6286 +
            C30408 * C6613) *
               C6162) *
              C139587) *
         C139448 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C6694 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139601 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C6695 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139590 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C6696 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C6691) *
               C139448 * C30408 +
           ((C32075 + C32076) * C6694 + (C32077 + C32078) * C139601 -
            (C32079 + C32080) * C6695 - (C32081 + C32082) * C139590 +
            (C32083 + C32084) * C6696 + (C32085 + C32086) * C6691) *
               C139448 * C139600) *
              C9074 +
          (((C32080 + C32079) * C6695 -
            ((C32078 + C32077) * C139601 + (C32076 + C32075) * C6694) +
            (C32082 + C32081) * C139590 - (C32084 + C32083) * C6696 -
            (C32086 + C32085) * C6691) *
               C139448 * C30408 +
           ((C35550 + C35551) * C6695 -
            ((C35552 + C35553) * C139601 + (C35554 + C35555) * C6694) +
            (C35556 + C35557) * C139590 -
            (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
             C13591 * C4662) *
                C6696 -
            (C13596 * C4667 + C139587 * C4671 + C13595 * C4665 +
             C13591 * C4670) *
                C6691) *
               C139448 * C139600) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C30408 +
            ((C32075 + C32076) * C181 + (C32197 + C32198) * C139346) * C139448 *
                C139600) *
               C139601 -
           (((C32199 + C32200) * C139346 + (C32079 + C32080) * C181) * C139448 *
                C139600 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139448 * C30408) *
               C139590 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                 C139346) *
                C139448 * C30408 +
            ((C32083 + C32084) * C181 + (C32201 + C32202) * C139346) * C139448 *
                C139600) *
               C6691) *
              C9074 +
          ((((C32080 + C32079) * C181 + (C32200 + C32199) * C139346) * C139448 *
                C30408 +
            ((C35550 + C35551) * C181 + (C35664 + C35665) * C139346) * C139448 *
                C139600) *
               C139590 -
           (((C35666 + C35667) * C139346 + (C35554 + C35555) * C181) * C139448 *
                C139600 +
            ((C32198 + C32197) * C139346 + (C32076 + C32075) * C181) * C139448 *
                C30408) *
               C139601 -
           (((C13596 * C4749 + C139587 * C4753 + C13595 * C4748 +
              C13591 * C4752) *
                 C139346 +
             (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
              C13591 * C4662) *
                 C181) *
                C139448 * C139600 +
            ((C32202 + C32201) * C139346 + (C32084 + C32083) * C181) * C139448 *
                C30408) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C9224 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C9074 -
            (C32076 + C32075) * C9225 - (C32313 + C32314) * C139384) *
               C139448 * C30408 +
           ((C32075 + C32076) * C9224 + (C32314 + C32313) * C9074 -
            (C35554 + C35555) * C9225 - (C35775 + C35774) * C139384) *
               C139448 * C139600) *
              C139346 * C139601 +
          (((C32080 + C32079) * C9225 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C9074 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C9224) +
            (C32315 + C32316) * C139384) *
               C139448 * C30408 +
           ((C35550 + C35551) * C9225 -
            ((C32316 + C32315) * C9074 + (C32079 + C32080) * C9224) +
            (C35777 + C35776) * C139384) *
               C139448 * C139600) *
              C139346 * C139590 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C9224 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C9074 -
            (C32084 + C32083) * C9225 - (C32317 + C32318) * C139384) *
               C139448 * C30408 +
           ((C32083 + C32084) * C9224 + (C32318 + C32317) * C9074 -
            (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
             C13591 * C4662) *
                C9225 -
            (C13596 * C4834 + C139587 * C4838 + C13595 * C4833 +
             C13591 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6694 +
             (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
             C338 * C139590 + C339 * C6696 + C340 * C6691) *
                C30408 +
            (C41426 + C41427 - C41428 - C41429 + C41430 + C41431) * C139600) *
               C13591 +
           ((C337 * C6694 + C338 * C139601 - C339 * C6695 - C340 * C139590 +
             C341 * C6696 + C342 * C6691) *
                C30408 +
            (C41432 + C41433 - C41434 - C41435 + C41436 + C41437) * C139600) *
               C139587) *
              C9074 +
          (((C41428 - (C41427 + C41426) + C41429 - C41430 - C41431) * C30408 +
            (C4930 * C6695 - (C35898 * C139601 + C35899 * C6694) +
             C4931 * C139590 - C4932 * C6696 - C4933 * C6691) *
                C139600) *
               C13591 +
           ((C41434 - (C41433 + C41432) + C41435 - C41436 - C41437) * C30408 +
            (C4932 * C6695 - (C4931 * C139601 + C4930 * C6694) +
             C4933 * C139590 - (C307 * C4659 + C139448 * C4916) * C6696 -
             (C307 * C4667 + C139448 * C4920) * C6691) *
                C139600) *
               C139587) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C30408 +
             (C32533 + C32540) * C139600) *
                C13591 +
            ((C401 + C417) * C30408 + C32536 * C139600) * C139587) *
               C139601 -
           ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C30408) * C13591) *
               C139590 +
           ((C421 * C30408 + C32538 * C139600) * C13591 +
            ((C409 + C419) * C30408 + (C2075 + C2083) * C139600) * C139587) *
               C6691) *
              C9074 +
          (((C32536 * C30408 + C36002 * C139600) * C13591 +
            (C32538 * C30408 + (C5015 + C5021) * C139600) * C139587) *
               C139590 -
           ((C36003 * C139600 + C32537 * C30408) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C30408) *
                C13591) *
               C139601 -
           ((((C307 * C4749 + C139448 * C5010) * C139346 +
              (C307 * C4659 + C139448 * C4916) * C181) *
                 C139600 +
             (C2083 + C2075) * C30408) *
                C139587 +
            ((C5021 + C5015) * C139600 + C2084 * C30408) * C13591) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C9224 +
             (C307 * C245 + C139448 * C474) * C9074 - C32431 * C9225 -
             C32649 * C139384) *
                C30408 +
            (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
             C36121 * C139384) *
                C139600) *
               C13591 +
           ((C9449 + C9450 - C9451 - C9452) * C30408 +
            (C41634 + C41635 - C41636 - C41637) * C139600) *
               C139587) *
              C139346 * C139601 +
          (((C9451 - (C9450 + C9449) + C9452) * C30408 +
            (C41636 - (C41635 + C41634) + C41637) * C139600) *
               C13591 +
           ((C9455 - (C9454 + C9453) + C9456) * C30408 +
            (C41638 - (C41639 + C41640) + C41641) * C139600) *
               C139587) *
              C139346 * C139590 +
          ((C9463 * C30408 + (C41640 + C41639 - C41638 - C41641) * C139600) *
               C13591 +
           ((C9459 + C9458 - C9457 - C9460) * C30408 +
            (C1988 * C9224 + C2183 * C9074 -
             (C307 * C4659 + C139448 * C4916) * C9225 -
             (C307 * C4834 + C139448 * C5098) * C139384) *
                C139600) *
               C139587) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6694 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139601 -
            (C30839 + C30840) * C6695 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C6696 + (C30845 + C30846) * C6691) *
               C13591 +
           ((C30840 + C30839) * C6694 + (C30842 + C30841) * C139601 -
            (C30844 + C30843) * C6695 - (C30846 + C30845) * C139590 +
            (C30848 + C30847) * C6696 + (C30850 + C30849) * C6691) *
               C139587) *
              C139448 * C9074 +
          (((C32764 + C32765) * C6695 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139601 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C6694) +
            (C32766 + C32767) * C139590 - (C32768 + C32769) * C6696 -
            (C32770 + C32771) * C6691) *
               C13591 +
           ((C32769 + C32768) * C6695 -
            ((C32767 + C32766) * C139601 + (C32765 + C32764) * C6694) +
            (C32771 + C32770) * C139590 -
            (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
             C30408 * C2266) *
                C6696 -
            (C30813 * C4667 + C139600 * C5198 + C30812 * C1709 +
             C30408 * C2271) *
                C6691) *
               C139587) *
              C139448 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) *
                C139587) *
               C139448 * C139601 -
           (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
               C139448 * C139590 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C13591 +
            ((C30848 + C30847) * C181 + (C30933 + C30934) * C139346) *
                C139587) *
               C139448 * C6691) *
              C9074 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C13591 +
            ((C32769 + C32768) * C181 + (C32880 + C32881) * C139346) *
                C139587) *
               C139448 * C139590 -
           (((C32879 + C32878) * C139346 + (C32765 + C32764) * C181) * C139587 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C13591) *
               C139448 * C139601 -
           (((C30813 * C4749 + C139600 * C5288 + C30812 * C1793 +
              C30408 * C2367) *
                 C139346 +
             (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
              C30408 * C2266) *
                 C181) *
                C139587 +
            ((C32881 + C32880) * C139346 + (C32768 + C32769) * C181) * C13591) *
               C139448 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C9224 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C9074 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C9225 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C13591 +
           ((C30840 + C30839) * C9224 + (C31013 + C31014) * C9074 -
            (C32765 + C32764) * C9225 - (C32988 + C32989) * C139384) *
               C139587) *
              C139448 * C139346 * C139601 +
          (((C32764 + C32765) * C9225 -
            ((C31014 + C31013) * C9074 + (C30839 + C30840) * C9224) +
            (C32989 + C32988) * C139384) *
               C13591 +
           ((C32769 + C32768) * C9225 -
            ((C31015 + C31016) * C9074 + (C30844 + C30843) * C9224) +
            (C32990 + C32991) * C139384) *
               C139587) *
              C139448 * C139346 * C139590 +
          (((C30843 + C30844) * C9224 + (C31016 + C31015) * C9074 -
            (C32768 + C32769) * C9225 - (C32991 + C32990) * C139384) *
               C13591 +
           ((C30848 + C30847) * C9224 + (C31017 + C31018) * C9074 -
            (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
             C30408 * C2266) *
                C9225 -
            (C30813 * C4834 + C139600 * C5376 + C30812 * C1880 +
             C30408 * C2463) *
                C139384) *
               C139587) *
              C139448 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C7401 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C7396 -
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C7402 -
             (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                 C139308) *
                C139448 * C30408 +
            ((C32075 + C32076) * C7401 + (C32077 + C32078) * C7396 -
             (C32079 + C32080) * C7402 - (C32081 + C32082) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C32080 + C32079) * C7402 -
             ((C32078 + C32077) * C7396 + (C32076 + C32075) * C7401) +
             (C32082 + C32081) * C139308) *
                C139448 * C30408 +
            ((C35550 + C35551) * C7402 -
             ((C35552 + C35553) * C7396 + (C35554 + C35555) * C7401) +
             (C35556 + C35557) * C139308) *
                C139448 * C139600) *
               C139384) *
              C139570 +
          ((((C14333 + C14332) * C7402 -
             ((C14331 + C14330) * C7396 + (C14329 + C14328) * C7401) +
             (C14335 + C14334) * C139308) *
                C139448 * C30408 +
            ((C23335 + C23336) * C7402 -
             ((C17983 + C17984) * C7396 + (C17985 + C17986) * C7401) +
             (C23337 + C23338) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C17986 + C17985) * C7401 + (C17984 + C17983) * C7396 -
             (C23336 + C23335) * C7402 - (C23338 + C23337) * C139308) *
                C139448 * C30408 +
            ((C19919 + C19920) * C7401 + (C19921 + C19922) * C7396 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C7402 -
             (C13596 * C5472 + C139587 * C5478 + C13595 * C5473 +
              C13591 * C5479) *
                 C139308) *
                C139448 * C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C923 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139570 -
             (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
                C139448 * C30408 +
            ((C32075 + C32076) * C923 + (C32197 + C32198) * C139570 -
             (C17985 + C17986) * C924 - (C18102 + C18101) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C14333 + C14332) * C924 -
             ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                  C139570 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C923) +
             (C14452 + C14453) * C139360) *
                C139448 * C30408 +
            ((C23335 + C23336) * C924 -
             ((C32199 + C32200) * C139570 + (C32079 + C32080) * C923) +
             (C23474 + C23473) * C139360) *
                C139448 * C139600) *
               C139308) *
              C9074 +
          ((((C17986 + C17985) * C924 -
             ((C32198 + C32197) * C139570 + (C32076 + C32075) * C923) +
             (C18101 + C18102) * C139360) *
                C139448 * C30408 +
            ((C19919 + C19920) * C924 -
             ((C35666 + C35667) * C139570 + (C35554 + C35555) * C923) +
             (C20030 + C20029) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C32080 + C32079) * C923 + (C32200 + C32199) * C139570 -
             (C23336 + C23335) * C924 - (C23473 + C23474) * C139360) *
                C139448 * C30408 +
            ((C35550 + C35551) * C923 + (C35664 + C35665) * C139570 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C924 -
             (C13596 * C5555 + C139587 * C5558 + C13595 * C5556 +
              C13591 * C5559) *
                 C139360) *
                C139448 * C139600) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C9224 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C9074 -
             (C32076 + C32075) * C9225 - (C32313 + C32314) * C139384) *
                C139448 * C30408 +
            ((C32075 + C32076) * C9224 + (C32314 + C32313) * C9074 -
             (C35554 + C35555) * C9225 - (C35775 + C35774) * C139384) *
                C139448 * C139600) *
               C139570 +
           (((C17986 + C17985) * C9225 -
             ((C14567 + C14566) * C9074 + (C14329 + C14328) * C9224) +
             (C18216 + C18215) * C139384) *
                C139448 * C30408 +
            ((C19919 + C19920) * C9225 -
             ((C18215 + C18216) * C9074 + (C17985 + C17986) * C9224) +
             (C20137 + C20138) * C139384) *
                C139448 * C139600) *
               C139360) *
              C7396 +
          ((((C32080 + C32079) * C9225 -
             ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                  C9074 +
              (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                  C9224) +
             (C32315 + C32316) * C139384) *
                C139448 * C30408 +
            ((C35550 + C35551) * C9225 -
             ((C32316 + C32315) * C9074 + (C32079 + C32080) * C9224) +
             (C35777 + C35776) * C139384) *
                C139448 * C139600) *
               C139570 +
           (((C14333 + C14332) * C9224 + (C14568 + C14569) * C9074 -
             (C23336 + C23335) * C9225 - (C23610 + C23609) * C139384) *
                C139448 * C30408 +
            ((C23335 + C23336) * C9224 + (C23609 + C23610) * C9074 -
             (C13596 * C5469 + C139587 * C5475 + C13595 * C5470 +
              C13591 * C5476) *
                 C9225 -
             (C13596 * C5635 + C139587 * C5638 + C13595 * C5636 +
              C13591 * C5639) *
                 C139384) *
                C139448 * C139600) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C7401 +
              (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
              C338 * C139308) *
                 C30408 +
             (C40326 + C40327 - C40328 - C40329) * C139600) *
                C13591 +
            ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                 C30408 +
             (C40330 + C40331 - C40332 - C40333) * C139600) *
                C139587) *
               C9074 +
           (((C40328 - (C40327 + C40326) + C40329) * C30408 +
             (C4930 * C7402 - (C35898 * C7396 + C35899 * C7401) +
              C4931 * C139308) *
                 C139600) *
                C13591 +
            ((C40332 - (C40331 + C40330) + C40333) * C30408 +
             (C4932 * C7402 - (C4931 * C7396 + C4930 * C7401) +
              C4933 * C139308) *
                 C139600) *
                C139587) *
               C139384) *
              C139570 +
          ((((C1116 * C7402 -
              ((C307 * C839 + C139448 * C1098) * C7396 +
               (C307 * C832 + C139448 * C1094) * C7401) +
              C1117 * C139308) *
                 C30408 +
             (C40334 - (C40335 + C40336) + C40337) * C139600) *
                C13591 +
            ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
              C1119 * C139308) *
                 C30408 +
             (C40338 - (C40339 + C40340) + C40341) * C139600) *
                C139587) *
               C9074 +
           (((C40336 + C40335 - C40334 - C40337) * C30408 +
             (C36846 * C7401 + C36847 * C7396 - C36848 * C7402 -
              C36849 * C139308) *
                 C139600) *
                C13591 +
            ((C40340 + C40339 - C40338 - C40341) * C30408 +
             (C36848 * C7401 + C36849 * C7396 -
              (C307 * C5469 + C139448 * C5715) * C7402 -
              (C307 * C5472 + C139448 * C5718) * C139308) *
                 C139600) *
                C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C923 +
              (C307 * C182 + C139448 * C394) * C139570 -
              (C307 * C832 + C139448 * C1094) * C924 -
              (C307 * C927 + C139448 * C1195) * C139360) *
                 C30408 +
             (C36952 + C36953 - C36954 - C36955) * C139600) *
                C13591 +
            ((C1201 + C1202 - C1203 - C1220) * C30408 + C42590 * C139600) *
                C139587) *
               C7396 +
           (((C1203 - (C1202 + C1201) + C1220) * C30408 + C42591 * C139600) *
                C13591 +
            ((C1208 - (C1207 + C1206) + C1222) * C30408 +
             (C10196 - (C10197 + C10198) + C10199) * C139600) *
                C139587) *
               C139308) *
              C9074 +
          ((((C36954 - (C36953 + C36952) + C36955) * C30408 +
             (C36956 - (C36957 + C36958) + C36968) * C139600) *
                C13591 +
            (C42591 * C30408 +
             (C36961 - (C36962 + C36963) + C36969) * C139600) *
                C139587) *
               C7396 +
           ((C42590 * C30408 + (C36963 + C36962 - C36961 - C36969) * C139600) *
                C13591 +
            ((C10198 + C10197 - C10196 - C10199) * C30408 +
             (C4932 * C923 + C5019 * C139570 -
              (C307 * C5469 + C139448 * C5715) * C924 -
              (C307 * C5555 + C139448 * C5797) * C139360) *
                 C139600) *
                C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C9224 +
                        (C307 * C245 + C139448 * C474) * C9074 -
                        C32431 * C9225 - C32649 * C139384) *
                           C30408 +
                       (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                        C36121 * C139384) *
                           C139600) *
                          C13591 +
                      ((C9449 + C9450 - C9451 - C9452) * C30408 +
                       (C41634 + C41635 - C41636 - C41637) * C139600) *
                          C139587) *
                         C139570 +
                     (((C34920 * C9225 -
                        ((C307 * C1011 + C139448 * C1301) * C9074 +
                         (C307 * C832 + C139448 * C1094) * C9224) +
                        C35140 * C139384) *
                           C30408 +
                       (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                        C37072 * C139384) *
                           C139600) *
                          C13591 +
                      ((C10298 - (C10299 + C10300) + C10301) * C30408 +
                       (C42722 - (C42723 + C42724) + C42725) * C139600) *
                          C139587) *
                         C139360) *
                        C7396 +
                    ((((C9451 - (C9450 + C9449) + C9452) * C30408 +
                       (C41636 - (C41635 + C41634) + C41637) * C139600) *
                          C13591 +
                      ((C9455 - (C9454 + C9453) + C9456) * C30408 +
                       (C41638 - (C41639 + C41640) + C41641) * C139600) *
                          C139587) *
                         C139570 +
                     (((C10300 + C10299 - C10298 - C10301) * C30408 +
                       (C42724 + C42723 - C42722 - C42725) * C139600) *
                          C13591 +
                      ((C10304 + C10303 - C10302 - C10305) * C30408 +
                       (C8435 * C9224 + C8660 * C9074 -
                        (C307 * C5469 + C139448 * C5715) * C9225 -
                        (C307 * C5635 + C139448 * C5874) * C139384) *
                           C139600) *
                          C139587) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
                C13591 +
            ((C30840 + C30839) * C7401 + (C30842 + C30841) * C7396 -
             (C30844 + C30843) * C7402 - (C30846 + C30845) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C32764 + C32765) * C7402 -
             ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
               C30408 * C2268) *
                  C7396 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C7401) +
             (C32766 + C32767) * C139308) *
                C13591 +
            ((C32769 + C32768) * C7402 -
             ((C32767 + C32766) * C7396 + (C32765 + C32764) * C7401) +
             (C32771 + C32770) * C139308) *
                C139587) *
               C139448 * C139384) *
              C139570 +
          ((((C31725 + C31726) * C7402 -
             ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
               C30408 * C1400) *
                  C7396 +
              (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
               C30408 * C1396) *
                  C7401) +
             (C31727 + C31728) * C139308) *
                C13591 +
            ((C31730 + C31729) * C7402 -
             ((C31728 + C31727) * C7396 + (C31726 + C31725) * C7401) +
             (C31732 + C31731) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C7401 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C7396 -
             (C40758 + C40759) * C7402 - (C40760 + C40761) * C139308) *
                C13591 +
            ((C40759 + C40758) * C7401 + (C40761 + C40760) * C7396 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C7402 -
             (C30813 * C5472 + C139600 * C5952 + C30812 * C3902 +
              C30408 * C4415) *
                 C139308) *
                C139587) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C923 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139570 -
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C924 -
             (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
              C30408 * C1497) *
                 C139360) *
                C13591 +
            ((C30840 + C30839) * C923 + (C30929 + C30930) * C139570 -
             (C31726 + C31725) * C924 - (C31839 + C31840) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C31725 + C31726) * C924 -
             ((C30930 + C30929) * C139570 + (C30839 + C30840) * C923) +
             (C31840 + C31839) * C139360) *
                C13591 +
            ((C31730 + C31729) * C924 -
             ((C30931 + C30932) * C139570 + (C30844 + C30843) * C923) +
             (C31841 + C31842) * C139360) *
                C139587) *
               C139448 * C139308) *
              C9074 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C924 -
             ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
               C30408 * C2368) *
                  C139570 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C923) +
             (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
              C139600 * C6029) *
                 C139360) *
                C13591 +
            ((C40759 + C40758) * C924 -
             ((C32879 + C32878) * C139570 + (C32765 + C32764) * C923) +
             (C40896 + C40897) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C32764 + C32765) * C923 + (C32878 + C32879) * C139570 -
             (C40758 + C40759) * C924 - (C40897 + C40896) * C139360) *
                C13591 +
            ((C32769 + C32768) * C923 + (C32880 + C32881) * C139570 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C924 -
             (C30813 * C5555 + C139600 * C6031 + C30812 * C3991 +
              C30408 * C4497) *
                 C139360) *
                C139587) *
               C139448 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C9225 -
             (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
              C30408 * C2460) *
                 C139384) *
                C13591 +
            ((C30840 + C30839) * C9224 + (C31013 + C31014) * C9074 -
             (C32765 + C32764) * C9225 - (C32988 + C32989) * C139384) *
                C139587) *
               C139448 * C139570 +
           (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C9225 -
             ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
               C30408 * C1602) *
                  C9074 +
              (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
               C30408 * C1396) *
                  C9224) +
             (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
              C139600 * C6106) *
                 C139384) *
                C13591 +
            ((C40759 + C40758) * C9225 -
             ((C31949 + C31950) * C9074 + (C31726 + C31725) * C9224) +
             (C41032 + C41033) * C139384) *
                C139587) *
               C139448 * C139360) *
              C7396 +
          ((((C32764 + C32765) * C9225 -
             ((C31014 + C31013) * C9074 + (C30839 + C30840) * C9224) +
             (C32989 + C32988) * C139384) *
                C13591 +
            ((C32769 + C32768) * C9225 -
             ((C31015 + C31016) * C9074 + (C30844 + C30843) * C9224) +
             (C32990 + C32991) * C139384) *
                C139587) *
               C139448 * C139570 +
           (((C31725 + C31726) * C9224 + (C31950 + C31949) * C9074 -
             (C40758 + C40759) * C9225 - (C41033 + C41032) * C139384) *
                C13591 +
            ((C31730 + C31729) * C9224 + (C31951 + C31952) * C9074 -
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C9225 -
             (C30813 * C5635 + C139600 * C6108 + C30812 * C4077 +
              C30408 * C4575) *
                 C139384) *
                C139587) *
               C139448 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C7401 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C7396 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C7402 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C139448 * C30408 +
           ((C32075 + C32076) * C7401 + (C32077 + C32078) * C7396 -
            (C32079 + C32080) * C7402 - (C32081 + C32082) * C139308) *
               C139448 * C139600) *
              C139603 +
          (((C32080 + C32079) * C7402 -
            ((C32078 + C32077) * C7396 + (C32076 + C32075) * C7401) +
            (C32082 + C32081) * C139308) *
               C139448 * C30408 +
           ((C35550 + C35551) * C7402 -
            ((C35552 + C35553) * C7396 + (C35554 + C35555) * C7401) +
            (C35556 + C35557) * C139308) *
               C139448 * C139600) *
              C139596 +
          (((C35555 + C35554) * C7401 + (C35553 + C35552) * C7396 -
            (C35551 + C35550) * C7402 - (C35557 + C35556) * C139308) *
               C139448 * C30408 +
           ((C37450 + C37451) * C7401 + (C37452 + C37453) * C7396 -
            (C13596 * C6163 + C139587 * C6169 + C13595 * C6164 +
             C13591 * C6170) *
                C7402 -
            (C13596 * C6166 + C139587 * C6172 + C13595 * C6167 +
             C13591 * C6173) *
                C139308) *
               C139448 * C139600) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C30408 +
            ((C32075 + C32076) * C181 + (C32197 + C32198) * C139346) * C139448 *
                C139600) *
               C7396 -
           (((C32199 + C32200) * C139346 + (C32079 + C32080) * C181) * C139448 *
                C139600 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139448 * C30408) *
               C139308) *
              C139603 +
          ((((C32080 + C32079) * C181 + (C32200 + C32199) * C139346) * C139448 *
                C30408 +
            ((C35550 + C35551) * C181 + (C35664 + C35665) * C139346) * C139448 *
                C139600) *
               C139308 -
           (((C35666 + C35667) * C139346 + (C35554 + C35555) * C181) * C139448 *
                C139600 +
            ((C32198 + C32197) * C139346 + (C32076 + C32075) * C181) * C139448 *
                C30408) *
               C7396) *
              C139596 +
          ((((C35555 + C35554) * C181 + (C35667 + C35666) * C139346) * C139448 *
                C30408 +
            ((C37450 + C37451) * C181 + (C37528 + C37529) * C139346) * C139448 *
                C139600) *
               C7396 -
           (((C13596 * C6225 + C139587 * C6228 + C13595 * C6226 +
              C13591 * C6229) *
                 C139346 +
             (C13596 * C6163 + C139587 * C6169 + C13595 * C6164 +
              C13591 * C6170) *
                 C181) *
                C139448 * C139600 +
            ((C35665 + C35664) * C139346 + (C35551 + C35550) * C181) * C139448 *
                C30408) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C10840 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139603 -
            (C32076 + C32075) * C10841 - (C32313 + C32314) * C139596 +
            (C35555 + C35554) * C10842 + (C35774 + C35775) * C10691) *
               C139448 * C30408 +
           ((C32075 + C32076) * C10840 + (C32314 + C32313) * C139603 -
            (C35554 + C35555) * C10841 - (C35775 + C35774) * C139596 +
            (C37450 + C37451) * C10842 + (C37605 + C37604) * C10691) *
               C139448 * C139600) *
              C139346 * C7396 +
          (((C32080 + C32079) * C10841 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139603 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C10840) +
            (C32315 + C32316) * C139596 - (C35551 + C35550) * C10842 -
            (C35776 + C35777) * C10691) *
               C139448 * C30408 +
           ((C35550 + C35551) * C10841 -
            ((C32316 + C32315) * C139603 + (C32079 + C32080) * C10840) +
            (C35777 + C35776) * C139596 -
            (C13596 * C6163 + C139587 * C6169 + C13595 * C6164 +
             C13591 * C6170) *
                C10842 -
            (C13596 * C6285 + C139587 * C6288 + C13595 * C6286 +
             C13591 * C6289) *
                C10691) *
               C139448 * C139600) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7401 +
             (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
             C338 * C139308) *
                C30408 +
            (C40326 + C40327 - C40328 - C40329) * C139600) *
               C13591 +
           ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                C30408 +
            (C40330 + C40331 - C40332 - C40333) * C139600) *
               C139587) *
              C139603 +
          (((C40328 - (C40327 + C40326) + C40329) * C30408 +
            (C43508 - (C43509 + C43510) + C43511) * C139600) *
               C13591 +
           ((C40332 - (C40331 + C40330) + C40333) * C30408 +
            (C43512 - (C43513 + C43514) + C43515) * C139600) *
               C139587) *
              C139596 +
          (((C43510 + C43509 - C43508 - C43511) * C30408 +
            (C37682 * C7401 + C37683 * C7396 - C35900 * C7402 -
             C35901 * C139308) *
                C139600) *
               C13591 +
           ((C43514 + C43513 - C43512 - C43515) * C30408 +
            (C35900 * C7401 + C35901 * C7396 -
             (C307 * C6163 + C139448 * C6341) * C7402 -
             (C307 * C6166 + C139448 * C6344) * C139308) *
                C139600) *
               C139587) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C30408 +
             (C32533 + C32540) * C139600) *
                C13591 +
            ((C401 + C417) * C30408 + C32536 * C139600) * C139587) *
               C7396 -
           ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C30408) * C13591) *
               C139308) *
              C139603 +
          (((C32536 * C30408 + C36002 * C139600) * C13591 +
            (C32538 * C30408 + (C5015 + C5021) * C139600) * C139587) *
               C139308 -
           ((C36003 * C139600 + C32537 * C30408) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C30408) *
                C13591) *
               C7396) *
              C139596 +
          ((((C36006 + C36012) * C30408 + (C37754 + C37758) * C139600) *
                C13591 +
            (C36002 * C30408 + (C36007 + C36013) * C139600) * C139587) *
               C7396 -
           ((((C307 * C6225 + C139448 * C6397) * C139346 +
              (C307 * C6163 + C139448 * C6341) * C181) *
                 C139600 +
             (C5021 + C5015) * C30408) *
                C139587 +
            ((C36013 + C36007) * C139600 + C36003 * C30408) * C13591) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C10840 +
             (C307 * C245 + C139448 * C474) * C139603 - C32431 * C10841 -
             C32649 * C139596 + C35899 * C10842 + C36121 * C10691) *
                C30408 +
            (C32431 * C10840 + C32649 * C139603 - C35899 * C10841 -
             C36121 * C139596 + C37682 * C10842 + C37829 * C10691) *
                C139600) *
               C13591 +
           ((C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C30408 +
            (C43712 + C43713 - C43714 - C43715 + C43716 + C43717) * C139600) *
               C139587) *
              C139346 * C7396 +
          (((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C30408 +
            (C43714 - (C43713 + C43712) + C43715 - C43716 - C43717) * C139600) *
               C13591 +
           ((C11074 - (C11073 + C11072) + C11075 - C11076 - C11077) * C30408 +
            (C4932 * C10841 - (C2182 * C139603 + C1986 * C10840) +
             C5115 * C139596 - (C307 * C6163 + C139448 * C6341) * C10842 -
             (C307 * C6285 + C139448 * C6452) * C10691) *
                C139600) *
               C139587) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7401 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C7396 -
            (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
               C13591 +
           ((C30840 + C30839) * C7401 + (C30842 + C30841) * C7396 -
            (C30844 + C30843) * C7402 - (C30846 + C30845) * C139308) *
               C139587) *
              C139448 * C139603 +
          (((C32764 + C32765) * C7402 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C7396 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C7401) +
            (C32766 + C32767) * C139308) *
               C13591 +
           ((C32769 + C32768) * C7402 -
            ((C32767 + C32766) * C7396 + (C32765 + C32764) * C7401) +
            (C32771 + C32770) * C139308) *
               C139587) *
              C139448 * C139596 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C7401 +
            (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
             C139600 * C6508) *
                C7396 -
            (C36230 + C36231) * C7402 - (C36232 + C36233) * C139308) *
               C13591 +
           ((C36231 + C36230) * C7401 + (C36233 + C36232) * C7396 -
            (C30813 * C6163 + C139600 * C6503 + C30812 * C4658 +
             C30408 * C5193) *
                C7402 -
            (C30813 * C6166 + C139600 * C6506 + C30812 * C4665 +
             C30408 * C5197) *
                C139308) *
               C139587) *
              C139448 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) *
                C139587) *
               C139448 * C7396 -
           (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
               C139448 * C139308) *
              C139603 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C13591 +
            ((C32769 + C32768) * C181 + (C32880 + C32881) * C139346) *
                C139587) *
               C139448 * C139308 -
           (((C32879 + C32878) * C139346 + (C32765 + C32764) * C181) * C139587 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C13591) *
               C139448 * C7396) *
              C139596 +
          ((((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C13591 +
            ((C36231 + C36230) * C181 + (C36336 + C36337) * C139346) *
                C139587) *
               C139448 * C7396 -
           (((C30813 * C6225 + C139600 * C6559 + C30812 * C4748 +
              C30408 * C5287) *
                 C139346 +
             (C30813 * C6163 + C139600 * C6503 + C30812 * C4658 +
              C30408 * C5193) *
                 C181) *
                C139587 +
            ((C36337 + C36336) * C139346 + (C36230 + C36231) * C181) * C13591) *
               C139448 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C10840 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139603 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C10841 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139596 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C10691) *
               C13591 +
           ((C30840 + C30839) * C10840 + (C31013 + C31014) * C139603 -
            (C32765 + C32764) * C10841 - (C32988 + C32989) * C139596 +
            (C36231 + C36230) * C10842 + (C36440 + C36441) * C10691) *
               C139587) *
              C139448 * C139346 * C7396 +
          (((C32764 + C32765) * C10841 -
            ((C31014 + C31013) * C139603 + (C30839 + C30840) * C10840) +
            (C32989 + C32988) * C139596 - (C36230 + C36231) * C10842 -
            (C36441 + C36440) * C10691) *
               C13591 +
           ((C32769 + C32768) * C10841 -
            ((C31015 + C31016) * C139603 + (C30844 + C30843) * C10840) +
            (C32990 + C32991) * C139596 -
            (C30813 * C6163 + C139600 * C6503 + C30812 * C4658 +
             C30408 * C5193) *
                C10842 -
            (C30813 * C6285 + C139600 * C6614 + C30812 * C4833 +
             C30408 * C5375) *
                C10691) *
               C139587) *
              C139448 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C103 +
           (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
               C92 -
           (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
               C104 -
           (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
               C93 +
           (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
               C105 +
           (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
               C94 -
           (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
               C106 -
           (C13596 * C122 + C139587 * C129 + C13595 * C120 + C13591 * C128) *
               C95) *
              C139448 * C30408 +
          ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
            C139587 * C1702) *
               C103 +
           (C13595 * C1707 + C13591 * C1714 + C13596 * C1706 +
            C139587 * C1713) *
               C92 -
           (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
            C13591 * C1702) *
               C104 -
           (C13596 * C1705 + C139587 * C1712 + C13595 * C1706 +
            C13591 * C1713) *
               C93 +
           (C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
            C139587 * C1704) *
               C105 +
           (C13595 * C1705 + C13591 * C1712 + C13596 * C1709 +
            C139587 * C1715) *
               C94 -
           (C13596 * C1701 + C139587 * C1710 + C13595 * C1699 +
            C13591 * C1704) *
               C106 -
           (C13596 * C1711 + C139587 * C1716 + C13595 * C1709 +
            C13591 * C1715) *
               C95) *
              C139448 * C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C137108 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139562 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C137101 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C139308) *
               C139448 * C30408 +
           ((C32075 + C32076) * C137108 + (C32077 + C32078) * C139562 -
            (C32079 + C32080) * C137101 - (C32081 + C32082) * C139308) *
               C139448 * C139600) *
              C139372 * C2565 +
          (((C14333 + C14332) * C137101 -
            ((C14331 + C14330) * C139562 + (C14329 + C14328) * C137108) +
            (C14335 + C14334) * C139308) *
               C139448 * C30408 +
           ((C23335 + C23336) * C137101 -
            ((C17983 + C17984) * C139562 + (C17985 + C17986) * C137108) +
            (C23337 + C23338) * C139308) *
               C139448 * C139600) *
              C139372 * C2566 +
          (((C16298 + C16297) * C137108 + (C16296 + C16295) * C139562 -
            (C16294 + C16293) * C137101 - (C16300 + C16299) * C139308) *
               C139448 * C30408 +
           ((C17987 + C17988) * C137108 + (C17989 + C17990) * C139562 -
            (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
             C13591 * C3907) *
                C137101 -
            (C13596 * C3903 + C139587 * C3912 + C13595 * C3904 +
             C13591 * C3913) *
                C139308) *
               C139448 * C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C181 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139346) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C181 +
            (C13595 * C1794 + C13591 * C1799 + C13596 * C1791 +
             C139587 * C1796) *
                C139346) *
               C139448 * C139600) *
              C92 -
          (((C13596 * C1792 + C139587 * C1797 + C13595 * C1791 +
             C13591 * C1796) *
                C139346 +
            (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
             C13591 * C1702) *
                C181) *
               C139448 * C139600 +
           ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                C139346 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C181) *
               C139448 * C30408) *
              C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C181 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139346) *
               C139448 * C30408 +
           ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C181 +
            (C13595 * C1792 + C13591 * C1797 + C13596 * C1793 +
             C139587 * C1798) *
                C139346) *
               C139448 * C139600) *
              C94 -
          (((C13596 * C1795 + C139587 * C1800 + C13595 * C1793 +
             C13591 * C1798) *
                C139346 +
            (C13596 * C1701 + C139587 * C1710 + C13595 * C1699 +
             C13591 * C1704) *
                C181) *
               C139448 * C139600 +
           ((C13596 * C186 + C139587 * C192 + C13595 * C185 + C13591 * C191) *
                C139346 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C181) *
               C139448 * C30408) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C139448 * C30408 +
           ((C32075 + C32076) * C2660 + (C32197 + C32198) * C2565 -
            (C17985 + C17986) * C2661 - (C18102 + C18101) * C2566 +
            (C17987 + C17988) * C2662 + (C18104 + C18103) * C2567) *
               C139448 * C139600) *
              C139562 +
          (((C14333 + C14332) * C2661 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C2565 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C2660) +
            (C14452 + C14453) * C2566 - (C16294 + C16293) * C2662 -
            (C16409 + C16410) * C2567) *
               C139448 * C30408 +
           ((C23335 + C23336) * C2661 -
            ((C32199 + C32200) * C2565 + (C32079 + C32080) * C2660) +
            (C23474 + C23473) * C2566 -
            (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
             C13591 * C3907) *
                C2662 -
            (C13596 * C3992 + C139587 * C3998 + C13595 * C3993 +
             C13591 * C3999) *
                C2567) *
               C139448 * C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C244 +
            (C13595 * C1879 + C13591 * C1884 + C13596 * C1878 +
             C139587 * C1883) *
                C139372) *
               C139448 * C139600) *
              C139346 * C92 -
          (((C13596 * C1877 + C139587 * C1882 + C13595 * C1878 +
             C13591 * C1883) *
                C139372 +
            (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
             C13591 * C1702) *
                C244) *
               C139448 * C139600 +
           ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                C139372 +
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C244) *
               C139448 * C30408) *
              C139346 * C93 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C244 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139372) *
               C139448 * C30408 +
           ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C244 +
            (C13595 * C1877 + C13591 * C1882 + C13596 * C1880 +
             C139587 * C1885) *
                C139372) *
               C139448 * C139600) *
              C139346 * C94 -
          (((C13596 * C1881 + C139587 * C1886 + C13595 * C1880 +
             C13591 * C1885) *
                C139372 +
            (C13596 * C1701 + C139587 * C1710 + C13595 * C1699 +
             C13591 * C1704) *
                C244) *
               C139448 * C139600 +
           ((C13596 * C249 + C139587 * C255 + C13595 * C248 + C13591 * C254) *
                C139372 +
            (C13596 * C111 + C139587 * C121 + C13595 * C110 + C13591 * C119) *
                C244) *
               C139448 * C30408) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C30408 +
            ((C32075 + C32076) * C244 + (C32314 + C32313) * C139372) * C139448 *
                C139600) *
               C2565 -
           (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
                C139600 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
                C30408) *
               C2566 +
           (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C139448 *
                C30408 +
            ((C17987 + C17988) * C244 + (C18217 + C18218) * C139372) * C139448 *
                C139600) *
               C2567) *
              C139562 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C139448 *
                C30408 +
            ((C23335 + C23336) * C244 + (C23609 + C23610) * C139372) * C139448 *
                C139600) *
               C2566 -
           (((C32316 + C32315) * C139372 + (C32079 + C32080) * C244) * C139448 *
                C139600 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139448 * C30408) *
               C2565 -
           (((C13596 * C4078 + C139587 * C4084 + C13595 * C4079 +
              C13591 * C4085) *
                 C139372 +
             (C13596 * C3894 + C139587 * C3906 + C13595 * C3895 +
              C13591 * C3907) *
                 C244) *
                C139448 * C139600 +
            ((C16520 + C16519) * C139372 + (C16294 + C16293) * C244) * C139448 *
                C30408) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C103 +
            (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C30408 +
           ((C307 * C1700 + C139448 * C1962) * C103 +
            (C307 * C1707 + C139448 * C1966) * C92 - C1984 * C104 -
            C1985 * C93 + C1986 * C105 + C1987 * C94 - C1988 * C106 -
            C1989 * C95) *
               C139600) *
              C13591 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C30408 +
           (C1984 * C103 + C1985 * C92 - C1986 * C104 - C1987 * C93 +
            C1988 * C105 + C1989 * C94 -
            (C307 * C1701 + C139448 * C1965) * C106 -
            (C307 * C1711 + C139448 * C1970) * C95) *
               C139600) *
              C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C30408 +
            (C32431 * C137108 + C32432 * C139562 - C1984 * C137101 -
             C1985 * C139308) *
                C139600) *
               C13591 +
           ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
             C340 * C139308) *
                C30408 +
            (C1984 * C137108 + C1985 * C139562 - C1986 * C137101 -
             C1987 * C139308) *
                C139600) *
               C139587) *
              C139372 * C2565 +
          (((C1116 * C137101 -
             ((C307 * C839 + C139448 * C1098) * C139562 +
              (C307 * C832 + C139448 * C1094) * C137108) +
             C1117 * C139308) *
                C30408 +
            (C8433 * C137101 -
             ((C307 * C3900 + C139448 * C4167) * C139562 +
              (C307 * C3891 + C139448 * C4161) * C137108) +
             C8434 * C139308) *
                C139600) *
               C13591 +
           ((C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
             C1119 * C139308) *
                C30408 +
            (C8435 * C137101 - (C8434 * C139562 + C8433 * C137108) +
             C8436 * C139308) *
                C139600) *
               C139587) *
              C139372 * C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C137108 +
             (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
             C2845 * C139308) *
                C30408 +
            ((C307 * C3896 + C139448 * C4166) * C137108 +
             (C307 * C3905 + C139448 * C4172) * C139562 - C33388 * C137101 -
             C33389 * C139308) *
                C139600) *
               C13591 +
           ((C2844 * C137108 + C2845 * C139562 - C2846 * C137101 -
             C2847 * C139308) *
                C30408 +
            (C33388 * C137108 + C33389 * C139562 -
             (C307 * C3894 + C139448 * C4164) * C137101 -
             (C307 * C3903 + C139448 * C4170) * C139308) *
                C139600) *
               C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C181 +
             (C307 * C1794 + C139448 * C2066) * C139346) *
                C139600) *
               C13591 +
           ((C401 + C417) * C30408 + (C2069 + C2081) * C139600) * C139587) *
              C92 -
          ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
           ((C2081 + C2069) * C139600 + (C417 + C401) * C30408) * C13591) *
              C93 +
          ((C421 * C30408 + (C2072 + C2082) * C139600) * C13591 +
           ((C409 + C419) * C30408 + (C2075 + C2083) * C139600) * C139587) *
              C94 -
          ((((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139600 +
            (C420 + C410) * C30408) *
               C139587 +
           ((C2083 + C2075) * C139600 + C422 * C30408) * C13591) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C30408 +
            (C32431 * C2660 + C32539 * C2565 -
             (C307 * C3891 + C139448 * C4161) * C2661 -
             (C307 * C3989 + C139448 * C4247) * C2566 +
             (C307 * C3896 + C139448 * C4166) * C2662 +
             (C307 * C3994 + C139448 * C4248) * C2567) *
                C139600) *
               C13591 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C30408 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139562 +
          (((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C30408 +
            (C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C139600) *
               C13591 +
           ((C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C30408 +
            (C8435 * C2661 - (C2079 * C2565 + C1986 * C2660) + C8547 * C2566 -
             (C307 * C3894 + C139448 * C4164) * C2662 -
             (C307 * C3992 + C139448 * C4252) * C2567) *
                C139600) *
               C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C244 +
             (C307 * C1879 + C139448 * C2159) * C139372) *
                C139600) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
              C139346 * C92 -
          (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
           ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
              C139346 * C93 +
          ((C501 * C30408 + (C30744 + C30743) * C139600) * C13591 +
           ((C489 + C499) * C30408 + (C30745 + C30746) * C139600) * C139587) *
              C139346 * C94 -
          ((((C307 * C1881 + C139448 * C2163) * C139372 +
             (C307 * C1701 + C139448 * C1965) * C244) *
                C139600 +
            (C500 + C490) * C30408) *
               C139587 +
           ((C30746 + C30745) * C139600 + C502 * C30408) * C13591) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C30408 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
               C2565 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
            (((C307 * C4075 + C139448 * C4327) * C139372 +
              (C307 * C3891 + C139448 * C4161) * C244) *
                 C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C30408) *
                C13591) *
               C2566 +
           ((((C307 * C2570 + C139448 * C2827) * C244 +
              (C307 * C2745 + C139448 * C3017) * C139372) *
                 C30408 +
             ((C307 * C3896 + C139448 * C4166) * C244 +
              (C307 * C4080 + C139448 * C4330) * C139372) *
                 C139600) *
                C13591 +
            ((C3022 + C3030) * C30408 + (C33595 + C33599) * C139600) *
                C139587) *
               C2567) *
              C139562 +
          ((((C1310 + C1318) * C30408 + (C31608 + C31607) * C139600) * C13591 +
            ((C1307 + C1317) * C30408 + (C31609 + C31610) * C139600) *
                C139587) *
               C2566 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
               C2565 -
           ((((C307 * C4078 + C139448 * C4332) * C139372 +
              (C307 * C3894 + C139448 * C4164) * C244) *
                 C139600 +
             (C3031 + C3025) * C30408) *
                C139587 +
            ((C33599 + C33595) * C139600 + (C3030 + C3022) * C30408) * C13591) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C13591 +
          ((C30840 + C30839) * C103 + (C30842 + C30841) * C92 -
           (C30844 + C30843) * C104 - (C30846 + C30845) * C93 +
           (C30848 + C30847) * C105 + (C30850 + C30849) * C94 -
           (C30813 * C1701 + C139600 * C2267 + C30812 * C111 + C30408 * C559) *
               C106 -
           (C30813 * C1711 + C139600 * C2272 + C30812 * C122 + C30408 * C565) *
               C95) *
              C139587) *
         C139448 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139562 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
               C13591 +
           ((C30840 + C30839) * C137108 + (C30842 + C30841) * C139562 -
            (C30844 + C30843) * C137101 - (C30846 + C30845) * C139308) *
               C139587) *
              C139448 * C139372 * C2565 +
          (((C31725 + C31726) * C137101 -
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139562 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C137108) +
            (C31727 + C31728) * C139308) *
               C13591 +
           ((C31730 + C31729) * C137101 -
            ((C31728 + C31727) * C139562 + (C31726 + C31725) * C137108) +
            (C31732 + C31731) * C139308) *
               C139587) *
              C139448 * C139372 * C2566 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C137108 +
            (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
             C139600 * C4418) *
                C139562 -
            (C33706 + C33707) * C137101 - (C33708 + C33709) * C139308) *
               C13591 +
           ((C33707 + C33706) * C137108 + (C33709 + C33708) * C139562 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C137101 -
            (C30813 * C3903 + C139600 * C4416 + C30812 * C2579 +
             C30408 * C3111) *
                C139308) *
               C139587) *
              C139448 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139346) *
               C13591 +
           ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) * C139587) *
              C139448 * C92 -
          (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
           ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
              C139448 * C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C13591 +
           ((C30848 + C30847) * C181 + (C30933 + C30934) * C139346) * C139587) *
              C139448 * C94 -
          (((C30813 * C1795 + C139600 * C2369 + C30812 * C186 + C30408 * C645) *
                C139346 +
            (C30813 * C1701 + C139600 * C2267 + C30812 * C111 + C30408 * C559) *
                C181) *
               C139587 +
           ((C30934 + C30933) * C139346 + (C30847 + C30848) * C181) * C13591) *
              C139448 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C2661 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C2566 +
            (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
             C139600 * C4494) *
                C2567) *
               C13591 +
           ((C30840 + C30839) * C2660 + (C30929 + C30930) * C2565 -
            (C31726 + C31725) * C2661 - (C31839 + C31840) * C2566 +
            (C33707 + C33706) * C2662 + (C33812 + C33813) * C2567) *
               C139587) *
              C139448 * C139562 +
          (((C31725 + C31726) * C2661 -
            ((C30930 + C30929) * C2565 + (C30839 + C30840) * C2660) +
            (C31840 + C31839) * C2566 - (C33706 + C33707) * C2662 -
            (C33813 + C33812) * C2567) *
               C13591 +
           ((C31730 + C31729) * C2661 -
            ((C30931 + C30932) * C2565 + (C30844 + C30843) * C2660) +
            (C31841 + C31842) * C2566 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C2662 -
            (C30813 * C3992 + C139600 * C4498 + C30812 * C2665 +
             C30408 * C3201) *
                C2567) *
               C139587) *
              C139448 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) * C139587) *
              C139448 * C139346 * C92 -
          (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
           ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
              C139448 * C139346 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C13591 +
           ((C30848 + C30847) * C244 + (C31017 + C31018) * C139372) * C139587) *
              C139448 * C139346 * C94 -
          (((C30813 * C1881 + C139600 * C2464 + C30812 * C249 + C30408 * C723) *
                C139372 +
            (C30813 * C1701 + C139600 * C2267 + C30812 * C111 + C30408 * C559) *
                C244) *
               C139587 +
           ((C31018 + C31017) * C139372 + (C30847 + C30848) * C244) * C13591) *
              C139448 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) *
                C139587) *
               C139448 * C2565 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139372 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C244) *
                C13591) *
               C139448 * C2566 +
           (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
              C139600 * C4412) *
                 C244 +
             (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
              C139600 * C4576) *
                 C139372) *
                C13591 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) *
                C139587) *
               C139448 * C2567) *
              C139562 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C13591 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                C139587) *
               C139448 * C2566 -
           (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
               C139448 * C2565 -
           (((C30813 * C4078 + C139600 * C4578 + C30812 * C2747 +
              C30408 * C3297) *
                 C139372 +
             (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
              C30408 * C3107) *
                 C244) *
                C139587 +
            ((C33917 + C33916) * C139372 + (C33706 + C33707) * C244) * C13591) *
               C139448 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C826 +
            (C13595 * C1707 + C13591 * C1714 + C13596 * C1706 +
             C139587 * C1713) *
                C821 -
            (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
             C13591 * C1702) *
                C827 -
            (C13596 * C1705 + C139587 * C1712 + C13595 * C1706 +
             C13591 * C1713) *
                C822 +
            (C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C828 +
            (C13595 * C1705 + C13591 * C1712 + C13596 * C1709 +
             C139587 * C1715) *
                C823) *
               C139448 * C139600) *
              C139372 * C139570 +
          (((C14333 + C14332) * C827 -
            ((C14331 + C14330) * C821 + (C14329 + C14328) * C826) +
            (C14335 + C14334) * C822 - (C14337 + C14336) * C828 -
            (C14339 + C14338) * C823) *
               C139448 * C30408 +
           ((C23335 + C23336) * C827 -
            ((C17983 + C17984) * C821 + (C17985 + C17986) * C826) +
            (C23337 + C23338) * C822 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C828 -
            (C13596 * C8122 + C139587 * C8123 + C13595 * C3902 +
             C13591 * C3911) *
                C823) *
               C139448 * C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C3364 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C139303) *
               C139448 * C30408 +
           ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) * C139448 *
               C139600) *
              C139372 * C3360 -
          (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) * C139448 *
               C139600 +
           ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) * C139448 *
               C30408) *
              C139372 * C3361 +
          (((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) * C139448 *
               C30408 +
           ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) * C139448 *
               C139600) *
              C139372 * C3362 -
          (((C13596 * C17960 + C139587 * C17964 + C13595 * C17961 +
             C13591 * C17965) *
                C139303 +
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C3364) *
               C139448 * C139600 +
           ((C17270 + C17269) * C139303 + (C17268 + C17267) * C3364) * C139448 *
               C30408) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C923 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C139570 -
            (C14329 + C14328) * C924 - (C14450 + C14451) * C139360) *
               C139448 * C30408 +
           ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
             C139587 * C1702) *
                C923 +
            (C13595 * C1794 + C13591 * C1799 + C13596 * C1791 +
             C139587 * C1796) *
                C139570 -
            (C17985 + C17986) * C924 - (C18102 + C18101) * C139360) *
               C139448 * C139600) *
              C821 +
          (((C14333 + C14332) * C924 -
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139570 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C923) +
            (C14452 + C14453) * C139360) *
               C139448 * C30408 +
           ((C23335 + C23336) * C924 -
            ((C13596 * C1792 + C139587 * C1797 + C13595 * C1791 +
              C13591 * C1796) *
                 C139570 +
             (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
              C13591 * C1702) *
                 C923) +
            (C23474 + C23473) * C139360) *
               C139448 * C139600) *
              C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C923 +
            (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                C139570 -
            (C14337 + C14336) * C924 - (C14454 + C14455) * C139360) *
               C139448 * C30408 +
           ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
             C139587 * C1704) *
                C923 +
            (C13595 * C1792 + C13591 * C1797 + C13596 * C1793 +
             C139587 * C1798) *
                C139570 -
            (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
             C13591 * C3899) *
                C924 -
            (C13596 * C8222 + C139587 * C8223 + C13595 * C3991 +
             C13591 * C3997) *
                C139360) *
               C139448 * C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
               C3427 +
           (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
               C3360 -
           (C14329 + C14328) * C3428 - (C14450 + C14451) * C3361 +
           (C16298 + C16297) * C3429 + (C16407 + C16408) * C3362 -
           (C17268 + C17267) * C3430 - (C17345 + C17346) * C3363) *
              C139448 * C30408 +
          ((C32075 + C32076) * C3427 + (C32197 + C32198) * C3360 -
           (C17985 + C17986) * C3428 - (C18102 + C18101) * C3361 +
           (C17987 + C17988) * C3429 + (C18104 + C18103) * C3362 -
           (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
            C13591 * C17963) *
               C3430 -
           (C13596 * C18088 + C139587 * C18090 + C13595 * C18089 +
            C13591 * C18091) *
               C3363) *
              C139448 * C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C244 +
             (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C30408 +
            ((C13595 * C1700 + C13591 * C1708 + C13596 * C1697 +
              C139587 * C1702) *
                 C244 +
             (C13595 * C1879 + C13591 * C1884 + C13596 * C1878 +
              C139587 * C1883) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
                C139600 +
            ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
                C30408) *
               C139360) *
              C821 +
          ((((C14333 + C14332) * C244 + (C14568 + C14569) * C139372) * C139448 *
                C30408 +
            ((C23335 + C23336) * C244 + (C23609 + C23610) * C139372) * C139448 *
                C139600) *
               C139360 -
           (((C13596 * C1877 + C139587 * C1882 + C13595 * C1878 +
              C13591 * C1883) *
                 C139372 +
             (C13596 * C1698 + C139587 * C1703 + C13595 * C1697 +
              C13591 * C1702) *
                 C244) *
                C139448 * C139600 +
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139372 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C244) *
                C139448 * C30408) *
               C139570) *
              C822 +
          ((((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C244 +
             (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                 C139372) *
                C139448 * C30408 +
            ((C13595 * C1698 + C13591 * C1703 + C13596 * C1699 +
              C139587 * C1704) *
                 C244 +
             (C13595 * C1877 + C13591 * C1882 + C13596 * C1880 +
              C139587 * C1885) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C13596 * C8322 + C139587 * C8323 + C13595 * C4077 +
              C13591 * C4083) *
                 C139372 +
             (C13596 * C8120 + C139587 * C8121 + C13595 * C3893 +
              C13591 * C3899) *
                 C244) *
                C139448 * C139600 +
            ((C14571 + C14570) * C139372 + (C14337 + C14336) * C244) * C139448 *
                C30408) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C244 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C30408 +
           ((C32075 + C32076) * C244 + (C32314 + C32313) * C139372) * C139448 *
               C139600) *
              C3360 -
          (((C18215 + C18216) * C139372 + (C17985 + C17986) * C244) * C139448 *
               C139600 +
           ((C14567 + C14566) * C139372 + (C14329 + C14328) * C244) * C139448 *
               C30408) *
              C3361 +
          (((C16298 + C16297) * C244 + (C16518 + C16517) * C139372) * C139448 *
               C30408 +
           ((C17987 + C17988) * C244 + (C18217 + C18218) * C139372) * C139448 *
               C139600) *
              C3362 -
          (((C13596 * C18202 + C139587 * C18204 + C13595 * C18203 +
             C13591 * C18205) *
                C139372 +
            (C13596 * C17958 + C139587 * C17962 + C13595 * C17959 +
             C13591 * C17963) *
                C244) *
               C139448 * C139600 +
           ((C17422 + C17421) * C139372 + (C17268 + C17267) * C244) * C139448 *
               C30408) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[43] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139448 * C308) * C826 +
                       (C307 * C116 + C139448 * C314) * C821 - C337 * C827 -
                       C338 * C822 + C339 * C828 + C340 * C823) *
                          C30408 +
                      ((C307 * C1700 + C139448 * C1962) * C826 +
                       (C307 * C1707 + C139448 * C1966) * C821 - C1984 * C827 -
                       C1985 * C822 + C1986 * C828 + C1987 * C823) *
                          C139600) *
                         C13591 +
                     ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                       C341 * C828 + C342 * C823) *
                          C30408 +
                      (C1984 * C826 + C1985 * C821 - C1986 * C827 -
                       C1987 * C822 + C1988 * C828 + C1989 * C823) *
                          C139600) *
                         C139587) *
                        C139372 * C139570 +
                    (((C1116 * C827 -
                       ((C307 * C839 + C139448 * C1098) * C821 +
                        (C307 * C832 + C139448 * C1094) * C826) +
                       C1117 * C822 - C1118 * C828 - C1119 * C823) *
                          C30408 +
                      (C8433 * C827 -
                       ((C307 * C3900 + C139448 * C4167) * C821 +
                        (C307 * C3891 + C139448 * C4161) * C826) +
                       C8434 * C822 - C8435 * C828 - C8436 * C823) *
                          C139600) *
                         C13591 +
                     ((C1118 * C827 - (C1117 * C821 + C1116 * C826) +
                       C1119 * C822 - C1120 * C828 - C1121 * C823) *
                          C30408 +
                      (C8435 * C827 - (C8434 * C821 + C8433 * C826) +
                       C8436 * C822 - (C307 * C8120 + C139448 * C8422) * C828 -
                       (C307 * C8122 + C139448 * C8423) * C823) *
                          C139600) *
                         C139587) *
                        C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139448 * C308) * C3364 +
                       (C307 * C116 + C139448 * C314) * C139303) *
                          C30408 +
                      (C32431 * C3364 + C32432 * C139303) * C139600) *
                         C13591 +
                     ((C337 * C3364 + C338 * C139303) * C30408 +
                      (C1984 * C3364 + C1985 * C139303) * C139600) *
                         C139587) *
                        C139372 * C3360 -
                    (((C8434 * C139303 + C8433 * C3364) * C139600 +
                      (C1117 * C139303 + C1116 * C3364) * C30408) *
                         C139587 +
                     (((C307 * C3900 + C139448 * C4167) * C139303 +
                       (C307 * C3891 + C139448 * C4161) * C3364) *
                          C139600 +
                      ((C307 * C839 + C139448 * C1098) * C139303 +
                       (C307 * C832 + C139448 * C1094) * C3364) *
                          C30408) *
                         C13591) *
                        C139372 * C3361 +
                    ((((C307 * C2570 + C139448 * C2827) * C3364 +
                       (C307 * C2577 + C139448 * C2831) * C139303) *
                          C30408 +
                      ((C307 * C3896 + C139448 * C4166) * C3364 +
                       (C307 * C3905 + C139448 * C4172) * C139303) *
                          C139600) *
                         C13591 +
                     ((C2844 * C3364 + C2845 * C139303) * C30408 +
                      (C33388 * C3364 + C33389 * C139303) * C139600) *
                         C139587) *
                        C139372 * C3362 -
                    ((((C307 * C17960 + C139448 * C18318) * C139303 +
                       (C307 * C17958 + C139448 * C18316) * C3364) *
                          C139600 +
                      ((C307 * C3369 + C139448 * C3547) * C139303 +
                       (C307 * C3366 + C139448 * C3544) * C3364) *
                          C30408) *
                         C139587 +
                     (((C307 * C17961 + C139448 * C18319) * C139303 +
                       (C307 * C17959 + C139448 * C18317) * C3364) *
                          C139600 +
                      ((C307 * C3370 + C139448 * C3548) * C139303 +
                       (C307 * C3367 + C139448 * C3545) * C3364) *
                          C30408) *
                         C13591) *
                        C139372 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C30408 +
            ((C307 * C1700 + C139448 * C1962) * C923 +
             (C307 * C1794 + C139448 * C2066) * C139570 -
             (C307 * C3891 + C139448 * C4161) * C924 -
             (C307 * C3989 + C139448 * C4247) * C139360) *
                C139600) *
               C13591 +
           ((C1201 + C1202 - C1203 - C1220) * C30408 +
            (C10194 + C10193 - C10192 - C10195) * C139600) *
               C139587) *
              C821 +
          (((C1203 - (C1202 + C1201) + C1220) * C30408 +
            (C10192 - (C10193 + C10194) + C10195) * C139600) *
               C13591 +
           ((C1208 - (C1207 + C1206) + C1222) * C30408 +
            (C10196 - (C10197 + C10198) + C10199) * C139600) *
               C139587) *
              C822 +
          ((C1224 * C30408 + (C10198 + C10197 - C10196 - C10199) * C139600) *
               C13591 +
           ((C1213 + C1212 - C1211 - C1223) * C30408 +
            (C1988 * C923 + C2080 * C139570 -
             (C307 * C8120 + C139448 * C8422) * C924 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139600) *
               C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3427 +
            (C307 * C182 + C139448 * C394) * C3360 -
            (C307 * C832 + C139448 * C1094) * C3428 -
            (C307 * C927 + C139448 * C1195) * C3361 +
            (C307 * C2570 + C139448 * C2827) * C3429 +
            (C307 * C2663 + C139448 * C2921) * C3362 -
            (C307 * C3367 + C139448 * C3545) * C3430 -
            (C307 * C3433 + C139448 * C3599) * C3363) *
               C30408 +
           (C32431 * C3427 + C32539 * C3360 -
            (C307 * C3891 + C139448 * C4161) * C3428 -
            (C307 * C3989 + C139448 * C4247) * C3361 +
            (C307 * C3896 + C139448 * C4166) * C3429 +
            (C307 * C3994 + C139448 * C4248) * C3362 -
            (C307 * C17959 + C139448 * C18317) * C3430 -
            (C307 * C18089 + C139448 * C18418) * C3363) *
               C139600) *
              C13591 +
          ((C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
            C2844 * C3429 + C2940 * C3362 -
            (C307 * C3366 + C139448 * C3544) * C3430 -
            (C307 * C3432 + C139448 * C3600) * C3363) *
               C30408 +
           (C1984 * C3427 + C2078 * C3360 - C8433 * C3428 - C8546 * C3361 +
            C33388 * C3429 + C33495 * C3362 -
            (C307 * C17958 + C139448 * C18316) * C3430 -
            (C307 * C18088 + C139448 * C18419) * C3363) *
               C139600) *
              C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C30408 +
             ((C307 * C1700 + C139448 * C1962) * C244 +
              (C307 * C1879 + C139448 * C2159) * C139372) *
                 C139600) *
                C13591 +
            ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
               C139570 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
            (((C307 * C4075 + C139448 * C4327) * C139372 +
              (C307 * C3891 + C139448 * C4161) * C244) *
                 C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C30408) *
                C13591) *
               C139360) *
              C821 +
          ((((C1310 + C1318) * C30408 + (C31608 + C31607) * C139600) * C13591 +
            ((C1307 + C1317) * C30408 + (C31609 + C31610) * C139600) *
                C139587) *
               C139360 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C30408) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C30408) * C13591) *
               C139570) *
              C822 +
          (((C501 * C30408 + (C30744 + C30743) * C139600) * C13591 +
            ((C489 + C499) * C30408 + (C30745 + C30746) * C139600) * C139587) *
               C139570 -
           ((((C307 * C8322 + C139448 * C8647) * C139372 +
              (C307 * C8120 + C139448 * C8422) * C244) *
                 C139600 +
             (C1319 + C1311) * C30408) *
                C139587 +
            ((C31610 + C31609) * C139600 + C1320 * C30408) * C13591) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C30408 +
            (C32431 * C244 + C32649 * C139372) * C139600) *
               C13591 +
           ((C481 + C497) * C30408 + (C30741 + C30742) * C139600) * C139587) *
              C3360 -
          (((C31607 + C31608) * C139600 + (C1318 + C1310) * C30408) * C139587 +
           (((C307 * C4075 + C139448 * C4327) * C139372 +
             (C307 * C3891 + C139448 * C4161) * C244) *
                C139600 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C30408) *
               C13591) *
              C3361 +
          ((((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C30408 +
            ((C307 * C3896 + C139448 * C4166) * C244 +
             (C307 * C4080 + C139448 * C4330) * C139372) *
                C139600) *
               C13591 +
           ((C3022 + C3030) * C30408 + (C33595 + C33599) * C139600) * C139587) *
              C3362 -
          ((((C307 * C18202 + C139448 * C18519) * C139372 +
             (C307 * C17958 + C139448 * C18316) * C244) *
                C139600 +
            ((C307 * C3488 + C139448 * C3653) * C139372 +
             (C307 * C3366 + C139448 * C3544) * C244) *
                C30408) *
               C139587 +
           (((C307 * C18203 + C139448 * C18518) * C139372 +
             (C307 * C17959 + C139448 * C18317) * C244) *
                C139600 +
            ((C307 * C3489 + C139448 * C3654) * C139372 +
             (C307 * C3367 + C139448 * C3545) * C244) *
                C30408) *
               C13591) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C822 +
            (C30848 + C30847) * C828 + (C30850 + C30849) * C823) *
               C139587) *
              C139448 * C139372 * C139570 +
          (((C31725 + C31726) * C827 -
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C821 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C826) +
            (C31727 + C31728) * C822 - (C31729 + C31730) * C828 -
            (C31731 + C31732) * C823) *
               C13591 +
           ((C31730 + C31729) * C827 -
            ((C31728 + C31727) * C821 + (C31726 + C31725) * C826) +
            (C31732 + C31731) * C822 -
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C828 -
            (C30813 * C8122 + C139600 * C8761 + C30812 * C841 +
             C30408 * C1403) *
                C823) *
               C139587) *
              C139448 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C3364 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139303) *
               C13591 +
           ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
               C139587) *
              C139448 * C139372 * C3360 -
          (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) * C139587 +
           ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
             C30408 * C1400) *
                C139303 +
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C3364) *
               C13591) *
              C139448 * C139372 * C3361 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C3364 +
            (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
             C139600 * C4418) *
                C139303) *
               C13591 +
           ((C33707 + C33706) * C3364 + (C33709 + C33708) * C139303) *
               C139587) *
              C139448 * C139372 * C3362 -
          (((C30813 * C17960 + C139600 * C18620 + C30812 * C3369 +
             C30408 * C3709) *
                C139303 +
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C3364) *
               C139587 +
           ((C30813 * C17961 + C139600 * C18621 + C30812 * C3370 +
             C30408 * C3710) *
                C139303 +
            (C30813 * C17959 + C139600 * C18619 + C30812 * C3367 +
             C30408 * C3707) *
                C3364) *
               C13591) *
              C139448 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C923 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139570 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C924 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C139360) *
               C13591 +
           ((C30840 + C30839) * C923 + (C30929 + C30930) * C139570 -
            (C31726 + C31725) * C924 - (C31839 + C31840) * C139360) *
               C139587) *
              C139448 * C821 +
          (((C31725 + C31726) * C924 -
            ((C30930 + C30929) * C139570 + (C30839 + C30840) * C923) +
            (C31840 + C31839) * C139360) *
               C13591 +
           ((C31730 + C31729) * C924 -
            ((C30931 + C30932) * C139570 + (C30844 + C30843) * C923) +
            (C31841 + C31842) * C139360) *
               C139587) *
              C139448 * C822 +
          (((C30843 + C30844) * C923 + (C30932 + C30931) * C139570 -
            (C31729 + C31730) * C924 - (C31842 + C31841) * C139360) *
               C13591 +
           ((C30848 + C30847) * C923 + (C30933 + C30934) * C139570 -
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C924 -
            (C30813 * C8222 + C139600 * C8872 + C30812 * C928 +
             C30408 * C1500) *
                C139360) *
               C139587) *
              C139448 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C3427 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
               C3360 -
           (C30813 * C3891 + C139600 * C4407 + C30812 * C832 + C30408 * C1396) *
               C3428 -
           (C30813 * C3989 + C139600 * C4493 + C30812 * C927 + C30408 * C1497) *
               C3361 +
           (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
            C139600 * C4412) *
               C3429 +
           (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
            C139600 * C4494) *
               C3362 -
           (C30813 * C17959 + C139600 * C18619 + C30812 * C3367 +
            C30408 * C3707) *
               C3430 -
           (C30813 * C18089 + C139600 * C18746 + C30812 * C3433 +
            C30408 * C3761) *
               C3363) *
              C13591 +
          ((C30840 + C30839) * C3427 + (C30929 + C30930) * C3360 -
           (C31726 + C31725) * C3428 - (C31839 + C31840) * C3361 +
           (C33707 + C33706) * C3429 + (C33812 + C33813) * C3362 -
           (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
            C30408 * C3706) *
               C3430 -
           (C30813 * C18088 + C139600 * C18747 + C30812 * C3432 +
            C30408 * C3762) *
               C3363) *
              C139587) *
         C139448 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C13591 +
            ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139372 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C244) *
                C13591) *
               C139448 * C139360) *
              C821 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C13591 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                C139587) *
               C139448 * C139360 -
           (((C31015 + C31016) * C139372 + (C30844 + C30843) * C244) * C139587 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C13591) *
               C139448 * C139570) *
              C822 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C13591 +
            ((C30848 + C30847) * C244 + (C31017 + C31018) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C30813 * C8322 + C139600 * C8985 + C30812 * C1012 +
              C30408 * C1603) *
                 C139372 +
             (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
              C30408 * C1398) *
                 C244) *
                C139587 +
            ((C31952 + C31951) * C139372 + (C31729 + C31730) * C244) * C13591) *
               C139448 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C13591 +
           ((C30840 + C30839) * C244 + (C31013 + C31014) * C139372) * C139587) *
              C139448 * C3360 -
          (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139587 +
           ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
             C30408 * C1602) *
                C139372 +
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C244) *
               C13591) *
              C139448 * C3361 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C244 +
            (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
             C139600 * C4576) *
                C139372) *
               C13591 +
           ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) * C139587) *
              C139448 * C3362 -
          (((C30813 * C18202 + C139600 * C18856 + C30812 * C3488 +
             C30408 * C3815) *
                C139372 +
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C244) *
               C139587 +
           ((C30813 * C18203 + C139600 * C18855 + C30812 * C3489 +
             C30408 * C3816) *
                C139372 +
            (C30813 * C17959 + C139600 * C18619 + C30812 * C3367 +
             C30408 * C3707) *
                C244) *
               C13591) *
              C139448 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C826 +
            (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                C821 -
            (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                C827 -
            (C13596 * C118 + C139587 * C127 + C13595 * C117 + C13591 * C126) *
                C822 +
            (C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C828 +
            (C13595 * C118 + C13591 * C127 + C13596 * C120 + C139587 * C128) *
                C823) *
               C139448 * C30408 +
           ((C32075 + C32076) * C826 + (C32077 + C32078) * C821 -
            (C32079 + C32080) * C827 - (C32081 + C32082) * C822 +
            (C32083 + C32084) * C828 + (C32085 + C32086) * C823) *
               C139448 * C139600) *
              C139571 +
          (((C32080 + C32079) * C827 -
            ((C32078 + C32077) * C821 + (C32076 + C32075) * C826) +
            (C32082 + C32081) * C822 - (C32084 + C32083) * C828 -
            (C32086 + C32085) * C823) *
               C139448 * C30408 +
           ((C13595 * C4657 + C13591 * C4661 + C13596 * C4658 +
             C139587 * C4662) *
                C827 -
            ((C13596 * C4664 + C139587 * C4669 + C13595 * C4663 +
              C13591 * C4668) *
                 C821 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C826) +
            (C13595 * C4664 + C13591 * C4669 + C13596 * C4665 +
             C139587 * C4670) *
                C822 -
            (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
             C13591 * C4662) *
                C828 -
            (C13596 * C4667 + C139587 * C4671 + C13595 * C4665 +
             C13591 * C4670) *
                C823) *
               C139448 * C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C3364 +
             (C13595 * C116 + C13591 * C125 + C13596 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C30408 +
            ((C32075 + C32076) * C3364 + (C32077 + C32078) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C13596 * C4664 + C139587 * C4669 + C13595 * C4663 +
              C13591 * C4668) *
                 C139303 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C3364) *
                C139448 * C139600 +
            ((C32078 + C32077) * C139303 + (C32076 + C32075) * C3364) *
                C139448 * C30408) *
               C139384) *
              C2565 +
          ((((C17986 + C17985) * C3364 + (C17984 + C17983) * C139303) *
                C139448 * C30408 +
            ((C19919 + C19920) * C3364 + (C19921 + C19922) * C139303) *
                C139448 * C139600) *
               C139384 -
           (((C17983 + C17984) * C139303 + (C17985 + C17986) * C3364) *
                C139448 * C139600 +
            ((C14331 + C14330) * C139303 + (C14329 + C14328) * C3364) *
                C139448 * C30408) *
               C139571) *
              C2566 +
          ((((C16298 + C16297) * C3364 + (C16296 + C16295) * C139303) *
                C139448 * C30408 +
            ((C17987 + C17988) * C3364 + (C17989 + C17990) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C13596 * C19904 + C139587 * C19908 + C13595 * C19905 +
              C13591 * C19909) *
                 C139303 +
             (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
              C13591 * C19907) *
                 C3364) *
                C139448 * C139600 +
            ((C17990 + C17989) * C139303 + (C17988 + C17987) * C3364) *
                C139448 * C30408) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                 C181 +
             (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C30408 +
            ((C32075 + C32076) * C181 + (C32197 + C32198) * C139346) * C139448 *
                C139600) *
               C821 -
           (((C32199 + C32200) * C139346 + (C32079 + C32080) * C181) * C139448 *
                C139600 +
            ((C13596 * C184 + C139587 * C190 + C13595 * C183 + C13591 * C189) *
                 C139346 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C181) *
                C139448 * C30408) *
               C822 +
           (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                 C181 +
             (C13595 * C184 + C13591 * C190 + C13596 * C185 + C139587 * C191) *
                 C139346) *
                C139448 * C30408 +
            ((C32083 + C32084) * C181 + (C32201 + C32202) * C139346) * C139448 *
                C139600) *
               C823) *
              C139571 +
          ((((C32080 + C32079) * C181 + (C32200 + C32199) * C139346) * C139448 *
                C30408 +
            ((C13595 * C4657 + C13591 * C4661 + C13596 * C4658 +
              C139587 * C4662) *
                 C181 +
             (C13595 * C4747 + C13591 * C4751 + C13596 * C4748 +
              C139587 * C4752) *
                 C139346) *
                C139448 * C139600) *
               C822 -
           (((C13596 * C4747 + C139587 * C4751 + C13595 * C4746 +
              C13591 * C4750) *
                 C139346 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C181) *
                C139448 * C139600 +
            ((C32198 + C32197) * C139346 + (C32076 + C32075) * C181) * C139448 *
                C30408) *
               C821 -
           (((C13596 * C4749 + C139587 * C4753 + C13595 * C4748 +
              C13591 * C4752) *
                 C139346 +
             (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
              C13591 * C4662) *
                 C181) *
                C139448 * C139600 +
            ((C32202 + C32201) * C139346 + (C32084 + C32083) * C181) * C139448 *
                C30408) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C2660 +
            (C13595 * C182 + C13591 * C188 + C13596 * C183 + C139587 * C189) *
                C2565 -
            (C14329 + C14328) * C2661 - (C14450 + C14451) * C2566 +
            (C16298 + C16297) * C2662 + (C16407 + C16408) * C2567) *
               C139448 * C30408 +
           ((C32075 + C32076) * C2660 + (C32197 + C32198) * C2565 -
            (C17985 + C17986) * C2661 - (C18102 + C18101) * C2566 +
            (C17987 + C17988) * C2662 + (C18104 + C18103) * C2567) *
               C139448 * C139600) *
              C139303 * C139571 +
          (((C17986 + C17985) * C2661 -
            ((C32198 + C32197) * C2565 + (C32076 + C32075) * C2660) +
            (C18101 + C18102) * C2566 - (C17988 + C17987) * C2662 -
            (C18103 + C18104) * C2567) *
               C139448 * C30408 +
           ((C19919 + C19920) * C2661 -
            ((C13596 * C4747 + C139587 * C4751 + C13595 * C4746 +
              C13591 * C4750) *
                 C2565 +
             (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
              C13591 * C4660) *
                 C2660) +
            (C20030 + C20029) * C2566 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C2662 -
            (C13596 * C20020 + C139587 * C20022 + C13595 * C20021 +
             C13591 * C20023) *
                C2567) *
               C139448 * C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C32076 + C32075) * C1876 - (C32313 + C32314) * C139384) *
               C139448 * C30408 +
           ((C32075 + C32076) * C1875 + (C32314 + C32313) * C139571 -
            (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
             C13591 * C4660) *
                C1876 -
            (C13596 * C4832 + C139587 * C4836 + C13595 * C4831 +
             C13591 * C4835) *
                C139384) *
               C139448 * C139600) *
              C139346 * C821 +
          (((C32080 + C32079) * C1876 -
            ((C13596 * C247 + C139587 * C253 + C13595 * C246 + C13591 * C252) *
                 C139571 +
             (C13596 * C109 + C139587 * C115 + C13595 * C108 + C13591 * C114) *
                 C1875) +
            (C32315 + C32316) * C139384) *
               C139448 * C30408 +
           ((C13595 * C4657 + C13591 * C4661 + C13596 * C4658 +
             C139587 * C4662) *
                C1876 -
            ((C32316 + C32315) * C139571 + (C32079 + C32080) * C1875) +
            (C13595 * C4832 + C13591 * C4836 + C13596 * C4833 +
             C139587 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C822 +
          (((C13595 * C109 + C13591 * C115 + C13596 * C110 + C139587 * C119) *
                C1875 +
            (C13595 * C247 + C13591 * C253 + C13596 * C248 + C139587 * C254) *
                C139571 -
            (C32084 + C32083) * C1876 - (C32317 + C32318) * C139384) *
               C139448 * C30408 +
           ((C32083 + C32084) * C1875 + (C32318 + C32317) * C139571 -
            (C13596 * C4659 + C139587 * C4666 + C13595 * C4658 +
             C13591 * C4662) *
                C1876 -
            (C13596 * C4834 + C139587 * C4838 + C13595 * C4833 +
             C13591 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13595 * C107 + C13591 * C113 + C13596 * C108 + C139587 * C114) *
                C1875 +
            (C13595 * C245 + C13591 * C251 + C13596 * C246 + C139587 * C252) *
                C139571 -
            (C32076 + C32075) * C1876 - (C32313 + C32314) * C139384) *
               C139448 * C30408 +
           ((C32075 + C32076) * C1875 + (C32314 + C32313) * C139571 -
            (C13596 * C4657 + C139587 * C4661 + C13595 * C4656 +
             C13591 * C4660) *
                C1876 -
            (C13596 * C4832 + C139587 * C4836 + C13595 * C4831 +
             C13591 * C4835) *
                C139384) *
               C139448 * C139600) *
              C2565 +
          (((C17986 + C17985) * C1876 -
            ((C14567 + C14566) * C139571 + (C14329 + C14328) * C1875) +
            (C18216 + C18215) * C139384) *
               C139448 * C30408 +
           ((C19919 + C19920) * C1876 -
            ((C18215 + C18216) * C139571 + (C17985 + C17986) * C1875) +
            (C20137 + C20138) * C139384) *
               C139448 * C139600) *
              C2566 +
          (((C16298 + C16297) * C1875 + (C16518 + C16517) * C139571 -
            (C17988 + C17987) * C1876 - (C18218 + C18217) * C139384) *
               C139448 * C30408 +
           ((C17987 + C17988) * C1875 + (C18217 + C18218) * C139571 -
            (C13596 * C19902 + C139587 * C19906 + C13595 * C19903 +
             C13591 * C19907) *
                C1876 -
            (C13596 * C20128 + C139587 * C20130 + C13595 * C20129 +
             C13591 * C20131) *
                C139384) *
               C139448 * C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C30408 +
            (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C139600) *
               C13591 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C30408 +
            (C32425 + C32426 - C32427 - C32428 + C32429 + C32430) * C139600) *
               C139587) *
              C139571 +
          (((C32421 - (C32434 + C32433) + C32422 - C32423 - C32424) * C30408 +
            (C4930 * C827 -
             ((C307 * C4663 + C139448 * C4917) * C821 +
              (C307 * C4656 + C139448 * C4913) * C826) +
             C4931 * C822 - C4932 * C828 - C4933 * C823) *
                C139600) *
               C13591 +
           ((C32427 - (C32426 + C32425) + C32428 - C32429 - C32430) * C30408 +
            (C4932 * C827 - (C4931 * C821 + C4930 * C826) + C4933 * C822 -
             (C307 * C4659 + C139448 * C4916) * C828 -
             (C307 * C4667 + C139448 * C4920) * C823) *
                C139600) *
               C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C30408 +
             (C34904 + C34905) * C139600) *
                C13591 +
            ((C337 * C3364 + C338 * C139303) * C30408 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C139571 -
           (((C4931 * C139303 + C4930 * C3364) * C139600 +
             (C34907 + C34906) * C30408) *
                C139587 +
            (((C307 * C4663 + C139448 * C4917) * C139303 +
              (C307 * C4656 + C139448 * C4913) * C3364) *
                 C139600 +
             (C34905 + C34904) * C30408) *
                C13591) *
               C139384) *
              C2565 +
          ((((C34924 + C34925) * C30408 +
             ((C307 * C5471 + C139448 * C5717) * C3364 +
              (C307 * C5474 + C139448 * C5720) * C139303) *
                 C139600) *
                C13591 +
            ((C34912 + C34913) * C30408 +
             ((C307 * C5470 + C139448 * C5716) * C3364 +
              (C307 * C5473 + C139448 * C5719) * C139303) *
                 C139600) *
                C139587) *
               C139384 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C30408) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C30408) *
                C13591) *
               C139571) *
              C2566 +
          (((((C307 * C2570 + C139448 * C2827) * C3364 +
              (C307 * C2577 + C139448 * C2831) * C139303) *
                 C30408 +
             (C34926 + C34927) * C139600) *
                C13591 +
            ((C2844 * C3364 + C2845 * C139303) * C30408 +
             (C34918 + C34919) * C139600) *
                C139587) *
               C139571 -
           ((((C307 * C19904 + C139448 * C20238) * C139303 +
              (C307 * C19902 + C139448 * C20236) * C3364) *
                 C139600 +
             (C34919 + C34918) * C30408) *
                C139587 +
            (((C307 * C19905 + C139448 * C20239) * C139303 +
              (C307 * C19903 + C139448 * C20237) * C3364) *
                 C139600 +
             (C34927 + C34926) * C30408) *
                C13591) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C30408 +
             (C32533 + C32540) * C139600) *
                C13591 +
            ((C401 + C417) * C30408 + C32536 * C139600) * C139587) *
               C821 -
           ((C2084 * C139600 + (C418 + C404) * C30408) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C30408) * C13591) *
               C822 +
           ((C421 * C30408 + C32538 * C139600) * C13591 +
            ((C409 + C419) * C30408 + (C2075 + C2083) * C139600) * C139587) *
               C823) *
              C139571 +
          (((C32536 * C30408 + (C5012 + C5020) * C139600) * C13591 +
            (C32538 * C30408 + (C5015 + C5021) * C139600) * C139587) *
               C822 -
           (((C5020 + C5012) * C139600 + C32537 * C30408) * C139587 +
            (((C307 * C4746 + C139448 * C5007) * C139346 +
              (C307 * C4656 + C139448 * C4913) * C181) *
                 C139600 +
             (C32540 + C32533) * C30408) *
                C13591) *
               C821 -
           ((((C307 * C4749 + C139448 * C5010) * C139346 +
              (C307 * C4659 + C139448 * C4916) * C181) *
                 C139600 +
             (C2083 + C2075) * C30408) *
                C139587 +
            ((C5021 + C5015) * C139600 + C2084 * C30408) * C13591) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C30408 +
            (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C139600) *
               C13591 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C30408 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139303 * C139571 +
          (((C35028 - (C35027 + C35026) + C35036 - C35031 - C35037) * C30408 +
            ((C307 * C5471 + C139448 * C5717) * C2661 -
             ((C307 * C4746 + C139448 * C5007) * C2565 +
              (C307 * C4656 + C139448 * C4913) * C2660) +
             (C307 * C5557 + C139448 * C5795) * C2566 -
             (C307 * C19903 + C139448 * C20237) * C2662 -
             (C307 * C20021 + C139448 * C20338) * C2567) *
                C139600) *
               C13591 +
           ((C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C30408 +
            ((C307 * C5470 + C139448 * C5716) * C2661 -
             (C5018 * C2565 + C4930 * C2660) +
             (C307 * C5556 + C139448 * C5796) * C2566 -
             (C307 * C19902 + C139448 * C20236) * C2662 -
             (C307 * C20020 + C139448 * C20339) * C2567) *
                C139600) *
               C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C30408 +
            (C32431 * C1875 + C32649 * C139571 -
             (C307 * C4656 + C139448 * C4913) * C1876 -
             (C307 * C4831 + C139448 * C5095) * C139384) *
                C139600) *
               C13591 +
           ((C2165 + C2166 - C2167 - C2184) * C30408 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C139346 * C821 +
          (((C2167 - (C2166 + C2165) + C2184) * C30408 +
            (C32643 - (C32642 + C32641) + C32644) * C139600) *
               C13591 +
           ((C2172 - (C2171 + C2170) + C2186) * C30408 +
            (C32645 - (C32646 + C32647) + C32648) * C139600) *
               C139587) *
              C139346 * C822 +
          ((C2188 * C30408 + (C32647 + C32646 - C32645 - C32648) * C139600) *
               C13591 +
           ((C2177 + C2176 - C2175 - C2187) * C30408 +
            (C1988 * C1875 + C2183 * C139571 -
             (C307 * C4659 + C139448 * C4916) * C1876 -
             (C307 * C4834 + C139448 * C5098) * C139384) *
                C139600) *
               C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C30408 +
            (C32431 * C1875 + C32649 * C139571 -
             (C307 * C4656 + C139448 * C4913) * C1876 -
             (C307 * C4831 + C139448 * C5095) * C139384) *
                C139600) *
               C13591 +
           ((C2165 + C2166 - C2167 - C2184) * C30408 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C2565 +
          (((C34920 * C1876 -
             ((C307 * C1011 + C139448 * C1301) * C139571 +
              (C307 * C832 + C139448 * C1094) * C1875) +
             C35140 * C139384) *
                C30408 +
            ((C307 * C5471 + C139448 * C5717) * C1876 -
             (C35140 * C139571 + C34920 * C1875) +
             (C307 * C5637 + C139448 * C5872) * C139384) *
                C139600) *
               C13591 +
           ((C8649 - (C8650 + C8651) + C8661) * C30408 +
            ((C307 * C5470 + C139448 * C5716) * C1876 -
             (C8659 * C139571 + C8433 * C1875) +
             (C307 * C5636 + C139448 * C5873) * C139384) *
                C139600) *
               C139587) *
              C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C1875 +
             (C307 * C2745 + C139448 * C3017) * C139571 - C34922 * C1876 -
             C35141 * C139384) *
                C30408 +
            (C34922 * C1875 + C35141 * C139571 -
             (C307 * C19903 + C139448 * C20237) * C1876 -
             (C307 * C20129 + C139448 * C20438) * C139384) *
                C139600) *
               C13591 +
           ((C2844 * C1875 + C3028 * C139571 - C33388 * C1876 -
             C33598 * C139384) *
                C30408 +
            (C33388 * C1875 + C33598 * C139571 -
             (C307 * C19902 + C139448 * C20236) * C1876 -
             (C307 * C20128 + C139448 * C20439) * C139384) *
                C139600) *
               C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C13591 +
           ((C30840 + C30839) * C826 + (C30842 + C30841) * C821 -
            (C30844 + C30843) * C827 - (C30846 + C30845) * C822 +
            (C30848 + C30847) * C828 + (C30850 + C30849) * C823) *
               C139587) *
              C139448 * C139571 +
          (((C32764 + C32765) * C827 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C821 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C826) +
            (C32766 + C32767) * C822 - (C32768 + C32769) * C828 -
            (C32770 + C32771) * C823) *
               C13591 +
           ((C32769 + C32768) * C827 -
            ((C32767 + C32766) * C821 + (C32765 + C32764) * C826) +
            (C32771 + C32770) * C822 -
            (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
             C30408 * C2266) *
                C828 -
            (C30813 * C4667 + C139600 * C5198 + C30812 * C1709 +
             C30408 * C2271) *
                C823) *
               C139587) *
              C139448 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C13591 +
            ((C30840 + C30839) * C3364 + (C30842 + C30841) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C32767 + C32766) * C139303 + (C32765 + C32764) * C3364) *
                C139587 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C13591) *
               C139448 * C139384) *
              C2565 +
          ((((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C30812 * C3900 + C30408 * C4413 + C30813 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C13591 +
            ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
              C139600 * C5950) *
                 C3364 +
             (C30812 * C3901 + C30408 * C4414 + C30813 * C5473 +
              C139600 * C5953) *
                 C139303) *
                C139587) *
               C139448 * C139384 -
           (((C31728 + C31727) * C139303 + (C31726 + C31725) * C3364) *
                C139587 +
            ((C30813 * C3900 + C139600 * C4413 + C30812 * C839 +
              C30408 * C1400) *
                 C139303 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C3364) *
                C13591) *
               C139448 * C139571) *
              C2566 +
          ((((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
              C139600 * C4412) *
                 C3364 +
             (C30812 * C2577 + C30408 * C3109 + C30813 * C3905 +
              C139600 * C4418) *
                 C139303) *
                C13591 +
            ((C33707 + C33706) * C3364 + (C33709 + C33708) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C30813 * C19904 + C139600 * C20540 + C30812 * C3904 +
              C30408 * C4417) *
                 C139303 +
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C3364) *
                C139587 +
            ((C30813 * C19905 + C139600 * C20541 + C30812 * C3905 +
              C30408 * C4418) *
                 C139303 +
             (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
              C30408 * C4412) *
                 C3364) *
                C13591) *
               C139448 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C13591 +
            ((C30840 + C30839) * C181 + (C30929 + C30930) * C139346) *
                C139587) *
               C139448 * C821 -
           (((C30931 + C30932) * C139346 + (C30844 + C30843) * C181) * C139587 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C13591) *
               C139448 * C822 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C13591 +
            ((C30848 + C30847) * C181 + (C30933 + C30934) * C139346) *
                C139587) *
               C139448 * C823) *
              C139571 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C13591 +
            ((C32769 + C32768) * C181 + (C32880 + C32881) * C139346) *
                C139587) *
               C139448 * C822 -
           (((C32879 + C32878) * C139346 + (C32765 + C32764) * C181) * C139587 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C13591) *
               C139448 * C821 -
           (((C30813 * C4749 + C139600 * C5288 + C30812 * C1793 +
              C30408 * C2367) *
                 C139346 +
             (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
              C30408 * C2266) *
                 C181) *
                C139587 +
            ((C32881 + C32880) * C139346 + (C32768 + C32769) * C181) * C13591) *
               C139448 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
             C30408 * C1396) *
                C2661 -
            (C30813 * C3989 + C139600 * C4493 + C30812 * C927 +
             C30408 * C1497) *
                C2566 +
            (C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C30812 * C2663 + C30408 * C3199 + C30813 * C3994 +
             C139600 * C4494) *
                C2567) *
               C13591 +
           ((C30840 + C30839) * C2660 + (C30929 + C30930) * C2565 -
            (C31726 + C31725) * C2661 - (C31839 + C31840) * C2566 +
            (C33707 + C33706) * C2662 + (C33812 + C33813) * C2567) *
               C139587) *
              C139448 * C139303 * C139571 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C2661 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C2565 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C2660) +
            (C30812 * C3989 + C30408 * C4493 + C30813 * C5557 +
             C139600 * C6029) *
                C2566 -
            (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
             C30408 * C4412) *
                C2662 -
            (C30813 * C20021 + C139600 * C20650 + C30812 * C3994 +
             C30408 * C4494) *
                C2567) *
               C13591 +
           ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
             C139600 * C5950) *
                C2661 -
            ((C32879 + C32878) * C2565 + (C32765 + C32764) * C2660) +
            (C30812 * C3990 + C30408 * C4495 + C30813 * C5556 +
             C139600 * C6030) *
                C2566 -
            (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
             C30408 * C4411) *
                C2662 -
            (C30813 * C20020 + C139600 * C20651 + C30812 * C3993 +
             C30408 * C4496) *
                C2567) *
               C139587) *
              C139448 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C13591 +
           ((C30840 + C30839) * C1875 + (C31013 + C31014) * C139571 -
            (C32765 + C32764) * C1876 - (C32988 + C32989) * C139384) *
               C139587) *
              C139448 * C139346 * C821 +
          (((C32764 + C32765) * C1876 -
            ((C31014 + C31013) * C139571 + (C30839 + C30840) * C1875) +
            (C32989 + C32988) * C139384) *
               C13591 +
           ((C32769 + C32768) * C1876 -
            ((C31015 + C31016) * C139571 + (C30844 + C30843) * C1875) +
            (C32990 + C32991) * C139384) *
               C139587) *
              C139448 * C139346 * C822 +
          (((C30843 + C30844) * C1875 + (C31016 + C31015) * C139571 -
            (C32768 + C32769) * C1876 - (C32991 + C32990) * C139384) *
               C13591 +
           ((C30848 + C30847) * C1875 + (C31017 + C31018) * C139571 -
            (C30813 * C4659 + C139600 * C5194 + C30812 * C1699 +
             C30408 * C2266) *
                C1876 -
            (C30813 * C4834 + C139600 * C5376 + C30812 * C1880 +
             C30408 * C2463) *
                C139384) *
               C139587) *
              C139448 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C13591 +
           ((C30840 + C30839) * C1875 + (C31013 + C31014) * C139571 -
            (C32765 + C32764) * C1876 - (C32988 + C32989) * C139384) *
               C139587) *
              C139448 * C2565 +
          (((C30812 * C3891 + C30408 * C4407 + C30813 * C5471 +
             C139600 * C5951) *
                C1876 -
            ((C30813 * C4075 + C139600 * C4573 + C30812 * C1011 +
              C30408 * C1602) *
                 C139571 +
             (C30813 * C3891 + C139600 * C4407 + C30812 * C832 +
              C30408 * C1396) *
                 C1875) +
            (C30812 * C4075 + C30408 * C4573 + C30813 * C5637 +
             C139600 * C6106) *
                C139384) *
               C13591 +
           ((C30812 * C3892 + C30408 * C4408 + C30813 * C5470 +
             C139600 * C5950) *
                C1876 -
            ((C31949 + C31950) * C139571 + (C31726 + C31725) * C1875) +
            (C30812 * C4076 + C30408 * C4574 + C30813 * C5636 +
             C139600 * C6107) *
                C139384) *
               C139587) *
              C139448 * C2566 +
          (((C30812 * C2570 + C30408 * C3105 + C30813 * C3896 +
             C139600 * C4412) *
                C1875 +
            (C30812 * C2745 + C30408 * C3295 + C30813 * C4080 +
             C139600 * C4576) *
                C139571 -
            (C30813 * C19903 + C139600 * C20539 + C30812 * C3896 +
             C30408 * C4412) *
                C1876 -
            (C30813 * C20129 + C139600 * C20753 + C30812 * C4080 +
             C30408 * C4576) *
                C139384) *
               C13591 +
           ((C33707 + C33706) * C1875 + (C33916 + C33917) * C139571 -
            (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
             C30408 * C4411) *
                C1876 -
            (C30813 * C20128 + C139600 * C20754 + C30812 * C4079 +
             C30408 * C4577) *
                C139384) *
               C139587) *
              C139448 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6694 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139601 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C6695 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C6696 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C6691) *
               C47031 +
           ((C47760 + C47761) * C6694 + (C47762 + C47763) * C139601 -
            (C47764 + C47765) * C6695 - (C47766 + C47767) * C139590 +
            (C47768 + C47769) * C6696 + (C47770 + C47771) * C6691) *
               C139598) *
              C139463 * C139372 * C6692 +
          (((C47765 + C47764) * C6695 -
            ((C47763 + C47762) * C139601 + (C47761 + C47760) * C6694) +
            (C47767 + C47766) * C139590 - (C47769 + C47768) * C6696 -
            (C47771 + C47770) * C6691) *
               C47031 +
           ((C49684 + C49685) * C6695 -
            ((C49686 + C49687) * C139601 + (C49688 + C49689) * C6694) +
            (C49690 + C49691) * C139590 -
            (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
             C47029 * C2576) *
                C6696 -
            (C47034 * C2581 + C139587 * C2585 + C47033 * C2579 +
             C47029 * C2584) *
                C6691) *
               C139598) *
              C139463 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6771 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C6692 -
            (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
               C47031 +
           ((C47760 + C47761) * C6771 + (C47883 + C47882) * C6692 -
            (C49688 + C49689) * C6772 - (C49799 + C49798) * C139360) *
               C139598) *
              C139463 * C139601 +
          (((C47765 + C47764) * C6772 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C6692 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C6771) +
            (C47884 + C47885) * C139360) *
               C47031 +
           ((C49684 + C49685) * C6772 -
            ((C47885 + C47884) * C6692 + (C47764 + C47765) * C6771) +
            (C49801 + C49800) * C139360) *
               C139598) *
              C139463 * C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C6771 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C6692 -
            (C47769 + C47768) * C6772 - (C47886 + C47887) * C139360) *
               C47031 +
           ((C47768 + C47769) * C6771 + (C47887 + C47886) * C6692 -
            (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
             C47029 * C2576) *
                C6772 -
            (C47034 * C2666 + C139587 * C2670 + C47033 * C2665 +
             C47029 * C2669) *
                C139360) *
               C139598) *
              C139463 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C47031 +
            ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) *
                C139598) *
               C139463 * C6692 -
           (((C49908 + C49909) * C139372 + (C49688 + C49689) * C244) * C139598 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
               C139463 * C139360) *
              C139601 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C47031 +
            ((C49684 + C49685) * C244 + (C49910 + C49911) * C139372) *
                C139598) *
               C139463 * C139360 -
           (((C48001 + C48000) * C139372 + (C47764 + C47765) * C244) * C139598 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139463 * C6692) *
              C139590 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                 C139372) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48002 + C48003) * C139372) *
                C139598) *
               C139463 * C6692 -
           (((C47034 * C2748 + C139587 * C2752 + C47033 * C2747 +
              C47029 * C2751) *
                 C139372 +
             (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
              C47029 * C2576) *
                 C244) *
                C139598 +
            ((C48003 + C48002) * C139372 + (C47769 + C47768) * C244) * C47031) *
               C139463 * C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6694 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139601 -
            (C47260 + C47261) * C6695 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C6696 + (C47266 + C47267) * C6691) *
               C139463 * C47029 +
           ((C47261 + C47260) * C6694 + (C47263 + C47262) * C139601 -
            (C47265 + C47264) * C6695 - (C47267 + C47266) * C139590 +
            (C47269 + C47268) * C6696 + (C47271 + C47270) * C6691) *
               C139463 * C139587) *
              C139372 * C6692 +
          (((C48118 + C48119) * C6695 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139601 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C6694) +
            (C48120 + C48121) * C139590 - (C48122 + C48123) * C6696 -
            (C48124 + C48125) * C6691) *
               C139463 * C47029 +
           ((C48123 + C48122) * C6695 -
            ((C48121 + C48120) * C139601 + (C48119 + C48118) * C6694) +
            (C48125 + C48124) * C139590 -
            (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
             C47031 * C1096) *
                C6696 -
            (C47234 * C2581 + C139598 * C2834 + C47233 * C841 +
             C47031 * C1101) *
                C6691) *
               C139463 * C139587) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6771 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C6692 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C6772 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C139463 * C47029 +
           ((C47261 + C47260) * C6771 + (C47350 + C47351) * C6692 -
            (C48119 + C48118) * C6772 - (C48232 + C48233) * C139360) *
               C139463 * C139587) *
              C139601 +
          (((C48118 + C48119) * C6772 -
            ((C47351 + C47350) * C6692 + (C47260 + C47261) * C6771) +
            (C48233 + C48232) * C139360) *
               C139463 * C47029 +
           ((C48123 + C48122) * C6772 -
            ((C47352 + C47353) * C6692 + (C47265 + C47264) * C6771) +
            (C48234 + C48235) * C139360) *
               C139463 * C139587) *
              C139590 +
          (((C47264 + C47265) * C6771 + (C47353 + C47352) * C6692 -
            (C48122 + C48123) * C6772 - (C48235 + C48234) * C139360) *
               C139463 * C47029 +
           ((C47269 + C47268) * C6771 + (C47354 + C47355) * C6692 -
            (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
             C47031 * C1096) *
                C6772 -
            (C47234 * C2666 + C139598 * C2924 + C47233 * C928 +
             C47031 * C1198) *
                C139360) *
               C139463 * C139587) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
                C139587) *
               C6692 -
           (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
                C139587 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C139463 * C47029) *
               C139360) *
              C139601 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C139463 *
                C47029 +
            ((C48123 + C48122) * C244 + (C48344 + C48345) * C139372) * C139463 *
                C139587) *
               C139360 -
           (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
                C139587 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
                C47029) *
               C6692) *
              C139590 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C139463 *
                C47029 +
            ((C47269 + C47268) * C244 + (C47438 + C47439) * C139372) * C139463 *
                C139587) *
               C6692 -
           (((C47234 * C2748 + C139598 * C3020 + C47233 * C1012 +
              C47031 * C1302) *
                 C139372 +
             (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
              C47031 * C1096) *
                 C244) *
                C139463 * C139587 +
            ((C48345 + C48344) * C139372 + (C48122 + C48123) * C244) * C139463 *
                C47029) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C6694 +
             (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
             C585 * C139590 + C586 * C6696 + C587 * C6691) *
                C47029 +
            (C584 * C6694 + C585 * C139601 - C586 * C6695 - C587 * C139590 +
             C588 * C6696 + C589 * C6691) *
                C139587) *
               C47031 +
           ((C22077 + C22078 - C22079 - C22080 + C22081 + C22082) * C47029 +
            (C22083 + C22084 - C22085 - C22086 + C22087 + C22088) * C139587) *
               C139598) *
              C139372 * C6692 +
          (((C22079 - (C22078 + C22077) + C22080 - C22081 - C22082) * C47029 +
            (C22085 - (C22084 + C22083) + C22086 - C22087 - C22088) * C139587) *
               C47031 +
           ((C3122 * C6695 - (C16959 * C139601 + C16960 * C6694) +
             C3123 * C139590 - C3124 * C6696 - C3125 * C6691) *
                C47029 +
            (C3124 * C6695 - (C3123 * C139601 + C3122 * C6694) +
             C3125 * C139590 - (C554 * C2573 + C139463 * C3108) * C6696 -
             (C554 * C2581 + C139463 * C3112) * C6691) *
                C139587) *
               C139598) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C6771 +
             (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
             C15138 * C139360) *
                C47029 +
            (C7234 + C7235 - C7236 - C7237) * C139587) *
               C47031 +
           ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
             C17072 * C139360) *
                C47029 +
            (C22187 + C22188 - C22189 - C22190) * C139587) *
               C139598) *
              C139601 +
          (((C7236 - (C7235 + C7234) + C7237) * C47029 +
            (C7240 - (C7239 + C7238) + C7241) * C139587) *
               C47031 +
           ((C22189 - (C22188 + C22187) + C22190) * C47029 +
            (C22191 - (C22192 + C22193) + C22194) * C139587) *
               C139598) *
              C139590 +
          ((C7248 * C47029 + (C7244 + C7243 - C7242 - C7245) * C139587) *
               C47031 +
           ((C22193 + C22192 - C22191 - C22194) * C47029 +
            (C1422 * C6771 + C1521 * C6692 -
             (C554 * C2573 + C139463 * C3108) * C6772 -
             (C554 * C2666 + C139463 * C3202) * C139360) *
                C139587) *
               C139598) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C47029 +
             (C726 + C742) * C139587) *
                C47031 +
            ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
               C6692 -
           ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
               C139360) *
              C139601 +
          (((C15240 * C47029 + C15242 * C139587) * C47031 +
            (C17177 * C47029 + (C3303 + C3309) * C139587) * C139598) *
               C139360 -
           ((C1621 * C139587 + C15241 * C47029) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
               C6692) *
              C139590 +
          (((C746 * C47029 + (C734 + C744) * C139587) * C47031 +
            (C15242 * C47029 + (C1612 + C1620) * C139587) * C139598) *
               C6692 -
           ((((C554 * C2748 + C139463 * C3298) * C139372 +
              (C554 * C2573 + C139463 * C3108) * C244) *
                 C139587 +
             (C3309 + C3303) * C47029) *
                C139598 +
            ((C1620 + C1612) * C139587 + C1621 * C47029) * C47031) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7401 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C7396 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C7402 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C47031 +
           ((C47760 + C47761) * C7401 + (C47762 + C47763) * C7396 -
            (C47764 + C47765) * C7402 - (C47766 + C47767) * C139308) *
               C139598) *
              C139463 * C139372 * C139602 +
          (((C47765 + C47764) * C7402 -
            ((C47763 + C47762) * C7396 + (C47761 + C47760) * C7401) +
            (C47767 + C47766) * C139308) *
               C47031 +
           ((C49684 + C49685) * C7402 -
            ((C49686 + C49687) * C7396 + (C49688 + C49689) * C7401) +
            (C49690 + C49691) * C139308) *
               C139598) *
              C139463 * C139372 * C139593 +
          (((C49689 + C49688) * C7401 + (C49687 + C49686) * C7396 -
            (C49685 + C49684) * C7402 - (C49691 + C49690) * C139308) *
               C47031 +
           ((C50598 + C50599) * C7401 + (C50600 + C50601) * C7396 -
            (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
             C47029 * C3372) *
                C7402 -
            (C47034 * C3368 + C139587 * C3374 + C47033 * C3369 +
             C47029 * C3375) *
                C139308) *
               C139598) *
              C139463 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7477 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139602 -
            (C47761 + C47760) * C7478 - (C47882 + C47883) * C139593 +
            (C49689 + C49688) * C7479 + (C49798 + C49799) * C7400) *
               C47031 +
           ((C47760 + C47761) * C7477 + (C47883 + C47882) * C139602 -
            (C49688 + C49689) * C7478 - (C49799 + C49798) * C139593 +
            (C50598 + C50599) * C7479 + (C50673 + C50672) * C7400) *
               C139598) *
              C139463 * C7396 +
          (((C47765 + C47764) * C7478 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139602 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C7477) +
            (C47884 + C47885) * C139593 - (C49685 + C49684) * C7479 -
            (C49800 + C49801) * C7400) *
               C47031 +
           ((C49684 + C49685) * C7478 -
            ((C47885 + C47884) * C139602 + (C47764 + C47765) * C7477) +
            (C49801 + C49800) * C139593 -
            (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
             C47029 * C3372) *
                C7479 -
            (C47034 * C3431 + C139587 * C3434 + C47033 * C3432 +
             C47029 * C3435) *
                C7400) *
               C139598) *
              C139463 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C47031 +
            ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) *
                C139598) *
               C139463 * C139602 -
           (((C49908 + C49909) * C139372 + (C49688 + C49689) * C244) * C139598 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
               C139463 * C139593 +
           (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C47031 +
            ((C50598 + C50599) * C244 + (C50744 + C50745) * C139372) *
                C139598) *
               C139463 * C7400) *
              C7396 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C47031 +
            ((C49684 + C49685) * C244 + (C49910 + C49911) * C139372) *
                C139598) *
               C139463 * C139593 -
           (((C48001 + C48000) * C139372 + (C47764 + C47765) * C244) * C139598 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139463 * C139602 -
           (((C47034 * C3487 + C139587 * C3490 + C47033 * C3488 +
              C47029 * C3491) *
                 C139372 +
             (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
              C47029 * C3372) *
                 C244) *
                C139598 +
            ((C49911 + C49910) * C139372 + (C49685 + C49684) * C244) * C47031) *
               C139463 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7401 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C7396 -
            (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
               C139463 * C47029 +
           ((C47261 + C47260) * C7401 + (C47263 + C47262) * C7396 -
            (C47265 + C47264) * C7402 - (C47267 + C47266) * C139308) *
               C139463 * C139587) *
              C139372 * C139602 +
          (((C48118 + C48119) * C7402 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C7396 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C7401) +
            (C48120 + C48121) * C139308) *
               C139463 * C47029 +
           ((C48123 + C48122) * C7402 -
            ((C48121 + C48120) * C7396 + (C48119 + C48118) * C7401) +
            (C48125 + C48124) * C139308) *
               C139463 * C139587) *
              C139372 * C139593 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C7401 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C7396 -
            (C50018 + C50019) * C7402 - (C50020 + C50021) * C139308) *
               C139463 * C47029 +
           ((C50019 + C50018) * C7401 + (C50021 + C50020) * C7396 -
            (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
             C47031 * C2829) *
                C7402 -
            (C47234 * C3368 + C139598 * C3546 + C47233 * C2579 +
             C47031 * C2833) *
                C139308) *
               C139463 * C139587) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7477 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139602 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C7478 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139593 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C7400) *
               C139463 * C47029 +
           ((C47261 + C47260) * C7477 + (C47350 + C47351) * C139602 -
            (C48119 + C48118) * C7478 - (C48232 + C48233) * C139593 +
            (C50019 + C50018) * C7479 + (C50124 + C50125) * C7400) *
               C139463 * C139587) *
              C7396 +
          (((C48118 + C48119) * C7478 -
            ((C47351 + C47350) * C139602 + (C47260 + C47261) * C7477) +
            (C48233 + C48232) * C139593 - (C50018 + C50019) * C7479 -
            (C50125 + C50124) * C7400) *
               C139463 * C47029 +
           ((C48123 + C48122) * C7478 -
            ((C47352 + C47353) * C139602 + (C47265 + C47264) * C7477) +
            (C48234 + C48235) * C139593 -
            (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
             C47031 * C2829) *
                C7479 -
            (C47234 * C3431 + C139598 * C3601 + C47233 * C2665 +
             C47031 * C2923) *
                C7400) *
               C139463 * C139587) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
                C139587) *
               C139602 -
           (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
                C139587 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C139463 * C47029) *
               C139593 +
           (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C139463 * C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139372) * C139463 *
                C139587) *
               C7400) *
              C7396 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C139463 *
                C47029 +
            ((C48123 + C48122) * C244 + (C48344 + C48345) * C139372) * C139463 *
                C139587) *
               C139593 -
           (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
                C139587 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
                C47029) *
               C139602 -
           (((C47234 * C3487 + C139598 * C3652 + C47233 * C2747 +
              C47031 * C3019) *
                 C139372 +
             (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
              C47031 * C2829) *
                 C244) *
                C139463 * C139587 +
            ((C50229 + C50228) * C139372 + (C50018 + C50019) * C244) * C139463 *
                C47029) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C47029 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                C139587) *
               C47031 +
           ((C22979 + C22980 - C22981 - C22982) * C47029 +
            (C22983 + C22984 - C22985 - C22986) * C139587) *
               C139598) *
              C139372 * C139602 +
          (((C22981 - (C22980 + C22979) + C22982) * C47029 +
            (C22985 - (C22984 + C22983) + C22986) * C139587) *
               C47031 +
           ((C22987 - (C22988 + C22989) + C22990) * C47029 +
            (C22991 - (C22992 + C22993) + C22994) * C139587) *
               C139598) *
              C139372 * C139593 +
          (((C22989 + C22988 - C22987 - C22990) * C47029 +
            (C22993 + C22992 - C22991 - C22994) * C139587) *
               C47031 +
           ((C17713 * C7401 + C17714 * C7396 - C16961 * C7402 -
             C16962 * C139308) *
                C47029 +
            (C16961 * C7401 + C16962 * C7396 -
             (C554 * C3365 + C139463 * C3705) * C7402 -
             (C554 * C3368 + C139463 * C3708) * C139308) *
                C139587) *
               C139598) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7477 +
             (C554 * C182 + C139463 * C641) * C139602 - C15026 * C7478 -
             C15138 * C139593 + C16960 * C7479 + C17072 * C7400) *
                C47029 +
            (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C139587) *
               C47031 +
           ((C15026 * C7477 + C15138 * C139602 - C16960 * C7478 -
             C17072 * C139593 + C17713 * C7479 + C17787 * C7400) *
                C47029 +
            (C23093 + C23094 - C23095 - C23096 + C23097 + C23098) * C139587) *
               C139598) *
              C7396 +
          (((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C47029 +
            (C7945 - (C7944 + C7943) + C7946 - C7947 - C7948) * C139587) *
               C47031 +
           ((C23095 - (C23094 + C23093) + C23096 - C23097 - C23098) * C47029 +
            (C3124 * C7478 - (C1520 * C139602 + C1420 * C7477) +
             C3219 * C139593 - (C554 * C3365 + C139463 * C3705) * C7479 -
             (C554 * C3431 + C139463 * C3763) * C7400) *
                C139587) *
               C139598) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C47029 +
             (C726 + C742) * C139587) *
                C47031 +
            ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
               C139602 -
           ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
               C139593 +
           (((C17176 + C17183) * C47029 + C17177 * C139587) * C47031 +
            ((C17856 + C17860) * C47029 + (C17178 + C17184) * C139587) *
                C139598) *
               C7400) *
              C7396 +
          (((C15240 * C47029 + C15242 * C139587) * C47031 +
            (C17177 * C47029 + (C3303 + C3309) * C139587) * C139598) *
               C139593 -
           ((C1621 * C139587 + C15241 * C47029) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
               C139602 -
           ((((C554 * C3487 + C139463 * C3814) * C139372 +
              (C554 * C3365 + C139463 * C3705) * C244) *
                 C139587 +
             (C17184 + C17178) * C47029) *
                C139598 +
            ((C3309 + C3303) * C139587 + C17173 * C47029) * C47031) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C7401 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C7396 -
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C7402 -
             (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                 C139308) *
                C47031 +
            ((C47760 + C47761) * C7401 + (C47762 + C47763) * C7396 -
             (C47764 + C47765) * C7402 - (C47766 + C47767) * C139308) *
                C139598) *
               C139463 * C139571 +
           (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C7402 -
             ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
               C47029 * C1714) *
                  C7396 +
              (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
               C47029 * C1708) *
                  C7401) +
             (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
              C139587 * C1712) *
                 C139308) *
                C47031 +
            ((C56380 + C56381) * C7402 -
             ((C51256 + C51257) * C7396 + (C51258 + C51259) * C7401) +
             (C56382 + C56383) * C139308) *
                C139598) *
               C139463 * C139384) *
              C6692 +
          ((((C47765 + C47764) * C7402 -
             ((C47763 + C47762) * C7396 + (C47761 + C47760) * C7401) +
             (C47767 + C47766) * C139308) *
                C47031 +
            ((C49684 + C49685) * C7402 -
             ((C49686 + C49687) * C7396 + (C49688 + C49689) * C7401) +
             (C49690 + C49691) * C139308) *
                C139598) *
               C139463 * C139571 +
           (((C51259 + C51258) * C7401 + (C51257 + C51256) * C7396 -
             (C56381 + C56380) * C7402 - (C56383 + C56382) * C139308) *
                C47031 +
            ((C51260 + C51261) * C7401 + (C51262 + C51263) * C7396 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C7402 -
             (C47034 * C3903 + C139587 * C3912 + C47033 * C3904 +
              C47029 * C3913) *
                 C139308) *
                C139598) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C6771 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C6692 -
             (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
                C47031 +
            ((C47760 + C47761) * C6771 + (C47883 + C47882) * C6692 -
             (C49688 + C49689) * C6772 - (C49799 + C49798) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C47765 + C47764) * C6772 -
             ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                  C6692 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C6771) +
             (C47884 + C47885) * C139360) *
                C47031 +
            ((C49684 + C49685) * C6772 -
             ((C47885 + C47884) * C6692 + (C47764 + C47765) * C6771) +
             (C49801 + C49800) * C139360) *
                C139598) *
               C139463 * C139308) *
              C139571 +
          ((((C51259 + C51258) * C6772 -
             ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
               C47029 * C1799) *
                  C6692 +
              (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
               C47029 * C1708) *
                  C6771) +
             (C51370 + C51371) * C139360) *
                C47031 +
            ((C51260 + C51261) * C6772 -
             ((C51371 + C51370) * C6692 + (C51258 + C51259) * C6771) +
             (C51373 + C51372) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C6771 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C6692 -
             (C56381 + C56380) * C6772 - (C56518 + C56519) * C139360) *
                C47031 +
            ((C56380 + C56381) * C6771 + (C56519 + C56518) * C6692 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C6772 -
             (C47034 * C3992 + C139587 * C3998 + C47033 * C3993 +
              C47029 * C3999) *
                 C139360) *
                C139598) *
               C139463 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C1875 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139571 -
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C1876 -
             (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
              C47029 * C1884) *
                 C139384) *
                C47031 +
            ((C47760 + C47761) * C1875 + (C47998 + C47999) * C139571 -
             (C51258 + C51259) * C1876 - (C51480 + C51481) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C51259 + C51258) * C1876 -
             ((C47999 + C47998) * C139571 + (C47761 + C47760) * C1875) +
             (C51481 + C51480) * C139384) *
                C47031 +
            ((C51260 + C51261) * C1876 -
             ((C49908 + C49909) * C139571 + (C49688 + C49689) * C1875) +
             (C51482 + C51483) * C139384) *
                C139598) *
               C139463 * C139360) *
              C7396 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C1876 -
             ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                  C139571 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C1875) +
             (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
              C139587 * C1882) *
                 C139384) *
                C47031 +
            ((C56380 + C56381) * C1876 -
             ((C48001 + C48000) * C139571 + (C47764 + C47765) * C1875) +
             (C56654 + C56655) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C47765 + C47764) * C1875 + (C48000 + C48001) * C139571 -
             (C56381 + C56380) * C1876 - (C56655 + C56654) * C139384) *
                C47031 +
            ((C49684 + C49685) * C1875 + (C49910 + C49911) * C139571 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C1876 -
             (C47034 * C4078 + C139587 * C4084 + C47033 * C4079 +
              C47029 * C4085) *
                 C139384) *
                C139598) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C7401 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C7396 -
             (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
                C139463 * C47029 +
            ((C47261 + C47260) * C7401 + (C47263 + C47262) * C7396 -
             (C47265 + C47264) * C7402 - (C47267 + C47266) * C139308) *
                C139463 * C139587) *
               C139571 +
           (((C49048 + C49049) * C7402 -
             ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
               C47031 * C1966) *
                  C7396 +
              (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
               C47031 * C1962) *
                  C7401) +
             (C49050 + C49051) * C139308) *
                C139463 * C47029 +
            ((C49053 + C49052) * C7402 -
             ((C49051 + C49050) * C7396 + (C49049 + C49048) * C7401) +
             (C49055 + C49054) * C139308) *
                C139463 * C139587) *
               C139384) *
              C6692 +
          ((((C48118 + C48119) * C7402 -
             ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
               C47031 * C1098) *
                  C7396 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C7401) +
             (C48120 + C48121) * C139308) *
                C139463 * C47029 +
            ((C48123 + C48122) * C7402 -
             ((C48121 + C48120) * C7396 + (C48119 + C48118) * C7401) +
             (C48125 + C48124) * C139308) *
                C139463 * C139587) *
               C139571 +
           (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C7401 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C7396 -
             (C56794 + C56795) * C7402 - (C56796 + C56797) * C139308) *
                C139463 * C47029 +
            ((C56795 + C56794) * C7401 + (C56797 + C56796) * C7396 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C7402 -
             (C47234 * C3903 + C139598 * C4170 + C47233 * C3902 +
              C47031 * C4169) *
                 C139308) *
                C139463 * C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C6771 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C6692 -
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C6772 -
             (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
              C47031 * C1195) *
                 C139360) *
                C139463 * C47029 +
            ((C47261 + C47260) * C6771 + (C47350 + C47351) * C6692 -
             (C48119 + C48118) * C6772 - (C48232 + C48233) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C48118 + C48119) * C6772 -
             ((C47351 + C47350) * C6692 + (C47260 + C47261) * C6771) +
             (C48233 + C48232) * C139360) *
                C139463 * C47029 +
            ((C48123 + C48122) * C6772 -
             ((C47352 + C47353) * C6692 + (C47265 + C47264) * C6771) +
             (C48234 + C48235) * C139360) *
                C139463 * C139587) *
               C139308) *
              C139571 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C6772 -
             ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
               C47031 * C2066) *
                  C6692 +
              (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
               C47031 * C1962) *
                  C6771) +
             (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
              C139598 * C4248) *
                 C139360) *
                C139463 * C47029 +
            ((C56795 + C56794) * C6772 -
             ((C49163 + C49162) * C6692 + (C49049 + C49048) * C6771) +
             (C56932 + C56933) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C49048 + C49049) * C6771 + (C49162 + C49163) * C6692 -
             (C56794 + C56795) * C6772 - (C56933 + C56932) * C139360) *
                C139463 * C47029 +
            ((C49053 + C49052) * C6771 + (C49164 + C49165) * C6692 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C6772 -
             (C47234 * C3992 + C139598 * C4252 + C47233 * C3991 +
              C47031 * C4251) *
                 C139360) *
                C139463 * C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C1875 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139571 -
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C1876 -
             (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
              C47031 * C2159) *
                 C139384) *
                C139463 * C47029 +
            ((C47261 + C47260) * C1875 + (C47434 + C47435) * C139571 -
             (C49049 + C49048) * C1876 - (C49272 + C49273) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C1876 -
             ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
               C47031 * C1301) *
                  C139571 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C1875) +
             (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
              C139598 * C4330) *
                 C139384) *
                C139463 * C47029 +
            ((C56795 + C56794) * C1876 -
             ((C48342 + C48343) * C139571 + (C48119 + C48118) * C1875) +
             (C57068 + C57069) * C139384) *
                C139463 * C139587) *
               C139360) *
              C7396 +
          ((((C49048 + C49049) * C1876 -
             ((C47435 + C47434) * C139571 + (C47260 + C47261) * C1875) +
             (C49273 + C49272) * C139384) *
                C139463 * C47029 +
            ((C49053 + C49052) * C1876 -
             ((C47436 + C47437) * C139571 + (C47265 + C47264) * C1875) +
             (C49274 + C49275) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C48118 + C48119) * C1875 + (C48343 + C48342) * C139571 -
             (C56794 + C56795) * C1876 - (C57069 + C57068) * C139384) *
                C139463 * C47029 +
            ((C48123 + C48122) * C1875 + (C48344 + C48345) * C139571 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C1876 -
             (C47234 * C4078 + C139598 * C4332 + C47233 * C4077 +
              C47031 * C4329) *
                 C139384) *
                C139463 * C139587) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C7401 +
              (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
              C585 * C139308) *
                 C47029 +
             (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                 C139587) *
                C47031 +
            ((C22979 + C22980 - C22981 - C22982) * C47029 +
             (C22983 + C22984 - C22985 - C22986) * C139587) *
                C139598) *
               C139571 +
           (((C2286 * C7402 -
              ((C554 * C1707 + C139463 * C2268) * C7396 +
               (C554 * C1700 + C139463 * C2264) * C7401) +
              C2287 * C139308) *
                 C47029 +
             (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
              C2289 * C139308) *
                 C139587) *
                C47031 +
            ((C24155 - (C24156 + C24157) + C24158) * C47029 +
             (C24159 - (C24160 + C24161) + C24162) * C139587) *
                C139598) *
               C139384) *
              C6692 +
          ((((C22981 - (C22980 + C22979) + C22982) * C47029 +
             (C22985 - (C22984 + C22983) + C22986) * C139587) *
                C47031 +
            ((C22987 - (C22988 + C22989) + C22990) * C47029 +
             (C22991 - (C22992 + C22993) + C22994) * C139587) *
                C139598) *
               C139571 +
           (((C24157 + C24156 - C24155 - C24158) * C47029 +
             (C24161 + C24160 - C24159 - C24162) * C139587) *
                C47031 +
            ((C18639 * C7401 + C18640 * C7396 - C18641 * C7402 -
              C18642 * C139308) *
                 C47029 +
             (C18641 * C7401 + C18642 * C7396 -
              (C554 * C3894 + C139463 * C4410) * C7402 -
              (C554 * C3903 + C139463 * C4416) * C139308) *
                 C139587) *
                C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[47] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C6771 +
                        (C554 * C182 + C139463 * C641) * C6692 -
                        C15026 * C6772 - C15138 * C139360) *
                           C47029 +
                       (C7234 + C7235 - C7236 - C7237) * C139587) *
                          C47031 +
                      ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                        C17072 * C139360) *
                           C47029 +
                       (C22187 + C22188 - C22189 - C22190) * C139587) *
                          C139598) *
                         C7396 +
                     (((C7236 - (C7235 + C7234) + C7237) * C47029 +
                       (C7240 - (C7239 + C7238) + C7241) * C139587) *
                          C47031 +
                      ((C22189 - (C22188 + C22187) + C22190) * C47029 +
                       (C22191 - (C22192 + C22193) + C22194) * C139587) *
                          C139598) *
                         C139308) *
                        C139571 +
                    ((((C18638 * C6772 -
                        ((C554 * C1794 + C139463 * C2368) * C6692 +
                         (C554 * C1700 + C139463 * C2264) * C6771) +
                        C18755 * C139360) *
                           C47029 +
                       (C8874 - (C8875 + C8876) + C8886) * C139587) *
                          C47031 +
                      ((C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                        C18756 * C139360) *
                           C47029 +
                       (C24293 - (C24294 + C24295) + C24296) * C139587) *
                          C139598) *
                         C7396 +
                     (((C8876 + C8875 - C8874 - C8886) * C47029 +
                       (C8881 + C8880 - C8879 - C8887) * C139587) *
                          C47031 +
                      ((C24295 + C24294 - C24293 - C24296) * C47029 +
                       (C8773 * C6771 + C8885 * C6692 -
                        (C554 * C3894 + C139463 * C4410) * C6772 -
                        (C554 * C3992 + C139463 * C4498) * C139360) *
                           C139587) *
                          C139598) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C1875 +
              (C554 * C245 + C139463 * C719) * C139571 -
              (C554 * C1700 + C139463 * C2264) * C1876 -
              (C554 * C1879 + C139463 * C2460) * C139384) *
                 C47029 +
             (C2466 + C2467 - C2468 - C2485) * C139587) *
                C47031 +
            ((C18858 + C18859 - C18860 - C18876) * C47029 + C24431 * C139587) *
                C139598) *
               C6692 +
           (((C18860 - (C18859 + C18858) + C18876) * C47029 +
             C24432 * C139587) *
                C47031 +
            ((C18863 - (C18864 + C18865) + C18877) * C47029 +
             (C18868 - (C18869 + C18870) + C18878) * C139587) *
                C139598) *
               C139360) *
              C7396 +
          ((((C2468 - (C2467 + C2466) + C2485) * C47029 +
             (C2473 - (C2472 + C2471) + C2487) * C139587) *
                C47031 +
            (C24432 * C47029 + (C8992 - (C8993 + C8994) + C9000) * C139587) *
                C139598) *
               C6692 +
           ((C24431 * C47029 + (C8994 + C8993 - C8992 - C9000) * C139587) *
                C47031 +
            ((C18870 + C18869 - C18868 - C18878) * C47029 +
             (C3124 * C1875 + C3307 * C139571 -
              (C554 * C3894 + C139463 * C4410) * C1876 -
              (C554 * C4078 + C139463 * C4578) * C139384) *
                 C139587) *
                C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C137108 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139562 -
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C137101 -
             (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                 C139308) *
                C47031 +
            ((C47760 + C47761) * C137108 + (C47762 + C47763) * C139562 -
             (C47764 + C47765) * C137101 - (C47766 + C47767) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C137101 -
             ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
               C47029 * C1714) *
                  C139562 +
              (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
               C47029 * C1708) *
                  C137108) +
             (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
              C139587 * C1712) *
                 C139308) *
                C47031 +
            ((C56380 + C56381) * C137101 -
             ((C51256 + C51257) * C139562 + (C51258 + C51259) * C137108) +
             (C56382 + C56383) * C139308) *
                C139598) *
               C139463 * C139384) *
              C6692 +
          ((((C47765 + C47764) * C137101 -
             ((C47763 + C47762) * C139562 + (C47761 + C47760) * C137108) +
             (C47767 + C47766) * C139308) *
                C47031 +
            ((C49684 + C49685) * C137101 -
             ((C49686 + C49687) * C139562 + (C49688 + C49689) * C137108) +
             (C49690 + C49691) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C51259 + C51258) * C137108 + (C51257 + C51256) * C139562 -
             (C56381 + C56380) * C137101 - (C56383 + C56382) * C139308) *
                C47031 +
            ((C51260 + C51261) * C137108 + (C51262 + C51263) * C139562 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C137101 -
             (C47034 * C3903 + C139587 * C3912 + C47033 * C3904 +
              C47029 * C3913) *
                 C139308) *
                C139598) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C6771 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C6692 -
             (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
                C47031 +
            ((C47760 + C47761) * C6771 + (C47883 + C47882) * C6692 -
             (C49688 + C49689) * C6772 - (C49799 + C49798) * C139360) *
                C139598) *
               C139463 * C139562 +
           (((C47765 + C47764) * C6772 -
             ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                  C6692 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C6771) +
             (C47884 + C47885) * C139360) *
                C47031 +
            ((C49684 + C49685) * C6772 -
             ((C47885 + C47884) * C6692 + (C47764 + C47765) * C6771) +
             (C49801 + C49800) * C139360) *
                C139598) *
               C139463 * C139308) *
              C9074 +
          ((((C51259 + C51258) * C6772 -
             ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
               C47029 * C1799) *
                  C6692 +
              (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
               C47029 * C1708) *
                  C6771) +
             (C51370 + C51371) * C139360) *
                C47031 +
            ((C51260 + C51261) * C6772 -
             ((C51371 + C51370) * C6692 + (C51258 + C51259) * C6771) +
             (C51373 + C51372) * C139360) *
                C139598) *
               C139463 * C139562 +
           (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C6771 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C6692 -
             (C56381 + C56380) * C6772 - (C56518 + C56519) * C139360) *
                C47031 +
            ((C56380 + C56381) * C6771 + (C56519 + C56518) * C6692 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C6772 -
             (C47034 * C3992 + C139587 * C3998 + C47033 * C3993 +
              C47029 * C3999) *
                 C139360) *
                C139598) *
               C139463 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C9224 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C9074 -
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C9225 -
             (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
              C47029 * C1884) *
                 C139384) *
                C47031 +
            ((C47760 + C47761) * C9224 + (C47998 + C47999) * C9074 -
             (C51258 + C51259) * C9225 - (C51480 + C51481) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C51259 + C51258) * C9225 -
             ((C47999 + C47998) * C9074 + (C47761 + C47760) * C9224) +
             (C51481 + C51480) * C139384) *
                C47031 +
            ((C51260 + C51261) * C9225 -
             ((C49908 + C49909) * C9074 + (C49688 + C49689) * C9224) +
             (C51482 + C51483) * C139384) *
                C139598) *
               C139463 * C139360) *
              C139562 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C9225 -
             ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                  C9074 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C9224) +
             (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
              C139587 * C1882) *
                 C139384) *
                C47031 +
            ((C56380 + C56381) * C9225 -
             ((C48001 + C48000) * C9074 + (C47764 + C47765) * C9224) +
             (C56654 + C56655) * C139384) *
                C139598) *
               C139463 * C6692 +
           (((C47765 + C47764) * C9224 + (C48000 + C48001) * C9074 -
             (C56381 + C56380) * C9225 - (C56655 + C56654) * C139384) *
                C47031 +
            ((C49684 + C49685) * C9224 + (C49910 + C49911) * C9074 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C9225 -
             (C47034 * C4078 + C139587 * C4084 + C47033 * C4079 +
              C47029 * C4085) *
                 C139384) *
                C139598) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C137108 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139562 -
             (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
                C139463 * C47029 +
            ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139562 -
             (C47265 + C47264) * C137101 - (C47267 + C47266) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C49048 + C49049) * C137101 -
             ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
               C47031 * C1966) *
                  C139562 +
              (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
               C47031 * C1962) *
                  C137108) +
             (C49050 + C49051) * C139308) *
                C139463 * C47029 +
            ((C49053 + C49052) * C137101 -
             ((C49051 + C49050) * C139562 + (C49049 + C49048) * C137108) +
             (C49055 + C49054) * C139308) *
                C139463 * C139587) *
               C139384) *
              C6692 +
          ((((C48118 + C48119) * C137101 -
             ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
               C47031 * C1098) *
                  C139562 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C137108) +
             (C48120 + C48121) * C139308) *
                C139463 * C47029 +
            ((C48123 + C48122) * C137101 -
             ((C48121 + C48120) * C139562 + (C48119 + C48118) * C137108) +
             (C48125 + C48124) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C137108 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C139562 -
             (C56794 + C56795) * C137101 - (C56796 + C56797) * C139308) *
                C139463 * C47029 +
            ((C56795 + C56794) * C137108 + (C56797 + C56796) * C139562 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C137101 -
             (C47234 * C3903 + C139598 * C4170 + C47233 * C3902 +
              C47031 * C4169) *
                 C139308) *
                C139463 * C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C6771 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C6692 -
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C6772 -
             (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
              C47031 * C1195) *
                 C139360) *
                C139463 * C47029 +
            ((C47261 + C47260) * C6771 + (C47350 + C47351) * C6692 -
             (C48119 + C48118) * C6772 - (C48232 + C48233) * C139360) *
                C139463 * C139587) *
               C139562 +
           (((C48118 + C48119) * C6772 -
             ((C47351 + C47350) * C6692 + (C47260 + C47261) * C6771) +
             (C48233 + C48232) * C139360) *
                C139463 * C47029 +
            ((C48123 + C48122) * C6772 -
             ((C47352 + C47353) * C6692 + (C47265 + C47264) * C6771) +
             (C48234 + C48235) * C139360) *
                C139463 * C139587) *
               C139308) *
              C9074 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C6772 -
             ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
               C47031 * C2066) *
                  C6692 +
              (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
               C47031 * C1962) *
                  C6771) +
             (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
              C139598 * C4248) *
                 C139360) *
                C139463 * C47029 +
            ((C56795 + C56794) * C6772 -
             ((C49163 + C49162) * C6692 + (C49049 + C49048) * C6771) +
             (C56932 + C56933) * C139360) *
                C139463 * C139587) *
               C139562 +
           (((C49048 + C49049) * C6771 + (C49162 + C49163) * C6692 -
             (C56794 + C56795) * C6772 - (C56933 + C56932) * C139360) *
                C139463 * C47029 +
            ((C49053 + C49052) * C6771 + (C49164 + C49165) * C6692 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C6772 -
             (C47234 * C3992 + C139598 * C4252 + C47233 * C3991 +
              C47031 * C4251) *
                 C139360) *
                C139463 * C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C9224 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C9225 -
             (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
              C47031 * C2159) *
                 C139384) *
                C139463 * C47029 +
            ((C47261 + C47260) * C9224 + (C47434 + C47435) * C9074 -
             (C49049 + C49048) * C9225 - (C49272 + C49273) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C9225 -
             ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
               C47031 * C1301) *
                  C9074 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C9224) +
             (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
              C139598 * C4330) *
                 C139384) *
                C139463 * C47029 +
            ((C56795 + C56794) * C9225 -
             ((C48342 + C48343) * C9074 + (C48119 + C48118) * C9224) +
             (C57068 + C57069) * C139384) *
                C139463 * C139587) *
               C139360) *
              C139562 +
          ((((C49048 + C49049) * C9225 -
             ((C47435 + C47434) * C9074 + (C47260 + C47261) * C9224) +
             (C49273 + C49272) * C139384) *
                C139463 * C47029 +
            ((C49053 + C49052) * C9225 -
             ((C47436 + C47437) * C9074 + (C47265 + C47264) * C9224) +
             (C49274 + C49275) * C139384) *
                C139463 * C139587) *
               C6692 +
           (((C48118 + C48119) * C9224 + (C48343 + C48342) * C9074 -
             (C56794 + C56795) * C9225 - (C57069 + C57068) * C139384) *
                C139463 * C47029 +
            ((C48123 + C48122) * C9224 + (C48344 + C48345) * C9074 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C9225 -
             (C47234 * C4078 + C139598 * C4332 + C47233 * C4077 +
              C47031 * C4329) *
                 C139384) *
                C139463 * C139587) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C137108 +
                        (C554 * C116 + C139463 * C561) * C139562 -
                        C584 * C137101 - C585 * C139308) *
                           C47029 +
                       (C584 * C137108 + C585 * C139562 - C586 * C137101 -
                        C587 * C139308) *
                           C139587) *
                          C47031 +
                      ((C16937 + C16938 - C16939 - C16940) * C47029 +
                       (C16941 + C16942 - C16943 - C16944) * C139587) *
                          C139598) *
                         C9074 +
                     (((C2286 * C137101 -
                        ((C554 * C1707 + C139463 * C2268) * C139562 +
                         (C554 * C1700 + C139463 * C2264) * C137108) +
                        C2287 * C139308) *
                           C47029 +
                       (C2288 * C137101 - (C2287 * C139562 + C2286 * C137108) +
                        C2289 * C139308) *
                           C139587) *
                          C47031 +
                      ((C28301 - (C28302 + C28303) + C28304) * C47029 +
                       (C28305 - (C28306 + C28307) + C28308) * C139587) *
                          C139598) *
                         C139384) *
                        C6692 +
                    ((((C16939 - (C16938 + C16937) + C16940) * C47029 +
                       (C16943 - (C16942 + C16941) + C16944) * C139587) *
                          C47031 +
                      ((C16945 - (C16963 + C16964) + C16950) * C47029 +
                       (C16951 - (C16952 + C16953) + C16954) * C139587) *
                          C139598) *
                         C9074 +
                     (((C28303 + C28302 - C28301 - C28304) * C47029 +
                       (C28307 + C28306 - C28305 - C28308) * C139587) *
                          C47031 +
                      ((C18639 * C137108 + C18640 * C139562 - C18641 * C137101 -
                        C18642 * C139308) *
                           C47029 +
                       (C18641 * C137108 + C18642 * C139562 -
                        (C554 * C3894 + C139463 * C4410) * C137101 -
                        (C554 * C3903 + C139463 * C4416) * C139308) *
                           C139587) *
                          C139598) *
                         C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C6771 +
                        (C554 * C182 + C139463 * C641) * C6692 -
                        C15026 * C6772 - C15138 * C139360) *
                           C47029 +
                       (C7234 + C7235 - C7236 - C7237) * C139587) *
                          C47031 +
                      ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                        C17072 * C139360) *
                           C47029 +
                       (C22187 + C22188 - C22189 - C22190) * C139587) *
                          C139598) *
                         C139562 +
                     (((C7236 - (C7235 + C7234) + C7237) * C47029 +
                       (C7240 - (C7239 + C7238) + C7241) * C139587) *
                          C47031 +
                      ((C22189 - (C22188 + C22187) + C22190) * C47029 +
                       (C22191 - (C22192 + C22193) + C22194) * C139587) *
                          C139598) *
                         C139308) *
                        C9074 +
                    ((((C18638 * C6772 -
                        ((C554 * C1794 + C139463 * C2368) * C6692 +
                         (C554 * C1700 + C139463 * C2264) * C6771) +
                        C18755 * C139360) *
                           C47029 +
                       (C8874 - (C8875 + C8876) + C8886) * C139587) *
                          C47031 +
                      ((C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                        C18756 * C139360) *
                           C47029 +
                       (C24293 - (C24294 + C24295) + C24296) * C139587) *
                          C139598) *
                         C139562 +
                     (((C8876 + C8875 - C8874 - C8886) * C47029 +
                       (C8881 + C8880 - C8879 - C8887) * C139587) *
                          C47031 +
                      ((C24295 + C24294 - C24293 - C24296) * C47029 +
                       (C8773 * C6771 + C8885 * C6692 -
                        (C554 * C3894 + C139463 * C4410) * C6772 -
                        (C554 * C3992 + C139463 * C4498) * C139360) *
                           C139587) *
                          C139598) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C9224 +
              (C554 * C245 + C139463 * C719) * C9074 -
              (C554 * C1700 + C139463 * C2264) * C9225 -
              (C554 * C1879 + C139463 * C2460) * C139384) *
                 C47029 +
             (C9687 + C9688 - C9689 - C9690) * C139587) *
                C47031 +
            ((C26489 + C26490 - C26491 - C26492) * C47029 + C26501 * C139587) *
                C139598) *
               C6692 +
           (((C26491 - (C26490 + C26489) + C26492) * C47029 +
             C26502 * C139587) *
                C47031 +
            ((C29451 - (C29452 + C29453) + C29454) * C47029 +
             (C26495 - (C26496 + C26497) + C26498) * C139587) *
                C139598) *
               C139360) *
              C139562 +
          ((((C9689 - (C9688 + C9687) + C9690) * C47029 +
             (C9693 - (C9692 + C9691) + C9694) * C139587) *
                C47031 +
            (C26502 * C47029 +
             (C10612 - (C10613 + C10614) + C10615) * C139587) *
                C139598) *
               C6692 +
           ((C26501 * C47029 + (C10614 + C10613 - C10612 - C10615) * C139587) *
                C47031 +
            ((C26497 + C26496 - C26495 - C26498) * C47029 +
             (C3124 * C9224 + C3307 * C9074 -
              (C554 * C3894 + C139463 * C4410) * C9225 -
              (C554 * C4078 + C139463 * C4578) * C139384) *
                 C139587) *
                C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C47031 +
            ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
                C139598) *
               C139463 * C9074 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139598 +
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139303 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C3364) *
                C47031) *
               C139463 * C139384) *
              C139602 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) * C47031 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139598) *
               C139463 * C139384 -
           (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) *
                C139598 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C47031) *
               C139463 * C9074) *
              C139593 +
          ((((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C47031 +
            ((C50598 + C50599) * C3364 + (C50600 + C50601) * C139303) *
                C139598) *
               C139463 * C9074 -
           (((C47034 * C17960 + C139587 * C17964 + C47033 * C17961 +
              C47029 * C17965) *
                 C139303 +
             (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
              C47029 * C17963) *
                 C3364) *
                C139598 +
            ((C51263 + C51262) * C139303 + (C51261 + C51260) * C3364) *
                C47031) *
               C139463 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7477 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139602 -
            (C47761 + C47760) * C7478 - (C47882 + C47883) * C139593 +
            (C49689 + C49688) * C7479 + (C49798 + C49799) * C7400) *
               C47031 +
           ((C47760 + C47761) * C7477 + (C47883 + C47882) * C139602 -
            (C49688 + C49689) * C7478 - (C49799 + C49798) * C139593 +
            (C50598 + C50599) * C7479 + (C50673 + C50672) * C7400) *
               C139598) *
              C139463 * C139303 * C9074 +
          (((C51259 + C51258) * C7478 -
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139602 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C7477) +
            (C51370 + C51371) * C139593 - (C51261 + C51260) * C7479 -
            (C51372 + C51373) * C7400) *
               C47031 +
           ((C51260 + C51261) * C7478 -
            ((C51371 + C51370) * C139602 + (C51258 + C51259) * C7477) +
            (C51373 + C51372) * C139593 -
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C7479 -
            (C47034 * C18088 + C139587 * C18090 + C47033 * C18089 +
             C47029 * C18091) *
                C7400) *
               C139598) *
              C139463 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C9224 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C9074 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C9225 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139384) *
               C47031 +
           ((C47760 + C47761) * C9224 + (C47998 + C47999) * C9074 -
            (C51258 + C51259) * C9225 - (C51480 + C51481) * C139384) *
               C139598) *
              C139463 * C139602 +
          (((C51259 + C51258) * C9225 -
            ((C47999 + C47998) * C9074 + (C47761 + C47760) * C9224) +
            (C51481 + C51480) * C139384) *
               C47031 +
           ((C51260 + C51261) * C9225 -
            ((C49908 + C49909) * C9074 + (C49688 + C49689) * C9224) +
            (C51482 + C51483) * C139384) *
               C139598) *
              C139463 * C139593 +
          (((C49689 + C49688) * C9224 + (C49909 + C49908) * C9074 -
            (C51261 + C51260) * C9225 - (C51483 + C51482) * C139384) *
               C47031 +
           ((C50598 + C50599) * C9224 + (C50744 + C50745) * C9074 -
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C9225 -
            (C47034 * C18202 + C139587 * C18204 + C47033 * C18203 +
             C47029 * C18205) *
                C139384) *
               C139598) *
              C139463 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C47029 +
            ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) *
                C139463 * C139587) *
               C9074 -
           (((C49051 + C49050) * C139303 + (C49049 + C49048) * C3364) *
                C139463 * C139587 +
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139303 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C3364) *
                C139463 * C47029) *
               C139384) *
              C139602 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C47029 +
            ((C56795 + C56794) * C3364 + (C56797 + C56796) * C139303) *
                C139463 * C139587) *
               C139384 -
           (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) *
                C139463 * C139587 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C139463 * C47029) *
               C9074) *
              C139593 +
          ((((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C139463 * C47029 +
            ((C50019 + C50018) * C3364 + (C50021 + C50020) * C139303) *
                C139463 * C139587) *
               C9074 -
           (((C47234 * C17960 + C139598 * C18318 + C47233 * C3904 +
              C47031 * C4171) *
                 C139303 +
             (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
              C47031 * C4165) *
                 C3364) *
                C139463 * C139587 +
            ((C47234 * C17961 + C139598 * C18319 + C47233 * C3905 +
              C47031 * C4172) *
                 C139303 +
             (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
              C47031 * C4166) *
                 C3364) *
                C139463 * C47029) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7477 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139602 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C7478 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139593 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C7400) *
               C139463 * C47029 +
           ((C47261 + C47260) * C7477 + (C47350 + C47351) * C139602 -
            (C48119 + C48118) * C7478 - (C48232 + C48233) * C139593 +
            (C50019 + C50018) * C7479 + (C50124 + C50125) * C7400) *
               C139463 * C139587) *
              C139303 * C9074 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C7478 -
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139602 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C7477) +
            (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
             C139598 * C4248) *
                C139593 -
            (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
             C47031 * C4166) *
                C7479 -
            (C47234 * C18089 + C139598 * C18418 + C47233 * C3994 +
             C47031 * C4248) *
                C7400) *
               C139463 * C47029 +
           ((C56795 + C56794) * C7478 -
            ((C49163 + C49162) * C139602 + (C49049 + C49048) * C7477) +
            (C56932 + C56933) * C139593 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C7479 -
            (C47234 * C18088 + C139598 * C18419 + C47233 * C3993 +
             C47031 * C4250) *
                C7400) *
               C139463 * C139587) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C9224 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C9074 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C9225 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139384) *
               C139463 * C47029 +
           ((C47261 + C47260) * C9224 + (C47434 + C47435) * C9074 -
            (C49049 + C49048) * C9225 - (C49272 + C49273) * C139384) *
               C139463 * C139587) *
              C139602 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C9225 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C9074 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C9224) +
            (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
             C139598 * C4330) *
                C139384) *
               C139463 * C47029 +
           ((C56795 + C56794) * C9225 -
            ((C48342 + C48343) * C9074 + (C48119 + C48118) * C9224) +
            (C57068 + C57069) * C139384) *
               C139463 * C139587) *
              C139593 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C9224 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C9074 -
            (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
             C47031 * C4166) *
                C9225 -
            (C47234 * C18203 + C139598 * C18518 + C47233 * C4080 +
             C47031 * C4330) *
                C139384) *
               C139463 * C47029 +
           ((C50019 + C50018) * C9224 + (C50228 + C50229) * C9074 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C9225 -
            (C47234 * C18202 + C139598 * C18519 + C47233 * C4079 +
             C47031 * C4331) *
                C139384) *
               C139463 * C139587) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C47029 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C47031 +
            ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
                C139598) *
               C9074 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C47029) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C47029) *
                C47031) *
               C139384) *
              C139602 +
          ((((C18644 + C18643) * C47029 + (C18624 + C18623) * C139587) *
                C47031 +
            ((C18645 + C18646) * C47029 + (C18647 + C18648) * C139587) *
                C139598) *
               C139384 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
                C47031) *
               C9074) *
              C139593 +
          ((((C17706 + C17705) * C47029 + (C17704 + C17703) * C139587) *
                C47031 +
            ((C17715 + C17716) * C47029 + (C17711 + C17712) * C139587) *
                C139598) *
               C9074 -
           ((((C554 * C17960 + C139463 * C18620) * C139303 +
              (C554 * C17958 + C139463 * C18618) * C3364) *
                 C139587 +
             ((C554 * C17961 + C139463 * C18621) * C139303 +
              (C554 * C17959 + C139463 * C18619) * C3364) *
                 C47029) *
                C139598 +
            ((C18648 + C18647) * C139587 + (C18646 + C18645) * C47029) *
                C47031) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7477 +
             (C554 * C182 + C139463 * C641) * C139602 - C15026 * C7478 -
             C15138 * C139593 + C16960 * C7479 + C17072 * C7400) *
                C47029 +
            (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C139587) *
               C47031 +
           ((C15026 * C7477 + C15138 * C139602 - C16960 * C7478 -
             C17072 * C139593 + C17713 * C7479 + C17787 * C7400) *
                C47029 +
            (C23093 + C23094 - C23095 - C23096 + C23097 + C23098) * C139587) *
               C139598) *
              C139303 * C9074 +
          (((C18638 * C7478 -
             ((C554 * C1794 + C139463 * C2368) * C139602 +
              (C554 * C1700 + C139463 * C2264) * C7477) +
             C18755 * C139593 - C18639 * C7479 - C18756 * C7400) *
                C47029 +
            (C8771 * C7478 - (C2380 * C139602 + C2286 * C7477) +
             C8884 * C139593 - C18641 * C7479 - C18757 * C7400) *
                C139587) *
               C47031 +
           ((C18639 * C7478 - (C18755 * C139602 + C18638 * C7477) +
             C18756 * C139593 - (C554 * C17959 + C139463 * C18619) * C7479 -
             (C554 * C18089 + C139463 * C18746) * C7400) *
                C47029 +
            (C18641 * C7478 - (C8884 * C139602 + C8771 * C7477) +
             C18757 * C139593 - (C554 * C17958 + C139463 * C18618) * C7479 -
             (C554 * C18088 + C139463 * C18747) * C7400) *
                C139587) *
               C139598) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C9224 +
             (C554 * C245 + C139463 * C719) * C9074 -
             (C554 * C1700 + C139463 * C2264) * C9225 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C47029 +
            (C9687 + C9688 - C9689 - C9690) * C139587) *
               C47031 +
           ((C26489 + C26490 - C26491 - C26492) * C47029 + C26501 * C139587) *
               C139598) *
              C139602 +
          (((C26491 - (C26490 + C26489) + C26492) * C47029 + C26502 * C139587) *
               C47031 +
           ((C29451 - (C29452 + C29453) + C29454) * C47029 +
            (C26495 - (C26496 + C26497) + C26498) * C139587) *
               C139598) *
              C139593 +
          (((C29453 + C29452 - C29451 - C29454) * C47029 +
            (C26497 + C26496 - C26495 - C26498) * C139587) *
               C47031 +
           ((C17713 * C9224 + C17859 * C9074 -
             (C554 * C17959 + C139463 * C18619) * C9225 -
             (C554 * C18203 + C139463 * C18855) * C139384) *
                C47029 +
            (C16961 * C9224 + C17182 * C9074 -
             (C554 * C17958 + C139463 * C18618) * C9225 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139587) *
               C139598) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C47031 +
            ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
                C139598) *
               C139463 * C139603 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139598 +
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139303 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C3364) *
                C47031) *
               C139463 * C139596 +
           (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
              C139587 * C4661) *
                 C3364 +
             (C47033 * C4663 + C47029 * C4668 + C47034 * C4664 +
              C139587 * C4669) *
                 C139303) *
                C47031 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139598) *
               C139463 * C10691) *
              C6692 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) * C47031 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139598) *
               C139463 * C139596 -
           (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) *
                C139598 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C47031) *
               C139463 * C139603 -
           (((C47034 * C19904 + C139587 * C19908 + C47033 * C19905 +
              C47029 * C19909) *
                 C139303 +
             (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
              C47029 * C19907) *
                 C3364) *
                C139598 +
            ((C53087 + C53086) * C139303 + (C53085 + C53084) * C3364) *
                C47031) *
               C139463 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6771 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C6692 -
            (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
               C47031 +
           ((C47760 + C47761) * C6771 + (C47883 + C47882) * C6692 -
            (C49688 + C49689) * C6772 - (C49799 + C49798) * C139360) *
               C139598) *
              C139463 * C139303 * C139603 +
          (((C51259 + C51258) * C6772 -
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C6692 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C6771) +
            (C51370 + C51371) * C139360) *
               C47031 +
           ((C51260 + C51261) * C6772 -
            ((C51371 + C51370) * C6692 + (C51258 + C51259) * C6771) +
            (C51373 + C51372) * C139360) *
               C139598) *
              C139463 * C139303 * C139596 +
          (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C6771 +
            (C47033 * C4746 + C47029 * C4750 + C47034 * C4747 +
             C139587 * C4751) *
                C6692 -
            (C53085 + C53084) * C6772 - (C53190 + C53191) * C139360) *
               C47031 +
           ((C53084 + C53085) * C6771 + (C53191 + C53190) * C6692 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C6772 -
            (C47034 * C20020 + C139587 * C20022 + C47033 * C20021 +
             C47029 * C20023) *
                C139360) *
               C139598) *
              C139463 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C10840 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139603 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C10841 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139596 +
            (C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C10842 +
            (C47033 * C4831 + C47029 * C4835 + C47034 * C4832 +
             C139587 * C4836) *
                C10691) *
               C47031 +
           ((C47760 + C47761) * C10840 + (C47998 + C47999) * C139603 -
            (C51258 + C51259) * C10841 - (C51480 + C51481) * C139596 +
            (C53084 + C53085) * C10842 + (C53294 + C53295) * C10691) *
               C139598) *
              C139463 * C6692 +
          (((C51259 + C51258) * C10841 -
            ((C47999 + C47998) * C139603 + (C47761 + C47760) * C10840) +
            (C51481 + C51480) * C139596 - (C53085 + C53084) * C10842 -
            (C53295 + C53294) * C10691) *
               C47031 +
           ((C51260 + C51261) * C10841 -
            ((C49908 + C49909) * C139603 + (C49688 + C49689) * C10840) +
            (C51482 + C51483) * C139596 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C10842 -
            (C47034 * C20128 + C139587 * C20130 + C47033 * C20129 +
             C47029 * C20131) *
                C10691) *
               C139598) *
              C139463 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C47029 +
            ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) *
                C139463 * C139587) *
               C139603 -
           (((C49051 + C49050) * C139303 + (C49049 + C49048) * C3364) *
                C139463 * C139587 +
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139303 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C3364) *
                C139463 * C47029) *
               C139596 +
           (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
              C139598 * C5717) *
                 C3364 +
             (C47233 * C4663 + C47031 * C4917 + C47234 * C5474 +
              C139598 * C5720) *
                 C139303) *
                C139463 * C47029 +
            ((C52473 + C52472) * C3364 + (C52475 + C52474) * C139303) *
                C139463 * C139587) *
               C10691) *
              C6692 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C47029 +
            ((C56795 + C56794) * C3364 + (C56797 + C56796) * C139303) *
                C139463 * C139587) *
               C139596 -
           (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) *
                C139463 * C139587 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C139463 * C47029) *
               C139603 -
           (((C47234 * C19904 + C139598 * C20238 + C47233 * C5473 +
              C47031 * C5719) *
                 C139303 +
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C3364) *
                C139463 * C139587 +
            ((C47234 * C19905 + C139598 * C20239 + C47233 * C5474 +
              C47031 * C5720) *
                 C139303 +
             (C47234 * C19903 + C139598 * C20237 + C47233 * C5471 +
              C47031 * C5717) *
                 C3364) *
                C139463 * C47029) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6771 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C6692 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C6772 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C139463 * C47029 +
           ((C47261 + C47260) * C6771 + (C47350 + C47351) * C6692 -
            (C48119 + C48118) * C6772 - (C48232 + C48233) * C139360) *
               C139463 * C139587) *
              C139303 * C139603 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C6772 -
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C6692 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C6771) +
            (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
             C139598 * C4248) *
                C139360) *
               C139463 * C47029 +
           ((C56795 + C56794) * C6772 -
            ((C49163 + C49162) * C6692 + (C49049 + C49048) * C6771) +
            (C56932 + C56933) * C139360) *
               C139463 * C139587) *
              C139303 * C139596 +
          (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C6771 +
            (C47233 * C4746 + C47031 * C5007 + C47234 * C5557 +
             C139598 * C5795) *
                C6692 -
            (C47234 * C19903 + C139598 * C20237 + C47233 * C5471 +
             C47031 * C5717) *
                C6772 -
            (C47234 * C20021 + C139598 * C20338 + C47233 * C5557 +
             C47031 * C5795) *
                C139360) *
               C139463 * C47029 +
           ((C52473 + C52472) * C6771 + (C52578 + C52579) * C6692 -
            (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
             C47031 * C5716) *
                C6772 -
            (C47234 * C20020 + C139598 * C20339 + C47233 * C5556 +
             C47031 * C5796) *
                C139360) *
               C139463 * C139587) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C10840 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139603 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C10841 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139596 +
            (C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C10842 +
            (C47233 * C4831 + C47031 * C5095 + C47234 * C5637 +
             C139598 * C5872) *
                C10691) *
               C139463 * C47029 +
           ((C47261 + C47260) * C10840 + (C47434 + C47435) * C139603 -
            (C49049 + C49048) * C10841 - (C49272 + C49273) * C139596 +
            (C52473 + C52472) * C10842 + (C52682 + C52683) * C10691) *
               C139463 * C139587) *
              C6692 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C10841 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139603 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C10840) +
            (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
             C139598 * C4330) *
                C139596 -
            (C47234 * C19903 + C139598 * C20237 + C47233 * C5471 +
             C47031 * C5717) *
                C10842 -
            (C47234 * C20129 + C139598 * C20438 + C47233 * C5637 +
             C47031 * C5872) *
                C10691) *
               C139463 * C47029 +
           ((C56795 + C56794) * C10841 -
            ((C48342 + C48343) * C139603 + (C48119 + C48118) * C10840) +
            (C57068 + C57069) * C139596 -
            (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
             C47031 * C5716) *
                C10842 -
            (C47234 * C20128 + C139598 * C20439 + C47233 * C5636 +
             C47031 * C5873) *
                C10691) *
               C139463 * C139587) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C47029 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C47031 +
            ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
                C139598) *
               C139603 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C47029) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C47029) *
                C47031) *
               C139596 +
           ((((C554 * C4656 + C139463 * C5191) * C3364 +
              (C554 * C4663 + C139463 * C5195) * C139303) *
                 C47029 +
             (C5208 * C3364 + C5209 * C139303) * C139587) *
                C47031 +
            ((C20551 + C20552) * C47029 + (C20547 + C20548) * C139587) *
                C139598) *
               C10691) *
              C6692 +
          ((((C18644 + C18643) * C47029 + (C18624 + C18623) * C139587) *
                C47031 +
            ((C18645 + C18646) * C47029 + (C18647 + C18648) * C139587) *
                C139598) *
               C139596 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
                C47031) *
               C139603 -
           ((((C554 * C19904 + C139463 * C20540) * C139303 +
              (C554 * C19902 + C139463 * C20538) * C3364) *
                 C139587 +
             ((C554 * C19905 + C139463 * C20541) * C139303 +
              (C554 * C19903 + C139463 * C20539) * C3364) *
                 C47029) *
                C139598 +
            ((C20548 + C20547) * C139587 + (C20552 + C20551) * C47029) *
                C47031) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C6771 +
                       (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
                       C15138 * C139360) *
                          C47029 +
                      (C7234 + C7235 - C7236 - C7237) * C139587) *
                         C47031 +
                     ((C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                       C17072 * C139360) *
                          C47029 +
                      (C22187 + C22188 - C22189 - C22190) * C139587) *
                         C139598) *
                        C139303 * C139603 +
                    (((C18638 * C6772 -
                       ((C554 * C1794 + C139463 * C2368) * C6692 +
                        (C554 * C1700 + C139463 * C2264) * C6771) +
                       C18755 * C139360) *
                          C47029 +
                      (C8874 - (C8875 + C8876) + C8886) * C139587) *
                         C47031 +
                     ((C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                       C18756 * C139360) *
                          C47029 +
                      (C24293 - (C24294 + C24295) + C24296) * C139587) *
                         C139598) *
                        C139303 * C139596 +
                    ((((C554 * C4656 + C139463 * C5191) * C6771 +
                       (C554 * C4746 + C139463 * C5285) * C6692 -
                       C20549 * C6772 - C20655 * C139360) *
                          C47029 +
                      (C5208 * C6771 + C5296 * C6692 - C19593 * C6772 -
                       C19696 * C139360) *
                          C139587) *
                         C47031 +
                     ((C20549 * C6771 + C20655 * C6692 -
                       (C554 * C19903 + C139463 * C20539) * C6772 -
                       (C554 * C20021 + C139463 * C20650) * C139360) *
                          C47029 +
                      (C19593 * C6771 + C19696 * C6692 -
                       (C554 * C19902 + C139463 * C20538) * C6772 -
                       (C554 * C20020 + C139463 * C20651) * C139360) *
                          C139587) *
                         C139598) *
                        C139303 * C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C10840 +
             (C554 * C245 + C139463 * C719) * C139603 -
             (C554 * C1700 + C139463 * C2264) * C10841 -
             (C554 * C1879 + C139463 * C2460) * C139596 +
             (C554 * C4656 + C139463 * C5191) * C10842 +
             (C554 * C4831 + C139463 * C5373) * C10691) *
                C47029 +
            (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C139587) *
               C47031 +
           ((C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C47029 +
            (C27385 + C27386 - C27387 - C27388 + C27389 + C27390) * C139587) *
               C139598) *
              C6692 +
          (((C30339 - (C30338 + C30337) + C30340 - C30341 - C30342) * C47029 +
            (C27387 - (C27386 + C27385) + C27388 - C27389 - C27390) * C139587) *
               C47031 +
           ((C18639 * C10841 - (C17181 * C139603 + C16960 * C10840) +
             C18874 * C139596 - (C554 * C19903 + C139463 * C20539) * C10842 -
             (C554 * C20129 + C139463 * C20753) * C10691) *
                C47029 +
            (C18641 * C10841 - (C3306 * C139603 + C3122 * C10840) +
             C18875 * C139596 - (C554 * C19902 + C139463 * C20538) * C10842 -
             (C554 * C20128 + C139463 * C20754) * C10691) *
                C139587) *
               C139598) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139562 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C47031 +
           ((C47760 + C47761) * C137108 + (C47762 + C47763) * C139562 -
            (C47764 + C47765) * C137101 - (C47766 + C47767) * C139308) *
               C139598) *
              C139463 * C139372 * C2565 +
          (((C47765 + C47764) * C137101 -
            ((C47763 + C47762) * C139562 + (C47761 + C47760) * C137108) +
            (C47767 + C47766) * C139308) *
               C47031 +
           ((C49684 + C49685) * C137101 -
            ((C49686 + C49687) * C139562 + (C49688 + C49689) * C137108) +
            (C49690 + C49691) * C139308) *
               C139598) *
              C139463 * C139372 * C2566 +
          (((C49689 + C49688) * C137108 + (C49687 + C49686) * C139562 -
            (C49685 + C49684) * C137101 - (C49691 + C49690) * C139308) *
               C47031 +
           ((C47033 * C3367 + C47029 * C3373 + C47034 * C3366 +
             C139587 * C3372) *
                C137108 +
            (C47033 * C3370 + C47029 * C3376 + C47034 * C3369 +
             C139587 * C3375) *
                C139562 -
            (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
             C47029 * C3372) *
                C137101 -
            (C47034 * C3368 + C139587 * C3374 + C47033 * C3369 +
             C47029 * C3375) *
                C139308) *
               C139598) *
              C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
               C92 -
           (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
               C94 -
           (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139587 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C47031 +
          ((C47033 * C832 + C47029 * C840 + C47034 * C829 + C139587 * C834) *
               C103 +
           (C47033 * C839 + C47029 * C846 + C47034 * C838 + C139587 * C845) *
               C92 -
           (C47034 * C830 + C139587 * C835 + C47033 * C829 + C47029 * C834) *
               C104 -
           (C47034 * C837 + C139587 * C844 + C47033 * C838 + C47029 * C845) *
               C93 +
           (C47033 * C830 + C47029 * C835 + C47034 * C831 + C139587 * C836) *
               C105 +
           (C47033 * C837 + C47029 * C844 + C47034 * C841 + C139587 * C847) *
               C94 -
           (C47034 * C833 + C139587 * C842 + C47033 * C831 + C47029 * C836) *
               C106 -
           (C47034 * C843 + C139587 * C848 + C47033 * C841 + C47029 * C847) *
               C95) *
              C139598) *
         C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139562 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C47031 +
           ((C47760 + C47761) * C137108 + (C47762 + C47763) * C139562 -
            (C47764 + C47765) * C137101 - (C47766 + C47767) * C139308) *
               C139598) *
              C139463 * C4653 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C137101 -
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139562 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C137108) +
            (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
             C139587 * C1712) *
                C139308) *
               C47031 +
           ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
             C139587 * C3899) *
                C137101 -
            ((C51256 + C51257) * C139562 + (C51258 + C51259) * C137108) +
            (C47033 * C3901 + C47029 * C3910 + C47034 * C3902 +
             C139587 * C3911) *
                C139308) *
               C139598) *
              C139463 * C4654 +
          (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C137108 +
            (C47033 * C4663 + C47029 * C4668 + C47034 * C4664 +
             C139587 * C4669) *
                C139562 -
            (C47034 * C4658 + C139587 * C4662 + C47033 * C4657 +
             C47029 * C4661) *
                C137101 -
            (C47034 * C4665 + C139587 * C4670 + C47033 * C4664 +
             C47029 * C4669) *
                C139308) *
               C47031 +
           ((C47033 * C5471 + C47029 * C5477 + C47034 * C5470 +
             C139587 * C5476) *
                C137108 +
            (C47033 * C5474 + C47029 * C5480 + C47034 * C5473 +
             C139587 * C5479) *
                C139562 -
            (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
             C47029 * C5476) *
                C137101 -
            (C47034 * C5472 + C139587 * C5478 + C47033 * C5473 +
             C47029 * C5479) *
                C139308) *
               C139598) *
              C139463 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C47031 +
           ((C47760 + C47761) * C2660 + (C47883 + C47882) * C2565 -
            (C49688 + C49689) * C2661 - (C49799 + C49798) * C2566 +
            (C47033 * C3367 + C47029 * C3373 + C47034 * C3366 +
             C139587 * C3372) *
                C2662 +
            (C47033 * C3433 + C47029 * C3436 + C47034 * C3432 +
             C139587 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139562 +
          (((C47765 + C47764) * C2661 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C2565 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C2660) +
            (C47884 + C47885) * C2566 - (C49685 + C49684) * C2662 -
            (C49800 + C49801) * C2567) *
               C47031 +
           ((C49684 + C49685) * C2661 -
            ((C47885 + C47884) * C2565 + (C47764 + C47765) * C2660) +
            (C49801 + C49800) * C2566 -
            (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
             C47029 * C3372) *
                C2662 -
            (C47034 * C3431 + C139587 * C3434 + C47033 * C3432 +
             C47029 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139346) *
               C47031 +
           ((C47033 * C832 + C47029 * C840 + C47034 * C829 + C139587 * C834) *
                C181 +
            (C47033 * C927 + C47029 * C932 + C47034 * C926 + C139587 * C931) *
                C139346) *
               C139598) *
              C139463 * C92 -
          (((C47034 * C925 + C139587 * C930 + C47033 * C926 + C47029 * C931) *
                C139346 +
            (C47034 * C830 + C139587 * C835 + C47033 * C829 + C47029 * C834) *
                C181) *
               C139598 +
           ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                C139346 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C47031) *
              C139463 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139346) *
               C47031 +
           ((C47033 * C830 + C47029 * C835 + C47034 * C831 + C139587 * C836) *
                C181 +
            (C47033 * C925 + C47029 * C930 + C47034 * C928 + C139587 * C933) *
                C139346) *
               C139598) *
              C139463 * C94 -
          (((C47034 * C929 + C139587 * C934 + C47033 * C928 + C47029 * C933) *
                C139346 +
            (C47034 * C833 + C139587 * C842 + C47033 * C831 + C47029 * C836) *
                C181) *
               C139598 +
           ((C47034 * C186 + C139587 * C192 + C47033 * C185 + C47029 * C191) *
                C139346 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C47031) *
              C139463 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C47031 +
            ((C47760 + C47761) * C181 + (C47883 + C47882) * C139346) *
                C139598) *
               C139463 * C139562 -
           (((C47885 + C47884) * C139346 + (C47764 + C47765) * C181) * C139598 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139463 * C139308) *
              C4653 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C47031 +
            ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
              C139587 * C3899) *
                 C181 +
             (C47033 * C3990 + C47029 * C3996 + C47034 * C3991 +
              C139587 * C3997) *
                 C139346) *
                C139598) *
               C139463 * C139308 -
           (((C51371 + C51370) * C139346 + (C51258 + C51259) * C181) * C139598 +
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139346 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C181) *
                C47031) *
               C139463 * C139562) *
              C4654 +
          ((((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
              C139587 * C4661) *
                 C181 +
             (C47033 * C4746 + C47029 * C4750 + C47034 * C4747 +
              C139587 * C4751) *
                 C139346) *
                C47031 +
            ((C47033 * C5471 + C47029 * C5477 + C47034 * C5470 +
              C139587 * C5476) *
                 C181 +
             (C47033 * C5557 + C47029 * C5560 + C47034 * C5556 +
              C139587 * C5559) *
                 C139346) *
                C139598) *
               C139463 * C139562 -
           (((C47034 * C5555 + C139587 * C5558 + C47033 * C5556 +
              C47029 * C5559) *
                 C139346 +
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C181) *
                C139598 +
            ((C47034 * C4748 + C139587 * C4752 + C47033 * C4747 +
              C47029 * C4751) *
                 C139346 +
             (C47034 * C4658 + C139587 * C4662 + C47033 * C4657 +
              C47029 * C4661) *
                 C181) *
                C47031) *
               C139463 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C47031 +
            ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) *
                C139598) *
               C139463 * C2565 -
           (((C49908 + C49909) * C139372 + (C49688 + C49689) * C244) * C139598 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
               C139463 * C2566 +
           (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C47031 +
            ((C47033 * C3367 + C47029 * C3373 + C47034 * C3366 +
              C139587 * C3372) *
                 C244 +
             (C47033 * C3489 + C47029 * C3492 + C47034 * C3488 +
              C139587 * C3491) *
                 C139372) *
                C139598) *
               C139463 * C2567) *
              C139562 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C47031 +
            ((C49684 + C49685) * C244 + (C49910 + C49911) * C139372) *
                C139598) *
               C139463 * C2566 -
           (((C48001 + C48000) * C139372 + (C47764 + C47765) * C244) * C139598 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139463 * C2565 -
           (((C47034 * C3487 + C139587 * C3490 + C47033 * C3488 +
              C47029 * C3491) *
                 C139372 +
             (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
              C47029 * C3372) *
                 C244) *
                C139598 +
            ((C49911 + C49910) * C139372 + (C49685 + C49684) * C244) * C47031) *
               C139463 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C47031 +
           ((C47033 * C832 + C47029 * C840 + C47034 * C829 + C139587 * C834) *
                C244 +
            (C47033 * C1011 + C47029 * C1016 + C47034 * C1010 +
             C139587 * C1015) *
                C139372) *
               C139598) *
              C139463 * C139346 * C92 -
          (((C47034 * C1009 + C139587 * C1014 + C47033 * C1010 +
             C47029 * C1015) *
                C139372 +
            (C47034 * C830 + C139587 * C835 + C47033 * C829 + C47029 * C834) *
                C244) *
               C139598 +
           ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                C139372 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C47031) *
              C139463 * C139346 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139372) *
               C47031 +
           ((C47033 * C830 + C47029 * C835 + C47034 * C831 + C139587 * C836) *
                C244 +
            (C47033 * C1009 + C47029 * C1014 + C47034 * C1012 +
             C139587 * C1017) *
                C139372) *
               C139598) *
              C139463 * C139346 * C94 -
          (((C47034 * C1013 + C139587 * C1018 + C47033 * C1012 +
             C47029 * C1017) *
                C139372 +
            (C47034 * C833 + C139587 * C842 + C47033 * C831 + C47029 * C836) *
                C244) *
               C139598 +
           ((C47034 * C249 + C139587 * C255 + C47033 * C248 + C47029 * C254) *
                C139372 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C47031) *
              C139463 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C4828 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C4653 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C4829 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C4654 +
            (C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C4830 +
            (C47033 * C4831 + C47029 * C4835 + C47034 * C4832 +
             C139587 * C4836) *
                C4655) *
               C47031 +
           ((C47760 + C47761) * C4828 + (C47998 + C47999) * C4653 -
            (C51258 + C51259) * C4829 - (C51480 + C51481) * C4654 +
            (C47033 * C5471 + C47029 * C5477 + C47034 * C5470 +
             C139587 * C5476) *
                C4830 +
            (C47033 * C5637 + C47029 * C5640 + C47034 * C5636 +
             C139587 * C5639) *
                C4655) *
               C139598) *
              C139463 * C139346 * C139562 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C4829 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C4653 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C4828) +
            (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
             C139587 * C1882) *
                C4654 -
            (C47034 * C4658 + C139587 * C4662 + C47033 * C4657 +
             C47029 * C4661) *
                C4830 -
            (C47034 * C4833 + C139587 * C4837 + C47033 * C4832 +
             C47029 * C4836) *
                C4655) *
               C47031 +
           ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
             C139587 * C3899) *
                C4829 -
            ((C48001 + C48000) * C4653 + (C47764 + C47765) * C4828) +
            (C47033 * C4076 + C47029 * C4082 + C47034 * C4077 +
             C139587 * C4083) *
                C4654 -
            (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
             C47029 * C5476) *
                C4830 -
            (C47034 * C5635 + C139587 * C5638 + C47033 * C5636 +
             C47029 * C5639) *
                C4655) *
               C139598) *
              C139463 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139562 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
               C139463 * C47029 +
           ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139562 -
            (C47265 + C47264) * C137101 - (C47267 + C47266) * C139308) *
               C139463 * C139587) *
              C139372 * C2565 +
          (((C48118 + C48119) * C137101 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139562 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C137108) +
            (C48120 + C48121) * C139308) *
               C139463 * C47029 +
           ((C48123 + C48122) * C137101 -
            ((C48121 + C48120) * C139562 + (C48119 + C48118) * C137108) +
            (C48125 + C48124) * C139308) *
               C139463 * C139587) *
              C139372 * C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C50018 + C50019) * C137101 - (C50020 + C50021) * C139308) *
               C139463 * C47029 +
           ((C50019 + C50018) * C137108 + (C50021 + C50020) * C139562 -
            (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
             C47031 * C2829) *
                C137101 -
            (C47234 * C3368 + C139598 * C3546 + C47233 * C2579 +
             C47031 * C2833) *
                C139308) *
               C139463 * C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C139463 * C47029 +
          ((C47261 + C47260) * C103 + (C47263 + C47262) * C92 -
           (C47265 + C47264) * C104 - (C47267 + C47266) * C93 +
           (C47269 + C47268) * C105 + (C47271 + C47270) * C94 -
           (C47234 * C833 + C139598 * C1097 + C47233 * C111 + C47031 * C312) *
               C106 -
           (C47234 * C843 + C139598 * C1102 + C47233 * C122 + C47031 * C318) *
               C95) *
              C139463 * C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139562 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
               C139463 * C47029 +
           ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139562 -
            (C47265 + C47264) * C137101 - (C47267 + C47266) * C139308) *
               C139463 * C139587) *
              C4653 +
          (((C49048 + C49049) * C137101 -
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139562 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C137108) +
            (C49050 + C49051) * C139308) *
               C139463 * C47029 +
           ((C49053 + C49052) * C137101 -
            ((C49051 + C49050) * C139562 + (C49049 + C49048) * C137108) +
            (C49055 + C49054) * C139308) *
               C139463 * C139587) *
              C4654 +
          (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C137108 +
            (C47233 * C4663 + C47031 * C4917 + C47234 * C5474 +
             C139598 * C5720) *
                C139562 -
            (C52472 + C52473) * C137101 - (C52474 + C52475) * C139308) *
               C139463 * C47029 +
           ((C52473 + C52472) * C137108 + (C52475 + C52474) * C139562 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C137101 -
            (C47234 * C5472 + C139598 * C5718 + C47233 * C4665 +
             C47031 * C4919) *
                C139308) *
               C139463 * C139587) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C47029 +
           ((C47261 + C47260) * C2660 + (C47350 + C47351) * C2565 -
            (C48119 + C48118) * C2661 - (C48232 + C48233) * C2566 +
            (C50019 + C50018) * C2662 + (C50124 + C50125) * C2567) *
               C139463 * C139587) *
              C139562 +
          (((C48118 + C48119) * C2661 -
            ((C47351 + C47350) * C2565 + (C47260 + C47261) * C2660) +
            (C48233 + C48232) * C2566 - (C50018 + C50019) * C2662 -
            (C50125 + C50124) * C2567) *
               C139463 * C47029 +
           ((C48123 + C48122) * C2661 -
            ((C47352 + C47353) * C2565 + (C47265 + C47264) * C2660) +
            (C48234 + C48235) * C2566 -
            (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
             C47031 * C2829) *
                C2662 -
            (C47234 * C3431 + C139598 * C3601 + C47233 * C2665 +
             C47031 * C2923) *
                C2567) *
               C139463 * C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139346) *
               C139463 * C47029 +
           ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
               C139587) *
              C92 -
          (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
               C139587 +
           ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
               C47029) *
              C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C139463 *
               C47029 +
           ((C47269 + C47268) * C181 + (C47354 + C47355) * C139346) * C139463 *
               C139587) *
              C94 -
          (((C47234 * C929 + C139598 * C1199 + C47233 * C186 + C47031 * C398) *
                C139346 +
            (C47234 * C833 + C139598 * C1097 + C47233 * C111 + C47031 * C312) *
                C181) *
               C139463 * C139587 +
           ((C47355 + C47354) * C139346 + (C47268 + C47269) * C181) * C139463 *
               C47029) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
                C139587) *
               C139562 -
           (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
                C139587 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
                C47029) *
               C139308) *
              C4653 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C139463 *
                C47029 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139463 *
                C139587) *
               C139308 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139463 *
                C139587 +
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139346 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C181) *
                C139463 * C47029) *
               C139562) *
              C4654 +
          ((((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
              C139598 * C5717) *
                 C181 +
             (C47233 * C4746 + C47031 * C5007 + C47234 * C5557 +
              C139598 * C5795) *
                 C139346) *
                C139463 * C47029 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) * C139463 *
                C139587) *
               C139562 -
           (((C47234 * C5555 + C139598 * C5797 + C47233 * C4748 +
              C47031 * C5009) *
                 C139346 +
             (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
              C47031 * C4915) *
                 C181) *
                C139463 * C139587 +
            ((C52579 + C52578) * C139346 + (C52472 + C52473) * C181) * C139463 *
                C47029) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
                C139587) *
               C2565 -
           (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
                C139587 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C139463 * C47029) *
               C2566 +
           (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C139463 * C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139372) * C139463 *
                C139587) *
               C2567) *
              C139562 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C139463 *
                C47029 +
            ((C48123 + C48122) * C244 + (C48344 + C48345) * C139372) * C139463 *
                C139587) *
               C2566 -
           (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
                C139587 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
                C47029) *
               C2565 -
           (((C47234 * C3487 + C139598 * C3652 + C47233 * C2747 +
              C47031 * C3019) *
                 C139372 +
             (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
              C47031 * C2829) *
                 C244) *
                C139463 * C139587 +
            ((C50229 + C50228) * C139372 + (C50018 + C50019) * C244) * C139463 *
                C47029) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
               C139587) *
              C139346 * C92 -
          (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
               C139587 +
           ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
               C47029) *
              C139346 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C139463 *
               C47029 +
           ((C47269 + C47268) * C244 + (C47438 + C47439) * C139372) * C139463 *
               C139587) *
              C139346 * C94 -
          (((C47234 * C1013 + C139598 * C1303 + C47233 * C249 + C47031 * C478) *
                C139372 +
            (C47234 * C833 + C139598 * C1097 + C47233 * C111 + C47031 * C312) *
                C244) *
               C139463 * C139587 +
           ((C47439 + C47438) * C139372 + (C47268 + C47269) * C244) * C139463 *
               C47029) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C4828 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C4653 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C4829 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C4654 +
            (C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C4830 +
            (C47233 * C4831 + C47031 * C5095 + C47234 * C5637 +
             C139598 * C5872) *
                C4655) *
               C139463 * C47029 +
           ((C47261 + C47260) * C4828 + (C47434 + C47435) * C4653 -
            (C49049 + C49048) * C4829 - (C49272 + C49273) * C4654 +
            (C52473 + C52472) * C4830 + (C52682 + C52683) * C4655) *
               C139463 * C139587) *
              C139346 * C139562 +
          (((C49048 + C49049) * C4829 -
            ((C47435 + C47434) * C4653 + (C47260 + C47261) * C4828) +
            (C49273 + C49272) * C4654 - (C52472 + C52473) * C4830 -
            (C52683 + C52682) * C4655) *
               C139463 * C47029 +
           ((C49053 + C49052) * C4829 -
            ((C47436 + C47437) * C4653 + (C47265 + C47264) * C4828) +
            (C49274 + C49275) * C4654 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C4830 -
            (C47234 * C5635 + C139598 * C5874 + C47233 * C4833 +
             C47031 * C5097) *
                C4655) *
               C139463 * C139587) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C47029 +
            (C584 * C137108 + C585 * C139562 - C586 * C137101 -
             C587 * C139308) *
                C139587) *
               C47031 +
           ((C16937 + C16938 - C16939 - C16940) * C47029 +
            (C16941 + C16942 - C16943 - C16944) * C139587) *
               C139598) *
              C139372 * C2565 +
          (((C16939 - (C16938 + C16937) + C16940) * C47029 +
            (C16943 - (C16942 + C16941) + C16944) * C139587) *
               C47031 +
           ((C16945 - (C16963 + C16964) + C16950) * C47029 +
            (C16951 - (C16952 + C16953) + C16954) * C139587) *
               C139598) *
              C139372 * C2566 +
          (((C16964 + C16963 - C16945 - C16950) * C47029 +
            (C16953 + C16952 - C16951 - C16954) * C139587) *
               C47031 +
           ((C17713 * C137108 + C17714 * C139562 - C16961 * C137101 -
             C16962 * C139308) *
                C47029 +
            (C16961 * C137108 + C16962 * C139562 -
             (C554 * C3365 + C139463 * C3705) * C137101 -
             (C554 * C3368 + C139463 * C3708) * C139308) *
                C139587) *
               C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C103 +
            (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C47029 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139587) *
              C47031 +
          ((C15026 * C103 + C15027 * C92 - C1418 * C104 - C1419 * C93 +
            C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
               C47029 +
           (C1418 * C103 + C1419 * C92 - C1420 * C104 - C1421 * C93 +
            C1422 * C105 + C1423 * C94 -
            (C554 * C833 + C139463 * C1399) * C106 -
            (C554 * C843 + C139463 * C1404) * C95) *
               C139587) *
              C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C47029 +
            (C584 * C137108 + C585 * C139562 - C586 * C137101 -
             C587 * C139308) *
                C139587) *
               C47031 +
           ((C16937 + C16938 - C16939 - C16940) * C47029 +
            (C16941 + C16942 - C16943 - C16944) * C139587) *
               C139598) *
              C4653 +
          (((C2286 * C137101 -
             ((C554 * C1707 + C139463 * C2268) * C139562 +
              (C554 * C1700 + C139463 * C2264) * C137108) +
             C2287 * C139308) *
                C47029 +
            (C2288 * C137101 - (C2287 * C139562 + C2286 * C137108) +
             C2289 * C139308) *
                C139587) *
               C47031 +
           ((C28301 - (C28302 + C28303) + C28304) * C47029 +
            (C28305 - (C28306 + C28307) + C28308) * C139587) *
               C139598) *
              C4654 +
          ((((C554 * C4656 + C139463 * C5191) * C137108 +
             (C554 * C4663 + C139463 * C5195) * C139562 - C5208 * C137101 -
             C5209 * C139308) *
                C47029 +
            (C5208 * C137108 + C5209 * C139562 - C5210 * C137101 -
             C5211 * C139308) *
                C139587) *
               C47031 +
           ((C20549 * C137108 + C20550 * C139562 - C19593 * C137101 -
             C19594 * C139308) *
                C47029 +
            (C19593 * C137108 + C19594 * C139562 -
             (C554 * C5469 + C139463 * C5949) * C137101 -
             (C554 * C5472 + C139463 * C5952) * C139308) *
                C139587) *
               C139598) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C47029 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C47031 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             C17713 * C2662 + C17787 * C2567) *
                C47029 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139562 +
          (((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C47029 +
            (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C139587) *
               C47031 +
           ((C17067 - (C17066 + C17065) + C17068 - C17069 - C17074) * C47029 +
            (C3124 * C2661 - (C1520 * C2565 + C1420 * C2660) + C3219 * C2566 -
             (C554 * C3365 + C139463 * C3705) * C2662 -
             (C554 * C3431 + C139463 * C3763) * C2567) *
                C139587) *
               C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C47029 +
            (C648 + C664) * C139587) *
               C47031 +
           ((C15026 * C181 + C15138 * C139346) * C47029 +
            (C14134 + C14135) * C139587) *
               C139598) *
              C92 -
          (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
               C139598 +
           ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
              C93 +
          ((C668 * C47029 + (C656 + C666) * C139587) * C47031 +
           ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139587) *
               C139598) *
              C94 -
          ((((C554 * C929 + C139463 * C1501) * C139346 +
             (C554 * C833 + C139463 * C1399) * C181) *
                C139587 +
            (C14139 + C14138) * C47029) *
               C139598 +
           ((C667 + C657) * C139587 + C669 * C47029) * C47031) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C47029 +
             (C648 + C664) * C139587) *
                C47031 +
            ((C15026 * C181 + C15138 * C139346) * C47029 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C139562 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
               C139308) *
              C4653 +
          ((((C2371 + C2383) * C47029 + (C2374 + C2384) * C139587) * C47031 +
            ((C16077 + C16078) * C47029 + (C16079 + C16080) * C139587) *
                C139598) *
               C139308 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C47029) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C47029) *
                C47031) *
               C139562) *
              C4654 +
          (((((C554 * C4656 + C139463 * C5191) * C181 +
              (C554 * C4746 + C139463 * C5285) * C139346) *
                 C47029 +
             (C5290 + C5298) * C139587) *
                C47031 +
            ((C20549 * C181 + C20655 * C139346) * C47029 +
             (C19693 + C19697) * C139587) *
                C139598) *
               C139562 -
           ((((C554 * C5555 + C139463 * C6031) * C139346 +
              (C554 * C5469 + C139463 * C5949) * C181) *
                 C139587 +
             (C19697 + C19693) * C47029) *
                C139598 +
            ((C5299 + C5293) * C139587 + (C5298 + C5290) * C47029) * C47031) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C47029 +
             (C726 + C742) * C139587) *
                C47031 +
            ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
               C2565 -
           ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
               C2566 +
           (((C17176 + C17183) * C47029 + C17177 * C139587) * C47031 +
            ((C17856 + C17860) * C47029 + (C17178 + C17184) * C139587) *
                C139598) *
               C2567) *
              C139562 +
          (((C15240 * C47029 + C15242 * C139587) * C47031 +
            (C17177 * C47029 + (C3303 + C3309) * C139587) * C139598) *
               C2566 -
           ((C1621 * C139587 + C15241 * C47029) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
               C2565 -
           ((((C554 * C3487 + C139463 * C3814) * C139372 +
              (C554 * C3365 + C139463 * C3705) * C244) *
                 C139587 +
             (C17184 + C17178) * C47029) *
                C139598 +
            ((C3309 + C3303) * C139587 + C17173 * C47029) * C47031) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C47029 +
            (C726 + C742) * C139587) *
               C47031 +
           ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
              C139346 * C92 -
          ((C1621 * C139587 + C15241 * C47029) * C139598 +
           ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
              C139346 * C93 +
          ((C746 * C47029 + (C734 + C744) * C139587) * C47031 +
           (C15242 * C47029 + (C1612 + C1620) * C139587) * C139598) *
              C139346 * C94 -
          ((((C554 * C1013 + C139463 * C1604) * C139372 +
             (C554 * C833 + C139463 * C1399) * C244) *
                C139587 +
            (C1620 + C1612) * C47029) *
               C139598 +
           ((C745 + C735) * C139587 + C747 * C47029) * C47031) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C4828 +
             (C554 * C245 + C139463 * C719) * C4653 -
             (C554 * C1700 + C139463 * C2264) * C4829 -
             (C554 * C1879 + C139463 * C2460) * C4654 +
             (C554 * C4656 + C139463 * C5191) * C4830 +
             (C554 * C4831 + C139463 * C5373) * C4655) *
                C47029 +
            (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C139587) *
               C47031 +
           ((C20756 + C20757 - C20758 - C20759 + C20760 + C20764) * C47029 +
            (C19796 + C19797 - C19798 - C19799 + C19800 + C19804) * C139587) *
               C139598) *
              C139346 * C139562 +
          (((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C47029 +
            (C5387 - (C5386 + C5385) + C5388 - C5389 - C5395) * C139587) *
               C47031 +
           ((C19798 - (C19797 + C19796) + C19799 - C19800 - C19804) * C47029 +
            (C8773 * C4829 - (C1615 * C4653 + C1420 * C4828) + C8998 * C4654 -
             (C554 * C5469 + C139463 * C5949) * C4830 -
             (C554 * C5635 + C139463 * C6108) * C4655) *
                C139587) *
               C139598) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C3364 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139303) *
               C47031 +
           ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
               C139598) *
              C139463 * C139372 * C3360 -
          (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) * C139598 +
           ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) * C47031) *
              C139463 * C139372 * C3361 +
          (((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C47031 +
           ((C50598 + C50599) * C3364 + (C50600 + C50601) * C139303) *
               C139598) *
              C139463 * C139372 * C3362 -
          (((C47034 * C17252 + C139587 * C17256 + C47033 * C17253 +
             C47029 * C17257) *
                C139303 +
            (C47034 * C17250 + C139587 * C17254 + C47033 * C17251 +
             C47029 * C17255) *
                C3364) *
               C139598 +
           ((C50601 + C50600) * C139303 + (C50599 + C50598) * C3364) * C47031) *
              C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C47031 +
           ((C47760 + C47761) * C826 + (C47762 + C47763) * C821 -
            (C47764 + C47765) * C827 - (C47766 + C47767) * C822 +
            (C47768 + C47769) * C828 + (C47770 + C47771) * C823) *
               C139598) *
              C139463 * C139372 * C139570 +
          (((C47765 + C47764) * C827 -
            ((C47763 + C47762) * C821 + (C47761 + C47760) * C826) +
            (C47767 + C47766) * C822 - (C47769 + C47768) * C828 -
            (C47771 + C47770) * C823) *
               C47031 +
           ((C47033 * C2571 + C47029 * C2575 + C47034 * C2572 +
             C139587 * C2576) *
                C827 -
            ((C47034 * C2578 + C139587 * C2583 + C47033 * C2577 +
              C47029 * C2582) *
                 C821 +
             (C47034 * C2571 + C139587 * C2575 + C47033 * C2570 +
              C47029 * C2574) *
                 C826) +
            (C47033 * C2578 + C47029 * C2583 + C47034 * C2579 +
             C139587 * C2584) *
                C822 -
            (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
             C47029 * C2576) *
                C828 -
            (C47034 * C2581 + C139587 * C2585 + C47033 * C2579 +
             C47029 * C2584) *
                C823) *
               C139598) *
              C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C47031 +
            ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
                C139598) *
               C139463 * C4653 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139598 +
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139303 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C3364) *
                C47031) *
               C139463 * C4654 +
           (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
              C139587 * C4661) *
                 C3364 +
             (C47033 * C4663 + C47029 * C4668 + C47034 * C4664 +
              C139587 * C4669) *
                 C139303) *
                C47031 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139598) *
               C139463 * C4655) *
              C139570 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) * C47031 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139598) *
               C139463 * C4654 -
           (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) *
                C139598 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C47031) *
               C139463 * C4653 -
           (((C47034 * C19904 + C139587 * C19908 + C47033 * C19905 +
              C47029 * C19909) *
                 C139303 +
             (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
              C47029 * C19907) *
                 C3364) *
                C139598 +
            ((C53087 + C53086) * C139303 + (C53085 + C53084) * C3364) *
                C47031) *
               C139463 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C3427 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
               C3360 -
           (C47761 + C47760) * C3428 - (C47882 + C47883) * C3361 +
           (C49689 + C49688) * C3429 + (C49798 + C49799) * C3362 -
           (C50599 + C50598) * C3430 - (C50672 + C50673) * C3363) *
              C47031 +
          ((C47760 + C47761) * C3427 + (C47883 + C47882) * C3360 -
           (C49688 + C49689) * C3428 - (C49799 + C49798) * C3361 +
           (C50598 + C50599) * C3429 + (C50673 + C50672) * C3362 -
           (C47034 * C17250 + C139587 * C17254 + C47033 * C17251 +
            C47029 * C17255) *
               C3430 -
           (C47034 * C17336 + C139587 * C17338 + C47033 * C17337 +
            C47029 * C17339) *
               C3363) *
              C139598) *
         C139463 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C923 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139570 -
            (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
               C47031 +
           ((C47760 + C47761) * C923 + (C47883 + C47882) * C139570 -
            (C47034 * C2571 + C139587 * C2575 + C47033 * C2570 +
             C47029 * C2574) *
                C924 -
            (C47034 * C2664 + C139587 * C2668 + C47033 * C2663 +
             C47029 * C2667) *
                C139360) *
               C139598) *
              C139463 * C821 +
          (((C47765 + C47764) * C924 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139570 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C923) +
            (C47884 + C47885) * C139360) *
               C47031 +
           ((C47033 * C2571 + C47029 * C2575 + C47034 * C2572 +
             C139587 * C2576) *
                C924 -
            ((C47885 + C47884) * C139570 + (C47764 + C47765) * C923) +
            (C47033 * C2664 + C47029 * C2668 + C47034 * C2665 +
             C139587 * C2669) *
                C139360) *
               C139598) *
              C139463 * C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C923 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139570 -
            (C47769 + C47768) * C924 - (C47886 + C47887) * C139360) *
               C47031 +
           ((C47768 + C47769) * C923 + (C47887 + C47886) * C139570 -
            (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
             C47029 * C2576) *
                C924 -
            (C47034 * C2666 + C139587 * C2670 + C47033 * C2665 +
             C47029 * C2669) *
                C139360) *
               C139598) *
              C139463 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C923 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139570 -
            (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
               C47031 +
           ((C47760 + C47761) * C923 + (C47883 + C47882) * C139570 -
            (C49688 + C49689) * C924 - (C49799 + C49798) * C139360) *
               C139598) *
              C139463 * C139303 * C4653 +
          (((C51259 + C51258) * C924 -
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139570 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C923) +
            (C51370 + C51371) * C139360) *
               C47031 +
           ((C51260 + C51261) * C924 -
            ((C51371 + C51370) * C139570 + (C51258 + C51259) * C923) +
            (C51373 + C51372) * C139360) *
               C139598) *
              C139463 * C139303 * C4654 +
          (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C923 +
            (C47033 * C4746 + C47029 * C4750 + C47034 * C4747 +
             C139587 * C4751) *
                C139570 -
            (C53085 + C53084) * C924 - (C53190 + C53191) * C139360) *
               C47031 +
           ((C53084 + C53085) * C923 + (C53191 + C53190) * C139570 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C924 -
            (C47034 * C20020 + C139587 * C20022 + C47033 * C20021 +
             C47029 * C20023) *
                C139360) *
               C139598) *
              C139463 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C47031 +
           ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) * C139598) *
              C139463 * C3360 -
          (((C49908 + C49909) * C139372 + (C49688 + C49689) * C244) * C139598 +
           ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
              C139463 * C3361 +
          (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C47031 +
           ((C50598 + C50599) * C244 + (C50744 + C50745) * C139372) * C139598) *
              C139463 * C3362 -
          (((C47034 * C17412 + C139587 * C17414 + C47033 * C17413 +
             C47029 * C17415) *
                C139372 +
            (C47034 * C17250 + C139587 * C17254 + C47033 * C17251 +
             C47029 * C17255) *
                C244) *
               C139598 +
           ((C50745 + C50744) * C139372 + (C50599 + C50598) * C244) * C47031) *
              C139463 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C47031 +
            ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C47034 * C2746 + C139587 * C2750 + C47033 * C2745 +
              C47029 * C2749) *
                 C139372 +
             (C47034 * C2571 + C139587 * C2575 + C47033 * C2570 +
              C47029 * C2574) *
                 C244) *
                C139598 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
               C139463 * C139360) *
              C821 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C47031 +
            ((C47033 * C2571 + C47029 * C2575 + C47034 * C2572 +
              C139587 * C2576) *
                 C244 +
             (C47033 * C2746 + C47029 * C2750 + C47034 * C2747 +
              C139587 * C2751) *
                 C139372) *
                C139598) *
               C139463 * C139360 -
           (((C48001 + C48000) * C139372 + (C47764 + C47765) * C244) * C139598 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139463 * C139570) *
              C822 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                 C139372) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48002 + C48003) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C47034 * C2748 + C139587 * C2752 + C47033 * C2747 +
              C47029 * C2751) *
                 C139372 +
             (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
              C47029 * C2576) *
                 C244) *
                C139598 +
            ((C48003 + C48002) * C139372 + (C47769 + C47768) * C244) * C47031) *
               C139463 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C4828 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C4653 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C4829 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C4654 +
            (C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C4830 +
            (C47033 * C4831 + C47029 * C4835 + C47034 * C4832 +
             C139587 * C4836) *
                C4655) *
               C47031 +
           ((C47760 + C47761) * C4828 + (C47998 + C47999) * C4653 -
            (C51258 + C51259) * C4829 - (C51480 + C51481) * C4654 +
            (C53084 + C53085) * C4830 + (C53294 + C53295) * C4655) *
               C139598) *
              C139463 * C139570 +
          (((C51259 + C51258) * C4829 -
            ((C47999 + C47998) * C4653 + (C47761 + C47760) * C4828) +
            (C51481 + C51480) * C4654 - (C53085 + C53084) * C4830 -
            (C53295 + C53294) * C4655) *
               C47031 +
           ((C51260 + C51261) * C4829 -
            ((C49908 + C49909) * C4653 + (C49688 + C49689) * C4828) +
            (C51482 + C51483) * C4654 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C4830 -
            (C47034 * C20128 + C139587 * C20130 + C47033 * C20129 +
             C47029 * C20131) *
                C4655) *
               C139598) *
              C139463 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C3364 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139303) *
               C139463 * C47029 +
           ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) * C139463 *
               C139587) *
              C139372 * C3360 -
          (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) * C139463 *
               C139587 +
           ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
             C47031 * C1098) *
                C139303 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C3364) *
               C139463 * C47029) *
              C139372 * C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139303) *
               C139463 * C47029 +
           ((C50019 + C50018) * C3364 + (C50021 + C50020) * C139303) * C139463 *
               C139587) *
              C139372 * C3362 -
          (((C47234 * C17252 + C139598 * C17490 + C47233 * C3369 +
             C47031 * C3547) *
                C139303 +
            (C47234 * C17250 + C139598 * C17488 + C47233 * C3366 +
             C47031 * C3544) *
                C3364) *
               C139463 * C139587 +
           ((C47234 * C17253 + C139598 * C17491 + C47233 * C3370 +
             C47031 * C3548) *
                C139303 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C3364) *
               C139463 * C47029) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C139463 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C822 +
            (C47269 + C47268) * C828 + (C47271 + C47270) * C823) *
               C139463 * C139587) *
              C139372 * C139570 +
          (((C48118 + C48119) * C827 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C821 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C826) +
            (C48120 + C48121) * C822 - (C48122 + C48123) * C828 -
            (C48124 + C48125) * C823) *
               C139463 * C47029 +
           ((C48123 + C48122) * C827 -
            ((C48121 + C48120) * C821 + (C48119 + C48118) * C826) +
            (C48125 + C48124) * C822 -
            (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
             C47031 * C1096) *
                C828 -
            (C47234 * C2581 + C139598 * C2834 + C47233 * C841 +
             C47031 * C1101) *
                C823) *
               C139463 * C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C47029 +
            ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) *
                C139463 * C139587) *
               C4653 -
           (((C49051 + C49050) * C139303 + (C49049 + C49048) * C3364) *
                C139463 * C139587 +
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139303 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C3364) *
                C139463 * C47029) *
               C4654 +
           (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
              C139598 * C5717) *
                 C3364 +
             (C47233 * C4663 + C47031 * C4917 + C47234 * C5474 +
              C139598 * C5720) *
                 C139303) *
                C139463 * C47029 +
            ((C52473 + C52472) * C3364 + (C52475 + C52474) * C139303) *
                C139463 * C139587) *
               C4655) *
              C139570 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C47029 +
            ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
              C139598 * C4165) *
                 C3364 +
             (C47233 * C3901 + C47031 * C4168 + C47234 * C3904 +
              C139598 * C4171) *
                 C139303) *
                C139463 * C139587) *
               C4654 -
           (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) *
                C139463 * C139587 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C139463 * C47029) *
               C4653 -
           (((C47234 * C19904 + C139598 * C20238 + C47233 * C5473 +
              C47031 * C5719) *
                 C139303 +
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C3364) *
                C139463 * C139587 +
            ((C47234 * C19905 + C139598 * C20239 + C47233 * C5474 +
              C47031 * C5720) *
                 C139303 +
             (C47234 * C19903 + C139598 * C20237 + C47233 * C5471 +
              C47031 * C5717) *
                 C3364) *
                C139463 * C47029) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C3427 +
           (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
               C3360 -
           (C47234 * C2570 + C139598 * C2827 + C47233 * C832 + C47031 * C1094) *
               C3428 -
           (C47234 * C2663 + C139598 * C2921 + C47233 * C927 + C47031 * C1195) *
               C3361 +
           (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
            C47031 * C3545) *
               C3430 -
           (C47234 * C17337 + C139598 * C17558 + C47233 * C3433 +
            C47031 * C3599) *
               C3363) *
              C139463 * C47029 +
          ((C47261 + C47260) * C3427 + (C47350 + C47351) * C3360 -
           (C48119 + C48118) * C3428 - (C48232 + C48233) * C3361 +
           (C50019 + C50018) * C3429 + (C50124 + C50125) * C3362 -
           (C47234 * C17250 + C139598 * C17488 + C47233 * C3366 +
            C47031 * C3544) *
               C3430 -
           (C47234 * C17336 + C139598 * C17559 + C47233 * C3432 +
            C47031 * C3600) *
               C3363) *
              C139463 * C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C923 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139570 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C924 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C139463 * C47029 +
           ((C47261 + C47260) * C923 + (C47350 + C47351) * C139570 -
            (C48119 + C48118) * C924 - (C48232 + C48233) * C139360) *
               C139463 * C139587) *
              C821 +
          (((C48118 + C48119) * C924 -
            ((C47351 + C47350) * C139570 + (C47260 + C47261) * C923) +
            (C48233 + C48232) * C139360) *
               C139463 * C47029 +
           ((C48123 + C48122) * C924 -
            ((C47352 + C47353) * C139570 + (C47265 + C47264) * C923) +
            (C48234 + C48235) * C139360) *
               C139463 * C139587) *
              C822 +
          (((C47264 + C47265) * C923 + (C47353 + C47352) * C139570 -
            (C48122 + C48123) * C924 - (C48235 + C48234) * C139360) *
               C139463 * C47029 +
           ((C47269 + C47268) * C923 + (C47354 + C47355) * C139570 -
            (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
             C47031 * C1096) *
                C924 -
            (C47234 * C2666 + C139598 * C2924 + C47233 * C928 +
             C47031 * C1198) *
                C139360) *
               C139463 * C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C923 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139570 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C924 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C139463 * C47029 +
           ((C47261 + C47260) * C923 + (C47350 + C47351) * C139570 -
            (C48119 + C48118) * C924 - (C48232 + C48233) * C139360) *
               C139463 * C139587) *
              C139303 * C4653 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C924 -
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139570 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C923) +
            (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
             C139598 * C4248) *
                C139360) *
               C139463 * C47029 +
           ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
             C139598 * C4165) *
                C924 -
            ((C49163 + C49162) * C139570 + (C49049 + C49048) * C923) +
            (C47233 * C3990 + C47031 * C4249 + C47234 * C3993 +
             C139598 * C4250) *
                C139360) *
               C139463 * C139587) *
              C139303 * C4654 +
          (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C923 +
            (C47233 * C4746 + C47031 * C5007 + C47234 * C5557 +
             C139598 * C5795) *
                C139570 -
            (C47234 * C19903 + C139598 * C20237 + C47233 * C5471 +
             C47031 * C5717) *
                C924 -
            (C47234 * C20021 + C139598 * C20338 + C47233 * C5557 +
             C47031 * C5795) *
                C139360) *
               C139463 * C47029 +
           ((C52473 + C52472) * C923 + (C52578 + C52579) * C139570 -
            (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
             C47031 * C5716) *
                C924 -
            (C47234 * C20020 + C139598 * C20339 + C47233 * C5556 +
             C47031 * C5796) *
                C139360) *
               C139463 * C139587) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
               C139587) *
              C3360 -
          (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
               C139587 +
           ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
             C47031 * C1301) *
                C139372 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C244) *
               C139463 * C47029) *
              C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C244 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139372) *
               C139463 * C47029 +
           ((C50019 + C50018) * C244 + (C50228 + C50229) * C139372) * C139463 *
               C139587) *
              C3362 -
          (((C47234 * C17412 + C139598 * C17626 + C47233 * C3488 +
             C47031 * C3653) *
                C139372 +
            (C47234 * C17250 + C139598 * C17488 + C47233 * C3366 +
             C47031 * C3544) *
                C244) *
               C139463 * C139587 +
           ((C47234 * C17413 + C139598 * C17627 + C47233 * C3489 +
             C47031 * C3654) *
                C139372 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C244) *
               C139463 * C47029) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
                C139587 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C139463 * C47029) *
               C139360) *
              C821 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C139463 *
                C47029 +
            ((C48123 + C48122) * C244 + (C48344 + C48345) * C139372) * C139463 *
                C139587) *
               C139360 -
           (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
                C139587 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
                C47029) *
               C139570) *
              C822 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C139463 *
                C47029 +
            ((C47269 + C47268) * C244 + (C47438 + C47439) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C47234 * C2748 + C139598 * C3020 + C47233 * C1012 +
              C47031 * C1302) *
                 C139372 +
             (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
              C47031 * C1096) *
                 C244) *
                C139463 * C139587 +
            ((C48345 + C48344) * C139372 + (C48122 + C48123) * C244) * C139463 *
                C47029) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C4828 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C4653 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C4829 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C4654 +
            (C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C4830 +
            (C47233 * C4831 + C47031 * C5095 + C47234 * C5637 +
             C139598 * C5872) *
                C4655) *
               C139463 * C47029 +
           ((C47261 + C47260) * C4828 + (C47434 + C47435) * C4653 -
            (C49049 + C49048) * C4829 - (C49272 + C49273) * C4654 +
            (C52473 + C52472) * C4830 + (C52682 + C52683) * C4655) *
               C139463 * C139587) *
              C139570 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C4829 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C4653 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C4828) +
            (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
             C139598 * C4330) *
                C4654 -
            (C47234 * C19903 + C139598 * C20237 + C47233 * C5471 +
             C47031 * C5717) *
                C4830 -
            (C47234 * C20129 + C139598 * C20438 + C47233 * C5637 +
             C47031 * C5872) *
                C4655) *
               C139463 * C47029 +
           ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
             C139598 * C4165) *
                C4829 -
            ((C48342 + C48343) * C4653 + (C48119 + C48118) * C4828) +
            (C47233 * C4076 + C47031 * C4328 + C47234 * C4079 +
             C139598 * C4331) *
                C4654 -
            (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
             C47031 * C5716) *
                C4830 -
            (C47234 * C20128 + C139598 * C20439 + C47233 * C5636 +
             C47031 * C5873) *
                C4655) *
               C139463 * C139587) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C47029 +
            (C584 * C3364 + C585 * C139303) * C139587) *
               C47031 +
           ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
               C139598) *
              C139372 * C3360 -
          (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
               C139598 +
           ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
               C47031) *
              C139372 * C3361 +
          (((C17706 + C17705) * C47029 + (C17704 + C17703) * C139587) * C47031 +
           ((C17715 + C17716) * C47029 + (C17711 + C17712) * C139587) *
               C139598) *
              C139372 * C3362 -
          ((((C554 * C17252 + C139463 * C17696) * C139303 +
             (C554 * C17250 + C139463 * C17694) * C3364) *
                C139587 +
            ((C554 * C17253 + C139463 * C17697) * C139303 +
             (C554 * C17251 + C139463 * C17695) * C3364) *
                C47029) *
               C139598 +
           ((C17712 + C17711) * C139587 + (C17716 + C17715) * C47029) *
               C47031) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C47031 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C47029 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139372 * C139570 +
          (((C15016 - (C15029 + C15028) + C15017 - C15018 - C15019) * C47029 +
            (C15022 - (C15021 + C15020) + C15023 - C15024 - C15025) * C139587) *
               C47031 +
           ((C3122 * C827 - (C16959 * C821 + C16960 * C826) + C3123 * C822 -
             C3124 * C828 - C3125 * C823) *
                C47029 +
            (C3124 * C827 - (C3123 * C821 + C3122 * C826) + C3125 * C822 -
             (C554 * C2573 + C139463 * C3108) * C828 -
             (C554 * C2581 + C139463 * C3112) * C823) *
                C139587) *
               C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C47029 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C47031 +
            ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
                C139598) *
               C4653 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C47029) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C47029) *
                C47031) *
               C4654 +
           ((((C554 * C4656 + C139463 * C5191) * C3364 +
              (C554 * C4663 + C139463 * C5195) * C139303) *
                 C47029 +
             (C5208 * C3364 + C5209 * C139303) * C139587) *
                C47031 +
            ((C20551 + C20552) * C47029 + (C20547 + C20548) * C139587) *
                C139598) *
               C4655) *
              C139570 +
          ((((C18644 + C18643) * C47029 + (C18624 + C18623) * C139587) *
                C47031 +
            ((C18645 + C18646) * C47029 + (C18647 + C18648) * C139587) *
                C139598) *
               C4654 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
                C47031) *
               C4653 -
           ((((C554 * C19904 + C139463 * C20540) * C139303 +
              (C554 * C19902 + C139463 * C20538) * C3364) *
                 C139587 +
             ((C554 * C19905 + C139463 * C20541) * C139303 +
              (C554 * C19903 + C139463 * C20539) * C3364) *
                 C47029) *
                C139598 +
            ((C20548 + C20547) * C139587 + (C20552 + C20551) * C47029) *
                C47031) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C3427 +
            (C554 * C182 + C139463 * C641) * C3360 - C15026 * C3428 -
            C15138 * C3361 + C16960 * C3429 + C17072 * C3362 - C17713 * C3430 -
            C17787 * C3363) *
               C47029 +
           (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
            C3122 * C3429 + C3218 * C3362 - C16961 * C3430 - C17073 * C3363) *
               C139587) *
              C47031 +
          ((C15026 * C3427 + C15138 * C3360 - C16960 * C3428 - C17072 * C3361 +
            C17713 * C3429 + C17787 * C3362 -
            (C554 * C17251 + C139463 * C17695) * C3430 -
            (C554 * C17337 + C139463 * C17782) * C3363) *
               C47029 +
           (C1418 * C3427 + C1518 * C3360 - C3122 * C3428 - C3218 * C3361 +
            C16961 * C3429 + C17073 * C3362 -
            (C554 * C17250 + C139463 * C17694) * C3430 -
            (C554 * C17336 + C139463 * C17783) * C3363) *
               C139587) *
              C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C923 +
             (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
             C15138 * C139360) *
                C47029 +
            (C1503 + C1504 - C1505 - C1522) * C139587) *
               C47031 +
           ((C15026 * C923 + C15138 * C139570 - C16960 * C924 -
             C17072 * C139360) *
                C47029 +
            (C15130 + C15131 - C15132 - C15133) * C139587) *
               C139598) *
              C821 +
          (((C1505 - (C1504 + C1503) + C1522) * C47029 +
            (C1510 - (C1509 + C1508) + C1524) * C139587) *
               C47031 +
           ((C15132 - (C15131 + C15130) + C15133) * C47029 +
            (C15134 - (C15135 + C15136) + C15137) * C139587) *
               C139598) *
              C822 +
          ((C1526 * C47029 + (C1515 + C1514 - C1513 - C1525) * C139587) *
               C47031 +
           ((C15136 + C15135 - C15134 - C15137) * C47029 +
            (C1422 * C923 + C1521 * C139570 -
             (C554 * C2573 + C139463 * C3108) * C924 -
             (C554 * C2666 + C139463 * C3202) * C139360) *
                C139587) *
               C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C923 +
             (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
             C15138 * C139360) *
                C47029 +
            (C1503 + C1504 - C1505 - C1522) * C139587) *
               C47031 +
           ((C15026 * C923 + C15138 * C139570 - C16960 * C924 -
             C17072 * C139360) *
                C47029 +
            (C15130 + C15131 - C15132 - C15133) * C139587) *
               C139598) *
              C139303 * C4653 +
          (((C18638 * C924 -
             ((C554 * C1794 + C139463 * C2368) * C139570 +
              (C554 * C1700 + C139463 * C2264) * C923) +
             C18755 * C139360) *
                C47029 +
            (C10502 - (C10503 + C10504) + C10505) * C139587) *
               C47031 +
           ((C18639 * C924 - (C18755 * C139570 + C18638 * C923) +
             C18756 * C139360) *
                C47029 +
            (C26355 - (C26356 + C26357) + C26358) * C139587) *
               C139598) *
              C139303 * C4654 +
          ((((C554 * C4656 + C139463 * C5191) * C923 +
             (C554 * C4746 + C139463 * C5285) * C139570 - C20549 * C924 -
             C20655 * C139360) *
                C47029 +
            (C5208 * C923 + C5296 * C139570 - C19593 * C924 -
             C19696 * C139360) *
                C139587) *
               C47031 +
           ((C20549 * C923 + C20655 * C139570 -
             (C554 * C19903 + C139463 * C20539) * C924 -
             (C554 * C20021 + C139463 * C20650) * C139360) *
                C47029 +
            (C19593 * C923 + C19696 * C139570 -
             (C554 * C19902 + C139463 * C20538) * C924 -
             (C554 * C20020 + C139463 * C20651) * C139360) *
                C139587) *
               C139598) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C47029 +
            (C726 + C742) * C139587) *
               C47031 +
           ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
              C3360 -
          ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
           (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
              C3361 +
          (((C17176 + C17183) * C47029 + C17177 * C139587) * C47031 +
           ((C17856 + C17860) * C47029 + (C17178 + C17184) * C139587) *
               C139598) *
              C3362 -
          ((((C554 * C17412 + C139463 * C17853) * C139372 +
             (C554 * C17250 + C139463 * C17694) * C244) *
                C139587 +
            ((C554 * C17413 + C139463 * C17854) * C139372 +
             (C554 * C17251 + C139463 * C17695) * C244) *
                C47029) *
               C139598 +
           ((C17184 + C17178) * C139587 + (C17860 + C17856) * C47029) *
               C47031) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C47029 +
             (C726 + C742) * C139587) *
                C47031 +
            ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
               C139570 -
           ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
               C139360) *
              C821 +
          (((C15240 * C47029 + C15242 * C139587) * C47031 +
            (C17177 * C47029 + (C3303 + C3309) * C139587) * C139598) *
               C139360 -
           ((C1621 * C139587 + C15241 * C47029) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
               C139570) *
              C822 +
          (((C746 * C47029 + (C734 + C744) * C139587) * C47031 +
            (C15242 * C47029 + (C1612 + C1620) * C139587) * C139598) *
               C139570 -
           ((((C554 * C2748 + C139463 * C3298) * C139372 +
              (C554 * C2573 + C139463 * C3108) * C244) *
                 C139587 +
             (C3309 + C3303) * C47029) *
                C139598 +
            ((C1620 + C1612) * C139587 + C1621 * C47029) * C47031) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C4828 +
             (C554 * C245 + C139463 * C719) * C4653 -
             (C554 * C1700 + C139463 * C2264) * C4829 -
             (C554 * C1879 + C139463 * C2460) * C4654 +
             (C554 * C4656 + C139463 * C5191) * C4830 +
             (C554 * C4831 + C139463 * C5373) * C4655) *
                C47029 +
            (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C139587) *
               C47031 +
           ((C20756 + C20757 - C20758 - C20759 + C20760 + C20764) * C47029 +
            (C19796 + C19797 - C19798 - C19799 + C19800 + C19804) * C139587) *
               C139598) *
              C139570 +
          (((C20758 - (C20757 + C20756) + C20759 - C20760 - C20764) * C47029 +
            (C19798 - (C19797 + C19796) + C19799 - C19800 - C19804) * C139587) *
               C47031 +
           ((C18639 * C4829 - (C17181 * C4653 + C16960 * C4828) +
             C18874 * C4654 - (C554 * C19903 + C139463 * C20539) * C4830 -
             (C554 * C20129 + C139463 * C20753) * C4655) *
                C47029 +
            (C18641 * C4829 - (C3306 * C4653 + C3122 * C4828) + C18875 * C4654 -
             (C554 * C19902 + C139463 * C20538) * C4830 -
             (C554 * C20128 + C139463 * C20754) * C4655) *
                C139587) *
               C139598) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C47031 +
            ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139598 +
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139303 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C3364) *
                C47031) *
               C139463 * C139384) *
              C2565 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) * C47031 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139598) *
               C139463 * C139384 -
           (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) *
                C139598 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C47031) *
               C139463 * C139571) *
              C2566 +
          ((((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C47031 +
            ((C50598 + C50599) * C3364 + (C50600 + C50601) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C47034 * C17960 + C139587 * C17964 + C47033 * C17961 +
              C47029 * C17965) *
                 C139303 +
             (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
              C47029 * C17963) *
                 C3364) *
                C139598 +
            ((C51263 + C51262) * C139303 + (C51261 + C51260) * C3364) *
                C47031) *
               C139463 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C47031 +
           ((C47760 + C47761) * C826 + (C47762 + C47763) * C821 -
            (C47764 + C47765) * C827 - (C47766 + C47767) * C822 +
            (C47768 + C47769) * C828 + (C47770 + C47771) * C823) *
               C139598) *
              C139463 * C139571 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C827 -
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C821 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C826) +
            (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
             C139587 * C1712) *
                C822 -
            (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
             C47029 * C1703) *
                C828 -
            (C47034 * C1709 + C139587 * C1715 + C47033 * C1705 +
             C47029 * C1712) *
                C823) *
               C47031 +
           ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
             C139587 * C3899) *
                C827 -
            ((C47034 * C3901 + C139587 * C3910 + C47033 * C3900 +
              C47029 * C3909) *
                 C821 +
             (C47034 * C3892 + C139587 * C3898 + C47033 * C3891 +
              C47029 * C3897) *
                 C826) +
            (C47033 * C3901 + C47029 * C3910 + C47034 * C3902 +
             C139587 * C3911) *
                C822 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C828 -
            (C47034 * C8122 + C139587 * C8123 + C47033 * C3902 +
             C47029 * C3911) *
                C823) *
               C139598) *
              C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C3364 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139303) *
               C47031 +
           ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
               C139598) *
              C139463 * C6159 -
          (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) * C139598 +
           ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
             C47029 * C1714) *
                C139303 +
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C3364) *
               C47031) *
              C139463 * C6160 +
          (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C3364 +
            (C47033 * C4663 + C47029 * C4668 + C47034 * C4664 +
             C139587 * C4669) *
                C139303) *
               C47031 +
           ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
               C139598) *
              C139463 * C6161 -
          (((C47034 * C20832 + C139587 * C20836 + C47033 * C20833 +
             C47029 * C20837) *
                C139303 +
            (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
             C47029 * C20835) *
                C3364) *
               C139598 +
           ((C47034 * C6167 + C139587 * C6173 + C47033 * C6168 +
             C47029 * C6174) *
                C139303 +
            (C47034 * C6164 + C139587 * C6170 + C47033 * C6165 +
             C47029 * C6171) *
                C3364) *
               C47031) *
              C139463 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C47031 +
           ((C47760 + C47761) * C2660 + (C47883 + C47882) * C2565 -
            (C49688 + C49689) * C2661 - (C49799 + C49798) * C2566 +
            (C50598 + C50599) * C2662 + (C50673 + C50672) * C2567) *
               C139598) *
              C139463 * C139303 * C139571 +
          (((C51259 + C51258) * C2661 -
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C2565 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C2660) +
            (C51370 + C51371) * C2566 - (C51261 + C51260) * C2662 -
            (C51372 + C51373) * C2567) *
               C47031 +
           ((C51260 + C51261) * C2661 -
            ((C51371 + C51370) * C2565 + (C51258 + C51259) * C2660) +
            (C51373 + C51372) * C2566 -
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C2662 -
            (C47034 * C18088 + C139587 * C18090 + C47033 * C18089 +
             C47029 * C18091) *
                C2567) *
               C139598) *
              C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C47031 +
            ((C47760 + C47761) * C181 + (C47883 + C47882) * C139346) *
                C139598) *
               C139463 * C821 -
           (((C47885 + C47884) * C139346 + (C47764 + C47765) * C181) * C139598 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139463 * C822 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                 C139346) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47887 + C47886) * C139346) *
                C139598) *
               C139463 * C823) *
              C139571 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C47031 +
            ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
              C139587 * C3899) *
                 C181 +
             (C47033 * C3990 + C47029 * C3996 + C47034 * C3991 +
              C139587 * C3997) *
                 C139346) *
                C139598) *
               C139463 * C822 -
           (((C47034 * C3990 + C139587 * C3996 + C47033 * C3989 +
              C47029 * C3995) *
                 C139346 +
             (C47034 * C3892 + C139587 * C3898 + C47033 * C3891 +
              C47029 * C3897) *
                 C181) *
                C139598 +
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139346 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C181) *
                C47031) *
               C139463 * C821 -
           (((C47034 * C8222 + C139587 * C8223 + C47033 * C3991 +
              C47029 * C3997) *
                 C139346 +
             (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
              C47029 * C3899) *
                 C181) *
                C139598 +
            ((C47034 * C1793 + C139587 * C1798 + C47033 * C1792 +
              C47029 * C1797) *
                 C139346 +
             (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
              C47029 * C1703) *
                 C181) *
                C47031) *
               C139463 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139346) *
               C47031 +
           ((C47760 + C47761) * C181 + (C47883 + C47882) * C139346) * C139598) *
              C139463 * C139303 * C6159 -
          (((C51371 + C51370) * C139346 + (C51258 + C51259) * C181) * C139598 +
           ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
             C47029 * C1799) *
                C139346 +
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C181) *
               C47031) *
              C139463 * C139303 * C6160 +
          (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C181 +
            (C47033 * C4746 + C47029 * C4750 + C47034 * C4747 +
             C139587 * C4751) *
                C139346) *
               C47031 +
           ((C53084 + C53085) * C181 + (C53191 + C53190) * C139346) * C139598) *
              C139463 * C139303 * C6161 -
          (((C47034 * C20904 + C139587 * C20906 + C47033 * C20905 +
             C47029 * C20907) *
                C139346 +
            (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
             C47029 * C20835) *
                C181) *
               C139598 +
           ((C47034 * C6226 + C139587 * C6229 + C47033 * C6227 +
             C47029 * C6230) *
                C139346 +
            (C47034 * C6164 + C139587 * C6170 + C47033 * C6165 +
             C47029 * C6171) *
                C181) *
               C47031) *
              C139463 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C1876 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139384) *
               C47031 +
           ((C47760 + C47761) * C1875 + (C47998 + C47999) * C139571 -
            (C51258 + C51259) * C1876 - (C51480 + C51481) * C139384) *
               C139598) *
              C139463 * C2565 +
          (((C51259 + C51258) * C1876 -
            ((C47999 + C47998) * C139571 + (C47761 + C47760) * C1875) +
            (C51481 + C51480) * C139384) *
               C47031 +
           ((C51260 + C51261) * C1876 -
            ((C49908 + C49909) * C139571 + (C49688 + C49689) * C1875) +
            (C51482 + C51483) * C139384) *
               C139598) *
              C139463 * C2566 +
          (((C49689 + C49688) * C1875 + (C49909 + C49908) * C139571 -
            (C51261 + C51260) * C1876 - (C51483 + C51482) * C139384) *
               C47031 +
           ((C50598 + C50599) * C1875 + (C50744 + C50745) * C139571 -
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C1876 -
            (C47034 * C18202 + C139587 * C18204 + C47033 * C18203 +
             C47029 * C18205) *
                C139384) *
               C139598) *
              C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C1876 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139384) *
               C47031 +
           ((C47760 + C47761) * C1875 + (C47998 + C47999) * C139571 -
            (C47034 * C3892 + C139587 * C3898 + C47033 * C3891 +
             C47029 * C3897) *
                C1876 -
            (C47034 * C4076 + C139587 * C4082 + C47033 * C4075 +
             C47029 * C4081) *
                C139384) *
               C139598) *
              C139463 * C139346 * C821 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C1876 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139571 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C1875) +
            (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
             C139587 * C1882) *
                C139384) *
               C47031 +
           ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
             C139587 * C3899) *
                C1876 -
            ((C48001 + C48000) * C139571 + (C47764 + C47765) * C1875) +
            (C47033 * C4076 + C47029 * C4082 + C47034 * C4077 +
             C139587 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C1875 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139571 -
            (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
             C47029 * C1703) *
                C1876 -
            (C47034 * C1880 + C139587 * C1885 + C47033 * C1877 +
             C47029 * C1882) *
                C139384) *
               C47031 +
           ((C47768 + C47769) * C1875 + (C48002 + C48003) * C139571 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C1876 -
            (C47034 * C8322 + C139587 * C8323 + C47033 * C4077 +
             C47029 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C6281 +
           (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
               C6159 -
           (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
            C47029 * C1708) *
               C6282 -
           (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
            C47029 * C1884) *
               C6160 +
           (C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
            C139587 * C4661) *
               C6283 +
           (C47033 * C4831 + C47029 * C4835 + C47034 * C4832 +
            C139587 * C4836) *
               C6161 -
           (C47034 * C6164 + C139587 * C6170 + C47033 * C6165 +
            C47029 * C6171) *
               C6284 -
           (C47034 * C6286 + C139587 * C6289 + C47033 * C6287 +
            C47029 * C6290) *
               C6162) *
              C47031 +
          ((C47760 + C47761) * C6281 + (C47998 + C47999) * C6159 -
           (C51258 + C51259) * C6282 - (C51480 + C51481) * C6160 +
           (C53084 + C53085) * C6283 + (C53294 + C53295) * C6161 -
           (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
            C47029 * C20835) *
               C6284 -
           (C47034 * C20974 + C139587 * C20976 + C47033 * C20975 +
            C47029 * C20977) *
               C6162) *
              C139598) *
         C139463 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C47029 +
            ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C49051 + C49050) * C139303 + (C49049 + C49048) * C3364) *
                C139463 * C139587 +
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139303 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C3364) *
                C139463 * C47029) *
               C139384) *
              C2565 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C47029 +
            ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
              C139598 * C4165) *
                 C3364 +
             (C47233 * C3901 + C47031 * C4168 + C47234 * C3904 +
              C139598 * C4171) *
                 C139303) *
                C139463 * C139587) *
               C139384 -
           (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) *
                C139463 * C139587 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C139463 * C47029) *
               C139571) *
              C2566 +
          ((((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C139463 * C47029 +
            ((C50019 + C50018) * C3364 + (C50021 + C50020) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C47234 * C17960 + C139598 * C18318 + C47233 * C3904 +
              C47031 * C4171) *
                 C139303 +
             (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
              C47031 * C4165) *
                 C3364) *
                C139463 * C139587 +
            ((C47234 * C17961 + C139598 * C18319 + C47233 * C3905 +
              C47031 * C4172) *
                 C139303 +
             (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
              C47031 * C4166) *
                 C3364) *
                C139463 * C47029) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C139463 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C822 +
            (C47269 + C47268) * C828 + (C47271 + C47270) * C823) *
               C139463 * C139587) *
              C139571 +
          (((C49048 + C49049) * C827 -
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C821 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C826) +
            (C49050 + C49051) * C822 - (C49052 + C49053) * C828 -
            (C49054 + C49055) * C823) *
               C139463 * C47029 +
           ((C49053 + C49052) * C827 -
            ((C49051 + C49050) * C821 + (C49049 + C49048) * C826) +
            (C49055 + C49054) * C822 -
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C828 -
            (C47234 * C8122 + C139598 * C8423 + C47233 * C1709 +
             C47031 * C1969) *
                C823) *
               C139463 * C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C3364 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139303) *
               C139463 * C47029 +
           ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) * C139463 *
               C139587) *
              C6159 -
          (((C49051 + C49050) * C139303 + (C49049 + C49048) * C3364) * C139463 *
               C139587 +
           ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
             C47031 * C1966) *
                C139303 +
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C3364) *
               C139463 * C47029) *
              C6160 +
          (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C3364 +
            (C47233 * C4663 + C47031 * C4917 + C47234 * C5474 +
             C139598 * C5720) *
                C139303) *
               C139463 * C47029 +
           ((C52473 + C52472) * C3364 + (C52475 + C52474) * C139303) * C139463 *
               C139587) *
              C6161 -
          (((C47234 * C20832 + C139598 * C21046 + C47233 * C6167 +
             C47031 * C6345) *
                C139303 +
            (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
             C47031 * C6342) *
                C3364) *
               C139463 * C139587 +
           ((C47234 * C20833 + C139598 * C21047 + C47233 * C6168 +
             C47031 * C6346) *
                C139303 +
            (C47234 * C20831 + C139598 * C21045 + C47233 * C6165 +
             C47031 * C6343) *
                C3364) *
               C139463 * C47029) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C47029 +
           ((C47261 + C47260) * C2660 + (C47350 + C47351) * C2565 -
            (C48119 + C48118) * C2661 - (C48232 + C48233) * C2566 +
            (C50019 + C50018) * C2662 + (C50124 + C50125) * C2567) *
               C139463 * C139587) *
              C139303 * C139571 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C2661 -
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C2565 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C2660) +
            (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
             C139598 * C4248) *
                C2566 -
            (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
             C47031 * C4166) *
                C2662 -
            (C47234 * C18089 + C139598 * C18418 + C47233 * C3994 +
             C47031 * C4248) *
                C2567) *
               C139463 * C47029 +
           ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
             C139598 * C4165) *
                C2661 -
            ((C49163 + C49162) * C2565 + (C49049 + C49048) * C2660) +
            (C47233 * C3990 + C47031 * C4249 + C47234 * C3993 +
             C139598 * C4250) *
                C2566 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C2662 -
            (C47234 * C18088 + C139598 * C18419 + C47233 * C3993 +
             C47031 * C4250) *
                C2567) *
               C139463 * C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
                C139587) *
               C821 -
           (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
                C139587 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
                C47029) *
               C822 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C139463 *
                C47029 +
            ((C47269 + C47268) * C181 + (C47354 + C47355) * C139346) * C139463 *
                C139587) *
               C823) *
              C139571 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C139463 *
                C47029 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139463 *
                C139587) *
               C822 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139463 *
                C139587 +
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139346 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C181) *
                C139463 * C47029) *
               C821 -
           (((C47234 * C8222 + C139598 * C8534 + C47233 * C1793 +
              C47031 * C2065) *
                 C139346 +
             (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
              C47031 * C1964) *
                 C181) *
                C139463 * C139587 +
            ((C49165 + C49164) * C139346 + (C49052 + C49053) * C181) * C139463 *
                C47029) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139346) *
               C139463 * C47029 +
           ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
               C139587) *
              C139303 * C6159 -
          (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139463 *
               C139587 +
           ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
             C47031 * C2066) *
                C139346 +
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C181) *
               C139463 * C47029) *
              C139303 * C6160 +
          (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C181 +
            (C47233 * C4746 + C47031 * C5007 + C47234 * C5557 +
             C139598 * C5795) *
                C139346) *
               C139463 * C47029 +
           ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) * C139463 *
               C139587) *
              C139303 * C6161 -
          (((C47234 * C20904 + C139598 * C21114 + C47233 * C6226 +
             C47031 * C6398) *
                C139346 +
            (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
             C47031 * C6342) *
                C181) *
               C139463 * C139587 +
           ((C47234 * C20905 + C139598 * C21115 + C47233 * C6227 +
             C47031 * C6399) *
                C139346 +
            (C47234 * C20831 + C139598 * C21045 + C47233 * C6165 +
             C47031 * C6343) *
                C181) *
               C139463 * C47029) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C1876 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139384) *
               C139463 * C47029 +
           ((C47261 + C47260) * C1875 + (C47434 + C47435) * C139571 -
            (C49049 + C49048) * C1876 - (C49272 + C49273) * C139384) *
               C139463 * C139587) *
              C2565 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C1876 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139571 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C1875) +
            (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
             C139598 * C4330) *
                C139384) *
               C139463 * C47029 +
           ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
             C139598 * C4165) *
                C1876 -
            ((C48342 + C48343) * C139571 + (C48119 + C48118) * C1875) +
            (C47233 * C4076 + C47031 * C4328 + C47234 * C4079 +
             C139598 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
             C47031 * C4166) *
                C1876 -
            (C47234 * C18203 + C139598 * C18518 + C47233 * C4080 +
             C47031 * C4330) *
                C139384) *
               C139463 * C47029 +
           ((C50019 + C50018) * C1875 + (C50228 + C50229) * C139571 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C1876 -
            (C47234 * C18202 + C139598 * C18519 + C47233 * C4079 +
             C47031 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C1876 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139384) *
               C139463 * C47029 +
           ((C47261 + C47260) * C1875 + (C47434 + C47435) * C139571 -
            (C49049 + C49048) * C1876 - (C49272 + C49273) * C139384) *
               C139463 * C139587) *
              C139346 * C821 +
          (((C49048 + C49049) * C1876 -
            ((C47435 + C47434) * C139571 + (C47260 + C47261) * C1875) +
            (C49273 + C49272) * C139384) *
               C139463 * C47029 +
           ((C49053 + C49052) * C1876 -
            ((C47436 + C47437) * C139571 + (C47265 + C47264) * C1875) +
            (C49274 + C49275) * C139384) *
               C139463 * C139587) *
              C139346 * C822 +
          (((C47264 + C47265) * C1875 + (C47437 + C47436) * C139571 -
            (C49052 + C49053) * C1876 - (C49275 + C49274) * C139384) *
               C139463 * C47029 +
           ((C47269 + C47268) * C1875 + (C47438 + C47439) * C139571 -
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C1876 -
            (C47234 * C8322 + C139598 * C8647 + C47233 * C1880 +
             C47031 * C2162) *
                C139384) *
               C139463 * C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C6281 +
           (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
               C6159 -
           (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
            C47031 * C1962) *
               C6282 -
           (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
            C47031 * C2159) *
               C6160 +
           (C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
            C139598 * C5717) *
               C6283 +
           (C47233 * C4831 + C47031 * C5095 + C47234 * C5637 +
            C139598 * C5872) *
               C6161 -
           (C47234 * C20831 + C139598 * C21045 + C47233 * C6165 +
            C47031 * C6343) *
               C6284 -
           (C47234 * C20975 + C139598 * C21182 + C47233 * C6287 +
            C47031 * C6450) *
               C6162) *
              C139463 * C47029 +
          ((C47261 + C47260) * C6281 + (C47434 + C47435) * C6159 -
           (C49049 + C49048) * C6282 - (C49272 + C49273) * C6160 +
           (C52473 + C52472) * C6283 + (C52682 + C52683) * C6161 -
           (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
            C47031 * C6342) *
               C6284 -
           (C47234 * C20974 + C139598 * C21183 + C47233 * C6286 +
            C47031 * C6451) *
               C6162) *
              C139463 * C139587) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (-std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C47029 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C47031 +
            ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
                C139598) *
               C139571 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C47029) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C47029) *
                C47031) *
               C139384) *
              C2565 +
          ((((C18644 + C18643) * C47029 + (C18624 + C18623) * C139587) *
                C47031 +
            ((C18645 + C18646) * C47029 + (C18647 + C18648) * C139587) *
                C139598) *
               C139384 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
                C47031) *
               C139571) *
              C2566 +
          ((((C17706 + C17705) * C47029 + (C17704 + C17703) * C139587) *
                C47031 +
            ((C17715 + C17716) * C47029 + (C17711 + C17712) * C139587) *
                C139598) *
               C139571 -
           ((((C554 * C17960 + C139463 * C18620) * C139303 +
              (C554 * C17958 + C139463 * C18618) * C3364) *
                 C139587 +
             ((C554 * C17961 + C139463 * C18621) * C139303 +
              (C554 * C17959 + C139463 * C18619) * C3364) *
                 C47029) *
                C139598 +
            ((C18648 + C18647) * C139587 + (C18646 + C18645) * C47029) *
                C47031) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C47031 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C47029 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139571 +
          (((C2286 * C827 -
             ((C554 * C1707 + C139463 * C2268) * C821 +
              (C554 * C1700 + C139463 * C2264) * C826) +
             C2287 * C822 - C2288 * C828 - C2289 * C823) *
                C47029 +
            (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
             C2290 * C828 - C2291 * C823) *
                C139587) *
               C47031 +
           ((C8771 * C827 - (C18637 * C821 + C18638 * C826) + C8772 * C822 -
             C8773 * C828 - C8774 * C823) *
                C47029 +
            (C8773 * C827 - (C8772 * C821 + C8771 * C826) + C8774 * C822 -
             (C554 * C8120 + C139463 * C8760) * C828 -
             (C554 * C8122 + C139463 * C8761) * C823) *
                C139587) *
               C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C47029 +
            (C584 * C3364 + C585 * C139303) * C139587) *
               C47031 +
           ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
               C139598) *
              C6159 -
          (((C18623 + C18624) * C139587 + (C18643 + C18644) * C47029) *
               C139598 +
           ((C2287 * C139303 + C2286 * C3364) * C139587 +
            ((C554 * C1707 + C139463 * C2268) * C139303 +
             (C554 * C1700 + C139463 * C2264) * C3364) *
                C47029) *
               C47031) *
              C6160 +
          ((((C554 * C4656 + C139463 * C5191) * C3364 +
             (C554 * C4663 + C139463 * C5195) * C139303) *
                C47029 +
            (C5208 * C3364 + C5209 * C139303) * C139587) *
               C47031 +
           ((C20551 + C20552) * C47029 + (C20547 + C20548) * C139587) *
               C139598) *
              C6161 -
          ((((C554 * C20832 + C139463 * C21252) * C139303 +
             (C554 * C20830 + C139463 * C21250) * C3364) *
                C139587 +
            ((C554 * C20833 + C139463 * C21253) * C139303 +
             (C554 * C20831 + C139463 * C21251) * C3364) *
                C47029) *
               C139598 +
           (((C554 * C6167 + C139463 * C6507) * C139303 +
             (C554 * C6164 + C139463 * C6504) * C3364) *
                C139587 +
            ((C554 * C6168 + C139463 * C6508) * C139303 +
             (C554 * C6165 + C139463 * C6505) * C3364) *
                C47029) *
               C47031) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C47029 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C47031 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             C17713 * C2662 + C17787 * C2567) *
                C47029 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139303 * C139571 +
          (((C18638 * C2661 -
             ((C554 * C1794 + C139463 * C2368) * C2565 +
              (C554 * C1700 + C139463 * C2264) * C2660) +
             C18755 * C2566 - C18639 * C2662 - C18756 * C2567) *
                C47029 +
            (C8771 * C2661 - (C2380 * C2565 + C2286 * C2660) + C8884 * C2566 -
             C18641 * C2662 - C18757 * C2567) *
                C139587) *
               C47031 +
           ((C18639 * C2661 - (C18755 * C2565 + C18638 * C2660) +
             C18756 * C2566 - (C554 * C17959 + C139463 * C18619) * C2662 -
             (C554 * C18089 + C139463 * C18746) * C2567) *
                C47029 +
            (C18641 * C2661 - (C8884 * C2565 + C8771 * C2660) + C18757 * C2566 -
             (C554 * C17958 + C139463 * C18618) * C2662 -
             (C554 * C18088 + C139463 * C18747) * C2567) *
                C139587) *
               C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C47029 +
             (C648 + C664) * C139587) *
                C47031 +
            ((C15026 * C181 + C15138 * C139346) * C47029 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C821 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
               C822 +
           ((C668 * C47029 + (C656 + C666) * C139587) * C47031 +
            ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139587) *
                C139598) *
               C823) *
              C139571 +
          ((((C2371 + C2383) * C47029 + (C2374 + C2384) * C139587) * C47031 +
            ((C16077 + C16078) * C47029 + (C16079 + C16080) * C139587) *
                C139598) *
               C822 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C47029) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C47029) *
                C47031) *
               C821 -
           ((((C554 * C8222 + C139463 * C8872) * C139346 +
              (C554 * C8120 + C139463 * C8760) * C181) *
                 C139587 +
             (C16080 + C16079) * C47029) *
                C139598 +
            ((C2385 + C2377) * C139587 + C2386 * C47029) * C47031) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C47029 +
            (C648 + C664) * C139587) *
               C47031 +
           ((C15026 * C181 + C15138 * C139346) * C47029 +
            (C14134 + C14135) * C139587) *
               C139598) *
              C139303 * C6159 -
          (((C16078 + C16077) * C139587 +
            (C18755 * C139346 + C18638 * C181) * C47029) *
               C139598 +
           ((C2383 + C2371) * C139587 +
            ((C554 * C1794 + C139463 * C2368) * C139346 +
             (C554 * C1700 + C139463 * C2264) * C181) *
                C47029) *
               C47031) *
              C139303 * C6160 +
          ((((C554 * C4656 + C139463 * C5191) * C181 +
             (C554 * C4746 + C139463 * C5285) * C139346) *
                C47029 +
            (C5290 + C5298) * C139587) *
               C47031 +
           ((C20549 * C181 + C20655 * C139346) * C47029 +
            (C19693 + C19697) * C139587) *
               C139598) *
              C139303 * C6161 -
          ((((C554 * C20904 + C139463 * C21320) * C139346 +
             (C554 * C20830 + C139463 * C21250) * C181) *
                C139587 +
            ((C554 * C20905 + C139463 * C21321) * C139346 +
             (C554 * C20831 + C139463 * C21251) * C181) *
                C47029) *
               C139598 +
           (((C554 * C6226 + C139463 * C6560) * C139346 +
             (C554 * C6164 + C139463 * C6504) * C181) *
                C139587 +
            ((C554 * C6227 + C139463 * C6561) * C139346 +
             (C554 * C6165 + C139463 * C6505) * C181) *
                C47029) *
               C47031) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C47029 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C47031 +
           ((C18858 + C18859 - C18860 - C18876) * C47029 + C24431 * C139587) *
               C139598) *
              C2565 +
          (((C18860 - (C18859 + C18858) + C18876) * C47029 + C24432 * C139587) *
               C47031 +
           ((C18863 - (C18864 + C18865) + C18877) * C47029 +
            (C18868 - (C18869 + C18870) + C18878) * C139587) *
               C139598) *
              C2566 +
          (((C18865 + C18864 - C18863 - C18877) * C47029 +
            (C18870 + C18869 - C18868 - C18878) * C139587) *
               C47031 +
           ((C17713 * C1875 + C17859 * C139571 -
             (C554 * C17959 + C139463 * C18619) * C1876 -
             (C554 * C18203 + C139463 * C18855) * C139384) *
                C47029 +
            (C16961 * C1875 + C17182 * C139571 -
             (C554 * C17958 + C139463 * C18618) * C1876 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139587) *
               C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C47029 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C47031 +
           ((C18858 + C18859 - C18860 - C18876) * C47029 + C24431 * C139587) *
               C139598) *
              C139346 * C821 +
          (((C2468 - (C2467 + C2466) + C2485) * C47029 +
            (C2473 - (C2472 + C2471) + C2487) * C139587) *
               C47031 +
           (C24432 * C47029 + (C8992 - (C8993 + C8994) + C9000) * C139587) *
               C139598) *
              C139346 * C822 +
          ((C2489 * C47029 + (C2478 + C2477 - C2476 - C2488) * C139587) *
               C47031 +
           ((C8994 + C8993 - C8992 - C9000) * C47029 +
            (C1422 * C1875 + C1617 * C139571 -
             (C554 * C8120 + C139463 * C8760) * C1876 -
             (C554 * C8322 + C139463 * C8985) * C139384) *
                C139587) *
               C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C6281 +
            (C554 * C245 + C139463 * C719) * C6159 -
            (C554 * C1700 + C139463 * C2264) * C6282 -
            (C554 * C1879 + C139463 * C2460) * C6160 +
            (C554 * C4656 + C139463 * C5191) * C6283 +
            (C554 * C4831 + C139463 * C5373) * C6161 -
            (C554 * C6165 + C139463 * C6505) * C6284 -
            (C554 * C6287 + C139463 * C6612) * C6162) *
               C47029 +
           (C584 * C6281 + C738 * C6159 - C2286 * C6282 - C2481 * C6160 +
            C5208 * C6283 + C5392 * C6161 -
            (C554 * C6164 + C139463 * C6504) * C6284 -
            (C554 * C6286 + C139463 * C6613) * C6162) *
               C139587) *
              C47031 +
          ((C15026 * C6281 + C15243 * C6159 - C18638 * C6282 - C18873 * C6160 +
            C20549 * C6283 + C20763 * C6161 -
            (C554 * C20831 + C139463 * C21251) * C6284 -
            (C554 * C20975 + C139463 * C21388) * C6162) *
               C47029 +
           (C1418 * C6281 + C1616 * C6159 - C8771 * C6282 - C8997 * C6160 +
            C19593 * C6283 + C19803 * C6161 -
            (C554 * C20830 + C139463 * C21250) * C6284 -
            (C554 * C20974 + C139463 * C21389) * C6162) *
               C139587) *
              C139598) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6694 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139601 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C6695 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C6696 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C6691) *
               C47031 +
           ((C47760 + C47761) * C6694 + (C47762 + C47763) * C139601 -
            (C47764 + C47765) * C6695 - (C47766 + C47767) * C139590 +
            (C47768 + C47769) * C6696 + (C47770 + C47771) * C6691) *
               C139598) *
              C139463 * C9074 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C6695 -
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139601 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C6694) +
            (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
             C139587 * C1712) *
                C139590 -
            (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
             C47029 * C1703) *
                C6696 -
            (C47034 * C1709 + C139587 * C1715 + C47033 * C1705 +
             C47029 * C1712) *
                C6691) *
               C47031 +
           ((C56380 + C56381) * C6695 -
            ((C51256 + C51257) * C139601 + (C51258 + C51259) * C6694) +
            (C56382 + C56383) * C139590 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C6696 -
            (C47034 * C8122 + C139587 * C8123 + C47033 * C3902 +
             C47029 * C3911) *
                C6691) *
               C139598) *
              C139463 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C47031 +
            ((C47760 + C47761) * C181 + (C47883 + C47882) * C139346) *
                C139598) *
               C139463 * C139601 -
           (((C47885 + C47884) * C139346 + (C47764 + C47765) * C181) * C139598 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139463 * C139590 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                 C139346) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47887 + C47886) * C139346) *
                C139598) *
               C139463 * C6691) *
              C9074 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C47031 +
            ((C56380 + C56381) * C181 + (C56519 + C56518) * C139346) *
                C139598) *
               C139463 * C139590 -
           (((C51371 + C51370) * C139346 + (C51258 + C51259) * C181) * C139598 +
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139346 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C181) *
                C47031) *
               C139463 * C139601 -
           (((C47034 * C8222 + C139587 * C8223 + C47033 * C3991 +
              C47029 * C3997) *
                 C139346 +
             (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
              C47029 * C3899) *
                 C181) *
                C139598 +
            ((C47034 * C1793 + C139587 * C1798 + C47033 * C1792 +
              C47029 * C1797) *
                 C139346 +
             (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
              C47029 * C1703) *
                 C181) *
                C47031) *
               C139463 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C9224 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C9074 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C9225 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139384) *
               C47031 +
           ((C47760 + C47761) * C9224 + (C47998 + C47999) * C9074 -
            (C51258 + C51259) * C9225 - (C51480 + C51481) * C139384) *
               C139598) *
              C139463 * C139346 * C139601 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C9225 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C9074 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C9224) +
            (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
             C139587 * C1882) *
                C139384) *
               C47031 +
           ((C56380 + C56381) * C9225 -
            ((C48001 + C48000) * C9074 + (C47764 + C47765) * C9224) +
            (C56654 + C56655) * C139384) *
               C139598) *
              C139463 * C139346 * C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C9224 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C9074 -
            (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
             C47029 * C1703) *
                C9225 -
            (C47034 * C1880 + C139587 * C1885 + C47033 * C1877 +
             C47029 * C1882) *
                C139384) *
               C47031 +
           ((C47768 + C47769) * C9224 + (C48002 + C48003) * C9074 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C9225 -
            (C47034 * C8322 + C139587 * C8323 + C47033 * C4077 +
             C47029 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6694 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139601 -
            (C47260 + C47261) * C6695 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C6696 + (C47266 + C47267) * C6691) *
               C139463 * C47029 +
           ((C47261 + C47260) * C6694 + (C47263 + C47262) * C139601 -
            (C47265 + C47264) * C6695 - (C47267 + C47266) * C139590 +
            (C47269 + C47268) * C6696 + (C47271 + C47270) * C6691) *
               C139463 * C139587) *
              C9074 +
          (((C49048 + C49049) * C6695 -
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139601 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C6694) +
            (C49050 + C49051) * C139590 - (C49052 + C49053) * C6696 -
            (C49054 + C49055) * C6691) *
               C139463 * C47029 +
           ((C49053 + C49052) * C6695 -
            ((C49051 + C49050) * C139601 + (C49049 + C49048) * C6694) +
            (C49055 + C49054) * C139590 -
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C6696 -
            (C47234 * C8122 + C139598 * C8423 + C47233 * C1709 +
             C47031 * C1969) *
                C6691) *
               C139463 * C139587) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
                C139587) *
               C139601 -
           (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
                C139587 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
                C47029) *
               C139590 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C139463 *
                C47029 +
            ((C47269 + C47268) * C181 + (C47354 + C47355) * C139346) * C139463 *
                C139587) *
               C6691) *
              C9074 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C139463 *
                C47029 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139463 *
                C139587) *
               C139590 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139463 *
                C139587 +
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139346 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C181) *
                C139463 * C47029) *
               C139601 -
           (((C47234 * C8222 + C139598 * C8534 + C47233 * C1793 +
              C47031 * C2065) *
                 C139346 +
             (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
              C47031 * C1964) *
                 C181) *
                C139463 * C139587 +
            ((C49165 + C49164) * C139346 + (C49052 + C49053) * C181) * C139463 *
                C47029) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C9224 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C9074 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C9225 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139384) *
               C139463 * C47029 +
           ((C47261 + C47260) * C9224 + (C47434 + C47435) * C9074 -
            (C49049 + C49048) * C9225 - (C49272 + C49273) * C139384) *
               C139463 * C139587) *
              C139346 * C139601 +
          (((C49048 + C49049) * C9225 -
            ((C47435 + C47434) * C9074 + (C47260 + C47261) * C9224) +
            (C49273 + C49272) * C139384) *
               C139463 * C47029 +
           ((C49053 + C49052) * C9225 -
            ((C47436 + C47437) * C9074 + (C47265 + C47264) * C9224) +
            (C49274 + C49275) * C139384) *
               C139463 * C139587) *
              C139346 * C139590 +
          (((C47264 + C47265) * C9224 + (C47437 + C47436) * C9074 -
            (C49052 + C49053) * C9225 - (C49275 + C49274) * C139384) *
               C139463 * C47029 +
           ((C47269 + C47268) * C9224 + (C47438 + C47439) * C9074 -
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C9225 -
            (C47234 * C8322 + C139598 * C8647 + C47233 * C1880 +
             C47031 * C2162) *
                C139384) *
               C139463 * C139587) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C6694 +
             (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
             C585 * C139590 + C586 * C6696 + C587 * C6691) *
                C47029 +
            (C584 * C6694 + C585 * C139601 - C586 * C6695 - C587 * C139590 +
             C588 * C6696 + C589 * C6691) *
                C139587) *
               C47031 +
           ((C22077 + C22078 - C22079 - C22080 + C22081 + C22082) * C47029 +
            (C22083 + C22084 - C22085 - C22086 + C22087 + C22088) * C139587) *
               C139598) *
              C9074 +
          (((C2286 * C6695 -
             ((C554 * C1707 + C139463 * C2268) * C139601 +
              (C554 * C1700 + C139463 * C2264) * C6694) +
             C2287 * C139590 - C2288 * C6696 - C2289 * C6691) *
                C47029 +
            (C2288 * C6695 - (C2287 * C139601 + C2286 * C6694) +
             C2289 * C139590 - C2290 * C6696 - C2291 * C6691) *
                C139587) *
               C47031 +
           ((C8771 * C6695 - (C18637 * C139601 + C18638 * C6694) +
             C8772 * C139590 - C8773 * C6696 - C8774 * C6691) *
                C47029 +
            (C8773 * C6695 - (C8772 * C139601 + C8771 * C6694) +
             C8774 * C139590 - (C554 * C8120 + C139463 * C8760) * C6696 -
             (C554 * C8122 + C139463 * C8761) * C6691) *
                C139587) *
               C139598) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C47029 +
             (C648 + C664) * C139587) *
                C47031 +
            ((C15026 * C181 + C15138 * C139346) * C47029 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C139601 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
               C139590 +
           ((C668 * C47029 + (C656 + C666) * C139587) * C47031 +
            ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139587) *
                C139598) *
               C6691) *
              C9074 +
          ((((C2371 + C2383) * C47029 + (C2374 + C2384) * C139587) * C47031 +
            ((C16077 + C16078) * C47029 + (C16079 + C16080) * C139587) *
                C139598) *
               C139590 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C47029) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C47029) *
                C47031) *
               C139601 -
           ((((C554 * C8222 + C139463 * C8872) * C139346 +
              (C554 * C8120 + C139463 * C8760) * C181) *
                 C139587 +
             (C16080 + C16079) * C47029) *
                C139598 +
            ((C2385 + C2377) * C139587 + C2386 * C47029) * C47031) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C9224 +
             (C554 * C245 + C139463 * C719) * C9074 -
             (C554 * C1700 + C139463 * C2264) * C9225 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C47029 +
            (C9687 + C9688 - C9689 - C9690) * C139587) *
               C47031 +
           ((C26489 + C26490 - C26491 - C26492) * C47029 + C26501 * C139587) *
               C139598) *
              C139346 * C139601 +
          (((C9689 - (C9688 + C9687) + C9690) * C47029 +
            (C9693 - (C9692 + C9691) + C9694) * C139587) *
               C47031 +
           (C26502 * C47029 + (C10612 - (C10613 + C10614) + C10615) * C139587) *
               C139598) *
              C139346 * C139590 +
          ((C9701 * C47029 + (C9697 + C9696 - C9695 - C9698) * C139587) *
               C47031 +
           ((C10614 + C10613 - C10612 - C10615) * C47029 +
            (C1422 * C9224 + C1617 * C9074 -
             (C554 * C8120 + C139463 * C8760) * C9225 -
             (C554 * C8322 + C139463 * C8985) * C139384) *
                C139587) *
               C139598) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C7401 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C7396 -
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C7402 -
             (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                 C139308) *
                C47031 +
            ((C47760 + C47761) * C7401 + (C47762 + C47763) * C7396 -
             (C47764 + C47765) * C7402 - (C47766 + C47767) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C7402 -
             ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
               C47029 * C1714) *
                  C7396 +
              (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
               C47029 * C1708) *
                  C7401) +
             (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
              C139587 * C1712) *
                 C139308) *
                C47031 +
            ((C56380 + C56381) * C7402 -
             ((C51256 + C51257) * C7396 + (C51258 + C51259) * C7401) +
             (C56382 + C56383) * C139308) *
                C139598) *
               C139463 * C139384) *
              C139570 +
          ((((C47765 + C47764) * C7402 -
             ((C47763 + C47762) * C7396 + (C47761 + C47760) * C7401) +
             (C47767 + C47766) * C139308) *
                C47031 +
            ((C49684 + C49685) * C7402 -
             ((C49686 + C49687) * C7396 + (C49688 + C49689) * C7401) +
             (C49690 + C49691) * C139308) *
                C139598) *
               C139463 * C9074 +
           (((C51259 + C51258) * C7401 + (C51257 + C51256) * C7396 -
             (C56381 + C56380) * C7402 - (C56383 + C56382) * C139308) *
                C47031 +
            ((C51260 + C51261) * C7401 + (C51262 + C51263) * C7396 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C7402 -
             (C47034 * C3903 + C139587 * C3912 + C47033 * C3904 +
              C47029 * C3913) *
                 C139308) *
                C139598) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C923 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139570 -
             (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
                C47031 +
            ((C47760 + C47761) * C923 + (C47883 + C47882) * C139570 -
             (C49688 + C49689) * C924 - (C49799 + C49798) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C47765 + C47764) * C924 -
             ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                  C139570 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C923) +
             (C47884 + C47885) * C139360) *
                C47031 +
            ((C49684 + C49685) * C924 -
             ((C47885 + C47884) * C139570 + (C47764 + C47765) * C923) +
             (C49801 + C49800) * C139360) *
                C139598) *
               C139463 * C139308) *
              C9074 +
          ((((C51259 + C51258) * C924 -
             ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
               C47029 * C1799) *
                  C139570 +
              (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
               C47029 * C1708) *
                  C923) +
             (C51370 + C51371) * C139360) *
                C47031 +
            ((C51260 + C51261) * C924 -
             ((C51371 + C51370) * C139570 + (C51258 + C51259) * C923) +
             (C51373 + C51372) * C139360) *
                C139598) *
               C139463 * C7396 +
           (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C923 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C139570 -
             (C56381 + C56380) * C924 - (C56518 + C56519) * C139360) *
                C47031 +
            ((C56380 + C56381) * C923 + (C56519 + C56518) * C139570 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C924 -
             (C47034 * C3992 + C139587 * C3998 + C47033 * C3993 +
              C47029 * C3999) *
                 C139360) *
                C139598) *
               C139463 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C9224 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C9074 -
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C9225 -
             (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
              C47029 * C1884) *
                 C139384) *
                C47031 +
            ((C47760 + C47761) * C9224 + (C47998 + C47999) * C9074 -
             (C51258 + C51259) * C9225 - (C51480 + C51481) * C139384) *
                C139598) *
               C139463 * C139570 +
           (((C51259 + C51258) * C9225 -
             ((C47999 + C47998) * C9074 + (C47761 + C47760) * C9224) +
             (C51481 + C51480) * C139384) *
                C47031 +
            ((C51260 + C51261) * C9225 -
             ((C49908 + C49909) * C9074 + (C49688 + C49689) * C9224) +
             (C51482 + C51483) * C139384) *
                C139598) *
               C139463 * C139360) *
              C7396 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C9225 -
             ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                  C9074 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C9224) +
             (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
              C139587 * C1882) *
                 C139384) *
                C47031 +
            ((C56380 + C56381) * C9225 -
             ((C48001 + C48000) * C9074 + (C47764 + C47765) * C9224) +
             (C56654 + C56655) * C139384) *
                C139598) *
               C139463 * C139570 +
           (((C47765 + C47764) * C9224 + (C48000 + C48001) * C9074 -
             (C56381 + C56380) * C9225 - (C56655 + C56654) * C139384) *
                C47031 +
            ((C49684 + C49685) * C9224 + (C49910 + C49911) * C9074 -
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C9225 -
             (C47034 * C4078 + C139587 * C4084 + C47033 * C4079 +
              C47029 * C4085) *
                 C139384) *
                C139598) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C7401 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C7396 -
             (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
                C139463 * C47029 +
            ((C47261 + C47260) * C7401 + (C47263 + C47262) * C7396 -
             (C47265 + C47264) * C7402 - (C47267 + C47266) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C49048 + C49049) * C7402 -
             ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
               C47031 * C1966) *
                  C7396 +
              (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
               C47031 * C1962) *
                  C7401) +
             (C49050 + C49051) * C139308) *
                C139463 * C47029 +
            ((C49053 + C49052) * C7402 -
             ((C49051 + C49050) * C7396 + (C49049 + C49048) * C7401) +
             (C49055 + C49054) * C139308) *
                C139463 * C139587) *
               C139384) *
              C139570 +
          ((((C48118 + C48119) * C7402 -
             ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
               C47031 * C1098) *
                  C7396 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C7401) +
             (C48120 + C48121) * C139308) *
                C139463 * C47029 +
            ((C48123 + C48122) * C7402 -
             ((C48121 + C48120) * C7396 + (C48119 + C48118) * C7401) +
             (C48125 + C48124) * C139308) *
                C139463 * C139587) *
               C9074 +
           (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C7401 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C7396 -
             (C56794 + C56795) * C7402 - (C56796 + C56797) * C139308) *
                C139463 * C47029 +
            ((C56795 + C56794) * C7401 + (C56797 + C56796) * C7396 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C7402 -
             (C47234 * C3903 + C139598 * C4170 + C47233 * C3902 +
              C47031 * C4169) *
                 C139308) *
                C139463 * C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C923 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139570 -
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C924 -
             (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
              C47031 * C1195) *
                 C139360) *
                C139463 * C47029 +
            ((C47261 + C47260) * C923 + (C47350 + C47351) * C139570 -
             (C48119 + C48118) * C924 - (C48232 + C48233) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C48118 + C48119) * C924 -
             ((C47351 + C47350) * C139570 + (C47260 + C47261) * C923) +
             (C48233 + C48232) * C139360) *
                C139463 * C47029 +
            ((C48123 + C48122) * C924 -
             ((C47352 + C47353) * C139570 + (C47265 + C47264) * C923) +
             (C48234 + C48235) * C139360) *
                C139463 * C139587) *
               C139308) *
              C9074 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C924 -
             ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
               C47031 * C2066) *
                  C139570 +
              (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
               C47031 * C1962) *
                  C923) +
             (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
              C139598 * C4248) *
                 C139360) *
                C139463 * C47029 +
            ((C56795 + C56794) * C924 -
             ((C49163 + C49162) * C139570 + (C49049 + C49048) * C923) +
             (C56932 + C56933) * C139360) *
                C139463 * C139587) *
               C7396 +
           (((C49048 + C49049) * C923 + (C49162 + C49163) * C139570 -
             (C56794 + C56795) * C924 - (C56933 + C56932) * C139360) *
                C139463 * C47029 +
            ((C49053 + C49052) * C923 + (C49164 + C49165) * C139570 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C924 -
             (C47234 * C3992 + C139598 * C4252 + C47233 * C3991 +
              C47031 * C4251) *
                 C139360) *
                C139463 * C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C9224 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C9225 -
             (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
              C47031 * C2159) *
                 C139384) *
                C139463 * C47029 +
            ((C47261 + C47260) * C9224 + (C47434 + C47435) * C9074 -
             (C49049 + C49048) * C9225 - (C49272 + C49273) * C139384) *
                C139463 * C139587) *
               C139570 +
           (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C9225 -
             ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
               C47031 * C1301) *
                  C9074 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C9224) +
             (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
              C139598 * C4330) *
                 C139384) *
                C139463 * C47029 +
            ((C56795 + C56794) * C9225 -
             ((C48342 + C48343) * C9074 + (C48119 + C48118) * C9224) +
             (C57068 + C57069) * C139384) *
                C139463 * C139587) *
               C139360) *
              C7396 +
          ((((C49048 + C49049) * C9225 -
             ((C47435 + C47434) * C9074 + (C47260 + C47261) * C9224) +
             (C49273 + C49272) * C139384) *
                C139463 * C47029 +
            ((C49053 + C49052) * C9225 -
             ((C47436 + C47437) * C9074 + (C47265 + C47264) * C9224) +
             (C49274 + C49275) * C139384) *
                C139463 * C139587) *
               C139570 +
           (((C48118 + C48119) * C9224 + (C48343 + C48342) * C9074 -
             (C56794 + C56795) * C9225 - (C57069 + C57068) * C139384) *
                C139463 * C47029 +
            ((C48123 + C48122) * C9224 + (C48344 + C48345) * C9074 -
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C9225 -
             (C47234 * C4078 + C139598 * C4332 + C47233 * C4077 +
              C47031 * C4329) *
                 C139384) *
                C139463 * C139587) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C7401 +
              (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
              C585 * C139308) *
                 C47029 +
             (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                 C139587) *
                C47031 +
            ((C22979 + C22980 - C22981 - C22982) * C47029 +
             (C22983 + C22984 - C22985 - C22986) * C139587) *
                C139598) *
               C9074 +
           (((C2286 * C7402 -
              ((C554 * C1707 + C139463 * C2268) * C7396 +
               (C554 * C1700 + C139463 * C2264) * C7401) +
              C2287 * C139308) *
                 C47029 +
             (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
              C2289 * C139308) *
                 C139587) *
                C47031 +
            ((C24155 - (C24156 + C24157) + C24158) * C47029 +
             (C24159 - (C24160 + C24161) + C24162) * C139587) *
                C139598) *
               C139384) *
              C139570 +
          ((((C22981 - (C22980 + C22979) + C22982) * C47029 +
             (C22985 - (C22984 + C22983) + C22986) * C139587) *
                C47031 +
            ((C22987 - (C22988 + C22989) + C22990) * C47029 +
             (C22991 - (C22992 + C22993) + C22994) * C139587) *
                C139598) *
               C9074 +
           (((C24157 + C24156 - C24155 - C24158) * C47029 +
             (C24161 + C24160 - C24159 - C24162) * C139587) *
                C47031 +
            ((C18639 * C7401 + C18640 * C7396 - C18641 * C7402 -
              C18642 * C139308) *
                 C47029 +
             (C18641 * C7401 + C18642 * C7396 -
              (C554 * C3894 + C139463 * C4410) * C7402 -
              (C554 * C3903 + C139463 * C4416) * C139308) *
                 C139587) *
                C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C139463 * C555) * C923 +
                        (C554 * C182 + C139463 * C641) * C139570 -
                        C15026 * C924 - C15138 * C139360) *
                           C47029 +
                       (C1503 + C1504 - C1505 - C1522) * C139587) *
                          C47031 +
                      ((C15026 * C923 + C15138 * C139570 - C16960 * C924 -
                        C17072 * C139360) *
                           C47029 +
                       (C15130 + C15131 - C15132 - C15133) * C139587) *
                          C139598) *
                         C7396 +
                     (((C1505 - (C1504 + C1503) + C1522) * C47029 +
                       (C1510 - (C1509 + C1508) + C1524) * C139587) *
                          C47031 +
                      ((C15132 - (C15131 + C15130) + C15133) * C47029 +
                       (C15134 - (C15135 + C15136) + C15137) * C139587) *
                          C139598) *
                         C139308) *
                        C9074 +
                    ((((C18638 * C924 -
                        ((C554 * C1794 + C139463 * C2368) * C139570 +
                         (C554 * C1700 + C139463 * C2264) * C923) +
                        C18755 * C139360) *
                           C47029 +
                       (C10502 - (C10503 + C10504) + C10505) * C139587) *
                          C47031 +
                      ((C18639 * C924 - (C18755 * C139570 + C18638 * C923) +
                        C18756 * C139360) *
                           C47029 +
                       (C26355 - (C26356 + C26357) + C26358) * C139587) *
                          C139598) *
                         C7396 +
                     (((C10504 + C10503 - C10502 - C10505) * C47029 +
                       (C10508 + C10507 - C10506 - C10509) * C139587) *
                          C47031 +
                      ((C26357 + C26356 - C26355 - C26358) * C47029 +
                       (C8773 * C923 + C8885 * C139570 -
                        (C554 * C3894 + C139463 * C4410) * C924 -
                        (C554 * C3992 + C139463 * C4498) * C139360) *
                           C139587) *
                          C139598) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C9224 +
              (C554 * C245 + C139463 * C719) * C9074 -
              (C554 * C1700 + C139463 * C2264) * C9225 -
              (C554 * C1879 + C139463 * C2460) * C139384) *
                 C47029 +
             (C9687 + C9688 - C9689 - C9690) * C139587) *
                C47031 +
            ((C26489 + C26490 - C26491 - C26492) * C47029 + C26501 * C139587) *
                C139598) *
               C139570 +
           (((C26491 - (C26490 + C26489) + C26492) * C47029 +
             C26502 * C139587) *
                C47031 +
            ((C29451 - (C29452 + C29453) + C29454) * C47029 +
             (C26495 - (C26496 + C26497) + C26498) * C139587) *
                C139598) *
               C139360) *
              C7396 +
          ((((C9689 - (C9688 + C9687) + C9690) * C47029 +
             (C9693 - (C9692 + C9691) + C9694) * C139587) *
                C47031 +
            (C26502 * C47029 +
             (C10612 - (C10613 + C10614) + C10615) * C139587) *
                C139598) *
               C139570 +
           ((C26501 * C47029 + (C10614 + C10613 - C10612 - C10615) * C139587) *
                C47031 +
            ((C26497 + C26496 - C26495 - C26498) * C47029 +
             (C3124 * C9224 + C3307 * C9074 -
              (C554 * C3894 + C139463 * C4410) * C9225 -
              (C554 * C4078 + C139463 * C4578) * C139384) *
                 C139587) *
                C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7401 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C7396 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C7402 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C47031 +
           ((C47760 + C47761) * C7401 + (C47762 + C47763) * C7396 -
            (C47764 + C47765) * C7402 - (C47766 + C47767) * C139308) *
               C139598) *
              C139463 * C139603 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C7402 -
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C7396 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C7401) +
            (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
             C139587 * C1712) *
                C139308) *
               C47031 +
           ((C56380 + C56381) * C7402 -
            ((C51256 + C51257) * C7396 + (C51258 + C51259) * C7401) +
            (C56382 + C56383) * C139308) *
               C139598) *
              C139463 * C139596 +
          (((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C7401 +
            (C47033 * C4663 + C47029 * C4668 + C47034 * C4664 +
             C139587 * C4669) *
                C7396 -
            (C47034 * C4658 + C139587 * C4662 + C47033 * C4657 +
             C47029 * C4661) *
                C7402 -
            (C47034 * C4665 + C139587 * C4670 + C47033 * C4664 +
             C47029 * C4669) *
                C139308) *
               C47031 +
           ((C53084 + C53085) * C7401 + (C53086 + C53087) * C7396 -
            (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
             C47029 * C5476) *
                C7402 -
            (C47034 * C5472 + C139587 * C5478 + C47033 * C5473 +
             C47029 * C5479) *
                C139308) *
               C139598) *
              C139463 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C47031 +
            ((C47760 + C47761) * C181 + (C47883 + C47882) * C139346) *
                C139598) *
               C139463 * C7396 -
           (((C47885 + C47884) * C139346 + (C47764 + C47765) * C181) * C139598 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139463 * C139308) *
              C139603 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C47031 +
            ((C56380 + C56381) * C181 + (C56519 + C56518) * C139346) *
                C139598) *
               C139463 * C139308 -
           (((C51371 + C51370) * C139346 + (C51258 + C51259) * C181) * C139598 +
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139346 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C181) *
                C47031) *
               C139463 * C7396) *
              C139596 +
          ((((C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
              C139587 * C4661) *
                 C181 +
             (C47033 * C4746 + C47029 * C4750 + C47034 * C4747 +
              C139587 * C4751) *
                 C139346) *
                C47031 +
            ((C53084 + C53085) * C181 + (C53191 + C53190) * C139346) *
                C139598) *
               C139463 * C7396 -
           (((C47034 * C5555 + C139587 * C5558 + C47033 * C5556 +
              C47029 * C5559) *
                 C139346 +
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C181) *
                C139598 +
            ((C47034 * C4748 + C139587 * C4752 + C47033 * C4747 +
              C47029 * C4751) *
                 C139346 +
             (C47034 * C4658 + C139587 * C4662 + C47033 * C4657 +
              C47029 * C4661) *
                 C181) *
                C47031) *
               C139463 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C10840 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139603 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C10841 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139596 +
            (C47033 * C4656 + C47029 * C4660 + C47034 * C4657 +
             C139587 * C4661) *
                C10842 +
            (C47033 * C4831 + C47029 * C4835 + C47034 * C4832 +
             C139587 * C4836) *
                C10691) *
               C47031 +
           ((C47760 + C47761) * C10840 + (C47998 + C47999) * C139603 -
            (C51258 + C51259) * C10841 - (C51480 + C51481) * C139596 +
            (C53084 + C53085) * C10842 + (C53294 + C53295) * C10691) *
               C139598) *
              C139463 * C139346 * C7396 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C10841 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139603 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C10840) +
            (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
             C139587 * C1882) *
                C139596 -
            (C47034 * C4658 + C139587 * C4662 + C47033 * C4657 +
             C47029 * C4661) *
                C10842 -
            (C47034 * C4833 + C139587 * C4837 + C47033 * C4832 +
             C47029 * C4836) *
                C10691) *
               C47031 +
           ((C56380 + C56381) * C10841 -
            ((C48001 + C48000) * C139603 + (C47764 + C47765) * C10840) +
            (C56654 + C56655) * C139596 -
            (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
             C47029 * C5476) *
                C10842 -
            (C47034 * C5635 + C139587 * C5638 + C47033 * C5636 +
             C47029 * C5639) *
                C10691) *
               C139598) *
              C139463 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7401 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C7396 -
            (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
               C139463 * C47029 +
           ((C47261 + C47260) * C7401 + (C47263 + C47262) * C7396 -
            (C47265 + C47264) * C7402 - (C47267 + C47266) * C139308) *
               C139463 * C139587) *
              C139603 +
          (((C49048 + C49049) * C7402 -
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C7396 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C7401) +
            (C49050 + C49051) * C139308) *
               C139463 * C47029 +
           ((C49053 + C49052) * C7402 -
            ((C49051 + C49050) * C7396 + (C49049 + C49048) * C7401) +
            (C49055 + C49054) * C139308) *
               C139463 * C139587) *
              C139596 +
          (((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C7401 +
            (C47233 * C4663 + C47031 * C4917 + C47234 * C5474 +
             C139598 * C5720) *
                C7396 -
            (C52472 + C52473) * C7402 - (C52474 + C52475) * C139308) *
               C139463 * C47029 +
           ((C52473 + C52472) * C7401 + (C52475 + C52474) * C7396 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C7402 -
            (C47234 * C5472 + C139598 * C5718 + C47233 * C4665 +
             C47031 * C4919) *
                C139308) *
               C139463 * C139587) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
                C139587) *
               C7396 -
           (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
                C139587 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
                C47029) *
               C139308) *
              C139603 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C139463 *
                C47029 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139463 *
                C139587) *
               C139308 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139463 *
                C139587 +
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139346 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C181) *
                C139463 * C47029) *
               C7396) *
              C139596 +
          ((((C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
              C139598 * C5717) *
                 C181 +
             (C47233 * C4746 + C47031 * C5007 + C47234 * C5557 +
              C139598 * C5795) *
                 C139346) *
                C139463 * C47029 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) * C139463 *
                C139587) *
               C7396 -
           (((C47234 * C5555 + C139598 * C5797 + C47233 * C4748 +
              C47031 * C5009) *
                 C139346 +
             (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
              C47031 * C4915) *
                 C181) *
                C139463 * C139587 +
            ((C52579 + C52578) * C139346 + (C52472 + C52473) * C181) * C139463 *
                C47029) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C10840 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139603 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C10841 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139596 +
            (C47233 * C4656 + C47031 * C4913 + C47234 * C5471 +
             C139598 * C5717) *
                C10842 +
            (C47233 * C4831 + C47031 * C5095 + C47234 * C5637 +
             C139598 * C5872) *
                C10691) *
               C139463 * C47029 +
           ((C47261 + C47260) * C10840 + (C47434 + C47435) * C139603 -
            (C49049 + C49048) * C10841 - (C49272 + C49273) * C139596 +
            (C52473 + C52472) * C10842 + (C52682 + C52683) * C10691) *
               C139463 * C139587) *
              C139346 * C7396 +
          (((C49048 + C49049) * C10841 -
            ((C47435 + C47434) * C139603 + (C47260 + C47261) * C10840) +
            (C49273 + C49272) * C139596 - (C52472 + C52473) * C10842 -
            (C52683 + C52682) * C10691) *
               C139463 * C47029 +
           ((C49053 + C49052) * C10841 -
            ((C47436 + C47437) * C139603 + (C47265 + C47264) * C10840) +
            (C49274 + C49275) * C139596 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C10842 -
            (C47234 * C5635 + C139598 * C5874 + C47233 * C4833 +
             C47031 * C5097) *
                C10691) *
               C139463 * C139587) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C47029 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C139308) *
                C139587) *
               C47031 +
           ((C22979 + C22980 - C22981 - C22982) * C47029 +
            (C22983 + C22984 - C22985 - C22986) * C139587) *
               C139598) *
              C139603 +
          (((C2286 * C7402 -
             ((C554 * C1707 + C139463 * C2268) * C7396 +
              (C554 * C1700 + C139463 * C2264) * C7401) +
             C2287 * C139308) *
                C47029 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
             C2289 * C139308) *
                C139587) *
               C47031 +
           ((C24155 - (C24156 + C24157) + C24158) * C47029 +
            (C24159 - (C24160 + C24161) + C24162) * C139587) *
               C139598) *
              C139596 +
          ((((C554 * C4656 + C139463 * C5191) * C7401 +
             (C554 * C4663 + C139463 * C5195) * C7396 - C5208 * C7402 -
             C5209 * C139308) *
                C47029 +
            (C5208 * C7401 + C5209 * C7396 - C5210 * C7402 - C5211 * C139308) *
                C139587) *
               C47031 +
           ((C20549 * C7401 + C20550 * C7396 - C19593 * C7402 -
             C19594 * C139308) *
                C47029 +
            (C19593 * C7401 + C19594 * C7396 -
             (C554 * C5469 + C139463 * C5949) * C7402 -
             (C554 * C5472 + C139463 * C5952) * C139308) *
                C139587) *
               C139598) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C47029 +
             (C648 + C664) * C139587) *
                C47031 +
            ((C15026 * C181 + C15138 * C139346) * C47029 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C7396 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
               C139308) *
              C139603 +
          ((((C2371 + C2383) * C47029 + (C2374 + C2384) * C139587) * C47031 +
            ((C16077 + C16078) * C47029 + (C16079 + C16080) * C139587) *
                C139598) *
               C139308 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C47029) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C47029) *
                C47031) *
               C7396) *
              C139596 +
          (((((C554 * C4656 + C139463 * C5191) * C181 +
              (C554 * C4746 + C139463 * C5285) * C139346) *
                 C47029 +
             (C5290 + C5298) * C139587) *
                C47031 +
            ((C20549 * C181 + C20655 * C139346) * C47029 +
             (C19693 + C19697) * C139587) *
                C139598) *
               C7396 -
           ((((C554 * C5555 + C139463 * C6031) * C139346 +
              (C554 * C5469 + C139463 * C5949) * C181) *
                 C139587 +
             (C19697 + C19693) * C47029) *
                C139598 +
            ((C5299 + C5293) * C139587 + (C5298 + C5290) * C47029) * C47031) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C10840 +
             (C554 * C245 + C139463 * C719) * C139603 -
             (C554 * C1700 + C139463 * C2264) * C10841 -
             (C554 * C1879 + C139463 * C2460) * C139596 +
             (C554 * C4656 + C139463 * C5191) * C10842 +
             (C554 * C4831 + C139463 * C5373) * C10691) *
                C47029 +
            (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C139587) *
               C47031 +
           ((C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C47029 +
            (C27385 + C27386 - C27387 - C27388 + C27389 + C27390) * C139587) *
               C139598) *
              C139346 * C7396 +
          (((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C47029 +
            (C11308 - (C11307 + C11306) + C11309 - C11310 - C11311) * C139587) *
               C47031 +
           ((C27387 - (C27386 + C27385) + C27388 - C27389 - C27390) * C47029 +
            (C8773 * C10841 - (C1615 * C139603 + C1420 * C10840) +
             C8998 * C139596 - (C554 * C5469 + C139463 * C5949) * C10842 -
             (C554 * C5635 + C139463 * C6108) * C10691) *
                C139587) *
               C139598) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
               C92 -
           (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
               C94 -
           (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139587 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C47031 +
          ((C47033 * C832 + C47029 * C840 + C47034 * C829 + C139587 * C834) *
               C103 +
           (C47033 * C839 + C47029 * C846 + C47034 * C838 + C139587 * C845) *
               C92 -
           (C47034 * C830 + C139587 * C835 + C47033 * C829 + C47029 * C834) *
               C104 -
           (C47034 * C837 + C139587 * C844 + C47033 * C838 + C47029 * C845) *
               C93 +
           (C47033 * C830 + C47029 * C835 + C47034 * C831 + C139587 * C836) *
               C105 +
           (C47033 * C837 + C47029 * C844 + C47034 * C841 + C139587 * C847) *
               C94 -
           (C47034 * C833 + C139587 * C842 + C47033 * C831 + C47029 * C836) *
               C106 -
           (C47034 * C843 + C139587 * C848 + C47033 * C841 + C47029 * C847) *
               C95) *
              C139598) *
         C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139562 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C47031 +
           ((C47760 + C47761) * C137108 + (C47762 + C47763) * C139562 -
            (C47764 + C47765) * C137101 - (C47766 + C47767) * C139308) *
               C139598) *
              C139463 * C139372 * C2565 +
          (((C47765 + C47764) * C137101 -
            ((C47763 + C47762) * C139562 + (C47761 + C47760) * C137108) +
            (C47767 + C47766) * C139308) *
               C47031 +
           ((C49684 + C49685) * C137101 -
            ((C49686 + C49687) * C139562 + (C49688 + C49689) * C137108) +
            (C49690 + C49691) * C139308) *
               C139598) *
              C139463 * C139372 * C2566 +
          (((C49689 + C49688) * C137108 + (C49687 + C49686) * C139562 -
            (C49685 + C49684) * C137101 - (C49691 + C49690) * C139308) *
               C47031 +
           ((C47033 * C3367 + C47029 * C3373 + C47034 * C3366 +
             C139587 * C3372) *
                C137108 +
            (C47033 * C3370 + C47029 * C3376 + C47034 * C3369 +
             C139587 * C3375) *
                C139562 -
            (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
             C47029 * C3372) *
                C137101 -
            (C47034 * C3368 + C139587 * C3374 + C47033 * C3369 +
             C47029 * C3375) *
                C139308) *
               C139598) *
              C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139346) *
               C47031 +
           ((C47033 * C832 + C47029 * C840 + C47034 * C829 + C139587 * C834) *
                C181 +
            (C47033 * C927 + C47029 * C932 + C47034 * C926 + C139587 * C931) *
                C139346) *
               C139598) *
              C139463 * C92 -
          (((C47034 * C925 + C139587 * C930 + C47033 * C926 + C47029 * C931) *
                C139346 +
            (C47034 * C830 + C139587 * C835 + C47033 * C829 + C47029 * C834) *
                C181) *
               C139598 +
           ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                C139346 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C47031) *
              C139463 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139346) *
               C47031 +
           ((C47033 * C830 + C47029 * C835 + C47034 * C831 + C139587 * C836) *
                C181 +
            (C47033 * C925 + C47029 * C930 + C47034 * C928 + C139587 * C933) *
                C139346) *
               C139598) *
              C139463 * C94 -
          (((C47034 * C929 + C139587 * C934 + C47033 * C928 + C47029 * C933) *
                C139346 +
            (C47034 * C833 + C139587 * C842 + C47033 * C831 + C47029 * C836) *
                C181) *
               C139598 +
           ((C47034 * C186 + C139587 * C192 + C47033 * C185 + C47029 * C191) *
                C139346 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C47031) *
              C139463 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C47031 +
           ((C47760 + C47761) * C2660 + (C47883 + C47882) * C2565 -
            (C49688 + C49689) * C2661 - (C49799 + C49798) * C2566 +
            (C47033 * C3367 + C47029 * C3373 + C47034 * C3366 +
             C139587 * C3372) *
                C2662 +
            (C47033 * C3433 + C47029 * C3436 + C47034 * C3432 +
             C139587 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139562 +
          (((C47765 + C47764) * C2661 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C2565 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C2660) +
            (C47884 + C47885) * C2566 - (C49685 + C49684) * C2662 -
            (C49800 + C49801) * C2567) *
               C47031 +
           ((C49684 + C49685) * C2661 -
            ((C47885 + C47884) * C2565 + (C47764 + C47765) * C2660) +
            (C49801 + C49800) * C2566 -
            (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
             C47029 * C3372) *
                C2662 -
            (C47034 * C3431 + C139587 * C3434 + C47033 * C3432 +
             C47029 * C3435) *
                C2567) *
               C139598) *
              C139463 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C47031 +
           ((C47033 * C832 + C47029 * C840 + C47034 * C829 + C139587 * C834) *
                C244 +
            (C47033 * C1011 + C47029 * C1016 + C47034 * C1010 +
             C139587 * C1015) *
                C139372) *
               C139598) *
              C139463 * C139346 * C92 -
          (((C47034 * C1009 + C139587 * C1014 + C47033 * C1010 +
             C47029 * C1015) *
                C139372 +
            (C47034 * C830 + C139587 * C835 + C47033 * C829 + C47029 * C834) *
                C244) *
               C139598 +
           ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                C139372 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C47031) *
              C139463 * C139346 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139372) *
               C47031 +
           ((C47033 * C830 + C47029 * C835 + C47034 * C831 + C139587 * C836) *
                C244 +
            (C47033 * C1009 + C47029 * C1014 + C47034 * C1012 +
             C139587 * C1017) *
                C139372) *
               C139598) *
              C139463 * C139346 * C94 -
          (((C47034 * C1013 + C139587 * C1018 + C47033 * C1012 +
             C47029 * C1017) *
                C139372 +
            (C47034 * C833 + C139587 * C842 + C47033 * C831 + C47029 * C836) *
                C244) *
               C139598 +
           ((C47034 * C249 + C139587 * C255 + C47033 * C248 + C47029 * C254) *
                C139372 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C47031) *
              C139463 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C47031 +
            ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) *
                C139598) *
               C139463 * C2565 -
           (((C49908 + C49909) * C139372 + (C49688 + C49689) * C244) * C139598 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
               C139463 * C2566 +
           (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C47031 +
            ((C47033 * C3367 + C47029 * C3373 + C47034 * C3366 +
              C139587 * C3372) *
                 C244 +
             (C47033 * C3489 + C47029 * C3492 + C47034 * C3488 +
              C139587 * C3491) *
                 C139372) *
                C139598) *
               C139463 * C2567) *
              C139562 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C47031 +
            ((C49684 + C49685) * C244 + (C49910 + C49911) * C139372) *
                C139598) *
               C139463 * C2566 -
           (((C48001 + C48000) * C139372 + (C47764 + C47765) * C244) * C139598 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139463 * C2565 -
           (((C47034 * C3487 + C139587 * C3490 + C47033 * C3488 +
              C47029 * C3491) *
                 C139372 +
             (C47034 * C3365 + C139587 * C3371 + C47033 * C3366 +
              C47029 * C3372) *
                 C244) *
                C139598 +
            ((C49911 + C49910) * C139372 + (C49685 + C49684) * C244) * C47031) *
               C139463 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C139463 * C47029 +
          ((C47261 + C47260) * C103 + (C47263 + C47262) * C92 -
           (C47265 + C47264) * C104 - (C47267 + C47266) * C93 +
           (C47269 + C47268) * C105 + (C47271 + C47270) * C94 -
           (C47234 * C833 + C139598 * C1097 + C47233 * C111 + C47031 * C312) *
               C106 -
           (C47234 * C843 + C139598 * C1102 + C47233 * C122 + C47031 * C318) *
               C95) *
              C139463 * C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139562 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
               C139463 * C47029 +
           ((C47261 + C47260) * C137108 + (C47263 + C47262) * C139562 -
            (C47265 + C47264) * C137101 - (C47267 + C47266) * C139308) *
               C139463 * C139587) *
              C139372 * C2565 +
          (((C48118 + C48119) * C137101 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139562 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C137108) +
            (C48120 + C48121) * C139308) *
               C139463 * C47029 +
           ((C48123 + C48122) * C137101 -
            ((C48121 + C48120) * C139562 + (C48119 + C48118) * C137108) +
            (C48125 + C48124) * C139308) *
               C139463 * C139587) *
              C139372 * C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C50018 + C50019) * C137101 - (C50020 + C50021) * C139308) *
               C139463 * C47029 +
           ((C50019 + C50018) * C137108 + (C50021 + C50020) * C139562 -
            (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
             C47031 * C2829) *
                C137101 -
            (C47234 * C3368 + C139598 * C3546 + C47233 * C2579 +
             C47031 * C2833) *
                C139308) *
               C139463 * C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139346) *
               C139463 * C47029 +
           ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
               C139587) *
              C92 -
          (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
               C139587 +
           ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
               C47029) *
              C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C139463 *
               C47029 +
           ((C47269 + C47268) * C181 + (C47354 + C47355) * C139346) * C139463 *
               C139587) *
              C94 -
          (((C47234 * C929 + C139598 * C1199 + C47233 * C186 + C47031 * C398) *
                C139346 +
            (C47234 * C833 + C139598 * C1097 + C47233 * C111 + C47031 * C312) *
                C181) *
               C139463 * C139587 +
           ((C47355 + C47354) * C139346 + (C47268 + C47269) * C181) * C139463 *
               C47029) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C47029 +
           ((C47261 + C47260) * C2660 + (C47350 + C47351) * C2565 -
            (C48119 + C48118) * C2661 - (C48232 + C48233) * C2566 +
            (C50019 + C50018) * C2662 + (C50124 + C50125) * C2567) *
               C139463 * C139587) *
              C139562 +
          (((C48118 + C48119) * C2661 -
            ((C47351 + C47350) * C2565 + (C47260 + C47261) * C2660) +
            (C48233 + C48232) * C2566 - (C50018 + C50019) * C2662 -
            (C50125 + C50124) * C2567) *
               C139463 * C47029 +
           ((C48123 + C48122) * C2661 -
            ((C47352 + C47353) * C2565 + (C47265 + C47264) * C2660) +
            (C48234 + C48235) * C2566 -
            (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
             C47031 * C2829) *
                C2662 -
            (C47234 * C3431 + C139598 * C3601 + C47233 * C2665 +
             C47031 * C2923) *
                C2567) *
               C139463 * C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
               C139587) *
              C139346 * C92 -
          (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
               C139587 +
           ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
               C47029) *
              C139346 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C139463 *
               C47029 +
           ((C47269 + C47268) * C244 + (C47438 + C47439) * C139372) * C139463 *
               C139587) *
              C139346 * C94 -
          (((C47234 * C1013 + C139598 * C1303 + C47233 * C249 + C47031 * C478) *
                C139372 +
            (C47234 * C833 + C139598 * C1097 + C47233 * C111 + C47031 * C312) *
                C244) *
               C139463 * C139587 +
           ((C47439 + C47438) * C139372 + (C47268 + C47269) * C244) * C139463 *
               C47029) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
                C139587) *
               C2565 -
           (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
                C139587 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C139463 * C47029) *
               C2566 +
           (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C139463 * C47029 +
            ((C50019 + C50018) * C244 + (C50228 + C50229) * C139372) * C139463 *
                C139587) *
               C2567) *
              C139562 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C139463 *
                C47029 +
            ((C48123 + C48122) * C244 + (C48344 + C48345) * C139372) * C139463 *
                C139587) *
               C2566 -
           (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
                C139587 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
                C47029) *
               C2565 -
           (((C47234 * C3487 + C139598 * C3652 + C47233 * C2747 +
              C47031 * C3019) *
                 C139372 +
             (C47234 * C3365 + C139598 * C3543 + C47233 * C2572 +
              C47031 * C2829) *
                 C244) *
                C139463 * C139587 +
            ((C50229 + C50228) * C139372 + (C50018 + C50019) * C244) * C139463 *
                C47029) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C103 +
            (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C47029 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C139587) *
              C47031 +
          ((C15026 * C103 + C15027 * C92 - C1418 * C104 - C1419 * C93 +
            C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
               C47029 +
           (C1418 * C103 + C1419 * C92 - C1420 * C104 - C1421 * C93 +
            C1422 * C105 + C1423 * C94 -
            (C554 * C833 + C139463 * C1399) * C106 -
            (C554 * C843 + C139463 * C1404) * C95) *
               C139587) *
              C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C47029 +
            (C584 * C137108 + C585 * C139562 - C586 * C137101 -
             C587 * C139308) *
                C139587) *
               C47031 +
           ((C16937 + C16938 - C16939 - C16940) * C47029 +
            (C16941 + C16942 - C16943 - C16944) * C139587) *
               C139598) *
              C139372 * C2565 +
          (((C16939 - (C16938 + C16937) + C16940) * C47029 +
            (C16943 - (C16942 + C16941) + C16944) * C139587) *
               C47031 +
           ((C16945 - (C16963 + C16964) + C16950) * C47029 +
            (C16951 - (C16952 + C16953) + C16954) * C139587) *
               C139598) *
              C139372 * C2566 +
          (((C16964 + C16963 - C16945 - C16950) * C47029 +
            (C16953 + C16952 - C16951 - C16954) * C139587) *
               C47031 +
           ((C17713 * C137108 + C17714 * C139562 - C16961 * C137101 -
             C16962 * C139308) *
                C47029 +
            (C16961 * C137108 + C16962 * C139562 -
             (C554 * C3365 + C139463 * C3705) * C137101 -
             (C554 * C3368 + C139463 * C3708) * C139308) *
                C139587) *
               C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C47029 +
            (C648 + C664) * C139587) *
               C47031 +
           ((C15026 * C181 + C15138 * C139346) * C47029 +
            (C14134 + C14135) * C139587) *
               C139598) *
              C92 -
          (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
               C139598 +
           ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
              C93 +
          ((C668 * C47029 + (C656 + C666) * C139587) * C47031 +
           ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139587) *
               C139598) *
              C94 -
          ((((C554 * C929 + C139463 * C1501) * C139346 +
             (C554 * C833 + C139463 * C1399) * C181) *
                C139587 +
            (C14139 + C14138) * C47029) *
               C139598 +
           ((C667 + C657) * C139587 + C669 * C47029) * C47031) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C47029 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C47031 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             C17713 * C2662 + C17787 * C2567) *
                C47029 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139562 +
          (((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C47029 +
            (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C139587) *
               C47031 +
           ((C17067 - (C17066 + C17065) + C17068 - C17069 - C17074) * C47029 +
            (C3124 * C2661 - (C1520 * C2565 + C1420 * C2660) + C3219 * C2566 -
             (C554 * C3365 + C139463 * C3705) * C2662 -
             (C554 * C3431 + C139463 * C3763) * C2567) *
                C139587) *
               C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C47029 +
            (C726 + C742) * C139587) *
               C47031 +
           ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
              C139346 * C92 -
          ((C1621 * C139587 + C15241 * C47029) * C139598 +
           ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
              C139346 * C93 +
          ((C746 * C47029 + (C734 + C744) * C139587) * C47031 +
           (C15242 * C47029 + (C1612 + C1620) * C139587) * C139598) *
              C139346 * C94 -
          ((((C554 * C1013 + C139463 * C1604) * C139372 +
             (C554 * C833 + C139463 * C1399) * C244) *
                C139587 +
            (C1620 + C1612) * C47029) *
               C139598 +
           ((C745 + C735) * C139587 + C747 * C47029) * C47031) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C47029 +
             (C726 + C742) * C139587) *
                C47031 +
            ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
               C2565 -
           ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
               C2566 +
           (((C17176 + C17183) * C47029 + C17177 * C139587) * C47031 +
            ((C17856 + C17860) * C47029 + (C17178 + C17184) * C139587) *
                C139598) *
               C2567) *
              C139562 +
          (((C15240 * C47029 + C15242 * C139587) * C47031 +
            (C17177 * C47029 + (C3303 + C3309) * C139587) * C139598) *
               C2566 -
           ((C1621 * C139587 + C15241 * C47029) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
               C2565 -
           ((((C554 * C3487 + C139463 * C3814) * C139372 +
              (C554 * C3365 + C139463 * C3705) * C244) *
                 C139587 +
             (C17184 + C17178) * C47029) *
                C139598 +
            ((C3309 + C3303) * C139587 + C17173 * C47029) * C47031) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C47031 +
           ((C47760 + C47761) * C826 + (C47762 + C47763) * C821 -
            (C47764 + C47765) * C827 - (C47766 + C47767) * C822 +
            (C47768 + C47769) * C828 + (C47770 + C47771) * C823) *
               C139598) *
              C139463 * C139372 * C139570 +
          (((C47765 + C47764) * C827 -
            ((C47763 + C47762) * C821 + (C47761 + C47760) * C826) +
            (C47767 + C47766) * C822 - (C47769 + C47768) * C828 -
            (C47771 + C47770) * C823) *
               C47031 +
           ((C47033 * C2571 + C47029 * C2575 + C47034 * C2572 +
             C139587 * C2576) *
                C827 -
            ((C47034 * C2578 + C139587 * C2583 + C47033 * C2577 +
              C47029 * C2582) *
                 C821 +
             (C47034 * C2571 + C139587 * C2575 + C47033 * C2570 +
              C47029 * C2574) *
                 C826) +
            (C47033 * C2578 + C47029 * C2583 + C47034 * C2579 +
             C139587 * C2584) *
                C822 -
            (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
             C47029 * C2576) *
                C828 -
            (C47034 * C2581 + C139587 * C2585 + C47033 * C2579 +
             C47029 * C2584) *
                C823) *
               C139598) *
              C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C3364 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139303) *
               C47031 +
           ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
               C139598) *
              C139463 * C139372 * C3360 -
          (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) * C139598 +
           ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) * C47031) *
              C139463 * C139372 * C3361 +
          (((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C47031 +
           ((C50598 + C50599) * C3364 + (C50600 + C50601) * C139303) *
               C139598) *
              C139463 * C139372 * C3362 -
          (((C47034 * C17252 + C139587 * C17256 + C47033 * C17253 +
             C47029 * C17257) *
                C139303 +
            (C47034 * C17250 + C139587 * C17254 + C47033 * C17251 +
             C47029 * C17255) *
                C3364) *
               C139598 +
           ((C50601 + C50600) * C139303 + (C50599 + C50598) * C3364) * C47031) *
              C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C923 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139570 -
            (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
               C47031 +
           ((C47760 + C47761) * C923 + (C47883 + C47882) * C139570 -
            (C47034 * C2571 + C139587 * C2575 + C47033 * C2570 +
             C47029 * C2574) *
                C924 -
            (C47034 * C2664 + C139587 * C2668 + C47033 * C2663 +
             C47029 * C2667) *
                C139360) *
               C139598) *
              C139463 * C821 +
          (((C47765 + C47764) * C924 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139570 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C923) +
            (C47884 + C47885) * C139360) *
               C47031 +
           ((C47033 * C2571 + C47029 * C2575 + C47034 * C2572 +
             C139587 * C2576) *
                C924 -
            ((C47885 + C47884) * C139570 + (C47764 + C47765) * C923) +
            (C47033 * C2664 + C47029 * C2668 + C47034 * C2665 +
             C139587 * C2669) *
                C139360) *
               C139598) *
              C139463 * C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C923 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139570 -
            (C47769 + C47768) * C924 - (C47886 + C47887) * C139360) *
               C47031 +
           ((C47768 + C47769) * C923 + (C47887 + C47886) * C139570 -
            (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
             C47029 * C2576) *
                C924 -
            (C47034 * C2666 + C139587 * C2670 + C47033 * C2665 +
             C47029 * C2669) *
                C139360) *
               C139598) *
              C139463 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C3427 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
               C3360 -
           (C47761 + C47760) * C3428 - (C47882 + C47883) * C3361 +
           (C49689 + C49688) * C3429 + (C49798 + C49799) * C3362 -
           (C50599 + C50598) * C3430 - (C50672 + C50673) * C3363) *
              C47031 +
          ((C47760 + C47761) * C3427 + (C47883 + C47882) * C3360 -
           (C49688 + C49689) * C3428 - (C49799 + C49798) * C3361 +
           (C50598 + C50599) * C3429 + (C50673 + C50672) * C3362 -
           (C47034 * C17250 + C139587 * C17254 + C47033 * C17251 +
            C47029 * C17255) *
               C3430 -
           (C47034 * C17336 + C139587 * C17338 + C47033 * C17337 +
            C47029 * C17339) *
               C3363) *
              C139598) *
         C139463 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C47031 +
            ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C47034 * C2746 + C139587 * C2750 + C47033 * C2745 +
              C47029 * C2749) *
                 C139372 +
             (C47034 * C2571 + C139587 * C2575 + C47033 * C2570 +
              C47029 * C2574) *
                 C244) *
                C139598 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
               C139463 * C139360) *
              C821 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C47031 +
            ((C47033 * C2571 + C47029 * C2575 + C47034 * C2572 +
              C139587 * C2576) *
                 C244 +
             (C47033 * C2746 + C47029 * C2750 + C47034 * C2747 +
              C139587 * C2751) *
                 C139372) *
                C139598) *
               C139463 * C139360 -
           (((C48001 + C48000) * C139372 + (C47764 + C47765) * C244) * C139598 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C47031) *
               C139463 * C139570) *
              C822 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                 C139372) *
                C47031 +
            ((C47768 + C47769) * C244 + (C48002 + C48003) * C139372) *
                C139598) *
               C139463 * C139570 -
           (((C47034 * C2748 + C139587 * C2752 + C47033 * C2747 +
              C47029 * C2751) *
                 C139372 +
             (C47034 * C2573 + C139587 * C2580 + C47033 * C2572 +
              C47029 * C2576) *
                 C244) *
                C139598 +
            ((C48003 + C48002) * C139372 + (C47769 + C47768) * C244) * C47031) *
               C139463 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C47031 +
           ((C47760 + C47761) * C244 + (C47998 + C47999) * C139372) * C139598) *
              C139463 * C3360 -
          (((C49908 + C49909) * C139372 + (C49688 + C49689) * C244) * C139598 +
           ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C47031) *
              C139463 * C3361 +
          (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C47031 +
           ((C50598 + C50599) * C244 + (C50744 + C50745) * C139372) * C139598) *
              C139463 * C3362 -
          (((C47034 * C17412 + C139587 * C17414 + C47033 * C17413 +
             C47029 * C17415) *
                C139372 +
            (C47034 * C17250 + C139587 * C17254 + C47033 * C17251 +
             C47029 * C17255) *
                C244) *
               C139598 +
           ((C50745 + C50744) * C139372 + (C50599 + C50598) * C244) * C47031) *
              C139463 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C139463 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C822 +
            (C47269 + C47268) * C828 + (C47271 + C47270) * C823) *
               C139463 * C139587) *
              C139372 * C139570 +
          (((C48118 + C48119) * C827 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C821 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C826) +
            (C48120 + C48121) * C822 - (C48122 + C48123) * C828 -
            (C48124 + C48125) * C823) *
               C139463 * C47029 +
           ((C48123 + C48122) * C827 -
            ((C48121 + C48120) * C821 + (C48119 + C48118) * C826) +
            (C48125 + C48124) * C822 -
            (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
             C47031 * C1096) *
                C828 -
            (C47234 * C2581 + C139598 * C2834 + C47233 * C841 +
             C47031 * C1101) *
                C823) *
               C139463 * C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C3364 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139303) *
               C139463 * C47029 +
           ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) * C139463 *
               C139587) *
              C139372 * C3360 -
          (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) * C139463 *
               C139587 +
           ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
             C47031 * C1098) *
                C139303 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C3364) *
               C139463 * C47029) *
              C139372 * C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139303) *
               C139463 * C47029 +
           ((C50019 + C50018) * C3364 + (C50021 + C50020) * C139303) * C139463 *
               C139587) *
              C139372 * C3362 -
          (((C47234 * C17252 + C139598 * C17490 + C47233 * C3369 +
             C47031 * C3547) *
                C139303 +
            (C47234 * C17250 + C139598 * C17488 + C47233 * C3366 +
             C47031 * C3544) *
                C3364) *
               C139463 * C139587 +
           ((C47234 * C17253 + C139598 * C17491 + C47233 * C3370 +
             C47031 * C3548) *
                C139303 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C3364) *
               C139463 * C47029) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C923 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139570 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C924 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C139463 * C47029 +
           ((C47261 + C47260) * C923 + (C47350 + C47351) * C139570 -
            (C48119 + C48118) * C924 - (C48232 + C48233) * C139360) *
               C139463 * C139587) *
              C821 +
          (((C48118 + C48119) * C924 -
            ((C47351 + C47350) * C139570 + (C47260 + C47261) * C923) +
            (C48233 + C48232) * C139360) *
               C139463 * C47029 +
           ((C48123 + C48122) * C924 -
            ((C47352 + C47353) * C139570 + (C47265 + C47264) * C923) +
            (C48234 + C48235) * C139360) *
               C139463 * C139587) *
              C822 +
          (((C47264 + C47265) * C923 + (C47353 + C47352) * C139570 -
            (C48122 + C48123) * C924 - (C48235 + C48234) * C139360) *
               C139463 * C47029 +
           ((C47269 + C47268) * C923 + (C47354 + C47355) * C139570 -
            (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
             C47031 * C1096) *
                C924 -
            (C47234 * C2666 + C139598 * C2924 + C47233 * C928 +
             C47031 * C1198) *
                C139360) *
               C139463 * C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C3427 +
           (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
               C3360 -
           (C47234 * C2570 + C139598 * C2827 + C47233 * C832 + C47031 * C1094) *
               C3428 -
           (C47234 * C2663 + C139598 * C2921 + C47233 * C927 + C47031 * C1195) *
               C3361 +
           (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
            C47031 * C3545) *
               C3430 -
           (C47234 * C17337 + C139598 * C17558 + C47233 * C3433 +
            C47031 * C3599) *
               C3363) *
              C139463 * C47029 +
          ((C47261 + C47260) * C3427 + (C47350 + C47351) * C3360 -
           (C48119 + C48118) * C3428 - (C48232 + C48233) * C3361 +
           (C50019 + C50018) * C3429 + (C50124 + C50125) * C3362 -
           (C47234 * C17250 + C139598 * C17488 + C47233 * C3366 +
            C47031 * C3544) *
               C3430 -
           (C47234 * C17336 + C139598 * C17559 + C47233 * C3432 +
            C47031 * C3600) *
               C3363) *
              C139463 * C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C139463 * C47029 +
            ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
                C139587 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C139463 * C47029) *
               C139360) *
              C821 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C139463 *
                C47029 +
            ((C48123 + C48122) * C244 + (C48344 + C48345) * C139372) * C139463 *
                C139587) *
               C139360 -
           (((C47436 + C47437) * C139372 + (C47265 + C47264) * C244) * C139463 *
                C139587 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C139463 *
                C47029) *
               C139570) *
              C822 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C139463 *
                C47029 +
            ((C47269 + C47268) * C244 + (C47438 + C47439) * C139372) * C139463 *
                C139587) *
               C139570 -
           (((C47234 * C2748 + C139598 * C3020 + C47233 * C1012 +
              C47031 * C1302) *
                 C139372 +
             (C47234 * C2573 + C139598 * C2830 + C47233 * C831 +
              C47031 * C1096) *
                 C244) *
                C139463 * C139587 +
            ((C48345 + C48344) * C139372 + (C48122 + C48123) * C244) * C139463 *
                C47029) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C139463 * C47029 +
           ((C47261 + C47260) * C244 + (C47434 + C47435) * C139372) * C139463 *
               C139587) *
              C3360 -
          (((C48342 + C48343) * C139372 + (C48119 + C48118) * C244) * C139463 *
               C139587 +
           ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
             C47031 * C1301) *
                C139372 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C244) *
               C139463 * C47029) *
              C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C244 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139372) *
               C139463 * C47029 +
           ((C50019 + C50018) * C244 + (C50228 + C50229) * C139372) * C139463 *
               C139587) *
              C3362 -
          (((C47234 * C17412 + C139598 * C17626 + C47233 * C3488 +
             C47031 * C3653) *
                C139372 +
            (C47234 * C17250 + C139598 * C17488 + C47233 * C3366 +
             C47031 * C3544) *
                C244) *
               C139463 * C139587 +
           ((C47234 * C17413 + C139598 * C17627 + C47233 * C3489 +
             C47031 * C3654) *
                C139372 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C244) *
               C139463 * C47029) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C47031 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C47029 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139372 * C139570 +
          (((C15016 - (C15029 + C15028) + C15017 - C15018 - C15019) * C47029 +
            (C15022 - (C15021 + C15020) + C15023 - C15024 - C15025) * C139587) *
               C47031 +
           ((C3122 * C827 - (C16959 * C821 + C16960 * C826) + C3123 * C822 -
             C3124 * C828 - C3125 * C823) *
                C47029 +
            (C3124 * C827 - (C3123 * C821 + C3122 * C826) + C3125 * C822 -
             (C554 * C2573 + C139463 * C3108) * C828 -
             (C554 * C2581 + C139463 * C3112) * C823) *
                C139587) *
               C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C3364 +
             (C554 * C116 + C139463 * C561) * C139303) *
                C47029 +
            (C584 * C3364 + C585 * C139303) * C139587) *
               C47031 +
           ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
               C139598) *
              C139372 * C3360 -
          (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
               C139598 +
           ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
               C47031) *
              C139372 * C3361 +
          (((C17706 + C17705) * C47029 + (C17704 + C17703) * C139587) * C47031 +
           ((C17715 + C17716) * C47029 + (C17711 + C17712) * C139587) *
               C139598) *
              C139372 * C3362 -
          ((((C554 * C17252 + C139463 * C17696) * C139303 +
             (C554 * C17250 + C139463 * C17694) * C3364) *
                C139587 +
            ((C554 * C17253 + C139463 * C17697) * C139303 +
             (C554 * C17251 + C139463 * C17695) * C3364) *
                C47029) *
               C139598 +
           ((C17712 + C17711) * C139587 + (C17716 + C17715) * C47029) *
               C47031) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C923 +
             (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
             C15138 * C139360) *
                C47029 +
            (C1503 + C1504 - C1505 - C1522) * C139587) *
               C47031 +
           ((C15026 * C923 + C15138 * C139570 - C16960 * C924 -
             C17072 * C139360) *
                C47029 +
            (C15130 + C15131 - C15132 - C15133) * C139587) *
               C139598) *
              C821 +
          (((C1505 - (C1504 + C1503) + C1522) * C47029 +
            (C1510 - (C1509 + C1508) + C1524) * C139587) *
               C47031 +
           ((C15132 - (C15131 + C15130) + C15133) * C47029 +
            (C15134 - (C15135 + C15136) + C15137) * C139587) *
               C139598) *
              C822 +
          ((C1526 * C47029 + (C1515 + C1514 - C1513 - C1525) * C139587) *
               C47031 +
           ((C15136 + C15135 - C15134 - C15137) * C47029 +
            (C1422 * C923 + C1521 * C139570 -
             (C554 * C2573 + C139463 * C3108) * C924 -
             (C554 * C2666 + C139463 * C3202) * C139360) *
                C139587) *
               C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C3427 +
            (C554 * C182 + C139463 * C641) * C3360 - C15026 * C3428 -
            C15138 * C3361 + C16960 * C3429 + C17072 * C3362 - C17713 * C3430 -
            C17787 * C3363) *
               C47029 +
           (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
            C3122 * C3429 + C3218 * C3362 - C16961 * C3430 - C17073 * C3363) *
               C139587) *
              C47031 +
          ((C15026 * C3427 + C15138 * C3360 - C16960 * C3428 - C17072 * C3361 +
            C17713 * C3429 + C17787 * C3362 -
            (C554 * C17251 + C139463 * C17695) * C3430 -
            (C554 * C17337 + C139463 * C17782) * C3363) *
               C47029 +
           (C1418 * C3427 + C1518 * C3360 - C3122 * C3428 - C3218 * C3361 +
            C16961 * C3429 + C17073 * C3362 -
            (C554 * C17250 + C139463 * C17694) * C3430 -
            (C554 * C17336 + C139463 * C17783) * C3363) *
               C139587) *
              C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C244 +
              (C554 * C245 + C139463 * C719) * C139372) *
                 C47029 +
             (C726 + C742) * C139587) *
                C47031 +
            ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
               C139570 -
           ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
            (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
               C139360) *
              C821 +
          (((C15240 * C47029 + C15242 * C139587) * C47031 +
            (C17177 * C47029 + (C3303 + C3309) * C139587) * C139598) *
               C139360 -
           ((C1621 * C139587 + C15241 * C47029) * C139598 +
            ((C743 + C729) * C139587 + (C742 + C726) * C47029) * C47031) *
               C139570) *
              C822 +
          (((C746 * C47029 + (C734 + C744) * C139587) * C47031 +
            (C15242 * C47029 + (C1612 + C1620) * C139587) * C139598) *
               C139570 -
           ((((C554 * C2748 + C139463 * C3298) * C139372 +
              (C554 * C2573 + C139463 * C3108) * C244) *
                 C139587 +
             (C3309 + C3303) * C47029) *
                C139598 +
            ((C1620 + C1612) * C139587 + C1621 * C47029) * C47031) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C47029 +
            (C726 + C742) * C139587) *
               C47031 +
           ((C15237 + C15244) * C47029 + C15240 * C139587) * C139598) *
              C3360 -
          ((C17173 * C139587 + (C17183 + C17176) * C47029) * C139598 +
           (C15241 * C139587 + (C15244 + C15237) * C47029) * C47031) *
              C3361 +
          (((C17176 + C17183) * C47029 + C17177 * C139587) * C47031 +
           ((C17856 + C17860) * C47029 + (C17178 + C17184) * C139587) *
               C139598) *
              C3362 -
          ((((C554 * C17412 + C139463 * C17853) * C139372 +
             (C554 * C17250 + C139463 * C17694) * C244) *
                C139587 +
            ((C554 * C17413 + C139463 * C17854) * C139372 +
             (C554 * C17251 + C139463 * C17695) * C244) *
                C47029) *
               C139598 +
           ((C17184 + C17178) * C139587 + (C17860 + C17856) * C47029) *
               C47031) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C47031 +
           ((C47760 + C47761) * C826 + (C47762 + C47763) * C821 -
            (C47764 + C47765) * C827 - (C47766 + C47767) * C822 +
            (C47768 + C47769) * C828 + (C47770 + C47771) * C823) *
               C139598) *
              C139463 * C139571 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C827 -
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C821 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C826) +
            (C47033 * C1706 + C47029 * C1713 + C47034 * C1705 +
             C139587 * C1712) *
                C822 -
            (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
             C47029 * C1703) *
                C828 -
            (C47034 * C1709 + C139587 * C1715 + C47033 * C1705 +
             C47029 * C1712) *
                C823) *
               C47031 +
           ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
             C139587 * C3899) *
                C827 -
            ((C47034 * C3901 + C139587 * C3910 + C47033 * C3900 +
              C47029 * C3909) *
                 C821 +
             (C47034 * C3892 + C139587 * C3898 + C47033 * C3891 +
              C47029 * C3897) *
                 C826) +
            (C47033 * C3901 + C47029 * C3910 + C47034 * C3902 +
             C139587 * C3911) *
                C822 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C828 -
            (C47034 * C8122 + C139587 * C8123 + C47033 * C3902 +
             C47029 * C3911) *
                C823) *
               C139598) *
              C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C47031 +
            ((C47760 + C47761) * C3364 + (C47762 + C47763) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139598 +
            ((C47034 * C1706 + C139587 * C1713 + C47033 * C1707 +
              C47029 * C1714) *
                 C139303 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C3364) *
                C47031) *
               C139463 * C139384) *
              C2565 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) * C47031 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139598) *
               C139463 * C139384 -
           (((C49686 + C49687) * C139303 + (C49688 + C49689) * C3364) *
                C139598 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C47031) *
               C139463 * C139571) *
              C2566 +
          ((((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C47031 +
            ((C50598 + C50599) * C3364 + (C50600 + C50601) * C139303) *
                C139598) *
               C139463 * C139571 -
           (((C47034 * C17960 + C139587 * C17964 + C47033 * C17961 +
              C47029 * C17965) *
                 C139303 +
             (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
              C47029 * C17963) *
                 C3364) *
                C139598 +
            ((C51263 + C51262) * C139303 + (C51261 + C51260) * C3364) *
                C47031) *
               C139463 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C47031 +
            ((C47760 + C47761) * C181 + (C47883 + C47882) * C139346) *
                C139598) *
               C139463 * C821 -
           (((C47885 + C47884) * C139346 + (C47764 + C47765) * C181) * C139598 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C47031) *
               C139463 * C822 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                 C139346) *
                C47031 +
            ((C47768 + C47769) * C181 + (C47887 + C47886) * C139346) *
                C139598) *
               C139463 * C823) *
              C139571 +
          ((((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
              C139587 * C1703) *
                 C181 +
             (C47033 * C1791 + C47029 * C1796 + C47034 * C1792 +
              C139587 * C1797) *
                 C139346) *
                C47031 +
            ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
              C139587 * C3899) *
                 C181 +
             (C47033 * C3990 + C47029 * C3996 + C47034 * C3991 +
              C139587 * C3997) *
                 C139346) *
                C139598) *
               C139463 * C822 -
           (((C47034 * C3990 + C139587 * C3996 + C47033 * C3989 +
              C47029 * C3995) *
                 C139346 +
             (C47034 * C3892 + C139587 * C3898 + C47033 * C3891 +
              C47029 * C3897) *
                 C181) *
                C139598 +
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C139346 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C181) *
                C47031) *
               C139463 * C821 -
           (((C47034 * C8222 + C139587 * C8223 + C47033 * C3991 +
              C47029 * C3997) *
                 C139346 +
             (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
              C47029 * C3899) *
                 C181) *
                C139598 +
            ((C47034 * C1793 + C139587 * C1798 + C47033 * C1792 +
              C47029 * C1797) *
                 C139346 +
             (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
              C47029 * C1703) *
                 C181) *
                C47031) *
               C139463 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C47031 +
           ((C47760 + C47761) * C2660 + (C47883 + C47882) * C2565 -
            (C49688 + C49689) * C2661 - (C49799 + C49798) * C2566 +
            (C50598 + C50599) * C2662 + (C50673 + C50672) * C2567) *
               C139598) *
              C139463 * C139303 * C139571 +
          (((C51259 + C51258) * C2661 -
            ((C47034 * C1791 + C139587 * C1796 + C47033 * C1794 +
              C47029 * C1799) *
                 C2565 +
             (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
              C47029 * C1708) *
                 C2660) +
            (C51370 + C51371) * C2566 - (C51261 + C51260) * C2662 -
            (C51372 + C51373) * C2567) *
               C47031 +
           ((C51260 + C51261) * C2661 -
            ((C51371 + C51370) * C2565 + (C51258 + C51259) * C2660) +
            (C51373 + C51372) * C2566 -
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C2662 -
            (C47034 * C18088 + C139587 * C18090 + C47033 * C18089 +
             C47029 * C18091) *
                C2567) *
               C139598) *
              C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C1876 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139384) *
               C47031 +
           ((C47760 + C47761) * C1875 + (C47998 + C47999) * C139571 -
            (C47034 * C3892 + C139587 * C3898 + C47033 * C3891 +
             C47029 * C3897) *
                C1876 -
            (C47034 * C4076 + C139587 * C4082 + C47033 * C4075 +
             C47029 * C4081) *
                C139384) *
               C139598) *
              C139463 * C139346 * C821 +
          (((C47033 * C1697 + C47029 * C1702 + C47034 * C1698 +
             C139587 * C1703) *
                C1876 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139571 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C1875) +
            (C47033 * C1878 + C47029 * C1883 + C47034 * C1877 +
             C139587 * C1882) *
                C139384) *
               C47031 +
           ((C47033 * C3892 + C47029 * C3898 + C47034 * C3893 +
             C139587 * C3899) *
                C1876 -
            ((C48001 + C48000) * C139571 + (C47764 + C47765) * C1875) +
            (C47033 * C4076 + C47029 * C4082 + C47034 * C4077 +
             C139587 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C1875 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139571 -
            (C47034 * C1699 + C139587 * C1704 + C47033 * C1698 +
             C47029 * C1703) *
                C1876 -
            (C47034 * C1880 + C139587 * C1885 + C47033 * C1877 +
             C47029 * C1882) *
                C139384) *
               C47031 +
           ((C47768 + C47769) * C1875 + (C48002 + C48003) * C139571 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C1876 -
            (C47034 * C8322 + C139587 * C8323 + C47033 * C4077 +
             C47029 * C4083) *
                C139384) *
               C139598) *
              C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C47034 * C1697 + C139587 * C1702 + C47033 * C1700 +
             C47029 * C1708) *
                C1876 -
            (C47034 * C1878 + C139587 * C1883 + C47033 * C1879 +
             C47029 * C1884) *
                C139384) *
               C47031 +
           ((C47760 + C47761) * C1875 + (C47998 + C47999) * C139571 -
            (C51258 + C51259) * C1876 - (C51480 + C51481) * C139384) *
               C139598) *
              C139463 * C2565 +
          (((C51259 + C51258) * C1876 -
            ((C47999 + C47998) * C139571 + (C47761 + C47760) * C1875) +
            (C51481 + C51480) * C139384) *
               C47031 +
           ((C51260 + C51261) * C1876 -
            ((C49908 + C49909) * C139571 + (C49688 + C49689) * C1875) +
            (C51482 + C51483) * C139384) *
               C139598) *
              C139463 * C2566 +
          (((C49689 + C49688) * C1875 + (C49909 + C49908) * C139571 -
            (C51261 + C51260) * C1876 - (C51483 + C51482) * C139384) *
               C47031 +
           ((C50598 + C50599) * C1875 + (C50744 + C50745) * C139571 -
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C1876 -
            (C47034 * C18202 + C139587 * C18204 + C47033 * C18203 +
             C47029 * C18205) *
                C139384) *
               C139598) *
              C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C139463 * C47029 +
           ((C47261 + C47260) * C826 + (C47263 + C47262) * C821 -
            (C47265 + C47264) * C827 - (C47267 + C47266) * C822 +
            (C47269 + C47268) * C828 + (C47271 + C47270) * C823) *
               C139463 * C139587) *
              C139571 +
          (((C49048 + C49049) * C827 -
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C821 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C826) +
            (C49050 + C49051) * C822 - (C49052 + C49053) * C828 -
            (C49054 + C49055) * C823) *
               C139463 * C47029 +
           ((C49053 + C49052) * C827 -
            ((C49051 + C49050) * C821 + (C49049 + C49048) * C826) +
            (C49055 + C49054) * C822 -
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C828 -
            (C47234 * C8122 + C139598 * C8423 + C47233 * C1709 +
             C47031 * C1969) *
                C823) *
               C139463 * C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C139463 * C47029 +
            ((C47261 + C47260) * C3364 + (C47263 + C47262) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C49051 + C49050) * C139303 + (C49049 + C49048) * C3364) *
                C139463 * C139587 +
            ((C47234 * C3900 + C139598 * C4167 + C47233 * C1707 +
              C47031 * C1966) *
                 C139303 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C3364) *
                C139463 * C47029) *
               C139384) *
              C2565 +
          ((((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
              C139598 * C4166) *
                 C3364 +
             (C47233 * C3900 + C47031 * C4167 + C47234 * C3905 +
              C139598 * C4172) *
                 C139303) *
                C139463 * C47029 +
            ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
              C139598 * C4165) *
                 C3364 +
             (C47233 * C3901 + C47031 * C4168 + C47234 * C3904 +
              C139598 * C4171) *
                 C139303) *
                C139463 * C139587) *
               C139384 -
           (((C48121 + C48120) * C139303 + (C48119 + C48118) * C3364) *
                C139463 * C139587 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C139463 * C47029) *
               C139571) *
              C2566 +
          ((((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C139463 * C47029 +
            ((C50019 + C50018) * C3364 + (C50021 + C50020) * C139303) *
                C139463 * C139587) *
               C139571 -
           (((C47234 * C17960 + C139598 * C18318 + C47233 * C3904 +
              C47031 * C4171) *
                 C139303 +
             (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
              C47031 * C4165) *
                 C3364) *
                C139463 * C139587 +
            ((C47234 * C17961 + C139598 * C18319 + C47233 * C3905 +
              C47031 * C4172) *
                 C139303 +
             (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
              C47031 * C4166) *
                 C3364) *
                C139463 * C47029) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C139463 * C47029 +
            ((C47261 + C47260) * C181 + (C47350 + C47351) * C139346) * C139463 *
                C139587) *
               C821 -
           (((C47352 + C47353) * C139346 + (C47265 + C47264) * C181) * C139463 *
                C139587 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C139463 *
                C47029) *
               C822 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C139463 *
                C47029 +
            ((C47269 + C47268) * C181 + (C47354 + C47355) * C139346) * C139463 *
                C139587) *
               C823) *
              C139571 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C139463 *
                C47029 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139463 *
                C139587) *
               C822 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139463 *
                C139587 +
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C139346 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C181) *
                C139463 * C47029) *
               C821 -
           (((C47234 * C8222 + C139598 * C8534 + C47233 * C1793 +
              C47031 * C2065) *
                 C139346 +
             (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
              C47031 * C1964) *
                 C181) *
                C139463 * C139587 +
            ((C49165 + C49164) * C139346 + (C49052 + C49053) * C181) * C139463 *
                C47029) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C139463 * C47029 +
           ((C47261 + C47260) * C2660 + (C47350 + C47351) * C2565 -
            (C48119 + C48118) * C2661 - (C48232 + C48233) * C2566 +
            (C50019 + C50018) * C2662 + (C50124 + C50125) * C2567) *
               C139463 * C139587) *
              C139303 * C139571 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C2661 -
            ((C47234 * C3989 + C139598 * C4247 + C47233 * C1794 +
              C47031 * C2066) *
                 C2565 +
             (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
              C47031 * C1962) *
                 C2660) +
            (C47233 * C3989 + C47031 * C4247 + C47234 * C3994 +
             C139598 * C4248) *
                C2566 -
            (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
             C47031 * C4166) *
                C2662 -
            (C47234 * C18089 + C139598 * C18418 + C47233 * C3994 +
             C47031 * C4248) *
                C2567) *
               C139463 * C47029 +
           ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
             C139598 * C4165) *
                C2661 -
            ((C49163 + C49162) * C2565 + (C49049 + C49048) * C2660) +
            (C47233 * C3990 + C47031 * C4249 + C47234 * C3993 +
             C139598 * C4250) *
                C2566 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C2662 -
            (C47234 * C18088 + C139598 * C18419 + C47233 * C3993 +
             C47031 * C4250) *
                C2567) *
               C139463 * C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C1876 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139384) *
               C139463 * C47029 +
           ((C47261 + C47260) * C1875 + (C47434 + C47435) * C139571 -
            (C49049 + C49048) * C1876 - (C49272 + C49273) * C139384) *
               C139463 * C139587) *
              C139346 * C821 +
          (((C49048 + C49049) * C1876 -
            ((C47435 + C47434) * C139571 + (C47260 + C47261) * C1875) +
            (C49273 + C49272) * C139384) *
               C139463 * C47029 +
           ((C49053 + C49052) * C1876 -
            ((C47436 + C47437) * C139571 + (C47265 + C47264) * C1875) +
            (C49274 + C49275) * C139384) *
               C139463 * C139587) *
              C139346 * C822 +
          (((C47264 + C47265) * C1875 + (C47437 + C47436) * C139571 -
            (C49052 + C49053) * C1876 - (C49275 + C49274) * C139384) *
               C139463 * C47029 +
           ((C47269 + C47268) * C1875 + (C47438 + C47439) * C139571 -
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C1876 -
            (C47234 * C8322 + C139598 * C8647 + C47233 * C1880 +
             C47031 * C2162) *
                C139384) *
               C139463 * C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C47234 * C3891 + C139598 * C4161 + C47233 * C1700 +
             C47031 * C1962) *
                C1876 -
            (C47234 * C4075 + C139598 * C4327 + C47233 * C1879 +
             C47031 * C2159) *
                C139384) *
               C139463 * C47029 +
           ((C47261 + C47260) * C1875 + (C47434 + C47435) * C139571 -
            (C49049 + C49048) * C1876 - (C49272 + C49273) * C139384) *
               C139463 * C139587) *
              C2565 +
          (((C47233 * C3891 + C47031 * C4161 + C47234 * C3896 +
             C139598 * C4166) *
                C1876 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139571 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C1875) +
            (C47233 * C4075 + C47031 * C4327 + C47234 * C4080 +
             C139598 * C4330) *
                C139384) *
               C139463 * C47029 +
           ((C47233 * C3892 + C47031 * C4162 + C47234 * C3895 +
             C139598 * C4165) *
                C1876 -
            ((C48342 + C48343) * C139571 + (C48119 + C48118) * C1875) +
            (C47233 * C4076 + C47031 * C4328 + C47234 * C4079 +
             C139598 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C47234 * C17959 + C139598 * C18317 + C47233 * C3896 +
             C47031 * C4166) *
                C1876 -
            (C47234 * C18203 + C139598 * C18518 + C47233 * C4080 +
             C47031 * C4330) *
                C139384) *
               C139463 * C47029 +
           ((C50019 + C50018) * C1875 + (C50228 + C50229) * C139571 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C1876 -
            (C47234 * C18202 + C139598 * C18519 + C47233 * C4079 +
             C47031 * C4331) *
                C139384) *
               C139463 * C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C826 +
             (C554 * C116 + C139463 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C47029 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C139587) *
               C47031 +
           ((C15028 + C15029 - C15016 - C15017 + C15018 + C15019) * C47029 +
            (C15020 + C15021 - C15022 - C15023 + C15024 + C15025) * C139587) *
               C139598) *
              C139571 +
          (((C2286 * C827 -
             ((C554 * C1707 + C139463 * C2268) * C821 +
              (C554 * C1700 + C139463 * C2264) * C826) +
             C2287 * C822 - C2288 * C828 - C2289 * C823) *
                C47029 +
            (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
             C2290 * C828 - C2291 * C823) *
                C139587) *
               C47031 +
           ((C8771 * C827 - (C18637 * C821 + C18638 * C826) + C8772 * C822 -
             C8773 * C828 - C8774 * C823) *
                C47029 +
            (C8773 * C827 - (C8772 * C821 + C8771 * C826) + C8774 * C822 -
             (C554 * C8120 + C139463 * C8760) * C828 -
             (C554 * C8122 + C139463 * C8761) * C823) *
                C139587) *
               C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C3364 +
              (C554 * C116 + C139463 * C561) * C139303) *
                 C47029 +
             (C584 * C3364 + C585 * C139303) * C139587) *
                C47031 +
            ((C17699 + C17700) * C47029 + (C17701 + C17702) * C139587) *
                C139598) *
               C139571 -
           (((C18623 + C18624) * C139587 + (C18643 + C18644) * C47029) *
                C139598 +
            ((C2287 * C139303 + C2286 * C3364) * C139587 +
             ((C554 * C1707 + C139463 * C2268) * C139303 +
              (C554 * C1700 + C139463 * C2264) * C3364) *
                 C47029) *
                C47031) *
               C139384) *
              C2565 +
          ((((C18644 + C18643) * C47029 + (C18624 + C18623) * C139587) *
                C47031 +
            ((C18645 + C18646) * C47029 + (C18647 + C18648) * C139587) *
                C139598) *
               C139384 -
           (((C17703 + C17704) * C139587 + (C17705 + C17706) * C47029) *
                C139598 +
            ((C17702 + C17701) * C139587 + (C17700 + C17699) * C47029) *
                C47031) *
               C139571) *
              C2566 +
          ((((C17706 + C17705) * C47029 + (C17704 + C17703) * C139587) *
                C47031 +
            ((C17715 + C17716) * C47029 + (C17711 + C17712) * C139587) *
                C139598) *
               C139571 -
           ((((C554 * C17960 + C139463 * C18620) * C139303 +
              (C554 * C17958 + C139463 * C18618) * C3364) *
                 C139587 +
             ((C554 * C17961 + C139463 * C18621) * C139303 +
              (C554 * C17959 + C139463 * C18619) * C3364) *
                 C47029) *
                C139598 +
            ((C18648 + C18647) * C139587 + (C18646 + C18645) * C47029) *
                C47031) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C139463 * C555) * C181 +
              (C554 * C182 + C139463 * C641) * C139346) *
                 C47029 +
             (C648 + C664) * C139587) *
                C47031 +
            ((C15026 * C181 + C15138 * C139346) * C47029 +
             (C14134 + C14135) * C139587) *
                C139598) *
               C821 -
           (((C14136 + C14137) * C139587 + (C14135 + C14134) * C47029) *
                C139598 +
            ((C665 + C651) * C139587 + (C664 + C648) * C47029) * C47031) *
               C822 +
           ((C668 * C47029 + (C656 + C666) * C139587) * C47031 +
            ((C14137 + C14136) * C47029 + (C14138 + C14139) * C139587) *
                C139598) *
               C823) *
              C139571 +
          ((((C2371 + C2383) * C47029 + (C2374 + C2384) * C139587) * C47031 +
            ((C16077 + C16078) * C47029 + (C16079 + C16080) * C139587) *
                C139598) *
               C822 -
           (((C16078 + C16077) * C139587 +
             (C18755 * C139346 + C18638 * C181) * C47029) *
                C139598 +
            ((C2383 + C2371) * C139587 +
             ((C554 * C1794 + C139463 * C2368) * C139346 +
              (C554 * C1700 + C139463 * C2264) * C181) *
                 C47029) *
                C47031) *
               C821 -
           ((((C554 * C8222 + C139463 * C8872) * C139346 +
              (C554 * C8120 + C139463 * C8760) * C181) *
                 C139587 +
             (C16080 + C16079) * C47029) *
                C139598 +
            ((C2385 + C2377) * C139587 + C2386 * C47029) * C47031) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C2660 +
             (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
             C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
                C47029 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C139587) *
               C47031 +
           ((C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
             C17713 * C2662 + C17787 * C2567) *
                C47029 +
            (C17065 + C17066 - C17067 - C17068 + C17069 + C17074) * C139587) *
               C139598) *
              C139303 * C139571 +
          (((C18638 * C2661 -
             ((C554 * C1794 + C139463 * C2368) * C2565 +
              (C554 * C1700 + C139463 * C2264) * C2660) +
             C18755 * C2566 - C18639 * C2662 - C18756 * C2567) *
                C47029 +
            (C8771 * C2661 - (C2380 * C2565 + C2286 * C2660) + C8884 * C2566 -
             C18641 * C2662 - C18757 * C2567) *
                C139587) *
               C47031 +
           ((C18639 * C2661 - (C18755 * C2565 + C18638 * C2660) +
             C18756 * C2566 - (C554 * C17959 + C139463 * C18619) * C2662 -
             (C554 * C18089 + C139463 * C18746) * C2567) *
                C47029 +
            (C18641 * C2661 - (C8884 * C2565 + C8771 * C2660) + C18757 * C2566 -
             (C554 * C17958 + C139463 * C18618) * C2662 -
             (C554 * C18088 + C139463 * C18747) * C2567) *
                C139587) *
               C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C47029 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C47031 +
           ((C18858 + C18859 - C18860 - C18876) * C47029 + C24431 * C139587) *
               C139598) *
              C139346 * C821 +
          (((C2468 - (C2467 + C2466) + C2485) * C47029 +
            (C2473 - (C2472 + C2471) + C2487) * C139587) *
               C47031 +
           (C24432 * C47029 + (C8992 - (C8993 + C8994) + C9000) * C139587) *
               C139598) *
              C139346 * C822 +
          ((C2489 * C47029 + (C2478 + C2477 - C2476 - C2488) * C139587) *
               C47031 +
           ((C8994 + C8993 - C8992 - C9000) * C47029 +
            (C1422 * C1875 + C1617 * C139571 -
             (C554 * C8120 + C139463 * C8760) * C1876 -
             (C554 * C8322 + C139463 * C8985) * C139384) *
                C139587) *
               C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C47029 +
            (C2466 + C2467 - C2468 - C2485) * C139587) *
               C47031 +
           ((C18858 + C18859 - C18860 - C18876) * C47029 + C24431 * C139587) *
               C139598) *
              C2565 +
          (((C18860 - (C18859 + C18858) + C18876) * C47029 + C24432 * C139587) *
               C47031 +
           ((C18863 - (C18864 + C18865) + C18877) * C47029 +
            (C18868 - (C18869 + C18870) + C18878) * C139587) *
               C139598) *
              C2566 +
          (((C18865 + C18864 - C18863 - C18877) * C47029 +
            (C18870 + C18869 - C18868 - C18878) * C139587) *
               C47031 +
           ((C17713 * C1875 + C17859 * C139571 -
             (C554 * C17959 + C139463 * C18619) * C1876 -
             (C554 * C18203 + C139463 * C18855) * C139384) *
                C47029 +
            (C16961 * C1875 + C17182 * C139571 -
             (C554 * C17958 + C139463 * C18618) * C1876 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139587) *
               C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6694 +
            (C63381 * C116 + C139289 * C125) * C139601 -
            (C63381 * C108 + C139289 * C114) * C6695 -
            (C63381 * C117 + C139289 * C126) * C139590 +
            (C63381 * C109 + C139289 * C115) * C6696 +
            (C63381 * C118 + C139289 * C127) * C6691) *
               C63378 +
           (C69167 + C69168 - C69169 - C69170 + C69171 + C69172) * C63379 +
           (C69173 + C69174 - C69175 - C69176 + C69177 + C69178) * C63380) *
              C139463 * C139372 * C6692 +
          ((C69169 - (C69168 + C69167) + C69170 - C69171 - C69172) * C63378 +
           (C69175 - (C69174 + C69173) + C69176 - C69177 - C69178) * C63379 +
           (C65311 * C6695 - (C65312 * C139601 + C65313 * C6694) +
            C65314 * C139590 - (C63381 * C3365 + C139289 * C3371) * C6696 -
            (C63381 * C3368 + C139289 * C3374) * C6691) *
               C63380) *
              C139463 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139289 * C113) * C6771 +
                      (C63381 * C182 + C139289 * C188) * C6692 -
                      C63884 * C6772 - C63994 * C139360) *
                         C63378 +
                     (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                      C63995 * C139360) *
                         C63379 +
                     (C63890 * C6771 + C63995 * C6692 - C65313 * C6772 -
                      C65399 * C139360) *
                         C63380) *
                        C139463 * C139601 +
                    ((C63886 * C6772 -
                      ((C63381 * C183 + C139289 * C189) * C6692 +
                       (C63381 * C108 + C139289 * C114) * C6771) +
                      C63996 * C139360) *
                         C63378 +
                     (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                      C63997 * C139360) *
                         C63379 +
                     (C65311 * C6772 - (C63997 * C6692 + C63892 * C6771) +
                      C65400 * C139360) *
                         C63380) *
                        C139463 * C139590 +
                    (((C63381 * C109 + C139289 * C115) * C6771 +
                      (C63381 * C184 + C139289 * C190) * C6692 -
                      C63888 * C6772 - C63998 * C139360) *
                         C63378 +
                     (C63888 * C6771 + C63998 * C6692 - C63894 * C6772 -
                      C63999 * C139360) *
                         C63379 +
                     (C63894 * C6771 + C63999 * C6692 -
                      (C63381 * C3365 + C139289 * C3371) * C6772 -
                      (C63381 * C3431 + C139289 * C3434) * C139360) *
                         C63380) *
                        C139463 * C6691) *
                   C139372) /
                  (p * q * std::sqrt(p + q));
    d2eexz[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C244 +
                       (C63381 * C245 + C139289 * C251) * C139372) *
                          C63378 +
                      (C64074 + C64098) * C63379 + C65475 * C63380) *
                         C139463 * C6692 -
                     (C66119 * C63380 + (C64099 + C64077) * C63379 +
                      (C64098 + C64074) * C63378) *
                         C139463 * C139360) *
                        C139601 +
                    (((C64080 + C64100) * C63378 + (C64083 + C64101) * C63379 +
                      (C65479 + C65486) * C63380) *
                         C139463 * C139360 -
                     (C65482 * C63380 + (C64100 + C64080) * C63379 +
                      ((C63381 * C246 + C139289 * C252) * C139372 +
                       (C63381 * C108 + C139289 * C114) * C244) *
                          C63378) *
                         C139463 * C6692) *
                        C139590 +
                    ((((C63381 * C109 + C139289 * C115) * C244 +
                       (C63381 * C247 + C139289 * C253) * C139372) *
                          C63378 +
                      (C64086 + C64102) * C63379 + (C64089 + C64103) * C63380) *
                         C139463 * C6692 -
                     (((C63381 * C3487 + C139289 * C3490) * C139372 +
                       (C63381 * C3365 + C139289 * C3371) * C244) *
                          C63380 +
                      (C64103 + C64089) * C63379 + (C64102 + C64086) * C63378) *
                         C139463 * C139360) *
                        C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C6694 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139601 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C6695 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139590 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C6696 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                      C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                         C6691) *
                        C139463 * C139289 * C139372 * C6692 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C6695 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139601 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C6694) +
                     (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                      C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                         C139590 -
                     (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                      C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                         C6696 -
                     (C63534 * C3368 + C63380 * C3546 + C63533 * C2579 +
                      C63379 * C2833 + C63532 * C837 + C63378 * C1100) *
                         C6691) *
                        C139463 * C139289 * C139372 * C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C6771 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C6692 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C6772 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139360) *
                        C139463 * C139289 * C139601 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C6772 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C6692 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C6771) +
                     (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                      C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                         C139360) *
                        C139463 * C139289 * C139590 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C6771 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                      C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                         C6692 -
                     (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                      C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                         C6772 -
                     (C63534 * C3431 + C63380 * C3601 + C63533 * C2665 +
                      C63379 * C2923 + C63532 * C925 + C63378 * C1197) *
                         C139360) *
                        C139463 * C139289 * C6691) *
                   C139372) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139372) *
                         C139463 * C139289 * C6692 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139372 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C244) *
                         C139463 * C139289 * C139360) *
                        C139601 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C244 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139372) *
                         C139463 * C139289 * C139360 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139372 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139463 * C139289 * C6692) *
                        C139590 +
                    (((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                       C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                          C244 +
                      (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                       C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                          C139372) *
                         C139463 * C139289 * C6692 -
                     ((C63534 * C3487 + C63380 * C3652 + C63533 * C2747 +
                       C63379 * C3019 + C63532 * C1009 + C63378 * C1299) *
                          C139372 +
                      (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                       C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                          C244) *
                         C139463 * C139289 * C139360) *
                        C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C6694 +
            (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
            C585 * C139590 + C586 * C6696 + C587 * C6691) *
               C139289 * C63378 +
           (C22077 + C22078 - C22079 - C22080 + C22081 + C22082) * C139289 *
               C63379 +
           (C69623 + C69624 - C69625 - C69626 + C69627 + C69628) * C139289 *
               C63380) *
              C139372 * C6692 +
          ((C22079 - (C22078 + C22077) + C22080 - C22081 - C22082) * C139289 *
               C63378 +
           (C69625 - (C69624 + C69623) + C69626 - C69627 - C69628) * C139289 *
               C63379 +
           (C16961 * C6695 - (C17714 * C139601 + C17713 * C6694) +
            C16962 * C139590 - (C554 * C3365 + C139463 * C3705) * C6696 -
            (C554 * C3368 + C139463 * C3708) * C6691) *
               C139289 * C63380) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C6771 +
                      (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
                      C15138 * C139360) *
                         C139289 * C63378 +
                     (C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                      C17072 * C139360) *
                         C139289 * C63379 +
                     (C16960 * C6771 + C17072 * C6692 - C17713 * C6772 -
                      C17787 * C139360) *
                         C139289 * C63380) *
                        C139601 +
                    ((C7236 - (C7235 + C7234) + C7237) * C139289 * C63378 +
                     (C22189 - (C22188 + C22187) + C22190) * C139289 * C63379 +
                     (C16961 * C6772 - (C3218 * C6692 + C3122 * C6771) +
                      C17073 * C139360) *
                         C139289 * C63380) *
                        C139590 +
                    (C7248 * C139289 * C63378 +
                     (C22193 + C22192 - C22191 - C22194) * C139289 * C63379 +
                     (C3124 * C6771 + C3219 * C6692 -
                      (C554 * C3365 + C139463 * C3705) * C6772 -
                      (C554 * C3431 + C139463 * C3763) * C139360) *
                         C139289 * C63380) *
                        C6691) *
                   C139372) /
                  (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C139289 * C63378 +
            (C15237 + C15244) * C139289 * C63379 + C65941 * C63380) *
               C6692 -
           (C66452 * C63380 + (C17183 + C17176) * C139289 * C63379 +
            (C15244 + C15237) * C139289 * C63378) *
               C139360) *
              C139601 +
          ((C15240 * C139289 * C63378 + C17177 * C139289 * C63379 +
            (C17178 + C17184) * C139289 * C63380) *
               C139360 -
           (C65940 * C63380 + C15241 * C139289 * C63379 +
            (C742 + C726) * C139289 * C63378) *
               C6692) *
              C139590 +
          ((C746 * C139289 * C63378 + C15242 * C139289 * C63379 +
            (C3303 + C3309) * C139289 * C63380) *
               C6692 -
           (((C554 * C3487 + C139463 * C3814) * C139372 +
             (C554 * C3365 + C139463 * C3705) * C244) *
                C139289 * C63380 +
            (C3309 + C3303) * C139289 * C63379 + C1621 * C139289 * C63378) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7401 +
            (C63381 * C116 + C139289 * C125) * C7396 -
            (C63381 * C108 + C139289 * C114) * C7402 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C63378 +
           (C69851 + C69852 - C69853 - C69854) * C63379 + C69865 * C63380) *
              C139463 * C139372 * C139602 +
          ((C69853 - (C69852 + C69851) + C69854) * C63378 +
           (C69857 - (C69856 + C69855) + C69858) * C63379 +
           (C69859 - (C69860 + C69861) + C69862) * C63380) *
              C139463 * C139372 * C139593 +
          (C69865 * C63378 + (C69861 + C69860 - C69859 - C69862) * C63379 +
           (C66008 * C7401 + C66009 * C7396 -
            (C63381 * C17250 + C139289 * C17254) * C7402 -
            (C63381 * C17252 + C139289 * C17256) * C139308) *
               C63380) *
              C139463 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7477 +
            (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
            C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
               C63378 +
           (C63884 * C7477 + C63994 * C139602 - C63890 * C7478 -
            C63995 * C139593 + C65313 * C7479 + C65399 * C7400) *
               C63379 +
           (C63890 * C7477 + C63995 * C139602 - C65313 * C7478 -
            C65399 * C139593 + C66008 * C7479 + C66066 * C7400) *
               C63380) *
              C139463 * C7396 +
          ((C63886 * C7478 -
            ((C63381 * C183 + C139289 * C189) * C139602 +
             (C63381 * C108 + C139289 * C114) * C7477) +
            C63996 * C139593 - C63892 * C7479 - C63997 * C7400) *
               C63378 +
           (C63892 * C7478 - (C63996 * C139602 + C63886 * C7477) +
            C63997 * C139593 - C65311 * C7479 - C65400 * C7400) *
               C63379 +
           (C65311 * C7478 - (C63997 * C139602 + C63892 * C7477) +
            C65400 * C139593 - (C63381 * C17250 + C139289 * C17254) * C7479 -
            (C63381 * C17336 + C139289 * C17338) * C7400) *
               C63380) *
              C139463 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C244 +
                       (C63381 * C245 + C139289 * C251) * C139372) *
                          C63378 +
                      (C64074 + C64098) * C63379 + C65475 * C63380) *
                         C139463 * C139602 -
                     (C66119 * C63380 + (C64099 + C64077) * C63379 +
                      (C64098 + C64074) * C63378) *
                         C139463 * C139593 +
                     (C65475 * C63378 + (C65478 + C65485) * C63379 +
                      (C66120 + C66124) * C63380) *
                         C139463 * C7400) *
                        C7396 +
                    (((C64080 + C64100) * C63378 + (C64083 + C64101) * C63379 +
                      (C65479 + C65486) * C63380) *
                         C139463 * C139593 -
                     (C65482 * C63380 + (C64100 + C64080) * C63379 +
                      ((C63381 * C246 + C139289 * C252) * C139372 +
                       (C63381 * C108 + C139289 * C114) * C244) *
                          C63378) *
                         C139463 * C139602 -
                     (((C63381 * C17412 + C139289 * C17414) * C139372 +
                       (C63381 * C17250 + C139289 * C17254) * C244) *
                          C63380 +
                      (C65486 + C65479) * C63379 + C65482 * C63378) *
                         C139463 * C7400) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C7401 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C7396 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C7402 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139308) *
                        C139463 * C139289 * C139372 * C139602 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C7402 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C7396 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C7401) +
                     (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                      C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                         C139308) *
                        C139463 * C139289 * C139372 * C139593 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C7401 +
                     (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                      C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                         C7396 -
                     (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                      C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                         C7402 -
                     (C63534 * C17252 + C63380 * C17490 + C63533 * C3369 +
                      C63379 * C3547 + C63532 * C2578 + C63378 * C2832) *
                         C139308) *
                        C139463 * C139289 * C139372 * C7400)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C7477 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139602 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C7478 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139593 +
                     (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C7479 +
                     (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                      C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                         C7400) *
                        C139463 * C139289 * C7396 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C7478 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139602 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C7477) +
                     (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                      C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                         C139593 -
                     (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                      C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                         C7479 -
                     (C63534 * C17336 + C63380 * C17559 + C63533 * C3432 +
                      C63379 * C3600 + C63532 * C2664 + C63378 * C2922) *
                         C7400) *
                        C139463 * C139289 * C139308) *
                   C139372) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139372) *
                         C139463 * C139289 * C139602 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139372 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C244) *
                         C139463 * C139289 * C139593 +
                     ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                       C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                          C244 +
                      (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                       C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                          C139372) *
                         C139463 * C139289 * C7400) *
                        C7396 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C244 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139372) *
                         C139463 * C139289 * C139593 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139372 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139463 * C139289 * C139602 -
                     ((C63534 * C17412 + C63380 * C17626 + C63533 * C3488 +
                       C63379 * C3653 + C63532 * C2746 + C63378 * C3018) *
                          C139372 +
                      (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                       C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                          C244) *
                         C139463 * C139289 * C7400) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C7401 +
                      (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
                      C585 * C139308) *
                         C139289 * C63378 +
                     (C22979 + C22980 - C22981 - C22982) * C139289 * C63379 +
                     C70317 * C63380) *
                        C139372 * C139602 +
                    ((C22981 - (C22980 + C22979) + C22982) * C139289 * C63378 +
                     (C22987 - (C22988 + C22989) + C22990) * C139289 * C63379 +
                     (C70311 - (C70312 + C70313) + C70314) * C139289 * C63380) *
                        C139372 * C139593 +
                    (C70317 * C63378 +
                     (C70313 + C70312 - C70311 - C70314) * C139289 * C63379 +
                     (C66339 * C7401 + C66340 * C7396 -
                      (C554 * C17250 + C139463 * C17694) * C7402 -
                      (C554 * C17252 + C139463 * C17696) * C139308) *
                         C139289 * C63380) *
                        C139372 * C7400)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C7477 +
            (C554 * C182 + C139463 * C641) * C139602 - C15026 * C7478 -
            C15138 * C139593 + C16960 * C7479 + C17072 * C7400) *
               C139289 * C63378 +
           (C15026 * C7477 + C15138 * C139602 - C16960 * C7478 -
            C17072 * C139593 + C17713 * C7479 + C17787 * C7400) *
               C139289 * C63379 +
           (C16960 * C7477 + C17072 * C139602 - C17713 * C7478 -
            C17787 * C139593 + C66339 * C7479 + C66396 * C7400) *
               C139289 * C63380) *
              C7396 +
          ((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C139289 *
               C63378 +
           (C23095 - (C23094 + C23093) + C23096 - C23097 - C23098) * C139289 *
               C63379 +
           (C16961 * C7478 - (C3218 * C139602 + C3122 * C7477) +
            C17073 * C139593 - (C554 * C17250 + C139463 * C17694) * C7479 -
            (C554 * C17336 + C139463 * C17783) * C7400) *
               C139289 * C63380) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C244 +
                       (C554 * C245 + C139463 * C719) * C139372) *
                          C139289 * C63378 +
                      (C15237 + C15244) * C139289 * C63379 + C65941 * C63380) *
                         C139602 -
                     (C66452 * C63380 + (C17183 + C17176) * C139289 * C63379 +
                      (C15244 + C15237) * C139289 * C63378) *
                         C139593 +
                     (C65941 * C63378 + (C17856 + C17860) * C139289 * C63379 +
                      (C66449 + C66454) * C139289 * C63380) *
                         C7400) *
                        C7396 +
                    ((C15240 * C139289 * C63378 + C17177 * C139289 * C63379 +
                      (C17178 + C17184) * C139289 * C63380) *
                         C139593 -
                     (C65940 * C63380 + C15241 * C139289 * C63379 +
                      (C742 + C726) * C139289 * C63378) *
                         C139602 -
                     (((C554 * C17412 + C139463 * C17853) * C139372 +
                       (C554 * C17250 + C139463 * C17694) * C244) *
                          C139289 * C63380 +
                      (C17184 + C17178) * C139289 * C63379 + C65940 * C63378) *
                         C7400) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C63378 +
            (C69851 + C69852 - C69853 - C69854) * C63379 + C69865 * C63380) *
               C139463 * C139571 +
           (((C63381 * C1697 + C139289 * C1702) * C7402 -
             ((C63381 * C1707 + C139289 * C1714) * C7396 +
              (C63381 * C1700 + C139289 * C1708) * C7401) +
             (C63381 * C1706 + C139289 * C1713) * C139308) *
                C63378 +
            (C70580 - (C70566 + C70567) + C70581) * C63379 +
            (C70582 - (C70572 + C70573) + C70583) * C63380) *
               C139463 * C139384) *
              C6692 +
          (((C69853 - (C69852 + C69851) + C69854) * C63378 +
            (C69857 - (C69856 + C69855) + C69858) * C63379 +
            (C69859 - (C69860 + C69861) + C69862) * C63380) *
               C139463 * C139571 +
           ((C70567 + C70566 - C70580 - C70581) * C63378 +
            (C70573 + C70572 - C70582 - C70583) * C63379 +
            (C66549 * C7401 + C66550 * C7396 -
             (C63381 * C17958 + C139289 * C17962) * C7402 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C63380) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C6771 +
                       (C63381 * C182 + C139289 * C188) * C6692 -
                       C63884 * C6772 - C63994 * C139360) *
                          C63378 +
                      (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                       C63995 * C139360) *
                          C63379 +
                      (C63890 * C6771 + C63995 * C6692 - C65313 * C6772 -
                       C65399 * C139360) *
                          C63380) *
                         C139463 * C7396 +
                     ((C63886 * C6772 -
                       ((C63381 * C183 + C139289 * C189) * C6692 +
                        (C63381 * C108 + C139289 * C114) * C6771) +
                       C63996 * C139360) *
                          C63378 +
                      (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                       C63997 * C139360) *
                          C63379 +
                      (C65311 * C6772 - (C63997 * C6692 + C63892 * C6771) +
                       C65400 * C139360) *
                          C63380) *
                         C139463 * C139308) *
                        C139571 +
                    (((C66548 * C6772 -
                       ((C63381 * C1794 + C139289 * C1799) * C6692 +
                        (C63381 * C1700 + C139289 * C1708) * C6771) +
                       C66640 * C139360) *
                          C63378 +
                      (C66546 * C6772 - (C66640 * C6692 + C66548 * C6771) +
                       C66641 * C139360) *
                          C63379 +
                      (C66549 * C6772 - (C66641 * C6692 + C66546 * C6771) +
                       C66642 * C139360) *
                          C63380) *
                         C139463 * C7396 +
                     (((C63381 * C1697 + C139289 * C1702) * C6771 +
                       (C63381 * C1791 + C139289 * C1796) * C6692 -
                       C70576 * C6772 - C70686 * C139360) *
                          C63378 +
                      (C70576 * C6771 + C70686 * C6692 - C70578 * C6772 -
                       C70687 * C139360) *
                          C63379 +
                      (C70578 * C6771 + C70687 * C6692 -
                       (C63381 * C17958 + C139289 * C17962) * C6772 -
                       (C63381 * C18088 + C139289 * C18090) * C139360) *
                          C63380) *
                         C139463 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 -
             (C63381 * C1700 + C139289 * C1708) * C1876 -
             (C63381 * C1879 + C139289 * C1884) * C139384) *
                C63378 +
            (C66719 + C66720 - C66721 - C66738) * C63379 + C66742 * C63380) *
               C139463 * C6692 +
           ((C66721 - (C66720 + C66719) + C66738) * C63378 +
            (C66726 - (C66725 + C66724) + C66740) * C63379 +
            (C66729 - (C66730 + C66731) + C66741) * C63380) *
               C139463 * C139360) *
              C7396 +
          ((((C63381 * C1697 + C139289 * C1702) * C1876 -
             ((C63381 * C246 + C139289 * C252) * C139571 +
              (C63381 * C108 + C139289 * C114) * C1875) +
             (C63381 * C1878 + C139289 * C1883) * C139384) *
                C63378 +
            (C70786 - (C70787 + C70788) + C70798) * C63379 +
            (C70791 - (C70792 + C70793) + C70799) * C63380) *
               C139463 * C6692 +
           ((C70788 + C70787 - C70786 - C70798) * C63378 +
            (C70793 + C70792 - C70791 - C70799) * C63379 +
            (C65311 * C1875 + C65484 * C139571 -
             (C63381 * C17958 + C139289 * C17962) * C1876 -
             (C63381 * C18202 + C139289 * C18204) * C139384) *
                C63380) *
               C139463 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C7401 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C7396 -
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C7402 -
                      (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                       C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                          C139308) *
                         C139463 * C139289 * C139571 +
                     ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C7402 -
                      ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                        C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                           C7396 +
                       (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                        C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                           C7401) +
                      (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                       C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                          C139308) *
                         C139463 * C139289 * C139384) *
                        C6692 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C7402 -
                      ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                        C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                           C7396 +
                       (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                        C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                           C7401) +
                      (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                       C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                          C139308) *
                         C139463 * C139289 * C139571 +
                     ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C7401 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C7396 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C7402 -
                      (C63534 * C17960 + C63380 * C18318 + C63533 * C3904 +
                       C63379 * C4171 + C63532 * C3901 + C63378 * C4168) *
                          C139308) *
                         C139463 * C139289 * C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C6771 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C6692 -
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C6772 -
                      (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                       C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                          C139360) *
                         C139463 * C139289 * C7396 +
                     ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C6772 -
                      ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                        C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                           C6692 +
                       (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                        C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                           C6771) +
                      (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                       C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                          C139360) *
                         C139463 * C139289 * C139308) *
                        C139571 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C6772 -
                      ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                        C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                           C6692 +
                       (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                        C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                           C6771) +
                      (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                       C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                          C139360) *
                         C139463 * C139289 * C7396 +
                     ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C6771 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C6692 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C6772 -
                      (C63534 * C18088 + C63380 * C18419 + C63533 * C3993 +
                       C63379 * C4250 + C63532 * C3990 + C63378 * C4249) *
                          C139360) *
                         C139463 * C139289 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C1875 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139571 -
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C1876 -
                      (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                       C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                          C139384) *
                         C139463 * C139289 * C6692 +
                     ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C1876 -
                      ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                        C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                           C139571 +
                       (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                        C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                           C1875) +
                      (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                       C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                          C139384) *
                         C139463 * C139289 * C139360) *
                        C7396 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C1876 -
                      ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                        C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                           C139571 +
                       (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                        C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                           C1875) +
                      (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                       C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                          C139384) *
                         C139463 * C139289 * C6692 +
                     ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C1875 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139571 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C1876 -
                      (C63534 * C18202 + C63380 * C18519 + C63533 * C4079 +
                       C63379 * C4331 + C63532 * C4076 + C63378 * C4328) *
                          C139384) *
                         C139463 * C139289 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C139289 * C63378 +
            (C22979 + C22980 - C22981 - C22982) * C139289 * C63379 +
            C70317 * C63380) *
               C139571 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C139463 * C2268) * C7396 +
              (C554 * C1700 + C139463 * C2264) * C7401) +
             C2287 * C139308) *
                C139289 * C63378 +
            (C24155 - (C24156 + C24157) + C24158) * C139289 * C63379 +
            (C71192 - (C71193 + C71194) + C71195) * C139289 * C63380) *
               C139384) *
              C6692 +
          (((C22981 - (C22980 + C22979) + C22982) * C139289 * C63378 +
            (C22987 - (C22988 + C22989) + C22990) * C139289 * C63379 +
            (C70311 - (C70312 + C70313) + C70314) * C139289 * C63380) *
               C139571 +
           ((C24157 + C24156 - C24155 - C24158) * C139289 * C63378 +
            (C71194 + C71193 - C71192 - C71195) * C139289 * C63379 +
            (C67051 * C7401 + C67052 * C7396 -
             (C554 * C17958 + C139463 * C18618) * C7402 -
             (C554 * C17960 + C139463 * C18620) * C139308) *
                C139289 * C63380) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[62] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C6771 +
                       (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
                       C15138 * C139360) *
                          C139289 * C63378 +
                      (C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                       C17072 * C139360) *
                          C139289 * C63379 +
                      (C16960 * C6771 + C17072 * C6692 - C17713 * C6772 -
                       C17787 * C139360) *
                          C139289 * C63380) *
                         C7396 +
                     ((C7236 - (C7235 + C7234) + C7237) * C139289 * C63378 +
                      (C22189 - (C22188 + C22187) + C22190) * C139289 * C63379 +
                      (C16961 * C6772 - (C3218 * C6692 + C3122 * C6771) +
                       C17073 * C139360) *
                          C139289 * C63380) *
                         C139308) *
                        C139571 +
                    (((C18638 * C6772 -
                       ((C554 * C1794 + C139463 * C2368) * C6692 +
                        (C554 * C1700 + C139463 * C2264) * C6771) +
                       C18755 * C139360) *
                          C139289 * C63378 +
                      (C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                       C18756 * C139360) *
                          C139289 * C63379 +
                      (C67051 * C6772 - (C18756 * C6692 + C18639 * C6771) +
                       C67132 * C139360) *
                          C139289 * C63380) *
                         C7396 +
                     ((C8876 + C8875 - C8874 - C8886) * C139289 * C63378 +
                      (C24295 + C24294 - C24293 - C24296) * C139289 * C63379 +
                      (C18641 * C6771 + C18757 * C6692 -
                       (C554 * C17958 + C139463 * C18618) * C6772 -
                       (C554 * C18088 + C139463 * C18747) * C139360) *
                          C139289 * C63380) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C1875 +
             (C554 * C245 + C139463 * C719) * C139571 -
             (C554 * C1700 + C139463 * C2264) * C1876 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C139289 * C63378 +
            (C18858 + C18859 - C18860 - C18876) * C139289 * C63379 +
            C67218 * C63380) *
               C6692 +
           ((C18860 - (C18859 + C18858) + C18876) * C139289 * C63378 +
            (C18863 - (C18864 + C18865) + C18877) * C139289 * C63379 +
            (C67209 - (C67210 + C67211) + C67217) * C139289 * C63380) *
               C139360) *
              C7396 +
          (((C2468 - (C2467 + C2466) + C2485) * C139289 * C63378 +
            C24432 * C139289 * C63379 +
            (C18868 - (C18869 + C18870) + C18878) * C139289 * C63380) *
               C6692 +
           (C24431 * C139289 * C63378 +
            (C18870 + C18869 - C18868 - C18878) * C139289 * C63379 +
            (C16961 * C1875 + C17182 * C139571 -
             (C554 * C17958 + C139463 * C18618) * C1876 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139289 * C63380) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C63378 +
            (C65294 + C65295 - C65296 - C65297) * C63379 + C65320 * C63380) *
               C139463 * C9074 +
           (((C63381 * C1697 + C139289 * C1702) * C137101 -
             ((C63381 * C1707 + C139289 * C1714) * C139562 +
              (C63381 * C1700 + C139289 * C1708) * C137108) +
             (C63381 * C1706 + C139289 * C1713) * C139308) *
                C63378 +
            (C73720 - (C73721 + C73722) + C73723) * C63379 +
            (C73724 - (C73725 + C73726) + C73727) * C63380) *
               C139463 * C139384) *
              C6692 +
          (((C65296 - (C65295 + C65294) + C65297) * C63378 +
            (C65300 - (C65299 + C65298) + C65301) * C63379 +
            (C65316 - (C65317 + C65318) + C65319) * C63380) *
               C139463 * C9074 +
           ((C73722 + C73721 - C73720 - C73723) * C63378 +
            (C73726 + C73725 - C73724 - C73727) * C63379 +
            (C66549 * C137108 + C66550 * C139562 -
             (C63381 * C17958 + C139289 * C17962) * C137101 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C63380) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C6771 +
                       (C63381 * C182 + C139289 * C188) * C6692 -
                       C63884 * C6772 - C63994 * C139360) *
                          C63378 +
                      (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                       C63995 * C139360) *
                          C63379 +
                      (C63890 * C6771 + C63995 * C6692 - C65313 * C6772 -
                       C65399 * C139360) *
                          C63380) *
                         C139463 * C139562 +
                     ((C63886 * C6772 -
                       ((C63381 * C183 + C139289 * C189) * C6692 +
                        (C63381 * C108 + C139289 * C114) * C6771) +
                       C63996 * C139360) *
                          C63378 +
                      (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                       C63997 * C139360) *
                          C63379 +
                      (C65311 * C6772 - (C63997 * C6692 + C63892 * C6771) +
                       C65400 * C139360) *
                          C63380) *
                         C139463 * C139308) *
                        C9074 +
                    (((C66548 * C6772 -
                       ((C63381 * C1794 + C139289 * C1799) * C6692 +
                        (C63381 * C1700 + C139289 * C1708) * C6771) +
                       C66640 * C139360) *
                          C63378 +
                      (C66546 * C6772 - (C66640 * C6692 + C66548 * C6771) +
                       C66641 * C139360) *
                          C63379 +
                      (C66549 * C6772 - (C66641 * C6692 + C66546 * C6771) +
                       C66642 * C139360) *
                          C63380) *
                         C139463 * C139562 +
                     (((C63381 * C1697 + C139289 * C1702) * C6771 +
                       (C63381 * C1791 + C139289 * C1796) * C6692 -
                       C70576 * C6772 - C70686 * C139360) *
                          C63378 +
                      (C70576 * C6771 + C70686 * C6692 - C70578 * C6772 -
                       C70687 * C139360) *
                          C63379 +
                      (C70578 * C6771 + C70687 * C6692 -
                       (C63381 * C17958 + C139289 * C17962) * C6772 -
                       (C63381 * C18088 + C139289 * C18090) * C139360) *
                          C63380) *
                         C139463 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C9224 +
                       (C63381 * C245 + C139289 * C251) * C9074 -
                       (C63381 * C1700 + C139289 * C1708) * C9225 -
                       (C63381 * C1879 + C139289 * C1884) * C139384) *
                          C63378 +
                      (C72352 + C72353 - C72354 - C72355) * C63379 +
                      (C72356 + C72357 - C72358 - C72359) * C63380) *
                         C139463 * C6692 +
                     ((C72354 - (C72353 + C72352) + C72355) * C63378 +
                      (C72358 - (C72357 + C72356) + C72359) * C63379 +
                      (C66549 * C9225 - (C65483 * C9074 + C65313 * C9224) +
                       C66737 * C139384) *
                          C63380) *
                         C139463 * C139360) *
                        C139562 +
                    ((((C63381 * C1697 + C139289 * C1702) * C9225 -
                       ((C63381 * C246 + C139289 * C252) * C9074 +
                        (C63381 * C108 + C139289 * C114) * C9224) +
                       (C63381 * C1878 + C139289 * C1883) * C139384) *
                          C63378 +
                      (C72360 - (C72361 + C72362) + C72363) * C63379 +
                      (C72364 - (C72365 + C72366) + C72367) * C63380) *
                         C139463 * C6692 +
                     ((C72362 + C72361 - C72360 - C72363) * C63378 +
                      (C72366 + C72365 - C72364 - C72367) * C63379 +
                      (C65311 * C9224 + C65484 * C9074 -
                       (C63381 * C17958 + C139289 * C17962) * C9225 -
                       (C63381 * C18202 + C139289 * C18204) * C139384) *
                          C63380) *
                         C139463 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C137108 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C139562 -
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C137101 -
                      (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                       C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                          C139308) *
                         C139463 * C139289 * C9074 +
                     ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C137101 -
                      ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                        C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                           C139562 +
                       (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                        C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                           C137108) +
                      (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                       C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                          C139308) *
                         C139463 * C139289 * C139384) *
                        C6692 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C137101 -
                      ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                        C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                           C139562 +
                       (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                        C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                           C137108) +
                      (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                       C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                          C139308) *
                         C139463 * C139289 * C9074 +
                     ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C137108 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C139562 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C137101 -
                      (C63534 * C17960 + C63380 * C18318 + C63533 * C3904 +
                       C63379 * C4171 + C63532 * C3901 + C63378 * C4168) *
                          C139308) *
                         C139463 * C139289 * C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C6771 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C6692 -
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C6772 -
                      (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                       C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                          C139360) *
                         C139463 * C139289 * C139562 +
                     ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C6772 -
                      ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                        C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                           C6692 +
                       (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                        C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                           C6771) +
                      (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                       C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                          C139360) *
                         C139463 * C139289 * C139308) *
                        C9074 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C6772 -
                      ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                        C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                           C6692 +
                       (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                        C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                           C6771) +
                      (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                       C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                          C139360) *
                         C139463 * C139289 * C139562 +
                     ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C6771 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C6692 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C6772 -
                      (C63534 * C18088 + C63380 * C18419 + C63533 * C3993 +
                       C63379 * C4250 + C63532 * C3990 + C63378 * C4249) *
                          C139360) *
                         C139463 * C139289 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C9224 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C9074 -
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C9225 -
                      (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                       C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                          C139384) *
                         C139463 * C139289 * C6692 +
                     ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C9225 -
                      ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                        C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                           C9074 +
                       (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                        C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                           C9224) +
                      (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                       C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                          C139384) *
                         C139463 * C139289 * C139360) *
                        C139562 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C9225 -
                      ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                        C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                           C9074 +
                       (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                        C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                           C9224) +
                      (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                       C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                          C139384) *
                         C139463 * C139289 * C6692 +
                     ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C9224 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C9074 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C9225 -
                      (C63534 * C18202 + C63380 * C18519 + C63533 * C4079 +
                       C63379 * C4331 + C63532 * C4076 + C63378 * C4328) *
                          C139384) *
                         C139463 * C139289 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C137108 +
             (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
             C585 * C139308) *
                C139289 * C63378 +
            (C16937 + C16938 - C16939 - C16940) * C139289 * C63379 +
            C65790 * C63380) *
               C9074 +
           ((C2286 * C137101 -
             ((C554 * C1707 + C139463 * C2268) * C139562 +
              (C554 * C1700 + C139463 * C2264) * C137108) +
             C2287 * C139308) *
                C139289 * C63378 +
            (C28301 - (C28302 + C28303) + C28304) * C139289 * C63379 +
            (C74316 - (C74317 + C74318) + C74319) * C139289 * C63380) *
               C139384) *
              C6692 +
          (((C16939 - (C16938 + C16937) + C16940) * C139289 * C63378 +
            (C16945 - (C16963 + C16964) + C16950) * C139289 * C63379 +
            (C65784 - (C65785 + C65786) + C65787) * C139289 * C63380) *
               C9074 +
           ((C28303 + C28302 - C28301 - C28304) * C139289 * C63378 +
            (C74318 + C74317 - C74316 - C74319) * C139289 * C63379 +
            (C67051 * C137108 + C67052 * C139562 -
             (C554 * C17958 + C139463 * C18618) * C137101 -
             (C554 * C17960 + C139463 * C18620) * C139308) *
                C139289 * C63380) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C6771 +
                       (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
                       C15138 * C139360) *
                          C139289 * C63378 +
                      (C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                       C17072 * C139360) *
                          C139289 * C63379 +
                      (C16960 * C6771 + C17072 * C6692 - C17713 * C6772 -
                       C17787 * C139360) *
                          C139289 * C63380) *
                         C139562 +
                     ((C7236 - (C7235 + C7234) + C7237) * C139289 * C63378 +
                      (C22189 - (C22188 + C22187) + C22190) * C139289 * C63379 +
                      (C16961 * C6772 - (C3218 * C6692 + C3122 * C6771) +
                       C17073 * C139360) *
                          C139289 * C63380) *
                         C139308) *
                        C9074 +
                    (((C18638 * C6772 -
                       ((C554 * C1794 + C139463 * C2368) * C6692 +
                        (C554 * C1700 + C139463 * C2264) * C6771) +
                       C18755 * C139360) *
                          C139289 * C63378 +
                      (C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                       C18756 * C139360) *
                          C139289 * C63379 +
                      (C67051 * C6772 - (C18756 * C6692 + C18639 * C6771) +
                       C67132 * C139360) *
                          C139289 * C63380) *
                         C139562 +
                     ((C8876 + C8875 - C8874 - C8886) * C139289 * C63378 +
                      (C24295 + C24294 - C24293 - C24296) * C139289 * C63379 +
                      (C18641 * C6771 + C18757 * C6692 -
                       (C554 * C17958 + C139463 * C18618) * C6772 -
                       (C554 * C18088 + C139463 * C18747) * C139360) *
                          C139289 * C63380) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C9224 +
             (C554 * C245 + C139463 * C719) * C9074 -
             (C554 * C1700 + C139463 * C2264) * C9225 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C139289 * C63378 +
            (C26489 + C26490 - C26491 - C26492) * C139289 * C63379 +
            (C29453 + C29452 - C29451 - C29454) * C139289 * C63380) *
               C6692 +
           ((C26491 - (C26490 + C26489) + C26492) * C139289 * C63378 +
            (C29451 - (C29452 + C29453) + C29454) * C139289 * C63379 +
            (C67051 * C9225 - (C17859 * C9074 + C17713 * C9224) +
             C67215 * C139384) *
                C139289 * C63380) *
               C139360) *
              C139562 +
          (((C9689 - (C9688 + C9687) + C9690) * C139289 * C63378 +
            C26502 * C139289 * C63379 +
            (C26495 - (C26496 + C26497) + C26498) * C139289 * C63380) *
               C6692 +
           (C26501 * C139289 * C63378 +
            (C26497 + C26496 - C26495 - C26498) * C139289 * C63379 +
            (C16961 * C9224 + C17182 * C9074 -
             (C554 * C17958 + C139463 * C18618) * C9225 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139289 * C63380) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[64] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C3364 +
                       (C63381 * C116 + C139289 * C125) * C139303) *
                          C63378 +
                      (C65996 + C65997) * C63379 + C66006 * C63380) *
                         C139463 * C9074 -
                     (C66557 * C63380 + (C66553 + C66554) * C63379 +
                      ((C63381 * C1707 + C139289 * C1714) * C139303 +
                       (C63381 * C1700 + C139289 * C1708) * C3364) *
                          C63378) *
                         C139463 * C139384) *
                        C139602 +
                    (((C66554 + C66553) * C63378 + (C66552 + C66551) * C63379 +
                      (C66555 + C66556) * C63380) *
                         C139463 * C139384 -
                     (C66007 * C63380 + (C65999 + C65998) * C63379 +
                      (C65997 + C65996) * C63378) *
                         C139463 * C9074) *
                        C139593 +
                    ((C66006 * C63378 + (C66001 + C66000) * C63379 +
                      (C66010 + C66011) * C63380) *
                         C139463 * C9074 -
                     (((C63381 * C66529 + C139289 * C66531) * C139303 +
                       (C63381 * C66528 + C139289 * C66530) * C3364) *
                          C63380 +
                      (C66556 + C66555) * C63379 + C66557 * C63378) *
                         C139463 * C139384) *
                        C7400)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7477 +
            (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
            C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
               C63378 +
           (C63884 * C7477 + C63994 * C139602 - C63890 * C7478 -
            C63995 * C139593 + C65313 * C7479 + C65399 * C7400) *
               C63379 +
           (C63890 * C7477 + C63995 * C139602 - C65313 * C7478 -
            C65399 * C139593 + C66008 * C7479 + C66066 * C7400) *
               C63380) *
              C139463 * C139303 * C9074 +
          ((C66548 * C7478 -
            ((C63381 * C1794 + C139289 * C1799) * C139602 +
             (C63381 * C1700 + C139289 * C1708) * C7477) +
            C66640 * C139593 - C66546 * C7479 - C66641 * C7400) *
               C63378 +
           (C66546 * C7478 - (C66640 * C139602 + C66548 * C7477) +
            C66641 * C139593 - C66549 * C7479 - C66642 * C7400) *
               C63379 +
           (C66549 * C7478 - (C66641 * C139602 + C66546 * C7477) +
            C66642 * C139593 - (C63381 * C66528 + C139289 * C66530) * C7479 -
            (C63381 * C66631 + C139289 * C66632) * C7400) *
               C63380) *
              C139463 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C9224 +
            (C63381 * C245 + C139289 * C251) * C9074 -
            (C63381 * C1700 + C139289 * C1708) * C9225 -
            (C63381 * C1879 + C139289 * C1884) * C139384) *
               C63378 +
           (C72352 + C72353 - C72354 - C72355) * C63379 + C74744 * C63380) *
              C139463 * C139602 +
          ((C72354 - (C72353 + C72352) + C72355) * C63378 +
           (C72358 - (C72357 + C72356) + C72359) * C63379 +
           (C74739 - (C74740 + C74741) + C74742) * C63380) *
              C139463 * C139593 +
          (C74744 * C63378 + (C74741 + C74740 - C74739 - C74742) * C63379 +
           (C66008 * C9224 + C66123 * C9074 -
            (C63381 * C66528 + C139289 * C66530) * C9225 -
            (C63381 * C66716 + C139289 * C66717) * C139384) *
               C63380) *
              C139463 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[64] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C3364 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C139303) *
                         C139463 * C139289 * C9074 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139303 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C3364) *
                         C139463 * C139289 * C139384) *
                        C139602 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C3364 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C139303) *
                         C139463 * C139289 * C139384 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139303 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C3364) *
                         C139463 * C139289 * C9074) *
                        C139593 +
                    (((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                       C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                          C3364 +
                      (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                       C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                          C139303) *
                         C139463 * C139289 * C9074 -
                     ((C63534 * C66529 + C63380 * C66817 + C63533 * C17961 +
                       C63379 * C18319 + C63532 * C3905 + C63378 * C4172) *
                          C139303 +
                      (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                       C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                          C3364) *
                         C139463 * C139289 * C139384) *
                        C7400)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[64] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C7477 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139602 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C7478 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139593 +
                     (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C7479 +
                     (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                      C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                         C7400) *
                        C139463 * C139289 * C139303 * C9074 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C7478 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139602 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C7477) +
                     (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                      C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                         C139593 -
                     (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                      C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                         C7479 -
                     (C63534 * C66631 + C63380 * C66892 + C63533 * C18089 +
                      C63379 * C18418 + C63532 * C3994 + C63378 * C4248) *
                         C7400) *
                        C139463 * C139289 * C139303 * C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[64] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C9224 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C9074 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C9225 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139384) *
                        C139463 * C139289 * C139602 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C9225 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C9074 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C9224) +
                     (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                      C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                         C139384) *
                        C139463 * C139289 * C139593 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C9224 +
                     (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                      C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                         C9074 -
                     (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                      C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                         C9225 -
                     (C63534 * C66716 + C63380 * C66967 + C63533 * C18203 +
                      C63379 * C18518 + C63532 * C4080 + C63378 * C4330) *
                         C139384) *
                        C139463 * C139289 * C7400) *
                   C139303) /
                  (p * q * std::sqrt(p + q));
    d2eezx[64] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C3364 +
                       (C554 * C116 + C139463 * C561) * C139303) *
                          C139289 * C63378 +
                      (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                         C9074 -
                     (C67050 * C63380 + (C18643 + C18644) * C139289 * C63379 +
                      ((C554 * C1707 + C139463 * C2268) * C139303 +
                       (C554 * C1700 + C139463 * C2264) * C3364) *
                          C139289 * C63378) *
                         C139384) *
                        C139602 +
                    (((C18644 + C18643) * C139289 * C63378 +
                      (C18645 + C18646) * C139289 * C63379 +
                      (C67053 + C67054) * C139289 * C63380) *
                         C139384 -
                     (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                      (C17700 + C17699) * C139289 * C63378) *
                         C9074) *
                        C139593 +
                    ((C66337 * C63378 + (C17715 + C17716) * C139289 * C63379 +
                      (C66341 + C66342) * C139289 * C63380) *
                         C9074 -
                     (((C554 * C66529 + C139463 * C67043) * C139303 +
                       (C554 * C66528 + C139463 * C67042) * C3364) *
                          C139289 * C63380 +
                      (C67054 + C67053) * C139289 * C63379 + C67050 * C63378) *
                         C139384) *
                        C7400)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C7477 +
            (C554 * C182 + C139463 * C641) * C139602 - C15026 * C7478 -
            C15138 * C139593 + C16960 * C7479 + C17072 * C7400) *
               C139289 * C63378 +
           (C15026 * C7477 + C15138 * C139602 - C16960 * C7478 -
            C17072 * C139593 + C17713 * C7479 + C17787 * C7400) *
               C139289 * C63379 +
           (C16960 * C7477 + C17072 * C139602 - C17713 * C7478 -
            C17787 * C139593 + C66339 * C7479 + C66396 * C7400) *
               C139289 * C63380) *
              C139303 * C9074 +
          ((C18638 * C7478 -
            ((C554 * C1794 + C139463 * C2368) * C139602 +
             (C554 * C1700 + C139463 * C2264) * C7477) +
            C18755 * C139593 - C18639 * C7479 - C18756 * C7400) *
               C139289 * C63378 +
           (C18639 * C7478 - (C18755 * C139602 + C18638 * C7477) +
            C18756 * C139593 - C67051 * C7479 - C67132 * C7400) *
               C139289 * C63379 +
           (C67051 * C7478 - (C18756 * C139602 + C18639 * C7477) +
            C67132 * C139593 - (C554 * C66528 + C139463 * C67042) * C7479 -
            (C554 * C66631 + C139463 * C67128) * C7400) *
               C139289 * C63380) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[64] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C9224 +
                      (C554 * C245 + C139463 * C719) * C9074 -
                      (C554 * C1700 + C139463 * C2264) * C9225 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C139289 * C63378 +
                     (C26489 + C26490 - C26491 - C26492) * C139289 * C63379 +
                     C75196 * C63380) *
                        C139602 +
                    ((C26491 - (C26490 + C26489) + C26492) * C139289 * C63378 +
                     (C29451 - (C29452 + C29453) + C29454) * C139289 * C63379 +
                     (C75190 - (C75191 + C75192) + C75193) * C139289 * C63380) *
                        C139593 +
                    (C75196 * C63378 +
                     (C75192 + C75191 - C75190 - C75193) * C139289 * C63379 +
                     (C66339 * C9224 + C66453 * C9074 -
                      (C554 * C66528 + C139463 * C67042) * C9225 -
                      (C554 * C66716 + C139463 * C67206) * C139384) *
                         C139289 * C63380) *
                        C7400) *
                   C139303) /
                  (p * q * std::sqrt(p + q));
    d2eexx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C3364 +
                       (C63381 * C116 + C139289 * C125) * C139303) *
                          C63378 +
                      (C65996 + C65997) * C63379 + C66006 * C63380) *
                         C139463 * C139603 -
                     (C66557 * C63380 + (C66553 + C66554) * C63379 +
                      ((C63381 * C1707 + C139289 * C1714) * C139303 +
                       (C63381 * C1700 + C139289 * C1708) * C3364) *
                          C63378) *
                         C139463 * C139596 +
                     (((C63381 * C4656 + C139289 * C4660) * C3364 +
                       (C63381 * C4663 + C139289 * C4668) * C139303) *
                          C63378 +
                      (C67975 + C67976) * C63379 + (C67977 + C67978) * C63380) *
                         C139463 * C10691) *
                        C6692 +
                    (((C66554 + C66553) * C63378 + (C66552 + C66551) * C63379 +
                      (C66555 + C66556) * C63380) *
                         C139463 * C139596 -
                     (C66007 * C63380 + (C65999 + C65998) * C63379 +
                      (C65997 + C65996) * C63378) *
                         C139463 * C139603 -
                     (((C63381 * C67959 + C139289 * C67961) * C139303 +
                       (C63381 * C67958 + C139289 * C67960) * C3364) *
                          C63380 +
                      (C67978 + C67977) * C63379 + (C67976 + C67975) * C63378) *
                         C139463 * C10691) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139289 * C113) * C6771 +
                      (C63381 * C182 + C139289 * C188) * C6692 -
                      C63884 * C6772 - C63994 * C139360) *
                         C63378 +
                     (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                      C63995 * C139360) *
                         C63379 +
                     (C63890 * C6771 + C63995 * C6692 - C65313 * C6772 -
                      C65399 * C139360) *
                         C63380) *
                        C139463 * C139303 * C139603 +
                    ((C66548 * C6772 -
                      ((C63381 * C1794 + C139289 * C1799) * C6692 +
                       (C63381 * C1700 + C139289 * C1708) * C6771) +
                      C66640 * C139360) *
                         C63378 +
                     (C66546 * C6772 - (C66640 * C6692 + C66548 * C6771) +
                      C66641 * C139360) *
                         C63379 +
                     (C66549 * C6772 - (C66641 * C6692 + C66546 * C6771) +
                      C66642 * C139360) *
                         C63380) *
                        C139463 * C139303 * C139596 +
                    (((C63381 * C4656 + C139289 * C4660) * C6771 +
                      (C63381 * C4746 + C139289 * C4750) * C6692 -
                      C67971 * C6772 - C68059 * C139360) *
                         C63378 +
                     (C67971 * C6771 + C68059 * C6692 - C67973 * C6772 -
                      C68060 * C139360) *
                         C63379 +
                     (C67973 * C6771 + C68060 * C6692 -
                      (C63381 * C67958 + C139289 * C67960) * C6772 -
                      (C63381 * C68052 + C139289 * C68053) * C139360) *
                         C63380) *
                        C139463 * C139303 * C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C10840 +
            (C63381 * C245 + C139289 * C251) * C139603 -
            (C63381 * C1700 + C139289 * C1708) * C10841 -
            (C63381 * C1879 + C139289 * C1884) * C139596 +
            (C63381 * C4656 + C139289 * C4660) * C10842 +
            (C63381 * C4831 + C139289 * C4835) * C10691) *
               C63378 +
           (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C63379 +
           (C75425 + C75426 - C75427 - C75428 + C75429 + C75430) * C63380) *
              C139463 * C6692 +
          ((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C63378 +
           (C75427 - (C75426 + C75425) + C75428 - C75429 - C75430) * C63379 +
           (C66549 * C10841 - (C65483 * C139603 + C65313 * C10840) +
            C66737 * C139596 - (C63381 * C67958 + C139289 * C67960) * C10842 -
            (C63381 * C68134 + C139289 * C68135) * C10691) *
               C63380) *
              C139463 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C3364 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C139303) *
                         C139463 * C139289 * C139603 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139303 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C3364) *
                         C139463 * C139289 * C139596 +
                     ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                       C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                          C3364 +
                      (C63532 * C4663 + C63378 * C4917 + C63533 * C5474 +
                       C63379 * C5720 + C63534 * C19905 + C63380 * C20239) *
                          C139303) *
                         C139463 * C139289 * C10691) *
                        C6692 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C3364 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C139303) *
                         C139463 * C139289 * C139596 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139303 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C3364) *
                         C139463 * C139289 * C139603 -
                     ((C63534 * C67959 + C63380 * C68229 + C63533 * C19905 +
                       C63379 * C20239 + C63532 * C5474 + C63378 * C5720) *
                          C139303 +
                      (C63534 * C67958 + C63380 * C68228 + C63533 * C19903 +
                       C63379 * C20237 + C63532 * C5471 + C63378 * C5717) *
                          C3364) *
                         C139463 * C139289 * C10691) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C6771 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C6692 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C6772 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139360) *
                        C139463 * C139289 * C139303 * C139603 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C6772 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C6692 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C6771) +
                     (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                      C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                         C139360) *
                        C139463 * C139289 * C139303 * C139596 +
                    ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C6771 +
                     (C63532 * C4746 + C63378 * C5007 + C63533 * C5557 +
                      C63379 * C5795 + C63534 * C20021 + C63380 * C20338) *
                         C6692 -
                     (C63534 * C67958 + C63380 * C68228 + C63533 * C19903 +
                      C63379 * C20237 + C63532 * C5471 + C63378 * C5717) *
                         C6772 -
                     (C63534 * C68052 + C63380 * C68304 + C63533 * C20021 +
                      C63379 * C20338 + C63532 * C5557 + C63378 * C5795) *
                         C139360) *
                        C139463 * C139289 * C139303 * C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C10840 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139603 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C10841 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139596 +
                     (C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C10842 +
                     (C63532 * C4831 + C63378 * C5095 + C63533 * C5637 +
                      C63379 * C5872 + C63534 * C20129 + C63380 * C20438) *
                         C10691) *
                        C139463 * C139289 * C6692 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C10841 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139603 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C10840) +
                     (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                      C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                         C139596 -
                     (C63534 * C67958 + C63380 * C68228 + C63533 * C19903 +
                      C63379 * C20237 + C63532 * C5471 + C63378 * C5717) *
                         C10842 -
                     (C63534 * C68134 + C63380 * C68379 + C63533 * C20129 +
                      C63379 * C20438 + C63532 * C5637 + C63378 * C5872) *
                         C10691) *
                        C139463 * C139289 * C139360) *
                   C139303) /
                  (p * q * std::sqrt(p + q));
    d2eezx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C3364 +
                       (C554 * C116 + C139463 * C561) * C139303) *
                          C139289 * C63378 +
                      (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                         C139603 -
                     (C67050 * C63380 + (C18643 + C18644) * C139289 * C63379 +
                      ((C554 * C1707 + C139463 * C2268) * C139303 +
                       (C554 * C1700 + C139463 * C2264) * C3364) *
                          C139289 * C63378) *
                         C139596 +
                     (((C554 * C4656 + C139463 * C5191) * C3364 +
                       (C554 * C4663 + C139463 * C5195) * C139303) *
                          C139289 * C63378 +
                      (C20551 + C20552) * C139289 * C63379 +
                      (C68463 + C68464) * C139289 * C63380) *
                         C10691) *
                        C6692 +
                    (((C18644 + C18643) * C139289 * C63378 +
                      (C18645 + C18646) * C139289 * C63379 +
                      (C67053 + C67054) * C139289 * C63380) *
                         C139596 -
                     (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                      (C17700 + C17699) * C139289 * C63378) *
                         C139603 -
                     (((C554 * C67959 + C139463 * C68455) * C139303 +
                       (C554 * C67958 + C139463 * C68454) * C3364) *
                          C139289 * C63380 +
                      (C68464 + C68463) * C139289 * C63379 +
                      (C20552 + C20551) * C139289 * C63378) *
                         C10691) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C6771 +
                      (C554 * C182 + C139463 * C641) * C6692 - C15026 * C6772 -
                      C15138 * C139360) *
                         C139289 * C63378 +
                     (C15026 * C6771 + C15138 * C6692 - C16960 * C6772 -
                      C17072 * C139360) *
                         C139289 * C63379 +
                     (C16960 * C6771 + C17072 * C6692 - C17713 * C6772 -
                      C17787 * C139360) *
                         C139289 * C63380) *
                        C139303 * C139603 +
                    ((C18638 * C6772 -
                      ((C554 * C1794 + C139463 * C2368) * C6692 +
                       (C554 * C1700 + C139463 * C2264) * C6771) +
                      C18755 * C139360) *
                         C139289 * C63378 +
                     (C18639 * C6772 - (C18755 * C6692 + C18638 * C6771) +
                      C18756 * C139360) *
                         C139289 * C63379 +
                     (C67051 * C6772 - (C18756 * C6692 + C18639 * C6771) +
                      C67132 * C139360) *
                         C139289 * C63380) *
                        C139303 * C139596 +
                    (((C554 * C4656 + C139463 * C5191) * C6771 +
                      (C554 * C4746 + C139463 * C5285) * C6692 -
                      C20549 * C6772 - C20655 * C139360) *
                         C139289 * C63378 +
                     (C20549 * C6771 + C20655 * C6692 - C68461 * C6772 -
                      C68542 * C139360) *
                         C139289 * C63379 +
                     (C68461 * C6771 + C68542 * C6692 -
                      (C554 * C67958 + C139463 * C68454) * C6772 -
                      (C554 * C68052 + C139463 * C68538) * C139360) *
                         C139289 * C63380) *
                        C139303 * C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C10840 +
            (C554 * C245 + C139463 * C719) * C139603 -
            (C554 * C1700 + C139463 * C2264) * C10841 -
            (C554 * C1879 + C139463 * C2460) * C139596 +
            (C554 * C4656 + C139463 * C5191) * C10842 +
            (C554 * C4831 + C139463 * C5373) * C10691) *
               C139289 * C63378 +
           (C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C139289 *
               C63379 +
           (C75875 + C75876 - C75877 - C75878 + C75879 + C75880) * C139289 *
               C63380) *
              C6692 +
          ((C30339 - (C30338 + C30337) + C30340 - C30341 - C30342) * C139289 *
               C63378 +
           (C75877 - (C75876 + C75875) + C75878 - C75879 - C75880) * C139289 *
               C63379 +
           (C67051 * C10841 - (C17859 * C139603 + C17713 * C10840) +
            C67215 * C139596 - (C554 * C67958 + C139463 * C68454) * C10842 -
            (C554 * C68134 + C139463 * C68616) * C10691) *
               C139289 * C63380) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C137108 +
            (C63381 * C116 + C139289 * C125) * C139562 -
            (C63381 * C108 + C139289 * C114) * C137101 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C63378 +
           (C65294 + C65295 - C65296 - C65297) * C63379 + C65320 * C63380) *
              C139463 * C139372 * C2565 +
          ((C65296 - (C65295 + C65294) + C65297) * C63378 +
           (C65300 - (C65299 + C65298) + C65301) * C63379 +
           (C65316 - (C65317 + C65318) + C65319) * C63380) *
              C139463 * C139372 * C2566 +
          (C65320 * C63378 + (C65318 + C65317 - C65316 - C65319) * C63379 +
           ((C63381 * C17251 + C139289 * C17255) * C137108 +
            (C63381 * C17253 + C139289 * C17257) * C139562 -
            (C63381 * C17250 + C139289 * C17254) * C137101 -
            (C63381 * C17252 + C139289 * C17256) * C139308) *
               C63380) *
              C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C103 +
           (C63381 * C116 + C139289 * C125) * C92 -
           (C63381 * C108 + C139289 * C114) * C104 -
           (C63381 * C117 + C139289 * C126) * C93 +
           (C63381 * C109 + C139289 * C115) * C105 +
           (C63381 * C118 + C139289 * C127) * C94 -
           (C63381 * C110 + C139289 * C119) * C106 -
           (C63381 * C120 + C139289 * C128) * C95) *
              C63378 +
          ((C63381 * C832 + C139289 * C840) * C103 +
           (C63381 * C839 + C139289 * C846) * C92 -
           (C63381 * C829 + C139289 * C834) * C104 -
           (C63381 * C838 + C139289 * C845) * C93 +
           (C63381 * C830 + C139289 * C835) * C105 +
           (C63381 * C837 + C139289 * C844) * C94 -
           (C63381 * C831 + C139289 * C836) * C106 -
           (C63381 * C841 + C139289 * C847) * C95) *
              C63379 +
          ((C63381 * C2570 + C139289 * C2574) * C103 +
           (C63381 * C2577 + C139289 * C2582) * C92 -
           (C63381 * C2571 + C139289 * C2575) * C104 -
           (C63381 * C2578 + C139289 * C2583) * C93 +
           (C63381 * C2572 + C139289 * C2576) * C105 +
           (C63381 * C2579 + C139289 * C2584) * C94 -
           (C63381 * C2573 + C139289 * C2580) * C106 -
           (C63381 * C2581 + C139289 * C2585) * C95) *
              C63380) *
         C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C137108 +
            (C63381 * C116 + C139289 * C125) * C139562 -
            (C63381 * C108 + C139289 * C114) * C137101 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C63378 +
           (C65294 + C65295 - C65296 - C65297) * C63379 + C65320 * C63380) *
              C139463 * C4653 +
          (((C63381 * C1697 + C139289 * C1702) * C137101 -
            ((C63381 * C1707 + C139289 * C1714) * C139562 +
             (C63381 * C1700 + C139289 * C1708) * C137108) +
            (C63381 * C1706 + C139289 * C1713) * C139308) *
               C63378 +
           ((C63381 * C3892 + C139289 * C3898) * C137101 -
            (C66547 * C139562 + C66548 * C137108) +
            (C63381 * C3901 + C139289 * C3910) * C139308) *
               C63379 +
           ((C63381 * C3895 + C139289 * C3907) * C137101 -
            (C66545 * C139562 + C66546 * C137108) +
            (C63381 * C3904 + C139289 * C3913) * C139308) *
               C63380) *
              C139463 * C4654 +
          (((C63381 * C4656 + C139289 * C4660) * C137108 +
            (C63381 * C4663 + C139289 * C4668) * C139562 -
            (C63381 * C4657 + C139289 * C4661) * C137101 -
            (C63381 * C4664 + C139289 * C4669) * C139308) *
               C63378 +
           ((C63381 * C5471 + C139289 * C5477) * C137108 +
            (C63381 * C5474 + C139289 * C5480) * C139562 -
            (C63381 * C5470 + C139289 * C5476) * C137101 -
            (C63381 * C5473 + C139289 * C5479) * C139308) *
               C63379 +
           ((C63381 * C19903 + C139289 * C19907) * C137108 +
            (C63381 * C19905 + C139289 * C19909) * C139562 -
            (C63381 * C19902 + C139289 * C19906) * C137101 -
            (C63381 * C19904 + C139289 * C19908) * C139308) *
               C63380) *
              C139463 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C63378 +
           (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
            C65313 * C2662 + C65399 * C2567) *
               C63379 +
           (C63890 * C2660 + C63995 * C2565 - C65313 * C2661 - C65399 * C2566 +
            (C63381 * C17251 + C139289 * C17255) * C2662 +
            (C63381 * C17337 + C139289 * C17339) * C2567) *
               C63380) *
              C139463 * C139562 +
          ((C63886 * C2661 -
            ((C63381 * C183 + C139289 * C189) * C2565 +
             (C63381 * C108 + C139289 * C114) * C2660) +
            C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
               C63378 +
           (C63892 * C2661 - (C63996 * C2565 + C63886 * C2660) +
            C63997 * C2566 - C65311 * C2662 - C65400 * C2567) *
               C63379 +
           (C65311 * C2661 - (C63997 * C2565 + C63892 * C2660) +
            C65400 * C2566 - (C63381 * C17250 + C139289 * C17254) * C2662 -
            (C63381 * C17336 + C139289 * C17338) * C2567) *
               C63380) *
              C139463 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C181 +
            (C63381 * C182 + C139289 * C188) * C139346) *
               C63378 +
           ((C63381 * C832 + C139289 * C840) * C181 +
            (C63381 * C927 + C139289 * C932) * C139346) *
               C63379 +
           ((C63381 * C2570 + C139289 * C2574) * C181 +
            (C63381 * C2663 + C139289 * C2667) * C139346) *
               C63380) *
              C139463 * C92 -
          (((C63381 * C2664 + C139289 * C2668) * C139346 +
            (C63381 * C2571 + C139289 * C2575) * C181) *
               C63380 +
           ((C63381 * C926 + C139289 * C931) * C139346 +
            (C63381 * C829 + C139289 * C834) * C181) *
               C63379 +
           ((C63381 * C183 + C139289 * C189) * C139346 +
            (C63381 * C108 + C139289 * C114) * C181) *
               C63378) *
              C139463 * C93 +
          (((C63381 * C109 + C139289 * C115) * C181 +
            (C63381 * C184 + C139289 * C190) * C139346) *
               C63378 +
           ((C63381 * C830 + C139289 * C835) * C181 +
            (C63381 * C925 + C139289 * C930) * C139346) *
               C63379 +
           ((C63381 * C2572 + C139289 * C2576) * C181 +
            (C63381 * C2665 + C139289 * C2669) * C139346) *
               C63380) *
              C139463 * C94 -
          (((C63381 * C2666 + C139289 * C2670) * C139346 +
            (C63381 * C2573 + C139289 * C2580) * C181) *
               C63380 +
           ((C63381 * C928 + C139289 * C933) * C139346 +
            (C63381 * C831 + C139289 * C836) * C181) *
               C63379 +
           ((C63381 * C185 + C139289 * C191) * C139346 +
            (C63381 * C110 + C139289 * C119) * C181) *
               C63378) *
              C139463 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C63378 +
            (C63884 * C181 + C63994 * C139346) * C63379 +
            (C63890 * C181 + C63995 * C139346) * C63380) *
               C139463 * C139562 -
           ((C63997 * C139346 + C63892 * C181) * C63380 +
            (C63996 * C139346 + C63886 * C181) * C63379 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C63378) *
               C139463 * C139308) *
              C4653 +
          ((((C63381 * C1697 + C139289 * C1702) * C181 +
             (C63381 * C1791 + C139289 * C1796) * C139346) *
                C63378 +
            ((C63381 * C3892 + C139289 * C3898) * C181 +
             (C63381 * C3990 + C139289 * C3996) * C139346) *
                C63379 +
            ((C63381 * C3895 + C139289 * C3907) * C181 +
             (C63381 * C3993 + C139289 * C3999) * C139346) *
                C63380) *
               C139463 * C139308 -
           ((C66641 * C139346 + C66546 * C181) * C63380 +
            (C66640 * C139346 + C66548 * C181) * C63379 +
            ((C63381 * C1794 + C139289 * C1799) * C139346 +
             (C63381 * C1700 + C139289 * C1708) * C181) *
                C63378) *
               C139463 * C139562) *
              C4654 +
          ((((C63381 * C4656 + C139289 * C4660) * C181 +
             (C63381 * C4746 + C139289 * C4750) * C139346) *
                C63378 +
            ((C63381 * C5471 + C139289 * C5477) * C181 +
             (C63381 * C5557 + C139289 * C5560) * C139346) *
                C63379 +
            ((C63381 * C19903 + C139289 * C19907) * C181 +
             (C63381 * C20021 + C139289 * C20023) * C139346) *
                C63380) *
               C139463 * C139562 -
           (((C63381 * C20020 + C139289 * C20022) * C139346 +
             (C63381 * C19902 + C139289 * C19906) * C181) *
                C63380 +
            ((C63381 * C5556 + C139289 * C5559) * C139346 +
             (C63381 * C5470 + C139289 * C5476) * C181) *
                C63379 +
            ((C63381 * C4747 + C139289 * C4751) * C139346 +
             (C63381 * C4657 + C139289 * C4661) * C181) *
                C63378) *
               C139463 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C63378 +
            (C64074 + C64098) * C63379 + C65475 * C63380) *
               C139463 * C2565 -
           ((C65485 + C65478) * C63380 + (C64099 + C64077) * C63379 +
            (C64098 + C64074) * C63378) *
               C139463 * C2566 +
           (C65475 * C63378 + (C65478 + C65485) * C63379 +
            ((C63381 * C17251 + C139289 * C17255) * C244 +
             (C63381 * C17413 + C139289 * C17415) * C139372) *
                C63380) *
               C139463 * C2567) *
              C139562 +
          (((C64080 + C64100) * C63378 + (C64083 + C64101) * C63379 +
            (C65479 + C65486) * C63380) *
               C139463 * C2566 -
           (C65482 * C63380 + (C64100 + C64080) * C63379 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C63378) *
               C139463 * C2565 -
           (((C63381 * C17412 + C139289 * C17414) * C139372 +
             (C63381 * C17250 + C139289 * C17254) * C244) *
                C63380 +
            (C65486 + C65479) * C63379 + C65482 * C63378) *
               C139463 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63381 * C107 + C139289 * C113) * C244 +
                                (C63381 * C245 + C139289 * C251) * C139372) *
                                   C63378 +
                               ((C63381 * C832 + C139289 * C840) * C244 +
                                (C63381 * C1011 + C139289 * C1016) * C139372) *
                                   C63379 +
                               ((C63381 * C2570 + C139289 * C2574) * C244 +
                                (C63381 * C2745 + C139289 * C2749) * C139372) *
                                   C63380) *
                                  C139463 * C139346 * C92 -
                              (((C63381 * C2746 + C139289 * C2750) * C139372 +
                                (C63381 * C2571 + C139289 * C2575) * C244) *
                                   C63380 +
                               ((C63381 * C1010 + C139289 * C1015) * C139372 +
                                (C63381 * C829 + C139289 * C834) * C244) *
                                   C63379 +
                               ((C63381 * C246 + C139289 * C252) * C139372 +
                                (C63381 * C108 + C139289 * C114) * C244) *
                                   C63378) *
                                  C139463 * C139346 * C93 +
                              (((C63381 * C109 + C139289 * C115) * C244 +
                                (C63381 * C247 + C139289 * C253) * C139372) *
                                   C63378 +
                               ((C63381 * C830 + C139289 * C835) * C244 +
                                (C63381 * C1009 + C139289 * C1014) * C139372) *
                                   C63379 +
                               ((C63381 * C2572 + C139289 * C2576) * C244 +
                                (C63381 * C2747 + C139289 * C2751) * C139372) *
                                   C63380) *
                                  C139463 * C139346 * C94 -
                              (((C63381 * C2748 + C139289 * C2752) * C139372 +
                                (C63381 * C2573 + C139289 * C2580) * C244) *
                                   C63380 +
                               ((C63381 * C1012 + C139289 * C1017) * C139372 +
                                (C63381 * C831 + C139289 * C836) * C244) *
                                   C63379 +
                               ((C63381 * C248 + C139289 * C254) * C139372 +
                                (C63381 * C110 + C139289 * C119) * C244) *
                                   C63378) *
                                  C139463 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C4828 +
            (C63381 * C245 + C139289 * C251) * C4653 -
            (C63381 * C1700 + C139289 * C1708) * C4829 -
            (C63381 * C1879 + C139289 * C1884) * C4654 +
            (C63381 * C4656 + C139289 * C4660) * C4830 +
            (C63381 * C4831 + C139289 * C4835) * C4655) *
               C63378 +
           (C63884 * C4828 + C64092 * C4653 - C66548 * C4829 - C66734 * C4654 +
            (C63381 * C5471 + C139289 * C5477) * C4830 +
            (C63381 * C5637 + C139289 * C5640) * C4655) *
               C63379 +
           (C63890 * C4828 + C64093 * C4653 - C66546 * C4829 - C66736 * C4654 +
            (C63381 * C19903 + C139289 * C19907) * C4830 +
            (C63381 * C20129 + C139289 * C20131) * C4655) *
               C63380) *
              C139463 * C139346 * C139562 +
          (((C63381 * C1697 + C139289 * C1702) * C4829 -
            ((C63381 * C246 + C139289 * C252) * C4653 +
             (C63381 * C108 + C139289 * C114) * C4828) +
            (C63381 * C1878 + C139289 * C1883) * C4654 -
            (C63381 * C4657 + C139289 * C4661) * C4830 -
            (C63381 * C4832 + C139289 * C4836) * C4655) *
               C63378 +
           ((C63381 * C3892 + C139289 * C3898) * C4829 -
            (C64094 * C4653 + C63886 * C4828) +
            (C63381 * C4076 + C139289 * C4082) * C4654 -
            (C63381 * C5470 + C139289 * C5476) * C4830 -
            (C63381 * C5636 + C139289 * C5639) * C4655) *
               C63379 +
           ((C63381 * C3895 + C139289 * C3907) * C4829 -
            (C64095 * C4653 + C63892 * C4828) +
            (C63381 * C4079 + C139289 * C4085) * C4654 -
            (C63381 * C19902 + C139289 * C19906) * C4830 -
            (C63381 * C20128 + C139289 * C20130) * C4655) *
               C63380) *
              C139463 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C137108 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139562 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C137101 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139308) *
                        C139463 * C139289 * C139372 * C2565 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C137101 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139562 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C137108) +
                     (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                      C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                         C139308) *
                        C139463 * C139289 * C139372 * C2566 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C137108 +
                     (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                      C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                         C139562 -
                     (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                      C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                         C137101 -
                     (C63534 * C17252 + C63380 * C17490 + C63533 * C3369 +
                      C63379 * C3547 + C63532 * C2578 + C63378 * C2832) *
                         C139308) *
                        C139463 * C139289 * C139372 * C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                     C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                        C103 +
                    (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                     C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                        C92 -
                    (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                     C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                        C104 -
                    (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                     C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                        C93 +
                    (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                     C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                        C105 +
                    (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                     C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                        C94 -
                    (C63534 * C2573 + C63380 * C2830 + C63533 * C831 +
                     C63379 * C1096 + C63532 * C110 + C63378 * C311) *
                        C106 -
                    (C63534 * C2581 + C63380 * C2834 + C63533 * C841 +
                     C63379 * C1101 + C63532 * C120 + C63378 * C317) *
                        C95) *
                   C139463 * C139289 * C139372 * C139346) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C137108 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139562 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C137101 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139308) *
                        C139463 * C139289 * C4653 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C137101 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139562 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C137108) +
                     (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                      C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                         C139308) *
                        C139463 * C139289 * C4654 +
                    ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C137108 +
                     (C63532 * C4663 + C63378 * C4917 + C63533 * C5474 +
                      C63379 * C5720 + C63534 * C19905 + C63380 * C20239) *
                         C139562 -
                     (C63534 * C19902 + C63380 * C20236 + C63533 * C5470 +
                      C63379 * C5716 + C63532 * C4657 + C63378 * C4914) *
                         C137101 -
                     (C63534 * C19904 + C63380 * C20238 + C63533 * C5473 +
                      C63379 * C5719 + C63532 * C4664 + C63378 * C4918) *
                         C139308) *
                        C139463 * C139289 * C4655) *
                   C139346) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[66] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C2660 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C2565 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C2661 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C2566 +
                     (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C2662 +
                     (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                      C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                         C2567) *
                        C139463 * C139289 * C139562 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C2661 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C2565 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C2660) +
                     (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                      C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                         C2566 -
                     (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                      C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                         C2662 -
                     (C63534 * C17336 + C63380 * C17559 + C63533 * C3432 +
                      C63379 * C3600 + C63532 * C2664 + C63378 * C2922) *
                         C2567) *
                        C139463 * C139289 * C139308) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C181 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139346) *
                        C139463 * C139289 * C92 -
                    ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                      C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                         C139346 +
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C181) *
                        C139463 * C139289 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C181 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                      C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                         C139346) *
                        C139463 * C139289 * C94 -
                    ((C63534 * C2666 + C63380 * C2924 + C63533 * C928 +
                      C63379 * C1198 + C63532 * C185 + C63378 * C397) *
                         C139346 +
                     (C63534 * C2573 + C63380 * C2830 + C63533 * C831 +
                      C63379 * C1096 + C63532 * C110 + C63378 * C311) *
                         C181) *
                        C139463 * C139289 * C95) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C139346) *
                         C139463 * C139289 * C139562 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139346 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139463 * C139289 * C139308) *
                        C4653 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C181 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C139346) *
                         C139463 * C139289 * C139308 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139346 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C181) *
                         C139463 * C139289 * C139562) *
                        C4654 +
                    (((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                       C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                          C181 +
                      (C63532 * C4746 + C63378 * C5007 + C63533 * C5557 +
                       C63379 * C5795 + C63534 * C20021 + C63380 * C20338) *
                          C139346) *
                         C139463 * C139289 * C139562 -
                     ((C63534 * C20020 + C63380 * C20339 + C63533 * C5556 +
                       C63379 * C5796 + C63532 * C4747 + C63378 * C5008) *
                          C139346 +
                      (C63534 * C19902 + C63380 * C20236 + C63533 * C5470 +
                       C63379 * C5716 + C63532 * C4657 + C63378 * C4914) *
                          C181) *
                         C139463 * C139289 * C139308) *
                        C4655)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[66] += (-std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139372) *
                         C139463 * C139289 * C2565 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139372 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C244) *
                         C139463 * C139289 * C2566 +
                     ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                       C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                          C244 +
                      (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                       C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                          C139372) *
                         C139463 * C139289 * C2567) *
                        C139562 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C244 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139372) *
                         C139463 * C139289 * C2566 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139372 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139463 * C139289 * C2565 -
                     ((C63534 * C17412 + C63380 * C17626 + C63533 * C3488 +
                       C63379 * C3653 + C63532 * C2746 + C63378 * C3018) *
                          C139372 +
                      (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                       C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                          C244) *
                         C139463 * C139289 * C2567) *
                        C139308)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139372) *
                        C139463 * C139289 * C139346 * C92 -
                    ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                      C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                         C139372 +
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C244) *
                        C139463 * C139289 * C139346 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C244 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                      C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                         C139372) *
                        C139463 * C139289 * C139346 * C94 -
                    ((C63534 * C2748 + C63380 * C3020 + C63533 * C1012 +
                      C63379 * C1302 + C63532 * C248 + C63378 * C477) *
                         C139372 +
                     (C63534 * C2573 + C63380 * C2830 + C63533 * C831 +
                      C63379 * C1096 + C63532 * C110 + C63378 * C311) *
                         C244) *
                        C139463 * C139289 * C139346 * C95)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C4828 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C4653 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C4829 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C4654 +
                     (C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C4830 +
                     (C63532 * C4831 + C63378 * C5095 + C63533 * C5637 +
                      C63379 * C5872 + C63534 * C20129 + C63380 * C20438) *
                         C4655) *
                        C139463 * C139289 * C139346 * C139562 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C4829 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C4653 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C4828) +
                     (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                      C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                         C4654 -
                     (C63534 * C19902 + C63380 * C20236 + C63533 * C5470 +
                      C63379 * C5716 + C63532 * C4657 + C63378 * C4914) *
                         C4830 -
                     (C63534 * C20128 + C63380 * C20439 + C63533 * C5636 +
                      C63379 * C5873 + C63532 * C4832 + C63378 * C5096) *
                         C4655) *
                        C139463 * C139289 * C139346 * C139308)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C137108 +
            (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
            C585 * C139308) *
               C139289 * C63378 +
           (C16937 + C16938 - C16939 - C16940) * C139289 * C63379 +
           C65790 * C63380) *
              C139372 * C2565 +
          ((C16939 - (C16938 + C16937) + C16940) * C139289 * C63378 +
           (C16945 - (C16963 + C16964) + C16950) * C139289 * C63379 +
           (C65784 - (C65785 + C65786) + C65787) * C139289 * C63380) *
              C139372 * C2566 +
          (C65790 * C63378 +
           (C65786 + C65785 - C65784 - C65787) * C139289 * C63379 +
           ((C554 * C17251 + C139463 * C17695) * C137108 +
            (C554 * C17253 + C139463 * C17697) * C139562 -
            (C554 * C17250 + C139463 * C17694) * C137101 -
            (C554 * C17252 + C139463 * C17696) * C139308) *
               C139289 * C63380) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C554 * C107 + C139463 * C555) * C103 +
           (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C139289 * C63378 +
          (C15026 * C103 + C15027 * C92 - C1418 * C104 - C1419 * C93 +
           C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
              C139289 * C63379 +
          (C16960 * C103 + C16959 * C92 - C3122 * C104 - C3123 * C93 +
           C3124 * C105 + C3125 * C94 -
           (C554 * C2573 + C139463 * C3108) * C106 -
           (C554 * C2581 + C139463 * C3112) * C95) *
              C139289 * C63380) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C137108 +
            (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
            C585 * C139308) *
               C139289 * C63378 +
           (C16937 + C16938 - C16939 - C16940) * C139289 * C63379 +
           C65790 * C63380) *
              C4653 +
          ((C2286 * C137101 -
            ((C554 * C1707 + C139463 * C2268) * C139562 +
             (C554 * C1700 + C139463 * C2264) * C137108) +
            C2287 * C139308) *
               C139289 * C63378 +
           (C28301 - (C28302 + C28303) + C28304) * C139289 * C63379 +
           (C18641 * C137101 - (C18640 * C139562 + C18639 * C137108) +
            C18642 * C139308) *
               C139289 * C63380) *
              C4654 +
          (((C554 * C4656 + C139463 * C5191) * C137108 +
            (C554 * C4663 + C139463 * C5195) * C139562 - C5208 * C137101 -
            C5209 * C139308) *
               C139289 * C63378 +
           (C20549 * C137108 + C20550 * C139562 - C19593 * C137101 -
            C19594 * C139308) *
               C139289 * C63379 +
           ((C554 * C19903 + C139463 * C20539) * C137108 +
            (C554 * C19905 + C139463 * C20541) * C139562 -
            (C554 * C19902 + C139463 * C20538) * C137101 -
            (C554 * C19904 + C139463 * C20540) * C139308) *
               C139289 * C63380) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C2660 +
            (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
            C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
               C139289 * C63378 +
           (C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
            C17713 * C2662 + C17787 * C2567) *
               C139289 * C63379 +
           (C16960 * C2660 + C17072 * C2565 - C17713 * C2661 - C17787 * C2566 +
            (C554 * C17251 + C139463 * C17695) * C2662 +
            (C554 * C17337 + C139463 * C17782) * C2567) *
               C139289 * C63380) *
              C139562 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C139289 *
               C63378 +
           (C17067 - (C17066 + C17065) + C17068 - C17069 - C17074) * C139289 *
               C63379 +
           (C16961 * C2661 - (C3218 * C2565 + C3122 * C2660) + C17073 * C2566 -
            (C554 * C17250 + C139463 * C17694) * C2662 -
            (C554 * C17336 + C139463 * C17783) * C2567) *
               C139289 * C63380) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C181 +
            (C554 * C182 + C139463 * C641) * C139346) *
               C139289 * C63378 +
           (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
           (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
              C92 -
          ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
           (C14135 + C14134) * C139289 * C63379 +
           (C664 + C648) * C139289 * C63378) *
              C93 +
          (C668 * C139289 * C63378 + (C14137 + C14136) * C139289 * C63379 +
           (C3124 * C181 + C3219 * C139346) * C139289 * C63380) *
              C94 -
          (((C554 * C2666 + C139463 * C3202) * C139346 +
            (C554 * C2573 + C139463 * C3108) * C181) *
               C139289 * C63380 +
           (C14139 + C14138) * C139289 * C63379 + C669 * C139289 * C63378) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C139289 * C63378 +
            (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
            (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
               C139562 -
           ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
            (C14135 + C14134) * C139289 * C63379 +
            (C664 + C648) * C139289 * C63378) *
               C139308) *
              C4653 +
          (((C2371 + C2383) * C139289 * C63378 +
            (C16077 + C16078) * C139289 * C63379 +
            (C18641 * C181 + C18757 * C139346) * C139289 * C63380) *
               C139308 -
           ((C18756 * C139346 + C18639 * C181) * C139289 * C63380 +
            (C18755 * C139346 + C18638 * C181) * C139289 * C63379 +
            ((C554 * C1794 + C139463 * C2368) * C139346 +
             (C554 * C1700 + C139463 * C2264) * C181) *
                C139289 * C63378) *
               C139562) *
              C4654 +
          ((((C554 * C4656 + C139463 * C5191) * C181 +
             (C554 * C4746 + C139463 * C5285) * C139346) *
                C139289 * C63378 +
            (C20549 * C181 + C20655 * C139346) * C139289 * C63379 +
            ((C554 * C19903 + C139463 * C20539) * C181 +
             (C554 * C20021 + C139463 * C20650) * C139346) *
                C139289 * C63380) *
               C139562 -
           (((C554 * C20020 + C139463 * C20651) * C139346 +
             (C554 * C19902 + C139463 * C20538) * C181) *
                C139289 * C63380 +
            (C19697 + C19693) * C139289 * C63379 +
            (C5298 + C5290) * C139289 * C63378) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C139289 * C63378 +
            (C15237 + C15244) * C139289 * C63379 + C65941 * C63380) *
               C2565 -
           ((C17860 + C17856) * C139289 * C63380 +
            (C17183 + C17176) * C139289 * C63379 +
            (C15244 + C15237) * C139289 * C63378) *
               C2566 +
           (C65941 * C63378 + (C17856 + C17860) * C139289 * C63379 +
            ((C554 * C17251 + C139463 * C17695) * C244 +
             (C554 * C17413 + C139463 * C17854) * C139372) *
                C139289 * C63380) *
               C2567) *
              C139562 +
          ((C15240 * C139289 * C63378 + C17177 * C139289 * C63379 +
            (C17178 + C17184) * C139289 * C63380) *
               C2566 -
           (C65940 * C63380 + C15241 * C139289 * C63379 +
            (C742 + C726) * C139289 * C63378) *
               C2565 -
           (((C554 * C17412 + C139463 * C17853) * C139372 +
             (C554 * C17250 + C139463 * C17694) * C244) *
                C139289 * C63380 +
            (C17184 + C17178) * C139289 * C63379 + C65940 * C63378) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C244 +
            (C554 * C245 + C139463 * C719) * C139372) *
               C139289 * C63378 +
           (C15237 + C15244) * C139289 * C63379 +
           (C17176 + C17183) * C139289 * C63380) *
              C139346 * C92 -
          (C17173 * C139289 * C63380 + C15241 * C139289 * C63379 +
           (C742 + C726) * C139289 * C63378) *
              C139346 * C93 +
          (C746 * C139289 * C63378 + C15242 * C139289 * C63379 +
           (C3303 + C3309) * C139289 * C63380) *
              C139346 * C94 -
          (((C554 * C2748 + C139463 * C3298) * C139372 +
            (C554 * C2573 + C139463 * C3108) * C244) *
               C139289 * C63380 +
           (C1620 + C1612) * C139289 * C63379 + C747 * C139289 * C63378) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C4828 +
            (C554 * C245 + C139463 * C719) * C4653 -
            (C554 * C1700 + C139463 * C2264) * C4829 -
            (C554 * C1879 + C139463 * C2460) * C4654 +
            (C554 * C4656 + C139463 * C5191) * C4830 +
            (C554 * C4831 + C139463 * C5373) * C4655) *
               C139289 * C63378 +
           (C20756 + C20757 - C20758 - C20759 + C20760 + C20764) * C139289 *
               C63379 +
           (C16960 * C4828 + C17181 * C4653 - C18639 * C4829 - C18874 * C4654 +
            (C554 * C19903 + C139463 * C20539) * C4830 +
            (C554 * C20129 + C139463 * C20753) * C4655) *
               C139289 * C63380) *
              C139346 * C139562 +
          ((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C139289 *
               C63378 +
           (C19798 - (C19797 + C19796) + C19799 - C19800 - C19804) * C139289 *
               C63379 +
           (C18641 * C4829 - (C3306 * C4653 + C3122 * C4828) + C18875 * C4654 -
            (C554 * C19902 + C139463 * C20538) * C4830 -
            (C554 * C20128 + C139463 * C20754) * C4655) *
               C139289 * C63380) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3364 +
            (C63381 * C116 + C139289 * C125) * C139303) *
               C63378 +
           (C65996 + C65997) * C63379 + C66006 * C63380) *
              C139463 * C139372 * C3360 -
          (C66007 * C63380 + (C65999 + C65998) * C63379 +
           (C65997 + C65996) * C63378) *
              C139463 * C139372 * C3361 +
          (C66006 * C63378 + (C66001 + C66000) * C63379 +
           (C66010 + C66011) * C63380) *
              C139463 * C139372 * C3362 -
          (((C63381 * C65992 + C139289 * C65994) * C139303 +
            (C63381 * C65991 + C139289 * C65993) * C3364) *
               C63380 +
           (C66011 + C66010) * C63379 + C66007 * C63378) *
              C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C63379 +
           (C63902 + C63903 - C63904 - C63905 + C63906 + C63907) * C63380) *
              C139463 * C139372 * C139570 +
          ((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C63378 +
           (C63904 - (C63903 + C63902) + C63905 - C63906 - C63907) * C63379 +
           ((C63381 * C3366 + C139289 * C3372) * C827 -
            ((C63381 * C3370 + C139289 * C3376) * C821 +
             (C63381 * C3367 + C139289 * C3373) * C826) +
            (C63381 * C3369 + C139289 * C3375) * C822 -
            (C63381 * C3365 + C139289 * C3371) * C828 -
            (C63381 * C3368 + C139289 * C3374) * C823) *
               C63380) *
              C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C63378 +
            (C65996 + C65997) * C63379 + C66006 * C63380) *
               C139463 * C4653 -
           (C66557 * C63380 + (C66553 + C66554) * C63379 +
            ((C63381 * C1707 + C139289 * C1714) * C139303 +
             (C63381 * C1700 + C139289 * C1708) * C3364) *
                C63378) *
               C139463 * C4654 +
           (((C63381 * C4656 + C139289 * C4660) * C3364 +
             (C63381 * C4663 + C139289 * C4668) * C139303) *
                C63378 +
            (C67975 + C67976) * C63379 + (C67977 + C67978) * C63380) *
               C139463 * C4655) *
              C139570 +
          (((C66554 + C66553) * C63378 + (C66552 + C66551) * C63379 +
            (C66555 + C66556) * C63380) *
               C139463 * C4654 -
           (C66007 * C63380 + (C65999 + C65998) * C63379 +
            (C65997 + C65996) * C63378) *
               C139463 * C4653 -
           (((C63381 * C67959 + C139289 * C67961) * C139303 +
             (C63381 * C67958 + C139289 * C67960) * C3364) *
                C63380 +
            (C67978 + C67977) * C63379 + (C67976 + C67975) * C63378) *
               C139463 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C3427 +
           (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
           C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
           C65399 * C3363) *
              C63378 +
          (C63884 * C3427 + C63994 * C3360 - C63890 * C3428 - C63995 * C3361 +
           C65313 * C3429 + C65399 * C3362 - C66008 * C3430 - C66066 * C3363) *
              C63379 +
          (C63890 * C3427 + C63995 * C3360 - C65313 * C3428 - C65399 * C3361 +
           C66008 * C3429 + C66066 * C3362 -
           (C63381 * C65991 + C139289 * C65993) * C3430 -
           (C63381 * C66061 + C139289 * C66062) * C3363) *
              C63380) *
         C139463 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C923 +
            (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
            C63994 * C139360) *
               C63378 +
           (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
            C63995 * C139360) *
               C63379 +
           (C63890 * C923 + C63995 * C139570 -
            (C63381 * C3367 + C139289 * C3373) * C924 -
            (C63381 * C3433 + C139289 * C3436) * C139360) *
               C63380) *
              C139463 * C821 +
          ((C63886 * C924 -
            ((C63381 * C183 + C139289 * C189) * C139570 +
             (C63381 * C108 + C139289 * C114) * C923) +
            C63996 * C139360) *
               C63378 +
           (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
            C63997 * C139360) *
               C63379 +
           ((C63381 * C3366 + C139289 * C3372) * C924 -
            (C63997 * C139570 + C63892 * C923) +
            (C63381 * C3432 + C139289 * C3435) * C139360) *
               C63380) *
              C139463 * C822 +
          (((C63381 * C109 + C139289 * C115) * C923 +
            (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
            C63998 * C139360) *
               C63378 +
           (C63888 * C923 + C63998 * C139570 - C63894 * C924 -
            C63999 * C139360) *
               C63379 +
           (C63894 * C923 + C63999 * C139570 -
            (C63381 * C3365 + C139289 * C3371) * C924 -
            (C63381 * C3431 + C139289 * C3434) * C139360) *
               C63380) *
              C139463 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C923 +
            (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
            C63994 * C139360) *
               C63378 +
           (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
            C63995 * C139360) *
               C63379 +
           (C63890 * C923 + C63995 * C139570 - C65313 * C924 -
            C65399 * C139360) *
               C63380) *
              C139463 * C139303 * C4653 +
          ((C66548 * C924 -
            ((C63381 * C1794 + C139289 * C1799) * C139570 +
             (C63381 * C1700 + C139289 * C1708) * C923) +
            C66640 * C139360) *
               C63378 +
           (C66546 * C924 - (C66640 * C139570 + C66548 * C923) +
            C66641 * C139360) *
               C63379 +
           (C66549 * C924 - (C66641 * C139570 + C66546 * C923) +
            C66642 * C139360) *
               C63380) *
              C139463 * C139303 * C4654 +
          (((C63381 * C4656 + C139289 * C4660) * C923 +
            (C63381 * C4746 + C139289 * C4750) * C139570 - C67971 * C924 -
            C68059 * C139360) *
               C63378 +
           (C67971 * C923 + C68059 * C139570 - C67973 * C924 -
            C68060 * C139360) *
               C63379 +
           (C67973 * C923 + C68060 * C139570 -
            (C63381 * C67958 + C139289 * C67960) * C924 -
            (C63381 * C68052 + C139289 * C68053) * C139360) *
               C63380) *
              C139463 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C244 +
            (C63381 * C245 + C139289 * C251) * C139372) *
               C63378 +
           (C64074 + C64098) * C63379 + C65475 * C63380) *
              C139463 * C3360 -
          (C66119 * C63380 + (C64099 + C64077) * C63379 +
           (C64098 + C64074) * C63378) *
              C139463 * C3361 +
          (C65475 * C63378 + (C65478 + C65485) * C63379 +
           (C66120 + C66124) * C63380) *
              C139463 * C3362 -
          (((C63381 * C66116 + C139289 * C66117) * C139372 +
            (C63381 * C65991 + C139289 * C65993) * C244) *
               C63380 +
           (C66124 + C66120) * C63379 + C66119 * C63378) *
              C139463 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C63378 +
            (C64074 + C64098) * C63379 + (C64077 + C64099) * C63380) *
               C139463 * C139570 -
           (((C63381 * C3489 + C139289 * C3492) * C139372 +
             (C63381 * C3367 + C139289 * C3373) * C244) *
                C63380 +
            (C64099 + C64077) * C63379 + (C64098 + C64074) * C63378) *
               C139463 * C139360) *
              C821 +
          (((C64080 + C64100) * C63378 + (C64083 + C64101) * C63379 +
            ((C63381 * C3366 + C139289 * C3372) * C244 +
             (C63381 * C3488 + C139289 * C3491) * C139372) *
                C63380) *
               C139463 * C139360 -
           ((C64101 + C64083) * C63380 + (C64100 + C64080) * C63379 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C63378) *
               C139463 * C139570) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C244 +
             (C63381 * C247 + C139289 * C253) * C139372) *
                C63378 +
            (C64086 + C64102) * C63379 + (C64089 + C64103) * C63380) *
               C139463 * C139570 -
           (((C63381 * C3487 + C139289 * C3490) * C139372 +
             (C63381 * C3365 + C139289 * C3371) * C244) *
                C63380 +
            (C64103 + C64089) * C63379 + (C64102 + C64086) * C63378) *
               C139463 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C4828 +
            (C63381 * C245 + C139289 * C251) * C4653 -
            (C63381 * C1700 + C139289 * C1708) * C4829 -
            (C63381 * C1879 + C139289 * C1884) * C4654 +
            (C63381 * C4656 + C139289 * C4660) * C4830 +
            (C63381 * C4831 + C139289 * C4835) * C4655) *
               C63378 +
           (C68137 + C68138 - C68139 - C68140 + C68141 + C68153) * C63379 +
           (C68144 + C68145 - C68146 - C68147 + C68148 + C68154) * C63380) *
              C139463 * C139570 +
          ((C68139 - (C68138 + C68137) + C68140 - C68141 - C68153) * C63378 +
           (C68146 - (C68145 + C68144) + C68147 - C68148 - C68154) * C63379 +
           (C66549 * C4829 - (C65483 * C4653 + C65313 * C4828) +
            C66737 * C4654 - (C63381 * C67958 + C139289 * C67960) * C4830 -
            (C63381 * C68134 + C139289 * C68135) * C4655) *
               C63380) *
              C139463 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C3364 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139303) *
                        C139463 * C139289 * C139372 * C3360 -
                    ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                      C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                         C139303 +
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C3364) *
                        C139463 * C139289 * C139372 * C3361 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C3364 +
                     (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                      C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                         C139303) *
                        C139463 * C139289 * C139372 * C3362 -
                    ((C63534 * C65992 + C63380 * C66175 + C63533 * C17253 +
                      C63379 * C17491 + C63532 * C3370 + C63378 * C3548) *
                         C139303 +
                     (C63534 * C65991 + C63380 * C66174 + C63533 * C17251 +
                      C63379 * C17489 + C63532 * C3367 + C63378 * C3545) *
                         C3364) *
                        C139463 * C139289 * C139372 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C821 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C822 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C828 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                      C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                         C823) *
                        C139463 * C139289 * C139372 * C139570 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C827 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C821 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C826) +
                     (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                      C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                         C822 -
                     (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                      C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                         C828 -
                     (C63534 * C3368 + C63380 * C3546 + C63533 * C2579 +
                      C63379 * C2833 + C63532 * C837 + C63378 * C1100) *
                         C823) *
                        C139463 * C139289 * C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C3364 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C139303) *
                         C139463 * C139289 * C4653 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139303 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C3364) *
                         C139463 * C139289 * C4654 +
                     ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                       C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                          C3364 +
                      (C63532 * C4663 + C63378 * C4917 + C63533 * C5474 +
                       C63379 * C5720 + C63534 * C19905 + C63380 * C20239) *
                          C139303) *
                         C139463 * C139289 * C4655) *
                        C139570 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C3364 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C139303) *
                         C139463 * C139289 * C4654 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139303 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C3364) *
                         C139463 * C139289 * C4653 -
                     ((C63534 * C67959 + C63380 * C68229 + C63533 * C19905 +
                       C63379 * C20239 + C63532 * C5474 + C63378 * C5720) *
                          C139303 +
                      (C63534 * C67958 + C63380 * C68228 + C63533 * C19903 +
                       C63379 * C20237 + C63532 * C5471 + C63378 * C5717) *
                          C3364) *
                         C139463 * C139289 * C4655) *
                        C139360)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[67] += (-std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                     C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                        C3427 +
                    (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                     C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                        C3360 -
                    (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                     C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                        C3428 -
                    (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                     C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                        C3361 +
                    (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                     C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                        C3429 +
                    (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                     C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                        C3362 -
                    (C63534 * C65991 + C63380 * C66174 + C63533 * C17251 +
                     C63379 * C17489 + C63532 * C3367 + C63378 * C3545) *
                        C3430 -
                    (C63534 * C66061 + C63380 * C66226 + C63533 * C17337 +
                     C63379 * C17558 + C63532 * C3433 + C63378 * C3599) *
                        C3363) *
                   C139463 * C139289 * C139303 * C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C923 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139570 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C924 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139360) *
                        C139463 * C139289 * C821 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C924 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139570 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C923) +
                     (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                      C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                         C139360) *
                        C139463 * C139289 * C822 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C923 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                      C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                         C139570 -
                     (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                      C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                         C924 -
                     (C63534 * C3431 + C63380 * C3601 + C63533 * C2665 +
                      C63379 * C2923 + C63532 * C925 + C63378 * C1197) *
                         C139360) *
                        C139463 * C139289 * C823) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C923 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139570 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C924 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139360) *
                        C139463 * C139289 * C139303 * C4653 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C924 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139570 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C923) +
                     (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                      C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                         C139360) *
                        C139463 * C139289 * C139303 * C4654 +
                    ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C923 +
                     (C63532 * C4746 + C63378 * C5007 + C63533 * C5557 +
                      C63379 * C5795 + C63534 * C20021 + C63380 * C20338) *
                         C139570 -
                     (C63534 * C67958 + C63380 * C68228 + C63533 * C19903 +
                      C63379 * C20237 + C63532 * C5471 + C63378 * C5717) *
                         C924 -
                     (C63534 * C68052 + C63380 * C68304 + C63533 * C20021 +
                      C63379 * C20338 + C63532 * C5557 + C63378 * C5795) *
                         C139360) *
                        C139463 * C139289 * C139303 * C4655)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[67] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139372) *
                        C139463 * C139289 * C3360 -
                    ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                      C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                         C139372 +
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C244) *
                        C139463 * C139289 * C3361 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C244 +
                     (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                      C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                         C139372) *
                        C139463 * C139289 * C3362 -
                    ((C63534 * C66116 + C63380 * C66277 + C63533 * C17413 +
                      C63379 * C17627 + C63532 * C3489 + C63378 * C3654) *
                         C139372 +
                     (C63534 * C65991 + C63380 * C66174 + C63533 * C17251 +
                      C63379 * C17489 + C63532 * C3367 + C63378 * C3545) *
                         C244) *
                        C139463 * C139289 * C3363) *
                   C139303) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139372) *
                         C139463 * C139289 * C139570 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139372 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C244) *
                         C139463 * C139289 * C139360) *
                        C821 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C244 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139372) *
                         C139463 * C139289 * C139360 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139372 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139463 * C139289 * C139570) *
                        C822 +
                    (((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                       C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                          C244 +
                      (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                       C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                          C139372) *
                         C139463 * C139289 * C139570 -
                     ((C63534 * C3487 + C63380 * C3652 + C63533 * C2747 +
                       C63379 * C3019 + C63532 * C1009 + C63378 * C1299) *
                          C139372 +
                      (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                       C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                          C244) *
                         C139463 * C139289 * C139360) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C4828 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C4653 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C4829 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C4654 +
                     (C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C4830 +
                     (C63532 * C4831 + C63378 * C5095 + C63533 * C5637 +
                      C63379 * C5872 + C63534 * C20129 + C63380 * C20438) *
                         C4655) *
                        C139463 * C139289 * C139570 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C4829 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C4653 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C4828) +
                     (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                      C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                         C4654 -
                     (C63534 * C67958 + C63380 * C68228 + C63533 * C19903 +
                      C63379 * C20237 + C63532 * C5471 + C63378 * C5717) *
                         C4830 -
                     (C63534 * C68134 + C63380 * C68379 + C63533 * C20129 +
                      C63379 * C20438 + C63532 * C5637 + C63378 * C5872) *
                         C4655) *
                        C139463 * C139289 * C139360) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eezx[67] += (-std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C3364 +
                      (C554 * C116 + C139463 * C561) * C139303) *
                         C139289 * C63378 +
                     (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                        C139372 * C3360 -
                    (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                     (C17700 + C17699) * C139289 * C63378) *
                        C139372 * C3361 +
                    (C66337 * C63378 + (C17715 + C17716) * C139289 * C63379 +
                     (C66341 + C66342) * C139289 * C63380) *
                        C139372 * C3362 -
                    (((C554 * C65992 + C139463 * C66329) * C139303 +
                      (C554 * C65991 + C139463 * C66328) * C3364) *
                         C139289 * C63380 +
                     (C66342 + C66341) * C139289 * C63379 + C66338 * C63378) *
                        C139372 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C826 +
                      (C554 * C116 + C139463 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C139289 * C63378 +
                     (C15028 + C15029 - C15016 - C15017 + C15018 + C15019) *
                         C139289 * C63379 +
                     (C64400 + C64401 - C64402 - C64403 + C64404 + C64405) *
                         C139289 * C63380) *
                        C139372 * C139570 +
                    ((C15016 - (C15029 + C15028) + C15017 - C15018 - C15019) *
                         C139289 * C63378 +
                     (C64402 - (C64401 + C64400) + C64403 - C64404 - C64405) *
                         C139289 * C63379 +
                     (C16961 * C827 - (C17714 * C821 + C17713 * C826) +
                      C16962 * C822 - (C554 * C3365 + C139463 * C3705) * C828 -
                      (C554 * C3368 + C139463 * C3708) * C823) *
                         C139289 * C63380) *
                        C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C3364 +
                       (C554 * C116 + C139463 * C561) * C139303) *
                          C139289 * C63378 +
                      (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                         C4653 -
                     (C67050 * C63380 + (C18643 + C18644) * C139289 * C63379 +
                      ((C554 * C1707 + C139463 * C2268) * C139303 +
                       (C554 * C1700 + C139463 * C2264) * C3364) *
                          C139289 * C63378) *
                         C4654 +
                     (((C554 * C4656 + C139463 * C5191) * C3364 +
                       (C554 * C4663 + C139463 * C5195) * C139303) *
                          C139289 * C63378 +
                      (C20551 + C20552) * C139289 * C63379 +
                      (C68463 + C68464) * C139289 * C63380) *
                         C4655) *
                        C139570 +
                    (((C18644 + C18643) * C139289 * C63378 +
                      (C18645 + C18646) * C139289 * C63379 +
                      (C67053 + C67054) * C139289 * C63380) *
                         C4654 -
                     (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                      (C17700 + C17699) * C139289 * C63378) *
                         C4653 -
                     (((C554 * C67959 + C139463 * C68455) * C139303 +
                       (C554 * C67958 + C139463 * C68454) * C3364) *
                          C139289 * C63380 +
                      (C68464 + C68463) * C139289 * C63379 +
                      (C20552 + C20551) * C139289 * C63378) *
                         C4655) *
                        C139360)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::pow(Pi, 2.5) *
         (((C554 * C107 + C139463 * C555) * C3427 +
           (C554 * C182 + C139463 * C641) * C3360 - C15026 * C3428 -
           C15138 * C3361 + C16960 * C3429 + C17072 * C3362 - C17713 * C3430 -
           C17787 * C3363) *
              C139289 * C63378 +
          (C15026 * C3427 + C15138 * C3360 - C16960 * C3428 - C17072 * C3361 +
           C17713 * C3429 + C17787 * C3362 - C66339 * C3430 - C66396 * C3363) *
              C139289 * C63379 +
          (C16960 * C3427 + C17072 * C3360 - C17713 * C3428 - C17787 * C3361 +
           C66339 * C3429 + C66396 * C3362 -
           (C554 * C65991 + C139463 * C66328) * C3430 -
           (C554 * C66061 + C139463 * C66392) * C3363) *
              C139289 * C63380) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C923 +
            (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
            C15138 * C139360) *
               C139289 * C63378 +
           (C15026 * C923 + C15138 * C139570 - C16960 * C924 -
            C17072 * C139360) *
               C139289 * C63379 +
           (C16960 * C923 + C17072 * C139570 - C17713 * C924 -
            C17787 * C139360) *
               C139289 * C63380) *
              C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C139289 * C63378 +
           (C15132 - (C15131 + C15130) + C15133) * C139289 * C63379 +
           (C16961 * C924 - (C3218 * C139570 + C3122 * C923) +
            C17073 * C139360) *
               C139289 * C63380) *
              C822 +
          (C1526 * C139289 * C63378 +
           (C15136 + C15135 - C15134 - C15137) * C139289 * C63379 +
           (C3124 * C923 + C3219 * C139570 -
            (C554 * C3365 + C139463 * C3705) * C924 -
            (C554 * C3431 + C139463 * C3763) * C139360) *
               C139289 * C63380) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C923 +
            (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
            C15138 * C139360) *
               C139289 * C63378 +
           (C15026 * C923 + C15138 * C139570 - C16960 * C924 -
            C17072 * C139360) *
               C139289 * C63379 +
           (C16960 * C923 + C17072 * C139570 - C17713 * C924 -
            C17787 * C139360) *
               C139289 * C63380) *
              C139303 * C4653 +
          ((C18638 * C924 -
            ((C554 * C1794 + C139463 * C2368) * C139570 +
             (C554 * C1700 + C139463 * C2264) * C923) +
            C18755 * C139360) *
               C139289 * C63378 +
           (C18639 * C924 - (C18755 * C139570 + C18638 * C923) +
            C18756 * C139360) *
               C139289 * C63379 +
           (C67051 * C924 - (C18756 * C139570 + C18639 * C923) +
            C67132 * C139360) *
               C139289 * C63380) *
              C139303 * C4654 +
          (((C554 * C4656 + C139463 * C5191) * C923 +
            (C554 * C4746 + C139463 * C5285) * C139570 - C20549 * C924 -
            C20655 * C139360) *
               C139289 * C63378 +
           (C20549 * C923 + C20655 * C139570 - C68461 * C924 -
            C68542 * C139360) *
               C139289 * C63379 +
           (C68461 * C923 + C68542 * C139570 -
            (C554 * C67958 + C139463 * C68454) * C924 -
            (C554 * C68052 + C139463 * C68538) * C139360) *
               C139289 * C63380) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C244 +
            (C554 * C245 + C139463 * C719) * C139372) *
               C139289 * C63378 +
           (C15237 + C15244) * C139289 * C63379 + C65941 * C63380) *
              C3360 -
          (C66452 * C63380 + (C17183 + C17176) * C139289 * C63379 +
           (C15244 + C15237) * C139289 * C63378) *
              C3361 +
          (C65941 * C63378 + (C17856 + C17860) * C139289 * C63379 +
           (C66449 + C66454) * C139289 * C63380) *
              C3362 -
          (((C554 * C66116 + C139463 * C66446) * C139372 +
            (C554 * C65991 + C139463 * C66328) * C244) *
               C139289 * C63380 +
           (C66454 + C66449) * C139289 * C63379 + C66452 * C63378) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C139289 * C63378 +
            (C15237 + C15244) * C139289 * C63379 +
            (C17176 + C17183) * C139289 * C63380) *
               C139570 -
           ((C17860 + C17856) * C139289 * C63380 +
            (C17183 + C17176) * C139289 * C63379 +
            (C15244 + C15237) * C139289 * C63378) *
               C139360) *
              C821 +
          ((C15240 * C139289 * C63378 + C17177 * C139289 * C63379 +
            (C17178 + C17184) * C139289 * C63380) *
               C139360 -
           (C17173 * C139289 * C63380 + C15241 * C139289 * C63379 +
            (C742 + C726) * C139289 * C63378) *
               C139570) *
              C822 +
          ((C746 * C139289 * C63378 + C15242 * C139289 * C63379 +
            (C3303 + C3309) * C139289 * C63380) *
               C139570 -
           (((C554 * C3487 + C139463 * C3814) * C139372 +
             (C554 * C3365 + C139463 * C3705) * C244) *
                C139289 * C63380 +
            (C3309 + C3303) * C139289 * C63379 + C1621 * C139289 * C63378) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C4828 +
            (C554 * C245 + C139463 * C719) * C4653 -
            (C554 * C1700 + C139463 * C2264) * C4829 -
            (C554 * C1879 + C139463 * C2460) * C4654 +
            (C554 * C4656 + C139463 * C5191) * C4830 +
            (C554 * C4831 + C139463 * C5373) * C4655) *
               C139289 * C63378 +
           (C20756 + C20757 - C20758 - C20759 + C20760 + C20764) * C139289 *
               C63379 +
           (C68618 + C68619 - C68620 - C68621 + C68622 + C68626) * C139289 *
               C63380) *
              C139570 +
          ((C20758 - (C20757 + C20756) + C20759 - C20760 - C20764) * C139289 *
               C63378 +
           (C68620 - (C68619 + C68618) + C68621 - C68622 - C68626) * C139289 *
               C63379 +
           (C67051 * C4829 - (C17859 * C4653 + C17713 * C4828) +
            C67215 * C4654 - (C554 * C67958 + C139463 * C68454) * C4830 -
            (C554 * C68134 + C139463 * C68616) * C4655) *
               C139289 * C63380) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C63378 +
            (C65996 + C65997) * C63379 + C66006 * C63380) *
               C139463 * C139571 -
           (C66557 * C63380 + (C66553 + C66554) * C63379 +
            ((C63381 * C1707 + C139289 * C1714) * C139303 +
             (C63381 * C1700 + C139289 * C1708) * C3364) *
                C63378) *
               C139463 * C139384) *
              C2565 +
          (((C66554 + C66553) * C63378 + (C66552 + C66551) * C63379 +
            (C66555 + C66556) * C63380) *
               C139463 * C139384 -
           (C66007 * C63380 + (C65999 + C65998) * C63379 +
            (C65997 + C65996) * C63378) *
               C139463 * C139571) *
              C2566 +
          ((C66006 * C63378 + (C66001 + C66000) * C63379 +
            (C66010 + C66011) * C63380) *
               C139463 * C139571 -
           (((C63381 * C66529 + C139289 * C66531) * C139303 +
             (C63381 * C66528 + C139289 * C66530) * C3364) *
                C63380 +
            (C66556 + C66555) * C63379 + C66557 * C63378) *
               C139463 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C63379 +
           (C63902 + C63903 - C63904 - C63905 + C63906 + C63907) * C63380) *
              C139463 * C139571 +
          (((C63381 * C1697 + C139289 * C1702) * C827 -
            ((C63381 * C1707 + C139289 * C1714) * C821 +
             (C63381 * C1700 + C139289 * C1708) * C826) +
            (C63381 * C1706 + C139289 * C1713) * C822 -
            (C63381 * C1698 + C139289 * C1703) * C828 -
            (C63381 * C1705 + C139289 * C1712) * C823) *
               C63378 +
           ((C63381 * C3892 + C139289 * C3898) * C827 -
            ((C63381 * C3900 + C139289 * C3909) * C821 +
             (C63381 * C3891 + C139289 * C3897) * C826) +
            (C63381 * C3901 + C139289 * C3910) * C822 -
            (C63381 * C3893 + C139289 * C3899) * C828 -
            (C63381 * C3902 + C139289 * C3911) * C823) *
               C63379 +
           ((C63381 * C3895 + C139289 * C3907) * C827 -
            ((C63381 * C3905 + C139289 * C3914) * C821 +
             (C63381 * C3896 + C139289 * C3908) * C826) +
            (C63381 * C3904 + C139289 * C3913) * C822 -
            (C63381 * C3894 + C139289 * C3906) * C828 -
            (C63381 * C3903 + C139289 * C3912) * C823) *
               C63380) *
              C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3364 +
            (C63381 * C116 + C139289 * C125) * C139303) *
               C63378 +
           (C65996 + C65997) * C63379 + C66006 * C63380) *
              C139463 * C6159 -
          (C66557 * C63380 + (C66553 + C66554) * C63379 +
           ((C63381 * C1707 + C139289 * C1714) * C139303 +
            (C63381 * C1700 + C139289 * C1708) * C3364) *
               C63378) *
              C139463 * C6160 +
          (((C63381 * C4656 + C139289 * C4660) * C3364 +
            (C63381 * C4663 + C139289 * C4668) * C139303) *
               C63378 +
           (C67975 + C67976) * C63379 + (C67977 + C67978) * C63380) *
              C139463 * C6161 -
          (((C63381 * C68677 + C139289 * C68679) * C139303 +
            (C63381 * C68676 + C139289 * C68678) * C3364) *
               C63380 +
           ((C63381 * C20833 + C139289 * C20837) * C139303 +
            (C63381 * C20831 + C139289 * C20835) * C3364) *
               C63379 +
           ((C63381 * C6168 + C139289 * C6174) * C139303 +
            (C63381 * C6165 + C139289 * C6171) * C3364) *
               C63378) *
              C139463 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C63378 +
           (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
            C65313 * C2662 + C65399 * C2567) *
               C63379 +
           (C63890 * C2660 + C63995 * C2565 - C65313 * C2661 - C65399 * C2566 +
            C66008 * C2662 + C66066 * C2567) *
               C63380) *
              C139463 * C139303 * C139571 +
          ((C66548 * C2661 -
            ((C63381 * C1794 + C139289 * C1799) * C2565 +
             (C63381 * C1700 + C139289 * C1708) * C2660) +
            C66640 * C2566 - C66546 * C2662 - C66641 * C2567) *
               C63378 +
           (C66546 * C2661 - (C66640 * C2565 + C66548 * C2660) +
            C66641 * C2566 - C66549 * C2662 - C66642 * C2567) *
               C63379 +
           (C66549 * C2661 - (C66641 * C2565 + C66546 * C2660) +
            C66642 * C2566 - (C63381 * C66528 + C139289 * C66530) * C2662 -
            (C63381 * C66631 + C139289 * C66632) * C2567) *
               C63380) *
              C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139289 * C113) * C181 +
                                 (C63381 * C182 + C139289 * C188) * C139346) *
                                    C63378 +
                                (C63884 * C181 + C63994 * C139346) * C63379 +
                                (C63890 * C181 + C63995 * C139346) * C63380) *
                                   C139463 * C821 -
                               ((C63997 * C139346 + C63892 * C181) * C63380 +
                                (C63996 * C139346 + C63886 * C181) * C63379 +
                                ((C63381 * C183 + C139289 * C189) * C139346 +
                                 (C63381 * C108 + C139289 * C114) * C181) *
                                    C63378) *
                                   C139463 * C822 +
                               (((C63381 * C109 + C139289 * C115) * C181 +
                                 (C63381 * C184 + C139289 * C190) * C139346) *
                                    C63378 +
                                (C63888 * C181 + C63998 * C139346) * C63379 +
                                (C63894 * C181 + C63999 * C139346) * C63380) *
                                   C139463 * C823) *
                                  C139571 +
                              ((((C63381 * C1697 + C139289 * C1702) * C181 +
                                 (C63381 * C1791 + C139289 * C1796) * C139346) *
                                    C63378 +
                                ((C63381 * C3892 + C139289 * C3898) * C181 +
                                 (C63381 * C3990 + C139289 * C3996) * C139346) *
                                    C63379 +
                                ((C63381 * C3895 + C139289 * C3907) * C181 +
                                 (C63381 * C3993 + C139289 * C3999) * C139346) *
                                    C63380) *
                                   C139463 * C822 -
                               (((C63381 * C3994 + C139289 * C4000) * C139346 +
                                 (C63381 * C3896 + C139289 * C3908) * C181) *
                                    C63380 +
                                ((C63381 * C3989 + C139289 * C3995) * C139346 +
                                 (C63381 * C3891 + C139289 * C3897) * C181) *
                                    C63379 +
                                ((C63381 * C1794 + C139289 * C1799) * C139346 +
                                 (C63381 * C1700 + C139289 * C1708) * C181) *
                                    C63378) *
                                   C139463 * C821 -
                               (((C63381 * C3992 + C139289 * C3998) * C139346 +
                                 (C63381 * C3894 + C139289 * C3906) * C181) *
                                    C63380 +
                                ((C63381 * C3991 + C139289 * C3997) * C139346 +
                                 (C63381 * C3893 + C139289 * C3899) * C181) *
                                    C63379 +
                                ((C63381 * C1792 + C139289 * C1797) * C139346 +
                                 (C63381 * C1698 + C139289 * C1703) * C181) *
                                    C63378) *
                                   C139463 * C823) *
                                  C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C181 +
            (C63381 * C182 + C139289 * C188) * C139346) *
               C63378 +
           (C63884 * C181 + C63994 * C139346) * C63379 +
           (C63890 * C181 + C63995 * C139346) * C63380) *
              C139463 * C139303 * C6159 -
          ((C66641 * C139346 + C66546 * C181) * C63380 +
           (C66640 * C139346 + C66548 * C181) * C63379 +
           ((C63381 * C1794 + C139289 * C1799) * C139346 +
            (C63381 * C1700 + C139289 * C1708) * C181) *
               C63378) *
              C139463 * C139303 * C6160 +
          (((C63381 * C4656 + C139289 * C4660) * C181 +
            (C63381 * C4746 + C139289 * C4750) * C139346) *
               C63378 +
           (C67971 * C181 + C68059 * C139346) * C63379 +
           (C67973 * C181 + C68060 * C139346) * C63380) *
              C139463 * C139303 * C6161 -
          (((C63381 * C68730 + C139289 * C68731) * C139346 +
            (C63381 * C68676 + C139289 * C68678) * C181) *
               C63380 +
           ((C63381 * C20905 + C139289 * C20907) * C139346 +
            (C63381 * C20831 + C139289 * C20835) * C181) *
               C63379 +
           ((C63381 * C6227 + C139289 * C6230) * C139346 +
            (C63381 * C6165 + C139289 * C6171) * C181) *
               C63378) *
              C139463 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 -
            (C63381 * C1700 + C139289 * C1708) * C1876 -
            (C63381 * C1879 + C139289 * C1884) * C139384) *
               C63378 +
           (C66719 + C66720 - C66721 - C66738) * C63379 + C66742 * C63380) *
              C139463 * C2565 +
          ((C66721 - (C66720 + C66719) + C66738) * C63378 +
           (C66726 - (C66725 + C66724) + C66740) * C63379 +
           (C66729 - (C66730 + C66731) + C66741) * C63380) *
              C139463 * C2566 +
          (C66742 * C63378 + (C66731 + C66730 - C66729 - C66741) * C63379 +
           (C66008 * C1875 + C66123 * C139571 -
            (C63381 * C66528 + C139289 * C66530) * C1876 -
            (C63381 * C66716 + C139289 * C66717) * C139384) *
               C63380) *
              C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63381 * C107 + C139289 * C113) * C1875 +
                                (C63381 * C245 + C139289 * C251) * C139571 -
                                (C63381 * C1700 + C139289 * C1708) * C1876 -
                                (C63381 * C1879 + C139289 * C1884) * C139384) *
                                   C63378 +
                               (C63884 * C1875 + C64092 * C139571 -
                                (C63381 * C3891 + C139289 * C3897) * C1876 -
                                (C63381 * C4075 + C139289 * C4081) * C139384) *
                                   C63379 +
                               (C63890 * C1875 + C64093 * C139571 -
                                (C63381 * C3896 + C139289 * C3908) * C1876 -
                                (C63381 * C4080 + C139289 * C4086) * C139384) *
                                   C63380) *
                                  C139463 * C139346 * C821 +
                              (((C63381 * C1697 + C139289 * C1702) * C1876 -
                                ((C63381 * C246 + C139289 * C252) * C139571 +
                                 (C63381 * C108 + C139289 * C114) * C1875) +
                                (C63381 * C1878 + C139289 * C1883) * C139384) *
                                   C63378 +
                               ((C63381 * C3892 + C139289 * C3898) * C1876 -
                                (C64094 * C139571 + C63886 * C1875) +
                                (C63381 * C4076 + C139289 * C4082) * C139384) *
                                   C63379 +
                               ((C63381 * C3895 + C139289 * C3907) * C1876 -
                                (C64095 * C139571 + C63892 * C1875) +
                                (C63381 * C4079 + C139289 * C4085) * C139384) *
                                   C63380) *
                                  C139463 * C139346 * C822 +
                              (((C63381 * C109 + C139289 * C115) * C1875 +
                                (C63381 * C247 + C139289 * C253) * C139571 -
                                (C63381 * C1698 + C139289 * C1703) * C1876 -
                                (C63381 * C1877 + C139289 * C1882) * C139384) *
                                   C63378 +
                               (C63888 * C1875 + C64096 * C139571 -
                                (C63381 * C3893 + C139289 * C3899) * C1876 -
                                (C63381 * C4077 + C139289 * C4083) * C139384) *
                                   C63379 +
                               (C63894 * C1875 + C64097 * C139571 -
                                (C63381 * C3894 + C139289 * C3906) * C1876 -
                                (C63381 * C4078 + C139289 * C4084) * C139384) *
                                   C63380) *
                                  C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C6281 +
           (C63381 * C245 + C139289 * C251) * C6159 -
           (C63381 * C1700 + C139289 * C1708) * C6282 -
           (C63381 * C1879 + C139289 * C1884) * C6160 +
           (C63381 * C4656 + C139289 * C4660) * C6283 +
           (C63381 * C4831 + C139289 * C4835) * C6161 -
           (C63381 * C6165 + C139289 * C6171) * C6284 -
           (C63381 * C6287 + C139289 * C6290) * C6162) *
              C63378 +
          (C63884 * C6281 + C64092 * C6159 - C66548 * C6282 - C66734 * C6160 +
           C67971 * C6283 + C68151 * C6161 -
           (C63381 * C20831 + C139289 * C20835) * C6284 -
           (C63381 * C20975 + C139289 * C20977) * C6162) *
              C63379 +
          (C63890 * C6281 + C64093 * C6159 - C66546 * C6282 - C66736 * C6160 +
           C67973 * C6283 + C68152 * C6161 -
           (C63381 * C68676 + C139289 * C68678) * C6284 -
           (C63381 * C68782 + C139289 * C68783) * C6162) *
              C63380) *
         C139463 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] += (-std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C3364 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C139303) *
                         C139463 * C139289 * C139571 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139303 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C3364) *
                         C139463 * C139289 * C139384) *
                        C2565 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C3364 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C139303) *
                         C139463 * C139289 * C139384 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139303 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C3364) *
                         C139463 * C139289 * C139571) *
                        C2566 +
                    (((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                       C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                          C3364 +
                      (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                       C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                          C139303) *
                         C139463 * C139289 * C139571 -
                     ((C63534 * C66529 + C63380 * C66817 + C63533 * C17961 +
                       C63379 * C18319 + C63532 * C3905 + C63378 * C4172) *
                          C139303 +
                      (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                       C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                          C3364) *
                         C139463 * C139289 * C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C821 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C822 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C828 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                      C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                         C823) *
                        C139463 * C139289 * C139571 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C827 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C821 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C826) +
                     (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                      C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                         C822 -
                     (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                      C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                         C828 -
                     (C63534 * C3903 + C63380 * C4170 + C63533 * C3902 +
                      C63379 * C4169 + C63532 * C1705 + C63378 * C1968) *
                         C823) *
                        C139463 * C139289 * C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C3364 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139303) *
                        C139463 * C139289 * C6159 -
                    ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                      C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                         C139303 +
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C3364) *
                        C139463 * C139289 * C6160 +
                    ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C3364 +
                     (C63532 * C4663 + C63378 * C4917 + C63533 * C5474 +
                      C63379 * C5720 + C63534 * C19905 + C63380 * C20239) *
                         C139303) *
                        C139463 * C139289 * C6161 -
                    ((C63534 * C68677 + C63380 * C68835 + C63533 * C20833 +
                      C63379 * C21047 + C63532 * C6168 + C63378 * C6346) *
                         C139303 +
                     (C63534 * C68676 + C63380 * C68834 + C63533 * C20831 +
                      C63379 * C21045 + C63532 * C6165 + C63378 * C6343) *
                         C3364) *
                        C139463 * C139289 * C6162) *
                   C139346) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[68] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C2660 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C2565 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C2661 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C2566 +
                     (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C2662 +
                     (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                      C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                         C2567) *
                        C139463 * C139289 * C139303 * C139571 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C2661 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C2565 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C2660) +
                     (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                      C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                         C2566 -
                     (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                      C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                         C2662 -
                     (C63534 * C66631 + C63380 * C66892 + C63533 * C18089 +
                      C63379 * C18418 + C63532 * C3994 + C63378 * C4248) *
                         C2567) *
                        C139463 * C139289 * C139303 * C139384)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C139346) *
                         C139463 * C139289 * C821 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139346 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139463 * C139289 * C822 +
                     ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                       C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                          C181 +
                      (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                       C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                          C139346) *
                         C139463 * C139289 * C823) *
                        C139571 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C181 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C139346) *
                         C139463 * C139289 * C822 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139346 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C181) *
                         C139463 * C139289 * C821 -
                     ((C63534 * C3992 + C63380 * C4252 + C63533 * C3991 +
                       C63379 * C4251 + C63532 * C1792 + C63378 * C2064) *
                          C139346 +
                      (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                       C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                          C181) *
                         C139463 * C139289 * C823) *
                        C139384)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C181 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139346) *
                        C139463 * C139289 * C139303 * C6159 -
                    ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                      C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                         C139346 +
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C181) *
                        C139463 * C139289 * C139303 * C6160 +
                    ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C181 +
                     (C63532 * C4746 + C63378 * C5007 + C63533 * C5557 +
                      C63379 * C5795 + C63534 * C20021 + C63380 * C20338) *
                         C139346) *
                        C139463 * C139289 * C139303 * C6161 -
                    ((C63534 * C68730 + C63380 * C68886 + C63533 * C20905 +
                      C63379 * C21115 + C63532 * C6227 + C63378 * C6399) *
                         C139346 +
                     (C63534 * C68676 + C63380 * C68834 + C63533 * C20831 +
                      C63379 * C21045 + C63532 * C6165 + C63378 * C6343) *
                         C181) *
                        C139463 * C139289 * C139303 * C6162)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[68] += (-std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C1875 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139571 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C1876 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139384) *
                        C139463 * C139289 * C2565 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C1876 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139571 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C1875) +
                     (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                      C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                         C139384) *
                        C139463 * C139289 * C2566 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C1875 +
                     (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                      C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                         C139571 -
                     (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                      C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                         C1876 -
                     (C63534 * C66716 + C63380 * C66967 + C63533 * C18203 +
                      C63379 * C18518 + C63532 * C4080 + C63378 * C4330) *
                         C139384) *
                        C139463 * C139289 * C2567) *
                   C139303) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C1875 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139571 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C1876 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139384) *
                        C139463 * C139289 * C139346 * C821 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C1876 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139571 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C1875) +
                     (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                      C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                         C139384) *
                        C139463 * C139289 * C139346 * C822 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C1875 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                      C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                         C139571 -
                     (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                      C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                         C1876 -
                     (C63534 * C4078 + C63380 * C4332 + C63533 * C4077 +
                      C63379 * C4329 + C63532 * C1877 + C63378 * C2161) *
                         C139384) *
                        C139463 * C139289 * C139346 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                     C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                        C6281 +
                    (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                     C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                        C6159 -
                    (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                     C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                        C6282 -
                    (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                     C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                        C6160 +
                    (C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                     C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                        C6283 +
                    (C63532 * C4831 + C63378 * C5095 + C63533 * C5637 +
                     C63379 * C5872 + C63534 * C20129 + C63380 * C20438) *
                        C6161 -
                    (C63534 * C68676 + C63380 * C68834 + C63533 * C20831 +
                     C63379 * C21045 + C63532 * C6165 + C63378 * C6343) *
                        C6284 -
                    (C63534 * C68782 + C63380 * C68937 + C63533 * C20975 +
                     C63379 * C21182 + C63532 * C6287 + C63378 * C6450) *
                        C6162) *
                   C139463 * C139289 * C139346 * C139303) /
                      (p * q * std::sqrt(p + q));
    d2eezx[68] += (-std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C3364 +
                       (C554 * C116 + C139463 * C561) * C139303) *
                          C139289 * C63378 +
                      (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                         C139571 -
                     (C67050 * C63380 + (C18643 + C18644) * C139289 * C63379 +
                      ((C554 * C1707 + C139463 * C2268) * C139303 +
                       (C554 * C1700 + C139463 * C2264) * C3364) *
                          C139289 * C63378) *
                         C139384) *
                        C2565 +
                    (((C18644 + C18643) * C139289 * C63378 +
                      (C18645 + C18646) * C139289 * C63379 +
                      (C67053 + C67054) * C139289 * C63380) *
                         C139384 -
                     (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                      (C17700 + C17699) * C139289 * C63378) *
                         C139571) *
                        C2566 +
                    ((C66337 * C63378 + (C17715 + C17716) * C139289 * C63379 +
                      (C66341 + C66342) * C139289 * C63380) *
                         C139571 -
                     (((C554 * C66529 + C139463 * C67043) * C139303 +
                       (C554 * C66528 + C139463 * C67042) * C3364) *
                          C139289 * C63380 +
                      (C67054 + C67053) * C139289 * C63379 + C67050 * C63378) *
                         C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C826 +
                      (C554 * C116 + C139463 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C139289 * C63378 +
                     (C15028 + C15029 - C15016 - C15017 + C15018 + C15019) *
                         C139289 * C63379 +
                     (C64400 + C64401 - C64402 - C64403 + C64404 + C64405) *
                         C139289 * C63380) *
                        C139571 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C139463 * C2268) * C821 +
                       (C554 * C1700 + C139463 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C139289 * C63378 +
                     (C8771 * C827 - (C18637 * C821 + C18638 * C826) +
                      C8772 * C822 - C8773 * C828 - C8774 * C823) *
                         C139289 * C63379 +
                     (C18641 * C827 - (C18640 * C821 + C18639 * C826) +
                      C18642 * C822 - (C554 * C3894 + C139463 * C4410) * C828 -
                      (C554 * C3903 + C139463 * C4416) * C823) *
                         C139289 * C63380) *
                        C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C3364 +
                      (C554 * C116 + C139463 * C561) * C139303) *
                         C139289 * C63378 +
                     (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                        C6159 -
                    (C67050 * C63380 + (C18643 + C18644) * C139289 * C63379 +
                     ((C554 * C1707 + C139463 * C2268) * C139303 +
                      (C554 * C1700 + C139463 * C2264) * C3364) *
                         C139289 * C63378) *
                        C6160 +
                    (((C554 * C4656 + C139463 * C5191) * C3364 +
                      (C554 * C4663 + C139463 * C5195) * C139303) *
                         C139289 * C63378 +
                     (C20551 + C20552) * C139289 * C63379 +
                     (C68463 + C68464) * C139289 * C63380) *
                        C6161 -
                    (((C554 * C68677 + C139463 * C68989) * C139303 +
                      (C554 * C68676 + C139463 * C68988) * C3364) *
                         C139289 * C63380 +
                     ((C554 * C20833 + C139463 * C21253) * C139303 +
                      (C554 * C20831 + C139463 * C21251) * C3364) *
                         C139289 * C63379 +
                     ((C554 * C6168 + C139463 * C6508) * C139303 +
                      (C554 * C6165 + C139463 * C6505) * C3364) *
                         C139289 * C63378) *
                        C6162) *
                   C139346) /
                      (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C2660 +
            (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
            C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
               C139289 * C63378 +
           (C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
            C17713 * C2662 + C17787 * C2567) *
               C139289 * C63379 +
           (C16960 * C2660 + C17072 * C2565 - C17713 * C2661 - C17787 * C2566 +
            C66339 * C2662 + C66396 * C2567) *
               C139289 * C63380) *
              C139303 * C139571 +
          ((C18638 * C2661 -
            ((C554 * C1794 + C139463 * C2368) * C2565 +
             (C554 * C1700 + C139463 * C2264) * C2660) +
            C18755 * C2566 - C18639 * C2662 - C18756 * C2567) *
               C139289 * C63378 +
           (C18639 * C2661 - (C18755 * C2565 + C18638 * C2660) +
            C18756 * C2566 - C67051 * C2662 - C67132 * C2567) *
               C139289 * C63379 +
           (C67051 * C2661 - (C18756 * C2565 + C18639 * C2660) +
            C67132 * C2566 - (C554 * C66528 + C139463 * C67042) * C2662 -
            (C554 * C66631 + C139463 * C67128) * C2567) *
               C139289 * C63380) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C139289 * C63378 +
            (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
            (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
               C821 -
           ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
            (C14135 + C14134) * C139289 * C63379 +
            (C664 + C648) * C139289 * C63378) *
               C822 +
           (C668 * C139289 * C63378 + (C14137 + C14136) * C139289 * C63379 +
            (C3124 * C181 + C3219 * C139346) * C139289 * C63380) *
               C823) *
              C139571 +
          (((C2371 + C2383) * C139289 * C63378 +
            (C16077 + C16078) * C139289 * C63379 +
            (C18641 * C181 + C18757 * C139346) * C139289 * C63380) *
               C822 -
           ((C18756 * C139346 + C18639 * C181) * C139289 * C63380 +
            (C18755 * C139346 + C18638 * C181) * C139289 * C63379 +
            ((C554 * C1794 + C139463 * C2368) * C139346 +
             (C554 * C1700 + C139463 * C2264) * C181) *
                C139289 * C63378) *
               C821 -
           (((C554 * C3992 + C139463 * C4498) * C139346 +
             (C554 * C3894 + C139463 * C4410) * C181) *
                C139289 * C63380 +
            (C16080 + C16079) * C139289 * C63379 + C2386 * C139289 * C63378) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C181 +
            (C554 * C182 + C139463 * C641) * C139346) *
               C139289 * C63378 +
           (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
           (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
              C139303 * C6159 -
          ((C18756 * C139346 + C18639 * C181) * C139289 * C63380 +
           (C18755 * C139346 + C18638 * C181) * C139289 * C63379 +
           ((C554 * C1794 + C139463 * C2368) * C139346 +
            (C554 * C1700 + C139463 * C2264) * C181) *
               C139289 * C63378) *
              C139303 * C6160 +
          (((C554 * C4656 + C139463 * C5191) * C181 +
            (C554 * C4746 + C139463 * C5285) * C139346) *
               C139289 * C63378 +
           (C20549 * C181 + C20655 * C139346) * C139289 * C63379 +
           (C68461 * C181 + C68542 * C139346) * C139289 * C63380) *
              C139303 * C6161 -
          (((C554 * C68730 + C139463 * C69040) * C139346 +
            (C554 * C68676 + C139463 * C68988) * C181) *
               C139289 * C63380 +
           ((C554 * C20905 + C139463 * C21321) * C139346 +
            (C554 * C20831 + C139463 * C21251) * C181) *
               C139289 * C63379 +
           ((C554 * C6227 + C139463 * C6561) * C139346 +
            (C554 * C6165 + C139463 * C6505) * C181) *
               C139289 * C63378) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] += (-std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C139289 * C63378 +
                     (C18858 + C18859 - C18860 - C18876) * C139289 * C63379 +
                     C67218 * C63380) *
                        C2565 +
                    ((C18860 - (C18859 + C18858) + C18876) * C139289 * C63378 +
                     (C18863 - (C18864 + C18865) + C18877) * C139289 * C63379 +
                     (C67209 - (C67210 + C67211) + C67217) * C139289 * C63380) *
                        C2566 +
                    (C67218 * C63378 +
                     (C67211 + C67210 - C67209 - C67217) * C139289 * C63379 +
                     (C66339 * C1875 + C66453 * C139571 -
                      (C554 * C66528 + C139463 * C67042) * C1876 -
                      (C554 * C66716 + C139463 * C67206) * C139384) *
                         C139289 * C63380) *
                        C2567) *
                   C139303) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C139289 * C63378 +
                     (C18858 + C18859 - C18860 - C18876) * C139289 * C63379 +
                     (C18865 + C18864 - C18863 - C18877) * C139289 * C63380) *
                        C139346 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C139289 * C63378 +
                     C24432 * C139289 * C63379 +
                     (C18868 - (C18869 + C18870) + C18878) * C139289 * C63380) *
                        C139346 * C822 +
                    (C2489 * C139289 * C63378 +
                     (C8994 + C8993 - C8992 - C9000) * C139289 * C63379 +
                     (C3124 * C1875 + C3307 * C139571 -
                      (C554 * C3894 + C139463 * C4410) * C1876 -
                      (C554 * C4078 + C139463 * C4578) * C139384) *
                         C139289 * C63380) *
                        C139346 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C554 * C107 + C139463 * C555) * C6281 +
                     (C554 * C245 + C139463 * C719) * C6159 -
                     (C554 * C1700 + C139463 * C2264) * C6282 -
                     (C554 * C1879 + C139463 * C2460) * C6160 +
                     (C554 * C4656 + C139463 * C5191) * C6283 +
                     (C554 * C4831 + C139463 * C5373) * C6161 -
                     (C554 * C6165 + C139463 * C6505) * C6284 -
                     (C554 * C6287 + C139463 * C6612) * C6162) *
                        C139289 * C63378 +
                    (C15026 * C6281 + C15243 * C6159 - C18638 * C6282 -
                     C18873 * C6160 + C20549 * C6283 + C20763 * C6161 -
                     (C554 * C20831 + C139463 * C21251) * C6284 -
                     (C554 * C20975 + C139463 * C21388) * C6162) *
                        C139289 * C63379 +
                    (C16960 * C6281 + C17181 * C6159 - C18639 * C6282 -
                     C18874 * C6160 + C68461 * C6283 + C68625 * C6161 -
                     (C554 * C68676 + C139463 * C68988) * C6284 -
                     (C554 * C68782 + C139463 * C69091) * C6162) *
                        C139289 * C63380) *
                   C139346 * C139303) /
                      (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6694 +
            (C63381 * C116 + C139289 * C125) * C139601 -
            (C63381 * C108 + C139289 * C114) * C6695 -
            (C63381 * C117 + C139289 * C126) * C139590 +
            (C63381 * C109 + C139289 * C115) * C6696 +
            (C63381 * C118 + C139289 * C127) * C6691) *
               C63378 +
           (C69167 + C69168 - C69169 - C69170 + C69171 + C69172) * C63379 +
           (C69173 + C69174 - C69175 - C69176 + C69177 + C69178) * C63380) *
              C139463 * C9074 +
          (((C63381 * C1697 + C139289 * C1702) * C6695 -
            ((C63381 * C1707 + C139289 * C1714) * C139601 +
             (C63381 * C1700 + C139289 * C1708) * C6694) +
            (C63381 * C1706 + C139289 * C1713) * C139590 -
            (C63381 * C1698 + C139289 * C1703) * C6696 -
            (C63381 * C1705 + C139289 * C1712) * C6691) *
               C63378 +
           (C70576 * C6695 - (C66547 * C139601 + C66548 * C6694) +
            C70577 * C139590 - (C63381 * C3893 + C139289 * C3899) * C6696 -
            (C63381 * C3902 + C139289 * C3911) * C6691) *
               C63379 +
           (C70578 * C6695 - (C66545 * C139601 + C66546 * C6694) +
            C70579 * C139590 - (C63381 * C3894 + C139289 * C3906) * C6696 -
            (C63381 * C3903 + C139289 * C3912) * C6691) *
               C63380) *
              C139463 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[69] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C181 +
                       (C63381 * C182 + C139289 * C188) * C139346) *
                          C63378 +
                      (C63884 * C181 + C63994 * C139346) * C63379 +
                      (C63890 * C181 + C63995 * C139346) * C63380) *
                         C139463 * C139601 -
                     ((C63997 * C139346 + C63892 * C181) * C63380 +
                      (C63996 * C139346 + C63886 * C181) * C63379 +
                      ((C63381 * C183 + C139289 * C189) * C139346 +
                       (C63381 * C108 + C139289 * C114) * C181) *
                          C63378) *
                         C139463 * C139590 +
                     (((C63381 * C109 + C139289 * C115) * C181 +
                       (C63381 * C184 + C139289 * C190) * C139346) *
                          C63378 +
                      (C63888 * C181 + C63998 * C139346) * C63379 +
                      (C63894 * C181 + C63999 * C139346) * C63380) *
                         C139463 * C6691) *
                        C9074 +
                    ((((C63381 * C1697 + C139289 * C1702) * C181 +
                       (C63381 * C1791 + C139289 * C1796) * C139346) *
                          C63378 +
                      (C70576 * C181 + C70686 * C139346) * C63379 +
                      (C70578 * C181 + C70687 * C139346) * C63380) *
                         C139463 * C139590 -
                     ((C66641 * C139346 + C66546 * C181) * C63380 +
                      (C66640 * C139346 + C66548 * C181) * C63379 +
                      ((C63381 * C1794 + C139289 * C1799) * C139346 +
                       (C63381 * C1700 + C139289 * C1708) * C181) *
                          C63378) *
                         C139463 * C139601 -
                     (((C63381 * C3992 + C139289 * C3998) * C139346 +
                       (C63381 * C3894 + C139289 * C3906) * C181) *
                          C63380 +
                      ((C63381 * C3991 + C139289 * C3997) * C139346 +
                       (C63381 * C3893 + C139289 * C3899) * C181) *
                          C63379 +
                      ((C63381 * C1792 + C139289 * C1797) * C139346 +
                       (C63381 * C1698 + C139289 * C1703) * C181) *
                          C63378) *
                         C139463 * C6691) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[69] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139289 * C113) * C9224 +
                      (C63381 * C245 + C139289 * C251) * C9074 -
                      (C63381 * C1700 + C139289 * C1708) * C9225 -
                      (C63381 * C1879 + C139289 * C1884) * C139384) *
                         C63378 +
                     (C63884 * C9224 + C64092 * C9074 - C66548 * C9225 -
                      C66734 * C139384) *
                         C63379 +
                     (C63890 * C9224 + C64093 * C9074 - C66546 * C9225 -
                      C66736 * C139384) *
                         C63380) *
                        C139463 * C139346 * C139601 +
                    (((C63381 * C1697 + C139289 * C1702) * C9225 -
                      ((C63381 * C246 + C139289 * C252) * C9074 +
                       (C63381 * C108 + C139289 * C114) * C9224) +
                      (C63381 * C1878 + C139289 * C1883) * C139384) *
                         C63378 +
                     (C70576 * C9225 - (C64094 * C9074 + C63886 * C9224) +
                      C70796 * C139384) *
                         C63379 +
                     (C70578 * C9225 - (C64095 * C9074 + C63892 * C9224) +
                      C70797 * C139384) *
                         C63380) *
                        C139463 * C139346 * C139590 +
                    (((C63381 * C109 + C139289 * C115) * C9224 +
                      (C63381 * C247 + C139289 * C253) * C9074 -
                      (C63381 * C1698 + C139289 * C1703) * C9225 -
                      (C63381 * C1877 + C139289 * C1882) * C139384) *
                         C63378 +
                     (C63888 * C9224 + C64096 * C9074 -
                      (C63381 * C3893 + C139289 * C3899) * C9225 -
                      (C63381 * C4077 + C139289 * C4083) * C139384) *
                         C63379 +
                     (C63894 * C9224 + C64097 * C9074 -
                      (C63381 * C3894 + C139289 * C3906) * C9225 -
                      (C63381 * C4078 + C139289 * C4084) * C139384) *
                         C63380) *
                        C139463 * C139346 * C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[69] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C6694 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139601 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C6695 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139590 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C6696 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                      C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                         C6691) *
                        C139463 * C139289 * C9074 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C6695 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139601 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C6694) +
                     (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                      C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                         C139590 -
                     (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                      C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                         C6696 -
                     (C63534 * C3903 + C63380 * C4170 + C63533 * C3902 +
                      C63379 * C4169 + C63532 * C1705 + C63378 * C1968) *
                         C6691) *
                        C139463 * C139289 * C139384) *
                   C139346) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[69] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C139346) *
                         C139463 * C139289 * C139601 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139346 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139463 * C139289 * C139590 +
                     ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                       C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                          C181 +
                      (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                       C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                          C139346) *
                         C139463 * C139289 * C6691) *
                        C9074 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C181 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C139346) *
                         C139463 * C139289 * C139590 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139346 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C181) *
                         C139463 * C139289 * C139601 -
                     ((C63534 * C3992 + C63380 * C4252 + C63533 * C3991 +
                       C63379 * C4251 + C63532 * C1792 + C63378 * C2064) *
                          C139346 +
                      (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                       C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                          C181) *
                         C139463 * C139289 * C6691) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[69] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C9224 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C9074 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C9225 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139384) *
                        C139463 * C139289 * C139346 * C139601 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C9225 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C9074 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C9224) +
                     (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                      C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                         C139384) *
                        C139463 * C139289 * C139346 * C139590 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C9224 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                      C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                         C9074 -
                     (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                      C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                         C9225 -
                     (C63534 * C4078 + C63380 * C4332 + C63533 * C4077 +
                      C63379 * C4329 + C63532 * C1877 + C63378 * C2161) *
                         C139384) *
                        C139463 * C139289 * C139346 * C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C6694 +
            (C554 * C116 + C139463 * C561) * C139601 - C584 * C6695 -
            C585 * C139590 + C586 * C6696 + C587 * C6691) *
               C139289 * C63378 +
           (C22077 + C22078 - C22079 - C22080 + C22081 + C22082) * C139289 *
               C63379 +
           (C69623 + C69624 - C69625 - C69626 + C69627 + C69628) * C139289 *
               C63380) *
              C9074 +
          ((C2286 * C6695 -
            ((C554 * C1707 + C139463 * C2268) * C139601 +
             (C554 * C1700 + C139463 * C2264) * C6694) +
            C2287 * C139590 - C2288 * C6696 - C2289 * C6691) *
               C139289 * C63378 +
           (C8771 * C6695 - (C18637 * C139601 + C18638 * C6694) +
            C8772 * C139590 - C8773 * C6696 - C8774 * C6691) *
               C139289 * C63379 +
           (C18641 * C6695 - (C18640 * C139601 + C18639 * C6694) +
            C18642 * C139590 - (C554 * C3894 + C139463 * C4410) * C6696 -
            (C554 * C3903 + C139463 * C4416) * C6691) *
               C139289 * C63380) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C139289 * C63378 +
            (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
            (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
               C139601 -
           ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
            (C14135 + C14134) * C139289 * C63379 +
            (C664 + C648) * C139289 * C63378) *
               C139590 +
           (C668 * C139289 * C63378 + (C14137 + C14136) * C139289 * C63379 +
            (C3124 * C181 + C3219 * C139346) * C139289 * C63380) *
               C6691) *
              C9074 +
          (((C2371 + C2383) * C139289 * C63378 +
            (C16077 + C16078) * C139289 * C63379 +
            (C18641 * C181 + C18757 * C139346) * C139289 * C63380) *
               C139590 -
           ((C18756 * C139346 + C18639 * C181) * C139289 * C63380 +
            (C18755 * C139346 + C18638 * C181) * C139289 * C63379 +
            ((C554 * C1794 + C139463 * C2368) * C139346 +
             (C554 * C1700 + C139463 * C2264) * C181) *
                C139289 * C63378) *
               C139601 -
           (((C554 * C3992 + C139463 * C4498) * C139346 +
             (C554 * C3894 + C139463 * C4410) * C181) *
                C139289 * C63380 +
            (C16080 + C16079) * C139289 * C63379 + C2386 * C139289 * C63378) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[69] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C9224 +
                      (C554 * C245 + C139463 * C719) * C9074 -
                      (C554 * C1700 + C139463 * C2264) * C9225 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C139289 * C63378 +
                     (C26489 + C26490 - C26491 - C26492) * C139289 * C63379 +
                     (C29453 + C29452 - C29451 - C29454) * C139289 * C63380) *
                        C139346 * C139601 +
                    ((C9689 - (C9688 + C9687) + C9690) * C139289 * C63378 +
                     C26502 * C139289 * C63379 +
                     (C26495 - (C26496 + C26497) + C26498) * C139289 * C63380) *
                        C139346 * C139590 +
                    (C9701 * C139289 * C63378 +
                     (C10614 + C10613 - C10612 - C10615) * C139289 * C63379 +
                     (C3124 * C9224 + C3307 * C9074 -
                      (C554 * C3894 + C139463 * C4410) * C9225 -
                      (C554 * C4078 + C139463 * C4578) * C139384) *
                         C139289 * C63380) *
                        C139346 * C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C63378 +
            (C69851 + C69852 - C69853 - C69854) * C63379 + C69865 * C63380) *
               C139463 * C9074 +
           (((C63381 * C1697 + C139289 * C1702) * C7402 -
             ((C63381 * C1707 + C139289 * C1714) * C7396 +
              (C63381 * C1700 + C139289 * C1708) * C7401) +
             (C63381 * C1706 + C139289 * C1713) * C139308) *
                C63378 +
            (C70580 - (C70566 + C70567) + C70581) * C63379 +
            (C70582 - (C70572 + C70573) + C70583) * C63380) *
               C139463 * C139384) *
              C139570 +
          (((C69853 - (C69852 + C69851) + C69854) * C63378 +
            (C69857 - (C69856 + C69855) + C69858) * C63379 +
            (C69859 - (C69860 + C69861) + C69862) * C63380) *
               C139463 * C9074 +
           ((C70567 + C70566 - C70580 - C70581) * C63378 +
            (C70573 + C70572 - C70582 - C70583) * C63379 +
            (C66549 * C7401 + C66550 * C7396 -
             (C63381 * C17958 + C139289 * C17962) * C7402 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C63380) *
               C139463 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C923 +
                       (C63381 * C182 + C139289 * C188) * C139570 -
                       C63884 * C924 - C63994 * C139360) *
                          C63378 +
                      (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
                       C63995 * C139360) *
                          C63379 +
                      (C63890 * C923 + C63995 * C139570 - C65313 * C924 -
                       C65399 * C139360) *
                          C63380) *
                         C139463 * C7396 +
                     ((C63886 * C924 -
                       ((C63381 * C183 + C139289 * C189) * C139570 +
                        (C63381 * C108 + C139289 * C114) * C923) +
                       C63996 * C139360) *
                          C63378 +
                      (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
                       C63997 * C139360) *
                          C63379 +
                      (C65311 * C924 - (C63997 * C139570 + C63892 * C923) +
                       C65400 * C139360) *
                          C63380) *
                         C139463 * C139308) *
                        C9074 +
                    (((C66548 * C924 -
                       ((C63381 * C1794 + C139289 * C1799) * C139570 +
                        (C63381 * C1700 + C139289 * C1708) * C923) +
                       C66640 * C139360) *
                          C63378 +
                      (C66546 * C924 - (C66640 * C139570 + C66548 * C923) +
                       C66641 * C139360) *
                          C63379 +
                      (C66549 * C924 - (C66641 * C139570 + C66546 * C923) +
                       C66642 * C139360) *
                          C63380) *
                         C139463 * C7396 +
                     (((C63381 * C1697 + C139289 * C1702) * C923 +
                       (C63381 * C1791 + C139289 * C1796) * C139570 -
                       C70576 * C924 - C70686 * C139360) *
                          C63378 +
                      (C70576 * C923 + C70686 * C139570 - C70578 * C924 -
                       C70687 * C139360) *
                          C63379 +
                      (C70578 * C923 + C70687 * C139570 -
                       (C63381 * C17958 + C139289 * C17962) * C924 -
                       (C63381 * C18088 + C139289 * C18090) * C139360) *
                          C63380) *
                         C139463 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C9224 +
                       (C63381 * C245 + C139289 * C251) * C9074 -
                       (C63381 * C1700 + C139289 * C1708) * C9225 -
                       (C63381 * C1879 + C139289 * C1884) * C139384) *
                          C63378 +
                      (C72352 + C72353 - C72354 - C72355) * C63379 +
                      (C72356 + C72357 - C72358 - C72359) * C63380) *
                         C139463 * C139570 +
                     ((C72354 - (C72353 + C72352) + C72355) * C63378 +
                      (C72358 - (C72357 + C72356) + C72359) * C63379 +
                      (C66549 * C9225 - (C65483 * C9074 + C65313 * C9224) +
                       C66737 * C139384) *
                          C63380) *
                         C139463 * C139360) *
                        C7396 +
                    ((((C63381 * C1697 + C139289 * C1702) * C9225 -
                       ((C63381 * C246 + C139289 * C252) * C9074 +
                        (C63381 * C108 + C139289 * C114) * C9224) +
                       (C63381 * C1878 + C139289 * C1883) * C139384) *
                          C63378 +
                      (C72360 - (C72361 + C72362) + C72363) * C63379 +
                      (C72364 - (C72365 + C72366) + C72367) * C63380) *
                         C139463 * C139570 +
                     ((C72362 + C72361 - C72360 - C72363) * C63378 +
                      (C72366 + C72365 - C72364 - C72367) * C63379 +
                      (C65311 * C9224 + C65484 * C9074 -
                       (C63381 * C17958 + C139289 * C17962) * C9225 -
                       (C63381 * C18202 + C139289 * C18204) * C139384) *
                          C63380) *
                         C139463 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C7401 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C7396 -
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C7402 -
                      (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                       C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                          C139308) *
                         C139463 * C139289 * C9074 +
                     ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C7402 -
                      ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                        C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                           C7396 +
                       (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                        C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                           C7401) +
                      (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                       C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                          C139308) *
                         C139463 * C139289 * C139384) *
                        C139570 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C7402 -
                      ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                        C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                           C7396 +
                       (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                        C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                           C7401) +
                      (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                       C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                          C139308) *
                         C139463 * C139289 * C9074 +
                     ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C7401 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C7396 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C7402 -
                      (C63534 * C17960 + C63380 * C18318 + C63533 * C3904 +
                       C63379 * C4171 + C63532 * C3901 + C63378 * C4168) *
                          C139308) *
                         C139463 * C139289 * C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C923 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C139570 -
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C924 -
                      (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                       C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                          C139360) *
                         C139463 * C139289 * C7396 +
                     ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C924 -
                      ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                        C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                           C139570 +
                       (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                        C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                           C923) +
                      (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                       C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                          C139360) *
                         C139463 * C139289 * C139308) *
                        C9074 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C924 -
                      ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                        C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                           C139570 +
                       (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                        C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                           C923) +
                      (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                       C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                          C139360) *
                         C139463 * C139289 * C7396 +
                     ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C923 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C139570 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C924 -
                      (C63534 * C18088 + C63380 * C18419 + C63533 * C3993 +
                       C63379 * C4250 + C63532 * C3990 + C63378 * C4249) *
                          C139360) *
                         C139463 * C139289 * C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C9224 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C9074 -
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C9225 -
                      (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                       C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                          C139384) *
                         C139463 * C139289 * C139570 +
                     ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C9225 -
                      ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                        C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                           C9074 +
                       (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                        C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                           C9224) +
                      (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                       C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                          C139384) *
                         C139463 * C139289 * C139360) *
                        C7396 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C9225 -
                      ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                        C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                           C9074 +
                       (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                        C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                           C9224) +
                      (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                       C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                          C139384) *
                         C139463 * C139289 * C139570 +
                     ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C9224 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C9074 -
                      (C63534 * C17958 + C63380 * C18316 + C63533 * C3895 +
                       C63379 * C4165 + C63532 * C3892 + C63378 * C4162) *
                          C9225 -
                      (C63534 * C18202 + C63380 * C18519 + C63533 * C4079 +
                       C63379 * C4331 + C63532 * C4076 + C63378 * C4328) *
                          C139384) *
                         C139463 * C139289 * C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C7401 +
             (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
             C585 * C139308) *
                C139289 * C63378 +
            (C22979 + C22980 - C22981 - C22982) * C139289 * C63379 +
            C70317 * C63380) *
               C9074 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C139463 * C2268) * C7396 +
              (C554 * C1700 + C139463 * C2264) * C7401) +
             C2287 * C139308) *
                C139289 * C63378 +
            (C24155 - (C24156 + C24157) + C24158) * C139289 * C63379 +
            (C71192 - (C71193 + C71194) + C71195) * C139289 * C63380) *
               C139384) *
              C139570 +
          (((C22981 - (C22980 + C22979) + C22982) * C139289 * C63378 +
            (C22987 - (C22988 + C22989) + C22990) * C139289 * C63379 +
            (C70311 - (C70312 + C70313) + C70314) * C139289 * C63380) *
               C9074 +
           ((C24157 + C24156 - C24155 - C24158) * C139289 * C63378 +
            (C71194 + C71193 - C71192 - C71195) * C139289 * C63379 +
            (C67051 * C7401 + C67052 * C7396 -
             (C554 * C17958 + C139463 * C18618) * C7402 -
             (C554 * C17960 + C139463 * C18620) * C139308) *
                C139289 * C63380) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C923 +
                       (C554 * C182 + C139463 * C641) * C139570 -
                       C15026 * C924 - C15138 * C139360) *
                          C139289 * C63378 +
                      (C15026 * C923 + C15138 * C139570 - C16960 * C924 -
                       C17072 * C139360) *
                          C139289 * C63379 +
                      (C16960 * C923 + C17072 * C139570 - C17713 * C924 -
                       C17787 * C139360) *
                          C139289 * C63380) *
                         C7396 +
                     ((C1505 - (C1504 + C1503) + C1522) * C139289 * C63378 +
                      (C15132 - (C15131 + C15130) + C15133) * C139289 * C63379 +
                      (C16961 * C924 - (C3218 * C139570 + C3122 * C923) +
                       C17073 * C139360) *
                          C139289 * C63380) *
                         C139308) *
                        C9074 +
                    (((C18638 * C924 -
                       ((C554 * C1794 + C139463 * C2368) * C139570 +
                        (C554 * C1700 + C139463 * C2264) * C923) +
                       C18755 * C139360) *
                          C139289 * C63378 +
                      (C18639 * C924 - (C18755 * C139570 + C18638 * C923) +
                       C18756 * C139360) *
                          C139289 * C63379 +
                      (C67051 * C924 - (C18756 * C139570 + C18639 * C923) +
                       C67132 * C139360) *
                          C139289 * C63380) *
                         C7396 +
                     ((C10504 + C10503 - C10502 - C10505) * C139289 * C63378 +
                      (C26357 + C26356 - C26355 - C26358) * C139289 * C63379 +
                      (C18641 * C923 + C18757 * C139570 -
                       (C554 * C17958 + C139463 * C18618) * C924 -
                       (C554 * C18088 + C139463 * C18747) * C139360) *
                          C139289 * C63380) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C9224 +
             (C554 * C245 + C139463 * C719) * C9074 -
             (C554 * C1700 + C139463 * C2264) * C9225 -
             (C554 * C1879 + C139463 * C2460) * C139384) *
                C139289 * C63378 +
            (C26489 + C26490 - C26491 - C26492) * C139289 * C63379 +
            (C29453 + C29452 - C29451 - C29454) * C139289 * C63380) *
               C139570 +
           ((C26491 - (C26490 + C26489) + C26492) * C139289 * C63378 +
            (C29451 - (C29452 + C29453) + C29454) * C139289 * C63379 +
            (C67051 * C9225 - (C17859 * C9074 + C17713 * C9224) +
             C67215 * C139384) *
                C139289 * C63380) *
               C139360) *
              C7396 +
          (((C9689 - (C9688 + C9687) + C9690) * C139289 * C63378 +
            C26502 * C139289 * C63379 +
            (C26495 - (C26496 + C26497) + C26498) * C139289 * C63380) *
               C139570 +
           (C26501 * C139289 * C63378 +
            (C26497 + C26496 - C26495 - C26498) * C139289 * C63379 +
            (C16961 * C9224 + C17182 * C9074 -
             (C554 * C17958 + C139463 * C18618) * C9225 -
             (C554 * C18202 + C139463 * C18856) * C139384) *
                C139289 * C63380) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7401 +
            (C63381 * C116 + C139289 * C125) * C7396 -
            (C63381 * C108 + C139289 * C114) * C7402 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C63378 +
           (C69851 + C69852 - C69853 - C69854) * C63379 + C69865 * C63380) *
              C139463 * C139603 +
          (((C63381 * C1697 + C139289 * C1702) * C7402 -
            ((C63381 * C1707 + C139289 * C1714) * C7396 +
             (C63381 * C1700 + C139289 * C1708) * C7401) +
            (C63381 * C1706 + C139289 * C1713) * C139308) *
               C63378 +
           (C70580 - (C70566 + C70567) + C70581) * C63379 +
           (C70582 - (C70572 + C70573) + C70583) * C63380) *
              C139463 * C139596 +
          (((C63381 * C4656 + C139289 * C4660) * C7401 +
            (C63381 * C4663 + C139289 * C4668) * C7396 -
            (C63381 * C4657 + C139289 * C4661) * C7402 -
            (C63381 * C4664 + C139289 * C4669) * C139308) *
               C63378 +
           (C67971 * C7401 + C67972 * C7396 -
            (C63381 * C5470 + C139289 * C5476) * C7402 -
            (C63381 * C5473 + C139289 * C5479) * C139308) *
               C63379 +
           (C67973 * C7401 + C67974 * C7396 -
            (C63381 * C19902 + C139289 * C19906) * C7402 -
            (C63381 * C19904 + C139289 * C19908) * C139308) *
               C63380) *
              C139463 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C181 +
                       (C63381 * C182 + C139289 * C188) * C139346) *
                          C63378 +
                      (C63884 * C181 + C63994 * C139346) * C63379 +
                      (C63890 * C181 + C63995 * C139346) * C63380) *
                         C139463 * C7396 -
                     ((C63997 * C139346 + C63892 * C181) * C63380 +
                      (C63996 * C139346 + C63886 * C181) * C63379 +
                      ((C63381 * C183 + C139289 * C189) * C139346 +
                       (C63381 * C108 + C139289 * C114) * C181) *
                          C63378) *
                         C139463 * C139308) *
                        C139603 +
                    ((((C63381 * C1697 + C139289 * C1702) * C181 +
                       (C63381 * C1791 + C139289 * C1796) * C139346) *
                          C63378 +
                      (C70576 * C181 + C70686 * C139346) * C63379 +
                      (C70578 * C181 + C70687 * C139346) * C63380) *
                         C139463 * C139308 -
                     ((C66641 * C139346 + C66546 * C181) * C63380 +
                      (C66640 * C139346 + C66548 * C181) * C63379 +
                      ((C63381 * C1794 + C139289 * C1799) * C139346 +
                       (C63381 * C1700 + C139289 * C1708) * C181) *
                          C63378) *
                         C139463 * C7396) *
                        C139596 +
                    ((((C63381 * C4656 + C139289 * C4660) * C181 +
                       (C63381 * C4746 + C139289 * C4750) * C139346) *
                          C63378 +
                      (C67971 * C181 + C68059 * C139346) * C63379 +
                      (C67973 * C181 + C68060 * C139346) * C63380) *
                         C139463 * C7396 -
                     (((C63381 * C20020 + C139289 * C20022) * C139346 +
                       (C63381 * C19902 + C139289 * C19906) * C181) *
                          C63380 +
                      ((C63381 * C5556 + C139289 * C5559) * C139346 +
                       (C63381 * C5470 + C139289 * C5476) * C181) *
                          C63379 +
                      ((C63381 * C4747 + C139289 * C4751) * C139346 +
                       (C63381 * C4657 + C139289 * C4661) * C181) *
                          C63378) *
                         C139463 * C139308) *
                        C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C10840 +
            (C63381 * C245 + C139289 * C251) * C139603 -
            (C63381 * C1700 + C139289 * C1708) * C10841 -
            (C63381 * C1879 + C139289 * C1884) * C139596 +
            (C63381 * C4656 + C139289 * C4660) * C10842 +
            (C63381 * C4831 + C139289 * C4835) * C10691) *
               C63378 +
           (C63884 * C10840 + C64092 * C139603 - C66548 * C10841 -
            C66734 * C139596 + C67971 * C10842 + C68151 * C10691) *
               C63379 +
           (C63890 * C10840 + C64093 * C139603 - C66546 * C10841 -
            C66736 * C139596 + C67973 * C10842 + C68152 * C10691) *
               C63380) *
              C139463 * C139346 * C7396 +
          (((C63381 * C1697 + C139289 * C1702) * C10841 -
            ((C63381 * C246 + C139289 * C252) * C139603 +
             (C63381 * C108 + C139289 * C114) * C10840) +
            (C63381 * C1878 + C139289 * C1883) * C139596 -
            (C63381 * C4657 + C139289 * C4661) * C10842 -
            (C63381 * C4832 + C139289 * C4836) * C10691) *
               C63378 +
           (C70576 * C10841 - (C64094 * C139603 + C63886 * C10840) +
            C70796 * C139596 - (C63381 * C5470 + C139289 * C5476) * C10842 -
            (C63381 * C5636 + C139289 * C5639) * C10691) *
               C63379 +
           (C70578 * C10841 - (C64095 * C139603 + C63892 * C10840) +
            C70797 * C139596 - (C63381 * C19902 + C139289 * C19906) * C10842 -
            (C63381 * C20128 + C139289 * C20130) * C10691) *
               C63380) *
              C139463 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C7401 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C7396 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C7402 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139308) *
                        C139463 * C139289 * C139603 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C7402 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C7396 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C7401) +
                     (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                      C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                         C139308) *
                        C139463 * C139289 * C139596 +
                    ((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C7401 +
                     (C63532 * C4663 + C63378 * C4917 + C63533 * C5474 +
                      C63379 * C5720 + C63534 * C19905 + C63380 * C20239) *
                         C7396 -
                     (C63534 * C19902 + C63380 * C20236 + C63533 * C5470 +
                      C63379 * C5716 + C63532 * C4657 + C63378 * C4914) *
                         C7402 -
                     (C63534 * C19904 + C63380 * C20238 + C63533 * C5473 +
                      C63379 * C5719 + C63532 * C4664 + C63378 * C4918) *
                         C139308) *
                        C139463 * C139289 * C10691) *
                   C139346) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C139346) *
                         C139463 * C139289 * C7396 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139346 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139463 * C139289 * C139308) *
                        C139603 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C181 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C139346) *
                         C139463 * C139289 * C139308 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139346 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C181) *
                         C139463 * C139289 * C7396) *
                        C139596 +
                    (((C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                       C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                          C181 +
                      (C63532 * C4746 + C63378 * C5007 + C63533 * C5557 +
                       C63379 * C5795 + C63534 * C20021 + C63380 * C20338) *
                          C139346) *
                         C139463 * C139289 * C7396 -
                     ((C63534 * C20020 + C63380 * C20339 + C63533 * C5556 +
                       C63379 * C5796 + C63532 * C4747 + C63378 * C5008) *
                          C139346 +
                      (C63534 * C19902 + C63380 * C20236 + C63533 * C5470 +
                       C63379 * C5716 + C63532 * C4657 + C63378 * C4914) *
                          C181) *
                         C139463 * C139289 * C139308) *
                        C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C10840 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139603 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C10841 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139596 +
                     (C63532 * C4656 + C63378 * C4913 + C63533 * C5471 +
                      C63379 * C5717 + C63534 * C19903 + C63380 * C20237) *
                         C10842 +
                     (C63532 * C4831 + C63378 * C5095 + C63533 * C5637 +
                      C63379 * C5872 + C63534 * C20129 + C63380 * C20438) *
                         C10691) *
                        C139463 * C139289 * C139346 * C7396 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C10841 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139603 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C10840) +
                     (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                      C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                         C139596 -
                     (C63534 * C19902 + C63380 * C20236 + C63533 * C5470 +
                      C63379 * C5716 + C63532 * C4657 + C63378 * C4914) *
                         C10842 -
                     (C63534 * C20128 + C63380 * C20439 + C63533 * C5636 +
                      C63379 * C5873 + C63532 * C4832 + C63378 * C5096) *
                         C10691) *
                        C139463 * C139289 * C139346 * C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C7401 +
                      (C554 * C116 + C139463 * C561) * C7396 - C584 * C7402 -
                      C585 * C139308) *
                         C139289 * C63378 +
                     (C22979 + C22980 - C22981 - C22982) * C139289 * C63379 +
                     C70317 * C63380) *
                        C139603 +
                    ((C2286 * C7402 -
                      ((C554 * C1707 + C139463 * C2268) * C7396 +
                       (C554 * C1700 + C139463 * C2264) * C7401) +
                      C2287 * C139308) *
                         C139289 * C63378 +
                     (C24155 - (C24156 + C24157) + C24158) * C139289 * C63379 +
                     (C71192 - (C71193 + C71194) + C71195) * C139289 * C63380) *
                        C139596 +
                    (((C554 * C4656 + C139463 * C5191) * C7401 +
                      (C554 * C4663 + C139463 * C5195) * C7396 - C5208 * C7402 -
                      C5209 * C139308) *
                         C139289 * C63378 +
                     (C20549 * C7401 + C20550 * C7396 - C19593 * C7402 -
                      C19594 * C139308) *
                         C139289 * C63379 +
                     (C68461 * C7401 + C68462 * C7396 -
                      (C554 * C19902 + C139463 * C20538) * C7402 -
                      (C554 * C19904 + C139463 * C20540) * C139308) *
                         C139289 * C63380) *
                        C10691) *
                   C139346) /
                  (p * q * std::sqrt(p + q));
    d2eezy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C181 +
                       (C554 * C182 + C139463 * C641) * C139346) *
                          C139289 * C63378 +
                      (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
                      (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
                         C7396 -
                     ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
                      (C14135 + C14134) * C139289 * C63379 +
                      (C664 + C648) * C139289 * C63378) *
                         C139308) *
                        C139603 +
                    (((C2371 + C2383) * C139289 * C63378 +
                      (C16077 + C16078) * C139289 * C63379 +
                      (C18641 * C181 + C18757 * C139346) * C139289 * C63380) *
                         C139308 -
                     ((C18756 * C139346 + C18639 * C181) * C139289 * C63380 +
                      (C18755 * C139346 + C18638 * C181) * C139289 * C63379 +
                      ((C554 * C1794 + C139463 * C2368) * C139346 +
                       (C554 * C1700 + C139463 * C2264) * C181) *
                          C139289 * C63378) *
                         C7396) *
                        C139596 +
                    ((((C554 * C4656 + C139463 * C5191) * C181 +
                       (C554 * C4746 + C139463 * C5285) * C139346) *
                          C139289 * C63378 +
                      (C20549 * C181 + C20655 * C139346) * C139289 * C63379 +
                      (C68461 * C181 + C68542 * C139346) * C139289 * C63380) *
                         C7396 -
                     (((C554 * C20020 + C139463 * C20651) * C139346 +
                       (C554 * C19902 + C139463 * C20538) * C181) *
                          C139289 * C63380 +
                      (C19697 + C19693) * C139289 * C63379 +
                      (C5298 + C5290) * C139289 * C63378) *
                         C139308) *
                        C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C10840 +
            (C554 * C245 + C139463 * C719) * C139603 -
            (C554 * C1700 + C139463 * C2264) * C10841 -
            (C554 * C1879 + C139463 * C2460) * C139596 +
            (C554 * C4656 + C139463 * C5191) * C10842 +
            (C554 * C4831 + C139463 * C5373) * C10691) *
               C139289 * C63378 +
           (C30337 + C30338 - C30339 - C30340 + C30341 + C30342) * C139289 *
               C63379 +
           (C16960 * C10840 + C17181 * C139603 - C18639 * C10841 -
            C18874 * C139596 + C68461 * C10842 + C68625 * C10691) *
               C139289 * C63380) *
              C139346 * C7396 +
          ((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C139289 *
               C63378 +
           (C27387 - (C27386 + C27385) + C27388 - C27389 - C27390) * C139289 *
               C63379 +
           (C18641 * C10841 - (C3306 * C139603 + C3122 * C10840) +
            C18875 * C139596 - (C554 * C19902 + C139463 * C20538) * C10842 -
            (C554 * C20128 + C139463 * C20754) * C10691) *
               C139289 * C63380) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C103 +
           (C63381 * C116 + C139289 * C125) * C92 -
           (C63381 * C108 + C139289 * C114) * C104 -
           (C63381 * C117 + C139289 * C126) * C93 +
           (C63381 * C109 + C139289 * C115) * C105 +
           (C63381 * C118 + C139289 * C127) * C94 -
           (C63381 * C110 + C139289 * C119) * C106 -
           (C63381 * C120 + C139289 * C128) * C95) *
              C63378 +
          ((C63381 * C832 + C139289 * C840) * C103 +
           (C63381 * C839 + C139289 * C846) * C92 -
           (C63381 * C829 + C139289 * C834) * C104 -
           (C63381 * C838 + C139289 * C845) * C93 +
           (C63381 * C830 + C139289 * C835) * C105 +
           (C63381 * C837 + C139289 * C844) * C94 -
           (C63381 * C831 + C139289 * C836) * C106 -
           (C63381 * C841 + C139289 * C847) * C95) *
              C63379 +
          ((C63381 * C2570 + C139289 * C2574) * C103 +
           (C63381 * C2577 + C139289 * C2582) * C92 -
           (C63381 * C2571 + C139289 * C2575) * C104 -
           (C63381 * C2578 + C139289 * C2583) * C93 +
           (C63381 * C2572 + C139289 * C2576) * C105 +
           (C63381 * C2579 + C139289 * C2584) * C94 -
           (C63381 * C2573 + C139289 * C2580) * C106 -
           (C63381 * C2581 + C139289 * C2585) * C95) *
              C63380) *
         C139463 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C137108 +
            (C63381 * C116 + C139289 * C125) * C139562 -
            (C63381 * C108 + C139289 * C114) * C137101 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C63378 +
           (C65294 + C65295 - C65296 - C65297) * C63379 + C65320 * C63380) *
              C139463 * C139372 * C2565 +
          ((C65296 - (C65295 + C65294) + C65297) * C63378 +
           (C65300 - (C65299 + C65298) + C65301) * C63379 +
           (C65316 - (C65317 + C65318) + C65319) * C63380) *
              C139463 * C139372 * C2566 +
          (C65320 * C63378 + (C65318 + C65317 - C65316 - C65319) * C63379 +
           ((C63381 * C17251 + C139289 * C17255) * C137108 +
            (C63381 * C17253 + C139289 * C17257) * C139562 -
            (C63381 * C17250 + C139289 * C17254) * C137101 -
            (C63381 * C17252 + C139289 * C17256) * C139308) *
               C63380) *
              C139463 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C181 +
            (C63381 * C182 + C139289 * C188) * C139346) *
               C63378 +
           ((C63381 * C832 + C139289 * C840) * C181 +
            (C63381 * C927 + C139289 * C932) * C139346) *
               C63379 +
           ((C63381 * C2570 + C139289 * C2574) * C181 +
            (C63381 * C2663 + C139289 * C2667) * C139346) *
               C63380) *
              C139463 * C92 -
          (((C63381 * C2664 + C139289 * C2668) * C139346 +
            (C63381 * C2571 + C139289 * C2575) * C181) *
               C63380 +
           ((C63381 * C926 + C139289 * C931) * C139346 +
            (C63381 * C829 + C139289 * C834) * C181) *
               C63379 +
           ((C63381 * C183 + C139289 * C189) * C139346 +
            (C63381 * C108 + C139289 * C114) * C181) *
               C63378) *
              C139463 * C93 +
          (((C63381 * C109 + C139289 * C115) * C181 +
            (C63381 * C184 + C139289 * C190) * C139346) *
               C63378 +
           ((C63381 * C830 + C139289 * C835) * C181 +
            (C63381 * C925 + C139289 * C930) * C139346) *
               C63379 +
           ((C63381 * C2572 + C139289 * C2576) * C181 +
            (C63381 * C2665 + C139289 * C2669) * C139346) *
               C63380) *
              C139463 * C94 -
          (((C63381 * C2666 + C139289 * C2670) * C139346 +
            (C63381 * C2573 + C139289 * C2580) * C181) *
               C63380 +
           ((C63381 * C928 + C139289 * C933) * C139346 +
            (C63381 * C831 + C139289 * C836) * C181) *
               C63379 +
           ((C63381 * C185 + C139289 * C191) * C139346 +
            (C63381 * C110 + C139289 * C119) * C181) *
               C63378) *
              C139463 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C63378 +
           (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
            C65313 * C2662 + C65399 * C2567) *
               C63379 +
           (C63890 * C2660 + C63995 * C2565 - C65313 * C2661 - C65399 * C2566 +
            (C63381 * C17251 + C139289 * C17255) * C2662 +
            (C63381 * C17337 + C139289 * C17339) * C2567) *
               C63380) *
              C139463 * C139562 +
          ((C63886 * C2661 -
            ((C63381 * C183 + C139289 * C189) * C2565 +
             (C63381 * C108 + C139289 * C114) * C2660) +
            C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
               C63378 +
           (C63892 * C2661 - (C63996 * C2565 + C63886 * C2660) +
            C63997 * C2566 - C65311 * C2662 - C65400 * C2567) *
               C63379 +
           (C65311 * C2661 - (C63997 * C2565 + C63892 * C2660) +
            C65400 * C2566 - (C63381 * C17250 + C139289 * C17254) * C2662 -
            (C63381 * C17336 + C139289 * C17338) * C2567) *
               C63380) *
              C139463 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139289 * C113) * C244 +
                      (C63381 * C245 + C139289 * C251) * C139372) *
                         C63378 +
                     ((C63381 * C832 + C139289 * C840) * C244 +
                      (C63381 * C1011 + C139289 * C1016) * C139372) *
                         C63379 +
                     ((C63381 * C2570 + C139289 * C2574) * C244 +
                      (C63381 * C2745 + C139289 * C2749) * C139372) *
                         C63380) *
                        C139463 * C139346 * C92 -
                    (((C63381 * C2746 + C139289 * C2750) * C139372 +
                      (C63381 * C2571 + C139289 * C2575) * C244) *
                         C63380 +
                     ((C63381 * C1010 + C139289 * C1015) * C139372 +
                      (C63381 * C829 + C139289 * C834) * C244) *
                         C63379 +
                     ((C63381 * C246 + C139289 * C252) * C139372 +
                      (C63381 * C108 + C139289 * C114) * C244) *
                         C63378) *
                        C139463 * C139346 * C93 +
                    (((C63381 * C109 + C139289 * C115) * C244 +
                      (C63381 * C247 + C139289 * C253) * C139372) *
                         C63378 +
                     ((C63381 * C830 + C139289 * C835) * C244 +
                      (C63381 * C1009 + C139289 * C1014) * C139372) *
                         C63379 +
                     ((C63381 * C2572 + C139289 * C2576) * C244 +
                      (C63381 * C2747 + C139289 * C2751) * C139372) *
                         C63380) *
                        C139463 * C139346 * C94 -
                    (((C63381 * C2748 + C139289 * C2752) * C139372 +
                      (C63381 * C2573 + C139289 * C2580) * C244) *
                         C63380 +
                     ((C63381 * C1012 + C139289 * C1017) * C139372 +
                      (C63381 * C831 + C139289 * C836) * C244) *
                         C63379 +
                     ((C63381 * C248 + C139289 * C254) * C139372 +
                      (C63381 * C110 + C139289 * C119) * C244) *
                         C63378) *
                        C139463 * C139346 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C244 +
                       (C63381 * C245 + C139289 * C251) * C139372) *
                          C63378 +
                      (C64074 + C64098) * C63379 + C65475 * C63380) *
                         C139463 * C2565 -
                     ((C65485 + C65478) * C63380 + (C64099 + C64077) * C63379 +
                      (C64098 + C64074) * C63378) *
                         C139463 * C2566 +
                     (C65475 * C63378 + (C65478 + C65485) * C63379 +
                      ((C63381 * C17251 + C139289 * C17255) * C244 +
                       (C63381 * C17413 + C139289 * C17415) * C139372) *
                          C63380) *
                         C139463 * C2567) *
                        C139562 +
                    (((C64080 + C64100) * C63378 + (C64083 + C64101) * C63379 +
                      (C65479 + C65486) * C63380) *
                         C139463 * C2566 -
                     (C65482 * C63380 + (C64100 + C64080) * C63379 +
                      ((C63381 * C246 + C139289 * C252) * C139372 +
                       (C63381 * C108 + C139289 * C114) * C244) *
                          C63378) *
                         C139463 * C2565 -
                     (((C63381 * C17412 + C139289 * C17414) * C139372 +
                       (C63381 * C17250 + C139289 * C17254) * C244) *
                          C63380 +
                      (C65486 + C65479) * C63379 + C65482 * C63378) *
                         C139463 * C2567) *
                        C139308)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[72] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                     C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                        C103 +
                    (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                     C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                        C92 -
                    (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                     C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                        C104 -
                    (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                     C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                        C93 +
                    (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                     C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                        C105 +
                    (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                     C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                        C94 -
                    (C63534 * C2573 + C63380 * C2830 + C63533 * C831 +
                     C63379 * C1096 + C63532 * C110 + C63378 * C311) *
                        C106 -
                    (C63534 * C2581 + C63380 * C2834 + C63533 * C841 +
                     C63379 * C1101 + C63532 * C120 + C63378 * C317) *
                        C95) *
                   C139463 * C139289 * C139372 * C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C137108 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139562 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C137101 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C139308) *
                        C139463 * C139289 * C139372 * C2565 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C137101 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139562 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C137108) +
                     (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                      C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                         C139308) *
                        C139463 * C139289 * C139372 * C2566 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C137108 +
                     (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                      C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                         C139562 -
                     (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                      C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                         C137101 -
                     (C63534 * C17252 + C63380 * C17490 + C63533 * C3369 +
                      C63379 * C3547 + C63532 * C2578 + C63378 * C2832) *
                         C139308) *
                        C139463 * C139289 * C139372 * C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[72] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C181 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139346) *
                        C139463 * C139289 * C92 -
                    ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                      C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                         C139346 +
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C181) *
                        C139463 * C139289 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C181 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                      C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                         C139346) *
                        C139463 * C139289 * C94 -
                    ((C63534 * C2666 + C63380 * C2924 + C63533 * C928 +
                      C63379 * C1198 + C63532 * C185 + C63378 * C397) *
                         C139346 +
                     (C63534 * C2573 + C63380 * C2830 + C63533 * C831 +
                      C63379 * C1096 + C63532 * C110 + C63378 * C311) *
                         C181) *
                        C139463 * C139289 * C95) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C2660 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C2565 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C2661 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C2566 +
                     (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C2662 +
                     (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                      C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                         C2567) *
                        C139463 * C139289 * C139562 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C2661 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C2565 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C2660) +
                     (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                      C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                         C2566 -
                     (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                      C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                         C2662 -
                     (C63534 * C17336 + C63380 * C17559 + C63533 * C3432 +
                      C63379 * C3600 + C63532 * C2664 + C63378 * C2922) *
                         C2567) *
                        C139463 * C139289 * C139308) *
                   C139372) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[72] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139372) *
                        C139463 * C139289 * C139346 * C92 -
                    ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                      C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                         C139372 +
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C244) *
                        C139463 * C139289 * C139346 * C93 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C244 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                      C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                         C139372) *
                        C139463 * C139289 * C139346 * C94 -
                    ((C63534 * C2748 + C63380 * C3020 + C63533 * C1012 +
                      C63379 * C1302 + C63532 * C248 + C63378 * C477) *
                         C139372 +
                     (C63534 * C2573 + C63380 * C2830 + C63533 * C831 +
                      C63379 * C1096 + C63532 * C110 + C63378 * C311) *
                         C244) *
                        C139463 * C139289 * C139346 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139372) *
                         C139463 * C139289 * C2565 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139372 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C244) *
                         C139463 * C139289 * C2566 +
                     ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                       C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                          C244 +
                      (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                       C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                          C139372) *
                         C139463 * C139289 * C2567) *
                        C139562 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C244 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139372) *
                         C139463 * C139289 * C2566 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139372 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139463 * C139289 * C2565 -
                     ((C63534 * C17412 + C63380 * C17626 + C63533 * C3488 +
                       C63379 * C3653 + C63532 * C2746 + C63378 * C3018) *
                          C139372 +
                      (C63534 * C17250 + C63380 * C17488 + C63533 * C3366 +
                       C63379 * C3544 + C63532 * C2571 + C63378 * C2828) *
                          C244) *
                         C139463 * C139289 * C2567) *
                        C139308)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139463 * C555) * C103 +
           (C554 * C116 + C139463 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C139289 * C63378 +
          (C15026 * C103 + C15027 * C92 - C1418 * C104 - C1419 * C93 +
           C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
              C139289 * C63379 +
          (C16960 * C103 + C16959 * C92 - C3122 * C104 - C3123 * C93 +
           C3124 * C105 + C3125 * C94 -
           (C554 * C2573 + C139463 * C3108) * C106 -
           (C554 * C2581 + C139463 * C3112) * C95) *
              C139289 * C63380) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C137108 +
            (C554 * C116 + C139463 * C561) * C139562 - C584 * C137101 -
            C585 * C139308) *
               C139289 * C63378 +
           (C16937 + C16938 - C16939 - C16940) * C139289 * C63379 +
           C65790 * C63380) *
              C139372 * C2565 +
          ((C16939 - (C16938 + C16937) + C16940) * C139289 * C63378 +
           (C16945 - (C16963 + C16964) + C16950) * C139289 * C63379 +
           (C65784 - (C65785 + C65786) + C65787) * C139289 * C63380) *
              C139372 * C2566 +
          (C65790 * C63378 +
           (C65786 + C65785 - C65784 - C65787) * C139289 * C63379 +
           ((C554 * C17251 + C139463 * C17695) * C137108 +
            (C554 * C17253 + C139463 * C17697) * C139562 -
            (C554 * C17250 + C139463 * C17694) * C137101 -
            (C554 * C17252 + C139463 * C17696) * C139308) *
               C139289 * C63380) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C181 +
            (C554 * C182 + C139463 * C641) * C139346) *
               C139289 * C63378 +
           (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
           (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
              C92 -
          ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
           (C14135 + C14134) * C139289 * C63379 +
           (C664 + C648) * C139289 * C63378) *
              C93 +
          (C668 * C139289 * C63378 + (C14137 + C14136) * C139289 * C63379 +
           (C3124 * C181 + C3219 * C139346) * C139289 * C63380) *
              C94 -
          (((C554 * C2666 + C139463 * C3202) * C139346 +
            (C554 * C2573 + C139463 * C3108) * C181) *
               C139289 * C63380 +
           (C14139 + C14138) * C139289 * C63379 + C669 * C139289 * C63378) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C2660 +
            (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
            C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
               C139289 * C63378 +
           (C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
            C17713 * C2662 + C17787 * C2567) *
               C139289 * C63379 +
           (C16960 * C2660 + C17072 * C2565 - C17713 * C2661 - C17787 * C2566 +
            (C554 * C17251 + C139463 * C17695) * C2662 +
            (C554 * C17337 + C139463 * C17782) * C2567) *
               C139289 * C63380) *
              C139562 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C139289 *
               C63378 +
           (C17067 - (C17066 + C17065) + C17068 - C17069 - C17074) * C139289 *
               C63379 +
           (C16961 * C2661 - (C3218 * C2565 + C3122 * C2660) + C17073 * C2566 -
            (C554 * C17250 + C139463 * C17694) * C2662 -
            (C554 * C17336 + C139463 * C17783) * C2567) *
               C139289 * C63380) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C244 +
            (C554 * C245 + C139463 * C719) * C139372) *
               C139289 * C63378 +
           (C15237 + C15244) * C139289 * C63379 +
           (C17176 + C17183) * C139289 * C63380) *
              C139346 * C92 -
          (C17173 * C139289 * C63380 + C15241 * C139289 * C63379 +
           (C742 + C726) * C139289 * C63378) *
              C139346 * C93 +
          (C746 * C139289 * C63378 + C15242 * C139289 * C63379 +
           (C3303 + C3309) * C139289 * C63380) *
              C139346 * C94 -
          (((C554 * C2748 + C139463 * C3298) * C139372 +
            (C554 * C2573 + C139463 * C3108) * C244) *
               C139289 * C63380 +
           (C1620 + C1612) * C139289 * C63379 + C747 * C139289 * C63378) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C139289 * C63378 +
            (C15237 + C15244) * C139289 * C63379 + C65941 * C63380) *
               C2565 -
           ((C17860 + C17856) * C139289 * C63380 +
            (C17183 + C17176) * C139289 * C63379 +
            (C15244 + C15237) * C139289 * C63378) *
               C2566 +
           (C65941 * C63378 + (C17856 + C17860) * C139289 * C63379 +
            ((C554 * C17251 + C139463 * C17695) * C244 +
             (C554 * C17413 + C139463 * C17854) * C139372) *
                C139289 * C63380) *
               C2567) *
              C139562 +
          ((C15240 * C139289 * C63378 + C17177 * C139289 * C63379 +
            (C17178 + C17184) * C139289 * C63380) *
               C2566 -
           (C65940 * C63380 + C15241 * C139289 * C63379 +
            (C742 + C726) * C139289 * C63378) *
               C2565 -
           (((C554 * C17412 + C139463 * C17853) * C139372 +
             (C554 * C17250 + C139463 * C17694) * C244) *
                C139289 * C63380 +
            (C17184 + C17178) * C139289 * C63379 + C65940 * C63378) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C63379 +
           (C63902 + C63903 - C63904 - C63905 + C63906 + C63907) * C63380) *
              C139463 * C139372 * C139570 +
          ((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C63378 +
           (C63904 - (C63903 + C63902) + C63905 - C63906 - C63907) * C63379 +
           ((C63381 * C3366 + C139289 * C3372) * C827 -
            ((C63381 * C3370 + C139289 * C3376) * C821 +
             (C63381 * C3367 + C139289 * C3373) * C826) +
            (C63381 * C3369 + C139289 * C3375) * C822 -
            (C63381 * C3365 + C139289 * C3371) * C828 -
            (C63381 * C3368 + C139289 * C3374) * C823) *
               C63380) *
              C139463 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3364 +
            (C63381 * C116 + C139289 * C125) * C139303) *
               C63378 +
           (C65996 + C65997) * C63379 + C66006 * C63380) *
              C139463 * C139372 * C3360 -
          (C66007 * C63380 + (C65999 + C65998) * C63379 +
           (C65997 + C65996) * C63378) *
              C139463 * C139372 * C3361 +
          (C66006 * C63378 + (C66001 + C66000) * C63379 +
           (C66010 + C66011) * C63380) *
              C139463 * C139372 * C3362 -
          (((C63381 * C65992 + C139289 * C65994) * C139303 +
            (C63381 * C65991 + C139289 * C65993) * C3364) *
               C63380 +
           (C66011 + C66010) * C63379 + C66007 * C63378) *
              C139463 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C923 +
            (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
            C63994 * C139360) *
               C63378 +
           (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
            C63995 * C139360) *
               C63379 +
           (C63890 * C923 + C63995 * C139570 -
            (C63381 * C3367 + C139289 * C3373) * C924 -
            (C63381 * C3433 + C139289 * C3436) * C139360) *
               C63380) *
              C139463 * C821 +
          ((C63886 * C924 -
            ((C63381 * C183 + C139289 * C189) * C139570 +
             (C63381 * C108 + C139289 * C114) * C923) +
            C63996 * C139360) *
               C63378 +
           (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
            C63997 * C139360) *
               C63379 +
           ((C63381 * C3366 + C139289 * C3372) * C924 -
            (C63997 * C139570 + C63892 * C923) +
            (C63381 * C3432 + C139289 * C3435) * C139360) *
               C63380) *
              C139463 * C822 +
          (((C63381 * C109 + C139289 * C115) * C923 +
            (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
            C63998 * C139360) *
               C63378 +
           (C63888 * C923 + C63998 * C139570 - C63894 * C924 -
            C63999 * C139360) *
               C63379 +
           (C63894 * C923 + C63999 * C139570 -
            (C63381 * C3365 + C139289 * C3371) * C924 -
            (C63381 * C3431 + C139289 * C3434) * C139360) *
               C63380) *
              C139463 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C3427 +
           (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
           C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
           C65399 * C3363) *
              C63378 +
          (C63884 * C3427 + C63994 * C3360 - C63890 * C3428 - C63995 * C3361 +
           C65313 * C3429 + C65399 * C3362 - C66008 * C3430 - C66066 * C3363) *
              C63379 +
          (C63890 * C3427 + C63995 * C3360 - C65313 * C3428 - C65399 * C3361 +
           C66008 * C3429 + C66066 * C3362 -
           (C63381 * C65991 + C139289 * C65993) * C3430 -
           (C63381 * C66061 + C139289 * C66062) * C3363) *
              C63380) *
         C139463 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C244 +
                       (C63381 * C245 + C139289 * C251) * C139372) *
                          C63378 +
                      (C64074 + C64098) * C63379 + (C64077 + C64099) * C63380) *
                         C139463 * C139570 -
                     (((C63381 * C3489 + C139289 * C3492) * C139372 +
                       (C63381 * C3367 + C139289 * C3373) * C244) *
                          C63380 +
                      (C64099 + C64077) * C63379 + (C64098 + C64074) * C63378) *
                         C139463 * C139360) *
                        C821 +
                    (((C64080 + C64100) * C63378 + (C64083 + C64101) * C63379 +
                      ((C63381 * C3366 + C139289 * C3372) * C244 +
                       (C63381 * C3488 + C139289 * C3491) * C139372) *
                          C63380) *
                         C139463 * C139360 -
                     ((C64101 + C64083) * C63380 + (C64100 + C64080) * C63379 +
                      ((C63381 * C246 + C139289 * C252) * C139372 +
                       (C63381 * C108 + C139289 * C114) * C244) *
                          C63378) *
                         C139463 * C139570) *
                        C822 +
                    ((((C63381 * C109 + C139289 * C115) * C244 +
                       (C63381 * C247 + C139289 * C253) * C139372) *
                          C63378 +
                      (C64086 + C64102) * C63379 + (C64089 + C64103) * C63380) *
                         C139463 * C139570 -
                     (((C63381 * C3487 + C139289 * C3490) * C139372 +
                       (C63381 * C3365 + C139289 * C3371) * C244) *
                          C63380 +
                      (C64103 + C64089) * C63379 + (C64102 + C64086) * C63378) *
                         C139463 * C139360) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63381 * C107 + C139289 * C113) * C244 +
                      (C63381 * C245 + C139289 * C251) * C139372) *
                         C63378 +
                     (C64074 + C64098) * C63379 + C65475 * C63380) *
                        C139463 * C3360 -
                    (C66119 * C63380 + (C64099 + C64077) * C63379 +
                     (C64098 + C64074) * C63378) *
                        C139463 * C3361 +
                    (C65475 * C63378 + (C65478 + C65485) * C63379 +
                     (C66120 + C66124) * C63380) *
                        C139463 * C3362 -
                    (((C63381 * C66116 + C139289 * C66117) * C139372 +
                      (C63381 * C65991 + C139289 * C65993) * C244) *
                         C63380 +
                     (C66124 + C66120) * C63379 + C66119 * C63378) *
                        C139463 * C3363) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[73] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C821 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C822 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C828 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                      C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                         C823) *
                        C139463 * C139289 * C139372 * C139570 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C827 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C821 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C826) +
                     (C63532 * C838 + C63378 * C1099 + C63533 * C2578 +
                      C63379 * C2832 + C63534 * C3369 + C63380 * C3547) *
                         C822 -
                     (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                      C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                         C828 -
                     (C63534 * C3368 + C63380 * C3546 + C63533 * C2579 +
                      C63379 * C2833 + C63532 * C837 + C63378 * C1100) *
                         C823) *
                        C139463 * C139289 * C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C3364 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C139303) *
                        C139463 * C139289 * C139372 * C3360 -
                    ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                      C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                         C139303 +
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C3364) *
                        C139463 * C139289 * C139372 * C3361 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C3364 +
                     (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                      C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                         C139303) *
                        C139463 * C139289 * C139372 * C3362 -
                    ((C63534 * C65992 + C63380 * C66175 + C63533 * C17253 +
                      C63379 * C17491 + C63532 * C3370 + C63378 * C3548) *
                         C139303 +
                     (C63534 * C65991 + C63380 * C66174 + C63533 * C17251 +
                      C63379 * C17489 + C63532 * C3367 + C63378 * C3545) *
                         C3364) *
                        C139463 * C139289 * C139372 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[73] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C923 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C139570 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C924 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C139360) *
                        C139463 * C139289 * C821 +
                    ((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                      C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                         C924 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139570 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C923) +
                     (C63532 * C926 + C63378 * C1196 + C63533 * C2664 +
                      C63379 * C2922 + C63534 * C3432 + C63380 * C3600) *
                         C139360) *
                        C139463 * C139289 * C822 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C923 +
                     (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                      C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                         C139570 -
                     (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                      C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                         C924 -
                     (C63534 * C3431 + C63380 * C3601 + C63533 * C2665 +
                      C63379 * C2923 + C63532 * C925 + C63378 * C1197) *
                         C139360) *
                        C139463 * C139289 * C823) *
                   C139372) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                     C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                        C3427 +
                    (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                     C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                        C3360 -
                    (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                     C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                        C3428 -
                    (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                     C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                        C3361 +
                    (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                     C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                        C3429 +
                    (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                     C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                        C3362 -
                    (C63534 * C65991 + C63380 * C66174 + C63533 * C17251 +
                     C63379 * C17489 + C63532 * C3367 + C63378 * C3545) *
                        C3430 -
                    (C63534 * C66061 + C63380 * C66226 + C63533 * C17337 +
                     C63379 * C17558 + C63532 * C3433 + C63378 * C3599) *
                        C3363) *
                   C139463 * C139289 * C139303 * C139372) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[73] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C244 +
                      (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                       C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                          C139372) *
                         C139463 * C139289 * C139570 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139372 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C244) *
                         C139463 * C139289 * C139360) *
                        C821 +
                    (((C63532 * C829 + C63378 * C1093 + C63533 * C2571 +
                       C63379 * C2828 + C63534 * C3366 + C63380 * C3544) *
                          C244 +
                      (C63532 * C1010 + C63378 * C1300 + C63533 * C2746 +
                       C63379 * C3018 + C63534 * C3488 + C63380 * C3653) *
                          C139372) *
                         C139463 * C139289 * C139360 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139372 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C244) *
                         C139463 * C139289 * C139570) *
                        C822 +
                    (((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                       C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                          C244 +
                      (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                       C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                          C139372) *
                         C139463 * C139289 * C139570 -
                     ((C63534 * C3487 + C63380 * C3652 + C63533 * C2747 +
                       C63379 * C3019 + C63532 * C1009 + C63378 * C1299) *
                          C139372 +
                      (C63534 * C3365 + C63380 * C3543 + C63533 * C2572 +
                       C63379 * C2829 + C63532 * C830 + C63378 * C1095) *
                          C244) *
                         C139463 * C139289 * C139360) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C244 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139372) *
                        C139463 * C139289 * C3360 -
                    ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                      C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                         C139372 +
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C244) *
                        C139463 * C139289 * C3361 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C244 +
                     (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                      C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                         C139372) *
                        C139463 * C139289 * C3362 -
                    ((C63534 * C66116 + C63380 * C66277 + C63533 * C17413 +
                      C63379 * C17627 + C63532 * C3489 + C63378 * C3654) *
                         C139372 +
                     (C63534 * C65991 + C63380 * C66174 + C63533 * C17251 +
                      C63379 * C17489 + C63532 * C3367 + C63378 * C3545) *
                         C244) *
                        C139463 * C139289 * C3363) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eezx[73] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C826 +
                      (C554 * C116 + C139463 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C139289 * C63378 +
                     (C15028 + C15029 - C15016 - C15017 + C15018 + C15019) *
                         C139289 * C63379 +
                     (C64400 + C64401 - C64402 - C64403 + C64404 + C64405) *
                         C139289 * C63380) *
                        C139372 * C139570 +
                    ((C15016 - (C15029 + C15028) + C15017 - C15018 - C15019) *
                         C139289 * C63378 +
                     (C64402 - (C64401 + C64400) + C64403 - C64404 - C64405) *
                         C139289 * C63379 +
                     (C16961 * C827 - (C17714 * C821 + C17713 * C826) +
                      C16962 * C822 - (C554 * C3365 + C139463 * C3705) * C828 -
                      (C554 * C3368 + C139463 * C3708) * C823) *
                         C139289 * C63380) *
                        C139372 * C139360)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C3364 +
                      (C554 * C116 + C139463 * C561) * C139303) *
                         C139289 * C63378 +
                     (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                        C139372 * C3360 -
                    (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                     (C17700 + C17699) * C139289 * C63378) *
                        C139372 * C3361 +
                    (C66337 * C63378 + (C17715 + C17716) * C139289 * C63379 +
                     (C66341 + C66342) * C139289 * C63380) *
                        C139372 * C3362 -
                    (((C554 * C65992 + C139463 * C66329) * C139303 +
                      (C554 * C65991 + C139463 * C66328) * C3364) *
                         C139289 * C63380 +
                     (C66342 + C66341) * C139289 * C63379 + C66338 * C63378) *
                        C139372 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C923 +
            (C554 * C182 + C139463 * C641) * C139570 - C15026 * C924 -
            C15138 * C139360) *
               C139289 * C63378 +
           (C15026 * C923 + C15138 * C139570 - C16960 * C924 -
            C17072 * C139360) *
               C139289 * C63379 +
           (C16960 * C923 + C17072 * C139570 - C17713 * C924 -
            C17787 * C139360) *
               C139289 * C63380) *
              C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C139289 * C63378 +
           (C15132 - (C15131 + C15130) + C15133) * C139289 * C63379 +
           (C16961 * C924 - (C3218 * C139570 + C3122 * C923) +
            C17073 * C139360) *
               C139289 * C63380) *
              C822 +
          (C1526 * C139289 * C63378 +
           (C15136 + C15135 - C15134 - C15137) * C139289 * C63379 +
           (C3124 * C923 + C3219 * C139570 -
            (C554 * C3365 + C139463 * C3705) * C924 -
            (C554 * C3431 + C139463 * C3763) * C139360) *
               C139289 * C63380) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C139463 * C555) * C3427 +
           (C554 * C182 + C139463 * C641) * C3360 - C15026 * C3428 -
           C15138 * C3361 + C16960 * C3429 + C17072 * C3362 - C17713 * C3430 -
           C17787 * C3363) *
              C139289 * C63378 +
          (C15026 * C3427 + C15138 * C3360 - C16960 * C3428 - C17072 * C3361 +
           C17713 * C3429 + C17787 * C3362 - C66339 * C3430 - C66396 * C3363) *
              C139289 * C63379 +
          (C16960 * C3427 + C17072 * C3360 - C17713 * C3428 - C17787 * C3361 +
           C66339 * C3429 + C66396 * C3362 -
           (C554 * C65991 + C139463 * C66328) * C3430 -
           (C554 * C66061 + C139463 * C66392) * C3363) *
              C139289 * C63380) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C244 +
             (C554 * C245 + C139463 * C719) * C139372) *
                C139289 * C63378 +
            (C15237 + C15244) * C139289 * C63379 +
            (C17176 + C17183) * C139289 * C63380) *
               C139570 -
           ((C17860 + C17856) * C139289 * C63380 +
            (C17183 + C17176) * C139289 * C63379 +
            (C15244 + C15237) * C139289 * C63378) *
               C139360) *
              C821 +
          ((C15240 * C139289 * C63378 + C17177 * C139289 * C63379 +
            (C17178 + C17184) * C139289 * C63380) *
               C139360 -
           (C17173 * C139289 * C63380 + C15241 * C139289 * C63379 +
            (C742 + C726) * C139289 * C63378) *
               C139570) *
              C822 +
          ((C746 * C139289 * C63378 + C15242 * C139289 * C63379 +
            (C3303 + C3309) * C139289 * C63380) *
               C139570 -
           (((C554 * C3487 + C139463 * C3814) * C139372 +
             (C554 * C3365 + C139463 * C3705) * C244) *
                C139289 * C63380 +
            (C3309 + C3303) * C139289 * C63379 + C1621 * C139289 * C63378) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C244 +
            (C554 * C245 + C139463 * C719) * C139372) *
               C139289 * C63378 +
           (C15237 + C15244) * C139289 * C63379 + C65941 * C63380) *
              C3360 -
          (C66452 * C63380 + (C17183 + C17176) * C139289 * C63379 +
           (C15244 + C15237) * C139289 * C63378) *
              C3361 +
          (C65941 * C63378 + (C17856 + C17860) * C139289 * C63379 +
           (C66449 + C66454) * C139289 * C63380) *
              C3362 -
          (((C554 * C66116 + C139463 * C66446) * C139372 +
            (C554 * C65991 + C139463 * C66328) * C244) *
               C139289 * C63380 +
           (C66454 + C66449) * C139289 * C63379 + C66452 * C63378) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C63378 +
           (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C63379 +
           (C63902 + C63903 - C63904 - C63905 + C63906 + C63907) * C63380) *
              C139463 * C139571 +
          (((C63381 * C1697 + C139289 * C1702) * C827 -
            ((C63381 * C1707 + C139289 * C1714) * C821 +
             (C63381 * C1700 + C139289 * C1708) * C826) +
            (C63381 * C1706 + C139289 * C1713) * C822 -
            (C63381 * C1698 + C139289 * C1703) * C828 -
            (C63381 * C1705 + C139289 * C1712) * C823) *
               C63378 +
           ((C63381 * C3892 + C139289 * C3898) * C827 -
            ((C63381 * C3900 + C139289 * C3909) * C821 +
             (C63381 * C3891 + C139289 * C3897) * C826) +
            (C63381 * C3901 + C139289 * C3910) * C822 -
            (C63381 * C3893 + C139289 * C3899) * C828 -
            (C63381 * C3902 + C139289 * C3911) * C823) *
               C63379 +
           ((C63381 * C3895 + C139289 * C3907) * C827 -
            ((C63381 * C3905 + C139289 * C3914) * C821 +
             (C63381 * C3896 + C139289 * C3908) * C826) +
            (C63381 * C3904 + C139289 * C3913) * C822 -
            (C63381 * C3894 + C139289 * C3906) * C828 -
            (C63381 * C3903 + C139289 * C3912) * C823) *
               C63380) *
              C139463 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C63378 +
            (C65996 + C65997) * C63379 + C66006 * C63380) *
               C139463 * C139571 -
           (C66557 * C63380 + (C66553 + C66554) * C63379 +
            ((C63381 * C1707 + C139289 * C1714) * C139303 +
             (C63381 * C1700 + C139289 * C1708) * C3364) *
                C63378) *
               C139463 * C139384) *
              C2565 +
          (((C66554 + C66553) * C63378 + (C66552 + C66551) * C63379 +
            (C66555 + C66556) * C63380) *
               C139463 * C139384 -
           (C66007 * C63380 + (C65999 + C65998) * C63379 +
            (C65997 + C65996) * C63378) *
               C139463 * C139571) *
              C2566 +
          ((C66006 * C63378 + (C66001 + C66000) * C63379 +
            (C66010 + C66011) * C63380) *
               C139463 * C139571 -
           (((C63381 * C66529 + C139289 * C66531) * C139303 +
             (C63381 * C66528 + C139289 * C66530) * C3364) *
                C63380 +
            (C66556 + C66555) * C63379 + C66557 * C63378) *
               C139463 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C63378 +
            (C63884 * C181 + C63994 * C139346) * C63379 +
            (C63890 * C181 + C63995 * C139346) * C63380) *
               C139463 * C821 -
           ((C63997 * C139346 + C63892 * C181) * C63380 +
            (C63996 * C139346 + C63886 * C181) * C63379 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C63378) *
               C139463 * C822 +
           (((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C63378 +
            (C63888 * C181 + C63998 * C139346) * C63379 +
            (C63894 * C181 + C63999 * C139346) * C63380) *
               C139463 * C823) *
              C139571 +
          ((((C63381 * C1697 + C139289 * C1702) * C181 +
             (C63381 * C1791 + C139289 * C1796) * C139346) *
                C63378 +
            ((C63381 * C3892 + C139289 * C3898) * C181 +
             (C63381 * C3990 + C139289 * C3996) * C139346) *
                C63379 +
            ((C63381 * C3895 + C139289 * C3907) * C181 +
             (C63381 * C3993 + C139289 * C3999) * C139346) *
                C63380) *
               C139463 * C822 -
           (((C63381 * C3994 + C139289 * C4000) * C139346 +
             (C63381 * C3896 + C139289 * C3908) * C181) *
                C63380 +
            ((C63381 * C3989 + C139289 * C3995) * C139346 +
             (C63381 * C3891 + C139289 * C3897) * C181) *
                C63379 +
            ((C63381 * C1794 + C139289 * C1799) * C139346 +
             (C63381 * C1700 + C139289 * C1708) * C181) *
                C63378) *
               C139463 * C821 -
           (((C63381 * C3992 + C139289 * C3998) * C139346 +
             (C63381 * C3894 + C139289 * C3906) * C181) *
                C63380 +
            ((C63381 * C3991 + C139289 * C3997) * C139346 +
             (C63381 * C3893 + C139289 * C3899) * C181) *
                C63379 +
            ((C63381 * C1792 + C139289 * C1797) * C139346 +
             (C63381 * C1698 + C139289 * C1703) * C181) *
                C63378) *
               C139463 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C63378 +
           (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
            C65313 * C2662 + C65399 * C2567) *
               C63379 +
           (C63890 * C2660 + C63995 * C2565 - C65313 * C2661 - C65399 * C2566 +
            C66008 * C2662 + C66066 * C2567) *
               C63380) *
              C139463 * C139303 * C139571 +
          ((C66548 * C2661 -
            ((C63381 * C1794 + C139289 * C1799) * C2565 +
             (C63381 * C1700 + C139289 * C1708) * C2660) +
            C66640 * C2566 - C66546 * C2662 - C66641 * C2567) *
               C63378 +
           (C66546 * C2661 - (C66640 * C2565 + C66548 * C2660) +
            C66641 * C2566 - C66549 * C2662 - C66642 * C2567) *
               C63379 +
           (C66549 * C2661 - (C66641 * C2565 + C66546 * C2660) +
            C66642 * C2566 - (C63381 * C66528 + C139289 * C66530) * C2662 -
            (C63381 * C66631 + C139289 * C66632) * C2567) *
               C63380) *
              C139463 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 -
            (C63381 * C1700 + C139289 * C1708) * C1876 -
            (C63381 * C1879 + C139289 * C1884) * C139384) *
               C63378 +
           (C63884 * C1875 + C64092 * C139571 -
            (C63381 * C3891 + C139289 * C3897) * C1876 -
            (C63381 * C4075 + C139289 * C4081) * C139384) *
               C63379 +
           (C63890 * C1875 + C64093 * C139571 -
            (C63381 * C3896 + C139289 * C3908) * C1876 -
            (C63381 * C4080 + C139289 * C4086) * C139384) *
               C63380) *
              C139463 * C139346 * C821 +
          (((C63381 * C1697 + C139289 * C1702) * C1876 -
            ((C63381 * C246 + C139289 * C252) * C139571 +
             (C63381 * C108 + C139289 * C114) * C1875) +
            (C63381 * C1878 + C139289 * C1883) * C139384) *
               C63378 +
           ((C63381 * C3892 + C139289 * C3898) * C1876 -
            (C64094 * C139571 + C63886 * C1875) +
            (C63381 * C4076 + C139289 * C4082) * C139384) *
               C63379 +
           ((C63381 * C3895 + C139289 * C3907) * C1876 -
            (C64095 * C139571 + C63892 * C1875) +
            (C63381 * C4079 + C139289 * C4085) * C139384) *
               C63380) *
              C139463 * C139346 * C822 +
          (((C63381 * C109 + C139289 * C115) * C1875 +
            (C63381 * C247 + C139289 * C253) * C139571 -
            (C63381 * C1698 + C139289 * C1703) * C1876 -
            (C63381 * C1877 + C139289 * C1882) * C139384) *
               C63378 +
           (C63888 * C1875 + C64096 * C139571 -
            (C63381 * C3893 + C139289 * C3899) * C1876 -
            (C63381 * C4077 + C139289 * C4083) * C139384) *
               C63379 +
           (C63894 * C1875 + C64097 * C139571 -
            (C63381 * C3894 + C139289 * C3906) * C1876 -
            (C63381 * C4078 + C139289 * C4084) * C139384) *
               C63380) *
              C139463 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 -
            (C63381 * C1700 + C139289 * C1708) * C1876 -
            (C63381 * C1879 + C139289 * C1884) * C139384) *
               C63378 +
           (C66719 + C66720 - C66721 - C66738) * C63379 + C66742 * C63380) *
              C139463 * C2565 +
          ((C66721 - (C66720 + C66719) + C66738) * C63378 +
           (C66726 - (C66725 + C66724) + C66740) * C63379 +
           (C66729 - (C66730 + C66731) + C66741) * C63380) *
              C139463 * C2566 +
          (C66742 * C63378 + (C66731 + C66730 - C66729 - C66741) * C63379 +
           (C66008 * C1875 + C66123 * C139571 -
            (C63381 * C66528 + C139289 * C66530) * C1876 -
            (C63381 * C66716 + C139289 * C66717) * C139384) *
               C63380) *
              C139463 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C826 +
                     (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                      C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                         C821 -
                     (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                      C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                         C827 -
                     (C63534 * C2578 + C63380 * C2832 + C63533 * C838 +
                      C63379 * C1099 + C63532 * C117 + C63378 * C315) *
                         C822 +
                     (C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C828 +
                     (C63532 * C118 + C63378 * C316 + C63533 * C837 +
                      C63379 * C1100 + C63534 * C2579 + C63380 * C2833) *
                         C823) *
                        C139463 * C139289 * C139571 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C827 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C821 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C826) +
                     (C63532 * C1706 + C63378 * C1967 + C63533 * C3901 +
                      C63379 * C4168 + C63534 * C3904 + C63380 * C4171) *
                         C822 -
                     (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                      C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                         C828 -
                     (C63534 * C3903 + C63380 * C4170 + C63533 * C3902 +
                      C63379 * C4169 + C63532 * C1705 + C63378 * C1968) *
                         C823) *
                        C139463 * C139289 * C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C3364 +
                      (C63532 * C116 + C63378 * C314 + C63533 * C839 +
                       C63379 * C1098 + C63534 * C2577 + C63380 * C2831) *
                          C139303) *
                         C139463 * C139289 * C139571 -
                     ((C63534 * C3905 + C63380 * C4172 + C63533 * C3900 +
                       C63379 * C4167 + C63532 * C1707 + C63378 * C1966) *
                          C139303 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C3364) *
                         C139463 * C139289 * C139384) *
                        C2565 +
                    (((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                       C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                          C3364 +
                      (C63532 * C3900 + C63378 * C4167 + C63533 * C3905 +
                       C63379 * C4172 + C63534 * C17961 + C63380 * C18319) *
                          C139303) *
                         C139463 * C139289 * C139384 -
                     ((C63534 * C3370 + C63380 * C3548 + C63533 * C2577 +
                       C63379 * C2831 + C63532 * C839 + C63378 * C1098) *
                          C139303 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C3364) *
                         C139463 * C139289 * C139571) *
                        C2566 +
                    (((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                       C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                          C3364 +
                      (C63532 * C2577 + C63378 * C2831 + C63533 * C3370 +
                       C63379 * C3548 + C63534 * C17253 + C63380 * C17491) *
                          C139303) *
                         C139463 * C139289 * C139571 -
                     ((C63534 * C66529 + C63380 * C66817 + C63533 * C17961 +
                       C63379 * C18319 + C63532 * C3905 + C63378 * C4172) *
                          C139303 +
                      (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                       C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                          C3364) *
                         C139463 * C139289 * C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                       C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                          C181 +
                      (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                       C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                          C139346) *
                         C139463 * C139289 * C821 -
                     ((C63534 * C2664 + C63380 * C2922 + C63533 * C926 +
                       C63379 * C1196 + C63532 * C183 + C63378 * C395) *
                          C139346 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C181) *
                         C139463 * C139289 * C822 +
                     ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                       C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                          C181 +
                      (C63532 * C184 + C63378 * C396 + C63533 * C925 +
                       C63379 * C1197 + C63534 * C2665 + C63380 * C2923) *
                          C139346) *
                         C139463 * C139289 * C823) *
                        C139571 +
                    (((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                       C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                          C181 +
                      (C63532 * C1791 + C63378 * C2063 + C63533 * C3990 +
                       C63379 * C4249 + C63534 * C3993 + C63380 * C4250) *
                          C139346) *
                         C139463 * C139289 * C822 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C139346 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C181) *
                         C139463 * C139289 * C821 -
                     ((C63534 * C3992 + C63380 * C4252 + C63533 * C3991 +
                       C63379 * C4251 + C63532 * C1792 + C63378 * C2064) *
                          C139346 +
                      (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                       C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                          C181) *
                         C139463 * C139289 * C823) *
                        C139384)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C2660 +
                     (C63532 * C182 + C63378 * C394 + C63533 * C927 +
                      C63379 * C1195 + C63534 * C2663 + C63380 * C2921) *
                         C2565 -
                     (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                      C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                         C2661 -
                     (C63534 * C3433 + C63380 * C3599 + C63533 * C2663 +
                      C63379 * C2921 + C63532 * C927 + C63378 * C1195) *
                         C2566 +
                     (C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C2662 +
                     (C63532 * C2663 + C63378 * C2921 + C63533 * C3433 +
                      C63379 * C3599 + C63534 * C17337 + C63380 * C17558) *
                         C2567) *
                        C139463 * C139289 * C139303 * C139571 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C2661 -
                     ((C63534 * C3994 + C63380 * C4248 + C63533 * C3989 +
                       C63379 * C4247 + C63532 * C1794 + C63378 * C2066) *
                          C2565 +
                      (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                       C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                          C2660) +
                     (C63532 * C3989 + C63378 * C4247 + C63533 * C3994 +
                      C63379 * C4248 + C63534 * C18089 + C63380 * C18418) *
                         C2566 -
                     (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                      C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                         C2662 -
                     (C63534 * C66631 + C63380 * C66892 + C63533 * C18089 +
                      C63379 * C18418 + C63532 * C3994 + C63378 * C4248) *
                         C2567) *
                        C139463 * C139289 * C139303 * C139384)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C1875 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139571 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C1876 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139384) *
                        C139463 * C139289 * C139346 * C821 +
                    ((C63532 * C1697 + C63378 * C1961 + C63533 * C3892 +
                      C63379 * C4162 + C63534 * C3895 + C63380 * C4165) *
                         C1876 -
                     ((C63534 * C2746 + C63380 * C3018 + C63533 * C1010 +
                       C63379 * C1300 + C63532 * C246 + C63378 * C475) *
                          C139571 +
                      (C63534 * C2571 + C63380 * C2828 + C63533 * C829 +
                       C63379 * C1093 + C63532 * C108 + C63378 * C309) *
                          C1875) +
                     (C63532 * C1878 + C63378 * C2160 + C63533 * C4076 +
                      C63379 * C4328 + C63534 * C4079 + C63380 * C4331) *
                         C139384) *
                        C139463 * C139289 * C139346 * C822 +
                    ((C63532 * C109 + C63378 * C310 + C63533 * C830 +
                      C63379 * C1095 + C63534 * C2572 + C63380 * C2829) *
                         C1875 +
                     (C63532 * C247 + C63378 * C476 + C63533 * C1009 +
                      C63379 * C1299 + C63534 * C2747 + C63380 * C3019) *
                         C139571 -
                     (C63534 * C3894 + C63380 * C4164 + C63533 * C3893 +
                      C63379 * C4163 + C63532 * C1698 + C63378 * C1963) *
                         C1876 -
                     (C63534 * C4078 + C63380 * C4332 + C63533 * C4077 +
                      C63379 * C4329 + C63532 * C1877 + C63378 * C2161) *
                         C139384) *
                        C139463 * C139289 * C139346 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63532 * C107 + C63378 * C308 + C63533 * C832 +
                      C63379 * C1094 + C63534 * C2570 + C63380 * C2827) *
                         C1875 +
                     (C63532 * C245 + C63378 * C474 + C63533 * C1011 +
                      C63379 * C1301 + C63534 * C2745 + C63380 * C3017) *
                         C139571 -
                     (C63534 * C3896 + C63380 * C4166 + C63533 * C3891 +
                      C63379 * C4161 + C63532 * C1700 + C63378 * C1962) *
                         C1876 -
                     (C63534 * C4080 + C63380 * C4330 + C63533 * C4075 +
                      C63379 * C4327 + C63532 * C1879 + C63378 * C2159) *
                         C139384) *
                        C139463 * C139289 * C2565 +
                    ((C63532 * C3891 + C63378 * C4161 + C63533 * C3896 +
                      C63379 * C4166 + C63534 * C17959 + C63380 * C18317) *
                         C1876 -
                     ((C63534 * C3489 + C63380 * C3654 + C63533 * C2745 +
                       C63379 * C3017 + C63532 * C1011 + C63378 * C1301) *
                          C139571 +
                      (C63534 * C3367 + C63380 * C3545 + C63533 * C2570 +
                       C63379 * C2827 + C63532 * C832 + C63378 * C1094) *
                          C1875) +
                     (C63532 * C4075 + C63378 * C4327 + C63533 * C4080 +
                      C63379 * C4330 + C63534 * C18203 + C63380 * C18518) *
                         C139384) *
                        C139463 * C139289 * C2566 +
                    ((C63532 * C2570 + C63378 * C2827 + C63533 * C3367 +
                      C63379 * C3545 + C63534 * C17251 + C63380 * C17489) *
                         C1875 +
                     (C63532 * C2745 + C63378 * C3017 + C63533 * C3489 +
                      C63379 * C3654 + C63534 * C17413 + C63380 * C17627) *
                         C139571 -
                     (C63534 * C66528 + C63380 * C66816 + C63533 * C17959 +
                      C63379 * C18317 + C63532 * C3896 + C63378 * C4166) *
                         C1876 -
                     (C63534 * C66716 + C63380 * C66967 + C63533 * C18203 +
                      C63379 * C18518 + C63532 * C4080 + C63378 * C4330) *
                         C139384) *
                        C139463 * C139289 * C2567) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eezx[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C826 +
                      (C554 * C116 + C139463 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C139289 * C63378 +
                     (C15028 + C15029 - C15016 - C15017 + C15018 + C15019) *
                         C139289 * C63379 +
                     (C64400 + C64401 - C64402 - C64403 + C64404 + C64405) *
                         C139289 * C63380) *
                        C139571 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C139463 * C2268) * C821 +
                       (C554 * C1700 + C139463 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C139289 * C63378 +
                     (C8771 * C827 - (C18637 * C821 + C18638 * C826) +
                      C8772 * C822 - C8773 * C828 - C8774 * C823) *
                         C139289 * C63379 +
                     (C18641 * C827 - (C18640 * C821 + C18639 * C826) +
                      C18642 * C822 - (C554 * C3894 + C139463 * C4410) * C828 -
                      (C554 * C3903 + C139463 * C4416) * C823) *
                         C139289 * C63380) *
                        C139384) *
                   C139346) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C139463 * C555) * C3364 +
                       (C554 * C116 + C139463 * C561) * C139303) *
                          C139289 * C63378 +
                      (C17699 + C17700) * C139289 * C63379 + C66337 * C63380) *
                         C139571 -
                     (C67050 * C63380 + (C18643 + C18644) * C139289 * C63379 +
                      ((C554 * C1707 + C139463 * C2268) * C139303 +
                       (C554 * C1700 + C139463 * C2264) * C3364) *
                          C139289 * C63378) *
                         C139384) *
                        C2565 +
                    (((C18644 + C18643) * C139289 * C63378 +
                      (C18645 + C18646) * C139289 * C63379 +
                      (C67053 + C67054) * C139289 * C63380) *
                         C139384 -
                     (C66338 * C63380 + (C17705 + C17706) * C139289 * C63379 +
                      (C17700 + C17699) * C139289 * C63378) *
                         C139571) *
                        C2566 +
                    ((C66337 * C63378 + (C17715 + C17716) * C139289 * C63379 +
                      (C66341 + C66342) * C139289 * C63380) *
                         C139571 -
                     (((C554 * C66529 + C139463 * C67043) * C139303 +
                       (C554 * C66528 + C139463 * C67042) * C3364) *
                          C139289 * C63380 +
                      (C67054 + C67053) * C139289 * C63379 + C67050 * C63378) *
                         C139384) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C139463 * C555) * C181 +
             (C554 * C182 + C139463 * C641) * C139346) *
                C139289 * C63378 +
            (C15026 * C181 + C15138 * C139346) * C139289 * C63379 +
            (C16960 * C181 + C17072 * C139346) * C139289 * C63380) *
               C821 -
           ((C3218 * C139346 + C3122 * C181) * C139289 * C63380 +
            (C14135 + C14134) * C139289 * C63379 +
            (C664 + C648) * C139289 * C63378) *
               C822 +
           (C668 * C139289 * C63378 + (C14137 + C14136) * C139289 * C63379 +
            (C3124 * C181 + C3219 * C139346) * C139289 * C63380) *
               C823) *
              C139571 +
          (((C2371 + C2383) * C139289 * C63378 +
            (C16077 + C16078) * C139289 * C63379 +
            (C18641 * C181 + C18757 * C139346) * C139289 * C63380) *
               C822 -
           ((C18756 * C139346 + C18639 * C181) * C139289 * C63380 +
            (C18755 * C139346 + C18638 * C181) * C139289 * C63379 +
            ((C554 * C1794 + C139463 * C2368) * C139346 +
             (C554 * C1700 + C139463 * C2264) * C181) *
                C139289 * C63378) *
               C821 -
           (((C554 * C3992 + C139463 * C4498) * C139346 +
             (C554 * C3894 + C139463 * C4410) * C181) *
                C139289 * C63380 +
            (C16080 + C16079) * C139289 * C63379 + C2386 * C139289 * C63378) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C139463 * C555) * C2660 +
            (C554 * C182 + C139463 * C641) * C2565 - C15026 * C2661 -
            C15138 * C2566 + C16960 * C2662 + C17072 * C2567) *
               C139289 * C63378 +
           (C15026 * C2660 + C15138 * C2565 - C16960 * C2661 - C17072 * C2566 +
            C17713 * C2662 + C17787 * C2567) *
               C139289 * C63379 +
           (C16960 * C2660 + C17072 * C2565 - C17713 * C2661 - C17787 * C2566 +
            C66339 * C2662 + C66396 * C2567) *
               C139289 * C63380) *
              C139303 * C139571 +
          ((C18638 * C2661 -
            ((C554 * C1794 + C139463 * C2368) * C2565 +
             (C554 * C1700 + C139463 * C2264) * C2660) +
            C18755 * C2566 - C18639 * C2662 - C18756 * C2567) *
               C139289 * C63378 +
           (C18639 * C2661 - (C18755 * C2565 + C18638 * C2660) +
            C18756 * C2566 - C67051 * C2662 - C67132 * C2567) *
               C139289 * C63379 +
           (C67051 * C2661 - (C18756 * C2565 + C18639 * C2660) +
            C67132 * C2566 - (C554 * C66528 + C139463 * C67042) * C2662 -
            (C554 * C66631 + C139463 * C67128) * C2567) *
               C139289 * C63380) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C139289 * C63378 +
                     (C18858 + C18859 - C18860 - C18876) * C139289 * C63379 +
                     (C18865 + C18864 - C18863 - C18877) * C139289 * C63380) *
                        C139346 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C139289 * C63378 +
                     C24432 * C139289 * C63379 +
                     (C18868 - (C18869 + C18870) + C18878) * C139289 * C63380) *
                        C139346 * C822 +
                    (C2489 * C139289 * C63378 +
                     (C8994 + C8993 - C8992 - C9000) * C139289 * C63379 +
                     (C3124 * C1875 + C3307 * C139571 -
                      (C554 * C3894 + C139463 * C4410) * C1876 -
                      (C554 * C4078 + C139463 * C4578) * C139384) *
                         C139289 * C63380) *
                        C139346 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C139463 * C555) * C1875 +
                      (C554 * C245 + C139463 * C719) * C139571 -
                      (C554 * C1700 + C139463 * C2264) * C1876 -
                      (C554 * C1879 + C139463 * C2460) * C139384) *
                         C139289 * C63378 +
                     (C18858 + C18859 - C18860 - C18876) * C139289 * C63379 +
                     C67218 * C63380) *
                        C2565 +
                    ((C18860 - (C18859 + C18858) + C18876) * C139289 * C63378 +
                     (C18863 - (C18864 + C18865) + C18877) * C139289 * C63379 +
                     (C67209 - (C67210 + C67211) + C67217) * C139289 * C63380) *
                        C2566 +
                    (C67218 * C63378 +
                     (C67211 + C67210 - C67209 - C67217) * C139289 * C63379 +
                     (C66339 * C1875 + C66453 * C139571 -
                      (C554 * C66528 + C139463 * C67042) * C1876 -
                      (C554 * C66716 + C139463 * C67206) * C139384) *
                         C139289 * C63380) *
                        C2567) *
                   C139303) /
                      (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C6694 +
             (C63381 * C116 + C139289 * C125) * C139601 -
             (C63381 * C108 + C139289 * C114) * C6695 -
             (C63381 * C117 + C139289 * C126) * C139590 +
             (C63381 * C109 + C139289 * C115) * C6696 +
             (C63381 * C118 + C139289 * C127) * C6691) *
                C47031 +
            (C69167 + C69168 - C69169 - C69170 + C69171 + C69172) * C139598) *
               C30408 +
           ((C77515 * C6694 + C77516 * C139601 - C77517 * C6695 -
             C77518 * C139590 + C77519 * C6696 + C77520 * C6691) *
                C47031 +
            (C83580 + C83581 - C83582 - C83583 + C83584 + C83585) * C139598) *
               C139600) *
              C139372 * C6692 +
          (((C69169 - (C69168 + C69167) + C69170 - C69171 - C69172) * C47031 +
            (C69175 - (C69174 + C69173) + C69176 - C69177 - C69178) * C139598) *
               C30408 +
           ((C83582 - (C83581 + C83580) + C83583 - C83584 - C83585) * C47031 +
            (C70578 * C6695 - (C66545 * C139601 + C66546 * C6694) +
             C70579 * C139590 - (C63381 * C3894 + C139289 * C3906) * C6696 -
             (C63381 * C3903 + C139289 * C3912) * C6691) *
                C139598) *
               C139600) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C6771 +
                       (C63381 * C182 + C139289 * C188) * C6692 -
                       C63884 * C6772 - C63994 * C139360) *
                          C47031 +
                      (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                       C63995 * C139360) *
                          C139598) *
                         C30408 +
                     ((C77515 * C6771 + C77640 * C6692 - C66548 * C6772 -
                       C66640 * C139360) *
                          C47031 +
                      (C66548 * C6771 + C66640 * C6692 - C66546 * C6772 -
                       C66641 * C139360) *
                          C139598) *
                         C139600) *
                        C139601 +
                    (((C63886 * C6772 -
                       ((C63381 * C183 + C139289 * C189) * C6692 +
                        (C63381 * C108 + C139289 * C114) * C6771) +
                       C63996 * C139360) *
                          C47031 +
                      (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                       C63997 * C139360) *
                          C139598) *
                         C30408 +
                     ((C70576 * C6772 - (C77641 * C6692 + C77517 * C6771) +
                       C70686 * C139360) *
                          C47031 +
                      (C70578 * C6772 - (C70686 * C6692 + C70576 * C6771) +
                       C70687 * C139360) *
                          C139598) *
                         C139600) *
                        C139590 +
                    ((((C63381 * C109 + C139289 * C115) * C6771 +
                       (C63381 * C184 + C139289 * C190) * C6692 -
                       C63888 * C6772 - C63998 * C139360) *
                          C47031 +
                      (C63888 * C6771 + C63998 * C6692 - C63894 * C6772 -
                       C63999 * C139360) *
                          C139598) *
                         C30408 +
                     ((C77519 * C6771 + C77642 * C6692 - C76581 * C6772 -
                       C76685 * C139360) *
                          C47031 +
                      (C76581 * C6771 + C76685 * C6692 -
                       (C63381 * C3894 + C139289 * C3906) * C6772 -
                       (C63381 * C3992 + C139289 * C3998) * C139360) *
                          C139598) *
                         C139600) *
                        C6691) *
                   C139372) /
                  (p * q * std::sqrt(p + q));
    d2eexz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C47031 +
             (C64074 + C64098) * C139598) *
                C30408 +
            ((C77515 * C244 + C77750 * C139372) * C47031 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C6692 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C47031) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
                C30408) *
               C139360) *
              C139601 +
          ((((C64080 + C64100) * C47031 + (C64083 + C64101) * C139598) *
                C30408 +
            ((C76786 + C76787) * C47031 + (C78661 + C78662) * C139598) *
                C139600) *
               C139360 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C47031) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C47031) *
                C30408) *
               C6692) *
              C139590 +
          (((((C63381 * C109 + C139289 * C115) * C244 +
              (C63381 * C247 + C139289 * C253) * C139372) *
                 C47031 +
             (C64086 + C64102) * C139598) *
                C30408 +
            ((C77519 * C244 + C77752 * C139372) * C47031 +
             (C76788 + C76792) * C139598) *
                C139600) *
               C6692 -
           ((((C63381 * C4078 + C139289 * C4084) * C139372 +
              (C63381 * C3894 + C139289 * C3906) * C244) *
                 C139598 +
             (C76792 + C76788) * C47031) *
                C139600 +
            ((C64103 + C64089) * C139598 + (C64102 + C64086) * C47031) *
                C30408) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6694 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139601 -
            (C47260 + C47261) * C6695 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C6696 + (C47266 + C47267) * C6691) *
               C30408 +
           ((C77859 + C77860) * C6694 + (C77861 + C77862) * C139601 -
            (C49049 + C49048) * C6695 - (C49051 + C49050) * C139590 +
            (C49053 + C49052) * C6696 + (C49055 + C49054) * C6691) *
               C139600) *
              C139289 * C139372 * C6692 +
          (((C48118 + C48119) * C6695 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139601 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C6694) +
            (C48120 + C48121) * C139590 - (C48122 + C48123) * C6696 -
            (C48124 + C48125) * C6691) *
               C30408 +
           ((C56795 + C56794) * C6695 -
            ((C80331 + C80330) * C139601 + (C80329 + C80328) * C6694) +
            (C56797 + C56796) * C139590 -
            (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
             C47031 * C4163) *
                C6696 -
            (C47234 * C3903 + C139598 * C4170 + C47233 * C3902 +
             C47031 * C4169) *
                C6691) *
               C139600) *
              C139289 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6771 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C6692 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C6772 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C30408 +
           ((C77859 + C77860) * C6771 + (C77965 + C77966) * C6692 -
            (C80329 + C80328) * C6772 - (C80442 + C80443) * C139360) *
               C139600) *
              C139289 * C139601 +
          (((C48118 + C48119) * C6772 -
            ((C47351 + C47350) * C6692 + (C47260 + C47261) * C6771) +
            (C48233 + C48232) * C139360) *
               C30408 +
           ((C56795 + C56794) * C6772 -
            ((C49163 + C49162) * C6692 + (C49049 + C49048) * C6771) +
            (C56932 + C56933) * C139360) *
               C139600) *
              C139289 * C139590 +
          (((C47264 + C47265) * C6771 + (C47353 + C47352) * C6692 -
            (C48122 + C48123) * C6772 - (C48235 + C48234) * C139360) *
               C30408 +
           ((C49053 + C49052) * C6771 + (C49164 + C49165) * C6692 -
            (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
             C47031 * C4163) *
                C6772 -
            (C47234 * C3992 + C139598 * C4252 + C47233 * C3991 +
             C47031 * C4251) *
                C139360) *
               C139600) *
              C139289 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C30408 +
            ((C77859 + C77860) * C244 + (C78070 + C78069) * C139372) *
                C139600) *
               C139289 * C6692 -
           (((C80553 + C80552) * C139372 + (C80329 + C80328) * C244) * C139600 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C30408) *
               C139289 * C139360) *
              C139601 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C30408 +
            ((C56795 + C56794) * C244 + (C57068 + C57069) * C139372) *
                C139600) *
               C139289 * C139360 -
           (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
               C139289 * C6692) *
              C139590 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C30408 +
            ((C49053 + C49052) * C244 + (C49274 + C49275) * C139372) *
                C139600) *
               C139289 * C6692 -
           (((C47234 * C4078 + C139598 * C4332 + C47233 * C4077 +
              C47031 * C4329) *
                 C139372 +
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C244) *
                C139600 +
            ((C48345 + C48344) * C139372 + (C48122 + C48123) * C244) * C30408) *
               C139289 * C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6694 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139601 -
            (C30839 + C30840) * C6695 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C6696 + (C30845 + C30846) * C6691) *
               C139289 * C47031 +
           ((C77193 + C77194) * C6694 + (C77195 + C77196) * C139601 -
            (C31726 + C31725) * C6695 - (C31728 + C31727) * C139590 +
            (C31730 + C31729) * C6696 + (C31732 + C31731) * C6691) *
               C139289 * C139598) *
              C139372 * C6692 +
          (((C31725 + C31726) * C6695 -
            ((C77196 + C77195) * C139601 + (C77194 + C77193) * C6694) +
            (C31727 + C31728) * C139590 - (C31729 + C31730) * C6696 -
            (C31731 + C31732) * C6691) *
               C139289 * C47031 +
           ((C33707 + C33706) * C6695 -
            ((C79063 + C79064) * C139601 + (C79065 + C79066) * C6694) +
            (C33709 + C33708) * C139590 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C6696 -
            (C30813 * C3903 + C139600 * C4416 + C30812 * C2579 +
             C30408 * C3111) *
                C6691) *
               C139289 * C139598) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6771 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C6692 -
            (C77194 + C77193) * C6772 - (C77299 + C77300) * C139360) *
               C139289 * C47031 +
           ((C77193 + C77194) * C6771 + (C77300 + C77299) * C6692 -
            (C79065 + C79066) * C6772 - (C79170 + C79169) * C139360) *
               C139289 * C139598) *
              C139601 +
          (((C31725 + C31726) * C6772 -
            ((C30930 + C30929) * C6692 + (C30839 + C30840) * C6771) +
            (C31840 + C31839) * C139360) *
               C139289 * C47031 +
           ((C33707 + C33706) * C6772 -
            ((C31839 + C31840) * C6692 + (C31726 + C31725) * C6771) +
            (C33812 + C33813) * C139360) *
               C139289 * C139598) *
              C139590 +
          (((C30843 + C30844) * C6771 + (C30932 + C30931) * C6692 -
            (C31729 + C31730) * C6772 - (C31842 + C31841) * C139360) *
               C139289 * C47031 +
           ((C31730 + C31729) * C6771 + (C31841 + C31842) * C6692 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C6772 -
            (C30813 * C3992 + C139600 * C4498 + C30812 * C2665 +
             C30408 * C3201) *
                C139360) *
               C139289 * C139598) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
                        C139600 * C2264) *
                           C244 +
                       (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
                        C139600 * C2460) *
                           C139372) *
                          C139289 * C47031 +
                      ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) *
                          C139289 * C139598) *
                         C6692 -
                     (((C79273 + C79274) * C139372 + (C79065 + C79066) * C244) *
                          C139289 * C139598 +
                      ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) *
                          C139289 * C47031) *
                         C139360) *
                        C139601 +
                    ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) *
                          C139289 * C47031 +
                      ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) *
                          C139289 * C139598) *
                         C139360 -
                     (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) *
                          C139289 * C139598 +
                      ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) *
                          C139289 * C47031) *
                         C6692) *
                        C139590 +
                    ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) *
                          C139289 * C47031 +
                      ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) *
                          C139289 * C139598) *
                         C6692 -
                     (((C30813 * C4078 + C139600 * C4578 + C30812 * C2747 +
                        C30408 * C3297) *
                           C139372 +
                       (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
                        C30408 * C3107) *
                           C244) *
                          C139289 * C139598 +
                      ((C31952 + C31951) * C139372 + (C31729 + C31730) * C244) *
                          C139289 * C47031) *
                         C139360) *
                        C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C47031 +
            (C69851 + C69852 - C69853 - C69854) * C139598) *
               C30408 +
           ((C77515 * C7401 + C77516 * C7396 - C77517 * C7402 -
             C77518 * C139308) *
                C47031 +
            (C70567 + C70566 - C70580 - C70581) * C139598) *
               C139600) *
              C139372 * C139602 +
          (((C69853 - (C69852 + C69851) + C69854) * C47031 +
            (C69857 - (C69856 + C69855) + C69858) * C139598) *
               C30408 +
           ((C70580 - (C70566 + C70567) + C70581) * C47031 +
            (C70582 - (C70572 + C70573) + C70583) * C139598) *
               C139600) *
              C139372 * C139593 +
          ((C69865 * C47031 + (C69861 + C69860 - C69859 - C69862) * C139598) *
               C30408 +
           ((C70573 + C70572 - C70582 - C70583) * C47031 +
            (C66549 * C7401 + C66550 * C7396 -
             (C63381 * C17958 + C139289 * C17962) * C7402 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C139598) *
               C139600) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7477 +
             (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
             C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
                C47031 +
            (C63884 * C7477 + C63994 * C139602 - C63890 * C7478 -
             C63995 * C139593 + C65313 * C7479 + C65399 * C7400) *
                C139598) *
               C30408 +
           ((C77515 * C7477 + C77640 * C139602 - C66548 * C7478 -
             C66640 * C139593 + C66546 * C7479 + C66641 * C7400) *
                C47031 +
            (C66548 * C7477 + C66640 * C139602 - C66546 * C7478 -
             C66641 * C139593 + C66549 * C7479 + C66642 * C7400) *
                C139598) *
               C139600) *
              C7396 +
          (((C63886 * C7478 -
             ((C63381 * C183 + C139289 * C189) * C139602 +
              (C63381 * C108 + C139289 * C114) * C7477) +
             C63996 * C139593 - C63892 * C7479 - C63997 * C7400) *
                C47031 +
            (C63892 * C7478 - (C63996 * C139602 + C63886 * C7477) +
             C63997 * C139593 - C65311 * C7479 - C65400 * C7400) *
                C139598) *
               C30408 +
           ((C70576 * C7478 - (C77641 * C139602 + C77517 * C7477) +
             C70686 * C139593 - C70578 * C7479 - C70687 * C7400) *
                C47031 +
            (C70578 * C7478 - (C70686 * C139602 + C70576 * C7477) +
             C70687 * C139593 - (C63381 * C17958 + C139289 * C17962) * C7479 -
             (C63381 * C18088 + C139289 * C18090) * C7400) *
                C139598) *
               C139600) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C47031 +
             (C64074 + C64098) * C139598) *
                C30408 +
            ((C77515 * C244 + C77750 * C139372) * C47031 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C139602 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C47031) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
                C30408) *
               C139593 +
           ((C65475 * C47031 + (C65478 + C65485) * C139598) * C30408 +
            ((C78660 + C78659) * C47031 + (C79473 + C79474) * C139598) *
                C139600) *
               C7400) *
              C7396 +
          ((((C64080 + C64100) * C47031 + (C64083 + C64101) * C139598) *
                C30408 +
            ((C76786 + C76787) * C47031 + (C78661 + C78662) * C139598) *
                C139600) *
               C139593 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C47031) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C47031) *
                C30408) *
               C139602 -
           ((((C63381 * C18202 + C139289 * C18204) * C139372 +
              (C63381 * C17958 + C139289 * C17962) * C244) *
                 C139598 +
             (C78662 + C78661) * C47031) *
                C139600 +
            ((C65486 + C65479) * C139598 + C65482 * C47031) * C30408) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7401 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C7396 -
            (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
               C30408 +
           ((C77859 + C77860) * C7401 + (C77861 + C77862) * C7396 -
            (C49049 + C49048) * C7402 - (C49051 + C49050) * C139308) *
               C139600) *
              C139289 * C139372 * C139602 +
          (((C48118 + C48119) * C7402 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C7396 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C7401) +
            (C48120 + C48121) * C139308) *
               C30408 +
           ((C56795 + C56794) * C7402 -
            ((C80331 + C80330) * C7396 + (C80329 + C80328) * C7401) +
            (C56797 + C56796) * C139308) *
               C139600) *
              C139289 * C139372 * C139593 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C7401 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C7396 -
            (C50018 + C50019) * C7402 - (C50020 + C50021) * C139308) *
               C30408 +
           ((C80332 + C80333) * C7401 + (C80334 + C80335) * C7396 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C7402 -
            (C47234 * C17960 + C139598 * C18318 + C47233 * C3904 +
             C47031 * C4171) *
                C139308) *
               C139600) *
              C139289 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7477 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139602 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C7478 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139593 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C7400) *
               C30408 +
           ((C77859 + C77860) * C7477 + (C77965 + C77966) * C139602 -
            (C80329 + C80328) * C7478 - (C80442 + C80443) * C139593 +
            (C80332 + C80333) * C7479 + (C80444 + C80445) * C7400) *
               C139600) *
              C139289 * C7396 +
          (((C48118 + C48119) * C7478 -
            ((C47351 + C47350) * C139602 + (C47260 + C47261) * C7477) +
            (C48233 + C48232) * C139593 - (C50018 + C50019) * C7479 -
            (C50125 + C50124) * C7400) *
               C30408 +
           ((C56795 + C56794) * C7478 -
            ((C49163 + C49162) * C139602 + (C49049 + C49048) * C7477) +
            (C56932 + C56933) * C139593 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C7479 -
            (C47234 * C18088 + C139598 * C18419 + C47233 * C3993 +
             C47031 * C4250) *
                C7400) *
               C139600) *
              C139289 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C30408 +
            ((C77859 + C77860) * C244 + (C78070 + C78069) * C139372) *
                C139600) *
               C139289 * C139602 -
           (((C80553 + C80552) * C139372 + (C80329 + C80328) * C244) * C139600 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C30408) *
               C139289 * C139593 +
           (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C30408 +
            ((C80332 + C80333) * C244 + (C80555 + C80554) * C139372) *
                C139600) *
               C139289 * C7400) *
              C7396 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C30408 +
            ((C56795 + C56794) * C244 + (C57068 + C57069) * C139372) *
                C139600) *
               C139289 * C139593 -
           (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
               C139289 * C139602 -
           (((C47234 * C18202 + C139598 * C18519 + C47233 * C4079 +
              C47031 * C4331) *
                 C139372 +
             (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
              C47031 * C4165) *
                 C244) *
                C139600 +
            ((C50229 + C50228) * C139372 + (C50018 + C50019) * C244) * C30408) *
               C139289 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7401 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C7396 -
            (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
               C139289 * C47031 +
           ((C77193 + C77194) * C7401 + (C77195 + C77196) * C7396 -
            (C31726 + C31725) * C7402 - (C31728 + C31727) * C139308) *
               C139289 * C139598) *
              C139372 * C139602 +
          (((C31725 + C31726) * C7402 -
            ((C77196 + C77195) * C7396 + (C77194 + C77193) * C7401) +
            (C31727 + C31728) * C139308) *
               C139289 * C47031 +
           ((C33707 + C33706) * C7402 -
            ((C79063 + C79064) * C7396 + (C79065 + C79066) * C7401) +
            (C33709 + C33708) * C139308) *
               C139289 * C139598) *
              C139372 * C139593 +
          (((C79066 + C79065) * C7401 + (C79064 + C79063) * C7396 -
            (C33706 + C33707) * C7402 - (C33708 + C33709) * C139308) *
               C139289 * C47031 +
           ((C79747 + C79748) * C7401 + (C79749 + C79750) * C7396 -
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C7402 -
            (C30813 * C17960 + C139600 * C18620 + C30812 * C3369 +
             C30408 * C3709) *
                C139308) *
               C139289 * C139598) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7477 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139602 -
            (C77194 + C77193) * C7478 - (C77299 + C77300) * C139593 +
            (C79066 + C79065) * C7479 + (C79169 + C79170) * C7400) *
               C139289 * C47031 +
           ((C77193 + C77194) * C7477 + (C77300 + C77299) * C139602 -
            (C79065 + C79066) * C7478 - (C79170 + C79169) * C139593 +
            (C79747 + C79748) * C7479 + (C79822 + C79821) * C7400) *
               C139289 * C139598) *
              C7396 +
          (((C31725 + C31726) * C7478 -
            ((C30930 + C30929) * C139602 + (C30839 + C30840) * C7477) +
            (C31840 + C31839) * C139593 - (C33706 + C33707) * C7479 -
            (C33813 + C33812) * C7400) *
               C139289 * C47031 +
           ((C33707 + C33706) * C7478 -
            ((C31839 + C31840) * C139602 + (C31726 + C31725) * C7477) +
            (C33812 + C33813) * C139593 -
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C7479 -
            (C30813 * C18088 + C139600 * C18747 + C30812 * C3432 +
             C30408 * C3762) *
                C7400) *
               C139289 * C139598) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
                        C139600 * C2264) *
                           C244 +
                       (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
                        C139600 * C2460) *
                           C139372) *
                          C139289 * C47031 +
                      ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) *
                          C139289 * C139598) *
                         C139602 -
                     (((C79273 + C79274) * C139372 + (C79065 + C79066) * C244) *
                          C139289 * C139598 +
                      ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) *
                          C139289 * C47031) *
                         C139593 +
                     (((C79066 + C79065) * C244 + (C79274 + C79273) * C139372) *
                          C139289 * C47031 +
                      ((C79747 + C79748) * C244 + (C79893 + C79894) * C139372) *
                          C139289 * C139598) *
                         C7400) *
                        C7396 +
                    ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) *
                          C139289 * C47031 +
                      ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) *
                          C139289 * C139598) *
                         C139593 -
                     (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) *
                          C139289 * C139598 +
                      ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) *
                          C139289 * C47031) *
                         C139602 -
                     (((C30813 * C18202 + C139600 * C18856 + C30812 * C3488 +
                        C30408 * C3815) *
                           C139372 +
                       (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
                        C30408 * C3706) *
                           C244) *
                          C139289 * C139598 +
                      ((C33917 + C33916) * C139372 + (C33706 + C33707) * C244) *
                          C139289 * C47031) *
                         C7400) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C7401 +
              (C63381 * C116 + C139289 * C125) * C7396 -
              (C63381 * C108 + C139289 * C114) * C7402 -
              (C63381 * C117 + C139289 * C126) * C139308) *
                 C47031 +
             (C69851 + C69852 - C69853 - C69854) * C139598) *
                C30408 +
            ((C85382 + C85383 - C85384 - C85385) * C47031 + C85394 * C139598) *
                C139600) *
               C139571 +
           (((C85384 - (C85383 + C85382) + C85385) * C47031 +
             C85395 * C139598) *
                C30408 +
            ((C81014 * C7402 - (C81015 * C7396 + C81016 * C7401) +
              C81017 * C139308) *
                 C47031 +
             (C85388 - (C85389 + C85390) + C85391) * C139598) *
                C139600) *
               C139384) *
              C6692 +
          ((((C69853 - (C69852 + C69851) + C69854) * C47031 +
             (C69857 - (C69856 + C69855) + C69858) * C139598) *
                C30408 +
            (C85395 * C47031 +
             (C70582 - (C70572 + C70573) + C70583) * C139598) *
                C139600) *
               C139571 +
           ((C85394 * C47031 + (C70573 + C70572 - C70582 - C70583) * C139598) *
                C30408 +
            ((C85390 + C85389 - C85388 - C85391) * C47031 +
             (C67973 * C7401 + C67974 * C7396 -
              (C63381 * C19902 + C139289 * C19906) * C7402 -
              (C63381 * C19904 + C139289 * C19908) * C139308) *
                 C139598) *
                C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[77] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139289 * C113) * C6771 +
                        (C63381 * C182 + C139289 * C188) * C6692 -
                        C63884 * C6772 - C63994 * C139360) *
                           C47031 +
                       (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                        C63995 * C139360) *
                           C139598) *
                          C30408 +
                      ((C85526 + C85527 - C85528 - C85529) * C47031 +
                       (C85530 + C85531 - C85532 - C85533) * C139598) *
                          C139600) *
                         C7396 +
                     (((C63886 * C6772 -
                        ((C63381 * C183 + C139289 * C189) * C6692 +
                         (C63381 * C108 + C139289 * C114) * C6771) +
                        C63996 * C139360) *
                           C47031 +
                       (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                        C63997 * C139360) *
                           C139598) *
                          C30408 +
                      ((C85534 - (C85535 + C85536) + C85537) * C47031 +
                       (C85538 - (C85539 + C85540) + C85541) * C139598) *
                          C139600) *
                         C139308) *
                        C139571 +
                    ((((C85528 - (C85527 + C85526) + C85529) * C47031 +
                       (C85532 - (C85531 + C85530) + C85533) * C139598) *
                          C30408 +
                      ((C67971 * C6772 - (C81137 * C6692 + C81016 * C6771) +
                        C68059 * C139360) *
                           C47031 +
                       (C67973 * C6772 - (C68059 * C6692 + C67971 * C6771) +
                        C68060 * C139360) *
                           C139598) *
                          C139600) *
                         C7396 +
                     (((C85536 + C85535 - C85534 - C85537) * C47031 +
                       (C85540 + C85539 - C85538 - C85541) * C139598) *
                          C30408 +
                      ((C81014 * C6771 + C81135 * C6692 - C81018 * C6772 -
                        C81136 * C139360) *
                           C47031 +
                       (C81018 * C6771 + C81136 * C6692 -
                        (C63381 * C19902 + C139289 * C19906) * C6772 -
                        (C63381 * C20020 + C139289 * C20022) * C139360) *
                           C139598) *
                          C139600) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[77] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139289 * C113) * C1875 +
                        (C63381 * C245 + C139289 * C251) * C139571 -
                        C77515 * C1876 - C77750 * C139384) *
                           C47031 +
                       (C66719 + C66720 - C66721 - C66738) * C139598) *
                          C30408 +
                      ((C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
                        C81245 * C139384) *
                           C47031 +
                       (C80206 + C80207 - C80208 - C80209) * C139598) *
                          C139600) *
                         C6692 +
                     (((C66721 - (C66720 + C66719) + C66738) * C47031 +
                       (C66726 - (C66725 + C66724) + C66740) * C139598) *
                          C30408 +
                      ((C80208 - (C80207 + C80206) + C80209) * C47031 +
                       (C80210 - (C80211 + C80212) + C80213) * C139598) *
                          C139600) *
                         C139360) *
                        C7396 +
                    ((((C77517 * C1876 -
                        ((C63381 * C246 + C139289 * C252) * C139571 +
                         (C63381 * C108 + C139289 * C114) * C1875) +
                        C77751 * C139384) *
                           C47031 +
                       (C70786 - (C70787 + C70788) + C70798) * C139598) *
                          C30408 +
                      ((C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
                        C81246 * C139384) *
                           C47031 +
                       (C85672 - (C85673 + C85674) + C85675) * C139598) *
                          C139600) *
                         C6692 +
                     (((C70788 + C70787 - C70786 - C70798) * C47031 +
                       (C70793 + C70792 - C70791 - C70799) * C139598) *
                          C30408 +
                      ((C85674 + C85673 - C85672 - C85675) * C47031 +
                       (C70578 * C1875 + C70797 * C139571 -
                        (C63381 * C19902 + C139289 * C19906) * C1876 -
                        (C63381 * C20128 + C139289 * C20130) * C139384) *
                           C139598) *
                          C139600) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C7401 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C7396 -
             (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
                C30408 +
            ((C77859 + C77860) * C7401 + (C77861 + C77862) * C7396 -
             (C49049 + C49048) * C7402 - (C49051 + C49050) * C139308) *
                C139600) *
               C139289 * C139571 +
           (((C49048 + C49049) * C7402 -
             ((C77862 + C77861) * C7396 + (C77860 + C77859) * C7401) +
             (C49050 + C49051) * C139308) *
                C30408 +
            ((C52473 + C52472) * C7402 -
             ((C81354 + C81355) * C7396 + (C81356 + C81357) * C7401) +
             (C52475 + C52474) * C139308) *
                C139600) *
               C139289 * C139384) *
              C6692 +
          ((((C48118 + C48119) * C7402 -
             ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
               C47031 * C1098) *
                  C7396 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C7401) +
             (C48120 + C48121) * C139308) *
                C30408 +
            ((C56795 + C56794) * C7402 -
             ((C80331 + C80330) * C7396 + (C80329 + C80328) * C7401) +
             (C56797 + C56796) * C139308) *
                C139600) *
               C139289 * C139571 +
           (((C80328 + C80329) * C7401 + (C80330 + C80331) * C7396 -
             (C56794 + C56795) * C7402 - (C56796 + C56797) * C139308) *
                C30408 +
            ((C82300 + C82301) * C7401 + (C82302 + C82303) * C7396 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C7402 -
             (C47234 * C19904 + C139598 * C20238 + C47233 * C5473 +
              C47031 * C5719) *
                 C139308) *
                C139600) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C6771 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C6692 -
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C6772 -
             (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
              C47031 * C1195) *
                 C139360) *
                C30408 +
            ((C77859 + C77860) * C6771 + (C77965 + C77966) * C6692 -
             (C80329 + C80328) * C6772 - (C80442 + C80443) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C48118 + C48119) * C6772 -
             ((C47351 + C47350) * C6692 + (C47260 + C47261) * C6771) +
             (C48233 + C48232) * C139360) *
                C30408 +
            ((C56795 + C56794) * C6772 -
             ((C49163 + C49162) * C6692 + (C49049 + C49048) * C6771) +
             (C56932 + C56933) * C139360) *
                C139600) *
               C139289 * C139308) *
              C139571 +
          ((((C80328 + C80329) * C6772 -
             ((C77966 + C77965) * C6692 + (C77860 + C77859) * C6771) +
             (C80443 + C80442) * C139360) *
                C30408 +
            ((C82300 + C82301) * C6772 -
             ((C81460 + C81461) * C6692 + (C81356 + C81357) * C6771) +
             (C82406 + C82407) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C49048 + C49049) * C6771 + (C49162 + C49163) * C6692 -
             (C56794 + C56795) * C6772 - (C56933 + C56932) * C139360) *
                C30408 +
            ((C52473 + C52472) * C6771 + (C52578 + C52579) * C6692 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C6772 -
             (C47234 * C20020 + C139598 * C20339 + C47233 * C5556 +
              C47031 * C5796) *
                 C139360) *
                C139600) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C1875 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139571 -
             (C77860 + C77859) * C1876 - (C78069 + C78070) * C139384) *
                C30408 +
            ((C77859 + C77860) * C1875 + (C78070 + C78069) * C139571 -
             (C81356 + C81357) * C1876 - (C81565 + C81564) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C80328 + C80329) * C1876 -
             ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
               C47031 * C1301) *
                  C139571 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C1875) +
             (C80552 + C80553) * C139384) *
                C30408 +
            ((C82300 + C82301) * C1876 -
             ((C80553 + C80552) * C139571 + (C80329 + C80328) * C1875) +
             (C82511 + C82510) * C139384) *
                C139600) *
               C139289 * C139360) *
              C7396 +
          ((((C49048 + C49049) * C1876 -
             ((C47435 + C47434) * C139571 + (C47260 + C47261) * C1875) +
             (C49273 + C49272) * C139384) *
                C30408 +
            ((C52473 + C52472) * C1876 -
             ((C49272 + C49273) * C139571 + (C49049 + C49048) * C1875) +
             (C52682 + C52683) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C48118 + C48119) * C1875 + (C48343 + C48342) * C139571 -
             (C56794 + C56795) * C1876 - (C57069 + C57068) * C139384) *
                C30408 +
            ((C56795 + C56794) * C1875 + (C57068 + C57069) * C139571 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C1876 -
             (C47234 * C20128 + C139598 * C20439 + C47233 * C5636 +
              C47031 * C5873) *
                 C139384) *
                C139600) *
               C139289 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
                C139289 * C47031 +
            ((C77193 + C77194) * C7401 + (C77195 + C77196) * C7396 -
             (C31726 + C31725) * C7402 - (C31728 + C31727) * C139308) *
                C139289 * C139598) *
               C139571 +
           (((C32764 + C32765) * C7402 -
             ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
               C30408 * C2268) *
                  C7396 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C7401) +
             (C32766 + C32767) * C139308) *
                C139289 * C47031 +
            ((C40759 + C40758) * C7402 -
             ((C80670 + C80671) * C7396 + (C80672 + C80673) * C7401) +
             (C40761 + C40760) * C139308) *
                C139289 * C139598) *
               C139384) *
              C6692 +
          ((((C31725 + C31726) * C7402 -
             ((C77196 + C77195) * C7396 + (C77194 + C77193) * C7401) +
             (C31727 + C31728) * C139308) *
                C139289 * C47031 +
            ((C33707 + C33706) * C7402 -
             ((C79063 + C79064) * C7396 + (C79065 + C79066) * C7401) +
             (C33709 + C33708) * C139308) *
                C139289 * C139598) *
               C139571 +
           (((C80673 + C80672) * C7401 + (C80671 + C80670) * C7396 -
             (C40758 + C40759) * C7402 - (C40760 + C40761) * C139308) *
                C139289 * C47031 +
            ((C80674 + C80675) * C7401 + (C80676 + C80677) * C7396 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C7402 -
             (C30813 * C19904 + C139600 * C20540 + C30812 * C3904 +
              C30408 * C4417) *
                 C139308) *
                C139289 * C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C77194 + C77193) * C6772 - (C77299 + C77300) * C139360) *
                C139289 * C47031 +
            ((C77193 + C77194) * C6771 + (C77300 + C77299) * C6692 -
             (C79065 + C79066) * C6772 - (C79170 + C79169) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C31725 + C31726) * C6772 -
             ((C30930 + C30929) * C6692 + (C30839 + C30840) * C6771) +
             (C31840 + C31839) * C139360) *
                C139289 * C47031 +
            ((C33707 + C33706) * C6772 -
             ((C31839 + C31840) * C6692 + (C31726 + C31725) * C6771) +
             (C33812 + C33813) * C139360) *
                C139289 * C139598) *
               C139308) *
              C139571 +
          ((((C80673 + C80672) * C6772 -
             ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
               C30408 * C2368) *
                  C6692 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C6771) +
             (C80784 + C80785) * C139360) *
                C139289 * C47031 +
            ((C80674 + C80675) * C6772 -
             ((C80785 + C80784) * C6692 + (C80672 + C80673) * C6771) +
             (C80787 + C80786) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C32764 + C32765) * C6771 + (C32878 + C32879) * C6692 -
             (C40758 + C40759) * C6772 - (C40897 + C40896) * C139360) *
                C139289 * C47031 +
            ((C40759 + C40758) * C6771 + (C40896 + C40897) * C6692 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C6772 -
             (C30813 * C20020 + C139600 * C20651 + C30812 * C3993 +
              C30408 * C4496) *
                 C139360) *
                C139289 * C139598) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[77] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C1875 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139571 -
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C1876 -
             (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
              C30408 * C2460) *
                 C139384) *
                C139289 * C47031 +
            ((C77193 + C77194) * C1875 + (C77403 + C77404) * C139571 -
             (C80672 + C80673) * C1876 - (C80894 + C80895) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C80673 + C80672) * C1876 -
             ((C77404 + C77403) * C139571 + (C77194 + C77193) * C1875) +
             (C80895 + C80894) * C139384) *
                C139289 * C47031 +
            ((C80674 + C80675) * C1876 -
             ((C79273 + C79274) * C139571 + (C79065 + C79066) * C1875) +
             (C80896 + C80897) * C139384) *
                C139289 * C139598) *
               C139360) *
              C7396 +
          ((((C32764 + C32765) * C1876 -
             ((C31014 + C31013) * C139571 + (C30839 + C30840) * C1875) +
             (C32989 + C32988) * C139384) *
                C139289 * C47031 +
            ((C40759 + C40758) * C1876 -
             ((C31949 + C31950) * C139571 + (C31726 + C31725) * C1875) +
             (C41032 + C41033) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C31725 + C31726) * C1875 + (C31950 + C31949) * C139571 -
             (C40758 + C40759) * C1876 - (C41033 + C41032) * C139384) *
                C139289 * C47031 +
            ((C33707 + C33706) * C1875 + (C33916 + C33917) * C139571 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C1876 -
             (C30813 * C20128 + C139600 * C20754 + C30812 * C4079 +
              C30408 * C4577) *
                 C139384) *
                C139289 * C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C137108 +
              (C63381 * C116 + C139289 * C125) * C139562 -
              (C63381 * C108 + C139289 * C114) * C137101 -
              (C63381 * C117 + C139289 * C126) * C139308) *
                 C47031 +
             (C65294 + C65295 - C65296 - C65297) * C139598) *
                C30408 +
            ((C80996 + C80997 - C80998 - C80999) * C47031 + C89550 * C139598) *
                C139600) *
               C9074 +
           (((C80998 - (C80997 + C80996) + C80999) * C47031 +
             C89551 * C139598) *
                C30408 +
            ((C81020 - (C81021 + C81022) + C81023) * C47031 +
             (C81024 - (C81010 + C81011) + C81025) * C139598) *
                C139600) *
               C139384) *
              C6692 +
          ((((C65296 - (C65295 + C65294) + C65297) * C47031 +
             (C65300 - (C65299 + C65298) + C65301) * C139598) *
                C30408 +
            (C89551 * C47031 +
             (C73724 - (C73725 + C73726) + C73727) * C139598) *
                C139600) *
               C9074 +
           ((C89550 * C47031 + (C73726 + C73725 - C73724 - C73727) * C139598) *
                C30408 +
            ((C81011 + C81010 - C81024 - C81025) * C47031 +
             (C67973 * C137108 + C67974 * C139562 -
              (C63381 * C19902 + C139289 * C19906) * C137101 -
              (C63381 * C19904 + C139289 * C19908) * C139308) *
                 C139598) *
                C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139289 * C113) * C6771 +
                        (C63381 * C182 + C139289 * C188) * C6692 -
                        C63884 * C6772 - C63994 * C139360) *
                           C47031 +
                       (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                        C63995 * C139360) *
                           C139598) *
                          C30408 +
                      ((C85526 + C85527 - C85528 - C85529) * C47031 +
                       (C85530 + C85531 - C85532 - C85533) * C139598) *
                          C139600) *
                         C139562 +
                     (((C63886 * C6772 -
                        ((C63381 * C183 + C139289 * C189) * C6692 +
                         (C63381 * C108 + C139289 * C114) * C6771) +
                        C63996 * C139360) *
                           C47031 +
                       (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                        C63997 * C139360) *
                           C139598) *
                          C30408 +
                      ((C85534 - (C85535 + C85536) + C85537) * C47031 +
                       (C85538 - (C85539 + C85540) + C85541) * C139598) *
                          C139600) *
                         C139308) *
                        C9074 +
                    ((((C85528 - (C85527 + C85526) + C85529) * C47031 +
                       (C85532 - (C85531 + C85530) + C85533) * C139598) *
                          C30408 +
                      ((C67971 * C6772 - (C81137 * C6692 + C81016 * C6771) +
                        C68059 * C139360) *
                           C47031 +
                       (C67973 * C6772 - (C68059 * C6692 + C67971 * C6771) +
                        C68060 * C139360) *
                           C139598) *
                          C139600) *
                         C139562 +
                     (((C85536 + C85535 - C85534 - C85537) * C47031 +
                       (C85540 + C85539 - C85538 - C85541) * C139598) *
                          C30408 +
                      ((C81014 * C6771 + C81135 * C6692 - C81018 * C6772 -
                        C81136 * C139360) *
                           C47031 +
                       (C81018 * C6771 + C81136 * C6692 -
                        (C63381 * C19902 + C139289 * C19906) * C6772 -
                        (C63381 * C20020 + C139289 * C20022) * C139360) *
                           C139598) *
                          C139600) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139289 * C113) * C9224 +
                        (C63381 * C245 + C139289 * C251) * C9074 -
                        C77515 * C9225 - C77750 * C139384) *
                           C47031 +
                       (C72352 + C72353 - C72354 - C72355) * C139598) *
                          C30408 +
                      ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                        C81245 * C139384) *
                           C47031 +
                       (C87742 + C87743 - C87744 - C87745) * C139598) *
                          C139600) *
                         C6692 +
                     (((C72354 - (C72353 + C72352) + C72355) * C47031 +
                       (C72358 - (C72357 + C72356) + C72359) * C139598) *
                          C30408 +
                      ((C87744 - (C87743 + C87742) + C87745) * C47031 +
                       (C67973 * C9225 - (C66736 * C9074 + C66546 * C9224) +
                        C68152 * C139384) *
                           C139598) *
                          C139600) *
                         C139360) *
                        C139562 +
                    ((((C77517 * C9225 -
                        ((C63381 * C246 + C139289 * C252) * C9074 +
                         (C63381 * C108 + C139289 * C114) * C9224) +
                        C77751 * C139384) *
                           C47031 +
                       (C72360 - (C72361 + C72362) + C72363) * C139598) *
                          C30408 +
                      ((C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                        C81246 * C139384) *
                           C47031 +
                       (C87746 - (C87747 + C87748) + C87749) * C139598) *
                          C139600) *
                         C6692 +
                     (((C72362 + C72361 - C72360 - C72363) * C47031 +
                       (C72366 + C72365 - C72364 - C72367) * C139598) *
                          C30408 +
                      ((C87748 + C87747 - C87746 - C87749) * C47031 +
                       (C70578 * C9224 + C70797 * C9074 -
                        (C63381 * C19902 + C139289 * C19906) * C9225 -
                        (C63381 * C20128 + C139289 * C20130) * C139384) *
                           C139598) *
                          C139600) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C137108 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139562 -
             (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
                C30408 +
            ((C77859 + C77860) * C137108 + (C77861 + C77862) * C139562 -
             (C49049 + C49048) * C137101 - (C49051 + C49050) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C49048 + C49049) * C137101 -
             ((C77862 + C77861) * C139562 + (C77860 + C77859) * C137108) +
             (C49050 + C49051) * C139308) *
                C30408 +
            ((C52473 + C52472) * C137101 -
             ((C81354 + C81355) * C139562 + (C81356 + C81357) * C137108) +
             (C52475 + C52474) * C139308) *
                C139600) *
               C139289 * C139384) *
              C6692 +
          ((((C48118 + C48119) * C137101 -
             ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
               C47031 * C1098) *
                  C139562 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C137108) +
             (C48120 + C48121) * C139308) *
                C30408 +
            ((C56795 + C56794) * C137101 -
             ((C80331 + C80330) * C139562 + (C80329 + C80328) * C137108) +
             (C56797 + C56796) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C80328 + C80329) * C137108 + (C80330 + C80331) * C139562 -
             (C56794 + C56795) * C137101 - (C56796 + C56797) * C139308) *
                C30408 +
            ((C82300 + C82301) * C137108 + (C82302 + C82303) * C139562 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C137101 -
             (C47234 * C19904 + C139598 * C20238 + C47233 * C5473 +
              C47031 * C5719) *
                 C139308) *
                C139600) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C6771 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C6692 -
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C6772 -
             (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
              C47031 * C1195) *
                 C139360) *
                C30408 +
            ((C77859 + C77860) * C6771 + (C77965 + C77966) * C6692 -
             (C80329 + C80328) * C6772 - (C80442 + C80443) * C139360) *
                C139600) *
               C139289 * C139562 +
           (((C48118 + C48119) * C6772 -
             ((C47351 + C47350) * C6692 + (C47260 + C47261) * C6771) +
             (C48233 + C48232) * C139360) *
                C30408 +
            ((C56795 + C56794) * C6772 -
             ((C49163 + C49162) * C6692 + (C49049 + C49048) * C6771) +
             (C56932 + C56933) * C139360) *
                C139600) *
               C139289 * C139308) *
              C9074 +
          ((((C80328 + C80329) * C6772 -
             ((C77966 + C77965) * C6692 + (C77860 + C77859) * C6771) +
             (C80443 + C80442) * C139360) *
                C30408 +
            ((C82300 + C82301) * C6772 -
             ((C81460 + C81461) * C6692 + (C81356 + C81357) * C6771) +
             (C82406 + C82407) * C139360) *
                C139600) *
               C139289 * C139562 +
           (((C49048 + C49049) * C6771 + (C49162 + C49163) * C6692 -
             (C56794 + C56795) * C6772 - (C56933 + C56932) * C139360) *
                C30408 +
            ((C52473 + C52472) * C6771 + (C52578 + C52579) * C6692 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C6772 -
             (C47234 * C20020 + C139598 * C20339 + C47233 * C5556 +
              C47031 * C5796) *
                 C139360) *
                C139600) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C9224 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C77860 + C77859) * C9225 - (C78069 + C78070) * C139384) *
                C30408 +
            ((C77859 + C77860) * C9224 + (C78070 + C78069) * C9074 -
             (C81356 + C81357) * C9225 - (C81565 + C81564) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C80328 + C80329) * C9225 -
             ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
               C47031 * C1301) *
                  C9074 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C9224) +
             (C80552 + C80553) * C139384) *
                C30408 +
            ((C82300 + C82301) * C9225 -
             ((C80553 + C80552) * C9074 + (C80329 + C80328) * C9224) +
             (C82511 + C82510) * C139384) *
                C139600) *
               C139289 * C139360) *
              C139562 +
          ((((C49048 + C49049) * C9225 -
             ((C47435 + C47434) * C9074 + (C47260 + C47261) * C9224) +
             (C49273 + C49272) * C139384) *
                C30408 +
            ((C52473 + C52472) * C9225 -
             ((C49272 + C49273) * C9074 + (C49049 + C49048) * C9224) +
             (C52682 + C52683) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C48118 + C48119) * C9224 + (C48343 + C48342) * C9074 -
             (C56794 + C56795) * C9225 - (C57069 + C57068) * C139384) *
                C30408 +
            ((C56795 + C56794) * C9224 + (C57068 + C57069) * C9074 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C9225 -
             (C47234 * C20128 + C139598 * C20439 + C47233 * C5636 +
              C47031 * C5873) *
                 C139384) *
                C139600) *
               C139289 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C137108 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139562 -
             (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
                C139289 * C47031 +
            ((C77193 + C77194) * C137108 + (C77195 + C77196) * C139562 -
             (C31726 + C31725) * C137101 - (C31728 + C31727) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C32764 + C32765) * C137101 -
             ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
               C30408 * C2268) *
                  C139562 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C137108) +
             (C32766 + C32767) * C139308) *
                C139289 * C47031 +
            ((C40759 + C40758) * C137101 -
             ((C80670 + C80671) * C139562 + (C80672 + C80673) * C137108) +
             (C40761 + C40760) * C139308) *
                C139289 * C139598) *
               C139384) *
              C6692 +
          ((((C31725 + C31726) * C137101 -
             ((C77196 + C77195) * C139562 + (C77194 + C77193) * C137108) +
             (C31727 + C31728) * C139308) *
                C139289 * C47031 +
            ((C33707 + C33706) * C137101 -
             ((C79063 + C79064) * C139562 + (C79065 + C79066) * C137108) +
             (C33709 + C33708) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C80673 + C80672) * C137108 + (C80671 + C80670) * C139562 -
             (C40758 + C40759) * C137101 - (C40760 + C40761) * C139308) *
                C139289 * C47031 +
            ((C80674 + C80675) * C137108 + (C80676 + C80677) * C139562 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C137101 -
             (C30813 * C19904 + C139600 * C20540 + C30812 * C3904 +
              C30408 * C4417) *
                 C139308) *
                C139289 * C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C77194 + C77193) * C6772 - (C77299 + C77300) * C139360) *
                C139289 * C47031 +
            ((C77193 + C77194) * C6771 + (C77300 + C77299) * C6692 -
             (C79065 + C79066) * C6772 - (C79170 + C79169) * C139360) *
                C139289 * C139598) *
               C139562 +
           (((C31725 + C31726) * C6772 -
             ((C30930 + C30929) * C6692 + (C30839 + C30840) * C6771) +
             (C31840 + C31839) * C139360) *
                C139289 * C47031 +
            ((C33707 + C33706) * C6772 -
             ((C31839 + C31840) * C6692 + (C31726 + C31725) * C6771) +
             (C33812 + C33813) * C139360) *
                C139289 * C139598) *
               C139308) *
              C9074 +
          ((((C80673 + C80672) * C6772 -
             ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
               C30408 * C2368) *
                  C6692 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C6771) +
             (C80784 + C80785) * C139360) *
                C139289 * C47031 +
            ((C80674 + C80675) * C6772 -
             ((C80785 + C80784) * C6692 + (C80672 + C80673) * C6771) +
             (C80787 + C80786) * C139360) *
                C139289 * C139598) *
               C139562 +
           (((C32764 + C32765) * C6771 + (C32878 + C32879) * C6692 -
             (C40758 + C40759) * C6772 - (C40897 + C40896) * C139360) *
                C139289 * C47031 +
            ((C40759 + C40758) * C6771 + (C40896 + C40897) * C6692 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C6772 -
             (C30813 * C20020 + C139600 * C20651 + C30812 * C3993 +
              C30408 * C4496) *
                 C139360) *
                C139289 * C139598) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C9225 -
             (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
              C30408 * C2460) *
                 C139384) *
                C139289 * C47031 +
            ((C77193 + C77194) * C9224 + (C77403 + C77404) * C9074 -
             (C80672 + C80673) * C9225 - (C80894 + C80895) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C80673 + C80672) * C9225 -
             ((C77404 + C77403) * C9074 + (C77194 + C77193) * C9224) +
             (C80895 + C80894) * C139384) *
                C139289 * C47031 +
            ((C80674 + C80675) * C9225 -
             ((C79273 + C79274) * C9074 + (C79065 + C79066) * C9224) +
             (C80896 + C80897) * C139384) *
                C139289 * C139598) *
               C139360) *
              C139562 +
          ((((C32764 + C32765) * C9225 -
             ((C31014 + C31013) * C9074 + (C30839 + C30840) * C9224) +
             (C32989 + C32988) * C139384) *
                C139289 * C47031 +
            ((C40759 + C40758) * C9225 -
             ((C31949 + C31950) * C9074 + (C31726 + C31725) * C9224) +
             (C41032 + C41033) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C31725 + C31726) * C9224 + (C31950 + C31949) * C9074 -
             (C40758 + C40759) * C9225 - (C41033 + C41032) * C139384) *
                C139289 * C47031 +
            ((C33707 + C33706) * C9224 + (C33916 + C33917) * C9074 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C9225 -
             (C30813 * C20128 + C139600 * C20754 + C30812 * C4079 +
              C30408 * C4577) *
                 C139384) *
                C139289 * C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C47031 +
             (C65996 + C65997) * C139598) *
                C30408 +
            ((C79993 + C79994) * C47031 + C79995 * C139598) * C139600) *
               C9074 -
           ((C81958 * C139598 + (C81959 + C81960) * C47031) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C47031) * C30408) *
               C139384) *
              C139602 +
          (((C79995 * C47031 + C79997 * C139598) * C30408 +
            (C81961 * C47031 + (C67977 + C67978) * C139598) * C139600) *
               C139384 -
           ((C66557 * C139598 + C79996 * C47031) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
                C30408) *
               C9074) *
              C139593 +
          (((C66006 * C47031 + (C66001 + C66000) * C139598) * C30408 +
            (C79997 * C47031 + (C66555 + C66556) * C139598) * C139600) *
               C9074 -
           ((((C63381 * C67959 + C139289 * C67961) * C139303 +
              (C63381 * C67958 + C139289 * C67960) * C3364) *
                 C139598 +
             (C67978 + C67977) * C47031) *
                C139600 +
            ((C66556 + C66555) * C139598 + C66557 * C47031) * C30408) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7477 +
             (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
             C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
                C47031 +
            (C63884 * C7477 + C63994 * C139602 - C63890 * C7478 -
             C63995 * C139593 + C65313 * C7479 + C65399 * C7400) *
                C139598) *
               C30408 +
           ((C90788 + C90789 - C90790 - C90791 + C90792 + C90793) * C47031 +
            (C90794 + C90795 - C90796 - C90797 + C90798 + C90799) * C139598) *
               C139600) *
              C139303 * C9074 +
          (((C90790 - (C90789 + C90788) + C90791 - C90792 - C90793) * C47031 +
            (C90796 - (C90795 + C90794) + C90797 - C90798 - C90799) * C139598) *
               C30408 +
           ((C67971 * C7478 - (C81137 * C139602 + C81016 * C7477) +
             C68059 * C139593 - C67973 * C7479 - C68060 * C7400) *
                C47031 +
            (C67973 * C7478 - (C68059 * C139602 + C67971 * C7477) +
             C68060 * C139593 - (C63381 * C67958 + C139289 * C67960) * C7479 -
             (C63381 * C68052 + C139289 * C68053) * C7400) *
                C139598) *
               C139600) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C9224 +
             (C63381 * C245 + C139289 * C251) * C9074 - C77515 * C9225 -
             C77750 * C139384) *
                C47031 +
            (C72352 + C72353 - C72354 - C72355) * C139598) *
               C30408 +
           ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
             C81245 * C139384) *
                C47031 +
            (C87742 + C87743 - C87744 - C87745) * C139598) *
               C139600) *
              C139602 +
          (((C72354 - (C72353 + C72352) + C72355) * C47031 +
            (C72358 - (C72357 + C72356) + C72359) * C139598) *
               C30408 +
           ((C87744 - (C87743 + C87742) + C87745) * C47031 +
            (C90898 - (C90899 + C90900) + C90901) * C139598) *
               C139600) *
              C139593 +
          ((C74744 * C47031 + (C74741 + C74740 - C74739 - C74742) * C139598) *
               C30408 +
           ((C90900 + C90899 - C90898 - C90901) * C47031 +
            (C66549 * C9224 + C66737 * C9074 -
             (C63381 * C67958 + C139289 * C67960) * C9225 -
             (C63381 * C68134 + C139289 * C68135) * C139384) *
                C139598) *
               C139600) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C30408 +
            ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
                C139600) *
               C139289 * C9074 -
           (((C81354 + C81355) * C139303 + (C81356 + C81357) * C3364) *
                C139600 +
            ((C77862 + C77861) * C139303 + (C77860 + C77859) * C3364) *
                C30408) *
               C139289 * C139384) *
              C139602 +
          ((((C80328 + C80329) * C3364 + (C80330 + C80331) * C139303) * C30408 +
            ((C82300 + C82301) * C3364 + (C82302 + C82303) * C139303) *
                C139600) *
               C139289 * C139384 -
           (((C80331 + C80330) * C139303 + (C80329 + C80328) * C3364) *
                C139600 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C30408) *
               C139289 * C9074) *
              C139593 +
          ((((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C30408 +
            ((C80332 + C80333) * C3364 + (C80334 + C80335) * C139303) *
                C139600) *
               C139289 * C9074 -
           (((C47234 * C67959 + C139598 * C68229 + C47233 * C19905 +
              C47031 * C20239) *
                 C139303 +
             (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
              C47031 * C20237) *
                 C3364) *
                C139600 +
            ((C80335 + C80334) * C139303 + (C80333 + C80332) * C3364) *
                C30408) *
               C139289 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7477 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139602 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C7478 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139593 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C7400) *
               C30408 +
           ((C77859 + C77860) * C7477 + (C77965 + C77966) * C139602 -
            (C80329 + C80328) * C7478 - (C80442 + C80443) * C139593 +
            (C80332 + C80333) * C7479 + (C80444 + C80445) * C7400) *
               C139600) *
              C139289 * C139303 * C9074 +
          (((C80328 + C80329) * C7478 -
            ((C77966 + C77965) * C139602 + (C77860 + C77859) * C7477) +
            (C80443 + C80442) * C139593 - (C80333 + C80332) * C7479 -
            (C80445 + C80444) * C7400) *
               C30408 +
           ((C82300 + C82301) * C7478 -
            ((C81460 + C81461) * C139602 + (C81356 + C81357) * C7477) +
            (C82406 + C82407) * C139593 -
            (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
             C47031 * C20237) *
                C7479 -
            (C47234 * C68052 + C139598 * C68304 + C47233 * C20021 +
             C47031 * C20338) *
                C7400) *
               C139600) *
              C139289 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C9224 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C9074 -
            (C77860 + C77859) * C9225 - (C78069 + C78070) * C139384) *
               C30408 +
           ((C77859 + C77860) * C9224 + (C78070 + C78069) * C9074 -
            (C81356 + C81357) * C9225 - (C81565 + C81564) * C139384) *
               C139600) *
              C139289 * C139602 +
          (((C80328 + C80329) * C9225 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C9074 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C9224) +
            (C80552 + C80553) * C139384) *
               C30408 +
           ((C82300 + C82301) * C9225 -
            ((C80553 + C80552) * C9074 + (C80329 + C80328) * C9224) +
            (C82511 + C82510) * C139384) *
               C139600) *
              C139289 * C139593 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C9224 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C9074 -
            (C80333 + C80332) * C9225 - (C80554 + C80555) * C139384) *
               C30408 +
           ((C80332 + C80333) * C9224 + (C80555 + C80554) * C9074 -
            (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
             C47031 * C20237) *
                C9225 -
            (C47234 * C68134 + C139598 * C68379 + C47233 * C20129 +
             C47031 * C20438) *
                C139384) *
               C139600) *
              C139289 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C47031 +
            ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) *
                C139289 * C139598) *
               C9074 -
           (((C80670 + C80671) * C139303 + (C80672 + C80673) * C3364) *
                C139289 * C139598 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C139289 * C47031) *
               C139384) *
              C139602 +
          ((((C80673 + C80672) * C3364 + (C80671 + C80670) * C139303) *
                C139289 * C47031 +
            ((C80674 + C80675) * C3364 + (C80676 + C80677) * C139303) *
                C139289 * C139598) *
               C139384 -
           (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) *
                C139289 * C139598 +
            ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) *
                C139289 * C47031) *
               C9074) *
              C139593 +
          ((((C79066 + C79065) * C3364 + (C79064 + C79063) * C139303) *
                C139289 * C47031 +
            ((C79747 + C79748) * C3364 + (C79749 + C79750) * C139303) *
                C139289 * C139598) *
               C9074 -
           (((C30813 * C67959 + C139600 * C68455 + C30812 * C17961 +
              C30408 * C18621) *
                 C139303 +
             (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
              C30408 * C18619) *
                 C3364) *
                C139289 * C139598 +
            ((C80677 + C80676) * C139303 + (C80675 + C80674) * C3364) *
                C139289 * C47031) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7477 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139602 -
            (C77194 + C77193) * C7478 - (C77299 + C77300) * C139593 +
            (C79066 + C79065) * C7479 + (C79169 + C79170) * C7400) *
               C139289 * C47031 +
           ((C77193 + C77194) * C7477 + (C77300 + C77299) * C139602 -
            (C79065 + C79066) * C7478 - (C79170 + C79169) * C139593 +
            (C79747 + C79748) * C7479 + (C79822 + C79821) * C7400) *
               C139289 * C139598) *
              C139303 * C9074 +
          (((C80673 + C80672) * C7478 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139602 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C7477) +
            (C80784 + C80785) * C139593 - (C80675 + C80674) * C7479 -
            (C80786 + C80787) * C7400) *
               C139289 * C47031 +
           ((C80674 + C80675) * C7478 -
            ((C80785 + C80784) * C139602 + (C80672 + C80673) * C7477) +
            (C80787 + C80786) * C139593 -
            (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
             C30408 * C18619) *
                C7479 -
            (C30813 * C68052 + C139600 * C68538 + C30812 * C18089 +
             C30408 * C18746) *
                C7400) *
               C139289 * C139598) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[79] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C9224 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C9074 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C9225 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C139289 * C47031 +
           ((C77193 + C77194) * C9224 + (C77403 + C77404) * C9074 -
            (C80672 + C80673) * C9225 - (C80894 + C80895) * C139384) *
               C139289 * C139598) *
              C139602 +
          (((C80673 + C80672) * C9225 -
            ((C77404 + C77403) * C9074 + (C77194 + C77193) * C9224) +
            (C80895 + C80894) * C139384) *
               C139289 * C47031 +
           ((C80674 + C80675) * C9225 -
            ((C79273 + C79274) * C9074 + (C79065 + C79066) * C9224) +
            (C80896 + C80897) * C139384) *
               C139289 * C139598) *
              C139593 +
          (((C79066 + C79065) * C9224 + (C79274 + C79273) * C9074 -
            (C80675 + C80674) * C9225 - (C80897 + C80896) * C139384) *
               C139289 * C47031 +
           ((C79747 + C79748) * C9224 + (C79893 + C79894) * C9074 -
            (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
             C30408 * C18619) *
                C9225 -
            (C30813 * C68134 + C139600 * C68616 + C30812 * C18203 +
             C30408 * C18855) *
                C139384) *
               C139289 * C139598) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C47031 +
             (C65996 + C65997) * C139598) *
                C30408 +
            ((C79993 + C79994) * C47031 + C79995 * C139598) * C139600) *
               C139603 -
           ((C81958 * C139598 + (C81959 + C81960) * C47031) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C47031) * C30408) *
               C139596 +
           (((C81960 + C81959) * C47031 + C81961 * C139598) * C30408 +
            ((C82906 + C82907) * C47031 + (C81968 + C81969) * C139598) *
                C139600) *
               C10691) *
              C6692 +
          (((C79995 * C47031 + C79997 * C139598) * C30408 +
            (C81961 * C47031 + (C67977 + C67978) * C139598) * C139600) *
               C139596 -
           ((C66557 * C139598 + C79996 * C47031) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
                C30408) *
               C139603 -
           ((((C63381 * C68677 + C139289 * C68679) * C139303 +
              (C63381 * C68676 + C139289 * C68678) * C3364) *
                 C139598 +
             (C81969 + C81968) * C47031) *
                C139600 +
            ((C67978 + C67977) * C139598 + C81958 * C47031) * C30408) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C6771 +
                       (C63381 * C182 + C139289 * C188) * C6692 -
                       C63884 * C6772 - C63994 * C139360) *
                          C47031 +
                      (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                       C63995 * C139360) *
                          C139598) *
                         C30408 +
                     ((C85526 + C85527 - C85528 - C85529) * C47031 +
                      (C85530 + C85531 - C85532 - C85533) * C139598) *
                         C139600) *
                        C139303 * C139603 +
                    (((C85528 - (C85527 + C85526) + C85529) * C47031 +
                      (C85532 - (C85531 + C85530) + C85533) * C139598) *
                         C30408 +
                     ((C91686 - (C91687 + C91688) + C91689) * C47031 +
                      (C91690 - (C91691 + C91692) + C91693) * C139598) *
                         C139600) *
                        C139303 * C139596 +
                    (((C91688 + C91687 - C91686 - C91689) * C47031 +
                      (C91692 + C91691 - C91690 - C91693) * C139598) *
                         C30408 +
                     ((C82904 * C6771 + C82981 * C6692 - C81966 * C6772 -
                       C82086 * C139360) *
                          C47031 +
                      (C81966 * C6771 + C82086 * C6692 -
                       (C63381 * C68676 + C139289 * C68678) * C6772 -
                       (C63381 * C68730 + C139289 * C68731) * C139360) *
                          C139598) *
                         C139600) *
                        C139303 * C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C10840 +
             (C63381 * C245 + C139289 * C251) * C139603 - C77515 * C10841 -
             C77750 * C139596 + C81016 * C10842 + C81245 * C10691) *
                C47031 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139598) *
               C30408 +
           ((C77515 * C10840 + C77750 * C139603 - C81016 * C10841 -
             C81245 * C139596 + C82904 * C10842 + C83053 * C10691) *
                C47031 +
            (C91792 + C91793 - C91794 - C91795 + C91796 + C91797) * C139598) *
               C139600) *
              C6692 +
          (((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C47031 +
            (C75427 - (C75426 + C75425) + C75428 - C75429 - C75430) * C139598) *
               C30408 +
           ((C91794 - (C91793 + C91792) + C91795 - C91796 - C91797) * C47031 +
            (C67973 * C10841 - (C66736 * C139603 + C66546 * C10840) +
             C68152 * C139596 - (C63381 * C68676 + C139289 * C68678) * C10842 -
             (C63381 * C68782 + C139289 * C68783) * C10691) *
                C139598) *
               C139600) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C30408 +
            ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
                C139600) *
               C139289 * C139603 -
           (((C81354 + C81355) * C139303 + (C81356 + C81357) * C3364) *
                C139600 +
            ((C77862 + C77861) * C139303 + (C77860 + C77859) * C3364) *
                C30408) *
               C139289 * C139596 +
           (((C81357 + C81356) * C3364 + (C81355 + C81354) * C139303) * C30408 +
            ((C83130 + C83131) * C3364 + (C83132 + C83133) * C139303) *
                C139600) *
               C139289 * C10691) *
              C6692 +
          ((((C80328 + C80329) * C3364 + (C80330 + C80331) * C139303) * C30408 +
            ((C82300 + C82301) * C3364 + (C82302 + C82303) * C139303) *
                C139600) *
               C139289 * C139596 -
           (((C80331 + C80330) * C139303 + (C80329 + C80328) * C3364) *
                C139600 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C30408) *
               C139289 * C139603 -
           (((C47234 * C68677 + C139598 * C68835 + C47233 * C20833 +
              C47031 * C21047) *
                 C139303 +
             (C47234 * C68676 + C139598 * C68834 + C47233 * C20831 +
              C47031 * C21045) *
                 C3364) *
                C139600 +
            ((C82303 + C82302) * C139303 + (C82301 + C82300) * C3364) *
                C30408) *
               C139289 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6771 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C6692 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C6772 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C30408 +
           ((C77859 + C77860) * C6771 + (C77965 + C77966) * C6692 -
            (C80329 + C80328) * C6772 - (C80442 + C80443) * C139360) *
               C139600) *
              C139289 * C139303 * C139603 +
          (((C80328 + C80329) * C6772 -
            ((C77966 + C77965) * C6692 + (C77860 + C77859) * C6771) +
            (C80443 + C80442) * C139360) *
               C30408 +
           ((C82300 + C82301) * C6772 -
            ((C81460 + C81461) * C6692 + (C81356 + C81357) * C6771) +
            (C82406 + C82407) * C139360) *
               C139600) *
              C139289 * C139303 * C139596 +
          (((C81357 + C81356) * C6771 + (C81461 + C81460) * C6692 -
            (C82301 + C82300) * C6772 - (C82407 + C82406) * C139360) *
               C30408 +
           ((C83130 + C83131) * C6771 + (C83205 + C83206) * C6692 -
            (C47234 * C68676 + C139598 * C68834 + C47233 * C20831 +
             C47031 * C21045) *
                C6772 -
            (C47234 * C68730 + C139598 * C68886 + C47233 * C20905 +
             C47031 * C21115) *
                C139360) *
               C139600) *
              C139289 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C10840 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139603 -
            (C77860 + C77859) * C10841 - (C78069 + C78070) * C139596 +
            (C81357 + C81356) * C10842 + (C81564 + C81565) * C10691) *
               C30408 +
           ((C77859 + C77860) * C10840 + (C78070 + C78069) * C139603 -
            (C81356 + C81357) * C10841 - (C81565 + C81564) * C139596 +
            (C83130 + C83131) * C10842 + (C83279 + C83278) * C10691) *
               C139600) *
              C139289 * C6692 +
          (((C80328 + C80329) * C10841 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139603 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C10840) +
            (C80552 + C80553) * C139596 - (C82301 + C82300) * C10842 -
            (C82510 + C82511) * C10691) *
               C30408 +
           ((C82300 + C82301) * C10841 -
            ((C80553 + C80552) * C139603 + (C80329 + C80328) * C10840) +
            (C82511 + C82510) * C139596 -
            (C47234 * C68676 + C139598 * C68834 + C47233 * C20831 +
             C47031 * C21045) *
                C10842 -
            (C47234 * C68782 + C139598 * C68937 + C47233 * C20975 +
             C47031 * C21182) *
                C10691) *
               C139600) *
              C139289 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C47031 +
            ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) *
                C139289 * C139598) *
               C139603 -
           (((C80670 + C80671) * C139303 + (C80672 + C80673) * C3364) *
                C139289 * C139598 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C139289 * C47031) *
               C139596 +
           (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C139289 * C47031 +
            ((C82618 + C82619) * C3364 + (C82620 + C82621) * C139303) *
                C139289 * C139598) *
               C10691) *
              C6692 +
          ((((C80673 + C80672) * C3364 + (C80671 + C80670) * C139303) *
                C139289 * C47031 +
            ((C80674 + C80675) * C3364 + (C80676 + C80677) * C139303) *
                C139289 * C139598) *
               C139596 -
           (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) *
                C139289 * C139598 +
            ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) *
                C139289 * C47031) *
               C139603 -
           (((C30813 * C68677 + C139600 * C68989 + C30812 * C19905 +
              C30408 * C20541) *
                 C139303 +
             (C30813 * C68676 + C139600 * C68988 + C30812 * C19903 +
              C30408 * C20539) *
                 C3364) *
                C139289 * C139598 +
            ((C82621 + C82620) * C139303 + (C82619 + C82618) * C3364) *
                C139289 * C47031) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6771 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C6692 -
            (C77194 + C77193) * C6772 - (C77299 + C77300) * C139360) *
               C139289 * C47031 +
           ((C77193 + C77194) * C6771 + (C77300 + C77299) * C6692 -
            (C79065 + C79066) * C6772 - (C79170 + C79169) * C139360) *
               C139289 * C139598) *
              C139303 * C139603 +
          (((C80673 + C80672) * C6772 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C6692 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C6771) +
            (C80784 + C80785) * C139360) *
               C139289 * C47031 +
           ((C80674 + C80675) * C6772 -
            ((C80785 + C80784) * C6692 + (C80672 + C80673) * C6771) +
            (C80787 + C80786) * C139360) *
               C139289 * C139598) *
              C139303 * C139596 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C6771 +
            (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
             C139600 * C6561) *
                C6692 -
            (C82619 + C82618) * C6772 - (C82724 + C82725) * C139360) *
               C139289 * C47031 +
           ((C82618 + C82619) * C6771 + (C82725 + C82724) * C6692 -
            (C30813 * C68676 + C139600 * C68988 + C30812 * C19903 +
             C30408 * C20539) *
                C6772 -
            (C30813 * C68730 + C139600 * C69040 + C30812 * C20021 +
             C30408 * C20650) *
                C139360) *
               C139289 * C139598) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C10840 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139603 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C10841 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139596 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C10691) *
               C139289 * C47031 +
           ((C77193 + C77194) * C10840 + (C77403 + C77404) * C139603 -
            (C80672 + C80673) * C10841 - (C80894 + C80895) * C139596 +
            (C82618 + C82619) * C10842 + (C82828 + C82829) * C10691) *
               C139289 * C139598) *
              C6692 +
          (((C80673 + C80672) * C10841 -
            ((C77404 + C77403) * C139603 + (C77194 + C77193) * C10840) +
            (C80895 + C80894) * C139596 - (C82619 + C82618) * C10842 -
            (C82829 + C82828) * C10691) *
               C139289 * C47031 +
           ((C80674 + C80675) * C10841 -
            ((C79273 + C79274) * C139603 + (C79065 + C79066) * C10840) +
            (C80896 + C80897) * C139596 -
            (C30813 * C68676 + C139600 * C68988 + C30812 * C19903 +
             C30408 * C20539) *
                C10842 -
            (C30813 * C68782 + C139600 * C69091 + C30812 * C20129 +
             C30408 * C20753) *
                C10691) *
               C139289 * C139598) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[81] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C47031 +
            (C65294 + C65295 - C65296 - C65297) * C139598) *
               C30408 +
           ((C77515 * C137108 + C77516 * C139562 - C77517 * C137101 -
             C77518 * C139308) *
                C47031 +
            (C73722 + C73721 - C73720 - C73723) * C139598) *
               C139600) *
              C139372 * C2565 +
          (((C65296 - (C65295 + C65294) + C65297) * C47031 +
            (C65300 - (C65299 + C65298) + C65301) * C139598) *
               C30408 +
           ((C73720 - (C73721 + C73722) + C73723) * C47031 +
            (C73724 - (C73725 + C73726) + C73727) * C139598) *
               C139600) *
              C139372 * C2566 +
          ((C65320 * C47031 + (C65318 + C65317 - C65316 - C65319) * C139598) *
               C30408 +
           ((C73726 + C73725 - C73724 - C73727) * C47031 +
            (C66549 * C137108 + C66550 * C139562 -
             (C63381 * C17958 + C139289 * C17962) * C137101 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C139598) *
               C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C103 +
            (C63381 * C116 + C139289 * C125) * C92 -
            (C63381 * C108 + C139289 * C114) * C104 -
            (C63381 * C117 + C139289 * C126) * C93 +
            (C63381 * C109 + C139289 * C115) * C105 +
            (C63381 * C118 + C139289 * C127) * C94 -
            (C63381 * C110 + C139289 * C119) * C106 -
            (C63381 * C120 + C139289 * C128) * C95) *
               C47031 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C63888 * C105 + C63889 * C94 -
            (C63381 * C831 + C139289 * C836) * C106 -
            (C63381 * C841 + C139289 * C847) * C95) *
               C139598) *
              C30408 +
          (((C63381 * C1700 + C139289 * C1708) * C103 +
            (C63381 * C1707 + C139289 * C1714) * C92 -
            (C63381 * C1697 + C139289 * C1702) * C104 -
            (C63381 * C1706 + C139289 * C1713) * C93 +
            (C63381 * C1698 + C139289 * C1703) * C105 +
            (C63381 * C1705 + C139289 * C1712) * C94 -
            (C63381 * C1699 + C139289 * C1704) * C106 -
            (C63381 * C1709 + C139289 * C1715) * C95) *
               C47031 +
           (C66548 * C103 + C66547 * C92 - C70576 * C104 - C70577 * C93 +
            (C63381 * C3893 + C139289 * C3899) * C105 +
            (C63381 * C3902 + C139289 * C3911) * C94 -
            (C63381 * C8120 + C139289 * C8121) * C106 -
            (C63381 * C8122 + C139289 * C8123) * C95) *
               C139598) *
              C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C47031 +
            (C65294 + C65295 - C65296 - C65297) * C139598) *
               C30408 +
           ((C80996 + C80997 - C80998 - C80999) * C47031 +
            (C73722 + C73721 - C73720 - C73723) * C139598) *
               C139600) *
              C4653 +
          (((C80998 - (C80997 + C80996) + C80999) * C47031 +
            (C73720 - (C73721 + C73722) + C73723) * C139598) *
               C30408 +
           ((C81020 - (C81021 + C81022) + C81023) * C47031 +
            (C81024 - (C81010 + C81011) + C81025) * C139598) *
               C139600) *
              C4654 +
          (((C81022 + C81021 - C81020 - C81023) * C47031 +
            (C81011 + C81010 - C81024 - C81025) * C139598) *
               C30408 +
           (((C63381 * C6165 + C139289 * C6171) * C137108 +
             (C63381 * C6168 + C139289 * C6174) * C139562 -
             (C63381 * C6164 + C139289 * C6170) * C137101 -
             (C63381 * C6167 + C139289 * C6173) * C139308) *
                C47031 +
            ((C63381 * C20831 + C139289 * C20835) * C137108 +
             (C63381 * C20833 + C139289 * C20837) * C139562 -
             (C63381 * C20830 + C139289 * C20834) * C137101 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139598) *
               C139600) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[81] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C47031 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C30408 +
           ((C77515 * C2660 + C77640 * C2565 - C66548 * C2661 - C66640 * C2566 +
             C66546 * C2662 + C66641 * C2567) *
                C47031 +
            (C66548 * C2660 + C66640 * C2565 - C66546 * C2661 - C66641 * C2566 +
             C66549 * C2662 + C66642 * C2567) *
                C139598) *
               C139600) *
              C139562 +
          (((C63886 * C2661 -
             ((C63381 * C183 + C139289 * C189) * C2565 +
              (C63381 * C108 + C139289 * C114) * C2660) +
             C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
                C47031 +
            (C63892 * C2661 - (C63996 * C2565 + C63886 * C2660) +
             C63997 * C2566 - C65311 * C2662 - C65400 * C2567) *
                C139598) *
               C30408 +
           ((C70576 * C2661 - (C77641 * C2565 + C77517 * C2660) +
             C70686 * C2566 - C70578 * C2662 - C70687 * C2567) *
                C47031 +
            (C70578 * C2661 - (C70686 * C2565 + C70576 * C2660) +
             C70687 * C2566 - (C63381 * C17958 + C139289 * C17962) * C2662 -
             (C63381 * C18088 + C139289 * C18090) * C2567) *
                C139598) *
               C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C47031 +
            (C63884 * C181 + C63994 * C139346) * C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C181 +
             (C63381 * C1794 + C139289 * C1799) * C139346) *
                C47031 +
            (C66548 * C181 + C66640 * C139346) * C139598) *
               C139600) *
              C92 -
          (((C70686 * C139346 + C70576 * C181) * C139598 +
            ((C63381 * C1791 + C139289 * C1796) * C139346 +
             (C63381 * C1697 + C139289 * C1702) * C181) *
                C47031) *
               C139600 +
           ((C63996 * C139346 + C63886 * C181) * C139598 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C47031) *
               C30408) *
              C93 +
          ((((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C47031 +
            (C63888 * C181 + C63998 * C139346) * C139598) *
               C30408 +
           (((C63381 * C1698 + C139289 * C1703) * C181 +
             (C63381 * C1792 + C139289 * C1797) * C139346) *
                C47031 +
            ((C63381 * C3893 + C139289 * C3899) * C181 +
             (C63381 * C3991 + C139289 * C3997) * C139346) *
                C139598) *
               C139600) *
              C94 -
          ((((C63381 * C8222 + C139289 * C8223) * C139346 +
             (C63381 * C8120 + C139289 * C8121) * C181) *
                C139598 +
            ((C63381 * C1793 + C139289 * C1798) * C139346 +
             (C63381 * C1699 + C139289 * C1704) * C181) *
                C47031) *
               C139600 +
           (((C63381 * C928 + C139289 * C933) * C139346 +
             (C63381 * C831 + C139289 * C836) * C181) *
                C139598 +
            ((C63381 * C185 + C139289 * C191) * C139346 +
             (C63381 * C110 + C139289 * C119) * C181) *
                C47031) *
               C30408) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C47031 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C30408 +
            ((C77625 + C77643) * C47031 + (C77628 + C77629) * C139598) *
                C139600) *
               C139562 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C47031) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C47031) *
                C30408) *
               C139308) *
              C4653 +
          ((((C77634 + C77644) * C47031 + (C77631 + C77630) * C139598) *
                C30408 +
            ((C81124 + C81138) * C47031 + (C81127 + C81139) * C139598) *
                C139600) *
               C139308 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C47031) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C47031) *
                C30408) *
               C139562) *
              C4654 +
          ((((C81134 + C81140) * C47031 + (C81131 + C81130) * C139598) *
                C30408 +
            (((C63381 * C6165 + C139289 * C6171) * C181 +
              (C63381 * C6227 + C139289 * C6230) * C139346) *
                 C47031 +
             ((C63381 * C20831 + C139289 * C20835) * C181 +
              (C63381 * C20905 + C139289 * C20907) * C139346) *
                 C139598) *
                C139600) *
               C139562 -
           ((((C63381 * C20904 + C139289 * C20906) * C139346 +
              (C63381 * C20830 + C139289 * C20834) * C181) *
                 C139598 +
             ((C63381 * C6226 + C139289 * C6229) * C139346 +
              (C63381 * C6164 + C139289 * C6170) * C181) *
                 C47031) *
                C139600 +
            ((C81139 + C81127) * C139598 + (C81138 + C81124) * C47031) *
                C30408) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[81] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C47031 +
             (C64074 + C64098) * C139598) *
                C30408 +
            ((C77515 * C244 + C77750 * C139372) * C47031 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C2565 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C47031) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
                C30408) *
               C2566 +
           ((C65475 * C47031 + (C65478 + C65485) * C139598) * C30408 +
            ((C78660 + C78659) * C47031 +
             (C66549 * C244 + C66737 * C139372) * C139598) *
                C139600) *
               C2567) *
              C139562 +
          ((((C64080 + C64100) * C47031 + (C64083 + C64101) * C139598) *
                C30408 +
            ((C76786 + C76787) * C47031 + (C78661 + C78662) * C139598) *
                C139600) *
               C2566 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C47031) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C47031) *
                C30408) *
               C2565 -
           ((((C63381 * C18202 + C139289 * C18204) * C139372 +
              (C63381 * C17958 + C139289 * C17962) * C244) *
                 C139598 +
             (C78662 + C78661) * C47031) *
                C139600 +
            ((C65486 + C65479) * C139598 + C65482 * C47031) * C30408) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139289 * C113) * C244 +
                                 (C63381 * C245 + C139289 * C251) * C139372) *
                                    C47031 +
                                (C64074 + C64098) * C139598) *
                                   C30408 +
                               (((C63381 * C1700 + C139289 * C1708) * C244 +
                                 (C63381 * C1879 + C139289 * C1884) * C139372) *
                                    C47031 +
                                (C66548 * C244 + C66734 * C139372) * C139598) *
                                   C139600) *
                                  C139346 * C92 -
                              (((C70796 * C139372 + C70576 * C244) * C139598 +
                                ((C63381 * C1878 + C139289 * C1883) * C139372 +
                                 (C63381 * C1697 + C139289 * C1702) * C244) *
                                    C47031) *
                                   C139600 +
                               ((C64100 + C64080) * C139598 +
                                ((C63381 * C246 + C139289 * C252) * C139372 +
                                 (C63381 * C108 + C139289 * C114) * C244) *
                                    C47031) *
                                   C30408) *
                                  C139346 * C93 +
                              ((((C63381 * C109 + C139289 * C115) * C244 +
                                 (C63381 * C247 + C139289 * C253) * C139372) *
                                    C47031 +
                                (C64086 + C64102) * C139598) *
                                   C30408 +
                               (((C63381 * C1698 + C139289 * C1703) * C244 +
                                 (C63381 * C1877 + C139289 * C1882) * C139372) *
                                    C47031 +
                                ((C63381 * C3893 + C139289 * C3899) * C244 +
                                 (C63381 * C4077 + C139289 * C4083) * C139372) *
                                    C139598) *
                                   C139600) *
                                  C139346 * C94 -
                              ((((C63381 * C8322 + C139289 * C8323) * C139372 +
                                 (C63381 * C8120 + C139289 * C8121) * C244) *
                                    C139598 +
                                ((C63381 * C1880 + C139289 * C1885) * C139372 +
                                 (C63381 * C1699 + C139289 * C1704) * C244) *
                                    C47031) *
                                   C139600 +
                               (((C63381 * C1012 + C139289 * C1017) * C139372 +
                                 (C63381 * C831 + C139289 * C836) * C244) *
                                    C139598 +
                                ((C63381 * C248 + C139289 * C254) * C139372 +
                                 (C63381 * C110 + C139289 * C119) * C244) *
                                    C47031) *
                                   C30408) *
                                  C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C4828 +
             (C63381 * C245 + C139289 * C251) * C4653 - C77515 * C4829 -
             C77750 * C4654 + C81016 * C4830 + C81245 * C4655) *
                C47031 +
            (C68137 + C68138 - C68139 - C68140 + C68141 + C68153) * C139598) *
               C30408 +
           ((C77515 * C4828 + C77750 * C4653 - C81016 * C4829 - C81245 * C4654 +
             (C63381 * C6165 + C139289 * C6171) * C4830 +
             (C63381 * C6287 + C139289 * C6290) * C4655) *
                C47031 +
            (C66548 * C4828 + C66734 * C4653 - C67971 * C4829 - C68151 * C4654 +
             (C63381 * C20831 + C139289 * C20835) * C4830 +
             (C63381 * C20975 + C139289 * C20977) * C4655) *
                C139598) *
               C139600) *
              C139346 * C139562 +
          (((C77517 * C4829 -
             ((C63381 * C246 + C139289 * C252) * C4653 +
              (C63381 * C108 + C139289 * C114) * C4828) +
             C77751 * C4654 - C81014 * C4830 - C81246 * C4655) *
                C47031 +
            (C70576 * C4829 - (C64094 * C4653 + C63886 * C4828) +
             C70796 * C4654 - C81018 * C4830 - C81247 * C4655) *
                C139598) *
               C30408 +
           ((C81014 * C4829 - (C77751 * C4653 + C77517 * C4828) +
             C81246 * C4654 - (C63381 * C6164 + C139289 * C6170) * C4830 -
             (C63381 * C6286 + C139289 * C6289) * C4655) *
                C47031 +
            (C81018 * C4829 - (C70796 * C4653 + C70576 * C4828) +
             C81247 * C4654 - (C63381 * C20830 + C139289 * C20834) * C4830 -
             (C63381 * C20974 + C139289 * C20976) * C4655) *
                C139598) *
               C139600) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[81] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139562 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
               C30408 +
           ((C77859 + C77860) * C137108 + (C77861 + C77862) * C139562 -
            (C49049 + C49048) * C137101 - (C49051 + C49050) * C139308) *
               C139600) *
              C139289 * C139372 * C2565 +
          (((C48118 + C48119) * C137101 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139562 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C137108) +
            (C48120 + C48121) * C139308) *
               C30408 +
           ((C56795 + C56794) * C137101 -
            ((C47234 * C3905 + C139598 * C4172 + C47233 * C3900 +
              C47031 * C4167) *
                 C139562 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C137108) +
            (C56797 + C56796) * C139308) *
               C139600) *
              C139289 * C139372 * C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C50018 + C50019) * C137101 - (C50020 + C50021) * C139308) *
               C30408 +
           ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C137108 +
            (C47233 * C3905 + C47031 * C4172 + C47234 * C17961 +
             C139598 * C18319) *
                C139562 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C137101 -
            (C47234 * C17960 + C139598 * C18318 + C47233 * C3904 +
             C47031 * C4171) *
                C139308) *
               C139600) *
              C139289 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C30408 +
          ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
            C139598 * C4161) *
               C103 +
           (C47233 * C1707 + C47031 * C1966 + C47234 * C3900 +
            C139598 * C4167) *
               C92 -
           (C49049 + C49048) * C104 - (C49051 + C49050) * C93 +
           (C49053 + C49052) * C105 + (C49055 + C49054) * C94 -
           (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
            C47031 * C1964) *
               C106 -
           (C47234 * C8122 + C139598 * C8423 + C47233 * C1709 +
            C47031 * C1969) *
               C95) *
              C139600) *
         C139289 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139562 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
               C30408 +
           ((C77859 + C77860) * C137108 + (C77861 + C77862) * C139562 -
            (C49049 + C49048) * C137101 - (C49051 + C49050) * C139308) *
               C139600) *
              C139289 * C4653 +
          (((C49048 + C49049) * C137101 -
            ((C77862 + C77861) * C139562 + (C77860 + C77859) * C137108) +
            (C49050 + C49051) * C139308) *
               C30408 +
           ((C52473 + C52472) * C137101 -
            ((C81354 + C81355) * C139562 + (C81356 + C81357) * C137108) +
            (C52475 + C52474) * C139308) *
               C139600) *
              C139289 * C4654 +
          (((C81357 + C81356) * C137108 + (C81355 + C81354) * C139562 -
            (C52472 + C52473) * C137101 - (C52474 + C52475) * C139308) *
               C30408 +
           ((C47233 * C6165 + C47031 * C6343 + C47234 * C20831 +
             C139598 * C21045) *
                C137108 +
            (C47233 * C6168 + C47031 * C6346 + C47234 * C20833 +
             C139598 * C21047) *
                C139562 -
            (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
             C47031 * C6342) *
                C137101 -
            (C47234 * C20832 + C139598 * C21046 + C47233 * C6167 +
             C47031 * C6345) *
                C139308) *
               C139600) *
              C139289 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[81] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C30408 +
           ((C77859 + C77860) * C2660 + (C77965 + C77966) * C2565 -
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C2661 -
            (C47234 * C3994 + C139598 * C4248 + C47233 * C3989 +
             C47031 * C4247) *
                C2566 +
            (C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C2662 +
            (C47233 * C3994 + C47031 * C4248 + C47234 * C18089 +
             C139598 * C18418) *
                C2567) *
               C139600) *
              C139289 * C139562 +
          (((C48118 + C48119) * C2661 -
            ((C47351 + C47350) * C2565 + (C47260 + C47261) * C2660) +
            (C48233 + C48232) * C2566 - (C50018 + C50019) * C2662 -
            (C50125 + C50124) * C2567) *
               C30408 +
           ((C56795 + C56794) * C2661 -
            ((C49163 + C49162) * C2565 + (C49049 + C49048) * C2660) +
            (C56932 + C56933) * C2566 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C2662 -
            (C47234 * C18088 + C139598 * C18419 + C47233 * C3993 +
             C47031 * C4250) *
                C2567) *
               C139600) *
              C139289 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139346) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C181 +
            (C47233 * C1794 + C47031 * C2066 + C47234 * C3989 +
             C139598 * C4247) *
                C139346) *
               C139600) *
              C139289 * C92 -
          (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
           ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
              C139289 * C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C30408 +
           ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139600) *
              C139289 * C94 -
          (((C47234 * C8222 + C139598 * C8534 + C47233 * C1793 +
             C47031 * C2065) *
                C139346 +
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C181) *
               C139600 +
           ((C47355 + C47354) * C139346 + (C47268 + C47269) * C181) * C30408) *
              C139289 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C30408 +
            ((C77859 + C77860) * C181 + (C77965 + C77966) * C139346) *
                C139600) *
               C139289 * C139562 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
               C139289 * C139308) *
              C4653 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C30408 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) *
                C139600) *
               C139289 * C139308 -
           (((C81460 + C81461) * C139346 + (C81356 + C81357) * C181) * C139600 +
            ((C77966 + C77965) * C139346 + (C77860 + C77859) * C181) * C30408) *
               C139289 * C139562) *
              C4654 +
          ((((C81357 + C81356) * C181 + (C81461 + C81460) * C139346) * C30408 +
            ((C47233 * C6165 + C47031 * C6343 + C47234 * C20831 +
              C139598 * C21045) *
                 C181 +
             (C47233 * C6227 + C47031 * C6399 + C47234 * C20905 +
              C139598 * C21115) *
                 C139346) *
                C139600) *
               C139289 * C139562 -
           (((C47234 * C20904 + C139598 * C21114 + C47233 * C6226 +
              C47031 * C6398) *
                 C139346 +
             (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
              C47031 * C6342) *
                 C181) *
                C139600 +
            ((C52579 + C52578) * C139346 + (C52472 + C52473) * C181) * C30408) *
               C139289 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[81] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C30408 +
            ((C77859 + C77860) * C244 + (C78070 + C78069) * C139372) *
                C139600) *
               C139289 * C2565 -
           (((C47234 * C4080 + C139598 * C4330 + C47233 * C4075 +
              C47031 * C4327) *
                 C139372 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C244) *
                C139600 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C30408) *
               C139289 * C2566 +
           (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C30408 +
            ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
              C139598 * C18317) *
                 C244 +
             (C47233 * C4080 + C47031 * C4330 + C47234 * C18203 +
              C139598 * C18518) *
                 C139372) *
                C139600) *
               C139289 * C2567) *
              C139562 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C30408 +
            ((C56795 + C56794) * C244 + (C57068 + C57069) * C139372) *
                C139600) *
               C139289 * C2566 -
           (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
               C139289 * C2565 -
           (((C47234 * C18202 + C139598 * C18519 + C47233 * C4079 +
              C47031 * C4331) *
                 C139372 +
             (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
              C47031 * C4165) *
                 C244) *
                C139600 +
            ((C50229 + C50228) * C139372 + (C50018 + C50019) * C244) * C30408) *
               C139289 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C244 +
            (C47233 * C1879 + C47031 * C2159 + C47234 * C4075 +
             C139598 * C4327) *
                C139372) *
               C139600) *
              C139289 * C139346 * C92 -
          (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
           ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
              C139289 * C139346 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C30408 +
           ((C49053 + C49052) * C244 + (C49274 + C49275) * C139372) * C139600) *
              C139289 * C139346 * C94 -
          (((C47234 * C8322 + C139598 * C8647 + C47233 * C1880 +
             C47031 * C2162) *
                C139372 +
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C244) *
               C139600 +
           ((C47439 + C47438) * C139372 + (C47268 + C47269) * C244) * C30408) *
              C139289 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C4828 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C4653 -
            (C77860 + C77859) * C4829 - (C78069 + C78070) * C4654 +
            (C81357 + C81356) * C4830 + (C81564 + C81565) * C4655) *
               C30408 +
           ((C77859 + C77860) * C4828 + (C78070 + C78069) * C4653 -
            (C81356 + C81357) * C4829 - (C81565 + C81564) * C4654 +
            (C47233 * C6165 + C47031 * C6343 + C47234 * C20831 +
             C139598 * C21045) *
                C4830 +
            (C47233 * C6287 + C47031 * C6450 + C47234 * C20975 +
             C139598 * C21182) *
                C4655) *
               C139600) *
              C139289 * C139346 * C139562 +
          (((C49048 + C49049) * C4829 -
            ((C47435 + C47434) * C4653 + (C47260 + C47261) * C4828) +
            (C49273 + C49272) * C4654 - (C52472 + C52473) * C4830 -
            (C52683 + C52682) * C4655) *
               C30408 +
           ((C52473 + C52472) * C4829 -
            ((C49272 + C49273) * C4653 + (C49049 + C49048) * C4828) +
            (C52682 + C52683) * C4654 -
            (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
             C47031 * C6342) *
                C4830 -
            (C47234 * C20974 + C139598 * C21183 + C47233 * C6286 +
             C47031 * C6451) *
                C4655) *
               C139600) *
              C139289 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[81] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139562 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
               C139289 * C47031 +
           ((C77193 + C77194) * C137108 + (C77195 + C77196) * C139562 -
            (C31726 + C31725) * C137101 - (C31728 + C31727) * C139308) *
               C139289 * C139598) *
              C139372 * C2565 +
          (((C31725 + C31726) * C137101 -
            ((C77196 + C77195) * C139562 + (C77194 + C77193) * C137108) +
            (C31727 + C31728) * C139308) *
               C139289 * C47031 +
           ((C33707 + C33706) * C137101 -
            ((C79063 + C79064) * C139562 + (C79065 + C79066) * C137108) +
            (C33709 + C33708) * C139308) *
               C139289 * C139598) *
              C139372 * C2566 +
          (((C79066 + C79065) * C137108 + (C79064 + C79063) * C139562 -
            (C33706 + C33707) * C137101 - (C33708 + C33709) * C139308) *
               C139289 * C47031 +
           ((C30812 * C3367 + C30408 * C3707 + C30813 * C17959 +
             C139600 * C18619) *
                C137108 +
            (C30812 * C3370 + C30408 * C3710 + C30813 * C17961 +
             C139600 * C18621) *
                C139562 -
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C137101 -
            (C30813 * C17960 + C139600 * C18620 + C30812 * C3369 +
             C30408 * C3709) *
                C139308) *
               C139289 * C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C139289 * C47031 +
          ((C30812 * C832 + C30408 * C1396 + C30813 * C3891 + C139600 * C4407) *
               C103 +
           (C30812 * C839 + C30408 * C1400 + C30813 * C3900 + C139600 * C4413) *
               C92 -
           (C31726 + C31725) * C104 - (C31728 + C31727) * C93 +
           (C31730 + C31729) * C105 + (C31732 + C31731) * C94 -
           (C30813 * C8120 + C139600 * C8760 + C30812 * C831 + C30408 * C1398) *
               C106 -
           (C30813 * C8122 + C139600 * C8761 + C30812 * C841 + C30408 * C1403) *
               C95) *
              C139289 * C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139562 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
               C139289 * C47031 +
           ((C77193 + C77194) * C137108 + (C77195 + C77196) * C139562 -
            (C31726 + C31725) * C137101 - (C31728 + C31727) * C139308) *
               C139289 * C139598) *
              C4653 +
          (((C32764 + C32765) * C137101 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139562 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C137108) +
            (C32766 + C32767) * C139308) *
               C139289 * C47031 +
           ((C40759 + C40758) * C137101 -
            ((C80670 + C80671) * C139562 + (C80672 + C80673) * C137108) +
            (C40761 + C40760) * C139308) *
               C139289 * C139598) *
              C4654 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C137108 +
            (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
             C139600 * C6508) *
                C139562 -
            (C36230 + C36231) * C137101 - (C36232 + C36233) * C139308) *
               C139289 * C47031 +
           ((C30812 * C5471 + C30408 * C5951 + C30813 * C20831 +
             C139600 * C21251) *
                C137108 +
            (C30812 * C5474 + C30408 * C5954 + C30813 * C20833 +
             C139600 * C21253) *
                C139562 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C137101 -
            (C30813 * C20832 + C139600 * C21252 + C30812 * C5473 +
             C30408 * C5953) *
                C139308) *
               C139289 * C139598) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[81] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C77194 + C77193) * C2661 - (C77299 + C77300) * C2566 +
            (C79066 + C79065) * C2662 + (C79169 + C79170) * C2567) *
               C139289 * C47031 +
           ((C77193 + C77194) * C2660 + (C77300 + C77299) * C2565 -
            (C79065 + C79066) * C2661 - (C79170 + C79169) * C2566 +
            (C30812 * C3367 + C30408 * C3707 + C30813 * C17959 +
             C139600 * C18619) *
                C2662 +
            (C30812 * C3433 + C30408 * C3761 + C30813 * C18089 +
             C139600 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139562 +
          (((C31725 + C31726) * C2661 -
            ((C30930 + C30929) * C2565 + (C30839 + C30840) * C2660) +
            (C31840 + C31839) * C2566 - (C33706 + C33707) * C2662 -
            (C33813 + C33812) * C2567) *
               C139289 * C47031 +
           ((C33707 + C33706) * C2661 -
            ((C31839 + C31840) * C2565 + (C31726 + C31725) * C2660) +
            (C33812 + C33813) * C2566 -
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C2662 -
            (C30813 * C18088 + C139600 * C18747 + C30812 * C3432 +
             C30408 * C3762) *
                C2567) *
               C139289 * C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139346) *
               C139289 * C47031 +
           ((C30812 * C832 + C30408 * C1396 + C30813 * C3891 +
             C139600 * C4407) *
                C181 +
            (C30812 * C927 + C30408 * C1497 + C30813 * C3989 +
             C139600 * C4493) *
                C139346) *
               C139289 * C139598) *
              C92 -
          (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) * C139289 *
               C139598 +
           ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C139289 *
               C47031) *
              C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C139289 *
               C47031 +
           ((C31730 + C31729) * C181 + (C31841 + C31842) * C139346) * C139289 *
               C139598) *
              C94 -
          (((C30813 * C8222 + C139600 * C8872 + C30812 * C928 +
             C30408 * C1500) *
                C139346 +
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C181) *
               C139289 * C139598 +
           ((C30934 + C30933) * C139346 + (C30847 + C30848) * C181) * C139289 *
               C47031) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C47031 +
            ((C77193 + C77194) * C181 + (C77300 + C77299) * C139346) * C139289 *
                C139598) *
               C139562 -
           (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) * C139289 *
                C139598 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C139289 *
                C47031) *
               C139308) *
              C4653 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C139289 *
                C47031 +
            ((C40759 + C40758) * C181 + (C40896 + C40897) * C139346) * C139289 *
                C139598) *
               C139308 -
           (((C80785 + C80784) * C139346 + (C80672 + C80673) * C181) * C139289 *
                C139598 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C139289 * C47031) *
               C139562) *
              C4654 +
          ((((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C139289 * C47031 +
            ((C30812 * C5471 + C30408 * C5951 + C30813 * C20831 +
              C139600 * C21251) *
                 C181 +
             (C30812 * C5557 + C30408 * C6029 + C30813 * C20905 +
              C139600 * C21321) *
                 C139346) *
                C139289 * C139598) *
               C139562 -
           (((C30813 * C20904 + C139600 * C21320 + C30812 * C5556 +
              C30408 * C6030) *
                 C139346 +
             (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
              C30408 * C5950) *
                 C181) *
                C139289 * C139598 +
            ((C36337 + C36336) * C139346 + (C36230 + C36231) * C181) * C139289 *
                C47031) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[81] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C47031 +
            ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) * C139289 *
                C139598) *
               C2565 -
           (((C79273 + C79274) * C139372 + (C79065 + C79066) * C244) * C139289 *
                C139598 +
            ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) * C139289 *
                C47031) *
               C2566 +
           (((C79066 + C79065) * C244 + (C79274 + C79273) * C139372) * C139289 *
                C47031 +
            ((C30812 * C3367 + C30408 * C3707 + C30813 * C17959 +
              C139600 * C18619) *
                 C244 +
             (C30812 * C3489 + C30408 * C3816 + C30813 * C18203 +
              C139600 * C18855) *
                 C139372) *
                C139289 * C139598) *
               C2567) *
              C139562 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C139289 *
                C47031 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) * C139289 *
                C139598) *
               C2566 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139289 *
                C139598 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C139289 *
                C47031) *
               C2565 -
           (((C30813 * C18202 + C139600 * C18856 + C30812 * C3488 +
              C30408 * C3815) *
                 C139372 +
             (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
              C30408 * C3706) *
                 C244) *
                C139289 * C139598 +
            ((C33917 + C33916) * C139372 + (C33706 + C33707) * C244) * C139289 *
                C47031) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C47031 +
           ((C30812 * C832 + C30408 * C1396 + C30813 * C3891 +
             C139600 * C4407) *
                C244 +
            (C30812 * C1011 + C30408 * C1602 + C30813 * C4075 +
             C139600 * C4573) *
                C139372) *
               C139289 * C139598) *
              C139346 * C92 -
          (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139289 *
               C139598 +
           ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C139289 *
               C47031) *
              C139346 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C139289 *
               C47031 +
           ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) * C139289 *
               C139598) *
              C139346 * C94 -
          (((C30813 * C8322 + C139600 * C8985 + C30812 * C1012 +
             C30408 * C1603) *
                C139372 +
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C244) *
               C139289 * C139598 +
           ((C31018 + C31017) * C139372 + (C30847 + C30848) * C244) * C139289 *
               C47031) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C4828 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C4653 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C4829 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C4654 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C4655) *
               C139289 * C47031 +
           ((C77193 + C77194) * C4828 + (C77403 + C77404) * C4653 -
            (C80672 + C80673) * C4829 - (C80894 + C80895) * C4654 +
            (C30812 * C5471 + C30408 * C5951 + C30813 * C20831 +
             C139600 * C21251) *
                C4830 +
            (C30812 * C5637 + C30408 * C6106 + C30813 * C20975 +
             C139600 * C21388) *
                C4655) *
               C139289 * C139598) *
              C139346 * C139562 +
          (((C32764 + C32765) * C4829 -
            ((C31014 + C31013) * C4653 + (C30839 + C30840) * C4828) +
            (C32989 + C32988) * C4654 - (C36230 + C36231) * C4830 -
            (C36441 + C36440) * C4655) *
               C139289 * C47031 +
           ((C40759 + C40758) * C4829 -
            ((C31949 + C31950) * C4653 + (C31726 + C31725) * C4828) +
            (C41032 + C41033) * C4654 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C4830 -
            (C30813 * C20974 + C139600 * C21389 + C30812 * C5636 +
             C30408 * C6107) *
                C4655) *
               C139289 * C139598) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[82] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C47031 +
            (C65996 + C65997) * C139598) *
               C30408 +
           ((C77515 * C3364 + C77516 * C139303) * C47031 +
            (C66554 + C66553) * C139598) *
               C139600) *
              C139372 * C3360 -
          ((C66557 * C139598 + (C66553 + C66554) * C47031) * C139600 +
           ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
               C30408) *
              C139372 * C3361 +
          ((C66006 * C47031 + (C66001 + C66000) * C139598) * C30408 +
           ((C66552 + C66551) * C47031 + (C66555 + C66556) * C139598) *
               C139600) *
              C139372 * C3362 -
          ((((C63381 * C66529 + C139289 * C66531) * C139303 +
             (C63381 * C66528 + C139289 * C66530) * C3364) *
                C139598 +
            (C66556 + C66555) * C47031) *
               C139600 +
           ((C66011 + C66010) * C139598 + C66007 * C47031) * C30408) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C826 +
             (C63381 * C1707 + C139289 * C1714) * C821 -
             (C63381 * C1697 + C139289 * C1702) * C827 -
             (C63381 * C1706 + C139289 * C1713) * C822 +
             (C63381 * C1698 + C139289 * C1703) * C828 +
             (C63381 * C1705 + C139289 * C1712) * C823) *
                C47031 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139372 * C139570 +
          (((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C47031 +
            (C63904 - (C63903 + C63902) + C63905 - C63906 - C63907) * C139598) *
               C30408 +
           ((C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C47031 +
            (C70578 * C827 - (C66545 * C821 + C66546 * C826) + C70579 * C822 -
             (C63381 * C3894 + C139289 * C3906) * C828 -
             (C63381 * C3903 + C139289 * C3912) * C823) *
                C139598) *
               C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C47031 +
             (C65996 + C65997) * C139598) *
                C30408 +
            ((C79993 + C79994) * C47031 + C79995 * C139598) * C139600) *
               C4653 -
           ((C81958 * C139598 + (C81959 + C81960) * C47031) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C47031) * C30408) *
               C4654 +
           (((C81960 + C81959) * C47031 + C81961 * C139598) * C30408 +
            (((C63381 * C6165 + C139289 * C6171) * C3364 +
              (C63381 * C6168 + C139289 * C6174) * C139303) *
                 C47031 +
             (C81968 + C81969) * C139598) *
                C139600) *
               C4655) *
              C139570 +
          (((C79995 * C47031 + C79997 * C139598) * C30408 +
            (C81961 * C47031 + (C67977 + C67978) * C139598) * C139600) *
               C4654 -
           ((C66557 * C139598 + C79996 * C47031) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
                C30408) *
               C4653 -
           ((((C63381 * C68677 + C139289 * C68679) * C139303 +
              (C63381 * C68676 + C139289 * C68678) * C3364) *
                 C139598 +
             (C81969 + C81968) * C47031) *
                C139600 +
            ((C67978 + C67977) * C139598 + C81958 * C47031) * C30408) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3427 +
            (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
            C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
            C65399 * C3363) *
               C47031 +
           (C63884 * C3427 + C63994 * C3360 - C63890 * C3428 - C63995 * C3361 +
            C65313 * C3429 + C65399 * C3362 - C66008 * C3430 - C66066 * C3363) *
               C139598) *
              C30408 +
          ((C77515 * C3427 + C77640 * C3360 - C66548 * C3428 - C66640 * C3361 +
            C66546 * C3429 + C66641 * C3362 - C66549 * C3430 - C66642 * C3363) *
               C47031 +
           (C66548 * C3427 + C66640 * C3360 - C66546 * C3428 - C66641 * C3361 +
            C66549 * C3429 + C66642 * C3362 -
            (C63381 * C66528 + C139289 * C66530) * C3430 -
            (C63381 * C66631 + C139289 * C66632) * C3363) *
               C139598) *
              C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C47031 +
            (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
             C63995 * C139360) *
                C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C923 +
             (C63381 * C1794 + C139289 * C1799) * C139570 - C66548 * C924 -
             C66640 * C139360) *
                C47031 +
            (C66548 * C923 + C66640 * C139570 - C66546 * C924 -
             C66641 * C139360) *
                C139598) *
               C139600) *
              C821 +
          (((C63886 * C924 -
             ((C63381 * C183 + C139289 * C189) * C139570 +
              (C63381 * C108 + C139289 * C114) * C923) +
             C63996 * C139360) *
                C47031 +
            (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
             C63997 * C139360) *
                C139598) *
               C30408 +
           ((C70576 * C924 -
             ((C63381 * C1791 + C139289 * C1796) * C139570 +
              (C63381 * C1697 + C139289 * C1702) * C923) +
             C70686 * C139360) *
                C47031 +
            (C70578 * C924 - (C70686 * C139570 + C70576 * C923) +
             C70687 * C139360) *
                C139598) *
               C139600) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C923 +
             (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
             C63998 * C139360) *
                C47031 +
            (C63888 * C923 + C63998 * C139570 - C63894 * C924 -
             C63999 * C139360) *
                C139598) *
               C30408 +
           (((C63381 * C1698 + C139289 * C1703) * C923 +
             (C63381 * C1792 + C139289 * C1797) * C139570 - C76581 * C924 -
             C76685 * C139360) *
                C47031 +
            (C76581 * C923 + C76685 * C139570 -
             (C63381 * C3894 + C139289 * C3906) * C924 -
             (C63381 * C3992 + C139289 * C3998) * C139360) *
                C139598) *
               C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C47031 +
            (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
             C63995 * C139360) *
                C139598) *
               C30408 +
           ((C82068 + C82069 - C82070 - C82071) * C47031 +
            (C82072 + C82073 - C82074 - C82075) * C139598) *
               C139600) *
              C139303 * C4653 +
          (((C82070 - (C82069 + C82068) + C82071) * C47031 +
            (C82074 - (C82073 + C82072) + C82075) * C139598) *
               C30408 +
           ((C82076 - (C82077 + C82078) + C82079) * C47031 +
            (C82080 - (C82081 + C82082) + C82083) * C139598) *
               C139600) *
              C139303 * C4654 +
          (((C82078 + C82077 - C82076 - C82079) * C47031 +
            (C82082 + C82081 - C82080 - C82083) * C139598) *
               C30408 +
           (((C63381 * C6165 + C139289 * C6171) * C923 +
             (C63381 * C6227 + C139289 * C6230) * C139570 - C81966 * C924 -
             C82086 * C139360) *
                C47031 +
            (C81966 * C923 + C82086 * C139570 -
             (C63381 * C68676 + C139289 * C68678) * C924 -
             (C63381 * C68730 + C139289 * C68731) * C139360) *
                C139598) *
               C139600) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[82] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C47031 +
            (C64074 + C64098) * C139598) *
               C30408 +
           ((C77515 * C244 + C77750 * C139372) * C47031 +
            (C76784 + C76785) * C139598) *
               C139600) *
              C3360 -
          (((C78659 + C78660) * C139598 + (C76785 + C76784) * C47031) *
               C139600 +
           ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
               C30408) *
              C3361 +
          ((C65475 * C47031 + (C65478 + C65485) * C139598) * C30408 +
           ((C78660 + C78659) * C47031 + (C79473 + C79474) * C139598) *
               C139600) *
              C3362 -
          ((((C63381 * C66716 + C139289 * C66717) * C139372 +
             (C63381 * C66528 + C139289 * C66530) * C244) *
                C139598 +
            (C79474 + C79473) * C47031) *
               C139600 +
           ((C66124 + C66120) * C139598 + C66119 * C47031) * C30408) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C47031 +
             (C64074 + C64098) * C139598) *
                C30408 +
            (((C63381 * C1700 + C139289 * C1708) * C244 +
              (C63381 * C1879 + C139289 * C1884) * C139372) *
                 C47031 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C139570 -
           (((C66736 * C139372 + C66546 * C244) * C139598 +
             (C76785 + C76784) * C47031) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
                C30408) *
               C139360) *
              C821 +
          ((((C64080 + C64100) * C47031 + (C64083 + C64101) * C139598) *
                C30408 +
            ((C76786 + C76787) * C47031 +
             (C70578 * C244 + C70797 * C139372) * C139598) *
                C139600) *
               C139360 -
           (((C76787 + C76786) * C139598 +
             ((C63381 * C1878 + C139289 * C1883) * C139372 +
              (C63381 * C1697 + C139289 * C1702) * C244) *
                 C47031) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C47031) *
                C30408) *
               C139570) *
              C822 +
          (((((C63381 * C109 + C139289 * C115) * C244 +
              (C63381 * C247 + C139289 * C253) * C139372) *
                 C47031 +
             (C64086 + C64102) * C139598) *
                C30408 +
            (((C63381 * C1698 + C139289 * C1703) * C244 +
              (C63381 * C1877 + C139289 * C1882) * C139372) *
                 C47031 +
             (C76788 + C76792) * C139598) *
                C139600) *
               C139570 -
           ((((C63381 * C4078 + C139289 * C4084) * C139372 +
              (C63381 * C3894 + C139289 * C3906) * C244) *
                 C139598 +
             (C76792 + C76788) * C47031) *
                C139600 +
            ((C64103 + C64089) * C139598 + (C64102 + C64086) * C47031) *
                C30408) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C4828 +
             (C63381 * C245 + C139289 * C251) * C4653 - C77515 * C4829 -
             C77750 * C4654 + C81016 * C4830 + C81245 * C4655) *
                C47031 +
            (C68137 + C68138 - C68139 - C68140 + C68141 + C68153) * C139598) *
               C30408 +
           ((C77515 * C4828 + C77750 * C4653 - C81016 * C4829 - C81245 * C4654 +
             (C63381 * C6165 + C139289 * C6171) * C4830 +
             (C63381 * C6287 + C139289 * C6290) * C4655) *
                C47031 +
            (C82185 + C82186 - C82187 - C82188 + C82189 + C82193) * C139598) *
               C139600) *
              C139570 +
          (((C68139 - (C68138 + C68137) + C68140 - C68141 - C68153) * C47031 +
            (C68146 - (C68145 + C68144) + C68147 - C68148 - C68154) * C139598) *
               C30408 +
           ((C82187 - (C82186 + C82185) + C82188 - C82189 - C82193) * C47031 +
            (C67973 * C4829 - (C66736 * C4653 + C66546 * C4828) +
             C68152 * C4654 - (C63381 * C68676 + C139289 * C68678) * C4830 -
             (C63381 * C68782 + C139289 * C68783) * C4655) *
                C139598) *
               C139600) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C3364 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139303) *
               C30408 +
           ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
               C139600) *
              C139289 * C139372 * C3360 -
          (((C47234 * C3905 + C139598 * C4172 + C47233 * C3900 +
             C47031 * C4167) *
                C139303 +
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C3364) *
               C139600 +
           ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
             C47031 * C1098) *
                C139303 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C3364) *
               C30408) *
              C139289 * C139372 * C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139303) *
               C30408 +
           ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C3364 +
            (C47233 * C3905 + C47031 * C4172 + C47234 * C17961 +
             C139598 * C18319) *
                C139303) *
               C139600) *
              C139289 * C139372 * C3362 -
          (((C47234 * C66529 + C139598 * C66817 + C47233 * C17961 +
             C47031 * C18319) *
                C139303 +
            (C47234 * C66528 + C139598 * C66816 + C47233 * C17959 +
             C47031 * C18317) *
                C3364) *
               C139600 +
           ((C47234 * C17253 + C139598 * C17491 + C47233 * C3370 +
             C47031 * C3548) *
                C139303 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C3364) *
               C30408) *
              C139289 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C826 +
            (C47233 * C1707 + C47031 * C1966 + C47234 * C3900 +
             C139598 * C4167) *
                C821 -
            (C49049 + C49048) * C827 - (C49051 + C49050) * C822 +
            (C49053 + C49052) * C828 + (C49055 + C49054) * C823) *
               C139600) *
              C139289 * C139372 * C139570 +
          (((C48118 + C48119) * C827 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C821 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C826) +
            (C48120 + C48121) * C822 - (C48122 + C48123) * C828 -
            (C48124 + C48125) * C823) *
               C30408 +
           ((C56795 + C56794) * C827 -
            ((C47234 * C3905 + C139598 * C4172 + C47233 * C3900 +
              C47031 * C4167) *
                 C821 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C826) +
            (C56797 + C56796) * C822 -
            (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
             C47031 * C4163) *
                C828 -
            (C47234 * C3903 + C139598 * C4170 + C47233 * C3902 +
             C47031 * C4169) *
                C823) *
               C139600) *
              C139289 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C30408 +
            ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
                C139600) *
               C139289 * C4653 -
           (((C81354 + C81355) * C139303 + (C81356 + C81357) * C3364) *
                C139600 +
            ((C77862 + C77861) * C139303 + (C77860 + C77859) * C3364) *
                C30408) *
               C139289 * C4654 +
           (((C81357 + C81356) * C3364 + (C81355 + C81354) * C139303) * C30408 +
            ((C47233 * C6165 + C47031 * C6343 + C47234 * C20831 +
              C139598 * C21045) *
                 C3364 +
             (C47233 * C6168 + C47031 * C6346 + C47234 * C20833 +
              C139598 * C21047) *
                 C139303) *
                C139600) *
               C139289 * C4655) *
              C139570 +
          ((((C80328 + C80329) * C3364 + (C80330 + C80331) * C139303) * C30408 +
            ((C82300 + C82301) * C3364 + (C82302 + C82303) * C139303) *
                C139600) *
               C139289 * C4654 -
           (((C80331 + C80330) * C139303 + (C80329 + C80328) * C3364) *
                C139600 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C30408) *
               C139289 * C4653 -
           (((C47234 * C68677 + C139598 * C68835 + C47233 * C20833 +
              C47031 * C21047) *
                 C139303 +
             (C47234 * C68676 + C139598 * C68834 + C47233 * C20831 +
              C47031 * C21045) *
                 C3364) *
                C139600 +
            ((C82303 + C82302) * C139303 + (C82301 + C82300) * C3364) *
                C30408) *
               C139289 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[82] +=
        (-std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C3427 +
           (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
               C3360 -
           (C47234 * C2570 + C139598 * C2827 + C47233 * C832 + C47031 * C1094) *
               C3428 -
           (C47234 * C2663 + C139598 * C2921 + C47233 * C927 + C47031 * C1195) *
               C3361 +
           (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
            C47031 * C3545) *
               C3430 -
           (C47234 * C17337 + C139598 * C17558 + C47233 * C3433 +
            C47031 * C3599) *
               C3363) *
              C30408 +
          ((C77859 + C77860) * C3427 + (C77965 + C77966) * C3360 -
           (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
            C47031 * C4161) *
               C3428 -
           (C47234 * C3994 + C139598 * C4248 + C47233 * C3989 +
            C47031 * C4247) *
               C3361 +
           (C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
            C139598 * C18317) *
               C3429 +
           (C47233 * C3994 + C47031 * C4248 + C47234 * C18089 +
            C139598 * C18418) *
               C3362 -
           (C47234 * C66528 + C139598 * C66816 + C47233 * C17959 +
            C47031 * C18317) *
               C3430 -
           (C47234 * C66631 + C139598 * C66892 + C47233 * C18089 +
            C47031 * C18418) *
               C3363) *
              C139600) *
         C139289 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C923 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139570 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C924 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C923 +
            (C47233 * C1794 + C47031 * C2066 + C47234 * C3989 +
             C139598 * C4247) *
                C139570 -
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C924 -
            (C47234 * C3994 + C139598 * C4248 + C47233 * C3989 +
             C47031 * C4247) *
                C139360) *
               C139600) *
              C139289 * C821 +
          (((C48118 + C48119) * C924 -
            ((C47351 + C47350) * C139570 + (C47260 + C47261) * C923) +
            (C48233 + C48232) * C139360) *
               C30408 +
           ((C56795 + C56794) * C924 -
            ((C49163 + C49162) * C139570 + (C49049 + C49048) * C923) +
            (C56932 + C56933) * C139360) *
               C139600) *
              C139289 * C822 +
          (((C47264 + C47265) * C923 + (C47353 + C47352) * C139570 -
            (C48122 + C48123) * C924 - (C48235 + C48234) * C139360) *
               C30408 +
           ((C49053 + C49052) * C923 + (C49164 + C49165) * C139570 -
            (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
             C47031 * C4163) *
                C924 -
            (C47234 * C3992 + C139598 * C4252 + C47233 * C3991 +
             C47031 * C4251) *
                C139360) *
               C139600) *
              C139289 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C923 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139570 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C924 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C30408 +
           ((C77859 + C77860) * C923 + (C77965 + C77966) * C139570 -
            (C80329 + C80328) * C924 - (C80442 + C80443) * C139360) *
               C139600) *
              C139289 * C139303 * C4653 +
          (((C80328 + C80329) * C924 -
            ((C77966 + C77965) * C139570 + (C77860 + C77859) * C923) +
            (C80443 + C80442) * C139360) *
               C30408 +
           ((C82300 + C82301) * C924 -
            ((C81460 + C81461) * C139570 + (C81356 + C81357) * C923) +
            (C82406 + C82407) * C139360) *
               C139600) *
              C139289 * C139303 * C4654 +
          (((C81357 + C81356) * C923 + (C81461 + C81460) * C139570 -
            (C82301 + C82300) * C924 - (C82407 + C82406) * C139360) *
               C30408 +
           ((C47233 * C6165 + C47031 * C6343 + C47234 * C20831 +
             C139598 * C21045) *
                C923 +
            (C47233 * C6227 + C47031 * C6399 + C47234 * C20905 +
             C139598 * C21115) *
                C139570 -
            (C47234 * C68676 + C139598 * C68834 + C47233 * C20831 +
             C47031 * C21045) *
                C924 -
            (C47234 * C68730 + C139598 * C68886 + C47233 * C20905 +
             C47031 * C21115) *
                C139360) *
               C139600) *
              C139289 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C30408 +
           ((C77859 + C77860) * C244 + (C78070 + C78069) * C139372) * C139600) *
              C139289 * C3360 -
          (((C47234 * C4080 + C139598 * C4330 + C47233 * C4075 +
             C47031 * C4327) *
                C139372 +
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C244) *
               C139600 +
           ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
             C47031 * C1301) *
                C139372 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C244) *
               C30408) *
              C139289 * C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C244 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139372) *
               C30408 +
           ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C244 +
            (C47233 * C4080 + C47031 * C4330 + C47234 * C18203 +
             C139598 * C18518) *
                C139372) *
               C139600) *
              C139289 * C3362 -
          (((C47234 * C66716 + C139598 * C66967 + C47233 * C18203 +
             C47031 * C18518) *
                C139372 +
            (C47234 * C66528 + C139598 * C66816 + C47233 * C17959 +
             C47031 * C18317) *
                C244) *
               C139600 +
           ((C47234 * C17413 + C139598 * C17627 + C47233 * C3489 +
             C47031 * C3654) *
                C139372 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C244) *
               C30408) *
              C139289 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C30408 +
            ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
              C139598 * C4161) *
                 C244 +
             (C47233 * C1879 + C47031 * C2159 + C47234 * C4075 +
              C139598 * C4327) *
                 C139372) *
                C139600) *
               C139289 * C139570 -
           (((C47234 * C4080 + C139598 * C4330 + C47233 * C4075 +
              C47031 * C4327) *
                 C139372 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C244) *
                C139600 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C30408) *
               C139289 * C139360) *
              C821 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C30408 +
            ((C56795 + C56794) * C244 + (C57068 + C57069) * C139372) *
                C139600) *
               C139289 * C139360 -
           (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
               C139289 * C139570) *
              C822 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C30408 +
            ((C49053 + C49052) * C244 + (C49274 + C49275) * C139372) *
                C139600) *
               C139289 * C139570 -
           (((C47234 * C4078 + C139598 * C4332 + C47233 * C4077 +
              C47031 * C4329) *
                 C139372 +
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C244) *
                C139600 +
            ((C48345 + C48344) * C139372 + (C48122 + C48123) * C244) * C30408) *
               C139289 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C4828 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C4653 -
            (C77860 + C77859) * C4829 - (C78069 + C78070) * C4654 +
            (C81357 + C81356) * C4830 + (C81564 + C81565) * C4655) *
               C30408 +
           ((C77859 + C77860) * C4828 + (C78070 + C78069) * C4653 -
            (C81356 + C81357) * C4829 - (C81565 + C81564) * C4654 +
            (C47233 * C6165 + C47031 * C6343 + C47234 * C20831 +
             C139598 * C21045) *
                C4830 +
            (C47233 * C6287 + C47031 * C6450 + C47234 * C20975 +
             C139598 * C21182) *
                C4655) *
               C139600) *
              C139289 * C139570 +
          (((C80328 + C80329) * C4829 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C4653 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C4828) +
            (C80552 + C80553) * C4654 - (C82301 + C82300) * C4830 -
            (C82510 + C82511) * C4655) *
               C30408 +
           ((C82300 + C82301) * C4829 -
            ((C80553 + C80552) * C4653 + (C80329 + C80328) * C4828) +
            (C82511 + C82510) * C4654 -
            (C47234 * C68676 + C139598 * C68834 + C47233 * C20831 +
             C47031 * C21045) *
                C4830 -
            (C47234 * C68782 + C139598 * C68937 + C47233 * C20975 +
             C47031 * C21182) *
                C4655) *
               C139600) *
              C139289 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C3364 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139303) *
               C139289 * C47031 +
           ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) * C139289 *
               C139598) *
              C139372 * C3360 -
          (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) * C139289 *
               C139598 +
           ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) * C139289 *
               C47031) *
              C139372 * C3361 +
          (((C79066 + C79065) * C3364 + (C79064 + C79063) * C139303) * C139289 *
               C47031 +
           ((C79747 + C79748) * C3364 + (C79749 + C79750) * C139303) * C139289 *
               C139598) *
              C139372 * C3362 -
          (((C30813 * C66529 + C139600 * C67043 + C30812 * C17253 +
             C30408 * C17697) *
                C139303 +
            (C30813 * C66528 + C139600 * C67042 + C30812 * C17251 +
             C30408 * C17695) *
                C3364) *
               C139289 * C139598 +
           ((C79750 + C79749) * C139303 + (C79748 + C79747) * C3364) * C139289 *
               C47031) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C139289 * C47031 +
           ((C77193 + C77194) * C826 + (C77195 + C77196) * C821 -
            (C31726 + C31725) * C827 - (C31728 + C31727) * C822 +
            (C31730 + C31729) * C828 + (C31732 + C31731) * C823) *
               C139289 * C139598) *
              C139372 * C139570 +
          (((C31725 + C31726) * C827 -
            ((C77196 + C77195) * C821 + (C77194 + C77193) * C826) +
            (C31727 + C31728) * C822 - (C31729 + C31730) * C828 -
            (C31731 + C31732) * C823) *
               C139289 * C47031 +
           ((C33707 + C33706) * C827 -
            ((C30813 * C3905 + C139600 * C4418 + C30812 * C2577 +
              C30408 * C3109) *
                 C821 +
             (C30813 * C3896 + C139600 * C4412 + C30812 * C2570 +
              C30408 * C3105) *
                 C826) +
            (C33709 + C33708) * C822 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C828 -
            (C30813 * C3903 + C139600 * C4416 + C30812 * C2579 +
             C30408 * C3111) *
                C823) *
               C139289 * C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C47031 +
            ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) *
                C139289 * C139598) *
               C4653 -
           (((C80670 + C80671) * C139303 + (C80672 + C80673) * C3364) *
                C139289 * C139598 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C139289 * C47031) *
               C4654 +
           (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C139289 * C47031 +
            ((C82618 + C82619) * C3364 + (C82620 + C82621) * C139303) *
                C139289 * C139598) *
               C4655) *
              C139570 +
          ((((C80673 + C80672) * C3364 + (C80671 + C80670) * C139303) *
                C139289 * C47031 +
            ((C80674 + C80675) * C3364 + (C80676 + C80677) * C139303) *
                C139289 * C139598) *
               C4654 -
           (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) *
                C139289 * C139598 +
            ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) *
                C139289 * C47031) *
               C4653 -
           (((C30813 * C68677 + C139600 * C68989 + C30812 * C19905 +
              C30408 * C20541) *
                 C139303 +
             (C30813 * C68676 + C139600 * C68988 + C30812 * C19903 +
              C30408 * C20539) *
                 C3364) *
                C139289 * C139598 +
            ((C82621 + C82620) * C139303 + (C82619 + C82618) * C3364) *
                C139289 * C47031) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[82] +=
        (-std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C3427 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
               C3360 -
           (C77194 + C77193) * C3428 - (C77299 + C77300) * C3361 +
           (C79066 + C79065) * C3429 + (C79169 + C79170) * C3362 -
           (C79748 + C79747) * C3430 - (C79821 + C79822) * C3363) *
              C139289 * C47031 +
          ((C77193 + C77194) * C3427 + (C77300 + C77299) * C3360 -
           (C79065 + C79066) * C3428 - (C79170 + C79169) * C3361 +
           (C79747 + C79748) * C3429 + (C79822 + C79821) * C3362 -
           (C30813 * C66528 + C139600 * C67042 + C30812 * C17251 +
            C30408 * C17695) *
               C3430 -
           (C30813 * C66631 + C139600 * C67128 + C30812 * C17337 +
            C30408 * C17782) *
               C3363) *
              C139289 * C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C923 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139570 -
            (C77194 + C77193) * C924 - (C77299 + C77300) * C139360) *
               C139289 * C47031 +
           ((C77193 + C77194) * C923 + (C77300 + C77299) * C139570 -
            (C30813 * C3896 + C139600 * C4412 + C30812 * C2570 +
             C30408 * C3105) *
                C924 -
            (C30813 * C3994 + C139600 * C4494 + C30812 * C2663 +
             C30408 * C3199) *
                C139360) *
               C139289 * C139598) *
              C821 +
          (((C31725 + C31726) * C924 -
            ((C30930 + C30929) * C139570 + (C30839 + C30840) * C923) +
            (C31840 + C31839) * C139360) *
               C139289 * C47031 +
           ((C33707 + C33706) * C924 -
            ((C31839 + C31840) * C139570 + (C31726 + C31725) * C923) +
            (C33812 + C33813) * C139360) *
               C139289 * C139598) *
              C822 +
          (((C30843 + C30844) * C923 + (C30932 + C30931) * C139570 -
            (C31729 + C31730) * C924 - (C31842 + C31841) * C139360) *
               C139289 * C47031 +
           ((C31730 + C31729) * C923 + (C31841 + C31842) * C139570 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C924 -
            (C30813 * C3992 + C139600 * C4498 + C30812 * C2665 +
             C30408 * C3201) *
                C139360) *
               C139289 * C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C923 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139570 -
            (C77194 + C77193) * C924 - (C77299 + C77300) * C139360) *
               C139289 * C47031 +
           ((C77193 + C77194) * C923 + (C77300 + C77299) * C139570 -
            (C79065 + C79066) * C924 - (C79170 + C79169) * C139360) *
               C139289 * C139598) *
              C139303 * C4653 +
          (((C80673 + C80672) * C924 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139570 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C923) +
            (C80784 + C80785) * C139360) *
               C139289 * C47031 +
           ((C80674 + C80675) * C924 -
            ((C80785 + C80784) * C139570 + (C80672 + C80673) * C923) +
            (C80787 + C80786) * C139360) *
               C139289 * C139598) *
              C139303 * C4654 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C923 +
            (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
             C139600 * C6561) *
                C139570 -
            (C82619 + C82618) * C924 - (C82724 + C82725) * C139360) *
               C139289 * C47031 +
           ((C82618 + C82619) * C923 + (C82725 + C82724) * C139570 -
            (C30813 * C68676 + C139600 * C68988 + C30812 * C19903 +
             C30408 * C20539) *
                C924 -
            (C30813 * C68730 + C139600 * C69040 + C30812 * C20021 +
             C30408 * C20650) *
                C139360) *
               C139289 * C139598) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C47031 +
           ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) * C139289 *
               C139598) *
              C3360 -
          (((C79273 + C79274) * C139372 + (C79065 + C79066) * C244) * C139289 *
               C139598 +
           ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) * C139289 *
               C47031) *
              C3361 +
          (((C79066 + C79065) * C244 + (C79274 + C79273) * C139372) * C139289 *
               C47031 +
           ((C79747 + C79748) * C244 + (C79893 + C79894) * C139372) * C139289 *
               C139598) *
              C3362 -
          (((C30813 * C66716 + C139600 * C67206 + C30812 * C17413 +
             C30408 * C17854) *
                C139372 +
            (C30813 * C66528 + C139600 * C67042 + C30812 * C17251 +
             C30408 * C17695) *
                C244) *
               C139289 * C139598 +
           ((C79894 + C79893) * C139372 + (C79748 + C79747) * C244) * C139289 *
               C47031) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C47031 +
            ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) * C139289 *
                C139598) *
               C139570 -
           (((C30813 * C4080 + C139600 * C4576 + C30812 * C2745 +
              C30408 * C3295) *
                 C139372 +
             (C30813 * C3896 + C139600 * C4412 + C30812 * C2570 +
              C30408 * C3105) *
                 C244) *
                C139289 * C139598 +
            ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) * C139289 *
                C47031) *
               C139360) *
              C821 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C139289 *
                C47031 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) * C139289 *
                C139598) *
               C139360 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139289 *
                C139598 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C139289 *
                C47031) *
               C139570) *
              C822 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C139289 *
                C47031 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) * C139289 *
                C139598) *
               C139570 -
           (((C30813 * C4078 + C139600 * C4578 + C30812 * C2747 +
              C30408 * C3297) *
                 C139372 +
             (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
              C30408 * C3107) *
                 C244) *
                C139289 * C139598 +
            ((C31952 + C31951) * C139372 + (C31729 + C31730) * C244) * C139289 *
                C47031) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C4828 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C4653 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C4829 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C4654 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C4655) *
               C139289 * C47031 +
           ((C77193 + C77194) * C4828 + (C77403 + C77404) * C4653 -
            (C80672 + C80673) * C4829 - (C80894 + C80895) * C4654 +
            (C82618 + C82619) * C4830 + (C82828 + C82829) * C4655) *
               C139289 * C139598) *
              C139570 +
          (((C80673 + C80672) * C4829 -
            ((C77404 + C77403) * C4653 + (C77194 + C77193) * C4828) +
            (C80895 + C80894) * C4654 - (C82619 + C82618) * C4830 -
            (C82829 + C82828) * C4655) *
               C139289 * C47031 +
           ((C80674 + C80675) * C4829 -
            ((C79273 + C79274) * C4653 + (C79065 + C79066) * C4828) +
            (C80896 + C80897) * C4654 -
            (C30813 * C68676 + C139600 * C68988 + C30812 * C19903 +
             C30408 * C20539) *
                C4830 -
            (C30813 * C68782 + C139600 * C69091 + C30812 * C20129 +
             C30408 * C20753) *
                C4655) *
               C139289 * C139598) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[83] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C47031 +
             (C65996 + C65997) * C139598) *
                C30408 +
            ((C79993 + C79994) * C47031 + C79995 * C139598) * C139600) *
               C139571 -
           (((C67976 + C67975) * C139598 +
             ((C63381 * C4663 + C139289 * C4668) * C139303 +
              (C63381 * C4656 + C139289 * C4660) * C3364) *
                 C47031) *
                C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C47031) * C30408) *
               C139384) *
              C2565 +
          (((C79995 * C47031 + C79997 * C139598) * C30408 +
            ((C67975 + C67976) * C47031 + (C67977 + C67978) * C139598) *
                C139600) *
               C139384 -
           ((C66557 * C139598 + C79996 * C47031) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
                C30408) *
               C139571) *
              C2566 +
          (((C66006 * C47031 + (C66001 + C66000) * C139598) * C30408 +
            (C79997 * C47031 + (C66555 + C66556) * C139598) * C139600) *
               C139571 -
           ((((C63381 * C67959 + C139289 * C67961) * C139303 +
              (C63381 * C67958 + C139289 * C67960) * C3364) *
                 C139598 +
             (C67978 + C67977) * C47031) *
                C139600 +
            ((C66556 + C66555) * C139598 + C66557 * C47031) * C30408) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C30408 +
           ((C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C47031 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139571 +
          (((C77523 - (C77522 + C77521) + C77524 - C77525 - C77526) * C47031 +
            (C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C139598) *
               C30408 +
           (((C63381 * C4657 + C139289 * C4661) * C827 -
             ((C63381 * C4663 + C139289 * C4668) * C821 +
              (C63381 * C4656 + C139289 * C4660) * C826) +
             (C63381 * C4664 + C139289 * C4669) * C822 -
             (C63381 * C4658 + C139289 * C4662) * C828 -
             (C63381 * C4665 + C139289 * C4670) * C823) *
                C47031 +
            ((C63381 * C5470 + C139289 * C5476) * C827 -
             (C67972 * C821 + C67971 * C826) +
             (C63381 * C5473 + C139289 * C5479) * C822 -
             (C63381 * C5469 + C139289 * C5475) * C828 -
             (C63381 * C5472 + C139289 * C5478) * C823) *
                C139598) *
               C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C47031 +
            (C65996 + C65997) * C139598) *
               C30408 +
           ((C79993 + C79994) * C47031 + C79995 * C139598) * C139600) *
              C6159 -
          ((C81958 * C139598 + (C81959 + C81960) * C47031) * C139600 +
           (C79996 * C139598 + (C79994 + C79993) * C47031) * C30408) *
              C6160 +
          (((C81960 + C81959) * C47031 + C81961 * C139598) * C30408 +
           ((C82906 + C82907) * C47031 + (C81968 + C81969) * C139598) *
               C139600) *
              C6161 -
          ((((C63381 * C82896 + C139289 * C82898) * C139303 +
             (C63381 * C82895 + C139289 * C82897) * C3364) *
                C139598 +
            ((C63381 * C37436 + C139289 * C37440) * C139303 +
             (C63381 * C37434 + C139289 * C37438) * C3364) *
                C47031) *
               C139600 +
           ((C81969 + C81968) * C139598 + (C82907 + C82906) * C47031) *
               C30408) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[83] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C47031 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C30408 +
           ((C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C47031 +
            (C80102 + C80103 - C80104 - C80105 + C80106 + C80107) * C139598) *
               C139600) *
              C139303 * C139571 +
          (((C80098 - (C80097 + C80096) + C80099 - C80100 - C80101) * C47031 +
            (C80104 - (C80103 + C80102) + C80105 - C80106 - C80107) * C139598) *
               C30408 +
           ((C67971 * C2661 -
             ((C63381 * C4746 + C139289 * C4750) * C2565 +
              (C63381 * C4656 + C139289 * C4660) * C2660) +
             C68059 * C2566 - C67973 * C2662 - C68060 * C2567) *
                C47031 +
            (C67973 * C2661 - (C68059 * C2565 + C67971 * C2660) +
             C68060 * C2566 - (C63381 * C67958 + C139289 * C67960) * C2662 -
             (C63381 * C68052 + C139289 * C68053) * C2567) *
                C139598) *
               C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C47031 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C30408 +
            ((C77625 + C77643) * C47031 + (C77628 + C77629) * C139598) *
                C139600) *
               C821 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C47031) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C47031) *
                C30408) *
               C822 +
           ((((C63381 * C109 + C139289 * C115) * C181 +
              (C63381 * C184 + C139289 * C190) * C139346) *
                 C47031 +
             (C63888 * C181 + C63998 * C139346) * C139598) *
                C30408 +
            ((C77635 + C77645) * C47031 + (C77638 + C77639) * C139598) *
                C139600) *
               C823) *
              C139571 +
          ((((C77634 + C77644) * C47031 + (C77631 + C77630) * C139598) *
                C30408 +
            (((C63381 * C4657 + C139289 * C4661) * C181 +
              (C63381 * C4747 + C139289 * C4751) * C139346) *
                 C47031 +
             ((C63381 * C5470 + C139289 * C5476) * C181 +
              (C63381 * C5556 + C139289 * C5559) * C139346) *
                 C139598) *
                C139600) *
               C822 -
           (((C68059 * C139346 + C67971 * C181) * C139598 +
             ((C63381 * C4746 + C139289 * C4750) * C139346 +
              (C63381 * C4656 + C139289 * C4660) * C181) *
                 C47031) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C47031) *
                C30408) *
               C821 -
           ((((C63381 * C5555 + C139289 * C5558) * C139346 +
              (C63381 * C5469 + C139289 * C5475) * C181) *
                 C139598 +
             ((C63381 * C4748 + C139289 * C4752) * C139346 +
              (C63381 * C4658 + C139289 * C4662) * C181) *
                 C47031) *
                C139600 +
            ((C77639 + C77638) * C139598 + (C77645 + C77635) * C47031) *
                C30408) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C47031 +
            (C63884 * C181 + C63994 * C139346) * C139598) *
               C30408 +
           ((C77625 + C77643) * C47031 + (C77628 + C77629) * C139598) *
               C139600) *
              C139303 * C6159 -
          (((C81130 + C81131) * C139598 + (C81140 + C81134) * C47031) *
               C139600 +
           ((C77629 + C77628) * C139598 + (C77643 + C77625) * C47031) *
               C30408) *
              C139303 * C6160 +
          (((C81134 + C81140) * C47031 + (C81131 + C81130) * C139598) * C30408 +
           ((C82976 + C82982) * C47031 + (C82979 + C82980) * C139598) *
               C139600) *
              C139303 * C6161 -
          ((((C63381 * C82973 + C139289 * C82974) * C139346 +
             (C63381 * C82895 + C139289 * C82897) * C181) *
                C139598 +
            ((C63381 * C37520 + C139289 * C37522) * C139346 +
             (C63381 * C37434 + C139289 * C37438) * C181) *
                C47031) *
               C139600 +
           ((C82980 + C82979) * C139598 + (C82982 + C82976) * C47031) *
               C30408) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[83] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C47031 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C30408 +
           ((C77515 * C1875 + C77750 * C139571 -
             (C63381 * C4656 + C139289 * C4660) * C1876 -
             (C63381 * C4831 + C139289 * C4835) * C139384) *
                C47031 +
            (C80206 + C80207 - C80208 - C80209) * C139598) *
               C139600) *
              C2565 +
          (((C66721 - (C66720 + C66719) + C66738) * C47031 +
            (C66726 - (C66725 + C66724) + C66740) * C139598) *
               C30408 +
           ((C80208 - (C80207 + C80206) + C80209) * C47031 +
            (C80210 - (C80211 + C80212) + C80213) * C139598) *
               C139600) *
              C2566 +
          ((C66742 * C47031 + (C66731 + C66730 - C66729 - C66741) * C139598) *
               C30408 +
           ((C80212 + C80211 - C80210 - C80213) * C47031 +
            (C66549 * C1875 + C66737 * C139571 -
             (C63381 * C67958 + C139289 * C67960) * C1876 -
             (C63381 * C68134 + C139289 * C68135) * C139384) *
                C139598) *
               C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C47031 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C30408 +
           ((C77515 * C1875 + C77750 * C139571 -
             (C63381 * C4656 + C139289 * C4660) * C1876 -
             (C63381 * C4831 + C139289 * C4835) * C139384) *
                C47031 +
            (C66548 * C1875 + C66734 * C139571 - C67971 * C1876 -
             C68151 * C139384) *
                C139598) *
               C139600) *
              C139346 * C821 +
          (((C77517 * C1876 -
             ((C63381 * C246 + C139289 * C252) * C139571 +
              (C63381 * C108 + C139289 * C114) * C1875) +
             C77751 * C139384) *
                C47031 +
            (C70786 - (C70787 + C70788) + C70798) * C139598) *
               C30408 +
           (((C63381 * C4657 + C139289 * C4661) * C1876 -
             (C77751 * C139571 + C77517 * C1875) +
             (C63381 * C4832 + C139289 * C4836) * C139384) *
                C47031 +
            ((C63381 * C5470 + C139289 * C5476) * C1876 -
             (C70796 * C139571 + C70576 * C1875) +
             (C63381 * C5636 + C139289 * C5639) * C139384) *
                C139598) *
               C139600) *
              C139346 * C822 +
          ((((C63381 * C109 + C139289 * C115) * C1875 +
             (C63381 * C247 + C139289 * C253) * C139571 - C77519 * C1876 -
             C77752 * C139384) *
                C47031 +
            (C63888 * C1875 + C64096 * C139571 - C76581 * C1876 -
             C76791 * C139384) *
                C139598) *
               C30408 +
           ((C77519 * C1875 + C77752 * C139571 -
             (C63381 * C4658 + C139289 * C4662) * C1876 -
             (C63381 * C4833 + C139289 * C4837) * C139384) *
                C47031 +
            (C76581 * C1875 + C76791 * C139571 -
             (C63381 * C5469 + C139289 * C5475) * C1876 -
             (C63381 * C5635 + C139289 * C5638) * C139384) *
                C139598) *
               C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6281 +
            (C63381 * C245 + C139289 * C251) * C6159 - C77515 * C6282 -
            C77750 * C6160 + C81016 * C6283 + C81245 * C6161 - C82904 * C6284 -
            C83053 * C6162) *
               C47031 +
           (C63884 * C6281 + C64092 * C6159 - C66548 * C6282 - C66734 * C6160 +
            C67971 * C6283 + C68151 * C6161 - C81966 * C6284 - C82192 * C6162) *
               C139598) *
              C30408 +
          ((C77515 * C6281 + C77750 * C6159 - C81016 * C6282 - C81245 * C6160 +
            C82904 * C6283 + C83053 * C6161 -
            (C63381 * C37434 + C139289 * C37438) * C6284 -
            (C63381 * C37596 + C139289 * C37598) * C6162) *
               C47031 +
           (C66548 * C6281 + C66734 * C6159 - C67971 * C6282 - C68151 * C6160 +
            C81966 * C6283 + C82192 * C6161 -
            (C63381 * C82895 + C139289 * C82897) * C6284 -
            (C63381 * C83048 + C139289 * C83049) * C6162) *
               C139598) *
              C139600) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[83] +=
        (-std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C30408 +
            ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C47234 * C5474 + C139598 * C5720 + C47233 * C4663 +
              C47031 * C4917) *
                 C139303 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C3364) *
                C139600 +
            ((C77862 + C77861) * C139303 + (C77860 + C77859) * C3364) *
                C30408) *
               C139289 * C139384) *
              C2565 +
          ((((C80328 + C80329) * C3364 + (C80330 + C80331) * C139303) * C30408 +
            ((C47233 * C5471 + C47031 * C5717 + C47234 * C19903 +
              C139598 * C20237) *
                 C3364 +
             (C47233 * C5474 + C47031 * C5720 + C47234 * C19905 +
              C139598 * C20239) *
                 C139303) *
                C139600) *
               C139289 * C139384 -
           (((C80331 + C80330) * C139303 + (C80329 + C80328) * C3364) *
                C139600 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C30408) *
               C139289 * C139571) *
              C2566 +
          ((((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C30408 +
            ((C80332 + C80333) * C3364 + (C80334 + C80335) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C47234 * C67959 + C139598 * C68229 + C47233 * C19905 +
              C47031 * C20239) *
                 C139303 +
             (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
              C47031 * C20237) *
                 C3364) *
                C139600 +
            ((C80335 + C80334) * C139303 + (C80333 + C80332) * C3364) *
                C30408) *
               C139289 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C30408 +
           ((C77859 + C77860) * C826 + (C77861 + C77862) * C821 -
            (C49049 + C49048) * C827 - (C49051 + C49050) * C822 +
            (C49053 + C49052) * C828 + (C49055 + C49054) * C823) *
               C139600) *
              C139289 * C139571 +
          (((C49048 + C49049) * C827 -
            ((C77862 + C77861) * C821 + (C77860 + C77859) * C826) +
            (C49050 + C49051) * C822 - (C49052 + C49053) * C828 -
            (C49054 + C49055) * C823) *
               C30408 +
           ((C52473 + C52472) * C827 -
            ((C47234 * C5474 + C139598 * C5720 + C47233 * C4663 +
              C47031 * C4917) *
                 C821 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C826) +
            (C52475 + C52474) * C822 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C828 -
            (C47234 * C5472 + C139598 * C5718 + C47233 * C4665 +
             C47031 * C4919) *
                C823) *
               C139600) *
              C139289 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C3364 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139303) *
               C30408 +
           ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
               C139600) *
              C139289 * C6159 -
          (((C81354 + C81355) * C139303 + (C81356 + C81357) * C3364) * C139600 +
           ((C77862 + C77861) * C139303 + (C77860 + C77859) * C3364) * C30408) *
              C139289 * C6160 +
          (((C81357 + C81356) * C3364 + (C81355 + C81354) * C139303) * C30408 +
           ((C83130 + C83131) * C3364 + (C83132 + C83133) * C139303) *
               C139600) *
              C139289 * C6161 -
          (((C47234 * C82896 + C139598 * C83120 + C47233 * C37436 +
             C47031 * C37674) *
                C139303 +
            (C47234 * C82895 + C139598 * C83119 + C47233 * C37434 +
             C47031 * C37672) *
                C3364) *
               C139600 +
           ((C83133 + C83132) * C139303 + (C83131 + C83130) * C3364) * C30408) *
              C139289 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[83] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C30408 +
           ((C77859 + C77860) * C2660 + (C77965 + C77966) * C2565 -
            (C80329 + C80328) * C2661 - (C80442 + C80443) * C2566 +
            (C80332 + C80333) * C2662 + (C80444 + C80445) * C2567) *
               C139600) *
              C139289 * C139303 * C139571 +
          (((C80328 + C80329) * C2661 -
            ((C77966 + C77965) * C2565 + (C77860 + C77859) * C2660) +
            (C80443 + C80442) * C2566 - (C80333 + C80332) * C2662 -
            (C80445 + C80444) * C2567) *
               C30408 +
           ((C47233 * C5471 + C47031 * C5717 + C47234 * C19903 +
             C139598 * C20237) *
                C2661 -
            ((C47234 * C5557 + C139598 * C5795 + C47233 * C4746 +
              C47031 * C5007) *
                 C2565 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C2660) +
            (C47233 * C5557 + C47031 * C5795 + C47234 * C20021 +
             C139598 * C20338) *
                C2566 -
            (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
             C47031 * C20237) *
                C2662 -
            (C47234 * C68052 + C139598 * C68304 + C47233 * C20021 +
             C47031 * C20338) *
                C2567) *
               C139600) *
              C139289 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C30408 +
            ((C77859 + C77860) * C181 + (C77965 + C77966) * C139346) *
                C139600) *
               C139289 * C821 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
               C139289 * C822 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C30408 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) *
                C139600) *
               C139289 * C823) *
              C139571 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C30408 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) *
                C139600) *
               C139289 * C822 -
           (((C47234 * C5557 + C139598 * C5795 + C47233 * C4746 +
              C47031 * C5007) *
                 C139346 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C181) *
                C139600 +
            ((C77966 + C77965) * C139346 + (C77860 + C77859) * C181) * C30408) *
               C139289 * C821 -
           (((C47234 * C5555 + C139598 * C5797 + C47233 * C4748 +
              C47031 * C5009) *
                 C139346 +
             (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
              C47031 * C4915) *
                 C181) *
                C139600 +
            ((C49165 + C49164) * C139346 + (C49052 + C49053) * C181) * C30408) *
               C139289 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139346) *
               C30408 +
           ((C77859 + C77860) * C181 + (C77965 + C77966) * C139346) * C139600) *
              C139289 * C139303 * C6159 -
          (((C81460 + C81461) * C139346 + (C81356 + C81357) * C181) * C139600 +
           ((C77966 + C77965) * C139346 + (C77860 + C77859) * C181) * C30408) *
              C139289 * C139303 * C6160 +
          (((C81357 + C81356) * C181 + (C81461 + C81460) * C139346) * C30408 +
           ((C83130 + C83131) * C181 + (C83205 + C83206) * C139346) * C139600) *
              C139289 * C139303 * C6161 -
          (((C47234 * C82973 + C139598 * C83199 + C47233 * C37520 +
             C47031 * C37752) *
                C139346 +
            (C47234 * C82895 + C139598 * C83119 + C47233 * C37434 +
             C47031 * C37672) *
                C181) *
               C139600 +
           ((C83206 + C83205) * C139346 + (C83131 + C83130) * C181) * C30408) *
              C139289 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[83] +=
        (-std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C77860 + C77859) * C1876 - (C78069 + C78070) * C139384) *
               C30408 +
           ((C77859 + C77860) * C1875 + (C78070 + C78069) * C139571 -
            (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
             C47031 * C4913) *
                C1876 -
            (C47234 * C5637 + C139598 * C5872 + C47233 * C4831 +
             C47031 * C5095) *
                C139384) *
               C139600) *
              C139289 * C2565 +
          (((C80328 + C80329) * C1876 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139571 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C1875) +
            (C80552 + C80553) * C139384) *
               C30408 +
           ((C47233 * C5471 + C47031 * C5717 + C47234 * C19903 +
             C139598 * C20237) *
                C1876 -
            ((C80553 + C80552) * C139571 + (C80329 + C80328) * C1875) +
            (C47233 * C5637 + C47031 * C5872 + C47234 * C20129 +
             C139598 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C80333 + C80332) * C1876 - (C80554 + C80555) * C139384) *
               C30408 +
           ((C80332 + C80333) * C1875 + (C80555 + C80554) * C139571 -
            (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
             C47031 * C20237) *
                C1876 -
            (C47234 * C68134 + C139598 * C68379 + C47233 * C20129 +
             C47031 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C77860 + C77859) * C1876 - (C78069 + C78070) * C139384) *
               C30408 +
           ((C77859 + C77860) * C1875 + (C78070 + C78069) * C139571 -
            (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
             C47031 * C4913) *
                C1876 -
            (C47234 * C5637 + C139598 * C5872 + C47233 * C4831 +
             C47031 * C5095) *
                C139384) *
               C139600) *
              C139289 * C139346 * C821 +
          (((C49048 + C49049) * C1876 -
            ((C47435 + C47434) * C139571 + (C47260 + C47261) * C1875) +
            (C49273 + C49272) * C139384) *
               C30408 +
           ((C52473 + C52472) * C1876 -
            ((C49272 + C49273) * C139571 + (C49049 + C49048) * C1875) +
            (C52682 + C52683) * C139384) *
               C139600) *
              C139289 * C139346 * C822 +
          (((C47264 + C47265) * C1875 + (C47437 + C47436) * C139571 -
            (C49052 + C49053) * C1876 - (C49275 + C49274) * C139384) *
               C30408 +
           ((C49053 + C49052) * C1875 + (C49274 + C49275) * C139571 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C1876 -
            (C47234 * C5635 + C139598 * C5874 + C47233 * C4833 +
             C47031 * C5097) *
                C139384) *
               C139600) *
              C139289 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C6281 +
           (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
               C6159 -
           (C77860 + C77859) * C6282 - (C78069 + C78070) * C6160 +
           (C81357 + C81356) * C6283 + (C81564 + C81565) * C6161 -
           (C83131 + C83130) * C6284 - (C83278 + C83279) * C6162) *
              C30408 +
          ((C77859 + C77860) * C6281 + (C78070 + C78069) * C6159 -
           (C81356 + C81357) * C6282 - (C81565 + C81564) * C6160 +
           (C83130 + C83131) * C6283 + (C83279 + C83278) * C6161 -
           (C47234 * C82895 + C139598 * C83119 + C47233 * C37434 +
            C47031 * C37672) *
               C6284 -
           (C47234 * C83048 + C139598 * C83272 + C47233 * C37596 +
            C47031 * C37824) *
               C6162) *
              C139600) *
         C139289 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[83] +=
        (-std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C47031 +
            ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C80670 + C80671) * C139303 + (C80672 + C80673) * C3364) *
                C139289 * C139598 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C139289 * C47031) *
               C139384) *
              C2565 +
          ((((C80673 + C80672) * C3364 + (C80671 + C80670) * C139303) *
                C139289 * C47031 +
            ((C80674 + C80675) * C3364 + (C80676 + C80677) * C139303) *
                C139289 * C139598) *
               C139384 -
           (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) *
                C139289 * C139598 +
            ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) *
                C139289 * C47031) *
               C139571) *
              C2566 +
          ((((C79066 + C79065) * C3364 + (C79064 + C79063) * C139303) *
                C139289 * C47031 +
            ((C79747 + C79748) * C3364 + (C79749 + C79750) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C30813 * C67959 + C139600 * C68455 + C30812 * C17961 +
              C30408 * C18621) *
                 C139303 +
             (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
              C30408 * C18619) *
                 C3364) *
                C139289 * C139598 +
            ((C80677 + C80676) * C139303 + (C80675 + C80674) * C3364) *
                C139289 * C47031) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C139289 * C47031 +
           ((C77193 + C77194) * C826 + (C77195 + C77196) * C821 -
            (C31726 + C31725) * C827 - (C31728 + C31727) * C822 +
            (C31730 + C31729) * C828 + (C31732 + C31731) * C823) *
               C139289 * C139598) *
              C139571 +
          (((C32764 + C32765) * C827 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C821 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C826) +
            (C32766 + C32767) * C822 - (C32768 + C32769) * C828 -
            (C32770 + C32771) * C823) *
               C139289 * C47031 +
           ((C40759 + C40758) * C827 -
            ((C30813 * C5474 + C139600 * C5954 + C30812 * C3900 +
              C30408 * C4413) *
                 C821 +
             (C30813 * C5471 + C139600 * C5951 + C30812 * C3891 +
              C30408 * C4407) *
                 C826) +
            (C40761 + C40760) * C822 -
            (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
             C30408 * C4409) *
                C828 -
            (C30813 * C5472 + C139600 * C5952 + C30812 * C3902 +
             C30408 * C4415) *
                C823) *
               C139289 * C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C3364 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139303) *
               C139289 * C47031 +
           ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) * C139289 *
               C139598) *
              C6159 -
          (((C80670 + C80671) * C139303 + (C80672 + C80673) * C3364) * C139289 *
               C139598 +
           ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
             C30408 * C2268) *
                C139303 +
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C3364) *
               C139289 * C47031) *
              C6160 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C3364 +
            (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
             C139600 * C6508) *
                C139303) *
               C139289 * C47031 +
           ((C82618 + C82619) * C3364 + (C82620 + C82621) * C139303) * C139289 *
               C139598) *
              C6161 -
          (((C30813 * C82896 + C139600 * C83346 + C30812 * C20833 +
             C30408 * C21253) *
                C139303 +
            (C30813 * C82895 + C139600 * C83345 + C30812 * C20831 +
             C30408 * C21251) *
                C3364) *
               C139289 * C139598 +
           ((C30813 * C37436 + C139600 * C37898 + C30812 * C6168 +
             C30408 * C6508) *
                C139303 +
            (C30813 * C37434 + C139600 * C37896 + C30812 * C6165 +
             C30408 * C6505) *
                C3364) *
               C139289 * C47031) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[83] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C77194 + C77193) * C2661 - (C77299 + C77300) * C2566 +
            (C79066 + C79065) * C2662 + (C79169 + C79170) * C2567) *
               C139289 * C47031 +
           ((C77193 + C77194) * C2660 + (C77300 + C77299) * C2565 -
            (C79065 + C79066) * C2661 - (C79170 + C79169) * C2566 +
            (C79747 + C79748) * C2662 + (C79822 + C79821) * C2567) *
               C139289 * C139598) *
              C139303 * C139571 +
          (((C80673 + C80672) * C2661 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C2565 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C2660) +
            (C80784 + C80785) * C2566 - (C80675 + C80674) * C2662 -
            (C80786 + C80787) * C2567) *
               C139289 * C47031 +
           ((C80674 + C80675) * C2661 -
            ((C80785 + C80784) * C2565 + (C80672 + C80673) * C2660) +
            (C80787 + C80786) * C2566 -
            (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
             C30408 * C18619) *
                C2662 -
            (C30813 * C68052 + C139600 * C68538 + C30812 * C18089 +
             C30408 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C47031 +
            ((C77193 + C77194) * C181 + (C77300 + C77299) * C139346) * C139289 *
                C139598) *
               C821 -
           (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) * C139289 *
                C139598 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C139289 *
                C47031) *
               C822 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C139289 *
                C47031 +
            ((C31730 + C31729) * C181 + (C31841 + C31842) * C139346) * C139289 *
                C139598) *
               C823) *
              C139571 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C139289 *
                C47031 +
            ((C40759 + C40758) * C181 + (C40896 + C40897) * C139346) * C139289 *
                C139598) *
               C822 -
           (((C30813 * C5557 + C139600 * C6029 + C30812 * C3989 +
              C30408 * C4493) *
                 C139346 +
             (C30813 * C5471 + C139600 * C5951 + C30812 * C3891 +
              C30408 * C4407) *
                 C181) *
                C139289 * C139598 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C139289 * C47031) *
               C821 -
           (((C30813 * C5555 + C139600 * C6031 + C30812 * C3991 +
              C30408 * C4497) *
                 C139346 +
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C181) *
                C139289 * C139598 +
            ((C32881 + C32880) * C139346 + (C32768 + C32769) * C181) * C139289 *
                C47031) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139346) *
               C139289 * C47031 +
           ((C77193 + C77194) * C181 + (C77300 + C77299) * C139346) * C139289 *
               C139598) *
              C139303 * C6159 -
          (((C80785 + C80784) * C139346 + (C80672 + C80673) * C181) * C139289 *
               C139598 +
           ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
             C30408 * C2368) *
                C139346 +
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C181) *
               C139289 * C47031) *
              C139303 * C6160 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C181 +
            (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
             C139600 * C6561) *
                C139346) *
               C139289 * C47031 +
           ((C82618 + C82619) * C181 + (C82725 + C82724) * C139346) * C139289 *
               C139598) *
              C139303 * C6161 -
          (((C30813 * C82973 + C139600 * C83413 + C30812 * C20905 +
             C30408 * C21321) *
                C139346 +
            (C30813 * C82895 + C139600 * C83345 + C30812 * C20831 +
             C30408 * C21251) *
                C181) *
               C139289 * C139598 +
           ((C30813 * C37520 + C139600 * C37966 + C30812 * C6227 +
             C30408 * C6561) *
                C139346 +
            (C30813 * C37434 + C139600 * C37896 + C30812 * C6165 +
             C30408 * C6505) *
                C181) *
               C139289 * C47031) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[83] +=
        (-std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C139289 * C47031 +
           ((C77193 + C77194) * C1875 + (C77403 + C77404) * C139571 -
            (C80672 + C80673) * C1876 - (C80894 + C80895) * C139384) *
               C139289 * C139598) *
              C2565 +
          (((C80673 + C80672) * C1876 -
            ((C77404 + C77403) * C139571 + (C77194 + C77193) * C1875) +
            (C80895 + C80894) * C139384) *
               C139289 * C47031 +
           ((C80674 + C80675) * C1876 -
            ((C79273 + C79274) * C139571 + (C79065 + C79066) * C1875) +
            (C80896 + C80897) * C139384) *
               C139289 * C139598) *
              C2566 +
          (((C79066 + C79065) * C1875 + (C79274 + C79273) * C139571 -
            (C80675 + C80674) * C1876 - (C80897 + C80896) * C139384) *
               C139289 * C47031 +
           ((C79747 + C79748) * C1875 + (C79893 + C79894) * C139571 -
            (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
             C30408 * C18619) *
                C1876 -
            (C30813 * C68134 + C139600 * C68616 + C30812 * C18203 +
             C30408 * C18855) *
                C139384) *
               C139289 * C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C139289 * C47031 +
           ((C77193 + C77194) * C1875 + (C77403 + C77404) * C139571 -
            (C30813 * C5471 + C139600 * C5951 + C30812 * C3891 +
             C30408 * C4407) *
                C1876 -
            (C30813 * C5637 + C139600 * C6106 + C30812 * C4075 +
             C30408 * C4573) *
                C139384) *
               C139289 * C139598) *
              C139346 * C821 +
          (((C32764 + C32765) * C1876 -
            ((C31014 + C31013) * C139571 + (C30839 + C30840) * C1875) +
            (C32989 + C32988) * C139384) *
               C139289 * C47031 +
           ((C40759 + C40758) * C1876 -
            ((C31949 + C31950) * C139571 + (C31726 + C31725) * C1875) +
            (C41032 + C41033) * C139384) *
               C139289 * C139598) *
              C139346 * C822 +
          (((C30843 + C30844) * C1875 + (C31016 + C31015) * C139571 -
            (C32768 + C32769) * C1876 - (C32991 + C32990) * C139384) *
               C139289 * C47031 +
           ((C31730 + C31729) * C1875 + (C31951 + C31952) * C139571 -
            (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
             C30408 * C4409) *
                C1876 -
            (C30813 * C5635 + C139600 * C6108 + C30812 * C4077 +
             C30408 * C4575) *
                C139384) *
               C139289 * C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C6281 +
           (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
               C6159 -
           (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
            C30408 * C2264) *
               C6282 -
           (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
            C30408 * C2460) *
               C6160 +
           (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
            C139600 * C6505) *
               C6283 +
           (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
            C139600 * C6612) *
               C6161 -
           (C30813 * C37434 + C139600 * C37896 + C30812 * C6165 +
            C30408 * C6505) *
               C6284 -
           (C30813 * C37596 + C139600 * C38033 + C30812 * C6287 +
            C30408 * C6612) *
               C6162) *
              C139289 * C47031 +
          ((C77193 + C77194) * C6281 + (C77403 + C77404) * C6159 -
           (C80672 + C80673) * C6282 - (C80894 + C80895) * C6160 +
           (C82618 + C82619) * C6283 + (C82828 + C82829) * C6161 -
           (C30813 * C82895 + C139600 * C83345 + C30812 * C20831 +
            C30408 * C21251) *
               C6284 -
           (C30813 * C83048 + C139600 * C83480 + C30812 * C20975 +
            C30408 * C21388) *
               C6162) *
              C139289 * C139598) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C6694 +
             (C63381 * C116 + C139289 * C125) * C139601 -
             (C63381 * C108 + C139289 * C114) * C6695 -
             (C63381 * C117 + C139289 * C126) * C139590 +
             (C63381 * C109 + C139289 * C115) * C6696 +
             (C63381 * C118 + C139289 * C127) * C6691) *
                C47031 +
            (C69167 + C69168 - C69169 - C69170 + C69171 + C69172) * C139598) *
               C30408 +
           ((C86554 + C86555 - C86556 - C86557 + C86558 + C86559) * C47031 +
            (C83580 + C83581 - C83582 - C83583 + C83584 + C83585) * C139598) *
               C139600) *
              C9074 +
          (((C86556 - (C86555 + C86554) + C86557 - C86558 - C86559) * C47031 +
            (C83582 - (C83581 + C83580) + C83583 - C83584 - C83585) * C139598) *
               C30408 +
           ((C81014 * C6695 - (C81015 * C139601 + C81016 * C6694) +
             C81017 * C139590 - (C63381 * C4658 + C139289 * C4662) * C6696 -
             (C63381 * C4665 + C139289 * C4670) * C6691) *
                C47031 +
            (C81018 * C6695 - (C67972 * C139601 + C67971 * C6694) +
             C81019 * C139590 - (C63381 * C5469 + C139289 * C5475) * C6696 -
             (C63381 * C5472 + C139289 * C5478) * C6691) *
                C139598) *
               C139600) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C47031 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C30408 +
            ((C77625 + C77643) * C47031 + (C77628 + C77629) * C139598) *
                C139600) *
               C139601 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C47031) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C47031) *
                C30408) *
               C139590 +
           ((((C63381 * C109 + C139289 * C115) * C181 +
              (C63381 * C184 + C139289 * C190) * C139346) *
                 C47031 +
             (C63888 * C181 + C63998 * C139346) * C139598) *
                C30408 +
            ((C77635 + C77645) * C47031 + (C77638 + C77639) * C139598) *
                C139600) *
               C6691) *
              C9074 +
          ((((C77634 + C77644) * C47031 + (C77631 + C77630) * C139598) *
                C30408 +
            ((C81124 + C81138) * C47031 + (C81127 + C81139) * C139598) *
                C139600) *
               C139590 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C47031) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C47031) *
                C30408) *
               C139601 -
           ((((C63381 * C5555 + C139289 * C5558) * C139346 +
              (C63381 * C5469 + C139289 * C5475) * C181) *
                 C139598 +
             ((C63381 * C4748 + C139289 * C4752) * C139346 +
              (C63381 * C4658 + C139289 * C4662) * C181) *
                 C47031) *
                C139600 +
            ((C77639 + C77638) * C139598 + (C77645 + C77635) * C47031) *
                C30408) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[84] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63381 * C107 + C139289 * C113) * C9224 +
                       (C63381 * C245 + C139289 * C251) * C9074 -
                       C77515 * C9225 - C77750 * C139384) *
                          C47031 +
                      (C72352 + C72353 - C72354 - C72355) * C139598) *
                         C30408 +
                     ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                       C81245 * C139384) *
                          C47031 +
                      (C66548 * C9224 + C66734 * C9074 - C67971 * C9225 -
                       C68151 * C139384) *
                          C139598) *
                         C139600) *
                        C139346 * C139601 +
                    (((C77517 * C9225 -
                       ((C63381 * C246 + C139289 * C252) * C9074 +
                        (C63381 * C108 + C139289 * C114) * C9224) +
                       C77751 * C139384) *
                          C47031 +
                      (C72360 - (C72361 + C72362) + C72363) * C139598) *
                         C30408 +
                     ((C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                       C81246 * C139384) *
                          C47031 +
                      (C81018 * C9225 - (C70796 * C9074 + C70576 * C9224) +
                       C81247 * C139384) *
                          C139598) *
                         C139600) *
                        C139346 * C139590 +
                    ((((C63381 * C109 + C139289 * C115) * C9224 +
                       (C63381 * C247 + C139289 * C253) * C9074 -
                       C77519 * C9225 - C77752 * C139384) *
                          C47031 +
                      (C63888 * C9224 + C64096 * C9074 - C76581 * C9225 -
                       C76791 * C139384) *
                          C139598) *
                         C30408 +
                     ((C77519 * C9224 + C77752 * C9074 -
                       (C63381 * C4658 + C139289 * C4662) * C9225 -
                       (C63381 * C4833 + C139289 * C4837) * C139384) *
                          C47031 +
                      (C76581 * C9224 + C76791 * C9074 -
                       (C63381 * C5469 + C139289 * C5475) * C9225 -
                       (C63381 * C5635 + C139289 * C5638) * C139384) *
                          C139598) *
                         C139600) *
                        C139346 * C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C6694 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139601 -
            (C47260 + C47261) * C6695 - (C47262 + C47263) * C139590 +
            (C47264 + C47265) * C6696 + (C47266 + C47267) * C6691) *
               C30408 +
           ((C77859 + C77860) * C6694 + (C77861 + C77862) * C139601 -
            (C49049 + C49048) * C6695 - (C49051 + C49050) * C139590 +
            (C49053 + C49052) * C6696 + (C49055 + C49054) * C6691) *
               C139600) *
              C139289 * C9074 +
          (((C49048 + C49049) * C6695 -
            ((C77862 + C77861) * C139601 + (C77860 + C77859) * C6694) +
            (C49050 + C49051) * C139590 - (C49052 + C49053) * C6696 -
            (C49054 + C49055) * C6691) *
               C30408 +
           ((C52473 + C52472) * C6695 -
            ((C81354 + C81355) * C139601 + (C81356 + C81357) * C6694) +
            (C52475 + C52474) * C139590 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C6696 -
            (C47234 * C5472 + C139598 * C5718 + C47233 * C4665 +
             C47031 * C4919) *
                C6691) *
               C139600) *
              C139289 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C30408 +
            ((C77859 + C77860) * C181 + (C77965 + C77966) * C139346) *
                C139600) *
               C139289 * C139601 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
               C139289 * C139590 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C30408 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) *
                C139600) *
               C139289 * C6691) *
              C9074 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C30408 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) *
                C139600) *
               C139289 * C139590 -
           (((C81460 + C81461) * C139346 + (C81356 + C81357) * C181) * C139600 +
            ((C77966 + C77965) * C139346 + (C77860 + C77859) * C181) * C30408) *
               C139289 * C139601 -
           (((C47234 * C5555 + C139598 * C5797 + C47233 * C4748 +
              C47031 * C5009) *
                 C139346 +
             (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
              C47031 * C4915) *
                 C181) *
                C139600 +
            ((C49165 + C49164) * C139346 + (C49052 + C49053) * C181) * C30408) *
               C139289 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C9224 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C9074 -
            (C77860 + C77859) * C9225 - (C78069 + C78070) * C139384) *
               C30408 +
           ((C77859 + C77860) * C9224 + (C78070 + C78069) * C9074 -
            (C81356 + C81357) * C9225 - (C81565 + C81564) * C139384) *
               C139600) *
              C139289 * C139346 * C139601 +
          (((C49048 + C49049) * C9225 -
            ((C47435 + C47434) * C9074 + (C47260 + C47261) * C9224) +
            (C49273 + C49272) * C139384) *
               C30408 +
           ((C52473 + C52472) * C9225 -
            ((C49272 + C49273) * C9074 + (C49049 + C49048) * C9224) +
            (C52682 + C52683) * C139384) *
               C139600) *
              C139289 * C139346 * C139590 +
          (((C47264 + C47265) * C9224 + (C47437 + C47436) * C9074 -
            (C49052 + C49053) * C9225 - (C49275 + C49274) * C139384) *
               C30408 +
           ((C49053 + C49052) * C9224 + (C49274 + C49275) * C9074 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C9225 -
            (C47234 * C5635 + C139598 * C5874 + C47233 * C4833 +
             C47031 * C5097) *
                C139384) *
               C139600) *
              C139289 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C6694 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139601 -
            (C30839 + C30840) * C6695 - (C30841 + C30842) * C139590 +
            (C30843 + C30844) * C6696 + (C30845 + C30846) * C6691) *
               C139289 * C47031 +
           ((C77193 + C77194) * C6694 + (C77195 + C77196) * C139601 -
            (C31726 + C31725) * C6695 - (C31728 + C31727) * C139590 +
            (C31730 + C31729) * C6696 + (C31732 + C31731) * C6691) *
               C139289 * C139598) *
              C9074 +
          (((C32764 + C32765) * C6695 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139601 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C6694) +
            (C32766 + C32767) * C139590 - (C32768 + C32769) * C6696 -
            (C32770 + C32771) * C6691) *
               C139289 * C47031 +
           ((C40759 + C40758) * C6695 -
            ((C80670 + C80671) * C139601 + (C80672 + C80673) * C6694) +
            (C40761 + C40760) * C139590 -
            (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
             C30408 * C4409) *
                C6696 -
            (C30813 * C5472 + C139600 * C5952 + C30812 * C3902 +
             C30408 * C4415) *
                C6691) *
               C139289 * C139598) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[84] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
                        C139600 * C2264) *
                           C181 +
                       (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
                        C139600 * C2368) *
                           C139346) *
                          C139289 * C47031 +
                      ((C77193 + C77194) * C181 + (C77300 + C77299) * C139346) *
                          C139289 * C139598) *
                         C139601 -
                     (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) *
                          C139289 * C139598 +
                      ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) *
                          C139289 * C47031) *
                         C139590 +
                     (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) *
                          C139289 * C47031 +
                      ((C31730 + C31729) * C181 + (C31841 + C31842) * C139346) *
                          C139289 * C139598) *
                         C6691) *
                        C9074 +
                    ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) *
                          C139289 * C47031 +
                      ((C40759 + C40758) * C181 + (C40896 + C40897) * C139346) *
                          C139289 * C139598) *
                         C139590 -
                     (((C80785 + C80784) * C139346 + (C80672 + C80673) * C181) *
                          C139289 * C139598 +
                      ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
                        C30408 * C2368) *
                           C139346 +
                       (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
                        C30408 * C2264) *
                           C181) *
                          C139289 * C47031) *
                         C139601 -
                     (((C30813 * C5555 + C139600 * C6031 + C30812 * C3991 +
                        C30408 * C4497) *
                           C139346 +
                       (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
                        C30408 * C4409) *
                           C181) *
                          C139289 * C139598 +
                      ((C32881 + C32880) * C139346 + (C32768 + C32769) * C181) *
                          C139289 * C47031) *
                         C6691) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[84] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C9224 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C9074 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C9225 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C139289 * C47031 +
           ((C77193 + C77194) * C9224 + (C77403 + C77404) * C9074 -
            (C80672 + C80673) * C9225 - (C80894 + C80895) * C139384) *
               C139289 * C139598) *
              C139346 * C139601 +
          (((C32764 + C32765) * C9225 -
            ((C31014 + C31013) * C9074 + (C30839 + C30840) * C9224) +
            (C32989 + C32988) * C139384) *
               C139289 * C47031 +
           ((C40759 + C40758) * C9225 -
            ((C31949 + C31950) * C9074 + (C31726 + C31725) * C9224) +
            (C41032 + C41033) * C139384) *
               C139289 * C139598) *
              C139346 * C139590 +
          (((C30843 + C30844) * C9224 + (C31016 + C31015) * C9074 -
            (C32768 + C32769) * C9225 - (C32991 + C32990) * C139384) *
               C139289 * C47031 +
           ((C31730 + C31729) * C9224 + (C31951 + C31952) * C9074 -
            (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
             C30408 * C4409) *
                C9225 -
            (C30813 * C5635 + C139600 * C6108 + C30812 * C4077 +
             C30408 * C4575) *
                C139384) *
               C139289 * C139598) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C7401 +
              (C63381 * C116 + C139289 * C125) * C7396 -
              (C63381 * C108 + C139289 * C114) * C7402 -
              (C63381 * C117 + C139289 * C126) * C139308) *
                 C47031 +
             (C69851 + C69852 - C69853 - C69854) * C139598) *
                C30408 +
            ((C85382 + C85383 - C85384 - C85385) * C47031 + C85394 * C139598) *
                C139600) *
               C9074 +
           (((C85384 - (C85383 + C85382) + C85385) * C47031 +
             C85395 * C139598) *
                C30408 +
            ((C81014 * C7402 - (C81015 * C7396 + C81016 * C7401) +
              C81017 * C139308) *
                 C47031 +
             (C85388 - (C85389 + C85390) + C85391) * C139598) *
                C139600) *
               C139384) *
              C139570 +
          ((((C69853 - (C69852 + C69851) + C69854) * C47031 +
             (C69857 - (C69856 + C69855) + C69858) * C139598) *
                C30408 +
            (C85395 * C47031 +
             (C70582 - (C70572 + C70573) + C70583) * C139598) *
                C139600) *
               C9074 +
           ((C85394 * C47031 + (C70573 + C70572 - C70582 - C70583) * C139598) *
                C30408 +
            ((C85390 + C85389 - C85388 - C85391) * C47031 +
             (C67973 * C7401 + C67974 * C7396 -
              (C63381 * C19902 + C139289 * C19906) * C7402 -
              (C63381 * C19904 + C139289 * C19908) * C139308) *
                 C139598) *
                C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139289 * C113) * C923 +
                        (C63381 * C182 + C139289 * C188) * C139570 -
                        C63884 * C924 - C63994 * C139360) *
                           C47031 +
                       (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
                        C63995 * C139360) *
                           C139598) *
                          C30408 +
                      ((C82068 + C82069 - C82070 - C82071) * C47031 +
                       (C82072 + C82073 - C82074 - C82075) * C139598) *
                          C139600) *
                         C7396 +
                     (((C63886 * C924 -
                        ((C63381 * C183 + C139289 * C189) * C139570 +
                         (C63381 * C108 + C139289 * C114) * C923) +
                        C63996 * C139360) *
                           C47031 +
                       (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
                        C63997 * C139360) *
                           C139598) *
                          C30408 +
                      ((C87604 - (C87605 + C87606) + C87607) * C47031 +
                       (C87608 - (C87609 + C87610) + C87611) * C139598) *
                          C139600) *
                         C139308) *
                        C9074 +
                    ((((C82070 - (C82069 + C82068) + C82071) * C47031 +
                       (C82074 - (C82073 + C82072) + C82075) * C139598) *
                          C30408 +
                      ((C82076 - (C82077 + C82078) + C82079) * C47031 +
                       (C82080 - (C82081 + C82082) + C82083) * C139598) *
                          C139600) *
                         C7396 +
                     (((C87606 + C87605 - C87604 - C87607) * C47031 +
                       (C87610 + C87609 - C87608 - C87611) * C139598) *
                          C30408 +
                      ((C81014 * C923 + C81135 * C139570 - C81018 * C924 -
                        C81136 * C139360) *
                           C47031 +
                       (C81018 * C923 + C81136 * C139570 -
                        (C63381 * C19902 + C139289 * C19906) * C924 -
                        (C63381 * C20020 + C139289 * C20022) * C139360) *
                           C139598) *
                          C139600) *
                         C139308) *
                        C139384)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63381 * C107 + C139289 * C113) * C9224 +
                        (C63381 * C245 + C139289 * C251) * C9074 -
                        C77515 * C9225 - C77750 * C139384) *
                           C47031 +
                       (C72352 + C72353 - C72354 - C72355) * C139598) *
                          C30408 +
                      ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                        C81245 * C139384) *
                           C47031 +
                       (C87742 + C87743 - C87744 - C87745) * C139598) *
                          C139600) *
                         C139570 +
                     (((C72354 - (C72353 + C72352) + C72355) * C47031 +
                       (C72358 - (C72357 + C72356) + C72359) * C139598) *
                          C30408 +
                      ((C87744 - (C87743 + C87742) + C87745) * C47031 +
                       (C67973 * C9225 - (C66736 * C9074 + C66546 * C9224) +
                        C68152 * C139384) *
                           C139598) *
                          C139600) *
                         C139360) *
                        C7396 +
                    ((((C77517 * C9225 -
                        ((C63381 * C246 + C139289 * C252) * C9074 +
                         (C63381 * C108 + C139289 * C114) * C9224) +
                        C77751 * C139384) *
                           C47031 +
                       (C72360 - (C72361 + C72362) + C72363) * C139598) *
                          C30408 +
                      ((C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                        C81246 * C139384) *
                           C47031 +
                       (C87746 - (C87747 + C87748) + C87749) * C139598) *
                          C139600) *
                         C139570 +
                     (((C72362 + C72361 - C72360 - C72363) * C47031 +
                       (C72366 + C72365 - C72364 - C72367) * C139598) *
                          C30408 +
                      ((C87748 + C87747 - C87746 - C87749) * C47031 +
                       (C70578 * C9224 + C70797 * C9074 -
                        (C63381 * C19902 + C139289 * C19906) * C9225 -
                        (C63381 * C20128 + C139289 * C20130) * C139384) *
                           C139598) *
                          C139600) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C7401 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C7396 -
             (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
                C30408 +
            ((C77859 + C77860) * C7401 + (C77861 + C77862) * C7396 -
             (C49049 + C49048) * C7402 - (C49051 + C49050) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C49048 + C49049) * C7402 -
             ((C77862 + C77861) * C7396 + (C77860 + C77859) * C7401) +
             (C49050 + C49051) * C139308) *
                C30408 +
            ((C52473 + C52472) * C7402 -
             ((C81354 + C81355) * C7396 + (C81356 + C81357) * C7401) +
             (C52475 + C52474) * C139308) *
                C139600) *
               C139289 * C139384) *
              C139570 +
          ((((C48118 + C48119) * C7402 -
             ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
               C47031 * C1098) *
                  C7396 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C7401) +
             (C48120 + C48121) * C139308) *
                C30408 +
            ((C56795 + C56794) * C7402 -
             ((C80331 + C80330) * C7396 + (C80329 + C80328) * C7401) +
             (C56797 + C56796) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C80328 + C80329) * C7401 + (C80330 + C80331) * C7396 -
             (C56794 + C56795) * C7402 - (C56796 + C56797) * C139308) *
                C30408 +
            ((C82300 + C82301) * C7401 + (C82302 + C82303) * C7396 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C7402 -
             (C47234 * C19904 + C139598 * C20238 + C47233 * C5473 +
              C47031 * C5719) *
                 C139308) *
                C139600) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C923 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139570 -
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C924 -
             (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
              C47031 * C1195) *
                 C139360) *
                C30408 +
            ((C77859 + C77860) * C923 + (C77965 + C77966) * C139570 -
             (C80329 + C80328) * C924 - (C80442 + C80443) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C48118 + C48119) * C924 -
             ((C47351 + C47350) * C139570 + (C47260 + C47261) * C923) +
             (C48233 + C48232) * C139360) *
                C30408 +
            ((C56795 + C56794) * C924 -
             ((C49163 + C49162) * C139570 + (C49049 + C49048) * C923) +
             (C56932 + C56933) * C139360) *
                C139600) *
               C139289 * C139308) *
              C9074 +
          ((((C80328 + C80329) * C924 -
             ((C77966 + C77965) * C139570 + (C77860 + C77859) * C923) +
             (C80443 + C80442) * C139360) *
                C30408 +
            ((C82300 + C82301) * C924 -
             ((C81460 + C81461) * C139570 + (C81356 + C81357) * C923) +
             (C82406 + C82407) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C49048 + C49049) * C923 + (C49162 + C49163) * C139570 -
             (C56794 + C56795) * C924 - (C56933 + C56932) * C139360) *
                C30408 +
            ((C52473 + C52472) * C923 + (C52578 + C52579) * C139570 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C924 -
             (C47234 * C20020 + C139598 * C20339 + C47233 * C5556 +
              C47031 * C5796) *
                 C139360) *
                C139600) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C9224 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C77860 + C77859) * C9225 - (C78069 + C78070) * C139384) *
                C30408 +
            ((C77859 + C77860) * C9224 + (C78070 + C78069) * C9074 -
             (C81356 + C81357) * C9225 - (C81565 + C81564) * C139384) *
                C139600) *
               C139289 * C139570 +
           (((C80328 + C80329) * C9225 -
             ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
               C47031 * C1301) *
                  C9074 +
              (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
               C47031 * C1094) *
                  C9224) +
             (C80552 + C80553) * C139384) *
                C30408 +
            ((C82300 + C82301) * C9225 -
             ((C80553 + C80552) * C9074 + (C80329 + C80328) * C9224) +
             (C82511 + C82510) * C139384) *
                C139600) *
               C139289 * C139360) *
              C7396 +
          ((((C49048 + C49049) * C9225 -
             ((C47435 + C47434) * C9074 + (C47260 + C47261) * C9224) +
             (C49273 + C49272) * C139384) *
                C30408 +
            ((C52473 + C52472) * C9225 -
             ((C49272 + C49273) * C9074 + (C49049 + C49048) * C9224) +
             (C52682 + C52683) * C139384) *
                C139600) *
               C139289 * C139570 +
           (((C48118 + C48119) * C9224 + (C48343 + C48342) * C9074 -
             (C56794 + C56795) * C9225 - (C57069 + C57068) * C139384) *
                C30408 +
            ((C56795 + C56794) * C9224 + (C57068 + C57069) * C9074 -
             (C47234 * C19902 + C139598 * C20236 + C47233 * C5470 +
              C47031 * C5716) *
                 C9225 -
             (C47234 * C20128 + C139598 * C20439 + C47233 * C5636 +
              C47031 * C5873) *
                 C139384) *
                C139600) *
               C139289 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
                C139289 * C47031 +
            ((C77193 + C77194) * C7401 + (C77195 + C77196) * C7396 -
             (C31726 + C31725) * C7402 - (C31728 + C31727) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C32764 + C32765) * C7402 -
             ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
               C30408 * C2268) *
                  C7396 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C7401) +
             (C32766 + C32767) * C139308) *
                C139289 * C47031 +
            ((C40759 + C40758) * C7402 -
             ((C80670 + C80671) * C7396 + (C80672 + C80673) * C7401) +
             (C40761 + C40760) * C139308) *
                C139289 * C139598) *
               C139384) *
              C139570 +
          ((((C31725 + C31726) * C7402 -
             ((C77196 + C77195) * C7396 + (C77194 + C77193) * C7401) +
             (C31727 + C31728) * C139308) *
                C139289 * C47031 +
            ((C33707 + C33706) * C7402 -
             ((C79063 + C79064) * C7396 + (C79065 + C79066) * C7401) +
             (C33709 + C33708) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C80673 + C80672) * C7401 + (C80671 + C80670) * C7396 -
             (C40758 + C40759) * C7402 - (C40760 + C40761) * C139308) *
                C139289 * C47031 +
            ((C80674 + C80675) * C7401 + (C80676 + C80677) * C7396 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C7402 -
             (C30813 * C19904 + C139600 * C20540 + C30812 * C3904 +
              C30408 * C4417) *
                 C139308) *
                C139289 * C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C923 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139570 -
             (C77194 + C77193) * C924 - (C77299 + C77300) * C139360) *
                C139289 * C47031 +
            ((C77193 + C77194) * C923 + (C77300 + C77299) * C139570 -
             (C79065 + C79066) * C924 - (C79170 + C79169) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C31725 + C31726) * C924 -
             ((C30930 + C30929) * C139570 + (C30839 + C30840) * C923) +
             (C31840 + C31839) * C139360) *
                C139289 * C47031 +
            ((C33707 + C33706) * C924 -
             ((C31839 + C31840) * C139570 + (C31726 + C31725) * C923) +
             (C33812 + C33813) * C139360) *
                C139289 * C139598) *
               C139308) *
              C9074 +
          ((((C80673 + C80672) * C924 -
             ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
               C30408 * C2368) *
                  C139570 +
              (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
               C30408 * C2264) *
                  C923) +
             (C80784 + C80785) * C139360) *
                C139289 * C47031 +
            ((C80674 + C80675) * C924 -
             ((C80785 + C80784) * C139570 + (C80672 + C80673) * C923) +
             (C80787 + C80786) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C32764 + C32765) * C923 + (C32878 + C32879) * C139570 -
             (C40758 + C40759) * C924 - (C40897 + C40896) * C139360) *
                C139289 * C47031 +
            ((C40759 + C40758) * C923 + (C40896 + C40897) * C139570 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C924 -
             (C30813 * C20020 + C139600 * C20651 + C30812 * C3993 +
              C30408 * C4496) *
                 C139360) *
                C139289 * C139598) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C9225 -
             (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
              C30408 * C2460) *
                 C139384) *
                C139289 * C47031 +
            ((C77193 + C77194) * C9224 + (C77403 + C77404) * C9074 -
             (C80672 + C80673) * C9225 - (C80894 + C80895) * C139384) *
                C139289 * C139598) *
               C139570 +
           (((C80673 + C80672) * C9225 -
             ((C77404 + C77403) * C9074 + (C77194 + C77193) * C9224) +
             (C80895 + C80894) * C139384) *
                C139289 * C47031 +
            ((C80674 + C80675) * C9225 -
             ((C79273 + C79274) * C9074 + (C79065 + C79066) * C9224) +
             (C80896 + C80897) * C139384) *
                C139289 * C139598) *
               C139360) *
              C7396 +
          ((((C32764 + C32765) * C9225 -
             ((C31014 + C31013) * C9074 + (C30839 + C30840) * C9224) +
             (C32989 + C32988) * C139384) *
                C139289 * C47031 +
            ((C40759 + C40758) * C9225 -
             ((C31949 + C31950) * C9074 + (C31726 + C31725) * C9224) +
             (C41032 + C41033) * C139384) *
                C139289 * C139598) *
               C139570 +
           (((C31725 + C31726) * C9224 + (C31950 + C31949) * C9074 -
             (C40758 + C40759) * C9225 - (C41033 + C41032) * C139384) *
                C139289 * C47031 +
            ((C33707 + C33706) * C9224 + (C33916 + C33917) * C9074 -
             (C30813 * C19902 + C139600 * C20538 + C30812 * C3895 +
              C30408 * C4411) *
                 C9225 -
             (C30813 * C20128 + C139600 * C20754 + C30812 * C4079 +
              C30408 * C4577) *
                 C139384) *
                C139289 * C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C47031 +
            (C69851 + C69852 - C69853 - C69854) * C139598) *
               C30408 +
           ((C85382 + C85383 - C85384 - C85385) * C47031 + C85394 * C139598) *
               C139600) *
              C139603 +
          (((C85384 - (C85383 + C85382) + C85385) * C47031 + C85395 * C139598) *
               C30408 +
           ((C88628 - (C88629 + C88630) + C88631) * C47031 +
            (C85388 - (C85389 + C85390) + C85391) * C139598) *
               C139600) *
              C139596 +
          (((C88630 + C88629 - C88628 - C88631) * C47031 +
            (C85390 + C85389 - C85388 - C85391) * C139598) *
               C30408 +
           ((C82904 * C7401 + C82905 * C7396 -
             (C63381 * C6164 + C139289 * C6170) * C7402 -
             (C63381 * C6167 + C139289 * C6173) * C139308) *
                C47031 +
            (C81966 * C7401 + C81967 * C7396 -
             (C63381 * C20830 + C139289 * C20834) * C7402 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139598) *
               C139600) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C47031 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C30408 +
            ((C77625 + C77643) * C47031 + (C77628 + C77629) * C139598) *
                C139600) *
               C7396 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C47031) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C47031) *
                C30408) *
               C139308) *
              C139603 +
          ((((C77634 + C77644) * C47031 + (C77631 + C77630) * C139598) *
                C30408 +
            ((C81124 + C81138) * C47031 + (C81127 + C81139) * C139598) *
                C139600) *
               C139308 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C47031) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C47031) *
                C30408) *
               C7396) *
              C139596 +
          ((((C81134 + C81140) * C47031 + (C81131 + C81130) * C139598) *
                C30408 +
            ((C82976 + C82982) * C47031 + (C82979 + C82980) * C139598) *
                C139600) *
               C7396 -
           ((((C63381 * C20904 + C139289 * C20906) * C139346 +
              (C63381 * C20830 + C139289 * C20834) * C181) *
                 C139598 +
             ((C63381 * C6226 + C139289 * C6229) * C139346 +
              (C63381 * C6164 + C139289 * C6170) * C181) *
                 C47031) *
                C139600 +
            ((C81139 + C81127) * C139598 + (C81138 + C81124) * C47031) *
                C30408) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C10840 +
             (C63381 * C245 + C139289 * C251) * C139603 - C77515 * C10841 -
             C77750 * C139596 + C81016 * C10842 + C81245 * C10691) *
                C47031 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139598) *
               C30408 +
           ((C77515 * C10840 + C77750 * C139603 - C81016 * C10841 -
             C81245 * C139596 + C82904 * C10842 + C83053 * C10691) *
                C47031 +
            (C66548 * C10840 + C66734 * C139603 - C67971 * C10841 -
             C68151 * C139596 + C81966 * C10842 + C82192 * C10691) *
                C139598) *
               C139600) *
              C139346 * C7396 +
          (((C77517 * C10841 -
             ((C63381 * C246 + C139289 * C252) * C139603 +
              (C63381 * C108 + C139289 * C114) * C10840) +
             C77751 * C139596 - C81014 * C10842 - C81246 * C10691) *
                C47031 +
            (C70576 * C10841 - (C64094 * C139603 + C63886 * C10840) +
             C70796 * C139596 - C81018 * C10842 - C81247 * C10691) *
                C139598) *
               C30408 +
           ((C81014 * C10841 - (C77751 * C139603 + C77517 * C10840) +
             C81246 * C139596 - (C63381 * C6164 + C139289 * C6170) * C10842 -
             (C63381 * C6286 + C139289 * C6289) * C10691) *
                C47031 +
            (C81018 * C10841 - (C70796 * C139603 + C70576 * C10840) +
             C81247 * C139596 - (C63381 * C20830 + C139289 * C20834) * C10842 -
             (C63381 * C20974 + C139289 * C20976) * C10691) *
                C139598) *
               C139600) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C7401 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C7396 -
            (C47260 + C47261) * C7402 - (C47262 + C47263) * C139308) *
               C30408 +
           ((C77859 + C77860) * C7401 + (C77861 + C77862) * C7396 -
            (C49049 + C49048) * C7402 - (C49051 + C49050) * C139308) *
               C139600) *
              C139289 * C139603 +
          (((C49048 + C49049) * C7402 -
            ((C77862 + C77861) * C7396 + (C77860 + C77859) * C7401) +
            (C49050 + C49051) * C139308) *
               C30408 +
           ((C52473 + C52472) * C7402 -
            ((C81354 + C81355) * C7396 + (C81356 + C81357) * C7401) +
            (C52475 + C52474) * C139308) *
               C139600) *
              C139289 * C139596 +
          (((C81357 + C81356) * C7401 + (C81355 + C81354) * C7396 -
            (C52472 + C52473) * C7402 - (C52474 + C52475) * C139308) *
               C30408 +
           ((C83130 + C83131) * C7401 + (C83132 + C83133) * C7396 -
            (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
             C47031 * C6342) *
                C7402 -
            (C47234 * C20832 + C139598 * C21046 + C47233 * C6167 +
             C47031 * C6345) *
                C139308) *
               C139600) *
              C139289 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C30408 +
            ((C77859 + C77860) * C181 + (C77965 + C77966) * C139346) *
                C139600) *
               C139289 * C7396 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
               C139289 * C139308) *
              C139603 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C30408 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) *
                C139600) *
               C139289 * C139308 -
           (((C81460 + C81461) * C139346 + (C81356 + C81357) * C181) * C139600 +
            ((C77966 + C77965) * C139346 + (C77860 + C77859) * C181) * C30408) *
               C139289 * C7396) *
              C139596 +
          ((((C81357 + C81356) * C181 + (C81461 + C81460) * C139346) * C30408 +
            ((C83130 + C83131) * C181 + (C83205 + C83206) * C139346) *
                C139600) *
               C139289 * C7396 -
           (((C47234 * C20904 + C139598 * C21114 + C47233 * C6226 +
              C47031 * C6398) *
                 C139346 +
             (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
              C47031 * C6342) *
                 C181) *
                C139600 +
            ((C52579 + C52578) * C139346 + (C52472 + C52473) * C181) * C30408) *
               C139289 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C10840 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139603 -
            (C77860 + C77859) * C10841 - (C78069 + C78070) * C139596 +
            (C81357 + C81356) * C10842 + (C81564 + C81565) * C10691) *
               C30408 +
           ((C77859 + C77860) * C10840 + (C78070 + C78069) * C139603 -
            (C81356 + C81357) * C10841 - (C81565 + C81564) * C139596 +
            (C83130 + C83131) * C10842 + (C83279 + C83278) * C10691) *
               C139600) *
              C139289 * C139346 * C7396 +
          (((C49048 + C49049) * C10841 -
            ((C47435 + C47434) * C139603 + (C47260 + C47261) * C10840) +
            (C49273 + C49272) * C139596 - (C52472 + C52473) * C10842 -
            (C52683 + C52682) * C10691) *
               C30408 +
           ((C52473 + C52472) * C10841 -
            ((C49272 + C49273) * C139603 + (C49049 + C49048) * C10840) +
            (C52682 + C52683) * C139596 -
            (C47234 * C20830 + C139598 * C21044 + C47233 * C6164 +
             C47031 * C6342) *
                C10842 -
            (C47234 * C20974 + C139598 * C21183 + C47233 * C6286 +
             C47031 * C6451) *
                C10691) *
               C139600) *
              C139289 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C7401 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C7396 -
            (C30839 + C30840) * C7402 - (C30841 + C30842) * C139308) *
               C139289 * C47031 +
           ((C77193 + C77194) * C7401 + (C77195 + C77196) * C7396 -
            (C31726 + C31725) * C7402 - (C31728 + C31727) * C139308) *
               C139289 * C139598) *
              C139603 +
          (((C32764 + C32765) * C7402 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C7396 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C7401) +
            (C32766 + C32767) * C139308) *
               C139289 * C47031 +
           ((C40759 + C40758) * C7402 -
            ((C80670 + C80671) * C7396 + (C80672 + C80673) * C7401) +
            (C40761 + C40760) * C139308) *
               C139289 * C139598) *
              C139596 +
          (((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C7401 +
            (C30812 * C4663 + C30408 * C5195 + C30813 * C6168 +
             C139600 * C6508) *
                C7396 -
            (C36230 + C36231) * C7402 - (C36232 + C36233) * C139308) *
               C139289 * C47031 +
           ((C82618 + C82619) * C7401 + (C82620 + C82621) * C7396 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C7402 -
            (C30813 * C20832 + C139600 * C21252 + C30812 * C5473 +
             C30408 * C5953) *
                C139308) *
               C139289 * C139598) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
                        C139600 * C2264) *
                           C181 +
                       (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
                        C139600 * C2368) *
                           C139346) *
                          C139289 * C47031 +
                      ((C77193 + C77194) * C181 + (C77300 + C77299) * C139346) *
                          C139289 * C139598) *
                         C7396 -
                     (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) *
                          C139289 * C139598 +
                      ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) *
                          C139289 * C47031) *
                         C139308) *
                        C139603 +
                    ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) *
                          C139289 * C47031 +
                      ((C40759 + C40758) * C181 + (C40896 + C40897) * C139346) *
                          C139289 * C139598) *
                         C139308 -
                     (((C80785 + C80784) * C139346 + (C80672 + C80673) * C181) *
                          C139289 * C139598 +
                      ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
                        C30408 * C2368) *
                           C139346 +
                       (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
                        C30408 * C2264) *
                           C181) *
                          C139289 * C47031) *
                         C7396) *
                        C139596 +
                    ((((C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
                        C139600 * C6505) *
                           C181 +
                       (C30812 * C4746 + C30408 * C5285 + C30813 * C6227 +
                        C139600 * C6561) *
                           C139346) *
                          C139289 * C47031 +
                      ((C82618 + C82619) * C181 + (C82725 + C82724) * C139346) *
                          C139289 * C139598) *
                         C7396 -
                     (((C30813 * C20904 + C139600 * C21320 + C30812 * C5556 +
                        C30408 * C6030) *
                           C139346 +
                       (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
                        C30408 * C5950) *
                           C181) *
                          C139289 * C139598 +
                      ((C36337 + C36336) * C139346 + (C36230 + C36231) * C181) *
                          C139289 * C47031) *
                         C139308) *
                        C10691)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C10840 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139603 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C10841 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139596 +
            (C30812 * C4656 + C30408 * C5191 + C30813 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C30812 * C4831 + C30408 * C5373 + C30813 * C6287 +
             C139600 * C6612) *
                C10691) *
               C139289 * C47031 +
           ((C77193 + C77194) * C10840 + (C77403 + C77404) * C139603 -
            (C80672 + C80673) * C10841 - (C80894 + C80895) * C139596 +
            (C82618 + C82619) * C10842 + (C82828 + C82829) * C10691) *
               C139289 * C139598) *
              C139346 * C7396 +
          (((C32764 + C32765) * C10841 -
            ((C31014 + C31013) * C139603 + (C30839 + C30840) * C10840) +
            (C32989 + C32988) * C139596 - (C36230 + C36231) * C10842 -
            (C36441 + C36440) * C10691) *
               C139289 * C47031 +
           ((C40759 + C40758) * C10841 -
            ((C31949 + C31950) * C139603 + (C31726 + C31725) * C10840) +
            (C41032 + C41033) * C139596 -
            (C30813 * C20830 + C139600 * C21250 + C30812 * C5470 +
             C30408 * C5950) *
                C10842 -
            (C30813 * C20974 + C139600 * C21389 + C30812 * C5636 +
             C30408 * C6107) *
                C10691) *
               C139289 * C139598) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C103 +
            (C63381 * C116 + C139289 * C125) * C92 -
            (C63381 * C108 + C139289 * C114) * C104 -
            (C63381 * C117 + C139289 * C126) * C93 +
            (C63381 * C109 + C139289 * C115) * C105 +
            (C63381 * C118 + C139289 * C127) * C94 -
            (C63381 * C110 + C139289 * C119) * C106 -
            (C63381 * C120 + C139289 * C128) * C95) *
               C47031 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C63888 * C105 + C63889 * C94 -
            (C63381 * C831 + C139289 * C836) * C106 -
            (C63381 * C841 + C139289 * C847) * C95) *
               C139598) *
              C30408 +
          (((C63381 * C1700 + C139289 * C1708) * C103 +
            (C63381 * C1707 + C139289 * C1714) * C92 -
            (C63381 * C1697 + C139289 * C1702) * C104 -
            (C63381 * C1706 + C139289 * C1713) * C93 +
            (C63381 * C1698 + C139289 * C1703) * C105 +
            (C63381 * C1705 + C139289 * C1712) * C94 -
            (C63381 * C1699 + C139289 * C1704) * C106 -
            (C63381 * C1709 + C139289 * C1715) * C95) *
               C47031 +
           (C66548 * C103 + C66547 * C92 - C70576 * C104 - C70577 * C93 +
            (C63381 * C3893 + C139289 * C3899) * C105 +
            (C63381 * C3902 + C139289 * C3911) * C94 -
            (C63381 * C8120 + C139289 * C8121) * C106 -
            (C63381 * C8122 + C139289 * C8123) * C95) *
               C139598) *
              C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C47031 +
            (C65294 + C65295 - C65296 - C65297) * C139598) *
               C30408 +
           ((C77515 * C137108 + C77516 * C139562 - C77517 * C137101 -
             C77518 * C139308) *
                C47031 +
            (C73722 + C73721 - C73720 - C73723) * C139598) *
               C139600) *
              C139372 * C2565 +
          (((C65296 - (C65295 + C65294) + C65297) * C47031 +
            (C65300 - (C65299 + C65298) + C65301) * C139598) *
               C30408 +
           ((C73720 - (C73721 + C73722) + C73723) * C47031 +
            (C73724 - (C73725 + C73726) + C73727) * C139598) *
               C139600) *
              C139372 * C2566 +
          ((C65320 * C47031 + (C65318 + C65317 - C65316 - C65319) * C139598) *
               C30408 +
           ((C73726 + C73725 - C73724 - C73727) * C47031 +
            (C66549 * C137108 + C66550 * C139562 -
             (C63381 * C17958 + C139289 * C17962) * C137101 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C139598) *
               C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C47031 +
            (C63884 * C181 + C63994 * C139346) * C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C181 +
             (C63381 * C1794 + C139289 * C1799) * C139346) *
                C47031 +
            (C66548 * C181 + C66640 * C139346) * C139598) *
               C139600) *
              C92 -
          (((C70686 * C139346 + C70576 * C181) * C139598 +
            ((C63381 * C1791 + C139289 * C1796) * C139346 +
             (C63381 * C1697 + C139289 * C1702) * C181) *
                C47031) *
               C139600 +
           ((C63996 * C139346 + C63886 * C181) * C139598 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C47031) *
               C30408) *
              C93 +
          ((((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C47031 +
            (C63888 * C181 + C63998 * C139346) * C139598) *
               C30408 +
           (((C63381 * C1698 + C139289 * C1703) * C181 +
             (C63381 * C1792 + C139289 * C1797) * C139346) *
                C47031 +
            ((C63381 * C3893 + C139289 * C3899) * C181 +
             (C63381 * C3991 + C139289 * C3997) * C139346) *
                C139598) *
               C139600) *
              C94 -
          ((((C63381 * C8222 + C139289 * C8223) * C139346 +
             (C63381 * C8120 + C139289 * C8121) * C181) *
                C139598 +
            ((C63381 * C1793 + C139289 * C1798) * C139346 +
             (C63381 * C1699 + C139289 * C1704) * C181) *
                C47031) *
               C139600 +
           (((C63381 * C928 + C139289 * C933) * C139346 +
             (C63381 * C831 + C139289 * C836) * C181) *
                C139598 +
            ((C63381 * C185 + C139289 * C191) * C139346 +
             (C63381 * C110 + C139289 * C119) * C181) *
                C47031) *
               C30408) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C47031 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C30408 +
           ((C77515 * C2660 + C77640 * C2565 - C66548 * C2661 - C66640 * C2566 +
             C66546 * C2662 + C66641 * C2567) *
                C47031 +
            (C66548 * C2660 + C66640 * C2565 - C66546 * C2661 - C66641 * C2566 +
             C66549 * C2662 + C66642 * C2567) *
                C139598) *
               C139600) *
              C139562 +
          (((C63886 * C2661 -
             ((C63381 * C183 + C139289 * C189) * C2565 +
              (C63381 * C108 + C139289 * C114) * C2660) +
             C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
                C47031 +
            (C63892 * C2661 - (C63996 * C2565 + C63886 * C2660) +
             C63997 * C2566 - C65311 * C2662 - C65400 * C2567) *
                C139598) *
               C30408 +
           ((C70576 * C2661 - (C77641 * C2565 + C77517 * C2660) +
             C70686 * C2566 - C70578 * C2662 - C70687 * C2567) *
                C47031 +
            (C70578 * C2661 - (C70686 * C2565 + C70576 * C2660) +
             C70687 * C2566 - (C63381 * C17958 + C139289 * C17962) * C2662 -
             (C63381 * C18088 + C139289 * C18090) * C2567) *
                C139598) *
               C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C47031 +
            (C64074 + C64098) * C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C244 +
             (C63381 * C1879 + C139289 * C1884) * C139372) *
                C47031 +
            (C66548 * C244 + C66734 * C139372) * C139598) *
               C139600) *
              C139346 * C92 -
          (((C70796 * C139372 + C70576 * C244) * C139598 +
            ((C63381 * C1878 + C139289 * C1883) * C139372 +
             (C63381 * C1697 + C139289 * C1702) * C244) *
                C47031) *
               C139600 +
           ((C64100 + C64080) * C139598 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C47031) *
               C30408) *
              C139346 * C93 +
          ((((C63381 * C109 + C139289 * C115) * C244 +
             (C63381 * C247 + C139289 * C253) * C139372) *
                C47031 +
            (C64086 + C64102) * C139598) *
               C30408 +
           (((C63381 * C1698 + C139289 * C1703) * C244 +
             (C63381 * C1877 + C139289 * C1882) * C139372) *
                C47031 +
            ((C63381 * C3893 + C139289 * C3899) * C244 +
             (C63381 * C4077 + C139289 * C4083) * C139372) *
                C139598) *
               C139600) *
              C139346 * C94 -
          ((((C63381 * C8322 + C139289 * C8323) * C139372 +
             (C63381 * C8120 + C139289 * C8121) * C244) *
                C139598 +
            ((C63381 * C1880 + C139289 * C1885) * C139372 +
             (C63381 * C1699 + C139289 * C1704) * C244) *
                C47031) *
               C139600 +
           (((C63381 * C1012 + C139289 * C1017) * C139372 +
             (C63381 * C831 + C139289 * C836) * C244) *
                C139598 +
            ((C63381 * C248 + C139289 * C254) * C139372 +
             (C63381 * C110 + C139289 * C119) * C244) *
                C47031) *
               C30408) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C47031 +
             (C64074 + C64098) * C139598) *
                C30408 +
            ((C77515 * C244 + C77750 * C139372) * C47031 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C2565 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C47031) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
                C30408) *
               C2566 +
           ((C65475 * C47031 + (C65478 + C65485) * C139598) * C30408 +
            ((C78660 + C78659) * C47031 +
             (C66549 * C244 + C66737 * C139372) * C139598) *
                C139600) *
               C2567) *
              C139562 +
          ((((C64080 + C64100) * C47031 + (C64083 + C64101) * C139598) *
                C30408 +
            ((C76786 + C76787) * C47031 + (C78661 + C78662) * C139598) *
                C139600) *
               C2566 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C47031) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C47031) *
                C30408) *
               C2565 -
           ((((C63381 * C18202 + C139289 * C18204) * C139372 +
              (C63381 * C17958 + C139289 * C17962) * C244) *
                 C139598 +
             (C78662 + C78661) * C47031) *
                C139600 +
            ((C65486 + C65479) * C139598 + C65482 * C47031) * C30408) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C103 +
           (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
               C92 -
           (C47260 + C47261) * C104 - (C47262 + C47263) * C93 +
           (C47264 + C47265) * C105 + (C47266 + C47267) * C94 -
           (C47268 + C47269) * C106 - (C47270 + C47271) * C95) *
              C30408 +
          ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
            C139598 * C4161) *
               C103 +
           (C47233 * C1707 + C47031 * C1966 + C47234 * C3900 +
            C139598 * C4167) *
               C92 -
           (C49049 + C49048) * C104 - (C49051 + C49050) * C93 +
           (C49053 + C49052) * C105 + (C49055 + C49054) * C94 -
           (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
            C47031 * C1964) *
               C106 -
           (C47234 * C8122 + C139598 * C8423 + C47233 * C1709 +
            C47031 * C1969) *
               C95) *
              C139600) *
         C139289 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C137108 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139562 -
            (C47260 + C47261) * C137101 - (C47262 + C47263) * C139308) *
               C30408 +
           ((C77859 + C77860) * C137108 + (C77861 + C77862) * C139562 -
            (C49049 + C49048) * C137101 - (C49051 + C49050) * C139308) *
               C139600) *
              C139289 * C139372 * C2565 +
          (((C48118 + C48119) * C137101 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139562 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C137108) +
            (C48120 + C48121) * C139308) *
               C30408 +
           ((C56795 + C56794) * C137101 -
            ((C47234 * C3905 + C139598 * C4172 + C47233 * C3900 +
              C47031 * C4167) *
                 C139562 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C137108) +
            (C56797 + C56796) * C139308) *
               C139600) *
              C139289 * C139372 * C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C50018 + C50019) * C137101 - (C50020 + C50021) * C139308) *
               C30408 +
           ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C137108 +
            (C47233 * C3905 + C47031 * C4172 + C47234 * C17961 +
             C139598 * C18319) *
                C139562 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C137101 -
            (C47234 * C17960 + C139598 * C18318 + C47233 * C3904 +
             C47031 * C4171) *
                C139308) *
               C139600) *
              C139289 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C181 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139346) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C181 +
            (C47233 * C1794 + C47031 * C2066 + C47234 * C3989 +
             C139598 * C4247) *
                C139346) *
               C139600) *
              C139289 * C92 -
          (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
           ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
              C139289 * C93 +
          (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C30408 +
           ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) * C139600) *
              C139289 * C94 -
          (((C47234 * C8222 + C139598 * C8534 + C47233 * C1793 +
             C47031 * C2065) *
                C139346 +
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C181) *
               C139600 +
           ((C47355 + C47354) * C139346 + (C47268 + C47269) * C181) * C30408) *
              C139289 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C30408 +
           ((C77859 + C77860) * C2660 + (C77965 + C77966) * C2565 -
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C2661 -
            (C47234 * C3994 + C139598 * C4248 + C47233 * C3989 +
             C47031 * C4247) *
                C2566 +
            (C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C2662 +
            (C47233 * C3994 + C47031 * C4248 + C47234 * C18089 +
             C139598 * C18418) *
                C2567) *
               C139600) *
              C139289 * C139562 +
          (((C48118 + C48119) * C2661 -
            ((C47351 + C47350) * C2565 + (C47260 + C47261) * C2660) +
            (C48233 + C48232) * C2566 - (C50018 + C50019) * C2662 -
            (C50125 + C50124) * C2567) *
               C30408 +
           ((C56795 + C56794) * C2661 -
            ((C49163 + C49162) * C2565 + (C49049 + C49048) * C2660) +
            (C56932 + C56933) * C2566 -
            (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
             C47031 * C4165) *
                C2662 -
            (C47234 * C18088 + C139598 * C18419 + C47233 * C3993 +
             C47031 * C4250) *
                C2567) *
               C139600) *
              C139289 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C244 +
            (C47233 * C1879 + C47031 * C2159 + C47234 * C4075 +
             C139598 * C4327) *
                C139372) *
               C139600) *
              C139289 * C139346 * C92 -
          (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
           ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
              C139289 * C139346 * C93 +
          (((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C30408 +
           ((C49053 + C49052) * C244 + (C49274 + C49275) * C139372) * C139600) *
              C139289 * C139346 * C94 -
          (((C47234 * C8322 + C139598 * C8647 + C47233 * C1880 +
             C47031 * C2162) *
                C139372 +
            (C47234 * C8120 + C139598 * C8422 + C47233 * C1699 +
             C47031 * C1964) *
                C244) *
               C139600 +
           ((C47439 + C47438) * C139372 + (C47268 + C47269) * C244) * C30408) *
              C139289 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C30408 +
            ((C77859 + C77860) * C244 + (C78070 + C78069) * C139372) *
                C139600) *
               C139289 * C2565 -
           (((C47234 * C4080 + C139598 * C4330 + C47233 * C4075 +
              C47031 * C4327) *
                 C139372 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C244) *
                C139600 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C30408) *
               C139289 * C2566 +
           (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C30408 +
            ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
              C139598 * C18317) *
                 C244 +
             (C47233 * C4080 + C47031 * C4330 + C47234 * C18203 +
              C139598 * C18518) *
                 C139372) *
                C139600) *
               C139289 * C2567) *
              C139562 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C30408 +
            ((C56795 + C56794) * C244 + (C57068 + C57069) * C139372) *
                C139600) *
               C139289 * C2566 -
           (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
               C139289 * C2565 -
           (((C47234 * C18202 + C139598 * C18519 + C47233 * C4079 +
              C47031 * C4331) *
                 C139372 +
             (C47234 * C17958 + C139598 * C18316 + C47233 * C3895 +
              C47031 * C4165) *
                 C244) *
                C139600 +
            ((C50229 + C50228) * C139372 + (C50018 + C50019) * C244) * C30408) *
               C139289 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C103 +
           (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
               C92 -
           (C30839 + C30840) * C104 - (C30841 + C30842) * C93 +
           (C30843 + C30844) * C105 + (C30845 + C30846) * C94 -
           (C30847 + C30848) * C106 - (C30849 + C30850) * C95) *
              C139289 * C47031 +
          ((C30812 * C832 + C30408 * C1396 + C30813 * C3891 + C139600 * C4407) *
               C103 +
           (C30812 * C839 + C30408 * C1400 + C30813 * C3900 + C139600 * C4413) *
               C92 -
           (C31726 + C31725) * C104 - (C31728 + C31727) * C93 +
           (C31730 + C31729) * C105 + (C31732 + C31731) * C94 -
           (C30813 * C8120 + C139600 * C8760 + C30812 * C831 + C30408 * C1398) *
               C106 -
           (C30813 * C8122 + C139600 * C8761 + C30812 * C841 + C30408 * C1403) *
               C95) *
              C139289 * C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C137108 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139562 -
            (C30839 + C30840) * C137101 - (C30841 + C30842) * C139308) *
               C139289 * C47031 +
           ((C77193 + C77194) * C137108 + (C77195 + C77196) * C139562 -
            (C31726 + C31725) * C137101 - (C31728 + C31727) * C139308) *
               C139289 * C139598) *
              C139372 * C2565 +
          (((C31725 + C31726) * C137101 -
            ((C77196 + C77195) * C139562 + (C77194 + C77193) * C137108) +
            (C31727 + C31728) * C139308) *
               C139289 * C47031 +
           ((C33707 + C33706) * C137101 -
            ((C79063 + C79064) * C139562 + (C79065 + C79066) * C137108) +
            (C33709 + C33708) * C139308) *
               C139289 * C139598) *
              C139372 * C2566 +
          (((C79066 + C79065) * C137108 + (C79064 + C79063) * C139562 -
            (C33706 + C33707) * C137101 - (C33708 + C33709) * C139308) *
               C139289 * C47031 +
           ((C30812 * C3367 + C30408 * C3707 + C30813 * C17959 +
             C139600 * C18619) *
                C137108 +
            (C30812 * C3370 + C30408 * C3710 + C30813 * C17961 +
             C139600 * C18621) *
                C139562 -
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C137101 -
            (C30813 * C17960 + C139600 * C18620 + C30812 * C3369 +
             C30408 * C3709) *
                C139308) *
               C139289 * C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C181 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139346) *
               C139289 * C47031 +
           ((C30812 * C832 + C30408 * C1396 + C30813 * C3891 +
             C139600 * C4407) *
                C181 +
            (C30812 * C927 + C30408 * C1497 + C30813 * C3989 +
             C139600 * C4493) *
                C139346) *
               C139289 * C139598) *
              C92 -
          (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) * C139289 *
               C139598 +
           ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C139289 *
               C47031) *
              C93 +
          (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C139289 *
               C47031 +
           ((C31730 + C31729) * C181 + (C31841 + C31842) * C139346) * C139289 *
               C139598) *
              C94 -
          (((C30813 * C8222 + C139600 * C8872 + C30812 * C928 +
             C30408 * C1500) *
                C139346 +
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C181) *
               C139289 * C139598 +
           ((C30934 + C30933) * C139346 + (C30847 + C30848) * C181) * C139289 *
               C47031) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C77194 + C77193) * C2661 - (C77299 + C77300) * C2566 +
            (C79066 + C79065) * C2662 + (C79169 + C79170) * C2567) *
               C139289 * C47031 +
           ((C77193 + C77194) * C2660 + (C77300 + C77299) * C2565 -
            (C79065 + C79066) * C2661 - (C79170 + C79169) * C2566 +
            (C30812 * C3367 + C30408 * C3707 + C30813 * C17959 +
             C139600 * C18619) *
                C2662 +
            (C30812 * C3433 + C30408 * C3761 + C30813 * C18089 +
             C139600 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139562 +
          (((C31725 + C31726) * C2661 -
            ((C30930 + C30929) * C2565 + (C30839 + C30840) * C2660) +
            (C31840 + C31839) * C2566 - (C33706 + C33707) * C2662 -
            (C33813 + C33812) * C2567) *
               C139289 * C47031 +
           ((C33707 + C33706) * C2661 -
            ((C31839 + C31840) * C2565 + (C31726 + C31725) * C2660) +
            (C33812 + C33813) * C2566 -
            (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
             C30408 * C3706) *
                C2662 -
            (C30813 * C18088 + C139600 * C18747 + C30812 * C3432 +
             C30408 * C3762) *
                C2567) *
               C139289 * C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[87] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C47031 +
           ((C30812 * C832 + C30408 * C1396 + C30813 * C3891 +
             C139600 * C4407) *
                C244 +
            (C30812 * C1011 + C30408 * C1602 + C30813 * C4075 +
             C139600 * C4573) *
                C139372) *
               C139289 * C139598) *
              C139346 * C92 -
          (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139289 *
               C139598 +
           ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C139289 *
               C47031) *
              C139346 * C93 +
          (((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C139289 *
               C47031 +
           ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) * C139289 *
               C139598) *
              C139346 * C94 -
          (((C30813 * C8322 + C139600 * C8985 + C30812 * C1012 +
             C30408 * C1603) *
                C139372 +
            (C30813 * C8120 + C139600 * C8760 + C30812 * C831 +
             C30408 * C1398) *
                C244) *
               C139289 * C139598 +
           ((C31018 + C31017) * C139372 + (C30847 + C30848) * C244) * C139289 *
               C47031) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C47031 +
            ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) * C139289 *
                C139598) *
               C2565 -
           (((C79273 + C79274) * C139372 + (C79065 + C79066) * C244) * C139289 *
                C139598 +
            ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) * C139289 *
                C47031) *
               C2566 +
           (((C79066 + C79065) * C244 + (C79274 + C79273) * C139372) * C139289 *
                C47031 +
            ((C30812 * C3367 + C30408 * C3707 + C30813 * C17959 +
              C139600 * C18619) *
                 C244 +
             (C30812 * C3489 + C30408 * C3816 + C30813 * C18203 +
              C139600 * C18855) *
                 C139372) *
                C139289 * C139598) *
               C2567) *
              C139562 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C139289 *
                C47031 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) * C139289 *
                C139598) *
               C2566 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139289 *
                C139598 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C139289 *
                C47031) *
               C2565 -
           (((C30813 * C18202 + C139600 * C18856 + C30812 * C3488 +
              C30408 * C3815) *
                 C139372 +
             (C30813 * C17958 + C139600 * C18618 + C30812 * C3366 +
              C30408 * C3706) *
                 C244) *
                C139289 * C139598 +
            ((C33917 + C33916) * C139372 + (C33706 + C33707) * C244) * C139289 *
                C47031) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C826 +
             (C63381 * C1707 + C139289 * C1714) * C821 -
             (C63381 * C1697 + C139289 * C1702) * C827 -
             (C63381 * C1706 + C139289 * C1713) * C822 +
             (C63381 * C1698 + C139289 * C1703) * C828 +
             (C63381 * C1705 + C139289 * C1712) * C823) *
                C47031 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139372 * C139570 +
          (((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C47031 +
            (C63904 - (C63903 + C63902) + C63905 - C63906 - C63907) * C139598) *
               C30408 +
           ((C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C47031 +
            (C70578 * C827 - (C66545 * C821 + C66546 * C826) + C70579 * C822 -
             (C63381 * C3894 + C139289 * C3906) * C828 -
             (C63381 * C3903 + C139289 * C3912) * C823) *
                C139598) *
               C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C47031 +
            (C65996 + C65997) * C139598) *
               C30408 +
           ((C77515 * C3364 + C77516 * C139303) * C47031 +
            (C66554 + C66553) * C139598) *
               C139600) *
              C139372 * C3360 -
          ((C66557 * C139598 + (C66553 + C66554) * C47031) * C139600 +
           ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
               C30408) *
              C139372 * C3361 +
          ((C66006 * C47031 + (C66001 + C66000) * C139598) * C30408 +
           ((C66552 + C66551) * C47031 + (C66555 + C66556) * C139598) *
               C139600) *
              C139372 * C3362 -
          ((((C63381 * C66529 + C139289 * C66531) * C139303 +
             (C63381 * C66528 + C139289 * C66530) * C3364) *
                C139598 +
            (C66556 + C66555) * C47031) *
               C139600 +
           ((C66011 + C66010) * C139598 + C66007 * C47031) * C30408) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C47031 +
            (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
             C63995 * C139360) *
                C139598) *
               C30408 +
           (((C63381 * C1700 + C139289 * C1708) * C923 +
             (C63381 * C1794 + C139289 * C1799) * C139570 - C66548 * C924 -
             C66640 * C139360) *
                C47031 +
            (C66548 * C923 + C66640 * C139570 - C66546 * C924 -
             C66641 * C139360) *
                C139598) *
               C139600) *
              C821 +
          (((C63886 * C924 -
             ((C63381 * C183 + C139289 * C189) * C139570 +
              (C63381 * C108 + C139289 * C114) * C923) +
             C63996 * C139360) *
                C47031 +
            (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
             C63997 * C139360) *
                C139598) *
               C30408 +
           ((C70576 * C924 -
             ((C63381 * C1791 + C139289 * C1796) * C139570 +
              (C63381 * C1697 + C139289 * C1702) * C923) +
             C70686 * C139360) *
                C47031 +
            (C70578 * C924 - (C70686 * C139570 + C70576 * C923) +
             C70687 * C139360) *
                C139598) *
               C139600) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C923 +
             (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
             C63998 * C139360) *
                C47031 +
            (C63888 * C923 + C63998 * C139570 - C63894 * C924 -
             C63999 * C139360) *
                C139598) *
               C30408 +
           (((C63381 * C1698 + C139289 * C1703) * C923 +
             (C63381 * C1792 + C139289 * C1797) * C139570 - C76581 * C924 -
             C76685 * C139360) *
                C47031 +
            (C76581 * C923 + C76685 * C139570 -
             (C63381 * C3894 + C139289 * C3906) * C924 -
             (C63381 * C3992 + C139289 * C3998) * C139360) *
                C139598) *
               C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3427 +
            (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
            C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
            C65399 * C3363) *
               C47031 +
           (C63884 * C3427 + C63994 * C3360 - C63890 * C3428 - C63995 * C3361 +
            C65313 * C3429 + C65399 * C3362 - C66008 * C3430 - C66066 * C3363) *
               C139598) *
              C30408 +
          ((C77515 * C3427 + C77640 * C3360 - C66548 * C3428 - C66640 * C3361 +
            C66546 * C3429 + C66641 * C3362 - C66549 * C3430 - C66642 * C3363) *
               C47031 +
           (C66548 * C3427 + C66640 * C3360 - C66546 * C3428 - C66641 * C3361 +
            C66549 * C3429 + C66642 * C3362 -
            (C63381 * C66528 + C139289 * C66530) * C3430 -
            (C63381 * C66631 + C139289 * C66632) * C3363) *
               C139598) *
              C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C47031 +
             (C64074 + C64098) * C139598) *
                C30408 +
            (((C63381 * C1700 + C139289 * C1708) * C244 +
              (C63381 * C1879 + C139289 * C1884) * C139372) *
                 C47031 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C139570 -
           (((C66736 * C139372 + C66546 * C244) * C139598 +
             (C76785 + C76784) * C47031) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
                C30408) *
               C139360) *
              C821 +
          ((((C64080 + C64100) * C47031 + (C64083 + C64101) * C139598) *
                C30408 +
            ((C76786 + C76787) * C47031 +
             (C70578 * C244 + C70797 * C139372) * C139598) *
                C139600) *
               C139360 -
           (((C76787 + C76786) * C139598 +
             ((C63381 * C1878 + C139289 * C1883) * C139372 +
              (C63381 * C1697 + C139289 * C1702) * C244) *
                 C47031) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C47031) *
                C30408) *
               C139570) *
              C822 +
          (((((C63381 * C109 + C139289 * C115) * C244 +
              (C63381 * C247 + C139289 * C253) * C139372) *
                 C47031 +
             (C64086 + C64102) * C139598) *
                C30408 +
            (((C63381 * C1698 + C139289 * C1703) * C244 +
              (C63381 * C1877 + C139289 * C1882) * C139372) *
                 C47031 +
             (C76788 + C76792) * C139598) *
                C139600) *
               C139570 -
           ((((C63381 * C4078 + C139289 * C4084) * C139372 +
              (C63381 * C3894 + C139289 * C3906) * C244) *
                 C139598 +
             (C76792 + C76788) * C47031) *
                C139600 +
            ((C64103 + C64089) * C139598 + (C64102 + C64086) * C47031) *
                C30408) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C47031 +
            (C64074 + C64098) * C139598) *
               C30408 +
           ((C77515 * C244 + C77750 * C139372) * C47031 +
            (C76784 + C76785) * C139598) *
               C139600) *
              C3360 -
          (((C78659 + C78660) * C139598 + (C76785 + C76784) * C47031) *
               C139600 +
           ((C64099 + C64077) * C139598 + (C64098 + C64074) * C47031) *
               C30408) *
              C3361 +
          ((C65475 * C47031 + (C65478 + C65485) * C139598) * C30408 +
           ((C78660 + C78659) * C47031 + (C79473 + C79474) * C139598) *
               C139600) *
              C3362 -
          ((((C63381 * C66716 + C139289 * C66717) * C139372 +
             (C63381 * C66528 + C139289 * C66530) * C244) *
                C139598 +
            (C79474 + C79473) * C47031) *
               C139600 +
           ((C66124 + C66120) * C139598 + C66119 * C47031) * C30408) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C826 +
            (C47233 * C1707 + C47031 * C1966 + C47234 * C3900 +
             C139598 * C4167) *
                C821 -
            (C49049 + C49048) * C827 - (C49051 + C49050) * C822 +
            (C49053 + C49052) * C828 + (C49055 + C49054) * C823) *
               C139600) *
              C139289 * C139372 * C139570 +
          (((C48118 + C48119) * C827 -
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C821 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C826) +
            (C48120 + C48121) * C822 - (C48122 + C48123) * C828 -
            (C48124 + C48125) * C823) *
               C30408 +
           ((C56795 + C56794) * C827 -
            ((C47234 * C3905 + C139598 * C4172 + C47233 * C3900 +
              C47031 * C4167) *
                 C821 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C826) +
            (C56797 + C56796) * C822 -
            (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
             C47031 * C4163) *
                C828 -
            (C47234 * C3903 + C139598 * C4170 + C47233 * C3902 +
             C47031 * C4169) *
                C823) *
               C139600) *
              C139289 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C3364 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C139303) *
               C30408 +
           ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
               C139600) *
              C139289 * C139372 * C3360 -
          (((C47234 * C3905 + C139598 * C4172 + C47233 * C3900 +
             C47031 * C4167) *
                C139303 +
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C3364) *
               C139600 +
           ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
             C47031 * C1098) *
                C139303 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C3364) *
               C30408) *
              C139289 * C139372 * C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
             C139598 * C3548) *
                C139303) *
               C30408 +
           ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C3364 +
            (C47233 * C3905 + C47031 * C4172 + C47234 * C17961 +
             C139598 * C18319) *
                C139303) *
               C139600) *
              C139289 * C139372 * C3362 -
          (((C47234 * C66529 + C139598 * C66817 + C47233 * C17961 +
             C47031 * C18319) *
                C139303 +
            (C47234 * C66528 + C139598 * C66816 + C47233 * C17959 +
             C47031 * C18317) *
                C3364) *
               C139600 +
           ((C47234 * C17253 + C139598 * C17491 + C47233 * C3370 +
             C47031 * C3548) *
                C139303 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C3364) *
               C30408) *
              C139289 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C923 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C139570 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C924 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C139360) *
               C30408 +
           ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
             C139598 * C4161) *
                C923 +
            (C47233 * C1794 + C47031 * C2066 + C47234 * C3989 +
             C139598 * C4247) *
                C139570 -
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C924 -
            (C47234 * C3994 + C139598 * C4248 + C47233 * C3989 +
             C47031 * C4247) *
                C139360) *
               C139600) *
              C139289 * C821 +
          (((C48118 + C48119) * C924 -
            ((C47351 + C47350) * C139570 + (C47260 + C47261) * C923) +
            (C48233 + C48232) * C139360) *
               C30408 +
           ((C56795 + C56794) * C924 -
            ((C49163 + C49162) * C139570 + (C49049 + C49048) * C923) +
            (C56932 + C56933) * C139360) *
               C139600) *
              C139289 * C822 +
          (((C47264 + C47265) * C923 + (C47353 + C47352) * C139570 -
            (C48122 + C48123) * C924 - (C48235 + C48234) * C139360) *
               C30408 +
           ((C49053 + C49052) * C923 + (C49164 + C49165) * C139570 -
            (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
             C47031 * C4163) *
                C924 -
            (C47234 * C3992 + C139598 * C4252 + C47233 * C3991 +
             C47031 * C4251) *
                C139360) *
               C139600) *
              C139289 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
               C3427 +
           (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
               C3360 -
           (C47234 * C2570 + C139598 * C2827 + C47233 * C832 + C47031 * C1094) *
               C3428 -
           (C47234 * C2663 + C139598 * C2921 + C47233 * C927 + C47031 * C1195) *
               C3361 +
           (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
            C47031 * C3545) *
               C3430 -
           (C47234 * C17337 + C139598 * C17558 + C47233 * C3433 +
            C47031 * C3599) *
               C3363) *
              C30408 +
          ((C77859 + C77860) * C3427 + (C77965 + C77966) * C3360 -
           (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
            C47031 * C4161) *
               C3428 -
           (C47234 * C3994 + C139598 * C4248 + C47233 * C3989 +
            C47031 * C4247) *
               C3361 +
           (C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
            C139598 * C18317) *
               C3429 +
           (C47233 * C3994 + C47031 * C4248 + C47234 * C18089 +
            C139598 * C18418) *
               C3362 -
           (C47234 * C66528 + C139598 * C66816 + C47233 * C17959 +
            C47031 * C18317) *
               C3430 -
           (C47234 * C66631 + C139598 * C66892 + C47233 * C18089 +
            C47031 * C18418) *
               C3363) *
              C139600) *
         C139289 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C244 +
             (C47233 * C245 + C47031 * C474 + C47234 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C30408 +
            ((C47233 * C1700 + C47031 * C1962 + C47234 * C3891 +
              C139598 * C4161) *
                 C244 +
             (C47233 * C1879 + C47031 * C2159 + C47234 * C4075 +
              C139598 * C4327) *
                 C139372) *
                C139600) *
               C139289 * C139570 -
           (((C47234 * C4080 + C139598 * C4330 + C47233 * C4075 +
              C47031 * C4327) *
                 C139372 +
             (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
              C47031 * C4161) *
                 C244) *
                C139600 +
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139372 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C244) *
                C30408) *
               C139289 * C139360) *
              C821 +
          ((((C48118 + C48119) * C244 + (C48343 + C48342) * C139372) * C30408 +
            ((C56795 + C56794) * C244 + (C57068 + C57069) * C139372) *
                C139600) *
               C139289 * C139360 -
           (((C49272 + C49273) * C139372 + (C49049 + C49048) * C244) * C139600 +
            ((C47435 + C47434) * C139372 + (C47260 + C47261) * C244) * C30408) *
               C139289 * C139570) *
              C822 +
          ((((C47264 + C47265) * C244 + (C47437 + C47436) * C139372) * C30408 +
            ((C49053 + C49052) * C244 + (C49274 + C49275) * C139372) *
                C139600) *
               C139289 * C139570 -
           (((C47234 * C4078 + C139598 * C4332 + C47233 * C4077 +
              C47031 * C4329) *
                 C139372 +
             (C47234 * C3894 + C139598 * C4164 + C47233 * C3893 +
              C47031 * C4163) *
                 C244) *
                C139600 +
            ((C48345 + C48344) * C139372 + (C48122 + C48123) * C244) * C30408) *
               C139289 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C244 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139372) *
               C30408 +
           ((C77859 + C77860) * C244 + (C78070 + C78069) * C139372) * C139600) *
              C139289 * C3360 -
          (((C47234 * C4080 + C139598 * C4330 + C47233 * C4075 +
             C47031 * C4327) *
                C139372 +
            (C47234 * C3896 + C139598 * C4166 + C47233 * C3891 +
             C47031 * C4161) *
                C244) *
               C139600 +
           ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
             C47031 * C1301) *
                C139372 +
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C244) *
               C30408) *
              C139289 * C3361 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C244 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139372) *
               C30408 +
           ((C47233 * C3896 + C47031 * C4166 + C47234 * C17959 +
             C139598 * C18317) *
                C244 +
            (C47233 * C4080 + C47031 * C4330 + C47234 * C18203 +
             C139598 * C18518) *
                C139372) *
               C139600) *
              C139289 * C3362 -
          (((C47234 * C66716 + C139598 * C66967 + C47233 * C18203 +
             C47031 * C18518) *
                C139372 +
            (C47234 * C66528 + C139598 * C66816 + C47233 * C17959 +
             C47031 * C18317) *
                C244) *
               C139600 +
           ((C47234 * C17413 + C139598 * C17627 + C47233 * C3489 +
             C47031 * C3654) *
                C139372 +
            (C47234 * C17251 + C139598 * C17489 + C47233 * C3367 +
             C47031 * C3545) *
                C244) *
               C30408) *
              C139289 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C139289 * C47031 +
           ((C77193 + C77194) * C826 + (C77195 + C77196) * C821 -
            (C31726 + C31725) * C827 - (C31728 + C31727) * C822 +
            (C31730 + C31729) * C828 + (C31732 + C31731) * C823) *
               C139289 * C139598) *
              C139372 * C139570 +
          (((C31725 + C31726) * C827 -
            ((C77196 + C77195) * C821 + (C77194 + C77193) * C826) +
            (C31727 + C31728) * C822 - (C31729 + C31730) * C828 -
            (C31731 + C31732) * C823) *
               C139289 * C47031 +
           ((C33707 + C33706) * C827 -
            ((C30813 * C3905 + C139600 * C4418 + C30812 * C2577 +
              C30408 * C3109) *
                 C821 +
             (C30813 * C3896 + C139600 * C4412 + C30812 * C2570 +
              C30408 * C3105) *
                 C826) +
            (C33709 + C33708) * C822 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C828 -
            (C30813 * C3903 + C139600 * C4416 + C30812 * C2579 +
             C30408 * C3111) *
                C823) *
               C139289 * C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C3364 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C139303) *
               C139289 * C47031 +
           ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) * C139289 *
               C139598) *
              C139372 * C3360 -
          (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) * C139289 *
               C139598 +
           ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) * C139289 *
               C47031) *
              C139372 * C3361 +
          (((C79066 + C79065) * C3364 + (C79064 + C79063) * C139303) * C139289 *
               C47031 +
           ((C79747 + C79748) * C3364 + (C79749 + C79750) * C139303) * C139289 *
               C139598) *
              C139372 * C3362 -
          (((C30813 * C66529 + C139600 * C67043 + C30812 * C17253 +
             C30408 * C17697) *
                C139303 +
            (C30813 * C66528 + C139600 * C67042 + C30812 * C17251 +
             C30408 * C17695) *
                C3364) *
               C139289 * C139598 +
           ((C79750 + C79749) * C139303 + (C79748 + C79747) * C3364) * C139289 *
               C47031) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C923 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C139570 -
            (C77194 + C77193) * C924 - (C77299 + C77300) * C139360) *
               C139289 * C47031 +
           ((C77193 + C77194) * C923 + (C77300 + C77299) * C139570 -
            (C30813 * C3896 + C139600 * C4412 + C30812 * C2570 +
             C30408 * C3105) *
                C924 -
            (C30813 * C3994 + C139600 * C4494 + C30812 * C2663 +
             C30408 * C3199) *
                C139360) *
               C139289 * C139598) *
              C821 +
          (((C31725 + C31726) * C924 -
            ((C30930 + C30929) * C139570 + (C30839 + C30840) * C923) +
            (C31840 + C31839) * C139360) *
               C139289 * C47031 +
           ((C33707 + C33706) * C924 -
            ((C31839 + C31840) * C139570 + (C31726 + C31725) * C923) +
            (C33812 + C33813) * C139360) *
               C139289 * C139598) *
              C822 +
          (((C30843 + C30844) * C923 + (C30932 + C30931) * C139570 -
            (C31729 + C31730) * C924 - (C31842 + C31841) * C139360) *
               C139289 * C47031 +
           ((C31730 + C31729) * C923 + (C31841 + C31842) * C139570 -
            (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
             C30408 * C3107) *
                C924 -
            (C30813 * C3992 + C139600 * C4498 + C30812 * C2665 +
             C30408 * C3201) *
                C139360) *
               C139289 * C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
               C3427 +
           (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
               C3360 -
           (C77194 + C77193) * C3428 - (C77299 + C77300) * C3361 +
           (C79066 + C79065) * C3429 + (C79169 + C79170) * C3362 -
           (C79748 + C79747) * C3430 - (C79821 + C79822) * C3363) *
              C139289 * C47031 +
          ((C77193 + C77194) * C3427 + (C77300 + C77299) * C3360 -
           (C79065 + C79066) * C3428 - (C79170 + C79169) * C3361 +
           (C79747 + C79748) * C3429 + (C79822 + C79821) * C3362 -
           (C30813 * C66528 + C139600 * C67042 + C30812 * C17251 +
            C30408 * C17695) *
               C3430 -
           (C30813 * C66631 + C139600 * C67128 + C30812 * C17337 +
            C30408 * C17782) *
               C3363) *
              C139289 * C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[88] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C30812 * C245 + C30408 * C719 + C30813 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C47031 +
            ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) * C139289 *
                C139598) *
               C139570 -
           (((C30813 * C4080 + C139600 * C4576 + C30812 * C2745 +
              C30408 * C3295) *
                 C139372 +
             (C30813 * C3896 + C139600 * C4412 + C30812 * C2570 +
              C30408 * C3105) *
                 C244) *
                C139289 * C139598 +
            ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) * C139289 *
                C47031) *
               C139360) *
              C821 +
          ((((C31725 + C31726) * C244 + (C31950 + C31949) * C139372) * C139289 *
                C47031 +
            ((C33707 + C33706) * C244 + (C33916 + C33917) * C139372) * C139289 *
                C139598) *
               C139360 -
           (((C31949 + C31950) * C139372 + (C31726 + C31725) * C244) * C139289 *
                C139598 +
            ((C31014 + C31013) * C139372 + (C30839 + C30840) * C244) * C139289 *
                C47031) *
               C139570) *
              C822 +
          ((((C30843 + C30844) * C244 + (C31016 + C31015) * C139372) * C139289 *
                C47031 +
            ((C31730 + C31729) * C244 + (C31951 + C31952) * C139372) * C139289 *
                C139598) *
               C139570 -
           (((C30813 * C4078 + C139600 * C4578 + C30812 * C2747 +
              C30408 * C3297) *
                 C139372 +
             (C30813 * C3894 + C139600 * C4410 + C30812 * C2572 +
              C30408 * C3107) *
                 C244) *
                C139289 * C139598 +
            ((C31952 + C31951) * C139372 + (C31729 + C31730) * C244) * C139289 *
                C47031) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C244 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C47031 +
           ((C77193 + C77194) * C244 + (C77403 + C77404) * C139372) * C139289 *
               C139598) *
              C3360 -
          (((C79273 + C79274) * C139372 + (C79065 + C79066) * C244) * C139289 *
               C139598 +
           ((C77404 + C77403) * C139372 + (C77194 + C77193) * C244) * C139289 *
               C47031) *
              C3361 +
          (((C79066 + C79065) * C244 + (C79274 + C79273) * C139372) * C139289 *
               C47031 +
           ((C79747 + C79748) * C244 + (C79893 + C79894) * C139372) * C139289 *
               C139598) *
              C3362 -
          (((C30813 * C66716 + C139600 * C67206 + C30812 * C17413 +
             C30408 * C17854) *
                C139372 +
            (C30813 * C66528 + C139600 * C67042 + C30812 * C17251 +
             C30408 * C17695) *
                C244) *
               C139289 * C139598 +
           ((C79894 + C79893) * C139372 + (C79748 + C79747) * C244) * C139289 *
               C47031) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C47031 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C30408 +
           ((C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C47031 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139571 +
          (((C77523 - (C77522 + C77521) + C77524 - C77525 - C77526) * C47031 +
            (C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C139598) *
               C30408 +
           (((C63381 * C4657 + C139289 * C4661) * C827 -
             ((C63381 * C4663 + C139289 * C4668) * C821 +
              (C63381 * C4656 + C139289 * C4660) * C826) +
             (C63381 * C4664 + C139289 * C4669) * C822 -
             (C63381 * C4658 + C139289 * C4662) * C828 -
             (C63381 * C4665 + C139289 * C4670) * C823) *
                C47031 +
            ((C63381 * C5470 + C139289 * C5476) * C827 -
             (C67972 * C821 + C67971 * C826) +
             (C63381 * C5473 + C139289 * C5479) * C822 -
             (C63381 * C5469 + C139289 * C5475) * C828 -
             (C63381 * C5472 + C139289 * C5478) * C823) *
                C139598) *
               C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C47031 +
             (C65996 + C65997) * C139598) *
                C30408 +
            ((C79993 + C79994) * C47031 + C79995 * C139598) * C139600) *
               C139571 -
           (((C67976 + C67975) * C139598 +
             ((C63381 * C4663 + C139289 * C4668) * C139303 +
              (C63381 * C4656 + C139289 * C4660) * C3364) *
                 C47031) *
                C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C47031) * C30408) *
               C139384) *
              C2565 +
          (((C79995 * C47031 + C79997 * C139598) * C30408 +
            ((C67975 + C67976) * C47031 + (C67977 + C67978) * C139598) *
                C139600) *
               C139384 -
           ((C66557 * C139598 + C79996 * C47031) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C47031) *
                C30408) *
               C139571) *
              C2566 +
          (((C66006 * C47031 + (C66001 + C66000) * C139598) * C30408 +
            (C79997 * C47031 + (C66555 + C66556) * C139598) * C139600) *
               C139571 -
           ((((C63381 * C67959 + C139289 * C67961) * C139303 +
              (C63381 * C67958 + C139289 * C67960) * C3364) *
                 C139598 +
             (C67978 + C67977) * C47031) *
                C139600 +
            ((C66556 + C66555) * C139598 + C66557 * C47031) * C30408) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C47031 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C30408 +
            ((C77625 + C77643) * C47031 + (C77628 + C77629) * C139598) *
                C139600) *
               C821 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C47031) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C47031) *
                C30408) *
               C822 +
           ((((C63381 * C109 + C139289 * C115) * C181 +
              (C63381 * C184 + C139289 * C190) * C139346) *
                 C47031 +
             (C63888 * C181 + C63998 * C139346) * C139598) *
                C30408 +
            ((C77635 + C77645) * C47031 + (C77638 + C77639) * C139598) *
                C139600) *
               C823) *
              C139571 +
          ((((C77634 + C77644) * C47031 + (C77631 + C77630) * C139598) *
                C30408 +
            (((C63381 * C4657 + C139289 * C4661) * C181 +
              (C63381 * C4747 + C139289 * C4751) * C139346) *
                 C47031 +
             ((C63381 * C5470 + C139289 * C5476) * C181 +
              (C63381 * C5556 + C139289 * C5559) * C139346) *
                 C139598) *
                C139600) *
               C822 -
           (((C68059 * C139346 + C67971 * C181) * C139598 +
             ((C63381 * C4746 + C139289 * C4750) * C139346 +
              (C63381 * C4656 + C139289 * C4660) * C181) *
                 C47031) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C47031) *
                C30408) *
               C821 -
           ((((C63381 * C5555 + C139289 * C5558) * C139346 +
              (C63381 * C5469 + C139289 * C5475) * C181) *
                 C139598 +
             ((C63381 * C4748 + C139289 * C4752) * C139346 +
              (C63381 * C4658 + C139289 * C4662) * C181) *
                 C47031) *
                C139600 +
            ((C77639 + C77638) * C139598 + (C77645 + C77635) * C47031) *
                C30408) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C47031 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C30408 +
           ((C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C47031 +
            (C80102 + C80103 - C80104 - C80105 + C80106 + C80107) * C139598) *
               C139600) *
              C139303 * C139571 +
          (((C80098 - (C80097 + C80096) + C80099 - C80100 - C80101) * C47031 +
            (C80104 - (C80103 + C80102) + C80105 - C80106 - C80107) * C139598) *
               C30408 +
           ((C67971 * C2661 -
             ((C63381 * C4746 + C139289 * C4750) * C2565 +
              (C63381 * C4656 + C139289 * C4660) * C2660) +
             C68059 * C2566 - C67973 * C2662 - C68060 * C2567) *
                C47031 +
            (C67973 * C2661 - (C68059 * C2565 + C67971 * C2660) +
             C68060 * C2566 - (C63381 * C67958 + C139289 * C67960) * C2662 -
             (C63381 * C68052 + C139289 * C68053) * C2567) *
                C139598) *
               C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C47031 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C30408 +
           ((C77515 * C1875 + C77750 * C139571 -
             (C63381 * C4656 + C139289 * C4660) * C1876 -
             (C63381 * C4831 + C139289 * C4835) * C139384) *
                C47031 +
            (C66548 * C1875 + C66734 * C139571 - C67971 * C1876 -
             C68151 * C139384) *
                C139598) *
               C139600) *
              C139346 * C821 +
          (((C77517 * C1876 -
             ((C63381 * C246 + C139289 * C252) * C139571 +
              (C63381 * C108 + C139289 * C114) * C1875) +
             C77751 * C139384) *
                C47031 +
            (C70786 - (C70787 + C70788) + C70798) * C139598) *
               C30408 +
           (((C63381 * C4657 + C139289 * C4661) * C1876 -
             (C77751 * C139571 + C77517 * C1875) +
             (C63381 * C4832 + C139289 * C4836) * C139384) *
                C47031 +
            ((C63381 * C5470 + C139289 * C5476) * C1876 -
             (C70796 * C139571 + C70576 * C1875) +
             (C63381 * C5636 + C139289 * C5639) * C139384) *
                C139598) *
               C139600) *
              C139346 * C822 +
          ((((C63381 * C109 + C139289 * C115) * C1875 +
             (C63381 * C247 + C139289 * C253) * C139571 - C77519 * C1876 -
             C77752 * C139384) *
                C47031 +
            (C63888 * C1875 + C64096 * C139571 - C76581 * C1876 -
             C76791 * C139384) *
                C139598) *
               C30408 +
           ((C77519 * C1875 + C77752 * C139571 -
             (C63381 * C4658 + C139289 * C4662) * C1876 -
             (C63381 * C4833 + C139289 * C4837) * C139384) *
                C47031 +
            (C76581 * C1875 + C76791 * C139571 -
             (C63381 * C5469 + C139289 * C5475) * C1876 -
             (C63381 * C5635 + C139289 * C5638) * C139384) *
                C139598) *
               C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C47031 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C30408 +
           ((C77515 * C1875 + C77750 * C139571 -
             (C63381 * C4656 + C139289 * C4660) * C1876 -
             (C63381 * C4831 + C139289 * C4835) * C139384) *
                C47031 +
            (C80206 + C80207 - C80208 - C80209) * C139598) *
               C139600) *
              C2565 +
          (((C66721 - (C66720 + C66719) + C66738) * C47031 +
            (C66726 - (C66725 + C66724) + C66740) * C139598) *
               C30408 +
           ((C80208 - (C80207 + C80206) + C80209) * C47031 +
            (C80210 - (C80211 + C80212) + C80213) * C139598) *
               C139600) *
              C2566 +
          ((C66742 * C47031 + (C66731 + C66730 - C66729 - C66741) * C139598) *
               C30408 +
           ((C80212 + C80211 - C80210 - C80213) * C47031 +
            (C66549 * C1875 + C66737 * C139571 -
             (C63381 * C67958 + C139289 * C67960) * C1876 -
             (C63381 * C68134 + C139289 * C68135) * C139384) *
                C139598) *
               C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C826 +
            (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                C821 -
            (C47260 + C47261) * C827 - (C47262 + C47263) * C822 +
            (C47264 + C47265) * C828 + (C47266 + C47267) * C823) *
               C30408 +
           ((C77859 + C77860) * C826 + (C77861 + C77862) * C821 -
            (C49049 + C49048) * C827 - (C49051 + C49050) * C822 +
            (C49053 + C49052) * C828 + (C49055 + C49054) * C823) *
               C139600) *
              C139289 * C139571 +
          (((C49048 + C49049) * C827 -
            ((C77862 + C77861) * C821 + (C77860 + C77859) * C826) +
            (C49050 + C49051) * C822 - (C49052 + C49053) * C828 -
            (C49054 + C49055) * C823) *
               C30408 +
           ((C52473 + C52472) * C827 -
            ((C47234 * C5474 + C139598 * C5720 + C47233 * C4663 +
              C47031 * C4917) *
                 C821 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C826) +
            (C52475 + C52474) * C822 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C828 -
            (C47234 * C5472 + C139598 * C5718 + C47233 * C4665 +
             C47031 * C4919) *
                C823) *
               C139600) *
              C139289 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C3364 +
             (C47233 * C116 + C47031 * C314 + C47234 * C839 + C139598 * C1098) *
                 C139303) *
                C30408 +
            ((C77859 + C77860) * C3364 + (C77861 + C77862) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C47234 * C5474 + C139598 * C5720 + C47233 * C4663 +
              C47031 * C4917) *
                 C139303 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C3364) *
                C139600 +
            ((C77862 + C77861) * C139303 + (C77860 + C77859) * C3364) *
                C30408) *
               C139289 * C139384) *
              C2565 +
          ((((C80328 + C80329) * C3364 + (C80330 + C80331) * C139303) * C30408 +
            ((C47233 * C5471 + C47031 * C5717 + C47234 * C19903 +
              C139598 * C20237) *
                 C3364 +
             (C47233 * C5474 + C47031 * C5720 + C47234 * C19905 +
              C139598 * C20239) *
                 C139303) *
                C139600) *
               C139289 * C139384 -
           (((C80331 + C80330) * C139303 + (C80329 + C80328) * C3364) *
                C139600 +
            ((C47234 * C2577 + C139598 * C2831 + C47233 * C839 +
              C47031 * C1098) *
                 C139303 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C3364) *
                C30408) *
               C139289 * C139571) *
              C2566 +
          ((((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C47233 * C2577 + C47031 * C2831 + C47234 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C30408 +
            ((C80332 + C80333) * C3364 + (C80334 + C80335) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C47234 * C67959 + C139598 * C68229 + C47233 * C19905 +
              C47031 * C20239) *
                 C139303 +
             (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
              C47031 * C20237) *
                 C3364) *
                C139600 +
            ((C80335 + C80334) * C139303 + (C80333 + C80332) * C3364) *
                C30408) *
               C139289 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                 C181 +
             (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                 C139346) *
                C30408 +
            ((C77859 + C77860) * C181 + (C77965 + C77966) * C139346) *
                C139600) *
               C139289 * C821 -
           (((C49163 + C49162) * C139346 + (C49049 + C49048) * C181) * C139600 +
            ((C47351 + C47350) * C139346 + (C47260 + C47261) * C181) * C30408) *
               C139289 * C822 +
           (((C47264 + C47265) * C181 + (C47353 + C47352) * C139346) * C30408 +
            ((C49053 + C49052) * C181 + (C49164 + C49165) * C139346) *
                C139600) *
               C139289 * C823) *
              C139571 +
          ((((C49048 + C49049) * C181 + (C49162 + C49163) * C139346) * C30408 +
            ((C52473 + C52472) * C181 + (C52578 + C52579) * C139346) *
                C139600) *
               C139289 * C822 -
           (((C47234 * C5557 + C139598 * C5795 + C47233 * C4746 +
              C47031 * C5007) *
                 C139346 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C181) *
                C139600 +
            ((C77966 + C77965) * C139346 + (C77860 + C77859) * C181) * C30408) *
               C139289 * C821 -
           (((C47234 * C5555 + C139598 * C5797 + C47233 * C4748 +
              C47031 * C5009) *
                 C139346 +
             (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
              C47031 * C4915) *
                 C181) *
                C139600 +
            ((C49165 + C49164) * C139346 + (C49052 + C49053) * C181) * C30408) *
               C139289 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C2660 +
            (C47233 * C182 + C47031 * C394 + C47234 * C927 + C139598 * C1195) *
                C2565 -
            (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
             C47031 * C1094) *
                C2661 -
            (C47234 * C2663 + C139598 * C2921 + C47233 * C927 +
             C47031 * C1195) *
                C2566 +
            (C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C47233 * C2663 + C47031 * C2921 + C47234 * C3433 +
             C139598 * C3599) *
                C2567) *
               C30408 +
           ((C77859 + C77860) * C2660 + (C77965 + C77966) * C2565 -
            (C80329 + C80328) * C2661 - (C80442 + C80443) * C2566 +
            (C80332 + C80333) * C2662 + (C80444 + C80445) * C2567) *
               C139600) *
              C139289 * C139303 * C139571 +
          (((C80328 + C80329) * C2661 -
            ((C77966 + C77965) * C2565 + (C77860 + C77859) * C2660) +
            (C80443 + C80442) * C2566 - (C80333 + C80332) * C2662 -
            (C80445 + C80444) * C2567) *
               C30408 +
           ((C47233 * C5471 + C47031 * C5717 + C47234 * C19903 +
             C139598 * C20237) *
                C2661 -
            ((C47234 * C5557 + C139598 * C5795 + C47233 * C4746 +
              C47031 * C5007) *
                 C2565 +
             (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
              C47031 * C4913) *
                 C2660) +
            (C47233 * C5557 + C47031 * C5795 + C47234 * C20021 +
             C139598 * C20338) *
                C2566 -
            (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
             C47031 * C20237) *
                C2662 -
            (C47234 * C68052 + C139598 * C68304 + C47233 * C20021 +
             C47031 * C20338) *
                C2567) *
               C139600) *
              C139289 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C77860 + C77859) * C1876 - (C78069 + C78070) * C139384) *
               C30408 +
           ((C77859 + C77860) * C1875 + (C78070 + C78069) * C139571 -
            (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
             C47031 * C4913) *
                C1876 -
            (C47234 * C5637 + C139598 * C5872 + C47233 * C4831 +
             C47031 * C5095) *
                C139384) *
               C139600) *
              C139289 * C139346 * C821 +
          (((C49048 + C49049) * C1876 -
            ((C47435 + C47434) * C139571 + (C47260 + C47261) * C1875) +
            (C49273 + C49272) * C139384) *
               C30408 +
           ((C52473 + C52472) * C1876 -
            ((C49272 + C49273) * C139571 + (C49049 + C49048) * C1875) +
            (C52682 + C52683) * C139384) *
               C139600) *
              C139289 * C139346 * C822 +
          (((C47264 + C47265) * C1875 + (C47437 + C47436) * C139571 -
            (C49052 + C49053) * C1876 - (C49275 + C49274) * C139384) *
               C30408 +
           ((C49053 + C49052) * C1875 + (C49274 + C49275) * C139571 -
            (C47234 * C5469 + C139598 * C5715 + C47233 * C4658 +
             C47031 * C4915) *
                C1876 -
            (C47234 * C5635 + C139598 * C5874 + C47233 * C4833 +
             C47031 * C5097) *
                C139384) *
               C139600) *
              C139289 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47233 * C107 + C47031 * C308 + C47234 * C832 + C139598 * C1094) *
                C1875 +
            (C47233 * C245 + C47031 * C474 + C47234 * C1011 + C139598 * C1301) *
                C139571 -
            (C77860 + C77859) * C1876 - (C78069 + C78070) * C139384) *
               C30408 +
           ((C77859 + C77860) * C1875 + (C78070 + C78069) * C139571 -
            (C47234 * C5471 + C139598 * C5717 + C47233 * C4656 +
             C47031 * C4913) *
                C1876 -
            (C47234 * C5637 + C139598 * C5872 + C47233 * C4831 +
             C47031 * C5095) *
                C139384) *
               C139600) *
              C139289 * C2565 +
          (((C80328 + C80329) * C1876 -
            ((C47234 * C2745 + C139598 * C3017 + C47233 * C1011 +
              C47031 * C1301) *
                 C139571 +
             (C47234 * C2570 + C139598 * C2827 + C47233 * C832 +
              C47031 * C1094) *
                 C1875) +
            (C80552 + C80553) * C139384) *
               C30408 +
           ((C47233 * C5471 + C47031 * C5717 + C47234 * C19903 +
             C139598 * C20237) *
                C1876 -
            ((C80553 + C80552) * C139571 + (C80329 + C80328) * C1875) +
            (C47233 * C5637 + C47031 * C5872 + C47234 * C20129 +
             C139598 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2566 +
          (((C47233 * C2570 + C47031 * C2827 + C47234 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C47233 * C2745 + C47031 * C3017 + C47234 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C80333 + C80332) * C1876 - (C80554 + C80555) * C139384) *
               C30408 +
           ((C80332 + C80333) * C1875 + (C80555 + C80554) * C139571 -
            (C47234 * C67958 + C139598 * C68228 + C47233 * C19903 +
             C47031 * C20237) *
                C1876 -
            (C47234 * C68134 + C139598 * C68379 + C47233 * C20129 +
             C47031 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C826 +
            (C30812 * C116 + C30408 * C561 + C30813 * C1707 + C139600 * C2268) *
                C821 -
            (C30839 + C30840) * C827 - (C30841 + C30842) * C822 +
            (C30843 + C30844) * C828 + (C30845 + C30846) * C823) *
               C139289 * C47031 +
           ((C77193 + C77194) * C826 + (C77195 + C77196) * C821 -
            (C31726 + C31725) * C827 - (C31728 + C31727) * C822 +
            (C31730 + C31729) * C828 + (C31732 + C31731) * C823) *
               C139289 * C139598) *
              C139571 +
          (((C32764 + C32765) * C827 -
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C821 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C826) +
            (C32766 + C32767) * C822 - (C32768 + C32769) * C828 -
            (C32770 + C32771) * C823) *
               C139289 * C47031 +
           ((C40759 + C40758) * C827 -
            ((C30813 * C5474 + C139600 * C5954 + C30812 * C3900 +
              C30408 * C4413) *
                 C821 +
             (C30813 * C5471 + C139600 * C5951 + C30812 * C3891 +
              C30408 * C4407) *
                 C826) +
            (C40761 + C40760) * C822 -
            (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
             C30408 * C4409) *
                C828 -
            (C30813 * C5472 + C139600 * C5952 + C30812 * C3902 +
             C30408 * C4415) *
                C823) *
               C139289 * C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C30812 * C116 + C30408 * C561 + C30813 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C47031 +
            ((C77193 + C77194) * C3364 + (C77195 + C77196) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C80670 + C80671) * C139303 + (C80672 + C80673) * C3364) *
                C139289 * C139598 +
            ((C30813 * C4663 + C139600 * C5195 + C30812 * C1707 +
              C30408 * C2268) *
                 C139303 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C3364) *
                C139289 * C47031) *
               C139384) *
              C2565 +
          ((((C80673 + C80672) * C3364 + (C80671 + C80670) * C139303) *
                C139289 * C47031 +
            ((C80674 + C80675) * C3364 + (C80676 + C80677) * C139303) *
                C139289 * C139598) *
               C139384 -
           (((C79063 + C79064) * C139303 + (C79065 + C79066) * C3364) *
                C139289 * C139598 +
            ((C77196 + C77195) * C139303 + (C77194 + C77193) * C3364) *
                C139289 * C47031) *
               C139571) *
              C2566 +
          ((((C79066 + C79065) * C3364 + (C79064 + C79063) * C139303) *
                C139289 * C47031 +
            ((C79747 + C79748) * C3364 + (C79749 + C79750) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C30813 * C67959 + C139600 * C68455 + C30812 * C17961 +
              C30408 * C18621) *
                 C139303 +
             (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
              C30408 * C18619) *
                 C3364) *
                C139289 * C139598 +
            ((C80677 + C80676) * C139303 + (C80675 + C80674) * C3364) *
                C139289 * C47031) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30812 * C107 + C30408 * C555 + C30813 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C30812 * C182 + C30408 * C641 + C30813 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C47031 +
            ((C77193 + C77194) * C181 + (C77300 + C77299) * C139346) * C139289 *
                C139598) *
               C821 -
           (((C31839 + C31840) * C139346 + (C31726 + C31725) * C181) * C139289 *
                C139598 +
            ((C30930 + C30929) * C139346 + (C30839 + C30840) * C181) * C139289 *
                C47031) *
               C822 +
           (((C30843 + C30844) * C181 + (C30932 + C30931) * C139346) * C139289 *
                C47031 +
            ((C31730 + C31729) * C181 + (C31841 + C31842) * C139346) * C139289 *
                C139598) *
               C823) *
              C139571 +
          ((((C32764 + C32765) * C181 + (C32878 + C32879) * C139346) * C139289 *
                C47031 +
            ((C40759 + C40758) * C181 + (C40896 + C40897) * C139346) * C139289 *
                C139598) *
               C822 -
           (((C30813 * C5557 + C139600 * C6029 + C30812 * C3989 +
              C30408 * C4493) *
                 C139346 +
             (C30813 * C5471 + C139600 * C5951 + C30812 * C3891 +
              C30408 * C4407) *
                 C181) *
                C139289 * C139598 +
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C139346 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C181) *
                C139289 * C47031) *
               C821 -
           (((C30813 * C5555 + C139600 * C6031 + C30812 * C3991 +
              C30408 * C4497) *
                 C139346 +
             (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
              C30408 * C4409) *
                 C181) *
                C139289 * C139598 +
            ((C32881 + C32880) * C139346 + (C32768 + C32769) * C181) * C139289 *
                C47031) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C2660 +
            (C30812 * C182 + C30408 * C641 + C30813 * C1794 + C139600 * C2368) *
                C2565 -
            (C77194 + C77193) * C2661 - (C77299 + C77300) * C2566 +
            (C79066 + C79065) * C2662 + (C79169 + C79170) * C2567) *
               C139289 * C47031 +
           ((C77193 + C77194) * C2660 + (C77300 + C77299) * C2565 -
            (C79065 + C79066) * C2661 - (C79170 + C79169) * C2566 +
            (C79747 + C79748) * C2662 + (C79822 + C79821) * C2567) *
               C139289 * C139598) *
              C139303 * C139571 +
          (((C80673 + C80672) * C2661 -
            ((C30813 * C4746 + C139600 * C5285 + C30812 * C1794 +
              C30408 * C2368) *
                 C2565 +
             (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
              C30408 * C2264) *
                 C2660) +
            (C80784 + C80785) * C2566 - (C80675 + C80674) * C2662 -
            (C80786 + C80787) * C2567) *
               C139289 * C47031 +
           ((C80674 + C80675) * C2661 -
            ((C80785 + C80784) * C2565 + (C80672 + C80673) * C2660) +
            (C80787 + C80786) * C2566 -
            (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
             C30408 * C18619) *
                C2662 -
            (C30813 * C68052 + C139600 * C68538 + C30812 * C18089 +
             C30408 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C139289 * C47031 +
           ((C77193 + C77194) * C1875 + (C77403 + C77404) * C139571 -
            (C30813 * C5471 + C139600 * C5951 + C30812 * C3891 +
             C30408 * C4407) *
                C1876 -
            (C30813 * C5637 + C139600 * C6106 + C30812 * C4075 +
             C30408 * C4573) *
                C139384) *
               C139289 * C139598) *
              C139346 * C821 +
          (((C32764 + C32765) * C1876 -
            ((C31014 + C31013) * C139571 + (C30839 + C30840) * C1875) +
            (C32989 + C32988) * C139384) *
               C139289 * C47031 +
           ((C40759 + C40758) * C1876 -
            ((C31949 + C31950) * C139571 + (C31726 + C31725) * C1875) +
            (C41032 + C41033) * C139384) *
               C139289 * C139598) *
              C139346 * C822 +
          (((C30843 + C30844) * C1875 + (C31016 + C31015) * C139571 -
            (C32768 + C32769) * C1876 - (C32991 + C32990) * C139384) *
               C139289 * C47031 +
           ((C31730 + C31729) * C1875 + (C31951 + C31952) * C139571 -
            (C30813 * C5469 + C139600 * C5949 + C30812 * C3893 +
             C30408 * C4409) *
                C1876 -
            (C30813 * C5635 + C139600 * C6108 + C30812 * C4077 +
             C30408 * C4575) *
                C139384) *
               C139289 * C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30812 * C107 + C30408 * C555 + C30813 * C1700 + C139600 * C2264) *
                C1875 +
            (C30812 * C245 + C30408 * C719 + C30813 * C1879 + C139600 * C2460) *
                C139571 -
            (C30813 * C4656 + C139600 * C5191 + C30812 * C1700 +
             C30408 * C2264) *
                C1876 -
            (C30813 * C4831 + C139600 * C5373 + C30812 * C1879 +
             C30408 * C2460) *
                C139384) *
               C139289 * C47031 +
           ((C77193 + C77194) * C1875 + (C77403 + C77404) * C139571 -
            (C80672 + C80673) * C1876 - (C80894 + C80895) * C139384) *
               C139289 * C139598) *
              C2565 +
          (((C80673 + C80672) * C1876 -
            ((C77404 + C77403) * C139571 + (C77194 + C77193) * C1875) +
            (C80895 + C80894) * C139384) *
               C139289 * C47031 +
           ((C80674 + C80675) * C1876 -
            ((C79273 + C79274) * C139571 + (C79065 + C79066) * C1875) +
            (C80896 + C80897) * C139384) *
               C139289 * C139598) *
              C2566 +
          (((C79066 + C79065) * C1875 + (C79274 + C79273) * C139571 -
            (C80675 + C80674) * C1876 - (C80897 + C80896) * C139384) *
               C139289 * C47031 +
           ((C79747 + C79748) * C1875 + (C79893 + C79894) * C139571 -
            (C30813 * C67958 + C139600 * C68454 + C30812 * C17959 +
             C30408 * C18619) *
                C1876 -
            (C30813 * C68134 + C139600 * C68616 + C30812 * C18203 +
             C30408 * C18855) *
                C139384) *
               C139289 * C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6694 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139601 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C6695 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C6696 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C6691) *
               C139448 * C92451 +
           ((C94108 + C94109) * C6694 + (C94110 + C94111) * C139601 -
            (C94112 + C94113) * C6695 - (C94114 + C94115) * C139590 +
            (C94116 + C94117) * C6696 + (C94118 + C94119) * C6691) *
               C139448 * C139600) *
              C139372 * C6692 +
          (((C47765 + C47764) * C6695 -
            ((C47763 + C47762) * C139601 + (C47761 + C47760) * C6694) +
            (C47767 + C47766) * C139590 - (C47769 + C47768) * C6696 -
            (C47771 + C47770) * C6691) *
               C139448 * C92451 +
           ((C56380 + C56381) * C6695 -
            ((C51256 + C51257) * C139601 + (C51258 + C51259) * C6694) +
            (C56382 + C56383) * C139590 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C6696 -
            (C47034 * C8122 + C139587 * C8123 + C47033 * C3902 +
             C47029 * C3911) *
                C6691) *
               C139448 * C139600) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6771 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C6692 -
            (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
               C139448 * C92451 +
           ((C94108 + C94109) * C6771 + (C94230 + C94231) * C6692 -
            (C51258 + C51259) * C6772 - (C51371 + C51370) * C139360) *
               C139448 * C139600) *
              C139601 +
          (((C47765 + C47764) * C6772 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C6692 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C6771) +
            (C47884 + C47885) * C139360) *
               C139448 * C92451 +
           ((C56380 + C56381) * C6772 -
            ((C94232 + C94233) * C6692 + (C94112 + C94113) * C6771) +
            (C56519 + C56518) * C139360) *
               C139448 * C139600) *
              C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C6771 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C6692 -
            (C47769 + C47768) * C6772 - (C47886 + C47887) * C139360) *
               C139448 * C92451 +
           ((C94116 + C94117) * C6771 + (C94234 + C94235) * C6692 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C6772 -
            (C47034 * C8222 + C139587 * C8223 + C47033 * C3991 +
             C47029 * C3997) *
                C139360) *
               C139448 * C139600) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C92451 +
            ((C94108 + C94109) * C244 + (C94347 + C94346) * C139372) * C139448 *
                C139600) *
               C6692 -
           (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
                C139600 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
                C92451) *
               C139360) *
              C139601 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C139448 *
                C92451 +
            ((C56380 + C56381) * C244 + (C56654 + C56655) * C139372) * C139448 *
                C139600) *
               C139360 -
           (((C94349 + C94348) * C139372 + (C94112 + C94113) * C244) * C139448 *
                C139600 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139448 * C92451) *
               C6692) *
              C139590 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                 C139372) *
                C139448 * C92451 +
            ((C94116 + C94117) * C244 + (C94351 + C94350) * C139372) * C139448 *
                C139600) *
               C6692 -
           (((C47034 * C8322 + C139587 * C8323 + C47033 * C4077 +
              C47029 * C4083) *
                 C139372 +
             (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
              C47029 * C3899) *
                 C244) *
                C139448 * C139600 +
            ((C48003 + C48002) * C139372 + (C47769 + C47768) * C244) * C139448 *
                C92451) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6694 +
             (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
             C338 * C139590 + C339 * C6696 + C340 * C6691) *
                C92451 +
            (C41426 + C41427 - C41428 - C41429 + C41430 + C41431) * C139600) *
               C47029 +
           ((C337 * C6694 + C338 * C139601 - C339 * C6695 - C340 * C139590 +
             C341 * C6696 + C342 * C6691) *
                C92451 +
            (C41432 + C41433 - C41434 - C41435 + C41436 + C41437) * C139600) *
               C139587) *
              C139372 * C6692 +
          (((C1116 * C6695 -
             ((C307 * C839 + C139448 * C1098) * C139601 +
              (C307 * C832 + C139448 * C1094) * C6694) +
             C1117 * C139590 - C1118 * C6696 - C1119 * C6691) *
                C92451 +
            (C8433 * C6695 - (C34921 * C139601 + C34920 * C6694) +
             C8434 * C139590 - C8435 * C6696 - C8436 * C6691) *
                C139600) *
               C47029 +
           ((C1118 * C6695 - (C1117 * C139601 + C1116 * C6694) +
             C1119 * C139590 - C1120 * C6696 - C1121 * C6691) *
                C92451 +
            (C8435 * C6695 - (C8434 * C139601 + C8433 * C6694) +
             C8436 * C139590 - (C307 * C8120 + C139448 * C8422) * C6696 -
             (C307 * C8122 + C139448 * C8423) * C6691) *
                C139600) *
               C139587) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C92451 +
            (C40472 + C40473 - C40474 - C40475) * C139600) *
               C47029 +
           ((C6996 + C6997 - C6998 - C6999) * C92451 + C40484 * C139600) *
               C139587) *
              C139601 +
          (((C6998 - (C6997 + C6996) + C6999) * C92451 + C40485 * C139600) *
               C47029 +
           ((C7002 - (C7001 + C7000) + C7003) * C92451 +
            (C8541 - (C8542 + C8543) + C8549) * C139600) *
               C139587) *
              C139590 +
          ((C7010 * C92451 + (C8543 + C8542 - C8541 - C8549) * C139600) *
               C47029 +
           ((C7006 + C7005 - C7004 - C7007) * C92451 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C139448 * C8422) * C6772 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139600) *
               C139587) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C92451 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
               C6692 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C92451) *
                C47029) *
               C139360) *
              C139601 +
          ((((C1310 + C1318) * C92451 + (C31608 + C31607) * C139600) * C47029 +
            ((C1307 + C1317) * C92451 + (C31609 + C31610) * C139600) *
                C139587) *
               C139360 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
               C6692) *
              C139590 +
          (((C501 * C92451 + (C30744 + C30743) * C139600) * C47029 +
            ((C489 + C499) * C92451 + (C30745 + C30746) * C139600) * C139587) *
               C6692 -
           ((((C307 * C8322 + C139448 * C8647) * C139372 +
              (C307 * C8120 + C139448 * C8422) * C244) *
                 C139600 +
             (C1319 + C1311) * C92451) *
                C139587 +
            ((C31610 + C31609) * C139600 + C1320 * C92451) * C47029) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6694 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139601 -
            (C92876 + C92877) * C6695 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C6696 + (C92882 + C92883) * C6691) *
               C47029 +
           ((C92877 + C92876) * C6694 + (C92879 + C92878) * C139601 -
            (C92881 + C92880) * C6695 - (C92883 + C92882) * C139590 +
            (C92885 + C92884) * C6696 + (C92887 + C92886) * C6691) *
               C139587) *
              C139448 * C139372 * C6692 +
          (((C93758 + C93759) * C6695 -
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139601 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C6694) +
            (C93760 + C93761) * C139590 - (C93762 + C93763) * C6696 -
            (C93764 + C93765) * C6691) *
               C47029 +
           ((C93763 + C93762) * C6695 -
            ((C93761 + C93760) * C139601 + (C93759 + C93758) * C6694) +
            (C93765 + C93764) * C139590 -
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C6696 -
            (C92850 * C8122 + C139600 * C8761 + C92849 * C841 +
             C92451 * C1403) *
                C6691) *
               C139587) *
              C139448 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6771 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C6692 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C6772 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139360) *
               C47029 +
           ((C92877 + C92876) * C6771 + (C92966 + C92967) * C6692 -
            (C93759 + C93758) * C6772 - (C93872 + C93873) * C139360) *
               C139587) *
              C139448 * C139601 +
          (((C93758 + C93759) * C6772 -
            ((C92967 + C92966) * C6692 + (C92876 + C92877) * C6771) +
            (C93873 + C93872) * C139360) *
               C47029 +
           ((C93763 + C93762) * C6772 -
            ((C92968 + C92969) * C6692 + (C92881 + C92880) * C6771) +
            (C93874 + C93875) * C139360) *
               C139587) *
              C139448 * C139590 +
          (((C92880 + C92881) * C6771 + (C92969 + C92968) * C6692 -
            (C93762 + C93763) * C6772 - (C93875 + C93874) * C139360) *
               C47029 +
           ((C92885 + C92884) * C6771 + (C92970 + C92971) * C6692 -
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C6772 -
            (C92850 * C8222 + C139600 * C8872 + C92849 * C928 +
             C92451 * C1500) *
                C139360) *
               C139587) *
              C139448 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) *
                C139587) *
               C139448 * C6692 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139372 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C244) *
                C47029) *
               C139448 * C139360) *
              C139601 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) *
                C139587) *
               C139448 * C139360 -
           (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
               C139448 * C6692) *
              C139590 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C47029 +
            ((C92885 + C92884) * C244 + (C93054 + C93055) * C139372) *
                C139587) *
               C139448 * C6692 -
           (((C92850 * C8322 + C139600 * C8985 + C92849 * C1012 +
              C92451 * C1603) *
                 C139372 +
             (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
              C92451 * C1398) *
                 C244) *
                C139587 +
            ((C93985 + C93984) * C139372 + (C93762 + C93763) * C244) * C47029) *
               C139448 * C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7401 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C7396 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C7402 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C139448 * C92451 +
           ((C94108 + C94109) * C7401 + (C94110 + C94111) * C7396 -
            (C94112 + C94113) * C7402 - (C94114 + C94115) * C139308) *
               C139448 * C139600) *
              C139372 * C139602 +
          (((C47765 + C47764) * C7402 -
            ((C47763 + C47762) * C7396 + (C47761 + C47760) * C7401) +
            (C47767 + C47766) * C139308) *
               C139448 * C92451 +
           ((C56380 + C56381) * C7402 -
            ((C51256 + C51257) * C7396 + (C51258 + C51259) * C7401) +
            (C56382 + C56383) * C139308) *
               C139448 * C139600) *
              C139372 * C139593 +
          (((C49689 + C49688) * C7401 + (C49687 + C49686) * C7396 -
            (C49685 + C49684) * C7402 - (C49691 + C49690) * C139308) *
               C139448 * C92451 +
           ((C51260 + C51261) * C7401 + (C51262 + C51263) * C7396 -
            (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
             C47029 * C3907) *
                C7402 -
            (C47034 * C3903 + C139587 * C3912 + C47033 * C3904 +
             C47029 * C3913) *
                C139308) *
               C139448 * C139600) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7477 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139602 -
            (C47761 + C47760) * C7478 - (C47882 + C47883) * C139593 +
            (C49689 + C49688) * C7479 + (C49798 + C49799) * C7400) *
               C139448 * C92451 +
           ((C94108 + C94109) * C7477 + (C94230 + C94231) * C139602 -
            (C51258 + C51259) * C7478 - (C51371 + C51370) * C139593 +
            (C51260 + C51261) * C7479 + (C51373 + C51372) * C7400) *
               C139448 * C139600) *
              C7396 +
          (((C47765 + C47764) * C7478 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139602 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C7477) +
            (C47884 + C47885) * C139593 - (C49685 + C49684) * C7479 -
            (C49800 + C49801) * C7400) *
               C139448 * C92451 +
           ((C56380 + C56381) * C7478 -
            ((C94232 + C94233) * C139602 + (C94112 + C94113) * C7477) +
            (C56519 + C56518) * C139593 -
            (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
             C47029 * C3907) *
                C7479 -
            (C47034 * C3992 + C139587 * C3998 + C47033 * C3993 +
             C47029 * C3999) *
                C7400) *
               C139448 * C139600) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C92451 +
            ((C94108 + C94109) * C244 + (C94347 + C94346) * C139372) * C139448 *
                C139600) *
               C139602 -
           (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
                C139600 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
                C92451) *
               C139593 +
           (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C139448 *
                C92451 +
            ((C51260 + C51261) * C244 + (C51482 + C51483) * C139372) * C139448 *
                C139600) *
               C7400) *
              C7396 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C139448 *
                C92451 +
            ((C56380 + C56381) * C244 + (C56654 + C56655) * C139372) * C139448 *
                C139600) *
               C139593 -
           (((C94349 + C94348) * C139372 + (C94112 + C94113) * C244) * C139448 *
                C139600 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139448 * C92451) *
               C139602 -
           (((C47034 * C4078 + C139587 * C4084 + C47033 * C4079 +
              C47029 * C4085) *
                 C139372 +
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C244) *
                C139448 * C139600 +
            ((C49911 + C49910) * C139372 + (C49685 + C49684) * C244) * C139448 *
                C92451) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7401 +
             (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
             C338 * C139308) *
                C92451 +
            (C40326 + C40327 - C40328 - C40329) * C139600) *
               C47029 +
           ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                C92451 +
            (C40330 + C40331 - C40332 - C40333) * C139600) *
               C139587) *
              C139372 * C139602 +
          (((C1116 * C7402 -
             ((C307 * C839 + C139448 * C1098) * C7396 +
              (C307 * C832 + C139448 * C1094) * C7401) +
             C1117 * C139308) *
                C92451 +
            (C40334 - (C40335 + C40336) + C40337) * C139600) *
               C47029 +
           ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
             C1119 * C139308) *
                C92451 +
            (C40338 - (C40339 + C40340) + C40341) * C139600) *
               C139587) *
              C139372 * C139593 +
          ((((C307 * C2570 + C139448 * C2827) * C7401 +
             (C307 * C2577 + C139448 * C2831) * C7396 - C2844 * C7402 -
             C2845 * C139308) *
                C92451 +
            (C34922 * C7401 + C34923 * C7396 - C33388 * C7402 -
             C33389 * C139308) *
                C139600) *
               C47029 +
           ((C2844 * C7401 + C2845 * C7396 - C2846 * C7402 - C2847 * C139308) *
                C92451 +
            (C33388 * C7401 + C33389 * C7396 -
             (C307 * C3894 + C139448 * C4164) * C7402 -
             (C307 * C3903 + C139448 * C4170) * C139308) *
                C139600) *
               C139587) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7477 +
             (C307 * C182 + C139448 * C394) * C139602 -
             (C307 * C832 + C139448 * C1094) * C7478 -
             (C307 * C927 + C139448 * C1195) * C139593 +
             (C307 * C2570 + C139448 * C2827) * C7479 +
             (C307 * C2663 + C139448 * C2921) * C7400) *
                C92451 +
            (C45680 + C45681 - C45682 - C45683 + C45684 + C45685) * C139600) *
               C47029 +
           ((C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C92451 +
            (C39408 + C39409 - C39410 - C39411 + C39412 + C39413) * C139600) *
               C139587) *
              C7396 +
          (((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C92451 +
            (C39410 - (C39409 + C39408) + C39411 - C39412 - C39413) * C139600) *
               C47029 +
           ((C7711 - (C7710 + C7709) + C7712 - C7713 - C7714) * C92451 +
            (C8435 * C7478 - (C2079 * C139602 + C1986 * C7477) +
             C8547 * C139593 - (C307 * C3894 + C139448 * C4164) * C7479 -
             (C307 * C3992 + C139448 * C4252) * C7400) *
                C139600) *
               C139587) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C92451 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
               C139602 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C92451) *
                C47029) *
               C139593 +
           ((((C307 * C2570 + C139448 * C2827) * C244 +
              (C307 * C2745 + C139448 * C3017) * C139372) *
                 C92451 +
             (C34922 * C244 + C35141 * C139372) * C139600) *
                C47029 +
            ((C3022 + C3030) * C92451 + (C33595 + C33599) * C139600) *
                C139587) *
               C7400) *
              C7396 +
          ((((C1310 + C1318) * C92451 + (C31608 + C31607) * C139600) * C47029 +
            ((C1307 + C1317) * C92451 + (C31609 + C31610) * C139600) *
                C139587) *
               C139593 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
               C139602 -
           ((((C307 * C4078 + C139448 * C4332) * C139372 +
              (C307 * C3894 + C139448 * C4164) * C244) *
                 C139600 +
             (C3031 + C3025) * C92451) *
                C139587 +
            ((C33599 + C33595) * C139600 + (C3030 + C3022) * C92451) * C47029) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7401 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C7396 -
            (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
               C47029 +
           ((C92877 + C92876) * C7401 + (C92879 + C92878) * C7396 -
            (C92881 + C92880) * C7402 - (C92883 + C92882) * C139308) *
               C139587) *
              C139448 * C139372 * C139602 +
          (((C93758 + C93759) * C7402 -
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C7396 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C7401) +
            (C93760 + C93761) * C139308) *
               C47029 +
           ((C93763 + C93762) * C7402 -
            ((C93761 + C93760) * C7396 + (C93759 + C93758) * C7401) +
            (C93765 + C93764) * C139308) *
               C139587) *
              C139448 * C139372 * C139593 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C7401 +
            (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
             C139600 * C4418) *
                C7396 -
            (C95682 + C95683) * C7402 - (C95684 + C95685) * C139308) *
               C47029 +
           ((C95683 + C95682) * C7401 + (C95685 + C95684) * C7396 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C7402 -
            (C92850 * C3903 + C139600 * C4416 + C92849 * C2579 +
             C92451 * C3111) *
                C139308) *
               C139587) *
              C139448 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7477 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139602 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C7478 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139593 +
            (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C7479 +
            (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
             C139600 * C4494) *
                C7400) *
               C47029 +
           ((C92877 + C92876) * C7477 + (C92966 + C92967) * C139602 -
            (C93759 + C93758) * C7478 - (C93872 + C93873) * C139593 +
            (C95683 + C95682) * C7479 + (C95788 + C95789) * C7400) *
               C139587) *
              C139448 * C7396 +
          (((C93758 + C93759) * C7478 -
            ((C92967 + C92966) * C139602 + (C92876 + C92877) * C7477) +
            (C93873 + C93872) * C139593 - (C95682 + C95683) * C7479 -
            (C95789 + C95788) * C7400) *
               C47029 +
           ((C93763 + C93762) * C7478 -
            ((C92968 + C92969) * C139602 + (C92881 + C92880) * C7477) +
            (C93874 + C93875) * C139593 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C7479 -
            (C92850 * C3992 + C139600 * C4498 + C92849 * C2665 +
             C92451 * C3201) *
                C7400) *
               C139587) *
              C139448 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) *
                C139587) *
               C139448 * C139602 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139372 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C244) *
                C47029) *
               C139448 * C139593 +
           (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
              C139600 * C4412) *
                 C244 +
             (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
              C139600 * C4576) *
                 C139372) *
                C47029 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) *
                C139587) *
               C139448 * C7400) *
              C7396 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) *
                C139587) *
               C139448 * C139593 -
           (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
               C139448 * C139602 -
           (((C92850 * C4078 + C139600 * C4578 + C92849 * C2747 +
              C92451 * C3297) *
                 C139372 +
             (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
              C92451 * C3107) *
                 C244) *
                C139587 +
            ((C95893 + C95892) * C139372 + (C95682 + C95683) * C244) * C47029) *
               C139448 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C7401 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C7396 -
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C7402 -
             (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                 C139308) *
                C139448 * C92451 +
            ((C94108 + C94109) * C7401 + (C94110 + C94111) * C7396 -
             (C94112 + C94113) * C7402 - (C94114 + C94115) * C139308) *
                C139448 * C139600) *
               C139571 +
           (((C94113 + C94112) * C7402 -
             ((C94111 + C94110) * C7396 + (C94109 + C94108) * C7401) +
             (C94115 + C94114) * C139308) *
                C139448 * C92451 +
            ((C97484 + C97485) * C7402 -
             ((C97486 + C97487) * C7396 + (C97488 + C97489) * C7401) +
             (C97490 + C97491) * C139308) *
                C139448 * C139600) *
               C139384) *
              C6692 +
          ((((C47765 + C47764) * C7402 -
             ((C47763 + C47762) * C7396 + (C47761 + C47760) * C7401) +
             (C47767 + C47766) * C139308) *
                C139448 * C92451 +
            ((C56380 + C56381) * C7402 -
             ((C51256 + C51257) * C7396 + (C51258 + C51259) * C7401) +
             (C56382 + C56383) * C139308) *
                C139448 * C139600) *
               C139571 +
           (((C51259 + C51258) * C7401 + (C51257 + C51256) * C7396 -
             (C56381 + C56380) * C7402 - (C56383 + C56382) * C139308) *
                C139448 * C92451 +
            ((C53084 + C53085) * C7401 + (C53086 + C53087) * C7396 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C7402 -
             (C47034 * C5472 + C139587 * C5478 + C47033 * C5473 +
              C47029 * C5479) *
                 C139308) *
                C139448 * C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C6771 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C6692 -
             (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
                C139448 * C92451 +
            ((C94108 + C94109) * C6771 + (C94230 + C94231) * C6692 -
             (C51258 + C51259) * C6772 - (C51371 + C51370) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C47765 + C47764) * C6772 -
             ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                  C6692 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C6771) +
             (C47884 + C47885) * C139360) *
                C139448 * C92451 +
            ((C56380 + C56381) * C6772 -
             ((C94232 + C94233) * C6692 + (C94112 + C94113) * C6771) +
             (C56519 + C56518) * C139360) *
                C139448 * C139600) *
               C139308) *
              C139571 +
          ((((C51259 + C51258) * C6772 -
             ((C94231 + C94230) * C6692 + (C94109 + C94108) * C6771) +
             (C51370 + C51371) * C139360) *
                C139448 * C92451 +
            ((C53084 + C53085) * C6772 -
             ((C97600 + C97601) * C6692 + (C97488 + C97489) * C6771) +
             (C53191 + C53190) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C94113 + C94112) * C6771 + (C94233 + C94232) * C6692 -
             (C56381 + C56380) * C6772 - (C56518 + C56519) * C139360) *
                C139448 * C92451 +
            ((C97484 + C97485) * C6771 + (C97598 + C97599) * C6692 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C6772 -
             (C47034 * C5555 + C139587 * C5558 + C47033 * C5556 +
              C47029 * C5559) *
                 C139360) *
                C139448 * C139600) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C1875 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139571 -
             (C94109 + C94108) * C1876 - (C94346 + C94347) * C139384) *
                C139448 * C92451 +
            ((C94108 + C94109) * C1875 + (C94347 + C94346) * C139571 -
             (C97488 + C97489) * C1876 - (C97709 + C97708) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C51259 + C51258) * C1876 -
             ((C47999 + C47998) * C139571 + (C47761 + C47760) * C1875) +
             (C51481 + C51480) * C139384) *
                C139448 * C92451 +
            ((C53084 + C53085) * C1876 -
             ((C51480 + C51481) * C139571 + (C51258 + C51259) * C1875) +
             (C53294 + C53295) * C139384) *
                C139448 * C139600) *
               C139360) *
              C7396 +
          ((((C94113 + C94112) * C1876 -
             ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                  C139571 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C1875) +
             (C94348 + C94349) * C139384) *
                C139448 * C92451 +
            ((C97484 + C97485) * C1876 -
             ((C94349 + C94348) * C139571 + (C94112 + C94113) * C1875) +
             (C97711 + C97710) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C47765 + C47764) * C1875 + (C48000 + C48001) * C139571 -
             (C56381 + C56380) * C1876 - (C56655 + C56654) * C139384) *
                C139448 * C92451 +
            ((C56380 + C56381) * C1875 + (C56654 + C56655) * C139571 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C1876 -
             (C47034 * C5635 + C139587 * C5638 + C47033 * C5636 +
              C47029 * C5639) *
                 C139384) *
                C139448 * C139600) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C7401 +
              (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
              C338 * C139308) *
                 C92451 +
             (C40326 + C40327 - C40328 - C40329) * C139600) *
                C47029 +
            ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                 C92451 +
             (C40330 + C40331 - C40332 - C40333) * C139600) *
                C139587) *
               C139571 +
           (((C40328 - (C40327 + C40326) + C40329) * C92451 +
             (C43508 - (C43509 + C43510) + C43511) * C139600) *
                C47029 +
            ((C40332 - (C40331 + C40330) + C40333) * C92451 +
             (C43512 - (C43513 + C43514) + C43515) * C139600) *
                C139587) *
               C139384) *
              C6692 +
          ((((C1116 * C7402 -
              ((C307 * C839 + C139448 * C1098) * C7396 +
               (C307 * C832 + C139448 * C1094) * C7401) +
              C1117 * C139308) *
                 C92451 +
             (C40334 - (C40335 + C40336) + C40337) * C139600) *
                C47029 +
            ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
              C1119 * C139308) *
                 C92451 +
             (C40338 - (C40339 + C40340) + C40341) * C139600) *
                C139587) *
               C139571 +
           (((C40336 + C40335 - C40334 - C40337) * C92451 +
             (C36846 * C7401 + C36847 * C7396 - C36848 * C7402 -
              C36849 * C139308) *
                 C139600) *
                C47029 +
            ((C40340 + C40339 - C40338 - C40341) * C92451 +
             (C36848 * C7401 + C36849 * C7396 -
              (C307 * C5469 + C139448 * C5715) * C7402 -
              (C307 * C5472 + C139448 * C5718) * C139308) *
                 C139600) *
                C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C6771 +
              (C307 * C182 + C139448 * C394) * C6692 -
              (C307 * C832 + C139448 * C1094) * C6772 -
              (C307 * C927 + C139448 * C1195) * C139360) *
                 C92451 +
             (C40472 + C40473 - C40474 - C40475) * C139600) *
                C47029 +
            ((C6996 + C6997 - C6998 - C6999) * C92451 + C40484 * C139600) *
                C139587) *
               C7396 +
           (((C6998 - (C6997 + C6996) + C6999) * C92451 + C40485 * C139600) *
                C47029 +
            ((C7002 - (C7001 + C7000) + C7003) * C92451 +
             (C8541 - (C8542 + C8543) + C8549) * C139600) *
                C139587) *
               C139308) *
              C139571 +
          ((((C40474 - (C40473 + C40472) + C40475) * C92451 +
             (C46568 - (C46569 + C46570) + C46571) * C139600) *
                C47029 +
            (C40485 * C92451 +
             (C40478 - (C40479 + C40480) + C40481) * C139600) *
                C139587) *
               C7396 +
           ((C40484 * C92451 + (C40480 + C40479 - C40478 - C40481) * C139600) *
                C47029 +
            ((C8543 + C8542 - C8541 - C8549) * C92451 +
             (C4932 * C6771 + C5019 * C6692 -
              (C307 * C5469 + C139448 * C5715) * C6772 -
              (C307 * C5555 + C139448 * C5797) * C139360) *
                 C139600) *
                C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[92] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C1875 +
                        (C307 * C245 + C139448 * C474) * C139571 -
                        C32431 * C1876 - C32649 * C139384) *
                           C92451 +
                       (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
                        C36121 * C139384) *
                           C139600) *
                          C47029 +
                      ((C2165 + C2166 - C2167 - C2184) * C92451 +
                       (C32641 + C32642 - C32643 - C32644) * C139600) *
                          C139587) *
                         C6692 +
                     (((C34920 * C1876 -
                        ((C307 * C1011 + C139448 * C1301) * C139571 +
                         (C307 * C832 + C139448 * C1094) * C1875) +
                        C35140 * C139384) *
                           C92451 +
                       (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
                        C37072 * C139384) *
                           C139600) *
                          C47029 +
                      ((C8649 - (C8650 + C8651) + C8661) * C92451 +
                       (C40616 - (C40617 + C40618) + C40619) * C139600) *
                          C139587) *
                         C139360) *
                        C7396 +
                    ((((C2167 - (C2166 + C2165) + C2184) * C92451 +
                       (C32643 - (C32642 + C32641) + C32644) * C139600) *
                          C47029 +
                      ((C2172 - (C2171 + C2170) + C2186) * C92451 +
                       (C32645 - (C32646 + C32647) + C32648) * C139600) *
                          C139587) *
                         C6692 +
                     (((C8651 + C8650 - C8649 - C8661) * C92451 +
                       (C40618 + C40617 - C40616 - C40619) * C139600) *
                          C47029 +
                      ((C8656 + C8655 - C8654 - C8662) * C92451 +
                       (C8435 * C1875 + C8660 * C139571 -
                        (C307 * C5469 + C139448 * C5715) * C1876 -
                        (C307 * C5635 + C139448 * C5874) * C139384) *
                           C139600) *
                          C139587) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
                C47029 +
            ((C92877 + C92876) * C7401 + (C92879 + C92878) * C7396 -
             (C92881 + C92880) * C7402 - (C92883 + C92882) * C139308) *
                C139587) *
               C139448 * C139571 +
           (((C94760 + C94761) * C7402 -
             ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
               C92451 * C2268) *
                  C7396 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C7401) +
             (C94762 + C94763) * C139308) *
                C47029 +
            ((C94765 + C94764) * C7402 -
             ((C94763 + C94762) * C7396 + (C94761 + C94760) * C7401) +
             (C94767 + C94766) * C139308) *
                C139587) *
               C139448 * C139384) *
              C6692 +
          ((((C93758 + C93759) * C7402 -
             ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
               C92451 * C1400) *
                  C7396 +
              (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
               C92451 * C1396) *
                  C7401) +
             (C93760 + C93761) * C139308) *
                C47029 +
            ((C93763 + C93762) * C7402 -
             ((C93761 + C93760) * C7396 + (C93759 + C93758) * C7401) +
             (C93765 + C93764) * C139308) *
                C139587) *
               C139448 * C139571 +
           (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C7401 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C7396 -
             (C102506 + C102507) * C7402 - (C102508 + C102509) * C139308) *
                C47029 +
            ((C102507 + C102506) * C7401 + (C102509 + C102508) * C7396 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C7402 -
             (C92850 * C5472 + C139600 * C5952 + C92849 * C3902 +
              C92451 * C4415) *
                 C139308) *
                C139587) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C6772 -
             (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
              C92451 * C1497) *
                 C139360) *
                C47029 +
            ((C92877 + C92876) * C6771 + (C92966 + C92967) * C6692 -
             (C93759 + C93758) * C6772 - (C93872 + C93873) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C93758 + C93759) * C6772 -
             ((C92967 + C92966) * C6692 + (C92876 + C92877) * C6771) +
             (C93873 + C93872) * C139360) *
                C47029 +
            ((C93763 + C93762) * C6772 -
             ((C92968 + C92969) * C6692 + (C92881 + C92880) * C6771) +
             (C93874 + C93875) * C139360) *
                C139587) *
               C139448 * C139308) *
              C139571 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C6772 -
             ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
               C92451 * C2368) *
                  C6692 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C6771) +
             (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
              C139600 * C6029) *
                 C139360) *
                C47029 +
            ((C102507 + C102506) * C6772 -
             ((C94875 + C94874) * C6692 + (C94761 + C94760) * C6771) +
             (C102644 + C102645) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C94760 + C94761) * C6771 + (C94874 + C94875) * C6692 -
             (C102506 + C102507) * C6772 - (C102645 + C102644) * C139360) *
                C47029 +
            ((C94765 + C94764) * C6771 + (C94876 + C94877) * C6692 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C6772 -
             (C92850 * C5555 + C139600 * C6031 + C92849 * C3991 +
              C92451 * C4497) *
                 C139360) *
                C139587) *
               C139448 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[92] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C1875 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139571 -
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C1876 -
             (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
              C92451 * C2460) *
                 C139384) *
                C47029 +
            ((C92877 + C92876) * C1875 + (C93050 + C93051) * C139571 -
             (C94761 + C94760) * C1876 - (C94984 + C94985) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C1876 -
             ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
               C92451 * C1602) *
                  C139571 +
              (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
               C92451 * C1396) *
                  C1875) +
             (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
              C139600 * C6106) *
                 C139384) *
                C47029 +
            ((C102507 + C102506) * C1876 -
             ((C93982 + C93983) * C139571 + (C93759 + C93758) * C1875) +
             (C102780 + C102781) * C139384) *
                C139587) *
               C139448 * C139360) *
              C7396 +
          ((((C94760 + C94761) * C1876 -
             ((C93051 + C93050) * C139571 + (C92876 + C92877) * C1875) +
             (C94985 + C94984) * C139384) *
                C47029 +
            ((C94765 + C94764) * C1876 -
             ((C93052 + C93053) * C139571 + (C92881 + C92880) * C1875) +
             (C94986 + C94987) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C93758 + C93759) * C1875 + (C93983 + C93982) * C139571 -
             (C102506 + C102507) * C1876 - (C102781 + C102780) * C139384) *
                C47029 +
            ((C93763 + C93762) * C1875 + (C93984 + C93985) * C139571 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C1876 -
             (C92850 * C5635 + C139600 * C6108 + C92849 * C4077 +
              C92451 * C4575) *
                 C139384) *
                C139587) *
               C139448 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C137108 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139562 -
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C137101 -
             (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                 C139308) *
                C139448 * C92451 +
            ((C94108 + C94109) * C137108 + (C94110 + C94111) * C139562 -
             (C94112 + C94113) * C137101 - (C94114 + C94115) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C94113 + C94112) * C137101 -
             ((C94111 + C94110) * C139562 + (C94109 + C94108) * C137108) +
             (C94115 + C94114) * C139308) *
                C139448 * C92451 +
            ((C97484 + C97485) * C137101 -
             ((C97486 + C97487) * C139562 + (C97488 + C97489) * C137108) +
             (C97490 + C97491) * C139308) *
                C139448 * C139600) *
               C139384) *
              C6692 +
          ((((C47765 + C47764) * C137101 -
             ((C47763 + C47762) * C139562 + (C47761 + C47760) * C137108) +
             (C47767 + C47766) * C139308) *
                C139448 * C92451 +
            ((C56380 + C56381) * C137101 -
             ((C51256 + C51257) * C139562 + (C51258 + C51259) * C137108) +
             (C56382 + C56383) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C51259 + C51258) * C137108 + (C51257 + C51256) * C139562 -
             (C56381 + C56380) * C137101 - (C56383 + C56382) * C139308) *
                C139448 * C92451 +
            ((C53084 + C53085) * C137108 + (C53086 + C53087) * C139562 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C137101 -
             (C47034 * C5472 + C139587 * C5478 + C47033 * C5473 +
              C47029 * C5479) *
                 C139308) *
                C139448 * C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C6771 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C6692 -
             (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
                C139448 * C92451 +
            ((C94108 + C94109) * C6771 + (C94230 + C94231) * C6692 -
             (C51258 + C51259) * C6772 - (C51371 + C51370) * C139360) *
                C139448 * C139600) *
               C139562 +
           (((C47765 + C47764) * C6772 -
             ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                  C6692 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C6771) +
             (C47884 + C47885) * C139360) *
                C139448 * C92451 +
            ((C56380 + C56381) * C6772 -
             ((C94232 + C94233) * C6692 + (C94112 + C94113) * C6771) +
             (C56519 + C56518) * C139360) *
                C139448 * C139600) *
               C139308) *
              C9074 +
          ((((C51259 + C51258) * C6772 -
             ((C94231 + C94230) * C6692 + (C94109 + C94108) * C6771) +
             (C51370 + C51371) * C139360) *
                C139448 * C92451 +
            ((C53084 + C53085) * C6772 -
             ((C97600 + C97601) * C6692 + (C97488 + C97489) * C6771) +
             (C53191 + C53190) * C139360) *
                C139448 * C139600) *
               C139562 +
           (((C94113 + C94112) * C6771 + (C94233 + C94232) * C6692 -
             (C56381 + C56380) * C6772 - (C56518 + C56519) * C139360) *
                C139448 * C92451 +
            ((C97484 + C97485) * C6771 + (C97598 + C97599) * C6692 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C6772 -
             (C47034 * C5555 + C139587 * C5558 + C47033 * C5556 +
              C47029 * C5559) *
                 C139360) *
                C139448 * C139600) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C9224 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C9074 -
             (C94109 + C94108) * C9225 - (C94346 + C94347) * C139384) *
                C139448 * C92451 +
            ((C94108 + C94109) * C9224 + (C94347 + C94346) * C9074 -
             (C97488 + C97489) * C9225 - (C97709 + C97708) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C51259 + C51258) * C9225 -
             ((C47999 + C47998) * C9074 + (C47761 + C47760) * C9224) +
             (C51481 + C51480) * C139384) *
                C139448 * C92451 +
            ((C53084 + C53085) * C9225 -
             ((C51480 + C51481) * C9074 + (C51258 + C51259) * C9224) +
             (C53294 + C53295) * C139384) *
                C139448 * C139600) *
               C139360) *
              C139562 +
          ((((C94113 + C94112) * C9225 -
             ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                  C9074 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C9224) +
             (C94348 + C94349) * C139384) *
                C139448 * C92451 +
            ((C97484 + C97485) * C9225 -
             ((C94349 + C94348) * C9074 + (C94112 + C94113) * C9224) +
             (C97711 + C97710) * C139384) *
                C139448 * C139600) *
               C6692 +
           (((C47765 + C47764) * C9224 + (C48000 + C48001) * C9074 -
             (C56381 + C56380) * C9225 - (C56655 + C56654) * C139384) *
                C139448 * C92451 +
            ((C56380 + C56381) * C9224 + (C56654 + C56655) * C9074 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C9225 -
             (C47034 * C5635 + C139587 * C5638 + C47033 * C5636 +
              C47029 * C5639) *
                 C139384) *
                C139448 * C139600) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C137108 +
                        (C307 * C116 + C139448 * C314) * C139562 -
                        C337 * C137101 - C338 * C139308) *
                           C92451 +
                       (C35876 + C35877 - C35878 - C35879) * C139600) *
                          C47029 +
                      ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
                        C340 * C139308) *
                           C92451 +
                       (C35880 + C35881 - C35882 - C35883) * C139600) *
                          C139587) *
                         C9074 +
                     (((C35878 - (C35877 + C35876) + C35879) * C92451 +
                       (C35884 - (C35902 + C35903) + C35889) * C139600) *
                          C47029 +
                      ((C35882 - (C35881 + C35880) + C35883) * C92451 +
                       (C35890 - (C35891 + C35892) + C35893) * C139600) *
                          C139587) *
                         C139384) *
                        C6692 +
                    ((((C1116 * C137101 -
                        ((C307 * C839 + C139448 * C1098) * C139562 +
                         (C307 * C832 + C139448 * C1094) * C137108) +
                        C1117 * C139308) *
                           C92451 +
                       (C44532 - (C44533 + C44534) + C44535) * C139600) *
                          C47029 +
                      ((C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
                        C1119 * C139308) *
                           C92451 +
                       (C44536 - (C44537 + C44538) + C44539) * C139600) *
                          C139587) *
                         C9074 +
                     (((C44534 + C44533 - C44532 - C44535) * C92451 +
                       (C36846 * C137108 + C36847 * C139562 - C36848 * C137101 -
                        C36849 * C139308) *
                           C139600) *
                          C47029 +
                      ((C44538 + C44537 - C44536 - C44539) * C92451 +
                       (C36848 * C137108 + C36849 * C139562 -
                        (C307 * C5469 + C139448 * C5715) * C137101 -
                        (C307 * C5472 + C139448 * C5718) * C139308) *
                           C139600) *
                          C139587) *
                         C139384) *
                        C139360)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C6771 +
              (C307 * C182 + C139448 * C394) * C6692 -
              (C307 * C832 + C139448 * C1094) * C6772 -
              (C307 * C927 + C139448 * C1195) * C139360) *
                 C92451 +
             (C40472 + C40473 - C40474 - C40475) * C139600) *
                C47029 +
            ((C6996 + C6997 - C6998 - C6999) * C92451 + C40484 * C139600) *
                C139587) *
               C139562 +
           (((C6998 - (C6997 + C6996) + C6999) * C92451 + C40485 * C139600) *
                C47029 +
            ((C7002 - (C7001 + C7000) + C7003) * C92451 +
             (C8541 - (C8542 + C8543) + C8549) * C139600) *
                C139587) *
               C139308) *
              C9074 +
          ((((C40474 - (C40473 + C40472) + C40475) * C92451 +
             (C46568 - (C46569 + C46570) + C46571) * C139600) *
                C47029 +
            (C40485 * C92451 +
             (C40478 - (C40479 + C40480) + C40481) * C139600) *
                C139587) *
               C139562 +
           ((C40484 * C92451 + (C40480 + C40479 - C40478 - C40481) * C139600) *
                C47029 +
            ((C8543 + C8542 - C8541 - C8549) * C92451 +
             (C4932 * C6771 + C5019 * C6692 -
              (C307 * C5469 + C139448 * C5715) * C6772 -
              (C307 * C5555 + C139448 * C5797) * C139360) *
                 C139600) *
                C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C139448 * C308) * C9224 +
                        (C307 * C245 + C139448 * C474) * C9074 -
                        C32431 * C9225 - C32649 * C139384) *
                           C92451 +
                       (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                        C36121 * C139384) *
                           C139600) *
                          C47029 +
                      ((C9449 + C9450 - C9451 - C9452) * C92451 +
                       (C41634 + C41635 - C41636 - C41637) * C139600) *
                          C139587) *
                         C6692 +
                     (((C34920 * C9225 -
                        ((C307 * C1011 + C139448 * C1301) * C9074 +
                         (C307 * C832 + C139448 * C1094) * C9224) +
                        C35140 * C139384) *
                           C92451 +
                       (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                        C37072 * C139384) *
                           C139600) *
                          C47029 +
                      ((C10298 - (C10299 + C10300) + C10301) * C92451 +
                       (C42722 - (C42723 + C42724) + C42725) * C139600) *
                          C139587) *
                         C139360) *
                        C139562 +
                    ((((C9451 - (C9450 + C9449) + C9452) * C92451 +
                       (C41636 - (C41635 + C41634) + C41637) * C139600) *
                          C47029 +
                      ((C9455 - (C9454 + C9453) + C9456) * C92451 +
                       (C41638 - (C41639 + C41640) + C41641) * C139600) *
                          C139587) *
                         C6692 +
                     (((C10300 + C10299 - C10298 - C10301) * C92451 +
                       (C42724 + C42723 - C42722 - C42725) * C139600) *
                          C47029 +
                      ((C10304 + C10303 - C10302 - C10305) * C92451 +
                       (C8435 * C9224 + C8660 * C9074 -
                        (C307 * C5469 + C139448 * C5715) * C9225 -
                        (C307 * C5635 + C139448 * C5874) * C139384) *
                           C139600) *
                          C139587) *
                         C139360) *
                        C139308)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C137108 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139562 -
             (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
                C47029 +
            ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139562 -
             (C92881 + C92880) * C137101 - (C92883 + C92882) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C94760 + C94761) * C137101 -
             ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
               C92451 * C2268) *
                  C139562 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C137108) +
             (C94762 + C94763) * C139308) *
                C47029 +
            ((C94765 + C94764) * C137101 -
             ((C94763 + C94762) * C139562 + (C94761 + C94760) * C137108) +
             (C94767 + C94766) * C139308) *
                C139587) *
               C139448 * C139384) *
              C6692 +
          ((((C93758 + C93759) * C137101 -
             ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
               C92451 * C1400) *
                  C139562 +
              (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
               C92451 * C1396) *
                  C137108) +
             (C93760 + C93761) * C139308) *
                C47029 +
            ((C93763 + C93762) * C137101 -
             ((C93761 + C93760) * C139562 + (C93759 + C93758) * C137108) +
             (C93765 + C93764) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C137108 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C139562 -
             (C102506 + C102507) * C137101 - (C102508 + C102509) * C139308) *
                C47029 +
            ((C102507 + C102506) * C137108 + (C102509 + C102508) * C139562 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C137101 -
             (C92850 * C5472 + C139600 * C5952 + C92849 * C3902 +
              C92451 * C4415) *
                 C139308) *
                C139587) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C6772 -
             (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
              C92451 * C1497) *
                 C139360) *
                C47029 +
            ((C92877 + C92876) * C6771 + (C92966 + C92967) * C6692 -
             (C93759 + C93758) * C6772 - (C93872 + C93873) * C139360) *
                C139587) *
               C139448 * C139562 +
           (((C93758 + C93759) * C6772 -
             ((C92967 + C92966) * C6692 + (C92876 + C92877) * C6771) +
             (C93873 + C93872) * C139360) *
                C47029 +
            ((C93763 + C93762) * C6772 -
             ((C92968 + C92969) * C6692 + (C92881 + C92880) * C6771) +
             (C93874 + C93875) * C139360) *
                C139587) *
               C139448 * C139308) *
              C9074 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C6772 -
             ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
               C92451 * C2368) *
                  C6692 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C6771) +
             (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
              C139600 * C6029) *
                 C139360) *
                C47029 +
            ((C102507 + C102506) * C6772 -
             ((C94875 + C94874) * C6692 + (C94761 + C94760) * C6771) +
             (C102644 + C102645) * C139360) *
                C139587) *
               C139448 * C139562 +
           (((C94760 + C94761) * C6771 + (C94874 + C94875) * C6692 -
             (C102506 + C102507) * C6772 - (C102645 + C102644) * C139360) *
                C47029 +
            ((C94765 + C94764) * C6771 + (C94876 + C94877) * C6692 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C6772 -
             (C92850 * C5555 + C139600 * C6031 + C92849 * C3991 +
              C92451 * C4497) *
                 C139360) *
                C139587) *
               C139448 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C9225 -
             (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
              C92451 * C2460) *
                 C139384) *
                C47029 +
            ((C92877 + C92876) * C9224 + (C93050 + C93051) * C9074 -
             (C94761 + C94760) * C9225 - (C94984 + C94985) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C9225 -
             ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
               C92451 * C1602) *
                  C9074 +
              (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
               C92451 * C1396) *
                  C9224) +
             (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
              C139600 * C6106) *
                 C139384) *
                C47029 +
            ((C102507 + C102506) * C9225 -
             ((C93982 + C93983) * C9074 + (C93759 + C93758) * C9224) +
             (C102780 + C102781) * C139384) *
                C139587) *
               C139448 * C139360) *
              C139562 +
          ((((C94760 + C94761) * C9225 -
             ((C93051 + C93050) * C9074 + (C92876 + C92877) * C9224) +
             (C94985 + C94984) * C139384) *
                C47029 +
            ((C94765 + C94764) * C9225 -
             ((C93052 + C93053) * C9074 + (C92881 + C92880) * C9224) +
             (C94986 + C94987) * C139384) *
                C139587) *
               C139448 * C6692 +
           (((C93758 + C93759) * C9224 + (C93983 + C93982) * C9074 -
             (C102506 + C102507) * C9225 - (C102781 + C102780) * C139384) *
                C47029 +
            ((C93763 + C93762) * C9224 + (C93984 + C93985) * C9074 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C9225 -
             (C92850 * C5635 + C139600 * C6108 + C92849 * C4077 +
              C92451 * C4575) *
                 C139384) *
                C139587) *
               C139448 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C92451 +
            ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) *
                C139448 * C139600) *
               C9074 -
           (((C97486 + C97487) * C139303 + (C97488 + C97489) * C3364) *
                C139448 * C139600 +
            ((C94111 + C94110) * C139303 + (C94109 + C94108) * C3364) *
                C139448 * C92451) *
               C139384) *
              C139602 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) *
                C139448 * C92451 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139448 * C139600) *
               C139384 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139448 * C139600 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C139448 * C92451) *
               C9074) *
              C139593 +
          ((((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) *
                C139448 * C92451 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139448 * C139600) *
               C9074 -
           (((C47034 * C19904 + C139587 * C19908 + C47033 * C19905 +
              C47029 * C19909) *
                 C139303 +
             (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
              C47029 * C19907) *
                 C3364) *
                C139448 * C139600 +
            ((C51263 + C51262) * C139303 + (C51261 + C51260) * C3364) *
                C139448 * C92451) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7477 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139602 -
            (C47761 + C47760) * C7478 - (C47882 + C47883) * C139593 +
            (C49689 + C49688) * C7479 + (C49798 + C49799) * C7400) *
               C139448 * C92451 +
           ((C94108 + C94109) * C7477 + (C94230 + C94231) * C139602 -
            (C51258 + C51259) * C7478 - (C51371 + C51370) * C139593 +
            (C51260 + C51261) * C7479 + (C51373 + C51372) * C7400) *
               C139448 * C139600) *
              C139303 * C9074 +
          (((C51259 + C51258) * C7478 -
            ((C94231 + C94230) * C139602 + (C94109 + C94108) * C7477) +
            (C51370 + C51371) * C139593 - (C51261 + C51260) * C7479 -
            (C51372 + C51373) * C7400) *
               C139448 * C92451 +
           ((C53084 + C53085) * C7478 -
            ((C97600 + C97601) * C139602 + (C97488 + C97489) * C7477) +
            (C53191 + C53190) * C139593 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C7479 -
            (C47034 * C20020 + C139587 * C20022 + C47033 * C20021 +
             C47029 * C20023) *
                C7400) *
               C139448 * C139600) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C9224 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C9074 -
            (C94109 + C94108) * C9225 - (C94346 + C94347) * C139384) *
               C139448 * C92451 +
           ((C94108 + C94109) * C9224 + (C94347 + C94346) * C9074 -
            (C97488 + C97489) * C9225 - (C97709 + C97708) * C139384) *
               C139448 * C139600) *
              C139602 +
          (((C51259 + C51258) * C9225 -
            ((C47999 + C47998) * C9074 + (C47761 + C47760) * C9224) +
            (C51481 + C51480) * C139384) *
               C139448 * C92451 +
           ((C53084 + C53085) * C9225 -
            ((C51480 + C51481) * C9074 + (C51258 + C51259) * C9224) +
            (C53294 + C53295) * C139384) *
               C139448 * C139600) *
              C139593 +
          (((C49689 + C49688) * C9224 + (C49909 + C49908) * C9074 -
            (C51261 + C51260) * C9225 - (C51483 + C51482) * C139384) *
               C139448 * C92451 +
           ((C51260 + C51261) * C9224 + (C51482 + C51483) * C9074 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C9225 -
            (C47034 * C20128 + C139587 * C20130 + C47033 * C20129 +
             C47029 * C20131) *
                C139384) *
               C139448 * C139600) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C92451 +
             (C34904 + C34905) * C139600) *
                C47029 +
            ((C337 * C3364 + C338 * C139303) * C92451 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C9074 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C92451) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C92451) *
                C47029) *
               C139384) *
              C139602 +
          ((((C34924 + C34925) * C92451 + (C36850 + C36851) * C139600) *
                C47029 +
            ((C34912 + C34913) * C92451 + (C36852 + C36853) * C139600) *
                C139587) *
               C139384 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C92451) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C92451) *
                C47029) *
               C9074) *
              C139593 +
          (((((C307 * C2570 + C139448 * C2827) * C3364 +
              (C307 * C2577 + C139448 * C2831) * C139303) *
                 C92451 +
             (C34926 + C34927) * C139600) *
                C47029 +
            ((C2844 * C3364 + C2845 * C139303) * C92451 +
             (C34918 + C34919) * C139600) *
                C139587) *
               C9074 -
           ((((C307 * C19904 + C139448 * C20238) * C139303 +
              (C307 * C19902 + C139448 * C20236) * C3364) *
                 C139600 +
             (C34919 + C34918) * C92451) *
                C139587 +
            (((C307 * C19905 + C139448 * C20239) * C139303 +
              (C307 * C19903 + C139448 * C20237) * C3364) *
                 C139600 +
             (C34927 + C34926) * C92451) *
                C47029) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7477 +
             (C307 * C182 + C139448 * C394) * C139602 -
             (C307 * C832 + C139448 * C1094) * C7478 -
             (C307 * C927 + C139448 * C1195) * C139593 +
             (C307 * C2570 + C139448 * C2827) * C7479 +
             (C307 * C2663 + C139448 * C2921) * C7400) *
                C92451 +
            (C45680 + C45681 - C45682 - C45683 + C45684 + C45685) * C139600) *
               C47029 +
           ((C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C92451 +
            (C39408 + C39409 - C39410 - C39411 + C39412 + C39413) * C139600) *
               C139587) *
              C139303 * C9074 +
          (((C45682 - (C45681 + C45680) + C45683 - C45684 - C45685) * C92451 +
            (C36846 * C7478 - (C36010 * C139602 + C35899 * C7477) +
             C36966 * C139593 - (C307 * C19903 + C139448 * C20237) * C7479 -
             (C307 * C20021 + C139448 * C20338) * C7400) *
                C139600) *
               C47029 +
           ((C39410 - (C39409 + C39408) + C39411 - C39412 - C39413) * C92451 +
            (C36848 * C7478 - (C5018 * C139602 + C4930 * C7477) +
             C36967 * C139593 - (C307 * C19902 + C139448 * C20236) * C7479 -
             (C307 * C20020 + C139448 * C20339) * C7400) *
                C139600) *
               C139587) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[94] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C139448 * C308) * C9224 +
                       (C307 * C245 + C139448 * C474) * C9074 - C32431 * C9225 -
                       C32649 * C139384) *
                          C92451 +
                      (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                       C36121 * C139384) *
                          C139600) *
                         C47029 +
                     ((C9449 + C9450 - C9451 - C9452) * C92451 +
                      (C41634 + C41635 - C41636 - C41637) * C139600) *
                         C139587) *
                        C139602 +
                    (((C34920 * C9225 -
                       ((C307 * C1011 + C139448 * C1301) * C9074 +
                        (C307 * C832 + C139448 * C1094) * C9224) +
                       C35140 * C139384) *
                          C92451 +
                      (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                       C37072 * C139384) *
                          C139600) *
                         C47029 +
                     ((C10298 - (C10299 + C10300) + C10301) * C92451 +
                      (C42722 - (C42723 + C42724) + C42725) * C139600) *
                         C139587) *
                        C139593 +
                    ((((C307 * C2570 + C139448 * C2827) * C9224 +
                       (C307 * C2745 + C139448 * C3017) * C9074 -
                       C34922 * C9225 - C35141 * C139384) *
                          C92451 +
                      (C34922 * C9224 + C35141 * C9074 -
                       (C307 * C19903 + C139448 * C20237) * C9225 -
                       (C307 * C20129 + C139448 * C20438) * C139384) *
                          C139600) *
                         C47029 +
                     ((C2844 * C9224 + C3028 * C9074 - C33388 * C9225 -
                       C33598 * C139384) *
                          C92451 +
                      (C33388 * C9224 + C33598 * C9074 -
                       (C307 * C19902 + C139448 * C20236) * C9225 -
                       (C307 * C20128 + C139448 * C20439) * C139384) *
                          C139600) *
                         C139587) *
                        C7400) *
                   C139303) /
                  (p * q * std::sqrt(p + q));
    d2eezx[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C47029 +
            ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
                C139587) *
               C139448 * C9074 -
           (((C94763 + C94762) * C139303 + (C94761 + C94760) * C3364) *
                C139587 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C47029) *
               C139448 * C139384) *
              C139602 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C47029 +
            ((C102507 + C102506) * C3364 + (C102509 + C102508) * C139303) *
                C139587) *
               C139448 * C139384 -
           (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) *
                C139587 +
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139303 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C3364) *
                C47029) *
               C139448 * C9074) *
              C139593 +
          ((((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
              C139600 * C4412) *
                 C3364 +
             (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
              C139600 * C4418) *
                 C139303) *
                C47029 +
            ((C95683 + C95682) * C3364 + (C95685 + C95684) * C139303) *
                C139587) *
               C139448 * C9074 -
           (((C92850 * C19904 + C139600 * C20540 + C92849 * C3904 +
              C92451 * C4417) *
                 C139303 +
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C3364) *
                C139587 +
            ((C92850 * C19905 + C139600 * C20541 + C92849 * C3905 +
              C92451 * C4418) *
                 C139303 +
             (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
              C92451 * C4412) *
                 C3364) *
                C47029) *
               C139448 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7477 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139602 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C7478 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139593 +
            (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C7479 +
            (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
             C139600 * C4494) *
                C7400) *
               C47029 +
           ((C92877 + C92876) * C7477 + (C92966 + C92967) * C139602 -
            (C93759 + C93758) * C7478 - (C93872 + C93873) * C139593 +
            (C95683 + C95682) * C7479 + (C95788 + C95789) * C7400) *
               C139587) *
              C139448 * C139303 * C9074 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C7478 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139602 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C7477) +
            (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
             C139600 * C6029) *
                C139593 -
            (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
             C92451 * C4412) *
                C7479 -
            (C92850 * C20021 + C139600 * C20650 + C92849 * C3994 +
             C92451 * C4494) *
                C7400) *
               C47029 +
           ((C102507 + C102506) * C7478 -
            ((C94875 + C94874) * C139602 + (C94761 + C94760) * C7477) +
            (C102644 + C102645) * C139593 -
            (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
             C92451 * C4411) *
                C7479 -
            (C92850 * C20020 + C139600 * C20651 + C92849 * C3993 +
             C92451 * C4496) *
                C7400) *
               C139587) *
              C139448 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[94] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C9224 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C9074 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C9225 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C47029 +
           ((C92877 + C92876) * C9224 + (C93050 + C93051) * C9074 -
            (C94761 + C94760) * C9225 - (C94984 + C94985) * C139384) *
               C139587) *
              C139448 * C139602 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C9225 -
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C9074 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C9224) +
            (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
             C139600 * C6106) *
                C139384) *
               C47029 +
           ((C102507 + C102506) * C9225 -
            ((C93982 + C93983) * C9074 + (C93759 + C93758) * C9224) +
            (C102780 + C102781) * C139384) *
               C139587) *
              C139448 * C139593 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C9224 +
            (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
             C139600 * C4576) *
                C9074 -
            (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
             C92451 * C4412) *
                C9225 -
            (C92850 * C20129 + C139600 * C20753 + C92849 * C4080 +
             C92451 * C4576) *
                C139384) *
               C47029 +
           ((C95683 + C95682) * C9224 + (C95892 + C95893) * C9074 -
            (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
             C92451 * C4411) *
                C9225 -
            (C92850 * C20128 + C139600 * C20754 + C92849 * C4079 +
             C92451 * C4577) *
                C139384) *
               C139587) *
              C139448 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C92451 +
            ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) *
                C139448 * C139600) *
               C139603 -
           (((C97486 + C97487) * C139303 + (C97488 + C97489) * C3364) *
                C139448 * C139600 +
            ((C94111 + C94110) * C139303 + (C94109 + C94108) * C3364) *
                C139448 * C92451) *
               C139596 +
           (((C97489 + C97488) * C3364 + (C97487 + C97486) * C139303) *
                C139448 * C92451 +
            ((C99280 + C99281) * C3364 + (C99282 + C99283) * C139303) *
                C139448 * C139600) *
               C10691) *
              C6692 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) *
                C139448 * C92451 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139448 * C139600) *
               C139596 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139448 * C139600 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C139448 * C92451) *
               C139603 -
           (((C47034 * C20832 + C139587 * C20836 + C47033 * C20833 +
              C47029 * C20837) *
                 C139303 +
             (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
              C47029 * C20835) *
                 C3364) *
                C139448 * C139600 +
            ((C53087 + C53086) * C139303 + (C53085 + C53084) * C3364) *
                C139448 * C92451) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6771 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C6692 -
            (C47761 + C47760) * C6772 - (C47882 + C47883) * C139360) *
               C139448 * C92451 +
           ((C94108 + C94109) * C6771 + (C94230 + C94231) * C6692 -
            (C51258 + C51259) * C6772 - (C51371 + C51370) * C139360) *
               C139448 * C139600) *
              C139303 * C139603 +
          (((C51259 + C51258) * C6772 -
            ((C94231 + C94230) * C6692 + (C94109 + C94108) * C6771) +
            (C51370 + C51371) * C139360) *
               C139448 * C92451 +
           ((C53084 + C53085) * C6772 -
            ((C97600 + C97601) * C6692 + (C97488 + C97489) * C6771) +
            (C53191 + C53190) * C139360) *
               C139448 * C139600) *
              C139303 * C139596 +
          (((C97489 + C97488) * C6771 + (C97601 + C97600) * C6692 -
            (C53085 + C53084) * C6772 - (C53190 + C53191) * C139360) *
               C139448 * C92451 +
           ((C99280 + C99281) * C6771 + (C99354 + C99355) * C6692 -
            (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
             C47029 * C20835) *
                C6772 -
            (C47034 * C20904 + C139587 * C20906 + C47033 * C20905 +
             C47029 * C20907) *
                C139360) *
               C139448 * C139600) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C10840 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139603 -
            (C94109 + C94108) * C10841 - (C94346 + C94347) * C139596 +
            (C97489 + C97488) * C10842 + (C97708 + C97709) * C10691) *
               C139448 * C92451 +
           ((C94108 + C94109) * C10840 + (C94347 + C94346) * C139603 -
            (C97488 + C97489) * C10841 - (C97709 + C97708) * C139596 +
            (C99280 + C99281) * C10842 + (C99427 + C99426) * C10691) *
               C139448 * C139600) *
              C6692 +
          (((C51259 + C51258) * C10841 -
            ((C47999 + C47998) * C139603 + (C47761 + C47760) * C10840) +
            (C51481 + C51480) * C139596 - (C53085 + C53084) * C10842 -
            (C53295 + C53294) * C10691) *
               C139448 * C92451 +
           ((C53084 + C53085) * C10841 -
            ((C51480 + C51481) * C139603 + (C51258 + C51259) * C10840) +
            (C53294 + C53295) * C139596 -
            (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
             C47029 * C20835) *
                C10842 -
            (C47034 * C20974 + C139587 * C20976 + C47033 * C20975 +
             C47029 * C20977) *
                C10691) *
               C139448 * C139600) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C92451 +
             (C34904 + C34905) * C139600) *
                C47029 +
            ((C337 * C3364 + C338 * C139303) * C92451 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C139603 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C92451) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C92451) *
                C47029) *
               C139596 +
           (((C36837 + C36836) * C92451 + (C37684 + C37685) * C139600) *
                C47029 +
            ((C36835 + C36834) * C92451 + (C37680 + C37681) * C139600) *
                C139587) *
               C10691) *
              C6692 +
          ((((C34924 + C34925) * C92451 + (C36850 + C36851) * C139600) *
                C47029 +
            ((C34912 + C34913) * C92451 + (C36852 + C36853) * C139600) *
                C139587) *
               C139596 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C92451) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C92451) *
                C47029) *
               C139603 -
           ((((C307 * C20832 + C139448 * C21046) * C139303 +
              (C307 * C20830 + C139448 * C21044) * C3364) *
                 C139600 +
             (C36853 + C36852) * C92451) *
                C139587 +
            (((C307 * C20833 + C139448 * C21047) * C139303 +
              (C307 * C20831 + C139448 * C21045) * C3364) *
                 C139600 +
             (C36851 + C36850) * C92451) *
                C47029) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C92451 +
            (C40472 + C40473 - C40474 - C40475) * C139600) *
               C47029 +
           ((C6996 + C6997 - C6998 - C6999) * C92451 + C40484 * C139600) *
               C139587) *
              C139303 * C139603 +
          (((C40474 - (C40473 + C40472) + C40475) * C92451 +
            (C46568 - (C46569 + C46570) + C46571) * C139600) *
               C47029 +
           (C40485 * C92451 + (C40478 - (C40479 + C40480) + C40481) * C139600) *
               C139587) *
              C139303 * C139596 +
          (((C46570 + C46569 - C46568 - C46571) * C92451 +
            (C37682 * C6771 + C37757 * C6692 -
             (C307 * C20831 + C139448 * C21045) * C6772 -
             (C307 * C20905 + C139448 * C21115) * C139360) *
                C139600) *
               C47029 +
           ((C40480 + C40479 - C40478 - C40481) * C92451 +
            (C35900 * C6771 + C36011 * C6692 -
             (C307 * C20830 + C139448 * C21044) * C6772 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C139600) *
               C139587) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C10840 +
             (C307 * C245 + C139448 * C474) * C139603 - C32431 * C10841 -
             C32649 * C139596 + C35899 * C10842 + C36121 * C10691) *
                C92451 +
            (C32431 * C10840 + C32649 * C139603 - C35899 * C10841 -
             C36121 * C139596 + C37682 * C10842 + C37829 * C10691) *
                C139600) *
               C47029 +
           ((C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C92451 +
            (C43712 + C43713 - C43714 - C43715 + C43716 + C43717) * C139600) *
               C139587) *
              C6692 +
          (((C34920 * C10841 -
             ((C307 * C1011 + C139448 * C1301) * C139603 +
              (C307 * C832 + C139448 * C1094) * C10840) +
             C35140 * C139596 - C36846 * C10842 - C37072 * C10691) *
                C92451 +
            (C36846 * C10841 - (C35140 * C139603 + C34920 * C10840) +
             C37072 * C139596 - (C307 * C20831 + C139448 * C21045) * C10842 -
             (C307 * C20975 + C139448 * C21182) * C10691) *
                C139600) *
               C47029 +
           ((C8433 * C10841 - (C1315 * C139603 + C1116 * C10840) +
             C8659 * C139596 - C36848 * C10842 - C37073 * C10691) *
                C92451 +
            (C36848 * C10841 - (C8659 * C139603 + C8433 * C10840) +
             C37073 * C139596 - (C307 * C20830 + C139448 * C21044) * C10842 -
             (C307 * C20974 + C139448 * C21183) * C10691) *
                C139600) *
               C139587) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C47029 +
            ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
                C139587) *
               C139448 * C139603 -
           (((C94763 + C94762) * C139303 + (C94761 + C94760) * C3364) *
                C139587 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C47029) *
               C139448 * C139596 +
           (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C47029 +
            ((C98113 + C98112) * C3364 + (C98115 + C98114) * C139303) *
                C139587) *
               C139448 * C10691) *
              C6692 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C47029 +
            ((C102507 + C102506) * C3364 + (C102509 + C102508) * C139303) *
                C139587) *
               C139448 * C139596 -
           (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) *
                C139587 +
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139303 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C3364) *
                C47029) *
               C139448 * C139603 -
           (((C92850 * C20832 + C139600 * C21252 + C92849 * C5473 +
              C92451 * C5953) *
                 C139303 +
             (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
              C92451 * C5950) *
                 C3364) *
                C139587 +
            ((C92850 * C20833 + C139600 * C21253 + C92849 * C5474 +
              C92451 * C5954) *
                 C139303 +
             (C92850 * C20831 + C139600 * C21251 + C92849 * C5471 +
              C92451 * C5951) *
                 C3364) *
                C47029) *
               C139448 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6771 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C6692 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C6772 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139360) *
               C47029 +
           ((C92877 + C92876) * C6771 + (C92966 + C92967) * C6692 -
            (C93759 + C93758) * C6772 - (C93872 + C93873) * C139360) *
               C139587) *
              C139448 * C139303 * C139603 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C6772 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C6692 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C6771) +
            (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
             C139600 * C6029) *
                C139360) *
               C47029 +
           ((C102507 + C102506) * C6772 -
            ((C94875 + C94874) * C6692 + (C94761 + C94760) * C6771) +
            (C102644 + C102645) * C139360) *
               C139587) *
              C139448 * C139303 * C139596 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C6771 +
            (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
             C139600 * C6561) *
                C6692 -
            (C92850 * C20831 + C139600 * C21251 + C92849 * C5471 +
             C92451 * C5951) *
                C6772 -
            (C92850 * C20905 + C139600 * C21321 + C92849 * C5557 +
             C92451 * C6029) *
                C139360) *
               C47029 +
           ((C98113 + C98112) * C6771 + (C98218 + C98219) * C6692 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C6772 -
            (C92850 * C20904 + C139600 * C21320 + C92849 * C5556 +
             C92451 * C6030) *
                C139360) *
               C139587) *
              C139448 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C10840 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139603 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C10841 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139596 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C10691) *
               C47029 +
           ((C92877 + C92876) * C10840 + (C93050 + C93051) * C139603 -
            (C94761 + C94760) * C10841 - (C94984 + C94985) * C139596 +
            (C98113 + C98112) * C10842 + (C98322 + C98323) * C10691) *
               C139587) *
              C139448 * C6692 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C10841 -
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139603 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C10840) +
            (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
             C139600 * C6106) *
                C139596 -
            (C92850 * C20831 + C139600 * C21251 + C92849 * C5471 +
             C92451 * C5951) *
                C10842 -
            (C92850 * C20975 + C139600 * C21388 + C92849 * C5637 +
             C92451 * C6106) *
                C10691) *
               C47029 +
           ((C102507 + C102506) * C10841 -
            ((C93982 + C93983) * C139603 + (C93759 + C93758) * C10840) +
            (C102780 + C102781) * C139596 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C10842 -
            (C92850 * C20974 + C139600 * C21389 + C92849 * C5636 +
             C92451 * C6107) *
                C10691) *
               C139587) *
              C139448 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[96] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139562 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C139448 * C92451 +
           ((C94108 + C94109) * C137108 + (C94110 + C94111) * C139562 -
            (C94112 + C94113) * C137101 - (C94114 + C94115) * C139308) *
               C139448 * C139600) *
              C139372 * C2565 +
          (((C47765 + C47764) * C137101 -
            ((C47763 + C47762) * C139562 + (C47761 + C47760) * C137108) +
            (C47767 + C47766) * C139308) *
               C139448 * C92451 +
           ((C56380 + C56381) * C137101 -
            ((C51256 + C51257) * C139562 + (C51258 + C51259) * C137108) +
            (C56382 + C56383) * C139308) *
               C139448 * C139600) *
              C139372 * C2566 +
          (((C49689 + C49688) * C137108 + (C49687 + C49686) * C139562 -
            (C49685 + C49684) * C137101 - (C49691 + C49690) * C139308) *
               C139448 * C92451 +
           ((C51260 + C51261) * C137108 + (C51262 + C51263) * C139562 -
            (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
             C47029 * C3907) *
                C137101 -
            (C47034 * C3903 + C139587 * C3912 + C47033 * C3904 +
             C47029 * C3913) *
                C139308) *
               C139448 * C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
               C92 -
           (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
               C94 -
           (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139587 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C139448 * C92451 +
          ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
            C139587 * C1702) *
               C103 +
           (C47033 * C1707 + C47029 * C1714 + C47034 * C1706 +
            C139587 * C1713) *
               C92 -
           (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
            C47029 * C1702) *
               C104 -
           (C47034 * C1705 + C139587 * C1712 + C47033 * C1706 +
            C47029 * C1713) *
               C93 +
           (C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
            C139587 * C1704) *
               C105 +
           (C47033 * C1705 + C47029 * C1712 + C47034 * C1709 +
            C139587 * C1715) *
               C94 -
           (C47034 * C1701 + C139587 * C1710 + C47033 * C1699 +
            C47029 * C1704) *
               C106 -
           (C47034 * C1711 + C139587 * C1716 + C47033 * C1709 +
            C47029 * C1715) *
               C95) *
              C139448 * C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139562 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C139448 * C92451 +
           ((C94108 + C94109) * C137108 + (C94110 + C94111) * C139562 -
            (C94112 + C94113) * C137101 - (C94114 + C94115) * C139308) *
               C139448 * C139600) *
              C4653 +
          (((C94113 + C94112) * C137101 -
            ((C94111 + C94110) * C139562 + (C94109 + C94108) * C137108) +
            (C94115 + C94114) * C139308) *
               C139448 * C92451 +
           ((C97484 + C97485) * C137101 -
            ((C97486 + C97487) * C139562 + (C97488 + C97489) * C137108) +
            (C97490 + C97491) * C139308) *
               C139448 * C139600) *
              C4654 +
          (((C97489 + C97488) * C137108 + (C97487 + C97486) * C139562 -
            (C97485 + C97484) * C137101 - (C97491 + C97490) * C139308) *
               C139448 * C92451 +
           ((C47033 * C6165 + C47029 * C6171 + C47034 * C6164 +
             C139587 * C6170) *
                C137108 +
            (C47033 * C6168 + C47029 * C6174 + C47034 * C6167 +
             C139587 * C6173) *
                C139562 -
            (C47034 * C6163 + C139587 * C6169 + C47033 * C6164 +
             C47029 * C6170) *
                C137101 -
            (C47034 * C6166 + C139587 * C6172 + C47033 * C6167 +
             C47029 * C6173) *
                C139308) *
               C139448 * C139600) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[96] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C139448 * C92451 +
           ((C94108 + C94109) * C2660 + (C94230 + C94231) * C2565 -
            (C51258 + C51259) * C2661 - (C51371 + C51370) * C2566 +
            (C51260 + C51261) * C2662 + (C51373 + C51372) * C2567) *
               C139448 * C139600) *
              C139562 +
          (((C47765 + C47764) * C2661 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C2565 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C2660) +
            (C47884 + C47885) * C2566 - (C49685 + C49684) * C2662 -
            (C49800 + C49801) * C2567) *
               C139448 * C92451 +
           ((C56380 + C56381) * C2661 -
            ((C94232 + C94233) * C2565 + (C94112 + C94113) * C2660) +
            (C56519 + C56518) * C2566 -
            (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
             C47029 * C3907) *
                C2662 -
            (C47034 * C3992 + C139587 * C3998 + C47033 * C3993 +
             C47029 * C3999) *
                C2567) *
               C139448 * C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139346) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C181 +
            (C47033 * C1794 + C47029 * C1799 + C47034 * C1791 +
             C139587 * C1796) *
                C139346) *
               C139448 * C139600) *
              C92 -
          (((C47034 * C1792 + C139587 * C1797 + C47033 * C1791 +
             C47029 * C1796) *
                C139346 +
            (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
             C47029 * C1702) *
                C181) *
               C139448 * C139600 +
           ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                C139346 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C139448 * C92451) *
              C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139346) *
               C139448 * C92451 +
           ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C181 +
            (C47033 * C1792 + C47029 * C1797 + C47034 * C1793 +
             C139587 * C1798) *
                C139346) *
               C139448 * C139600) *
              C94 -
          (((C47034 * C1795 + C139587 * C1800 + C47033 * C1793 +
             C47029 * C1798) *
                C139346 +
            (C47034 * C1701 + C139587 * C1710 + C47033 * C1699 +
             C47029 * C1704) *
                C181) *
               C139448 * C139600 +
           ((C47034 * C186 + C139587 * C192 + C47033 * C185 + C47029 * C191) *
                C139346 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C139448 * C92451) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C92451 +
            ((C94108 + C94109) * C181 + (C94230 + C94231) * C139346) * C139448 *
                C139600) *
               C139562 -
           (((C94232 + C94233) * C139346 + (C94112 + C94113) * C181) * C139448 *
                C139600 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139448 * C92451) *
               C139308) *
              C4653 +
          ((((C94113 + C94112) * C181 + (C94233 + C94232) * C139346) * C139448 *
                C92451 +
            ((C97484 + C97485) * C181 + (C97598 + C97599) * C139346) * C139448 *
                C139600) *
               C139308 -
           (((C97600 + C97601) * C139346 + (C97488 + C97489) * C181) * C139448 *
                C139600 +
            ((C94231 + C94230) * C139346 + (C94109 + C94108) * C181) * C139448 *
                C92451) *
               C139562) *
              C4654 +
          ((((C97489 + C97488) * C181 + (C97601 + C97600) * C139346) * C139448 *
                C92451 +
            ((C47033 * C6165 + C47029 * C6171 + C47034 * C6164 +
              C139587 * C6170) *
                 C181 +
             (C47033 * C6227 + C47029 * C6230 + C47034 * C6226 +
              C139587 * C6229) *
                 C139346) *
                C139448 * C139600) *
               C139562 -
           (((C47034 * C6225 + C139587 * C6228 + C47033 * C6226 +
              C47029 * C6229) *
                 C139346 +
             (C47034 * C6163 + C139587 * C6169 + C47033 * C6164 +
              C47029 * C6170) *
                 C181) *
                C139448 * C139600 +
            ((C97599 + C97598) * C139346 + (C97485 + C97484) * C181) * C139448 *
                C92451) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[96] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C92451 +
            ((C94108 + C94109) * C244 + (C94347 + C94346) * C139372) * C139448 *
                C139600) *
               C2565 -
           (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
                C139600 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
                C92451) *
               C2566 +
           (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C139448 *
                C92451 +
            ((C51260 + C51261) * C244 + (C51482 + C51483) * C139372) * C139448 *
                C139600) *
               C2567) *
              C139562 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C139448 *
                C92451 +
            ((C56380 + C56381) * C244 + (C56654 + C56655) * C139372) * C139448 *
                C139600) *
               C2566 -
           (((C94349 + C94348) * C139372 + (C94112 + C94113) * C244) * C139448 *
                C139600 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139448 * C92451) *
               C2565 -
           (((C47034 * C4078 + C139587 * C4084 + C47033 * C4079 +
              C47029 * C4085) *
                 C139372 +
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C244) *
                C139448 * C139600 +
            ((C49911 + C49910) * C139372 + (C49685 + C49684) * C244) * C139448 *
                C92451) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C244 +
            (C47033 * C1879 + C47029 * C1884 + C47034 * C1878 +
             C139587 * C1883) *
                C139372) *
               C139448 * C139600) *
              C139346 * C92 -
          (((C47034 * C1877 + C139587 * C1882 + C47033 * C1878 +
             C47029 * C1883) *
                C139372 +
            (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
             C47029 * C1702) *
                C244) *
               C139448 * C139600 +
           ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                C139372 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C139448 * C92451) *
              C139346 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139372) *
               C139448 * C92451 +
           ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C244 +
            (C47033 * C1877 + C47029 * C1882 + C47034 * C1880 +
             C139587 * C1885) *
                C139372) *
               C139448 * C139600) *
              C139346 * C94 -
          (((C47034 * C1881 + C139587 * C1886 + C47033 * C1880 +
             C47029 * C1885) *
                C139372 +
            (C47034 * C1701 + C139587 * C1710 + C47033 * C1699 +
             C47029 * C1704) *
                C244) *
               C139448 * C139600 +
           ((C47034 * C249 + C139587 * C255 + C47033 * C248 + C47029 * C254) *
                C139372 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C139448 * C92451) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C4828 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C4653 -
            (C94109 + C94108) * C4829 - (C94346 + C94347) * C4654 +
            (C97489 + C97488) * C4830 + (C97708 + C97709) * C4655) *
               C139448 * C92451 +
           ((C94108 + C94109) * C4828 + (C94347 + C94346) * C4653 -
            (C97488 + C97489) * C4829 - (C97709 + C97708) * C4654 +
            (C47033 * C6165 + C47029 * C6171 + C47034 * C6164 +
             C139587 * C6170) *
                C4830 +
            (C47033 * C6287 + C47029 * C6290 + C47034 * C6286 +
             C139587 * C6289) *
                C4655) *
               C139448 * C139600) *
              C139346 * C139562 +
          (((C94113 + C94112) * C4829 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C4653 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C4828) +
            (C94348 + C94349) * C4654 - (C97485 + C97484) * C4830 -
            (C97710 + C97711) * C4655) *
               C139448 * C92451 +
           ((C97484 + C97485) * C4829 -
            ((C94349 + C94348) * C4653 + (C94112 + C94113) * C4828) +
            (C97711 + C97710) * C4654 -
            (C47034 * C6163 + C139587 * C6169 + C47033 * C6164 +
             C47029 * C6170) *
                C4830 -
            (C47034 * C6285 + C139587 * C6288 + C47033 * C6286 +
             C47029 * C6289) *
                C4655) *
               C139448 * C139600) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[96] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C92451 +
            (C35876 + C35877 - C35878 - C35879) * C139600) *
               C47029 +
           ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
             C340 * C139308) *
                C92451 +
            (C35880 + C35881 - C35882 - C35883) * C139600) *
               C139587) *
              C139372 * C2565 +
          (((C1116 * C137101 -
             ((C307 * C839 + C139448 * C1098) * C139562 +
              (C307 * C832 + C139448 * C1094) * C137108) +
             C1117 * C139308) *
                C92451 +
            (C44532 - (C44533 + C44534) + C44535) * C139600) *
               C47029 +
           ((C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
             C1119 * C139308) *
                C92451 +
            (C44536 - (C44537 + C44538) + C44539) * C139600) *
               C139587) *
              C139372 * C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C137108 +
             (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
             C2845 * C139308) *
                C92451 +
            (C34922 * C137108 + C34923 * C139562 - C33388 * C137101 -
             C33389 * C139308) *
                C139600) *
               C47029 +
           ((C2844 * C137108 + C2845 * C139562 - C2846 * C137101 -
             C2847 * C139308) *
                C92451 +
            (C33388 * C137108 + C33389 * C139562 -
             (C307 * C3894 + C139448 * C4164) * C137101 -
             (C307 * C3903 + C139448 * C4170) * C139308) *
                C139600) *
               C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C103 +
            (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C92451 +
           (C32431 * C103 + C32432 * C92 - C1984 * C104 - C1985 * C93 +
            C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
               C139600) *
              C47029 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C92451 +
           (C1984 * C103 + C1985 * C92 - C1986 * C104 - C1987 * C93 +
            C1988 * C105 + C1989 * C94 -
            (C307 * C1701 + C139448 * C1965) * C106 -
            (C307 * C1711 + C139448 * C1970) * C95) *
               C139600) *
              C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C92451 +
            (C35876 + C35877 - C35878 - C35879) * C139600) *
               C47029 +
           ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
             C340 * C139308) *
                C92451 +
            (C35880 + C35881 - C35882 - C35883) * C139600) *
               C139587) *
              C4653 +
          (((C35878 - (C35877 + C35876) + C35879) * C92451 +
            (C35884 - (C35902 + C35903) + C35889) * C139600) *
               C47029 +
           ((C35882 - (C35881 + C35880) + C35883) * C92451 +
            (C35890 - (C35891 + C35892) + C35893) * C139600) *
               C139587) *
              C4654 +
          (((C35903 + C35902 - C35884 - C35889) * C92451 +
            (C37682 * C137108 + C37683 * C139562 - C35900 * C137101 -
             C35901 * C139308) *
                C139600) *
               C47029 +
           ((C35892 + C35891 - C35890 - C35893) * C92451 +
            (C35900 * C137108 + C35901 * C139562 -
             (C307 * C6163 + C139448 * C6341) * C137101 -
             (C307 * C6166 + C139448 * C6344) * C139308) *
                C139600) *
               C139587) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[96] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C92451 +
            (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C139600) *
               C47029 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C92451 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139562 +
          (((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C92451 +
            (C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C139600) *
               C47029 +
           ((C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C92451 +
            (C8435 * C2661 - (C2079 * C2565 + C1986 * C2660) + C8547 * C2566 -
             (C307 * C3894 + C139448 * C4164) * C2662 -
             (C307 * C3992 + C139448 * C4252) * C2567) *
                C139600) *
               C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C92451 +
            (C32533 + C32540) * C139600) *
               C47029 +
           ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
              C92 -
          ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
           (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
              C93 +
          ((C421 * C92451 + C32538 * C139600) * C47029 +
           ((C409 + C419) * C92451 + (C2075 + C2083) * C139600) * C139587) *
              C94 -
          ((((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139600 +
            (C420 + C410) * C92451) *
               C139587 +
           ((C2083 + C2075) * C139600 + C422 * C92451) * C47029) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C92451 +
             (C32533 + C32540) * C139600) *
                C47029 +
            ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
               C139562 -
           ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
               C139308) *
              C4653 +
          (((C32536 * C92451 + C36002 * C139600) * C47029 +
            (C32538 * C92451 + (C5015 + C5021) * C139600) * C139587) *
               C139308 -
           ((C36003 * C139600 + C32537 * C92451) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C92451) *
                C47029) *
               C139562) *
              C4654 +
          ((((C36006 + C36012) * C92451 + (C37754 + C37758) * C139600) *
                C47029 +
            (C36002 * C92451 + (C36007 + C36013) * C139600) * C139587) *
               C139562 -
           ((((C307 * C6225 + C139448 * C6397) * C139346 +
              (C307 * C6163 + C139448 * C6341) * C181) *
                 C139600 +
             (C5021 + C5015) * C92451) *
                C139587 +
            ((C36013 + C36007) * C139600 + C36003 * C92451) * C47029) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[96] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C92451 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
               C2565 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C92451) *
                C47029) *
               C2566 +
           ((((C307 * C2570 + C139448 * C2827) * C244 +
              (C307 * C2745 + C139448 * C3017) * C139372) *
                 C92451 +
             (C34922 * C244 + C35141 * C139372) * C139600) *
                C47029 +
            ((C3022 + C3030) * C92451 + (C33595 + C33599) * C139600) *
                C139587) *
               C2567) *
              C139562 +
          ((((C1310 + C1318) * C92451 + (C31608 + C31607) * C139600) * C47029 +
            ((C1307 + C1317) * C92451 + (C31609 + C31610) * C139600) *
                C139587) *
               C2566 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
               C2565 -
           ((((C307 * C4078 + C139448 * C4332) * C139372 +
              (C307 * C3894 + C139448 * C4164) * C244) *
                 C139600 +
             (C3031 + C3025) * C92451) *
                C139587 +
            ((C33599 + C33595) * C139600 + (C3030 + C3022) * C92451) * C47029) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C92451 +
            (C32431 * C244 + C32649 * C139372) * C139600) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
              C139346 * C92 -
          (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
           ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
              C139346 * C93 +
          ((C501 * C92451 + (C30744 + C30743) * C139600) * C47029 +
           ((C489 + C499) * C92451 + (C30745 + C30746) * C139600) * C139587) *
              C139346 * C94 -
          ((((C307 * C1881 + C139448 * C2163) * C139372 +
             (C307 * C1701 + C139448 * C1965) * C244) *
                C139600 +
            (C500 + C490) * C92451) *
               C139587 +
           ((C30746 + C30745) * C139600 + C502 * C92451) * C47029) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C4828 +
             (C307 * C245 + C139448 * C474) * C4653 - C32431 * C4829 -
             C32649 * C4654 + C35899 * C4830 + C36121 * C4655) *
                C92451 +
            (C32431 * C4828 + C32649 * C4653 - C35899 * C4829 - C36121 * C4654 +
             C37682 * C4830 + C37829 * C4655) *
                C139600) *
               C47029 +
           ((C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C92451 +
            (C36114 + C36115 - C36116 - C36117 + C36118 + C36123) * C139600) *
               C139587) *
              C139346 * C139562 +
          (((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C92451 +
            (C36116 - (C36115 + C36114) + C36117 - C36118 - C36123) * C139600) *
               C47029 +
           ((C5109 - (C5108 + C5107) + C5110 - C5111 - C5117) * C92451 +
            (C4932 * C4829 - (C2182 * C4653 + C1986 * C4828) + C5115 * C4654 -
             (C307 * C6163 + C139448 * C6341) * C4830 -
             (C307 * C6285 + C139448 * C6452) * C4655) *
                C139600) *
               C139587) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[96] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139562 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
               C47029 +
           ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139562 -
            (C92881 + C92880) * C137101 - (C92883 + C92882) * C139308) *
               C139587) *
              C139448 * C139372 * C2565 +
          (((C93758 + C93759) * C137101 -
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139562 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C137108) +
            (C93760 + C93761) * C139308) *
               C47029 +
           ((C93763 + C93762) * C137101 -
            ((C93761 + C93760) * C139562 + (C93759 + C93758) * C137108) +
            (C93765 + C93764) * C139308) *
               C139587) *
              C139448 * C139372 * C2566 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C137108 +
            (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
             C139600 * C4418) *
                C139562 -
            (C95682 + C95683) * C137101 - (C95684 + C95685) * C139308) *
               C47029 +
           ((C95683 + C95682) * C137108 + (C95685 + C95684) * C139562 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C137101 -
            (C92850 * C3903 + C139600 * C4416 + C92849 * C2579 +
             C92451 * C3111) *
                C139308) *
               C139587) *
              C139448 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C47029 +
          ((C92877 + C92876) * C103 + (C92879 + C92878) * C92 -
           (C92881 + C92880) * C104 - (C92883 + C92882) * C93 +
           (C92885 + C92884) * C105 + (C92887 + C92886) * C94 -
           (C92850 * C1701 + C139600 * C2267 + C92849 * C111 + C92451 * C559) *
               C106 -
           (C92850 * C1711 + C139600 * C2272 + C92849 * C122 + C92451 * C565) *
               C95) *
              C139587) *
         C139448 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139562 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
               C47029 +
           ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139562 -
            (C92881 + C92880) * C137101 - (C92883 + C92882) * C139308) *
               C139587) *
              C139448 * C4653 +
          (((C94760 + C94761) * C137101 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139562 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C137108) +
            (C94762 + C94763) * C139308) *
               C47029 +
           ((C94765 + C94764) * C137101 -
            ((C94763 + C94762) * C139562 + (C94761 + C94760) * C137108) +
            (C94767 + C94766) * C139308) *
               C139587) *
              C139448 * C4654 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C137108 +
            (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
             C139600 * C6508) *
                C139562 -
            (C98112 + C98113) * C137101 - (C98114 + C98115) * C139308) *
               C47029 +
           ((C98113 + C98112) * C137108 + (C98115 + C98114) * C139562 -
            (C92850 * C6163 + C139600 * C6503 + C92849 * C4658 +
             C92451 * C5193) *
                C137101 -
            (C92850 * C6166 + C139600 * C6506 + C92849 * C4665 +
             C92451 * C5197) *
                C139308) *
               C139587) *
              C139448 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[96] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C2661 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C2566 +
            (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
             C139600 * C4494) *
                C2567) *
               C47029 +
           ((C92877 + C92876) * C2660 + (C92966 + C92967) * C2565 -
            (C93759 + C93758) * C2661 - (C93872 + C93873) * C2566 +
            (C95683 + C95682) * C2662 + (C95788 + C95789) * C2567) *
               C139587) *
              C139448 * C139562 +
          (((C93758 + C93759) * C2661 -
            ((C92967 + C92966) * C2565 + (C92876 + C92877) * C2660) +
            (C93873 + C93872) * C2566 - (C95682 + C95683) * C2662 -
            (C95789 + C95788) * C2567) *
               C47029 +
           ((C93763 + C93762) * C2661 -
            ((C92968 + C92969) * C2565 + (C92881 + C92880) * C2660) +
            (C93874 + C93875) * C2566 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C2662 -
            (C92850 * C3992 + C139600 * C4498 + C92849 * C2665 +
             C92451 * C3201) *
                C2567) *
               C139587) *
              C139448 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139346) *
               C47029 +
           ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) * C139587) *
              C139448 * C92 -
          (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
           ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
              C139448 * C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C47029 +
           ((C92885 + C92884) * C181 + (C92970 + C92971) * C139346) * C139587) *
              C139448 * C94 -
          (((C92850 * C1795 + C139600 * C2369 + C92849 * C186 + C92451 * C645) *
                C139346 +
            (C92850 * C1701 + C139600 * C2267 + C92849 * C111 + C92451 * C559) *
                C181) *
               C139587 +
           ((C92971 + C92970) * C139346 + (C92884 + C92885) * C181) * C47029) *
              C139448 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) *
                C139587) *
               C139448 * C139562 -
           (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
               C139448 * C139308) *
              C4653 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C47029 +
            ((C94765 + C94764) * C181 + (C94876 + C94877) * C139346) *
                C139587) *
               C139448 * C139308 -
           (((C94875 + C94874) * C139346 + (C94761 + C94760) * C181) * C139587 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C47029) *
               C139448 * C139562) *
              C4654 +
          ((((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C47029 +
            ((C98113 + C98112) * C181 + (C98218 + C98219) * C139346) *
                C139587) *
               C139448 * C139562 -
           (((C92850 * C6225 + C139600 * C6559 + C92849 * C4748 +
              C92451 * C5287) *
                 C139346 +
             (C92850 * C6163 + C139600 * C6503 + C92849 * C4658 +
              C92451 * C5193) *
                 C181) *
                C139587 +
            ((C98219 + C98218) * C139346 + (C98112 + C98113) * C181) * C47029) *
               C139448 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[96] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) *
                C139587) *
               C139448 * C2565 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139372 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C244) *
                C47029) *
               C139448 * C2566 +
           (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
              C139600 * C4412) *
                 C244 +
             (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
              C139600 * C4576) *
                 C139372) *
                C47029 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) *
                C139587) *
               C139448 * C2567) *
              C139562 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) *
                C139587) *
               C139448 * C2566 -
           (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
               C139448 * C2565 -
           (((C92850 * C4078 + C139600 * C4578 + C92849 * C2747 +
              C92451 * C3297) *
                 C139372 +
             (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
              C92451 * C3107) *
                 C244) *
                C139587 +
            ((C95893 + C95892) * C139372 + (C95682 + C95683) * C244) * C47029) *
               C139448 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) * C139587) *
              C139448 * C139346 * C92 -
          (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
           ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
              C139448 * C139346 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C47029 +
           ((C92885 + C92884) * C244 + (C93054 + C93055) * C139372) * C139587) *
              C139448 * C139346 * C94 -
          (((C92850 * C1881 + C139600 * C2464 + C92849 * C249 + C92451 * C723) *
                C139372 +
            (C92850 * C1701 + C139600 * C2267 + C92849 * C111 + C92451 * C559) *
                C244) *
               C139587 +
           ((C93055 + C93054) * C139372 + (C92884 + C92885) * C244) * C47029) *
              C139448 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C4828 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C4653 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C4829 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C4654 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C4655) *
               C47029 +
           ((C92877 + C92876) * C4828 + (C93050 + C93051) * C4653 -
            (C94761 + C94760) * C4829 - (C94984 + C94985) * C4654 +
            (C98113 + C98112) * C4830 + (C98322 + C98323) * C4655) *
               C139587) *
              C139448 * C139346 * C139562 +
          (((C94760 + C94761) * C4829 -
            ((C93051 + C93050) * C4653 + (C92876 + C92877) * C4828) +
            (C94985 + C94984) * C4654 - (C98112 + C98113) * C4830 -
            (C98323 + C98322) * C4655) *
               C47029 +
           ((C94765 + C94764) * C4829 -
            ((C93052 + C93053) * C4653 + (C92881 + C92880) * C4828) +
            (C94986 + C94987) * C4654 -
            (C92850 * C6163 + C139600 * C6503 + C92849 * C4658 +
             C92451 * C5193) *
                C4830 -
            (C92850 * C6285 + C139600 * C6614 + C92849 * C4833 +
             C92451 * C5375) *
                C4655) *
               C139587) *
              C139448 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C3364 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139303) *
               C139448 * C92451 +
           ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) * C139448 *
               C139600) *
              C139372 * C3360 -
          (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) * C139448 *
               C139600 +
           ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) * C139448 *
               C92451) *
              C139372 * C3361 +
          (((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C139448 *
               C92451 +
           ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) * C139448 *
               C139600) *
              C139372 * C3362 -
          (((C47034 * C17960 + C139587 * C17964 + C47033 * C17961 +
             C47029 * C17965) *
                C139303 +
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C3364) *
               C139448 * C139600 +
           ((C50601 + C50600) * C139303 + (C50599 + C50598) * C3364) * C139448 *
               C92451) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C826 +
            (C47033 * C1707 + C47029 * C1714 + C47034 * C1706 +
             C139587 * C1713) *
                C821 -
            (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
             C47029 * C1702) *
                C827 -
            (C47034 * C1705 + C139587 * C1712 + C47033 * C1706 +
             C47029 * C1713) *
                C822 +
            (C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C828 +
            (C47033 * C1705 + C47029 * C1712 + C47034 * C1709 +
             C139587 * C1715) *
                C823) *
               C139448 * C139600) *
              C139372 * C139570 +
          (((C47765 + C47764) * C827 -
            ((C47763 + C47762) * C821 + (C47761 + C47760) * C826) +
            (C47767 + C47766) * C822 - (C47769 + C47768) * C828 -
            (C47771 + C47770) * C823) *
               C139448 * C92451 +
           ((C56380 + C56381) * C827 -
            ((C51256 + C51257) * C821 + (C51258 + C51259) * C826) +
            (C56382 + C56383) * C822 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C828 -
            (C47034 * C8122 + C139587 * C8123 + C47033 * C3902 +
             C47029 * C3911) *
                C823) *
               C139448 * C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C92451 +
            ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) *
                C139448 * C139600) *
               C4653 -
           (((C97486 + C97487) * C139303 + (C97488 + C97489) * C3364) *
                C139448 * C139600 +
            ((C94111 + C94110) * C139303 + (C94109 + C94108) * C3364) *
                C139448 * C92451) *
               C4654 +
           (((C97489 + C97488) * C3364 + (C97487 + C97486) * C139303) *
                C139448 * C92451 +
            ((C47033 * C6165 + C47029 * C6171 + C47034 * C6164 +
              C139587 * C6170) *
                 C3364 +
             (C47033 * C6168 + C47029 * C6174 + C47034 * C6167 +
              C139587 * C6173) *
                 C139303) *
                C139448 * C139600) *
               C4655) *
              C139570 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) *
                C139448 * C92451 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139448 * C139600) *
               C4654 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139448 * C139600 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C139448 * C92451) *
               C4653 -
           (((C47034 * C20832 + C139587 * C20836 + C47033 * C20833 +
              C47029 * C20837) *
                 C139303 +
             (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
              C47029 * C20835) *
                 C3364) *
                C139448 * C139600 +
            ((C53087 + C53086) * C139303 + (C53085 + C53084) * C3364) *
                C139448 * C92451) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[97] +=
        (-std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C3427 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
               C3360 -
           (C47761 + C47760) * C3428 - (C47882 + C47883) * C3361 +
           (C49689 + C49688) * C3429 + (C49798 + C49799) * C3362 -
           (C50599 + C50598) * C3430 - (C50672 + C50673) * C3363) *
              C139448 * C92451 +
          ((C94108 + C94109) * C3427 + (C94230 + C94231) * C3360 -
           (C51258 + C51259) * C3428 - (C51371 + C51370) * C3361 +
           (C51260 + C51261) * C3429 + (C51373 + C51372) * C3362 -
           (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
            C47029 * C17963) *
               C3430 -
           (C47034 * C18088 + C139587 * C18090 + C47033 * C18089 +
            C47029 * C18091) *
               C3363) *
              C139448 * C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C923 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139570 -
            (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C923 +
            (C47033 * C1794 + C47029 * C1799 + C47034 * C1791 +
             C139587 * C1796) *
                C139570 -
            (C51258 + C51259) * C924 - (C51371 + C51370) * C139360) *
               C139448 * C139600) *
              C821 +
          (((C47765 + C47764) * C924 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139570 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C923) +
            (C47884 + C47885) * C139360) *
               C139448 * C92451 +
           ((C56380 + C56381) * C924 -
            ((C47034 * C1792 + C139587 * C1797 + C47033 * C1791 +
              C47029 * C1796) *
                 C139570 +
             (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
              C47029 * C1702) *
                 C923) +
            (C56519 + C56518) * C139360) *
               C139448 * C139600) *
              C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C923 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139570 -
            (C47769 + C47768) * C924 - (C47886 + C47887) * C139360) *
               C139448 * C92451 +
           ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C923 +
            (C47033 * C1792 + C47029 * C1797 + C47034 * C1793 +
             C139587 * C1798) *
                C139570 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C924 -
            (C47034 * C8222 + C139587 * C8223 + C47033 * C3991 +
             C47029 * C3997) *
                C139360) *
               C139448 * C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C923 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139570 -
            (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
               C139448 * C92451 +
           ((C94108 + C94109) * C923 + (C94230 + C94231) * C139570 -
            (C51258 + C51259) * C924 - (C51371 + C51370) * C139360) *
               C139448 * C139600) *
              C139303 * C4653 +
          (((C51259 + C51258) * C924 -
            ((C94231 + C94230) * C139570 + (C94109 + C94108) * C923) +
            (C51370 + C51371) * C139360) *
               C139448 * C92451 +
           ((C53084 + C53085) * C924 -
            ((C97600 + C97601) * C139570 + (C97488 + C97489) * C923) +
            (C53191 + C53190) * C139360) *
               C139448 * C139600) *
              C139303 * C4654 +
          (((C97489 + C97488) * C923 + (C97601 + C97600) * C139570 -
            (C53085 + C53084) * C924 - (C53190 + C53191) * C139360) *
               C139448 * C92451 +
           ((C47033 * C6165 + C47029 * C6171 + C47034 * C6164 +
             C139587 * C6170) *
                C923 +
            (C47033 * C6227 + C47029 * C6230 + C47034 * C6226 +
             C139587 * C6229) *
                C139570 -
            (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
             C47029 * C20835) *
                C924 -
            (C47034 * C20904 + C139587 * C20906 + C47033 * C20905 +
             C47029 * C20907) *
                C139360) *
               C139448 * C139600) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C92451 +
           ((C94108 + C94109) * C244 + (C94347 + C94346) * C139372) * C139448 *
               C139600) *
              C3360 -
          (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
               C139600 +
           ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
               C92451) *
              C3361 +
          (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C139448 *
               C92451 +
           ((C51260 + C51261) * C244 + (C51482 + C51483) * C139372) * C139448 *
               C139600) *
              C3362 -
          (((C47034 * C18202 + C139587 * C18204 + C47033 * C18203 +
             C47029 * C18205) *
                C139372 +
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C244) *
               C139448 * C139600 +
           ((C50745 + C50744) * C139372 + (C50599 + C50598) * C244) * C139448 *
               C92451) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C92451 +
            ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
              C139587 * C1702) *
                 C244 +
             (C47033 * C1879 + C47029 * C1884 + C47034 * C1878 +
              C139587 * C1883) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
                C139600 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
                C92451) *
               C139360) *
              C821 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C139448 *
                C92451 +
            ((C56380 + C56381) * C244 + (C56654 + C56655) * C139372) * C139448 *
                C139600) *
               C139360 -
           (((C47034 * C1877 + C139587 * C1882 + C47033 * C1878 +
              C47029 * C1883) *
                 C139372 +
             (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
              C47029 * C1702) *
                 C244) *
                C139448 * C139600 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139448 * C92451) *
               C139570) *
              C822 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                 C139372) *
                C139448 * C92451 +
            ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
              C139587 * C1704) *
                 C244 +
             (C47033 * C1877 + C47029 * C1882 + C47034 * C1880 +
              C139587 * C1885) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C47034 * C8322 + C139587 * C8323 + C47033 * C4077 +
              C47029 * C4083) *
                 C139372 +
             (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
              C47029 * C3899) *
                 C244) *
                C139448 * C139600 +
            ((C48003 + C48002) * C139372 + (C47769 + C47768) * C244) * C139448 *
                C92451) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C4828 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C4653 -
            (C94109 + C94108) * C4829 - (C94346 + C94347) * C4654 +
            (C97489 + C97488) * C4830 + (C97708 + C97709) * C4655) *
               C139448 * C92451 +
           ((C94108 + C94109) * C4828 + (C94347 + C94346) * C4653 -
            (C97488 + C97489) * C4829 - (C97709 + C97708) * C4654 +
            (C47033 * C6165 + C47029 * C6171 + C47034 * C6164 +
             C139587 * C6170) *
                C4830 +
            (C47033 * C6287 + C47029 * C6290 + C47034 * C6286 +
             C139587 * C6289) *
                C4655) *
               C139448 * C139600) *
              C139570 +
          (((C51259 + C51258) * C4829 -
            ((C47999 + C47998) * C4653 + (C47761 + C47760) * C4828) +
            (C51481 + C51480) * C4654 - (C53085 + C53084) * C4830 -
            (C53295 + C53294) * C4655) *
               C139448 * C92451 +
           ((C53084 + C53085) * C4829 -
            ((C51480 + C51481) * C4653 + (C51258 + C51259) * C4828) +
            (C53294 + C53295) * C4654 -
            (C47034 * C20830 + C139587 * C20834 + C47033 * C20831 +
             C47029 * C20835) *
                C4830 -
            (C47034 * C20974 + C139587 * C20976 + C47033 * C20975 +
             C47029 * C20977) *
                C4655) *
               C139448 * C139600) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[97] +=
        (-std::pow(Pi, 2.5) * (((((C307 * C107 + C139448 * C308) * C3364 +
                                  (C307 * C116 + C139448 * C314) * C139303) *
                                     C92451 +
                                 (C34904 + C34905) * C139600) *
                                    C47029 +
                                ((C337 * C3364 + C338 * C139303) * C92451 +
                                 (C34906 + C34907) * C139600) *
                                    C139587) *
                                   C139372 * C3360 -
                               (((C34913 + C34912) * C139600 +
                                 (C1117 * C139303 + C1116 * C3364) * C92451) *
                                    C139587 +
                                ((C34925 + C34924) * C139600 +
                                 ((C307 * C839 + C139448 * C1098) * C139303 +
                                  (C307 * C832 + C139448 * C1094) * C3364) *
                                     C92451) *
                                    C47029) *
                                   C139372 * C3361 +
                               ((((C307 * C2570 + C139448 * C2827) * C3364 +
                                  (C307 * C2577 + C139448 * C2831) * C139303) *
                                     C92451 +
                                 (C34926 + C34927) * C139600) *
                                    C47029 +
                                ((C2844 * C3364 + C2845 * C139303) * C92451 +
                                 (C34918 + C34919) * C139600) *
                                    C139587) *
                                   C139372 * C3362 -
                               ((((C307 * C17960 + C139448 * C18318) * C139303 +
                                  (C307 * C17958 + C139448 * C18316) * C3364) *
                                     C139600 +
                                 ((C307 * C3369 + C139448 * C3547) * C139303 +
                                  (C307 * C3366 + C139448 * C3544) * C3364) *
                                     C92451) *
                                    C139587 +
                                (((C307 * C17961 + C139448 * C18319) * C139303 +
                                  (C307 * C17959 + C139448 * C18317) * C3364) *
                                     C139600 +
                                 ((C307 * C3370 + C139448 * C3548) * C139303 +
                                  (C307 * C3367 + C139448 * C3545) * C3364) *
                                     C92451) *
                                    C47029) *
                                   C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C92451 +
            (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C139600) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C92451 +
            (C32425 + C32426 - C32427 - C32428 + C32429 + C32430) * C139600) *
               C139587) *
              C139372 * C139570 +
          (((C1116 * C827 -
             ((C307 * C839 + C139448 * C1098) * C821 +
              (C307 * C832 + C139448 * C1094) * C826) +
             C1117 * C822 - C1118 * C828 - C1119 * C823) *
                C92451 +
            (C8433 * C827 - (C34921 * C821 + C34920 * C826) + C8434 * C822 -
             C8435 * C828 - C8436 * C823) *
                C139600) *
               C47029 +
           ((C1118 * C827 - (C1117 * C821 + C1116 * C826) + C1119 * C822 -
             C1120 * C828 - C1121 * C823) *
                C92451 +
            (C8435 * C827 - (C8434 * C821 + C8433 * C826) + C8436 * C822 -
             (C307 * C8120 + C139448 * C8422) * C828 -
             (C307 * C8122 + C139448 * C8423) * C823) *
                C139600) *
               C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C92451 +
             (C34904 + C34905) * C139600) *
                C47029 +
            ((C337 * C3364 + C338 * C139303) * C92451 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C4653 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C92451) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C92451) *
                C47029) *
               C4654 +
           (((C36837 + C36836) * C92451 + (C37684 + C37685) * C139600) *
                C47029 +
            ((C36835 + C36834) * C92451 + (C37680 + C37681) * C139600) *
                C139587) *
               C4655) *
              C139570 +
          ((((C34924 + C34925) * C92451 + (C36850 + C36851) * C139600) *
                C47029 +
            ((C34912 + C34913) * C92451 + (C36852 + C36853) * C139600) *
                C139587) *
               C4654 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C92451) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C92451) *
                C47029) *
               C4653 -
           ((((C307 * C20832 + C139448 * C21046) * C139303 +
              (C307 * C20830 + C139448 * C21044) * C3364) *
                 C139600 +
             (C36853 + C36852) * C92451) *
                C139587 +
            (((C307 * C20833 + C139448 * C21047) * C139303 +
              (C307 * C20831 + C139448 * C21045) * C3364) *
                 C139600 +
             (C36851 + C36850) * C92451) *
                C47029) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3427 +
            (C307 * C182 + C139448 * C394) * C3360 -
            (C307 * C832 + C139448 * C1094) * C3428 -
            (C307 * C927 + C139448 * C1195) * C3361 +
            (C307 * C2570 + C139448 * C2827) * C3429 +
            (C307 * C2663 + C139448 * C2921) * C3362 -
            (C307 * C3367 + C139448 * C3545) * C3430 -
            (C307 * C3433 + C139448 * C3599) * C3363) *
               C92451 +
           (C32431 * C3427 + C32539 * C3360 - C34920 * C3428 - C35034 * C3361 +
            C34922 * C3429 + C35035 * C3362 -
            (C307 * C17959 + C139448 * C18317) * C3430 -
            (C307 * C18089 + C139448 * C18418) * C3363) *
               C139600) *
              C47029 +
          ((C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
            C2844 * C3429 + C2940 * C3362 -
            (C307 * C3366 + C139448 * C3544) * C3430 -
            (C307 * C3432 + C139448 * C3600) * C3363) *
               C92451 +
           (C1984 * C3427 + C2078 * C3360 - C8433 * C3428 - C8546 * C3361 +
            C33388 * C3429 + C33495 * C3362 -
            (C307 * C17958 + C139448 * C18316) * C3430 -
            (C307 * C18088 + C139448 * C18419) * C3363) *
               C139600) *
              C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C92451 +
            (C36952 + C36953 - C36954 - C36955) * C139600) *
               C47029 +
           ((C1201 + C1202 - C1203 - C1220) * C92451 + C42590 * C139600) *
               C139587) *
              C821 +
          (((C1203 - (C1202 + C1201) + C1220) * C92451 + C42591 * C139600) *
               C47029 +
           ((C1208 - (C1207 + C1206) + C1222) * C92451 +
            (C10196 - (C10197 + C10198) + C10199) * C139600) *
               C139587) *
              C822 +
          ((C1224 * C92451 + (C10198 + C10197 - C10196 - C10199) * C139600) *
               C47029 +
           ((C1213 + C1212 - C1211 - C1223) * C92451 +
            (C1988 * C923 + C2080 * C139570 -
             (C307 * C8120 + C139448 * C8422) * C924 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139600) *
               C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C92451 +
            (C36952 + C36953 - C36954 - C36955) * C139600) *
               C47029 +
           ((C1201 + C1202 - C1203 - C1220) * C92451 + C42590 * C139600) *
               C139587) *
              C139303 * C4653 +
          (((C36954 - (C36953 + C36952) + C36955) * C92451 +
            (C36956 - (C36957 + C36958) + C36968) * C139600) *
               C47029 +
           (C42591 * C92451 + (C36961 - (C36962 + C36963) + C36969) * C139600) *
               C139587) *
              C139303 * C4654 +
          (((C36958 + C36957 - C36956 - C36968) * C92451 +
            (C37682 * C923 + C37757 * C139570 -
             (C307 * C20831 + C139448 * C21045) * C924 -
             (C307 * C20905 + C139448 * C21115) * C139360) *
                C139600) *
               C47029 +
           ((C36963 + C36962 - C36961 - C36969) * C92451 +
            (C35900 * C923 + C36011 * C139570 -
             (C307 * C20830 + C139448 * C21044) * C924 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C139600) *
               C139587) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[97] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C92451 +
            (C32431 * C244 + C32649 * C139372) * C139600) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
              C3360 -
          (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
           ((C35140 * C139372 + C34920 * C244) * C139600 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C92451) *
               C47029) *
              C3361 +
          ((((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C92451 +
            (C34922 * C244 + C35141 * C139372) * C139600) *
               C47029 +
           ((C3022 + C3030) * C92451 + (C33595 + C33599) * C139600) * C139587) *
              C3362 -
          ((((C307 * C18202 + C139448 * C18519) * C139372 +
             (C307 * C17958 + C139448 * C18316) * C244) *
                C139600 +
            ((C307 * C3488 + C139448 * C3653) * C139372 +
             (C307 * C3366 + C139448 * C3544) * C244) *
                C92451) *
               C139587 +
           (((C307 * C18203 + C139448 * C18518) * C139372 +
             (C307 * C17959 + C139448 * C18317) * C244) *
                C139600 +
            ((C307 * C3489 + C139448 * C3654) * C139372 +
             (C307 * C3367 + C139448 * C3545) * C244) *
                C92451) *
               C47029) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C92451 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
               C139570 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C92451) *
                C47029) *
               C139360) *
              C821 +
          ((((C1310 + C1318) * C92451 + (C31608 + C31607) * C139600) * C47029 +
            ((C1307 + C1317) * C92451 + (C31609 + C31610) * C139600) *
                C139587) *
               C139360 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
               C139570) *
              C822 +
          (((C501 * C92451 + (C30744 + C30743) * C139600) * C47029 +
            ((C489 + C499) * C92451 + (C30745 + C30746) * C139600) * C139587) *
               C139570 -
           ((((C307 * C8322 + C139448 * C8647) * C139372 +
              (C307 * C8120 + C139448 * C8422) * C244) *
                 C139600 +
             (C1319 + C1311) * C92451) *
                C139587 +
            ((C31610 + C31609) * C139600 + C1320 * C92451) * C47029) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C4828 +
             (C307 * C245 + C139448 * C474) * C4653 - C32431 * C4829 -
             C32649 * C4654 + C35899 * C4830 + C36121 * C4655) *
                C92451 +
            (C32431 * C4828 + C32649 * C4653 - C35899 * C4829 - C36121 * C4654 +
             C37682 * C4830 + C37829 * C4655) *
                C139600) *
               C47029 +
           ((C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C92451 +
            (C36114 + C36115 - C36116 - C36117 + C36118 + C36123) * C139600) *
               C139587) *
              C139570 +
          (((C34920 * C4829 -
             ((C307 * C1011 + C139448 * C1301) * C4653 +
              (C307 * C832 + C139448 * C1094) * C4828) +
             C35140 * C4654 - C36846 * C4830 - C37072 * C4655) *
                C92451 +
            (C36846 * C4829 - (C35140 * C4653 + C34920 * C4828) +
             C37072 * C4654 - (C307 * C20831 + C139448 * C21045) * C4830 -
             (C307 * C20975 + C139448 * C21182) * C4655) *
                C139600) *
               C47029 +
           ((C8433 * C4829 - (C1315 * C4653 + C1116 * C4828) + C8659 * C4654 -
             C36848 * C4830 - C37073 * C4655) *
                C92451 +
            (C36848 * C4829 - (C8659 * C4653 + C8433 * C4828) + C37073 * C4654 -
             (C307 * C20830 + C139448 * C21044) * C4830 -
             (C307 * C20974 + C139448 * C21183) * C4655) *
                C139600) *
               C139587) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C3364 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139303) *
               C47029 +
           ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
               C139587) *
              C139448 * C139372 * C3360 -
          (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) * C139587 +
           ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
             C92451 * C1400) *
                C139303 +
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C3364) *
               C47029) *
              C139448 * C139372 * C3361 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C3364 +
            (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
             C139600 * C4418) *
                C139303) *
               C47029 +
           ((C95683 + C95682) * C3364 + (C95685 + C95684) * C139303) *
               C139587) *
              C139448 * C139372 * C3362 -
          (((C92850 * C17960 + C139600 * C18620 + C92849 * C3369 +
             C92451 * C3709) *
                C139303 +
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C3364) *
               C139587 +
           ((C92850 * C17961 + C139600 * C18621 + C92849 * C3370 +
             C92451 * C3710) *
                C139303 +
            (C92850 * C17959 + C139600 * C18619 + C92849 * C3367 +
             C92451 * C3707) *
                C3364) *
               C47029) *
              C139448 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C822 +
            (C92885 + C92884) * C828 + (C92887 + C92886) * C823) *
               C139587) *
              C139448 * C139372 * C139570 +
          (((C93758 + C93759) * C827 -
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C821 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C826) +
            (C93760 + C93761) * C822 - (C93762 + C93763) * C828 -
            (C93764 + C93765) * C823) *
               C47029 +
           ((C93763 + C93762) * C827 -
            ((C93761 + C93760) * C821 + (C93759 + C93758) * C826) +
            (C93765 + C93764) * C822 -
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C828 -
            (C92850 * C8122 + C139600 * C8761 + C92849 * C841 +
             C92451 * C1403) *
                C823) *
               C139587) *
              C139448 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C47029 +
            ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
                C139587) *
               C139448 * C4653 -
           (((C94763 + C94762) * C139303 + (C94761 + C94760) * C3364) *
                C139587 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C47029) *
               C139448 * C4654 +
           (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C47029 +
            ((C98113 + C98112) * C3364 + (C98115 + C98114) * C139303) *
                C139587) *
               C139448 * C4655) *
              C139570 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C47029 +
            ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
              C139600 * C5950) *
                 C3364 +
             (C92849 * C3901 + C92451 * C4414 + C92850 * C5473 +
              C139600 * C5953) *
                 C139303) *
                C139587) *
               C139448 * C4654 -
           (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) *
                C139587 +
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139303 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C3364) *
                C47029) *
               C139448 * C4653 -
           (((C92850 * C20832 + C139600 * C21252 + C92849 * C5473 +
              C92451 * C5953) *
                 C139303 +
             (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
              C92451 * C5950) *
                 C3364) *
                C139587 +
            ((C92850 * C20833 + C139600 * C21253 + C92849 * C5474 +
              C92451 * C5954) *
                 C139303 +
             (C92850 * C20831 + C139600 * C21251 + C92849 * C5471 +
              C92451 * C5951) *
                 C3364) *
                C47029) *
               C139448 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[97] +=
        (-std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C3427 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
               C3360 -
           (C92850 * C3891 + C139600 * C4407 + C92849 * C832 + C92451 * C1396) *
               C3428 -
           (C92850 * C3989 + C139600 * C4493 + C92849 * C927 + C92451 * C1497) *
               C3361 +
           (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
            C139600 * C4412) *
               C3429 +
           (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
            C139600 * C4494) *
               C3362 -
           (C92850 * C17959 + C139600 * C18619 + C92849 * C3367 +
            C92451 * C3707) *
               C3430 -
           (C92850 * C18089 + C139600 * C18746 + C92849 * C3433 +
            C92451 * C3761) *
               C3363) *
              C47029 +
          ((C92877 + C92876) * C3427 + (C92966 + C92967) * C3360 -
           (C93759 + C93758) * C3428 - (C93872 + C93873) * C3361 +
           (C95683 + C95682) * C3429 + (C95788 + C95789) * C3362 -
           (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
            C92451 * C3706) *
               C3430 -
           (C92850 * C18088 + C139600 * C18747 + C92849 * C3432 +
            C92451 * C3762) *
               C3363) *
              C139587) *
         C139448 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C923 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139570 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C924 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139360) *
               C47029 +
           ((C92877 + C92876) * C923 + (C92966 + C92967) * C139570 -
            (C93759 + C93758) * C924 - (C93872 + C93873) * C139360) *
               C139587) *
              C139448 * C821 +
          (((C93758 + C93759) * C924 -
            ((C92967 + C92966) * C139570 + (C92876 + C92877) * C923) +
            (C93873 + C93872) * C139360) *
               C47029 +
           ((C93763 + C93762) * C924 -
            ((C92968 + C92969) * C139570 + (C92881 + C92880) * C923) +
            (C93874 + C93875) * C139360) *
               C139587) *
              C139448 * C822 +
          (((C92880 + C92881) * C923 + (C92969 + C92968) * C139570 -
            (C93762 + C93763) * C924 - (C93875 + C93874) * C139360) *
               C47029 +
           ((C92885 + C92884) * C923 + (C92970 + C92971) * C139570 -
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C924 -
            (C92850 * C8222 + C139600 * C8872 + C92849 * C928 +
             C92451 * C1500) *
                C139360) *
               C139587) *
              C139448 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C923 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139570 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C924 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139360) *
               C47029 +
           ((C92877 + C92876) * C923 + (C92966 + C92967) * C139570 -
            (C93759 + C93758) * C924 - (C93872 + C93873) * C139360) *
               C139587) *
              C139448 * C139303 * C4653 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C924 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139570 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C923) +
            (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
             C139600 * C6029) *
                C139360) *
               C47029 +
           ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
             C139600 * C5950) *
                C924 -
            ((C94875 + C94874) * C139570 + (C94761 + C94760) * C923) +
            (C92849 * C3990 + C92451 * C4495 + C92850 * C5556 +
             C139600 * C6030) *
                C139360) *
               C139587) *
              C139448 * C139303 * C4654 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C923 +
            (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
             C139600 * C6561) *
                C139570 -
            (C92850 * C20831 + C139600 * C21251 + C92849 * C5471 +
             C92451 * C5951) *
                C924 -
            (C92850 * C20905 + C139600 * C21321 + C92849 * C5557 +
             C92451 * C6029) *
                C139360) *
               C47029 +
           ((C98113 + C98112) * C923 + (C98218 + C98219) * C139570 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C924 -
            (C92850 * C20904 + C139600 * C21320 + C92849 * C5556 +
             C92451 * C6030) *
                C139360) *
               C139587) *
              C139448 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) * C139587) *
              C139448 * C3360 -
          (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
           ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
             C92451 * C1602) *
                C139372 +
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C244) *
               C47029) *
              C139448 * C3361 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C244 +
            (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
             C139600 * C4576) *
                C139372) *
               C47029 +
           ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139587) *
              C139448 * C3362 -
          (((C92850 * C18202 + C139600 * C18856 + C92849 * C3488 +
             C92451 * C3815) *
                C139372 +
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C244) *
               C139587 +
           ((C92850 * C18203 + C139600 * C18855 + C92849 * C3489 +
             C92451 * C3816) *
                C139372 +
            (C92850 * C17959 + C139600 * C18619 + C92849 * C3367 +
             C92451 * C3707) *
                C244) *
               C47029) *
              C139448 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139372 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C244) *
                C47029) *
               C139448 * C139360) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) *
                C139587) *
               C139448 * C139360 -
           (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
               C139448 * C139570) *
              C822 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C47029 +
            ((C92885 + C92884) * C244 + (C93054 + C93055) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C92850 * C8322 + C139600 * C8985 + C92849 * C1012 +
              C92451 * C1603) *
                 C139372 +
             (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
              C92451 * C1398) *
                 C244) *
                C139587 +
            ((C93985 + C93984) * C139372 + (C93762 + C93763) * C244) * C47029) *
               C139448 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C4828 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C4653 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C4829 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C4654 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C4655) *
               C47029 +
           ((C92877 + C92876) * C4828 + (C93050 + C93051) * C4653 -
            (C94761 + C94760) * C4829 - (C94984 + C94985) * C4654 +
            (C98113 + C98112) * C4830 + (C98322 + C98323) * C4655) *
               C139587) *
              C139448 * C139570 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C4829 -
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C4653 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C4828) +
            (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
             C139600 * C6106) *
                C4654 -
            (C92850 * C20831 + C139600 * C21251 + C92849 * C5471 +
             C92451 * C5951) *
                C4830 -
            (C92850 * C20975 + C139600 * C21388 + C92849 * C5637 +
             C92451 * C6106) *
                C4655) *
               C47029 +
           ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
             C139600 * C5950) *
                C4829 -
            ((C93982 + C93983) * C4653 + (C93759 + C93758) * C4828) +
            (C92849 * C4076 + C92451 * C4574 + C92850 * C5636 +
             C139600 * C6107) *
                C4654 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C4830 -
            (C92850 * C20974 + C139600 * C21389 + C92849 * C5636 +
             C92451 * C6107) *
                C4655) *
               C139587) *
              C139448 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[98] +=
        (-std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C92451 +
            ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C47034 * C4664 + C139587 * C4669 + C47033 * C4663 +
              C47029 * C4668) *
                 C139303 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C3364) *
                C139448 * C139600 +
            ((C94111 + C94110) * C139303 + (C94109 + C94108) * C3364) *
                C139448 * C92451) *
               C139384) *
              C2565 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) *
                C139448 * C92451 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139448 * C139600) *
               C139384 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139448 * C139600 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C139448 * C92451) *
               C139571) *
              C2566 +
          ((((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) *
                C139448 * C92451 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C47034 * C19904 + C139587 * C19908 + C47033 * C19905 +
              C47029 * C19909) *
                 C139303 +
             (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
              C47029 * C19907) *
                 C3364) *
                C139448 * C139600 +
            ((C51263 + C51262) * C139303 + (C51261 + C51260) * C3364) *
                C139448 * C92451) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C139448 * C92451 +
           ((C94108 + C94109) * C826 + (C94110 + C94111) * C821 -
            (C94112 + C94113) * C827 - (C94114 + C94115) * C822 +
            (C94116 + C94117) * C828 + (C94118 + C94119) * C823) *
               C139448 * C139600) *
              C139571 +
          (((C94113 + C94112) * C827 -
            ((C94111 + C94110) * C821 + (C94109 + C94108) * C826) +
            (C94115 + C94114) * C822 - (C94117 + C94116) * C828 -
            (C94119 + C94118) * C823) *
               C139448 * C92451 +
           ((C47033 * C4657 + C47029 * C4661 + C47034 * C4658 +
             C139587 * C4662) *
                C827 -
            ((C47034 * C4664 + C139587 * C4669 + C47033 * C4663 +
              C47029 * C4668) *
                 C821 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C826) +
            (C47033 * C4664 + C47029 * C4669 + C47034 * C4665 +
             C139587 * C4670) *
                C822 -
            (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
             C47029 * C4662) *
                C828 -
            (C47034 * C4667 + C139587 * C4671 + C47033 * C4665 +
             C47029 * C4670) *
                C823) *
               C139448 * C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C3364 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139303) *
               C139448 * C92451 +
           ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) * C139448 *
               C139600) *
              C6159 -
          (((C97486 + C97487) * C139303 + (C97488 + C97489) * C3364) * C139448 *
               C139600 +
           ((C94111 + C94110) * C139303 + (C94109 + C94108) * C3364) * C139448 *
               C92451) *
              C6160 +
          (((C97489 + C97488) * C3364 + (C97487 + C97486) * C139303) * C139448 *
               C92451 +
           ((C99280 + C99281) * C3364 + (C99282 + C99283) * C139303) * C139448 *
               C139600) *
              C6161 -
          (((C47034 * C37435 + C139587 * C37439 + C47033 * C37436 +
             C47029 * C37440) *
                C139303 +
            (C47034 * C37433 + C139587 * C37437 + C47033 * C37434 +
             C47029 * C37438) *
                C3364) *
               C139448 * C139600 +
           ((C99283 + C99282) * C139303 + (C99281 + C99280) * C3364) * C139448 *
               C92451) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[98] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C139448 * C92451 +
           ((C94108 + C94109) * C2660 + (C94230 + C94231) * C2565 -
            (C51258 + C51259) * C2661 - (C51371 + C51370) * C2566 +
            (C51260 + C51261) * C2662 + (C51373 + C51372) * C2567) *
               C139448 * C139600) *
              C139303 * C139571 +
          (((C51259 + C51258) * C2661 -
            ((C94231 + C94230) * C2565 + (C94109 + C94108) * C2660) +
            (C51370 + C51371) * C2566 - (C51261 + C51260) * C2662 -
            (C51372 + C51373) * C2567) *
               C139448 * C92451 +
           ((C53084 + C53085) * C2661 -
            ((C47034 * C4747 + C139587 * C4751 + C47033 * C4746 +
              C47029 * C4750) *
                 C2565 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C2660) +
            (C53191 + C53190) * C2566 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C2662 -
            (C47034 * C20020 + C139587 * C20022 + C47033 * C20021 +
             C47029 * C20023) *
                C2567) *
               C139448 * C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C92451 +
            ((C94108 + C94109) * C181 + (C94230 + C94231) * C139346) * C139448 *
                C139600) *
               C821 -
           (((C94232 + C94233) * C139346 + (C94112 + C94113) * C181) * C139448 *
                C139600 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139448 * C92451) *
               C822 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                 C139346) *
                C139448 * C92451 +
            ((C94116 + C94117) * C181 + (C94234 + C94235) * C139346) * C139448 *
                C139600) *
               C823) *
              C139571 +
          ((((C94113 + C94112) * C181 + (C94233 + C94232) * C139346) * C139448 *
                C92451 +
            ((C47033 * C4657 + C47029 * C4661 + C47034 * C4658 +
              C139587 * C4662) *
                 C181 +
             (C47033 * C4747 + C47029 * C4751 + C47034 * C4748 +
              C139587 * C4752) *
                 C139346) *
                C139448 * C139600) *
               C822 -
           (((C47034 * C4747 + C139587 * C4751 + C47033 * C4746 +
              C47029 * C4750) *
                 C139346 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C181) *
                C139448 * C139600 +
            ((C94231 + C94230) * C139346 + (C94109 + C94108) * C181) * C139448 *
                C92451) *
               C821 -
           (((C47034 * C4749 + C139587 * C4753 + C47033 * C4748 +
              C47029 * C4752) *
                 C139346 +
             (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
              C47029 * C4662) *
                 C181) *
                C139448 * C139600 +
            ((C94235 + C94234) * C139346 + (C94117 + C94116) * C181) * C139448 *
                C92451) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139346) *
               C139448 * C92451 +
           ((C94108 + C94109) * C181 + (C94230 + C94231) * C139346) * C139448 *
               C139600) *
              C139303 * C6159 -
          (((C97600 + C97601) * C139346 + (C97488 + C97489) * C181) * C139448 *
               C139600 +
           ((C94231 + C94230) * C139346 + (C94109 + C94108) * C181) * C139448 *
               C92451) *
              C139303 * C6160 +
          (((C97489 + C97488) * C181 + (C97601 + C97600) * C139346) * C139448 *
               C92451 +
           ((C99280 + C99281) * C181 + (C99354 + C99355) * C139346) * C139448 *
               C139600) *
              C139303 * C6161 -
          (((C47034 * C37519 + C139587 * C37521 + C47033 * C37520 +
             C47029 * C37522) *
                C139346 +
            (C47034 * C37433 + C139587 * C37437 + C47033 * C37434 +
             C47029 * C37438) *
                C181) *
               C139448 * C139600 +
           ((C99355 + C99354) * C139346 + (C99281 + C99280) * C181) * C139448 *
               C92451) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[98] +=
        (-std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C94109 + C94108) * C1876 - (C94346 + C94347) * C139384) *
               C139448 * C92451 +
           ((C94108 + C94109) * C1875 + (C94347 + C94346) * C139571 -
            (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
             C47029 * C4660) *
                C1876 -
            (C47034 * C4832 + C139587 * C4836 + C47033 * C4831 +
             C47029 * C4835) *
                C139384) *
               C139448 * C139600) *
              C2565 +
          (((C51259 + C51258) * C1876 -
            ((C47999 + C47998) * C139571 + (C47761 + C47760) * C1875) +
            (C51481 + C51480) * C139384) *
               C139448 * C92451 +
           ((C53084 + C53085) * C1876 -
            ((C51480 + C51481) * C139571 + (C51258 + C51259) * C1875) +
            (C53294 + C53295) * C139384) *
               C139448 * C139600) *
              C2566 +
          (((C49689 + C49688) * C1875 + (C49909 + C49908) * C139571 -
            (C51261 + C51260) * C1876 - (C51483 + C51482) * C139384) *
               C139448 * C92451 +
           ((C51260 + C51261) * C1875 + (C51482 + C51483) * C139571 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C1876 -
            (C47034 * C20128 + C139587 * C20130 + C47033 * C20129 +
             C47029 * C20131) *
                C139384) *
               C139448 * C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C94109 + C94108) * C1876 - (C94346 + C94347) * C139384) *
               C139448 * C92451 +
           ((C94108 + C94109) * C1875 + (C94347 + C94346) * C139571 -
            (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
             C47029 * C4660) *
                C1876 -
            (C47034 * C4832 + C139587 * C4836 + C47033 * C4831 +
             C47029 * C4835) *
                C139384) *
               C139448 * C139600) *
              C139346 * C821 +
          (((C94113 + C94112) * C1876 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139571 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C1875) +
            (C94348 + C94349) * C139384) *
               C139448 * C92451 +
           ((C47033 * C4657 + C47029 * C4661 + C47034 * C4658 +
             C139587 * C4662) *
                C1876 -
            ((C94349 + C94348) * C139571 + (C94112 + C94113) * C1875) +
            (C47033 * C4832 + C47029 * C4836 + C47034 * C4833 +
             C139587 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C1875 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139571 -
            (C94117 + C94116) * C1876 - (C94350 + C94351) * C139384) *
               C139448 * C92451 +
           ((C94116 + C94117) * C1875 + (C94351 + C94350) * C139571 -
            (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
             C47029 * C4662) *
                C1876 -
            (C47034 * C4834 + C139587 * C4838 + C47033 * C4833 +
             C47029 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C6281 +
           (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
               C6159 -
           (C94109 + C94108) * C6282 - (C94346 + C94347) * C6160 +
           (C97489 + C97488) * C6283 + (C97708 + C97709) * C6161 -
           (C99281 + C99280) * C6284 - (C99426 + C99427) * C6162) *
              C139448 * C92451 +
          ((C94108 + C94109) * C6281 + (C94347 + C94346) * C6159 -
           (C97488 + C97489) * C6282 - (C97709 + C97708) * C6160 +
           (C99280 + C99281) * C6283 + (C99427 + C99426) * C6161 -
           (C47034 * C37433 + C139587 * C37437 + C47033 * C37434 +
            C47029 * C37438) *
               C6284 -
           (C47034 * C37595 + C139587 * C37597 + C47033 * C37596 +
            C47029 * C37598) *
               C6162) *
              C139448 * C139600) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[98] +=
        (-std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C92451 +
             (C34904 + C34905) * C139600) *
                C47029 +
            ((C337 * C3364 + C338 * C139303) * C92451 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C139571 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C92451) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C92451) *
                C47029) *
               C139384) *
              C2565 +
          ((((C34924 + C34925) * C92451 + (C36850 + C36851) * C139600) *
                C47029 +
            ((C34912 + C34913) * C92451 + (C36852 + C36853) * C139600) *
                C139587) *
               C139384 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C92451) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C92451) *
                C47029) *
               C139571) *
              C2566 +
          (((((C307 * C2570 + C139448 * C2827) * C3364 +
              (C307 * C2577 + C139448 * C2831) * C139303) *
                 C92451 +
             (C34926 + C34927) * C139600) *
                C47029 +
            ((C2844 * C3364 + C2845 * C139303) * C92451 +
             (C34918 + C34919) * C139600) *
                C139587) *
               C139571 -
           ((((C307 * C19904 + C139448 * C20238) * C139303 +
              (C307 * C19902 + C139448 * C20236) * C3364) *
                 C139600 +
             (C34919 + C34918) * C92451) *
                C139587 +
            (((C307 * C19905 + C139448 * C20239) * C139303 +
              (C307 * C19903 + C139448 * C20237) * C3364) *
                 C139600 +
             (C34927 + C34926) * C92451) *
                C47029) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C92451 +
            (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C139600) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C92451 +
            (C32425 + C32426 - C32427 - C32428 + C32429 + C32430) * C139600) *
               C139587) *
              C139571 +
          (((C32421 - (C32434 + C32433) + C32422 - C32423 - C32424) * C92451 +
            (C4930 * C827 - (C35898 * C821 + C35899 * C826) + C4931 * C822 -
             C4932 * C828 - C4933 * C823) *
                C139600) *
               C47029 +
           ((C32427 - (C32426 + C32425) + C32428 - C32429 - C32430) * C92451 +
            (C4932 * C827 - (C4931 * C821 + C4930 * C826) + C4933 * C822 -
             (C307 * C4659 + C139448 * C4916) * C828 -
             (C307 * C4667 + C139448 * C4920) * C823) *
                C139600) *
               C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C92451 +
            (C34904 + C34905) * C139600) *
               C47029 +
           ((C337 * C3364 + C338 * C139303) * C92451 +
            (C34906 + C34907) * C139600) *
               C139587) *
              C6159 -
          (((C36834 + C36835) * C139600 + (C34907 + C34906) * C92451) *
               C139587 +
           ((C36836 + C36837) * C139600 + (C34905 + C34904) * C92451) *
               C47029) *
              C6160 +
          (((C36837 + C36836) * C92451 + (C37684 + C37685) * C139600) * C47029 +
           ((C36835 + C36834) * C92451 + (C37680 + C37681) * C139600) *
               C139587) *
              C6161 -
          ((((C307 * C37435 + C139448 * C37673) * C139303 +
             (C307 * C37433 + C139448 * C37671) * C3364) *
                C139600 +
            (C37681 + C37680) * C92451) *
               C139587 +
           (((C307 * C37436 + C139448 * C37674) * C139303 +
             (C307 * C37434 + C139448 * C37672) * C3364) *
                C139600 +
            (C37685 + C37684) * C92451) *
               C47029) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[98] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C92451 +
            (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C139600) *
               C47029 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C92451 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139303 * C139571 +
          (((C35028 - (C35027 + C35026) + C35036 - C35031 - C35037) * C92451 +
            (C36846 * C2661 - (C36010 * C2565 + C35899 * C2660) +
             C36966 * C2566 - (C307 * C19903 + C139448 * C20237) * C2662 -
             (C307 * C20021 + C139448 * C20338) * C2567) *
                C139600) *
               C47029 +
           ((C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C92451 +
            (C36848 * C2661 - (C5018 * C2565 + C4930 * C2660) + C36967 * C2566 -
             (C307 * C19902 + C139448 * C20236) * C2662 -
             (C307 * C20020 + C139448 * C20339) * C2567) *
                C139600) *
               C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C92451 +
             (C32533 + C32540) * C139600) *
                C47029 +
            ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
               C821 -
           ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
               C822 +
           ((C421 * C92451 + C32538 * C139600) * C47029 +
            ((C409 + C419) * C92451 + (C2075 + C2083) * C139600) * C139587) *
               C823) *
              C139571 +
          (((C32536 * C92451 + C36002 * C139600) * C47029 +
            (C32538 * C92451 + (C5015 + C5021) * C139600) * C139587) *
               C822 -
           ((C36003 * C139600 + C32537 * C92451) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C92451) *
                C47029) *
               C821 -
           ((((C307 * C4749 + C139448 * C5010) * C139346 +
              (C307 * C4659 + C139448 * C4916) * C181) *
                 C139600 +
             (C2083 + C2075) * C92451) *
                C139587 +
            ((C5021 + C5015) * C139600 + C2084 * C92451) * C47029) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C92451 +
            (C32533 + C32540) * C139600) *
               C47029 +
           ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
              C139303 * C6159 -
          ((C36003 * C139600 + C32537 * C92451) * C139587 +
           ((C36012 + C36006) * C139600 + (C32540 + C32533) * C92451) *
               C47029) *
              C139303 * C6160 +
          (((C36006 + C36012) * C92451 + (C37754 + C37758) * C139600) * C47029 +
           (C36002 * C92451 + (C36007 + C36013) * C139600) * C139587) *
              C139303 * C6161 -
          ((((C307 * C37519 + C139448 * C37751) * C139346 +
             (C307 * C37433 + C139448 * C37671) * C181) *
                C139600 +
            (C36013 + C36007) * C92451) *
               C139587 +
           (((C307 * C37520 + C139448 * C37752) * C139346 +
             (C307 * C37434 + C139448 * C37672) * C181) *
                C139600 +
            (C37758 + C37754) * C92451) *
               C47029) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[98] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C92451 +
            (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
             C36121 * C139384) *
                C139600) *
               C47029 +
           ((C2165 + C2166 - C2167 - C2184) * C92451 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C2565 +
          (((C34920 * C1876 -
             ((C307 * C1011 + C139448 * C1301) * C139571 +
              (C307 * C832 + C139448 * C1094) * C1875) +
             C35140 * C139384) *
                C92451 +
            (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
             C37072 * C139384) *
                C139600) *
               C47029 +
           ((C8649 - (C8650 + C8651) + C8661) * C92451 +
            (C40616 - (C40617 + C40618) + C40619) * C139600) *
               C139587) *
              C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C1875 +
             (C307 * C2745 + C139448 * C3017) * C139571 - C34922 * C1876 -
             C35141 * C139384) *
                C92451 +
            (C34922 * C1875 + C35141 * C139571 -
             (C307 * C19903 + C139448 * C20237) * C1876 -
             (C307 * C20129 + C139448 * C20438) * C139384) *
                C139600) *
               C47029 +
           ((C2844 * C1875 + C3028 * C139571 - C33388 * C1876 -
             C33598 * C139384) *
                C92451 +
            (C33388 * C1875 + C33598 * C139571 -
             (C307 * C19902 + C139448 * C20236) * C1876 -
             (C307 * C20128 + C139448 * C20439) * C139384) *
                C139600) *
               C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C92451 +
            (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
             C36121 * C139384) *
                C139600) *
               C47029 +
           ((C2165 + C2166 - C2167 - C2184) * C92451 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C139346 * C821 +
          (((C2167 - (C2166 + C2165) + C2184) * C92451 +
            (C32643 - (C32642 + C32641) + C32644) * C139600) *
               C47029 +
           ((C2172 - (C2171 + C2170) + C2186) * C92451 +
            (C32645 - (C32646 + C32647) + C32648) * C139600) *
               C139587) *
              C139346 * C822 +
          ((C2188 * C92451 + (C32647 + C32646 - C32645 - C32648) * C139600) *
               C47029 +
           ((C2177 + C2176 - C2175 - C2187) * C92451 +
            (C1988 * C1875 + C2183 * C139571 -
             (C307 * C4659 + C139448 * C4916) * C1876 -
             (C307 * C4834 + C139448 * C5098) * C139384) *
                C139600) *
               C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6281 +
            (C307 * C245 + C139448 * C474) * C6159 - C32431 * C6282 -
            C32649 * C6160 + C35899 * C6283 + C36121 * C6161 - C37682 * C6284 -
            C37829 * C6162) *
               C92451 +
           (C32431 * C6281 + C32649 * C6159 - C35899 * C6282 - C36121 * C6160 +
            C37682 * C6283 + C37829 * C6161 -
            (C307 * C37434 + C139448 * C37672) * C6284 -
            (C307 * C37596 + C139448 * C37824) * C6162) *
               C139600) *
              C47029 +
          ((C337 * C6281 + C493 * C6159 - C1984 * C6282 - C2180 * C6160 +
            C4930 * C6283 + C5114 * C6161 - C35900 * C6284 - C36122 * C6162) *
               C92451 +
           (C1984 * C6281 + C2180 * C6159 - C4930 * C6282 - C5114 * C6160 +
            C35900 * C6283 + C36122 * C6161 -
            (C307 * C37433 + C139448 * C37671) * C6284 -
            (C307 * C37595 + C139448 * C37825) * C6162) *
               C139600) *
              C139587) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[98] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C47029 +
            ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C94763 + C94762) * C139303 + (C94761 + C94760) * C3364) *
                C139587 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C47029) *
               C139448 * C139384) *
              C2565 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C47029 +
            ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
              C139600 * C5950) *
                 C3364 +
             (C92849 * C3901 + C92451 * C4414 + C92850 * C5473 +
              C139600 * C5953) *
                 C139303) *
                C139587) *
               C139448 * C139384 -
           (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) *
                C139587 +
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139303 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C3364) *
                C47029) *
               C139448 * C139571) *
              C2566 +
          ((((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
              C139600 * C4412) *
                 C3364 +
             (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
              C139600 * C4418) *
                 C139303) *
                C47029 +
            ((C95683 + C95682) * C3364 + (C95685 + C95684) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C92850 * C19904 + C139600 * C20540 + C92849 * C3904 +
              C92451 * C4417) *
                 C139303 +
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C3364) *
                C139587 +
            ((C92850 * C19905 + C139600 * C20541 + C92849 * C3905 +
              C92451 * C4418) *
                 C139303 +
             (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
              C92451 * C4412) *
                 C3364) *
                C47029) *
               C139448 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C822 +
            (C92885 + C92884) * C828 + (C92887 + C92886) * C823) *
               C139587) *
              C139448 * C139571 +
          (((C94760 + C94761) * C827 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C821 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C826) +
            (C94762 + C94763) * C822 - (C94764 + C94765) * C828 -
            (C94766 + C94767) * C823) *
               C47029 +
           ((C94765 + C94764) * C827 -
            ((C94763 + C94762) * C821 + (C94761 + C94760) * C826) +
            (C94767 + C94766) * C822 -
            (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
             C92451 * C2266) *
                C828 -
            (C92850 * C4667 + C139600 * C5198 + C92849 * C1709 +
             C92451 * C2271) *
                C823) *
               C139587) *
              C139448 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C3364 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139303) *
               C47029 +
           ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
               C139587) *
              C139448 * C6159 -
          (((C94763 + C94762) * C139303 + (C94761 + C94760) * C3364) * C139587 +
           ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
             C92451 * C2268) *
                C139303 +
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C3364) *
               C47029) *
              C139448 * C6160 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C3364 +
            (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
             C139600 * C6508) *
                C139303) *
               C47029 +
           ((C98113 + C98112) * C3364 + (C98115 + C98114) * C139303) *
               C139587) *
              C139448 * C6161 -
          (((C92850 * C37435 + C139600 * C37897 + C92849 * C6167 +
             C92451 * C6507) *
                C139303 +
            (C92850 * C37433 + C139600 * C37895 + C92849 * C6164 +
             C92451 * C6504) *
                C3364) *
               C139587 +
           ((C92850 * C37436 + C139600 * C37898 + C92849 * C6168 +
             C92451 * C6508) *
                C139303 +
            (C92850 * C37434 + C139600 * C37896 + C92849 * C6165 +
             C92451 * C6505) *
                C3364) *
               C47029) *
              C139448 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[98] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C2661 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C2566 +
            (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
             C139600 * C4494) *
                C2567) *
               C47029 +
           ((C92877 + C92876) * C2660 + (C92966 + C92967) * C2565 -
            (C93759 + C93758) * C2661 - (C93872 + C93873) * C2566 +
            (C95683 + C95682) * C2662 + (C95788 + C95789) * C2567) *
               C139587) *
              C139448 * C139303 * C139571 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C2661 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C2565 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C2660) +
            (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
             C139600 * C6029) *
                C2566 -
            (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
             C92451 * C4412) *
                C2662 -
            (C92850 * C20021 + C139600 * C20650 + C92849 * C3994 +
             C92451 * C4494) *
                C2567) *
               C47029 +
           ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
             C139600 * C5950) *
                C2661 -
            ((C94875 + C94874) * C2565 + (C94761 + C94760) * C2660) +
            (C92849 * C3990 + C92451 * C4495 + C92850 * C5556 +
             C139600 * C6030) *
                C2566 -
            (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
             C92451 * C4411) *
                C2662 -
            (C92850 * C20020 + C139600 * C20651 + C92849 * C3993 +
             C92451 * C4496) *
                C2567) *
               C139587) *
              C139448 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) *
                C139587) *
               C139448 * C821 -
           (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
               C139448 * C822 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C47029 +
            ((C92885 + C92884) * C181 + (C92970 + C92971) * C139346) *
                C139587) *
               C139448 * C823) *
              C139571 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C47029 +
            ((C94765 + C94764) * C181 + (C94876 + C94877) * C139346) *
                C139587) *
               C139448 * C822 -
           (((C94875 + C94874) * C139346 + (C94761 + C94760) * C181) * C139587 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C47029) *
               C139448 * C821 -
           (((C92850 * C4749 + C139600 * C5288 + C92849 * C1793 +
              C92451 * C2367) *
                 C139346 +
             (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
              C92451 * C2266) *
                 C181) *
                C139587 +
            ((C94877 + C94876) * C139346 + (C94764 + C94765) * C181) * C47029) *
               C139448 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139346) *
               C47029 +
           ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) * C139587) *
              C139448 * C139303 * C6159 -
          (((C94875 + C94874) * C139346 + (C94761 + C94760) * C181) * C139587 +
           ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
             C92451 * C2368) *
                C139346 +
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C181) *
               C47029) *
              C139448 * C139303 * C6160 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C181 +
            (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
             C139600 * C6561) *
                C139346) *
               C47029 +
           ((C98113 + C98112) * C181 + (C98218 + C98219) * C139346) * C139587) *
              C139448 * C139303 * C6161 -
          (((C92850 * C37519 + C139600 * C37965 + C92849 * C6226 +
             C92451 * C6560) *
                C139346 +
            (C92850 * C37433 + C139600 * C37895 + C92849 * C6164 +
             C92451 * C6504) *
                C181) *
               C139587 +
           ((C92850 * C37520 + C139600 * C37966 + C92849 * C6227 +
             C92451 * C6561) *
                C139346 +
            (C92850 * C37434 + C139600 * C37896 + C92849 * C6165 +
             C92451 * C6505) *
                C181) *
               C47029) *
              C139448 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[98] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C47029 +
           ((C92877 + C92876) * C1875 + (C93050 + C93051) * C139571 -
            (C94761 + C94760) * C1876 - (C94984 + C94985) * C139384) *
               C139587) *
              C139448 * C2565 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C1876 -
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139571 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C1875) +
            (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
             C139600 * C6106) *
                C139384) *
               C47029 +
           ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
             C139600 * C5950) *
                C1876 -
            ((C93982 + C93983) * C139571 + (C93759 + C93758) * C1875) +
            (C92849 * C4076 + C92451 * C4574 + C92850 * C5636 +
             C139600 * C6107) *
                C139384) *
               C139587) *
              C139448 * C2566 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C1875 +
            (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
             C139600 * C4576) *
                C139571 -
            (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
             C92451 * C4412) *
                C1876 -
            (C92850 * C20129 + C139600 * C20753 + C92849 * C4080 +
             C92451 * C4576) *
                C139384) *
               C47029 +
           ((C95683 + C95682) * C1875 + (C95892 + C95893) * C139571 -
            (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
             C92451 * C4411) *
                C1876 -
            (C92850 * C20128 + C139600 * C20754 + C92849 * C4079 +
             C92451 * C4577) *
                C139384) *
               C139587) *
              C139448 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C47029 +
           ((C92877 + C92876) * C1875 + (C93050 + C93051) * C139571 -
            (C94761 + C94760) * C1876 - (C94984 + C94985) * C139384) *
               C139587) *
              C139448 * C139346 * C821 +
          (((C94760 + C94761) * C1876 -
            ((C93051 + C93050) * C139571 + (C92876 + C92877) * C1875) +
            (C94985 + C94984) * C139384) *
               C47029 +
           ((C94765 + C94764) * C1876 -
            ((C93052 + C93053) * C139571 + (C92881 + C92880) * C1875) +
            (C94986 + C94987) * C139384) *
               C139587) *
              C139448 * C139346 * C822 +
          (((C92880 + C92881) * C1875 + (C93053 + C93052) * C139571 -
            (C94764 + C94765) * C1876 - (C94987 + C94986) * C139384) *
               C47029 +
           ((C92885 + C92884) * C1875 + (C93054 + C93055) * C139571 -
            (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
             C92451 * C2266) *
                C1876 -
            (C92850 * C4834 + C139600 * C5376 + C92849 * C1880 +
             C92451 * C2463) *
                C139384) *
               C139587) *
              C139448 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C6281 +
           (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
               C6159 -
           (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
            C92451 * C2264) *
               C6282 -
           (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
            C92451 * C2460) *
               C6160 +
           (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
            C139600 * C6505) *
               C6283 +
           (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
            C139600 * C6612) *
               C6161 -
           (C92850 * C37434 + C139600 * C37896 + C92849 * C6165 +
            C92451 * C6505) *
               C6284 -
           (C92850 * C37596 + C139600 * C38033 + C92849 * C6287 +
            C92451 * C6612) *
               C6162) *
              C47029 +
          ((C92877 + C92876) * C6281 + (C93050 + C93051) * C6159 -
           (C94761 + C94760) * C6282 - (C94984 + C94985) * C6160 +
           (C98113 + C98112) * C6283 + (C98322 + C98323) * C6161 -
           (C92850 * C37433 + C139600 * C37895 + C92849 * C6164 +
            C92451 * C6504) *
               C6284 -
           (C92850 * C37595 + C139600 * C38034 + C92849 * C6286 +
            C92451 * C6613) *
               C6162) *
              C139587) *
         C139448 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C6694 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139601 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C6695 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139590 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C6696 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C6691) *
               C139448 * C92451 +
           ((C94108 + C94109) * C6694 + (C94110 + C94111) * C139601 -
            (C94112 + C94113) * C6695 - (C94114 + C94115) * C139590 +
            (C94116 + C94117) * C6696 + (C94118 + C94119) * C6691) *
               C139448 * C139600) *
              C9074 +
          (((C94113 + C94112) * C6695 -
            ((C94111 + C94110) * C139601 + (C94109 + C94108) * C6694) +
            (C94115 + C94114) * C139590 - (C94117 + C94116) * C6696 -
            (C94119 + C94118) * C6691) *
               C139448 * C92451 +
           ((C97484 + C97485) * C6695 -
            ((C97486 + C97487) * C139601 + (C97488 + C97489) * C6694) +
            (C97490 + C97491) * C139590 -
            (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
             C47029 * C4662) *
                C6696 -
            (C47034 * C4667 + C139587 * C4671 + C47033 * C4665 +
             C47029 * C4670) *
                C6691) *
               C139448 * C139600) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C92451 +
            ((C94108 + C94109) * C181 + (C94230 + C94231) * C139346) * C139448 *
                C139600) *
               C139601 -
           (((C94232 + C94233) * C139346 + (C94112 + C94113) * C181) * C139448 *
                C139600 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139448 * C92451) *
               C139590 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                 C139346) *
                C139448 * C92451 +
            ((C94116 + C94117) * C181 + (C94234 + C94235) * C139346) * C139448 *
                C139600) *
               C6691) *
              C9074 +
          ((((C94113 + C94112) * C181 + (C94233 + C94232) * C139346) * C139448 *
                C92451 +
            ((C97484 + C97485) * C181 + (C97598 + C97599) * C139346) * C139448 *
                C139600) *
               C139590 -
           (((C97600 + C97601) * C139346 + (C97488 + C97489) * C181) * C139448 *
                C139600 +
            ((C94231 + C94230) * C139346 + (C94109 + C94108) * C181) * C139448 *
                C92451) *
               C139601 -
           (((C47034 * C4749 + C139587 * C4753 + C47033 * C4748 +
              C47029 * C4752) *
                 C139346 +
             (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
              C47029 * C4662) *
                 C181) *
                C139448 * C139600 +
            ((C94235 + C94234) * C139346 + (C94117 + C94116) * C181) * C139448 *
                C92451) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C9224 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C9074 -
            (C94109 + C94108) * C9225 - (C94346 + C94347) * C139384) *
               C139448 * C92451 +
           ((C94108 + C94109) * C9224 + (C94347 + C94346) * C9074 -
            (C97488 + C97489) * C9225 - (C97709 + C97708) * C139384) *
               C139448 * C139600) *
              C139346 * C139601 +
          (((C94113 + C94112) * C9225 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C9074 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C9224) +
            (C94348 + C94349) * C139384) *
               C139448 * C92451 +
           ((C97484 + C97485) * C9225 -
            ((C94349 + C94348) * C9074 + (C94112 + C94113) * C9224) +
            (C97711 + C97710) * C139384) *
               C139448 * C139600) *
              C139346 * C139590 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C9224 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C9074 -
            (C94117 + C94116) * C9225 - (C94350 + C94351) * C139384) *
               C139448 * C92451 +
           ((C94116 + C94117) * C9224 + (C94351 + C94350) * C9074 -
            (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
             C47029 * C4662) *
                C9225 -
            (C47034 * C4834 + C139587 * C4838 + C47033 * C4833 +
             C47029 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6694 +
             (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
             C338 * C139590 + C339 * C6696 + C340 * C6691) *
                C92451 +
            (C41426 + C41427 - C41428 - C41429 + C41430 + C41431) * C139600) *
               C47029 +
           ((C337 * C6694 + C338 * C139601 - C339 * C6695 - C340 * C139590 +
             C341 * C6696 + C342 * C6691) *
                C92451 +
            (C41432 + C41433 - C41434 - C41435 + C41436 + C41437) * C139600) *
               C139587) *
              C9074 +
          (((C41428 - (C41427 + C41426) + C41429 - C41430 - C41431) * C92451 +
            (C4930 * C6695 - (C35898 * C139601 + C35899 * C6694) +
             C4931 * C139590 - C4932 * C6696 - C4933 * C6691) *
                C139600) *
               C47029 +
           ((C41434 - (C41433 + C41432) + C41435 - C41436 - C41437) * C92451 +
            (C4932 * C6695 - (C4931 * C139601 + C4930 * C6694) +
             C4933 * C139590 - (C307 * C4659 + C139448 * C4916) * C6696 -
             (C307 * C4667 + C139448 * C4920) * C6691) *
                C139600) *
               C139587) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C92451 +
             (C32533 + C32540) * C139600) *
                C47029 +
            ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
               C139601 -
           ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
               C139590 +
           ((C421 * C92451 + C32538 * C139600) * C47029 +
            ((C409 + C419) * C92451 + (C2075 + C2083) * C139600) * C139587) *
               C6691) *
              C9074 +
          (((C32536 * C92451 + C36002 * C139600) * C47029 +
            (C32538 * C92451 + (C5015 + C5021) * C139600) * C139587) *
               C139590 -
           ((C36003 * C139600 + C32537 * C92451) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C92451) *
                C47029) *
               C139601 -
           ((((C307 * C4749 + C139448 * C5010) * C139346 +
              (C307 * C4659 + C139448 * C4916) * C181) *
                 C139600 +
             (C2083 + C2075) * C92451) *
                C139587 +
            ((C5021 + C5015) * C139600 + C2084 * C92451) * C47029) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C9224 +
             (C307 * C245 + C139448 * C474) * C9074 - C32431 * C9225 -
             C32649 * C139384) *
                C92451 +
            (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
             C36121 * C139384) *
                C139600) *
               C47029 +
           ((C9449 + C9450 - C9451 - C9452) * C92451 +
            (C41634 + C41635 - C41636 - C41637) * C139600) *
               C139587) *
              C139346 * C139601 +
          (((C9451 - (C9450 + C9449) + C9452) * C92451 +
            (C41636 - (C41635 + C41634) + C41637) * C139600) *
               C47029 +
           ((C9455 - (C9454 + C9453) + C9456) * C92451 +
            (C41638 - (C41639 + C41640) + C41641) * C139600) *
               C139587) *
              C139346 * C139590 +
          ((C9463 * C92451 + (C41640 + C41639 - C41638 - C41641) * C139600) *
               C47029 +
           ((C9459 + C9458 - C9457 - C9460) * C92451 +
            (C1988 * C9224 + C2183 * C9074 -
             (C307 * C4659 + C139448 * C4916) * C9225 -
             (C307 * C4834 + C139448 * C5098) * C139384) *
                C139600) *
               C139587) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6694 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139601 -
            (C92876 + C92877) * C6695 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C6696 + (C92882 + C92883) * C6691) *
               C47029 +
           ((C92877 + C92876) * C6694 + (C92879 + C92878) * C139601 -
            (C92881 + C92880) * C6695 - (C92883 + C92882) * C139590 +
            (C92885 + C92884) * C6696 + (C92887 + C92886) * C6691) *
               C139587) *
              C139448 * C9074 +
          (((C94760 + C94761) * C6695 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139601 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C6694) +
            (C94762 + C94763) * C139590 - (C94764 + C94765) * C6696 -
            (C94766 + C94767) * C6691) *
               C47029 +
           ((C94765 + C94764) * C6695 -
            ((C94763 + C94762) * C139601 + (C94761 + C94760) * C6694) +
            (C94767 + C94766) * C139590 -
            (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
             C92451 * C2266) *
                C6696 -
            (C92850 * C4667 + C139600 * C5198 + C92849 * C1709 +
             C92451 * C2271) *
                C6691) *
               C139587) *
              C139448 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) *
                C139587) *
               C139448 * C139601 -
           (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
               C139448 * C139590 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C47029 +
            ((C92885 + C92884) * C181 + (C92970 + C92971) * C139346) *
                C139587) *
               C139448 * C6691) *
              C9074 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C47029 +
            ((C94765 + C94764) * C181 + (C94876 + C94877) * C139346) *
                C139587) *
               C139448 * C139590 -
           (((C94875 + C94874) * C139346 + (C94761 + C94760) * C181) * C139587 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C47029) *
               C139448 * C139601 -
           (((C92850 * C4749 + C139600 * C5288 + C92849 * C1793 +
              C92451 * C2367) *
                 C139346 +
             (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
              C92451 * C2266) *
                 C181) *
                C139587 +
            ((C94877 + C94876) * C139346 + (C94764 + C94765) * C181) * C47029) *
               C139448 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[99] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C9224 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C9074 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C9225 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C47029 +
           ((C92877 + C92876) * C9224 + (C93050 + C93051) * C9074 -
            (C94761 + C94760) * C9225 - (C94984 + C94985) * C139384) *
               C139587) *
              C139448 * C139346 * C139601 +
          (((C94760 + C94761) * C9225 -
            ((C93051 + C93050) * C9074 + (C92876 + C92877) * C9224) +
            (C94985 + C94984) * C139384) *
               C47029 +
           ((C94765 + C94764) * C9225 -
            ((C93052 + C93053) * C9074 + (C92881 + C92880) * C9224) +
            (C94986 + C94987) * C139384) *
               C139587) *
              C139448 * C139346 * C139590 +
          (((C92880 + C92881) * C9224 + (C93053 + C93052) * C9074 -
            (C94764 + C94765) * C9225 - (C94987 + C94986) * C139384) *
               C47029 +
           ((C92885 + C92884) * C9224 + (C93054 + C93055) * C9074 -
            (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
             C92451 * C2266) *
                C9225 -
            (C92850 * C4834 + C139600 * C5376 + C92849 * C1880 +
             C92451 * C2463) *
                C139384) *
               C139587) *
              C139448 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C7401 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C7396 -
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C7402 -
             (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                 C139308) *
                C139448 * C92451 +
            ((C94108 + C94109) * C7401 + (C94110 + C94111) * C7396 -
             (C94112 + C94113) * C7402 - (C94114 + C94115) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C94113 + C94112) * C7402 -
             ((C94111 + C94110) * C7396 + (C94109 + C94108) * C7401) +
             (C94115 + C94114) * C139308) *
                C139448 * C92451 +
            ((C97484 + C97485) * C7402 -
             ((C97486 + C97487) * C7396 + (C97488 + C97489) * C7401) +
             (C97490 + C97491) * C139308) *
                C139448 * C139600) *
               C139384) *
              C139570 +
          ((((C47765 + C47764) * C7402 -
             ((C47763 + C47762) * C7396 + (C47761 + C47760) * C7401) +
             (C47767 + C47766) * C139308) *
                C139448 * C92451 +
            ((C56380 + C56381) * C7402 -
             ((C51256 + C51257) * C7396 + (C51258 + C51259) * C7401) +
             (C56382 + C56383) * C139308) *
                C139448 * C139600) *
               C9074 +
           (((C51259 + C51258) * C7401 + (C51257 + C51256) * C7396 -
             (C56381 + C56380) * C7402 - (C56383 + C56382) * C139308) *
                C139448 * C92451 +
            ((C53084 + C53085) * C7401 + (C53086 + C53087) * C7396 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C7402 -
             (C47034 * C5472 + C139587 * C5478 + C47033 * C5473 +
              C47029 * C5479) *
                 C139308) *
                C139448 * C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C923 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139570 -
             (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
                C139448 * C92451 +
            ((C94108 + C94109) * C923 + (C94230 + C94231) * C139570 -
             (C51258 + C51259) * C924 - (C51371 + C51370) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C47765 + C47764) * C924 -
             ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                  C139570 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C923) +
             (C47884 + C47885) * C139360) *
                C139448 * C92451 +
            ((C56380 + C56381) * C924 -
             ((C94232 + C94233) * C139570 + (C94112 + C94113) * C923) +
             (C56519 + C56518) * C139360) *
                C139448 * C139600) *
               C139308) *
              C9074 +
          ((((C51259 + C51258) * C924 -
             ((C94231 + C94230) * C139570 + (C94109 + C94108) * C923) +
             (C51370 + C51371) * C139360) *
                C139448 * C92451 +
            ((C53084 + C53085) * C924 -
             ((C97600 + C97601) * C139570 + (C97488 + C97489) * C923) +
             (C53191 + C53190) * C139360) *
                C139448 * C139600) *
               C7396 +
           (((C94113 + C94112) * C923 + (C94233 + C94232) * C139570 -
             (C56381 + C56380) * C924 - (C56518 + C56519) * C139360) *
                C139448 * C92451 +
            ((C97484 + C97485) * C923 + (C97598 + C97599) * C139570 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C924 -
             (C47034 * C5555 + C139587 * C5558 + C47033 * C5556 +
              C47029 * C5559) *
                 C139360) *
                C139448 * C139600) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C9224 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C9074 -
             (C94109 + C94108) * C9225 - (C94346 + C94347) * C139384) *
                C139448 * C92451 +
            ((C94108 + C94109) * C9224 + (C94347 + C94346) * C9074 -
             (C97488 + C97489) * C9225 - (C97709 + C97708) * C139384) *
                C139448 * C139600) *
               C139570 +
           (((C51259 + C51258) * C9225 -
             ((C47999 + C47998) * C9074 + (C47761 + C47760) * C9224) +
             (C51481 + C51480) * C139384) *
                C139448 * C92451 +
            ((C53084 + C53085) * C9225 -
             ((C51480 + C51481) * C9074 + (C51258 + C51259) * C9224) +
             (C53294 + C53295) * C139384) *
                C139448 * C139600) *
               C139360) *
              C7396 +
          ((((C94113 + C94112) * C9225 -
             ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                  C9074 +
              (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                  C9224) +
             (C94348 + C94349) * C139384) *
                C139448 * C92451 +
            ((C97484 + C97485) * C9225 -
             ((C94349 + C94348) * C9074 + (C94112 + C94113) * C9224) +
             (C97711 + C97710) * C139384) *
                C139448 * C139600) *
               C139570 +
           (((C47765 + C47764) * C9224 + (C48000 + C48001) * C9074 -
             (C56381 + C56380) * C9225 - (C56655 + C56654) * C139384) *
                C139448 * C92451 +
            ((C56380 + C56381) * C9224 + (C56654 + C56655) * C9074 -
             (C47034 * C5469 + C139587 * C5475 + C47033 * C5470 +
              C47029 * C5476) *
                 C9225 -
             (C47034 * C5635 + C139587 * C5638 + C47033 * C5636 +
              C47029 * C5639) *
                 C139384) *
                C139448 * C139600) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C7401 +
              (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
              C338 * C139308) *
                 C92451 +
             (C40326 + C40327 - C40328 - C40329) * C139600) *
                C47029 +
            ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                 C92451 +
             (C40330 + C40331 - C40332 - C40333) * C139600) *
                C139587) *
               C9074 +
           (((C40328 - (C40327 + C40326) + C40329) * C92451 +
             (C43508 - (C43509 + C43510) + C43511) * C139600) *
                C47029 +
            ((C40332 - (C40331 + C40330) + C40333) * C92451 +
             (C43512 - (C43513 + C43514) + C43515) * C139600) *
                C139587) *
               C139384) *
              C139570 +
          ((((C1116 * C7402 -
              ((C307 * C839 + C139448 * C1098) * C7396 +
               (C307 * C832 + C139448 * C1094) * C7401) +
              C1117 * C139308) *
                 C92451 +
             (C40334 - (C40335 + C40336) + C40337) * C139600) *
                C47029 +
            ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
              C1119 * C139308) *
                 C92451 +
             (C40338 - (C40339 + C40340) + C40341) * C139600) *
                C139587) *
               C9074 +
           (((C40336 + C40335 - C40334 - C40337) * C92451 +
             (C36846 * C7401 + C36847 * C7396 - C36848 * C7402 -
              C36849 * C139308) *
                 C139600) *
                C47029 +
            ((C40340 + C40339 - C40338 - C40341) * C92451 +
             (C36848 * C7401 + C36849 * C7396 -
              (C307 * C5469 + C139448 * C5715) * C7402 -
              (C307 * C5472 + C139448 * C5718) * C139308) *
                 C139600) *
                C139587) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C923 +
              (C307 * C182 + C139448 * C394) * C139570 -
              (C307 * C832 + C139448 * C1094) * C924 -
              (C307 * C927 + C139448 * C1195) * C139360) *
                 C92451 +
             (C36952 + C36953 - C36954 - C36955) * C139600) *
                C47029 +
            ((C1201 + C1202 - C1203 - C1220) * C92451 + C42590 * C139600) *
                C139587) *
               C7396 +
           (((C1203 - (C1202 + C1201) + C1220) * C92451 + C42591 * C139600) *
                C47029 +
            ((C1208 - (C1207 + C1206) + C1222) * C92451 +
             (C10196 - (C10197 + C10198) + C10199) * C139600) *
                C139587) *
               C139308) *
              C9074 +
          ((((C36954 - (C36953 + C36952) + C36955) * C92451 +
             (C36956 - (C36957 + C36958) + C36968) * C139600) *
                C47029 +
            (C42591 * C92451 +
             (C36961 - (C36962 + C36963) + C36969) * C139600) *
                C139587) *
               C7396 +
           ((C42590 * C92451 + (C36963 + C36962 - C36961 - C36969) * C139600) *
                C47029 +
            ((C10198 + C10197 - C10196 - C10199) * C92451 +
             (C4932 * C923 + C5019 * C139570 -
              (C307 * C5469 + C139448 * C5715) * C924 -
              (C307 * C5555 + C139448 * C5797) * C139360) *
                 C139600) *
                C139587) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C307 * C107 + C139448 * C308) * C9224 +
                         (C307 * C245 + C139448 * C474) * C9074 -
                         C32431 * C9225 - C32649 * C139384) *
                            C92451 +
                        (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                         C36121 * C139384) *
                            C139600) *
                           C47029 +
                       ((C9449 + C9450 - C9451 - C9452) * C92451 +
                        (C41634 + C41635 - C41636 - C41637) * C139600) *
                           C139587) *
                          C139570 +
                      (((C34920 * C9225 -
                         ((C307 * C1011 + C139448 * C1301) * C9074 +
                          (C307 * C832 + C139448 * C1094) * C9224) +
                         C35140 * C139384) *
                            C92451 +
                        (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                         C37072 * C139384) *
                            C139600) *
                           C47029 +
                       ((C10298 - (C10299 + C10300) + C10301) * C92451 +
                        (C42722 - (C42723 + C42724) + C42725) * C139600) *
                           C139587) *
                          C139360) *
                         C7396 +
                     ((((C9451 - (C9450 + C9449) + C9452) * C92451 +
                        (C41636 - (C41635 + C41634) + C41637) * C139600) *
                           C47029 +
                       ((C9455 - (C9454 + C9453) + C9456) * C92451 +
                        (C41638 - (C41639 + C41640) + C41641) * C139600) *
                           C139587) *
                          C139570 +
                      (((C10300 + C10299 - C10298 - C10301) * C92451 +
                        (C42724 + C42723 - C42722 - C42725) * C139600) *
                           C47029 +
                       ((C10304 + C10303 - C10302 - C10305) * C92451 +
                        (C8435 * C9224 + C8660 * C9074 -
                         (C307 * C5469 + C139448 * C5715) * C9225 -
                         (C307 * C5635 + C139448 * C5874) * C139384) *
                            C139600) *
                           C139587) *
                          C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
                C47029 +
            ((C92877 + C92876) * C7401 + (C92879 + C92878) * C7396 -
             (C92881 + C92880) * C7402 - (C92883 + C92882) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C94760 + C94761) * C7402 -
             ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
               C92451 * C2268) *
                  C7396 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C7401) +
             (C94762 + C94763) * C139308) *
                C47029 +
            ((C94765 + C94764) * C7402 -
             ((C94763 + C94762) * C7396 + (C94761 + C94760) * C7401) +
             (C94767 + C94766) * C139308) *
                C139587) *
               C139448 * C139384) *
              C139570 +
          ((((C93758 + C93759) * C7402 -
             ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
               C92451 * C1400) *
                  C7396 +
              (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
               C92451 * C1396) *
                  C7401) +
             (C93760 + C93761) * C139308) *
                C47029 +
            ((C93763 + C93762) * C7402 -
             ((C93761 + C93760) * C7396 + (C93759 + C93758) * C7401) +
             (C93765 + C93764) * C139308) *
                C139587) *
               C139448 * C9074 +
           (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C7401 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C7396 -
             (C102506 + C102507) * C7402 - (C102508 + C102509) * C139308) *
                C47029 +
            ((C102507 + C102506) * C7401 + (C102509 + C102508) * C7396 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C7402 -
             (C92850 * C5472 + C139600 * C5952 + C92849 * C3902 +
              C92451 * C4415) *
                 C139308) *
                C139587) *
               C139448 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C923 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139570 -
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C924 -
             (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
              C92451 * C1497) *
                 C139360) *
                C47029 +
            ((C92877 + C92876) * C923 + (C92966 + C92967) * C139570 -
             (C93759 + C93758) * C924 - (C93872 + C93873) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C93758 + C93759) * C924 -
             ((C92967 + C92966) * C139570 + (C92876 + C92877) * C923) +
             (C93873 + C93872) * C139360) *
                C47029 +
            ((C93763 + C93762) * C924 -
             ((C92968 + C92969) * C139570 + (C92881 + C92880) * C923) +
             (C93874 + C93875) * C139360) *
                C139587) *
               C139448 * C139308) *
              C9074 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C924 -
             ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
               C92451 * C2368) *
                  C139570 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C923) +
             (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
              C139600 * C6029) *
                 C139360) *
                C47029 +
            ((C102507 + C102506) * C924 -
             ((C94875 + C94874) * C139570 + (C94761 + C94760) * C923) +
             (C102644 + C102645) * C139360) *
                C139587) *
               C139448 * C7396 +
           (((C94760 + C94761) * C923 + (C94874 + C94875) * C139570 -
             (C102506 + C102507) * C924 - (C102645 + C102644) * C139360) *
                C47029 +
            ((C94765 + C94764) * C923 + (C94876 + C94877) * C139570 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C924 -
             (C92850 * C5555 + C139600 * C6031 + C92849 * C3991 +
              C92451 * C4497) *
                 C139360) *
                C139587) *
               C139448 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C9225 -
             (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
              C92451 * C2460) *
                 C139384) *
                C47029 +
            ((C92877 + C92876) * C9224 + (C93050 + C93051) * C9074 -
             (C94761 + C94760) * C9225 - (C94984 + C94985) * C139384) *
                C139587) *
               C139448 * C139570 +
           (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C9225 -
             ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
               C92451 * C1602) *
                  C9074 +
              (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
               C92451 * C1396) *
                  C9224) +
             (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
              C139600 * C6106) *
                 C139384) *
                C47029 +
            ((C102507 + C102506) * C9225 -
             ((C93982 + C93983) * C9074 + (C93759 + C93758) * C9224) +
             (C102780 + C102781) * C139384) *
                C139587) *
               C139448 * C139360) *
              C7396 +
          ((((C94760 + C94761) * C9225 -
             ((C93051 + C93050) * C9074 + (C92876 + C92877) * C9224) +
             (C94985 + C94984) * C139384) *
                C47029 +
            ((C94765 + C94764) * C9225 -
             ((C93052 + C93053) * C9074 + (C92881 + C92880) * C9224) +
             (C94986 + C94987) * C139384) *
                C139587) *
               C139448 * C139570 +
           (((C93758 + C93759) * C9224 + (C93983 + C93982) * C9074 -
             (C102506 + C102507) * C9225 - (C102781 + C102780) * C139384) *
                C47029 +
            ((C93763 + C93762) * C9224 + (C93984 + C93985) * C9074 -
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C9225 -
             (C92850 * C5635 + C139600 * C6108 + C92849 * C4077 +
              C92451 * C4575) *
                 C139384) *
                C139587) *
               C139448 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C7401 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C7396 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C7402 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C139448 * C92451 +
           ((C94108 + C94109) * C7401 + (C94110 + C94111) * C7396 -
            (C94112 + C94113) * C7402 - (C94114 + C94115) * C139308) *
               C139448 * C139600) *
              C139603 +
          (((C94113 + C94112) * C7402 -
            ((C94111 + C94110) * C7396 + (C94109 + C94108) * C7401) +
            (C94115 + C94114) * C139308) *
               C139448 * C92451 +
           ((C97484 + C97485) * C7402 -
            ((C97486 + C97487) * C7396 + (C97488 + C97489) * C7401) +
            (C97490 + C97491) * C139308) *
               C139448 * C139600) *
              C139596 +
          (((C97489 + C97488) * C7401 + (C97487 + C97486) * C7396 -
            (C97485 + C97484) * C7402 - (C97491 + C97490) * C139308) *
               C139448 * C92451 +
           ((C99280 + C99281) * C7401 + (C99282 + C99283) * C7396 -
            (C47034 * C6163 + C139587 * C6169 + C47033 * C6164 +
             C47029 * C6170) *
                C7402 -
            (C47034 * C6166 + C139587 * C6172 + C47033 * C6167 +
             C47029 * C6173) *
                C139308) *
               C139448 * C139600) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C92451 +
            ((C94108 + C94109) * C181 + (C94230 + C94231) * C139346) * C139448 *
                C139600) *
               C7396 -
           (((C94232 + C94233) * C139346 + (C94112 + C94113) * C181) * C139448 *
                C139600 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139448 * C92451) *
               C139308) *
              C139603 +
          ((((C94113 + C94112) * C181 + (C94233 + C94232) * C139346) * C139448 *
                C92451 +
            ((C97484 + C97485) * C181 + (C97598 + C97599) * C139346) * C139448 *
                C139600) *
               C139308 -
           (((C97600 + C97601) * C139346 + (C97488 + C97489) * C181) * C139448 *
                C139600 +
            ((C94231 + C94230) * C139346 + (C94109 + C94108) * C181) * C139448 *
                C92451) *
               C7396) *
              C139596 +
          ((((C97489 + C97488) * C181 + (C97601 + C97600) * C139346) * C139448 *
                C92451 +
            ((C99280 + C99281) * C181 + (C99354 + C99355) * C139346) * C139448 *
                C139600) *
               C7396 -
           (((C47034 * C6225 + C139587 * C6228 + C47033 * C6226 +
              C47029 * C6229) *
                 C139346 +
             (C47034 * C6163 + C139587 * C6169 + C47033 * C6164 +
              C47029 * C6170) *
                 C181) *
                C139448 * C139600 +
            ((C97599 + C97598) * C139346 + (C97485 + C97484) * C181) * C139448 *
                C92451) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C10840 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139603 -
            (C94109 + C94108) * C10841 - (C94346 + C94347) * C139596 +
            (C97489 + C97488) * C10842 + (C97708 + C97709) * C10691) *
               C139448 * C92451 +
           ((C94108 + C94109) * C10840 + (C94347 + C94346) * C139603 -
            (C97488 + C97489) * C10841 - (C97709 + C97708) * C139596 +
            (C99280 + C99281) * C10842 + (C99427 + C99426) * C10691) *
               C139448 * C139600) *
              C139346 * C7396 +
          (((C94113 + C94112) * C10841 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139603 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C10840) +
            (C94348 + C94349) * C139596 - (C97485 + C97484) * C10842 -
            (C97710 + C97711) * C10691) *
               C139448 * C92451 +
           ((C97484 + C97485) * C10841 -
            ((C94349 + C94348) * C139603 + (C94112 + C94113) * C10840) +
            (C97711 + C97710) * C139596 -
            (C47034 * C6163 + C139587 * C6169 + C47033 * C6164 +
             C47029 * C6170) *
                C10842 -
            (C47034 * C6285 + C139587 * C6288 + C47033 * C6286 +
             C47029 * C6289) *
                C10691) *
               C139448 * C139600) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C7401 +
             (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
             C338 * C139308) *
                C92451 +
            (C40326 + C40327 - C40328 - C40329) * C139600) *
               C47029 +
           ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C139308) *
                C92451 +
            (C40330 + C40331 - C40332 - C40333) * C139600) *
               C139587) *
              C139603 +
          (((C40328 - (C40327 + C40326) + C40329) * C92451 +
            (C43508 - (C43509 + C43510) + C43511) * C139600) *
               C47029 +
           ((C40332 - (C40331 + C40330) + C40333) * C92451 +
            (C43512 - (C43513 + C43514) + C43515) * C139600) *
               C139587) *
              C139596 +
          (((C43510 + C43509 - C43508 - C43511) * C92451 +
            (C37682 * C7401 + C37683 * C7396 - C35900 * C7402 -
             C35901 * C139308) *
                C139600) *
               C47029 +
           ((C43514 + C43513 - C43512 - C43515) * C92451 +
            (C35900 * C7401 + C35901 * C7396 -
             (C307 * C6163 + C139448 * C6341) * C7402 -
             (C307 * C6166 + C139448 * C6344) * C139308) *
                C139600) *
               C139587) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C92451 +
             (C32533 + C32540) * C139600) *
                C47029 +
            ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
               C7396 -
           ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
               C139308) *
              C139603 +
          (((C32536 * C92451 + C36002 * C139600) * C47029 +
            (C32538 * C92451 + (C5015 + C5021) * C139600) * C139587) *
               C139308 -
           ((C36003 * C139600 + C32537 * C92451) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C92451) *
                C47029) *
               C7396) *
              C139596 +
          ((((C36006 + C36012) * C92451 + (C37754 + C37758) * C139600) *
                C47029 +
            (C36002 * C92451 + (C36007 + C36013) * C139600) * C139587) *
               C7396 -
           ((((C307 * C6225 + C139448 * C6397) * C139346 +
              (C307 * C6163 + C139448 * C6341) * C181) *
                 C139600 +
             (C5021 + C5015) * C92451) *
                C139587 +
            ((C36013 + C36007) * C139600 + C36003 * C92451) * C47029) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C10840 +
             (C307 * C245 + C139448 * C474) * C139603 - C32431 * C10841 -
             C32649 * C139596 + C35899 * C10842 + C36121 * C10691) *
                C92451 +
            (C32431 * C10840 + C32649 * C139603 - C35899 * C10841 -
             C36121 * C139596 + C37682 * C10842 + C37829 * C10691) *
                C139600) *
               C47029 +
           ((C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C92451 +
            (C43712 + C43713 - C43714 - C43715 + C43716 + C43717) * C139600) *
               C139587) *
              C139346 * C7396 +
          (((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C92451 +
            (C43714 - (C43713 + C43712) + C43715 - C43716 - C43717) * C139600) *
               C47029 +
           ((C11074 - (C11073 + C11072) + C11075 - C11076 - C11077) * C92451 +
            (C4932 * C10841 - (C2182 * C139603 + C1986 * C10840) +
             C5115 * C139596 - (C307 * C6163 + C139448 * C6341) * C10842 -
             (C307 * C6285 + C139448 * C6452) * C10691) *
                C139600) *
               C139587) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7401 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C7396 -
            (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
               C47029 +
           ((C92877 + C92876) * C7401 + (C92879 + C92878) * C7396 -
            (C92881 + C92880) * C7402 - (C92883 + C92882) * C139308) *
               C139587) *
              C139448 * C139603 +
          (((C94760 + C94761) * C7402 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C7396 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C7401) +
            (C94762 + C94763) * C139308) *
               C47029 +
           ((C94765 + C94764) * C7402 -
            ((C94763 + C94762) * C7396 + (C94761 + C94760) * C7401) +
            (C94767 + C94766) * C139308) *
               C139587) *
              C139448 * C139596 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C7401 +
            (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
             C139600 * C6508) *
                C7396 -
            (C98112 + C98113) * C7402 - (C98114 + C98115) * C139308) *
               C47029 +
           ((C98113 + C98112) * C7401 + (C98115 + C98114) * C7396 -
            (C92850 * C6163 + C139600 * C6503 + C92849 * C4658 +
             C92451 * C5193) *
                C7402 -
            (C92850 * C6166 + C139600 * C6506 + C92849 * C4665 +
             C92451 * C5197) *
                C139308) *
               C139587) *
              C139448 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) *
                C139587) *
               C139448 * C7396 -
           (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
               C139448 * C139308) *
              C139603 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C47029 +
            ((C94765 + C94764) * C181 + (C94876 + C94877) * C139346) *
                C139587) *
               C139448 * C139308 -
           (((C94875 + C94874) * C139346 + (C94761 + C94760) * C181) * C139587 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C47029) *
               C139448 * C7396) *
              C139596 +
          ((((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C47029 +
            ((C98113 + C98112) * C181 + (C98218 + C98219) * C139346) *
                C139587) *
               C139448 * C7396 -
           (((C92850 * C6225 + C139600 * C6559 + C92849 * C4748 +
              C92451 * C5287) *
                 C139346 +
             (C92850 * C6163 + C139600 * C6503 + C92849 * C4658 +
              C92451 * C5193) *
                 C181) *
                C139587 +
            ((C98219 + C98218) * C139346 + (C98112 + C98113) * C181) * C47029) *
               C139448 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C10840 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139603 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C10841 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139596 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C10691) *
               C47029 +
           ((C92877 + C92876) * C10840 + (C93050 + C93051) * C139603 -
            (C94761 + C94760) * C10841 - (C94984 + C94985) * C139596 +
            (C98113 + C98112) * C10842 + (C98322 + C98323) * C10691) *
               C139587) *
              C139448 * C139346 * C7396 +
          (((C94760 + C94761) * C10841 -
            ((C93051 + C93050) * C139603 + (C92876 + C92877) * C10840) +
            (C94985 + C94984) * C139596 - (C98112 + C98113) * C10842 -
            (C98323 + C98322) * C10691) *
               C47029 +
           ((C94765 + C94764) * C10841 -
            ((C93052 + C93053) * C139603 + (C92881 + C92880) * C10840) +
            (C94986 + C94987) * C139596 -
            (C92850 * C6163 + C139600 * C6503 + C92849 * C4658 +
             C92451 * C5193) *
                C10842 -
            (C92850 * C6285 + C139600 * C6614 + C92849 * C4833 +
             C92451 * C5375) *
                C10691) *
               C139587) *
              C139448 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C103 +
           (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
               C92 -
           (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
               C104 -
           (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
               C93 +
           (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
               C105 +
           (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
               C94 -
           (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
               C106 -
           (C47034 * C122 + C139587 * C129 + C47033 * C120 + C47029 * C128) *
               C95) *
              C139448 * C92451 +
          ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
            C139587 * C1702) *
               C103 +
           (C47033 * C1707 + C47029 * C1714 + C47034 * C1706 +
            C139587 * C1713) *
               C92 -
           (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
            C47029 * C1702) *
               C104 -
           (C47034 * C1705 + C139587 * C1712 + C47033 * C1706 +
            C47029 * C1713) *
               C93 +
           (C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
            C139587 * C1704) *
               C105 +
           (C47033 * C1705 + C47029 * C1712 + C47034 * C1709 +
            C139587 * C1715) *
               C94 -
           (C47034 * C1701 + C139587 * C1710 + C47033 * C1699 +
            C47029 * C1704) *
               C106 -
           (C47034 * C1711 + C139587 * C1716 + C47033 * C1709 +
            C47029 * C1715) *
               C95) *
              C139448 * C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C137108 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139562 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C137101 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C139308) *
               C139448 * C92451 +
           ((C94108 + C94109) * C137108 + (C94110 + C94111) * C139562 -
            (C94112 + C94113) * C137101 - (C94114 + C94115) * C139308) *
               C139448 * C139600) *
              C139372 * C2565 +
          (((C47765 + C47764) * C137101 -
            ((C47763 + C47762) * C139562 + (C47761 + C47760) * C137108) +
            (C47767 + C47766) * C139308) *
               C139448 * C92451 +
           ((C56380 + C56381) * C137101 -
            ((C51256 + C51257) * C139562 + (C51258 + C51259) * C137108) +
            (C56382 + C56383) * C139308) *
               C139448 * C139600) *
              C139372 * C2566 +
          (((C49689 + C49688) * C137108 + (C49687 + C49686) * C139562 -
            (C49685 + C49684) * C137101 - (C49691 + C49690) * C139308) *
               C139448 * C92451 +
           ((C51260 + C51261) * C137108 + (C51262 + C51263) * C139562 -
            (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
             C47029 * C3907) *
                C137101 -
            (C47034 * C3903 + C139587 * C3912 + C47033 * C3904 +
             C47029 * C3913) *
                C139308) *
               C139448 * C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C181 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139346) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C181 +
            (C47033 * C1794 + C47029 * C1799 + C47034 * C1791 +
             C139587 * C1796) *
                C139346) *
               C139448 * C139600) *
              C92 -
          (((C47034 * C1792 + C139587 * C1797 + C47033 * C1791 +
             C47029 * C1796) *
                C139346 +
            (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
             C47029 * C1702) *
                C181) *
               C139448 * C139600 +
           ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                C139346 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C181) *
               C139448 * C92451) *
              C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C181 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139346) *
               C139448 * C92451 +
           ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C181 +
            (C47033 * C1792 + C47029 * C1797 + C47034 * C1793 +
             C139587 * C1798) *
                C139346) *
               C139448 * C139600) *
              C94 -
          (((C47034 * C1795 + C139587 * C1800 + C47033 * C1793 +
             C47029 * C1798) *
                C139346 +
            (C47034 * C1701 + C139587 * C1710 + C47033 * C1699 +
             C47029 * C1704) *
                C181) *
               C139448 * C139600 +
           ((C47034 * C186 + C139587 * C192 + C47033 * C185 + C47029 * C191) *
                C139346 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C181) *
               C139448 * C92451) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C139448 * C92451 +
           ((C94108 + C94109) * C2660 + (C94230 + C94231) * C2565 -
            (C51258 + C51259) * C2661 - (C51371 + C51370) * C2566 +
            (C51260 + C51261) * C2662 + (C51373 + C51372) * C2567) *
               C139448 * C139600) *
              C139562 +
          (((C47765 + C47764) * C2661 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C2565 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C2660) +
            (C47884 + C47885) * C2566 - (C49685 + C49684) * C2662 -
            (C49800 + C49801) * C2567) *
               C139448 * C92451 +
           ((C56380 + C56381) * C2661 -
            ((C94232 + C94233) * C2565 + (C94112 + C94113) * C2660) +
            (C56519 + C56518) * C2566 -
            (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
             C47029 * C3907) *
                C2662 -
            (C47034 * C3992 + C139587 * C3998 + C47033 * C3993 +
             C47029 * C3999) *
                C2567) *
               C139448 * C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C244 +
            (C47033 * C1879 + C47029 * C1884 + C47034 * C1878 +
             C139587 * C1883) *
                C139372) *
               C139448 * C139600) *
              C139346 * C92 -
          (((C47034 * C1877 + C139587 * C1882 + C47033 * C1878 +
             C47029 * C1883) *
                C139372 +
            (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
             C47029 * C1702) *
                C244) *
               C139448 * C139600 +
           ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                C139372 +
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C244) *
               C139448 * C92451) *
              C139346 * C93 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C244 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139372) *
               C139448 * C92451 +
           ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C244 +
            (C47033 * C1877 + C47029 * C1882 + C47034 * C1880 +
             C139587 * C1885) *
                C139372) *
               C139448 * C139600) *
              C139346 * C94 -
          (((C47034 * C1881 + C139587 * C1886 + C47033 * C1880 +
             C47029 * C1885) *
                C139372 +
            (C47034 * C1701 + C139587 * C1710 + C47033 * C1699 +
             C47029 * C1704) *
                C244) *
               C139448 * C139600 +
           ((C47034 * C249 + C139587 * C255 + C47033 * C248 + C47029 * C254) *
                C139372 +
            (C47034 * C111 + C139587 * C121 + C47033 * C110 + C47029 * C119) *
                C244) *
               C139448 * C92451) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C92451 +
            ((C94108 + C94109) * C244 + (C94347 + C94346) * C139372) * C139448 *
                C139600) *
               C2565 -
           (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
                C139600 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
                C92451) *
               C2566 +
           (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C139448 *
                C92451 +
            ((C51260 + C51261) * C244 + (C51482 + C51483) * C139372) * C139448 *
                C139600) *
               C2567) *
              C139562 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C139448 *
                C92451 +
            ((C56380 + C56381) * C244 + (C56654 + C56655) * C139372) * C139448 *
                C139600) *
               C2566 -
           (((C94349 + C94348) * C139372 + (C94112 + C94113) * C244) * C139448 *
                C139600 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139448 * C92451) *
               C2565 -
           (((C47034 * C4078 + C139587 * C4084 + C47033 * C4079 +
              C47029 * C4085) *
                 C139372 +
             (C47034 * C3894 + C139587 * C3906 + C47033 * C3895 +
              C47029 * C3907) *
                 C244) *
                C139448 * C139600 +
            ((C49911 + C49910) * C139372 + (C49685 + C49684) * C244) * C139448 *
                C92451) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C103 +
            (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C92451 +
           (C32431 * C103 + C32432 * C92 - C1984 * C104 - C1985 * C93 +
            C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
               C139600) *
              C47029 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C92451 +
           (C1984 * C103 + C1985 * C92 - C1986 * C104 - C1987 * C93 +
            C1988 * C105 + C1989 * C94 -
            (C307 * C1701 + C139448 * C1965) * C106 -
            (C307 * C1711 + C139448 * C1970) * C95) *
               C139600) *
              C139587) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C92451 +
            (C35876 + C35877 - C35878 - C35879) * C139600) *
               C47029 +
           ((C337 * C137108 + C338 * C139562 - C339 * C137101 -
             C340 * C139308) *
                C92451 +
            (C35880 + C35881 - C35882 - C35883) * C139600) *
               C139587) *
              C139372 * C2565 +
          (((C1116 * C137101 -
             ((C307 * C839 + C139448 * C1098) * C139562 +
              (C307 * C832 + C139448 * C1094) * C137108) +
             C1117 * C139308) *
                C92451 +
            (C44532 - (C44533 + C44534) + C44535) * C139600) *
               C47029 +
           ((C1118 * C137101 - (C1117 * C139562 + C1116 * C137108) +
             C1119 * C139308) *
                C92451 +
            (C44536 - (C44537 + C44538) + C44539) * C139600) *
               C139587) *
              C139372 * C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C137108 +
             (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
             C2845 * C139308) *
                C92451 +
            (C34922 * C137108 + C34923 * C139562 - C33388 * C137101 -
             C33389 * C139308) *
                C139600) *
               C47029 +
           ((C2844 * C137108 + C2845 * C139562 - C2846 * C137101 -
             C2847 * C139308) *
                C92451 +
            (C33388 * C137108 + C33389 * C139562 -
             (C307 * C3894 + C139448 * C4164) * C137101 -
             (C307 * C3903 + C139448 * C4170) * C139308) *
                C139600) *
               C139587) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C92451 +
            (C32533 + C32540) * C139600) *
               C47029 +
           ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
              C92 -
          ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
           (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
              C93 +
          ((C421 * C92451 + C32538 * C139600) * C47029 +
           ((C409 + C419) * C92451 + (C2075 + C2083) * C139600) * C139587) *
              C94 -
          ((((C307 * C1795 + C139448 * C2067) * C139346 +
             (C307 * C1701 + C139448 * C1965) * C181) *
                C139600 +
            (C420 + C410) * C92451) *
               C139587 +
           ((C2083 + C2075) * C139600 + C422 * C92451) * C47029) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C92451 +
            (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C139600) *
               C47029 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C92451 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139562 +
          (((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C92451 +
            (C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C139600) *
               C47029 +
           ((C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C92451 +
            (C8435 * C2661 - (C2079 * C2565 + C1986 * C2660) + C8547 * C2566 -
             (C307 * C3894 + C139448 * C4164) * C2662 -
             (C307 * C3992 + C139448 * C4252) * C2567) *
                C139600) *
               C139587) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C92451 +
            (C32431 * C244 + C32649 * C139372) * C139600) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
              C139346 * C92 -
          (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
           ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
              C139346 * C93 +
          ((C501 * C92451 + (C30744 + C30743) * C139600) * C47029 +
           ((C489 + C499) * C92451 + (C30745 + C30746) * C139600) * C139587) *
              C139346 * C94 -
          ((((C307 * C1881 + C139448 * C2163) * C139372 +
             (C307 * C1701 + C139448 * C1965) * C244) *
                C139600 +
            (C500 + C490) * C92451) *
               C139587 +
           ((C30746 + C30745) * C139600 + C502 * C92451) * C47029) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C92451 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
               C2565 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C92451) *
                C47029) *
               C2566 +
           ((((C307 * C2570 + C139448 * C2827) * C244 +
              (C307 * C2745 + C139448 * C3017) * C139372) *
                 C92451 +
             (C34922 * C244 + C35141 * C139372) * C139600) *
                C47029 +
            ((C3022 + C3030) * C92451 + (C33595 + C33599) * C139600) *
                C139587) *
               C2567) *
              C139562 +
          ((((C1310 + C1318) * C92451 + (C31608 + C31607) * C139600) * C47029 +
            ((C1307 + C1317) * C92451 + (C31609 + C31610) * C139600) *
                C139587) *
               C2566 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
               C2565 -
           ((((C307 * C4078 + C139448 * C4332) * C139372 +
              (C307 * C3894 + C139448 * C4164) * C244) *
                 C139600 +
             (C3031 + C3025) * C92451) *
                C139587 +
            ((C33599 + C33595) * C139600 + (C3030 + C3022) * C92451) * C47029) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C47029 +
          ((C92877 + C92876) * C103 + (C92879 + C92878) * C92 -
           (C92881 + C92880) * C104 - (C92883 + C92882) * C93 +
           (C92885 + C92884) * C105 + (C92887 + C92886) * C94 -
           (C92850 * C1701 + C139600 * C2267 + C92849 * C111 + C92451 * C559) *
               C106 -
           (C92850 * C1711 + C139600 * C2272 + C92849 * C122 + C92451 * C565) *
               C95) *
              C139587) *
         C139448 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139562 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
               C47029 +
           ((C92877 + C92876) * C137108 + (C92879 + C92878) * C139562 -
            (C92881 + C92880) * C137101 - (C92883 + C92882) * C139308) *
               C139587) *
              C139448 * C139372 * C2565 +
          (((C93758 + C93759) * C137101 -
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139562 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C137108) +
            (C93760 + C93761) * C139308) *
               C47029 +
           ((C93763 + C93762) * C137101 -
            ((C93761 + C93760) * C139562 + (C93759 + C93758) * C137108) +
            (C93765 + C93764) * C139308) *
               C139587) *
              C139448 * C139372 * C2566 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C137108 +
            (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
             C139600 * C4418) *
                C139562 -
            (C95682 + C95683) * C137101 - (C95684 + C95685) * C139308) *
               C47029 +
           ((C95683 + C95682) * C137108 + (C95685 + C95684) * C139562 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C137101 -
            (C92850 * C3903 + C139600 * C4416 + C92849 * C2579 +
             C92451 * C3111) *
                C139308) *
               C139587) *
              C139448 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139346) *
               C47029 +
           ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) * C139587) *
              C139448 * C92 -
          (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
           ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
              C139448 * C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C47029 +
           ((C92885 + C92884) * C181 + (C92970 + C92971) * C139346) * C139587) *
              C139448 * C94 -
          (((C92850 * C1795 + C139600 * C2369 + C92849 * C186 + C92451 * C645) *
                C139346 +
            (C92850 * C1701 + C139600 * C2267 + C92849 * C111 + C92451 * C559) *
                C181) *
               C139587 +
           ((C92971 + C92970) * C139346 + (C92884 + C92885) * C181) * C47029) *
              C139448 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C2661 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C2566 +
            (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
             C139600 * C4494) *
                C2567) *
               C47029 +
           ((C92877 + C92876) * C2660 + (C92966 + C92967) * C2565 -
            (C93759 + C93758) * C2661 - (C93872 + C93873) * C2566 +
            (C95683 + C95682) * C2662 + (C95788 + C95789) * C2567) *
               C139587) *
              C139448 * C139562 +
          (((C93758 + C93759) * C2661 -
            ((C92967 + C92966) * C2565 + (C92876 + C92877) * C2660) +
            (C93873 + C93872) * C2566 - (C95682 + C95683) * C2662 -
            (C95789 + C95788) * C2567) *
               C47029 +
           ((C93763 + C93762) * C2661 -
            ((C92968 + C92969) * C2565 + (C92881 + C92880) * C2660) +
            (C93874 + C93875) * C2566 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C2662 -
            (C92850 * C3992 + C139600 * C4498 + C92849 * C2665 +
             C92451 * C3201) *
                C2567) *
               C139587) *
              C139448 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[102] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) * C139587) *
              C139448 * C139346 * C92 -
          (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
           ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
              C139448 * C139346 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C47029 +
           ((C92885 + C92884) * C244 + (C93054 + C93055) * C139372) * C139587) *
              C139448 * C139346 * C94 -
          (((C92850 * C1881 + C139600 * C2464 + C92849 * C249 + C92451 * C723) *
                C139372 +
            (C92850 * C1701 + C139600 * C2267 + C92849 * C111 + C92451 * C559) *
                C244) *
               C139587 +
           ((C93055 + C93054) * C139372 + (C92884 + C92885) * C244) * C47029) *
              C139448 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) *
                C139587) *
               C139448 * C2565 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139372 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C244) *
                C47029) *
               C139448 * C2566 +
           (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
              C139600 * C4412) *
                 C244 +
             (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
              C139600 * C4576) *
                 C139372) *
                C47029 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) *
                C139587) *
               C139448 * C2567) *
              C139562 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) *
                C139587) *
               C139448 * C2566 -
           (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
               C139448 * C2565 -
           (((C92850 * C4078 + C139600 * C4578 + C92849 * C2747 +
              C92451 * C3297) *
                 C139372 +
             (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
              C92451 * C3107) *
                 C244) *
                C139587 +
            ((C95893 + C95892) * C139372 + (C95682 + C95683) * C244) * C47029) *
               C139448 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C826 +
            (C47033 * C1707 + C47029 * C1714 + C47034 * C1706 +
             C139587 * C1713) *
                C821 -
            (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
             C47029 * C1702) *
                C827 -
            (C47034 * C1705 + C139587 * C1712 + C47033 * C1706 +
             C47029 * C1713) *
                C822 +
            (C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C828 +
            (C47033 * C1705 + C47029 * C1712 + C47034 * C1709 +
             C139587 * C1715) *
                C823) *
               C139448 * C139600) *
              C139372 * C139570 +
          (((C47765 + C47764) * C827 -
            ((C47763 + C47762) * C821 + (C47761 + C47760) * C826) +
            (C47767 + C47766) * C822 - (C47769 + C47768) * C828 -
            (C47771 + C47770) * C823) *
               C139448 * C92451 +
           ((C56380 + C56381) * C827 -
            ((C51256 + C51257) * C821 + (C51258 + C51259) * C826) +
            (C56382 + C56383) * C822 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C828 -
            (C47034 * C8122 + C139587 * C8123 + C47033 * C3902 +
             C47029 * C3911) *
                C823) *
               C139448 * C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C3364 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C139303) *
               C139448 * C92451 +
           ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) * C139448 *
               C139600) *
              C139372 * C3360 -
          (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) * C139448 *
               C139600 +
           ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) * C139448 *
               C92451) *
              C139372 * C3361 +
          (((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) * C139448 *
               C92451 +
           ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) * C139448 *
               C139600) *
              C139372 * C3362 -
          (((C47034 * C17960 + C139587 * C17964 + C47033 * C17961 +
             C47029 * C17965) *
                C139303 +
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C3364) *
               C139448 * C139600 +
           ((C50601 + C50600) * C139303 + (C50599 + C50598) * C3364) * C139448 *
               C92451) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C923 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C139570 -
            (C47761 + C47760) * C924 - (C47882 + C47883) * C139360) *
               C139448 * C92451 +
           ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
             C139587 * C1702) *
                C923 +
            (C47033 * C1794 + C47029 * C1799 + C47034 * C1791 +
             C139587 * C1796) *
                C139570 -
            (C51258 + C51259) * C924 - (C51371 + C51370) * C139360) *
               C139448 * C139600) *
              C821 +
          (((C47765 + C47764) * C924 -
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139570 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C923) +
            (C47884 + C47885) * C139360) *
               C139448 * C92451 +
           ((C56380 + C56381) * C924 -
            ((C47034 * C1792 + C139587 * C1797 + C47033 * C1791 +
              C47029 * C1796) *
                 C139570 +
             (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
              C47029 * C1702) *
                 C923) +
            (C56519 + C56518) * C139360) *
               C139448 * C139600) *
              C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C923 +
            (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                C139570 -
            (C47769 + C47768) * C924 - (C47886 + C47887) * C139360) *
               C139448 * C92451 +
           ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
             C139587 * C1704) *
                C923 +
            (C47033 * C1792 + C47029 * C1797 + C47034 * C1793 +
             C139587 * C1798) *
                C139570 -
            (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
             C47029 * C3899) *
                C924 -
            (C47034 * C8222 + C139587 * C8223 + C47033 * C3991 +
             C47029 * C3997) *
                C139360) *
               C139448 * C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
               C3427 +
           (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
               C3360 -
           (C47761 + C47760) * C3428 - (C47882 + C47883) * C3361 +
           (C49689 + C49688) * C3429 + (C49798 + C49799) * C3362 -
           (C50599 + C50598) * C3430 - (C50672 + C50673) * C3363) *
              C139448 * C92451 +
          ((C94108 + C94109) * C3427 + (C94230 + C94231) * C3360 -
           (C51258 + C51259) * C3428 - (C51371 + C51370) * C3361 +
           (C51260 + C51261) * C3429 + (C51373 + C51372) * C3362 -
           (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
            C47029 * C17963) *
               C3430 -
           (C47034 * C18088 + C139587 * C18090 + C47033 * C18089 +
            C47029 * C18091) *
               C3363) *
              C139448 * C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C244 +
             (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                 C139372) *
                C139448 * C92451 +
            ((C47033 * C1700 + C47029 * C1708 + C47034 * C1697 +
              C139587 * C1702) *
                 C244 +
             (C47033 * C1879 + C47029 * C1884 + C47034 * C1878 +
              C139587 * C1883) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
                C139600 +
            ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
                C92451) *
               C139360) *
              C821 +
          ((((C47765 + C47764) * C244 + (C48000 + C48001) * C139372) * C139448 *
                C92451 +
            ((C56380 + C56381) * C244 + (C56654 + C56655) * C139372) * C139448 *
                C139600) *
               C139360 -
           (((C47034 * C1877 + C139587 * C1882 + C47033 * C1878 +
              C47029 * C1883) *
                 C139372 +
             (C47034 * C1698 + C139587 * C1703 + C47033 * C1697 +
              C47029 * C1702) *
                 C244) *
                C139448 * C139600 +
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139372 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C244) *
                C139448 * C92451) *
               C139570) *
              C822 +
          ((((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C244 +
             (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                 C139372) *
                C139448 * C92451 +
            ((C47033 * C1698 + C47029 * C1703 + C47034 * C1699 +
              C139587 * C1704) *
                 C244 +
             (C47033 * C1877 + C47029 * C1882 + C47034 * C1880 +
              C139587 * C1885) *
                 C139372) *
                C139448 * C139600) *
               C139570 -
           (((C47034 * C8322 + C139587 * C8323 + C47033 * C4077 +
              C47029 * C4083) *
                 C139372 +
             (C47034 * C8120 + C139587 * C8121 + C47033 * C3893 +
              C47029 * C3899) *
                 C244) *
                C139448 * C139600 +
            ((C48003 + C48002) * C139372 + (C47769 + C47768) * C244) * C139448 *
                C92451) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C244 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139372) *
               C139448 * C92451 +
           ((C94108 + C94109) * C244 + (C94347 + C94346) * C139372) * C139448 *
               C139600) *
              C3360 -
          (((C51480 + C51481) * C139372 + (C51258 + C51259) * C244) * C139448 *
               C139600 +
           ((C47999 + C47998) * C139372 + (C47761 + C47760) * C244) * C139448 *
               C92451) *
              C3361 +
          (((C49689 + C49688) * C244 + (C49909 + C49908) * C139372) * C139448 *
               C92451 +
           ((C51260 + C51261) * C244 + (C51482 + C51483) * C139372) * C139448 *
               C139600) *
              C3362 -
          (((C47034 * C18202 + C139587 * C18204 + C47033 * C18203 +
             C47029 * C18205) *
                C139372 +
            (C47034 * C17958 + C139587 * C17962 + C47033 * C17959 +
             C47029 * C17963) *
                C244) *
               C139448 * C139600 +
           ((C50745 + C50744) * C139372 + (C50599 + C50598) * C244) * C139448 *
               C92451) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C92451 +
            (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C139600) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C92451 +
            (C32425 + C32426 - C32427 - C32428 + C32429 + C32430) * C139600) *
               C139587) *
              C139372 * C139570 +
          (((C1116 * C827 -
             ((C307 * C839 + C139448 * C1098) * C821 +
              (C307 * C832 + C139448 * C1094) * C826) +
             C1117 * C822 - C1118 * C828 - C1119 * C823) *
                C92451 +
            (C8433 * C827 - (C34921 * C821 + C34920 * C826) + C8434 * C822 -
             C8435 * C828 - C8436 * C823) *
                C139600) *
               C47029 +
           ((C1118 * C827 - (C1117 * C821 + C1116 * C826) + C1119 * C822 -
             C1120 * C828 - C1121 * C823) *
                C92451 +
            (C8435 * C827 - (C8434 * C821 + C8433 * C826) + C8436 * C822 -
             (C307 * C8120 + C139448 * C8422) * C828 -
             (C307 * C8122 + C139448 * C8423) * C823) *
                C139600) *
               C139587) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C92451 +
            (C34904 + C34905) * C139600) *
               C47029 +
           ((C337 * C3364 + C338 * C139303) * C92451 +
            (C34906 + C34907) * C139600) *
               C139587) *
              C139372 * C3360 -
          (((C34913 + C34912) * C139600 +
            (C1117 * C139303 + C1116 * C3364) * C92451) *
               C139587 +
           ((C34925 + C34924) * C139600 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C92451) *
               C47029) *
              C139372 * C3361 +
          ((((C307 * C2570 + C139448 * C2827) * C3364 +
             (C307 * C2577 + C139448 * C2831) * C139303) *
                C92451 +
            (C34926 + C34927) * C139600) *
               C47029 +
           ((C2844 * C3364 + C2845 * C139303) * C92451 +
            (C34918 + C34919) * C139600) *
               C139587) *
              C139372 * C3362 -
          ((((C307 * C17960 + C139448 * C18318) * C139303 +
             (C307 * C17958 + C139448 * C18316) * C3364) *
                C139600 +
            ((C307 * C3369 + C139448 * C3547) * C139303 +
             (C307 * C3366 + C139448 * C3544) * C3364) *
                C92451) *
               C139587 +
           (((C307 * C17961 + C139448 * C18319) * C139303 +
             (C307 * C17959 + C139448 * C18317) * C3364) *
                C139600 +
            ((C307 * C3370 + C139448 * C3548) * C139303 +
             (C307 * C3367 + C139448 * C3545) * C3364) *
                C92451) *
               C47029) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C92451 +
            (C36952 + C36953 - C36954 - C36955) * C139600) *
               C47029 +
           ((C1201 + C1202 - C1203 - C1220) * C92451 + C42590 * C139600) *
               C139587) *
              C821 +
          (((C1203 - (C1202 + C1201) + C1220) * C92451 + C42591 * C139600) *
               C47029 +
           ((C1208 - (C1207 + C1206) + C1222) * C92451 +
            (C10196 - (C10197 + C10198) + C10199) * C139600) *
               C139587) *
              C822 +
          ((C1224 * C92451 + (C10198 + C10197 - C10196 - C10199) * C139600) *
               C47029 +
           ((C1213 + C1212 - C1211 - C1223) * C92451 +
            (C1988 * C923 + C2080 * C139570 -
             (C307 * C8120 + C139448 * C8422) * C924 -
             (C307 * C8222 + C139448 * C8534) * C139360) *
                C139600) *
               C139587) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3427 +
            (C307 * C182 + C139448 * C394) * C3360 -
            (C307 * C832 + C139448 * C1094) * C3428 -
            (C307 * C927 + C139448 * C1195) * C3361 +
            (C307 * C2570 + C139448 * C2827) * C3429 +
            (C307 * C2663 + C139448 * C2921) * C3362 -
            (C307 * C3367 + C139448 * C3545) * C3430 -
            (C307 * C3433 + C139448 * C3599) * C3363) *
               C92451 +
           (C32431 * C3427 + C32539 * C3360 - C34920 * C3428 - C35034 * C3361 +
            C34922 * C3429 + C35035 * C3362 -
            (C307 * C17959 + C139448 * C18317) * C3430 -
            (C307 * C18089 + C139448 * C18418) * C3363) *
               C139600) *
              C47029 +
          ((C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
            C2844 * C3429 + C2940 * C3362 -
            (C307 * C3366 + C139448 * C3544) * C3430 -
            (C307 * C3432 + C139448 * C3600) * C3363) *
               C92451 +
           (C1984 * C3427 + C2078 * C3360 - C8433 * C3428 - C8546 * C3361 +
            C33388 * C3429 + C33495 * C3362 -
            (C307 * C17958 + C139448 * C18316) * C3430 -
            (C307 * C18088 + C139448 * C18419) * C3363) *
               C139600) *
              C139587) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C244 +
              (C307 * C245 + C139448 * C474) * C139372) *
                 C92451 +
             (C32431 * C244 + C32649 * C139372) * C139600) *
                C47029 +
            ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
               C139570 -
           (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
            ((C35140 * C139372 + C34920 * C244) * C139600 +
             ((C307 * C1011 + C139448 * C1301) * C139372 +
              (C307 * C832 + C139448 * C1094) * C244) *
                 C92451) *
                C47029) *
               C139360) *
              C821 +
          ((((C1310 + C1318) * C92451 + (C31608 + C31607) * C139600) * C47029 +
            ((C1307 + C1317) * C92451 + (C31609 + C31610) * C139600) *
                C139587) *
               C139360 -
           (((C30743 + C30744) * C139600 + (C498 + C484) * C92451) * C139587 +
            ((C30742 + C30741) * C139600 + (C497 + C481) * C92451) * C47029) *
               C139570) *
              C822 +
          (((C501 * C92451 + (C30744 + C30743) * C139600) * C47029 +
            ((C489 + C499) * C92451 + (C30745 + C30746) * C139600) * C139587) *
               C139570 -
           ((((C307 * C8322 + C139448 * C8647) * C139372 +
              (C307 * C8120 + C139448 * C8422) * C244) *
                 C139600 +
             (C1319 + C1311) * C92451) *
                C139587 +
            ((C31610 + C31609) * C139600 + C1320 * C92451) * C47029) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C92451 +
            (C32431 * C244 + C32649 * C139372) * C139600) *
               C47029 +
           ((C481 + C497) * C92451 + (C30741 + C30742) * C139600) * C139587) *
              C3360 -
          (((C31607 + C31608) * C139600 + (C1318 + C1310) * C92451) * C139587 +
           ((C35140 * C139372 + C34920 * C244) * C139600 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C92451) *
               C47029) *
              C3361 +
          ((((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C92451 +
            (C34922 * C244 + C35141 * C139372) * C139600) *
               C47029 +
           ((C3022 + C3030) * C92451 + (C33595 + C33599) * C139600) * C139587) *
              C3362 -
          ((((C307 * C18202 + C139448 * C18519) * C139372 +
             (C307 * C17958 + C139448 * C18316) * C244) *
                C139600 +
            ((C307 * C3488 + C139448 * C3653) * C139372 +
             (C307 * C3366 + C139448 * C3544) * C244) *
                C92451) *
               C139587 +
           (((C307 * C18203 + C139448 * C18518) * C139372 +
             (C307 * C17959 + C139448 * C18317) * C244) *
                C139600 +
            ((C307 * C3489 + C139448 * C3654) * C139372 +
             (C307 * C3367 + C139448 * C3545) * C244) *
                C92451) *
               C47029) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C822 +
            (C92885 + C92884) * C828 + (C92887 + C92886) * C823) *
               C139587) *
              C139448 * C139372 * C139570 +
          (((C93758 + C93759) * C827 -
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C821 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C826) +
            (C93760 + C93761) * C822 - (C93762 + C93763) * C828 -
            (C93764 + C93765) * C823) *
               C47029 +
           ((C93763 + C93762) * C827 -
            ((C93761 + C93760) * C821 + (C93759 + C93758) * C826) +
            (C93765 + C93764) * C822 -
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C828 -
            (C92850 * C8122 + C139600 * C8761 + C92849 * C841 +
             C92451 * C1403) *
                C823) *
               C139587) *
              C139448 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C3364 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139303) *
               C47029 +
           ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
               C139587) *
              C139448 * C139372 * C3360 -
          (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) * C139587 +
           ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
             C92451 * C1400) *
                C139303 +
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C3364) *
               C47029) *
              C139448 * C139372 * C3361 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C3364 +
            (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
             C139600 * C4418) *
                C139303) *
               C47029 +
           ((C95683 + C95682) * C3364 + (C95685 + C95684) * C139303) *
               C139587) *
              C139448 * C139372 * C3362 -
          (((C92850 * C17960 + C139600 * C18620 + C92849 * C3369 +
             C92451 * C3709) *
                C139303 +
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C3364) *
               C139587 +
           ((C92850 * C17961 + C139600 * C18621 + C92849 * C3370 +
             C92451 * C3710) *
                C139303 +
            (C92850 * C17959 + C139600 * C18619 + C92849 * C3367 +
             C92451 * C3707) *
                C3364) *
               C47029) *
              C139448 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C923 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139570 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C924 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C139360) *
               C47029 +
           ((C92877 + C92876) * C923 + (C92966 + C92967) * C139570 -
            (C93759 + C93758) * C924 - (C93872 + C93873) * C139360) *
               C139587) *
              C139448 * C821 +
          (((C93758 + C93759) * C924 -
            ((C92967 + C92966) * C139570 + (C92876 + C92877) * C923) +
            (C93873 + C93872) * C139360) *
               C47029 +
           ((C93763 + C93762) * C924 -
            ((C92968 + C92969) * C139570 + (C92881 + C92880) * C923) +
            (C93874 + C93875) * C139360) *
               C139587) *
              C139448 * C822 +
          (((C92880 + C92881) * C923 + (C92969 + C92968) * C139570 -
            (C93762 + C93763) * C924 - (C93875 + C93874) * C139360) *
               C47029 +
           ((C92885 + C92884) * C923 + (C92970 + C92971) * C139570 -
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C924 -
            (C92850 * C8222 + C139600 * C8872 + C92849 * C928 +
             C92451 * C1500) *
                C139360) *
               C139587) *
              C139448 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C3427 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
               C3360 -
           (C92850 * C3891 + C139600 * C4407 + C92849 * C832 + C92451 * C1396) *
               C3428 -
           (C92850 * C3989 + C139600 * C4493 + C92849 * C927 + C92451 * C1497) *
               C3361 +
           (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
            C139600 * C4412) *
               C3429 +
           (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
            C139600 * C4494) *
               C3362 -
           (C92850 * C17959 + C139600 * C18619 + C92849 * C3367 +
            C92451 * C3707) *
               C3430 -
           (C92850 * C18089 + C139600 * C18746 + C92849 * C3433 +
            C92451 * C3761) *
               C3363) *
              C47029 +
          ((C92877 + C92876) * C3427 + (C92966 + C92967) * C3360 -
           (C93759 + C93758) * C3428 - (C93872 + C93873) * C3361 +
           (C95683 + C95682) * C3429 + (C95788 + C95789) * C3362 -
           (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
            C92451 * C3706) *
               C3430 -
           (C92850 * C18088 + C139600 * C18747 + C92849 * C3432 +
            C92451 * C3762) *
               C3363) *
              C139587) *
         C139448 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[103] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C47029 +
            ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139372 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C244) *
                C47029) *
               C139448 * C139360) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C47029 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) *
                C139587) *
               C139448 * C139360 -
           (((C93052 + C93053) * C139372 + (C92881 + C92880) * C244) * C139587 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C47029) *
               C139448 * C139570) *
              C822 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C47029 +
            ((C92885 + C92884) * C244 + (C93054 + C93055) * C139372) *
                C139587) *
               C139448 * C139570 -
           (((C92850 * C8322 + C139600 * C8985 + C92849 * C1012 +
              C92451 * C1603) *
                 C139372 +
             (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
              C92451 * C1398) *
                 C244) *
                C139587 +
            ((C93985 + C93984) * C139372 + (C93762 + C93763) * C244) * C47029) *
               C139448 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C47029 +
           ((C92877 + C92876) * C244 + (C93050 + C93051) * C139372) * C139587) *
              C139448 * C3360 -
          (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139587 +
           ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
             C92451 * C1602) *
                C139372 +
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C244) *
               C47029) *
              C139448 * C3361 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C244 +
            (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
             C139600 * C4576) *
                C139372) *
               C47029 +
           ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139587) *
              C139448 * C3362 -
          (((C92850 * C18202 + C139600 * C18856 + C92849 * C3488 +
             C92451 * C3815) *
                C139372 +
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C244) *
               C139587 +
           ((C92850 * C18203 + C139600 * C18855 + C92849 * C3489 +
             C92451 * C3816) *
                C139372 +
            (C92850 * C17959 + C139600 * C18619 + C92849 * C3367 +
             C92451 * C3707) *
                C244) *
               C47029) *
              C139448 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C826 +
            (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                C821 -
            (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                C827 -
            (C47034 * C118 + C139587 * C127 + C47033 * C117 + C47029 * C126) *
                C822 +
            (C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C828 +
            (C47033 * C118 + C47029 * C127 + C47034 * C120 + C139587 * C128) *
                C823) *
               C139448 * C92451 +
           ((C94108 + C94109) * C826 + (C94110 + C94111) * C821 -
            (C94112 + C94113) * C827 - (C94114 + C94115) * C822 +
            (C94116 + C94117) * C828 + (C94118 + C94119) * C823) *
               C139448 * C139600) *
              C139571 +
          (((C94113 + C94112) * C827 -
            ((C94111 + C94110) * C821 + (C94109 + C94108) * C826) +
            (C94115 + C94114) * C822 - (C94117 + C94116) * C828 -
            (C94119 + C94118) * C823) *
               C139448 * C92451 +
           ((C47033 * C4657 + C47029 * C4661 + C47034 * C4658 +
             C139587 * C4662) *
                C827 -
            ((C47034 * C4664 + C139587 * C4669 + C47033 * C4663 +
              C47029 * C4668) *
                 C821 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C826) +
            (C47033 * C4664 + C47029 * C4669 + C47034 * C4665 +
             C139587 * C4670) *
                C822 -
            (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
             C47029 * C4662) *
                C828 -
            (C47034 * C4667 + C139587 * C4671 + C47033 * C4665 +
             C47029 * C4670) *
                C823) *
               C139448 * C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C3364 +
             (C47033 * C116 + C47029 * C125 + C47034 * C117 + C139587 * C126) *
                 C139303) *
                C139448 * C92451 +
            ((C94108 + C94109) * C3364 + (C94110 + C94111) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C47034 * C4664 + C139587 * C4669 + C47033 * C4663 +
              C47029 * C4668) *
                 C139303 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C3364) *
                C139448 * C139600 +
            ((C94111 + C94110) * C139303 + (C94109 + C94108) * C3364) *
                C139448 * C92451) *
               C139384) *
              C2565 +
          ((((C51259 + C51258) * C3364 + (C51257 + C51256) * C139303) *
                C139448 * C92451 +
            ((C53084 + C53085) * C3364 + (C53086 + C53087) * C139303) *
                C139448 * C139600) *
               C139384 -
           (((C51256 + C51257) * C139303 + (C51258 + C51259) * C3364) *
                C139448 * C139600 +
            ((C47763 + C47762) * C139303 + (C47761 + C47760) * C3364) *
                C139448 * C92451) *
               C139571) *
              C2566 +
          ((((C49689 + C49688) * C3364 + (C49687 + C49686) * C139303) *
                C139448 * C92451 +
            ((C51260 + C51261) * C3364 + (C51262 + C51263) * C139303) *
                C139448 * C139600) *
               C139571 -
           (((C47034 * C19904 + C139587 * C19908 + C47033 * C19905 +
              C47029 * C19909) *
                 C139303 +
             (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
              C47029 * C19907) *
                 C3364) *
                C139448 * C139600 +
            ((C51263 + C51262) * C139303 + (C51261 + C51260) * C3364) *
                C139448 * C92451) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                 C181 +
             (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                 C139346) *
                C139448 * C92451 +
            ((C94108 + C94109) * C181 + (C94230 + C94231) * C139346) * C139448 *
                C139600) *
               C821 -
           (((C94232 + C94233) * C139346 + (C94112 + C94113) * C181) * C139448 *
                C139600 +
            ((C47034 * C184 + C139587 * C190 + C47033 * C183 + C47029 * C189) *
                 C139346 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C181) *
                C139448 * C92451) *
               C822 +
           (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                 C181 +
             (C47033 * C184 + C47029 * C190 + C47034 * C185 + C139587 * C191) *
                 C139346) *
                C139448 * C92451 +
            ((C94116 + C94117) * C181 + (C94234 + C94235) * C139346) * C139448 *
                C139600) *
               C823) *
              C139571 +
          ((((C94113 + C94112) * C181 + (C94233 + C94232) * C139346) * C139448 *
                C92451 +
            ((C47033 * C4657 + C47029 * C4661 + C47034 * C4658 +
              C139587 * C4662) *
                 C181 +
             (C47033 * C4747 + C47029 * C4751 + C47034 * C4748 +
              C139587 * C4752) *
                 C139346) *
                C139448 * C139600) *
               C822 -
           (((C47034 * C4747 + C139587 * C4751 + C47033 * C4746 +
              C47029 * C4750) *
                 C139346 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C181) *
                C139448 * C139600 +
            ((C94231 + C94230) * C139346 + (C94109 + C94108) * C181) * C139448 *
                C92451) *
               C821 -
           (((C47034 * C4749 + C139587 * C4753 + C47033 * C4748 +
              C47029 * C4752) *
                 C139346 +
             (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
              C47029 * C4662) *
                 C181) *
                C139448 * C139600 +
            ((C94235 + C94234) * C139346 + (C94117 + C94116) * C181) * C139448 *
                C92451) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C2660 +
            (C47033 * C182 + C47029 * C188 + C47034 * C183 + C139587 * C189) *
                C2565 -
            (C47761 + C47760) * C2661 - (C47882 + C47883) * C2566 +
            (C49689 + C49688) * C2662 + (C49798 + C49799) * C2567) *
               C139448 * C92451 +
           ((C94108 + C94109) * C2660 + (C94230 + C94231) * C2565 -
            (C51258 + C51259) * C2661 - (C51371 + C51370) * C2566 +
            (C51260 + C51261) * C2662 + (C51373 + C51372) * C2567) *
               C139448 * C139600) *
              C139303 * C139571 +
          (((C51259 + C51258) * C2661 -
            ((C94231 + C94230) * C2565 + (C94109 + C94108) * C2660) +
            (C51370 + C51371) * C2566 - (C51261 + C51260) * C2662 -
            (C51372 + C51373) * C2567) *
               C139448 * C92451 +
           ((C53084 + C53085) * C2661 -
            ((C47034 * C4747 + C139587 * C4751 + C47033 * C4746 +
              C47029 * C4750) *
                 C2565 +
             (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
              C47029 * C4660) *
                 C2660) +
            (C53191 + C53190) * C2566 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C2662 -
            (C47034 * C20020 + C139587 * C20022 + C47033 * C20021 +
             C47029 * C20023) *
                C2567) *
               C139448 * C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C94109 + C94108) * C1876 - (C94346 + C94347) * C139384) *
               C139448 * C92451 +
           ((C94108 + C94109) * C1875 + (C94347 + C94346) * C139571 -
            (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
             C47029 * C4660) *
                C1876 -
            (C47034 * C4832 + C139587 * C4836 + C47033 * C4831 +
             C47029 * C4835) *
                C139384) *
               C139448 * C139600) *
              C139346 * C821 +
          (((C94113 + C94112) * C1876 -
            ((C47034 * C247 + C139587 * C253 + C47033 * C246 + C47029 * C252) *
                 C139571 +
             (C47034 * C109 + C139587 * C115 + C47033 * C108 + C47029 * C114) *
                 C1875) +
            (C94348 + C94349) * C139384) *
               C139448 * C92451 +
           ((C47033 * C4657 + C47029 * C4661 + C47034 * C4658 +
             C139587 * C4662) *
                C1876 -
            ((C94349 + C94348) * C139571 + (C94112 + C94113) * C1875) +
            (C47033 * C4832 + C47029 * C4836 + C47034 * C4833 +
             C139587 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C822 +
          (((C47033 * C109 + C47029 * C115 + C47034 * C110 + C139587 * C119) *
                C1875 +
            (C47033 * C247 + C47029 * C253 + C47034 * C248 + C139587 * C254) *
                C139571 -
            (C94117 + C94116) * C1876 - (C94350 + C94351) * C139384) *
               C139448 * C92451 +
           ((C94116 + C94117) * C1875 + (C94351 + C94350) * C139571 -
            (C47034 * C4659 + C139587 * C4666 + C47033 * C4658 +
             C47029 * C4662) *
                C1876 -
            (C47034 * C4834 + C139587 * C4838 + C47033 * C4833 +
             C47029 * C4837) *
                C139384) *
               C139448 * C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47033 * C107 + C47029 * C113 + C47034 * C108 + C139587 * C114) *
                C1875 +
            (C47033 * C245 + C47029 * C251 + C47034 * C246 + C139587 * C252) *
                C139571 -
            (C94109 + C94108) * C1876 - (C94346 + C94347) * C139384) *
               C139448 * C92451 +
           ((C94108 + C94109) * C1875 + (C94347 + C94346) * C139571 -
            (C47034 * C4657 + C139587 * C4661 + C47033 * C4656 +
             C47029 * C4660) *
                C1876 -
            (C47034 * C4832 + C139587 * C4836 + C47033 * C4831 +
             C47029 * C4835) *
                C139384) *
               C139448 * C139600) *
              C2565 +
          (((C51259 + C51258) * C1876 -
            ((C47999 + C47998) * C139571 + (C47761 + C47760) * C1875) +
            (C51481 + C51480) * C139384) *
               C139448 * C92451 +
           ((C53084 + C53085) * C1876 -
            ((C51480 + C51481) * C139571 + (C51258 + C51259) * C1875) +
            (C53294 + C53295) * C139384) *
               C139448 * C139600) *
              C2566 +
          (((C49689 + C49688) * C1875 + (C49909 + C49908) * C139571 -
            (C51261 + C51260) * C1876 - (C51483 + C51482) * C139384) *
               C139448 * C92451 +
           ((C51260 + C51261) * C1875 + (C51482 + C51483) * C139571 -
            (C47034 * C19902 + C139587 * C19906 + C47033 * C19903 +
             C47029 * C19907) *
                C1876 -
            (C47034 * C20128 + C139587 * C20130 + C47033 * C20129 +
             C47029 * C20131) *
                C139384) *
               C139448 * C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C826 +
             (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C92451 +
            (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C139600) *
               C47029 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C92451 +
            (C32425 + C32426 - C32427 - C32428 + C32429 + C32430) * C139600) *
               C139587) *
              C139571 +
          (((C32421 - (C32434 + C32433) + C32422 - C32423 - C32424) * C92451 +
            (C4930 * C827 - (C35898 * C821 + C35899 * C826) + C4931 * C822 -
             C4932 * C828 - C4933 * C823) *
                C139600) *
               C47029 +
           ((C32427 - (C32426 + C32425) + C32428 - C32429 - C32430) * C92451 +
            (C4932 * C827 - (C4931 * C821 + C4930 * C826) + C4933 * C822 -
             (C307 * C4659 + C139448 * C4916) * C828 -
             (C307 * C4667 + C139448 * C4920) * C823) *
                C139600) *
               C139587) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C3364 +
              (C307 * C116 + C139448 * C314) * C139303) *
                 C92451 +
             (C34904 + C34905) * C139600) *
                C47029 +
            ((C337 * C3364 + C338 * C139303) * C92451 +
             (C34906 + C34907) * C139600) *
                C139587) *
               C139571 -
           (((C36834 + C36835) * C139600 + (C34907 + C34906) * C92451) *
                C139587 +
            ((C36836 + C36837) * C139600 + (C34905 + C34904) * C92451) *
                C47029) *
               C139384) *
              C2565 +
          ((((C34924 + C34925) * C92451 + (C36850 + C36851) * C139600) *
                C47029 +
            ((C34912 + C34913) * C92451 + (C36852 + C36853) * C139600) *
                C139587) *
               C139384 -
           (((C34913 + C34912) * C139600 +
             (C1117 * C139303 + C1116 * C3364) * C92451) *
                C139587 +
            ((C34925 + C34924) * C139600 +
             ((C307 * C839 + C139448 * C1098) * C139303 +
              (C307 * C832 + C139448 * C1094) * C3364) *
                 C92451) *
                C47029) *
               C139571) *
              C2566 +
          (((((C307 * C2570 + C139448 * C2827) * C3364 +
              (C307 * C2577 + C139448 * C2831) * C139303) *
                 C92451 +
             (C34926 + C34927) * C139600) *
                C47029 +
            ((C2844 * C3364 + C2845 * C139303) * C92451 +
             (C34918 + C34919) * C139600) *
                C139587) *
               C139571 -
           ((((C307 * C19904 + C139448 * C20238) * C139303 +
              (C307 * C19902 + C139448 * C20236) * C3364) *
                 C139600 +
             (C34919 + C34918) * C92451) *
                C139587 +
            (((C307 * C19905 + C139448 * C20239) * C139303 +
              (C307 * C19903 + C139448 * C20237) * C3364) *
                 C139600 +
             (C34927 + C34926) * C92451) *
                C47029) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C139448 * C308) * C181 +
              (C307 * C182 + C139448 * C394) * C139346) *
                 C92451 +
             (C32533 + C32540) * C139600) *
                C47029 +
            ((C401 + C417) * C92451 + C32536 * C139600) * C139587) *
               C821 -
           ((C2084 * C139600 + (C418 + C404) * C92451) * C139587 +
            (C32537 * C139600 + (C417 + C401) * C92451) * C47029) *
               C822 +
           ((C421 * C92451 + C32538 * C139600) * C47029 +
            ((C409 + C419) * C92451 + (C2075 + C2083) * C139600) * C139587) *
               C823) *
              C139571 +
          (((C32536 * C92451 + C36002 * C139600) * C47029 +
            (C32538 * C92451 + (C5015 + C5021) * C139600) * C139587) *
               C822 -
           ((C36003 * C139600 + C32537 * C92451) * C139587 +
            ((C36012 + C36006) * C139600 + (C32540 + C32533) * C92451) *
                C47029) *
               C821 -
           ((((C307 * C4749 + C139448 * C5010) * C139346 +
              (C307 * C4659 + C139448 * C4916) * C181) *
                 C139600 +
             (C2083 + C2075) * C92451) *
                C139587 +
            ((C5021 + C5015) * C139600 + C2084 * C92451) * C47029) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C2660 +
             (C307 * C182 + C139448 * C394) * C2565 -
             (C307 * C832 + C139448 * C1094) * C2661 -
             (C307 * C927 + C139448 * C1195) * C2566 +
             (C307 * C2570 + C139448 * C2827) * C2662 +
             (C307 * C2663 + C139448 * C2921) * C2567) *
                C92451 +
            (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C139600) *
               C47029 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C92451 +
            (C33488 + C33489 - C33490 - C33491 + C33492 + C33496) * C139600) *
               C139587) *
              C139303 * C139571 +
          (((C35028 - (C35027 + C35026) + C35036 - C35031 - C35037) * C92451 +
            (C36846 * C2661 - (C36010 * C2565 + C35899 * C2660) +
             C36966 * C2566 - (C307 * C19903 + C139448 * C20237) * C2662 -
             (C307 * C20021 + C139448 * C20338) * C2567) *
                C139600) *
               C47029 +
           ((C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C92451 +
            (C36848 * C2661 - (C5018 * C2565 + C4930 * C2660) + C36967 * C2566 -
             (C307 * C19902 + C139448 * C20236) * C2662 -
             (C307 * C20020 + C139448 * C20339) * C2567) *
                C139600) *
               C139587) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C92451 +
            (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
             C36121 * C139384) *
                C139600) *
               C47029 +
           ((C2165 + C2166 - C2167 - C2184) * C92451 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C139346 * C821 +
          (((C2167 - (C2166 + C2165) + C2184) * C92451 +
            (C32643 - (C32642 + C32641) + C32644) * C139600) *
               C47029 +
           ((C2172 - (C2171 + C2170) + C2186) * C92451 +
            (C32645 - (C32646 + C32647) + C32648) * C139600) *
               C139587) *
              C139346 * C822 +
          ((C2188 * C92451 + (C32647 + C32646 - C32645 - C32648) * C139600) *
               C47029 +
           ((C2177 + C2176 - C2175 - C2187) * C92451 +
            (C1988 * C1875 + C2183 * C139571 -
             (C307 * C4659 + C139448 * C4916) * C1876 -
             (C307 * C4834 + C139448 * C5098) * C139384) *
                C139600) *
               C139587) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C1875 +
             (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
             C32649 * C139384) *
                C92451 +
            (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
             C36121 * C139384) *
                C139600) *
               C47029 +
           ((C2165 + C2166 - C2167 - C2184) * C92451 +
            (C32641 + C32642 - C32643 - C32644) * C139600) *
               C139587) *
              C2565 +
          (((C34920 * C1876 -
             ((C307 * C1011 + C139448 * C1301) * C139571 +
              (C307 * C832 + C139448 * C1094) * C1875) +
             C35140 * C139384) *
                C92451 +
            (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
             C37072 * C139384) *
                C139600) *
               C47029 +
           ((C8649 - (C8650 + C8651) + C8661) * C92451 +
            (C40616 - (C40617 + C40618) + C40619) * C139600) *
               C139587) *
              C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C1875 +
             (C307 * C2745 + C139448 * C3017) * C139571 - C34922 * C1876 -
             C35141 * C139384) *
                C92451 +
            (C34922 * C1875 + C35141 * C139571 -
             (C307 * C19903 + C139448 * C20237) * C1876 -
             (C307 * C20129 + C139448 * C20438) * C139384) *
                C139600) *
               C47029 +
           ((C2844 * C1875 + C3028 * C139571 - C33388 * C1876 -
             C33598 * C139384) *
                C92451 +
            (C33388 * C1875 + C33598 * C139571 -
             (C307 * C19902 + C139448 * C20236) * C1876 -
             (C307 * C20128 + C139448 * C20439) * C139384) *
                C139600) *
               C139587) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C47029 +
           ((C92877 + C92876) * C826 + (C92879 + C92878) * C821 -
            (C92881 + C92880) * C827 - (C92883 + C92882) * C822 +
            (C92885 + C92884) * C828 + (C92887 + C92886) * C823) *
               C139587) *
              C139448 * C139571 +
          (((C94760 + C94761) * C827 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C821 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C826) +
            (C94762 + C94763) * C822 - (C94764 + C94765) * C828 -
            (C94766 + C94767) * C823) *
               C47029 +
           ((C94765 + C94764) * C827 -
            ((C94763 + C94762) * C821 + (C94761 + C94760) * C826) +
            (C94767 + C94766) * C822 -
            (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
             C92451 * C2266) *
                C828 -
            (C92850 * C4667 + C139600 * C5198 + C92849 * C1709 +
             C92451 * C2271) *
                C823) *
               C139587) *
              C139448 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C47029 +
            ((C92877 + C92876) * C3364 + (C92879 + C92878) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C94763 + C94762) * C139303 + (C94761 + C94760) * C3364) *
                C139587 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C47029) *
               C139448 * C139384) *
              C2565 +
          ((((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
              C139600 * C5951) *
                 C3364 +
             (C92849 * C3900 + C92451 * C4413 + C92850 * C5474 +
              C139600 * C5954) *
                 C139303) *
                C47029 +
            ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
              C139600 * C5950) *
                 C3364 +
             (C92849 * C3901 + C92451 * C4414 + C92850 * C5473 +
              C139600 * C5953) *
                 C139303) *
                C139587) *
               C139448 * C139384 -
           (((C93761 + C93760) * C139303 + (C93759 + C93758) * C3364) *
                C139587 +
            ((C92850 * C3900 + C139600 * C4413 + C92849 * C839 +
              C92451 * C1400) *
                 C139303 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C3364) *
                C47029) *
               C139448 * C139571) *
              C2566 +
          ((((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
              C139600 * C4412) *
                 C3364 +
             (C92849 * C2577 + C92451 * C3109 + C92850 * C3905 +
              C139600 * C4418) *
                 C139303) *
                C47029 +
            ((C95683 + C95682) * C3364 + (C95685 + C95684) * C139303) *
                C139587) *
               C139448 * C139571 -
           (((C92850 * C19904 + C139600 * C20540 + C92849 * C3904 +
              C92451 * C4417) *
                 C139303 +
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C3364) *
                C139587 +
            ((C92850 * C19905 + C139600 * C20541 + C92849 * C3905 +
              C92451 * C4418) *
                 C139303 +
             (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
              C92451 * C4412) *
                 C3364) *
                C47029) *
               C139448 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C47029 +
            ((C92877 + C92876) * C181 + (C92966 + C92967) * C139346) *
                C139587) *
               C139448 * C821 -
           (((C92968 + C92969) * C139346 + (C92881 + C92880) * C181) * C139587 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C47029) *
               C139448 * C822 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C47029 +
            ((C92885 + C92884) * C181 + (C92970 + C92971) * C139346) *
                C139587) *
               C139448 * C823) *
              C139571 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C47029 +
            ((C94765 + C94764) * C181 + (C94876 + C94877) * C139346) *
                C139587) *
               C139448 * C822 -
           (((C94875 + C94874) * C139346 + (C94761 + C94760) * C181) * C139587 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C47029) *
               C139448 * C821 -
           (((C92850 * C4749 + C139600 * C5288 + C92849 * C1793 +
              C92451 * C2367) *
                 C139346 +
             (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
              C92451 * C2266) *
                 C181) *
                C139587 +
            ((C94877 + C94876) * C139346 + (C94764 + C94765) * C181) * C47029) *
               C139448 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
             C92451 * C1396) *
                C2661 -
            (C92850 * C3989 + C139600 * C4493 + C92849 * C927 +
             C92451 * C1497) *
                C2566 +
            (C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C2662 +
            (C92849 * C2663 + C92451 * C3199 + C92850 * C3994 +
             C139600 * C4494) *
                C2567) *
               C47029 +
           ((C92877 + C92876) * C2660 + (C92966 + C92967) * C2565 -
            (C93759 + C93758) * C2661 - (C93872 + C93873) * C2566 +
            (C95683 + C95682) * C2662 + (C95788 + C95789) * C2567) *
               C139587) *
              C139448 * C139303 * C139571 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C2661 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C2565 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C2660) +
            (C92849 * C3989 + C92451 * C4493 + C92850 * C5557 +
             C139600 * C6029) *
                C2566 -
            (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
             C92451 * C4412) *
                C2662 -
            (C92850 * C20021 + C139600 * C20650 + C92849 * C3994 +
             C92451 * C4494) *
                C2567) *
               C47029 +
           ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
             C139600 * C5950) *
                C2661 -
            ((C94875 + C94874) * C2565 + (C94761 + C94760) * C2660) +
            (C92849 * C3990 + C92451 * C4495 + C92850 * C5556 +
             C139600 * C6030) *
                C2566 -
            (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
             C92451 * C4411) *
                C2662 -
            (C92850 * C20020 + C139600 * C20651 + C92849 * C3993 +
             C92451 * C4496) *
                C2567) *
               C139587) *
              C139448 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C47029 +
           ((C92877 + C92876) * C1875 + (C93050 + C93051) * C139571 -
            (C94761 + C94760) * C1876 - (C94984 + C94985) * C139384) *
               C139587) *
              C139448 * C139346 * C821 +
          (((C94760 + C94761) * C1876 -
            ((C93051 + C93050) * C139571 + (C92876 + C92877) * C1875) +
            (C94985 + C94984) * C139384) *
               C47029 +
           ((C94765 + C94764) * C1876 -
            ((C93052 + C93053) * C139571 + (C92881 + C92880) * C1875) +
            (C94986 + C94987) * C139384) *
               C139587) *
              C139448 * C139346 * C822 +
          (((C92880 + C92881) * C1875 + (C93053 + C93052) * C139571 -
            (C94764 + C94765) * C1876 - (C94987 + C94986) * C139384) *
               C47029 +
           ((C92885 + C92884) * C1875 + (C93054 + C93055) * C139571 -
            (C92850 * C4659 + C139600 * C5194 + C92849 * C1699 +
             C92451 * C2266) *
                C1876 -
            (C92850 * C4834 + C139600 * C5376 + C92849 * C1880 +
             C92451 * C2463) *
                C139384) *
               C139587) *
              C139448 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C47029 +
           ((C92877 + C92876) * C1875 + (C93050 + C93051) * C139571 -
            (C94761 + C94760) * C1876 - (C94984 + C94985) * C139384) *
               C139587) *
              C139448 * C2565 +
          (((C92849 * C3891 + C92451 * C4407 + C92850 * C5471 +
             C139600 * C5951) *
                C1876 -
            ((C92850 * C4075 + C139600 * C4573 + C92849 * C1011 +
              C92451 * C1602) *
                 C139571 +
             (C92850 * C3891 + C139600 * C4407 + C92849 * C832 +
              C92451 * C1396) *
                 C1875) +
            (C92849 * C4075 + C92451 * C4573 + C92850 * C5637 +
             C139600 * C6106) *
                C139384) *
               C47029 +
           ((C92849 * C3892 + C92451 * C4408 + C92850 * C5470 +
             C139600 * C5950) *
                C1876 -
            ((C93982 + C93983) * C139571 + (C93759 + C93758) * C1875) +
            (C92849 * C4076 + C92451 * C4574 + C92850 * C5636 +
             C139600 * C6107) *
                C139384) *
               C139587) *
              C139448 * C2566 +
          (((C92849 * C2570 + C92451 * C3105 + C92850 * C3896 +
             C139600 * C4412) *
                C1875 +
            (C92849 * C2745 + C92451 * C3295 + C92850 * C4080 +
             C139600 * C4576) *
                C139571 -
            (C92850 * C19903 + C139600 * C20539 + C92849 * C3896 +
             C92451 * C4412) *
                C1876 -
            (C92850 * C20129 + C139600 * C20753 + C92849 * C4080 +
             C92451 * C4576) *
                C139384) *
               C47029 +
           ((C95683 + C95682) * C1875 + (C95892 + C95893) * C139571 -
            (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
             C92451 * C4411) *
                C1876 -
            (C92850 * C20128 + C139600 * C20754 + C92849 * C4079 +
             C92451 * C4577) *
                C139384) *
               C139587) *
              C139448 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C6694 +
             (C63381 * C116 + C139289 * C125) * C139601 -
             (C63381 * C108 + C139289 * C114) * C6695 -
             (C63381 * C117 + C139289 * C126) * C139590 +
             (C63381 * C109 + C139289 * C115) * C6696 +
             (C63381 * C118 + C139289 * C127) * C6691) *
                C13593 +
            (C69167 + C69168 - C69169 - C69170 + C69171 + C69172) * C139598) *
               C92451 +
           ((C86554 + C86555 - C86556 - C86557 + C86558 + C86559) * C13593 +
            (C83580 + C83581 - C83582 - C83583 + C83584 + C83585) * C139598) *
               C139600) *
              C139372 * C6692 +
          (((C69169 - (C69168 + C69167) + C69170 - C69171 - C69172) * C13593 +
            (C69175 - (C69174 + C69173) + C69176 - C69177 - C69178) * C139598) *
               C92451 +
           ((C83582 - (C83581 + C83580) + C83583 - C83584 - C83585) * C13593 +
            (C70578 * C6695 - (C66545 * C139601 + C66546 * C6694) +
             C70579 * C139590 - (C63381 * C3894 + C139289 * C3906) * C6696 -
             (C63381 * C3903 + C139289 * C3912) * C6691) *
                C139598) *
               C139600) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139289 * C113) * C6771 +
                        (C63381 * C182 + C139289 * C188) * C6692 -
                        C63884 * C6772 - C63994 * C139360) *
                           C13593 +
                       (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                        C63995 * C139360) *
                           C139598) *
                          C92451 +
                      ((C85526 + C85527 - C85528 - C85529) * C13593 +
                       (C85530 + C85531 - C85532 - C85533) * C139598) *
                          C139600) *
                         C139601 +
                     (((C63886 * C6772 -
                        ((C63381 * C183 + C139289 * C189) * C6692 +
                         (C63381 * C108 + C139289 * C114) * C6771) +
                        C63996 * C139360) *
                           C13593 +
                       (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                        C63997 * C139360) *
                           C139598) *
                          C92451 +
                      ((C85534 - (C85535 + C85536) + C85537) * C13593 +
                       (C85538 - (C85539 + C85540) + C85541) * C139598) *
                          C139600) *
                         C139590 +
                     ((((C63381 * C109 + C139289 * C115) * C6771 +
                        (C63381 * C184 + C139289 * C190) * C6692 -
                        C63888 * C6772 - C63998 * C139360) *
                           C13593 +
                       (C63888 * C6771 + C63998 * C6692 - C63894 * C6772 -
                        C63999 * C139360) *
                           C139598) *
                          C92451 +
                      ((C77519 * C6771 + C77642 * C6692 - C76581 * C6772 -
                        C76685 * C139360) *
                           C13593 +
                       (C76581 * C6771 + C76685 * C6692 -
                        (C63381 * C3894 + C139289 * C3906) * C6772 -
                        (C63381 * C3992 + C139289 * C3998) * C139360) *
                           C139598) *
                          C139600) *
                         C6691) *
                    C139372) /
                   (p * q * std::sqrt(p + q));
    d2eexz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C13593 +
             (C64074 + C64098) * C139598) *
                C92451 +
            ((C77515 * C244 + C77750 * C139372) * C13593 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C6692 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
                C92451) *
               C139360) *
              C139601 +
          ((((C64080 + C64100) * C13593 + (C64083 + C64101) * C139598) *
                C92451 +
            ((C76786 + C76787) * C13593 + (C78661 + C78662) * C139598) *
                C139600) *
               C139360 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C13593) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C13593) *
                C92451) *
               C6692) *
              C139590 +
          (((((C63381 * C109 + C139289 * C115) * C244 +
              (C63381 * C247 + C139289 * C253) * C139372) *
                 C13593 +
             (C64086 + C64102) * C139598) *
                C92451 +
            ((C77519 * C244 + C77752 * C139372) * C13593 +
             (C76788 + C76792) * C139598) *
                C139600) *
               C6692 -
           ((((C63381 * C4078 + C139289 * C4084) * C139372 +
              (C63381 * C3894 + C139289 * C3906) * C244) *
                 C139598 +
             (C76792 + C76788) * C13593) *
                C139600 +
            ((C64103 + C64089) * C139598 + (C64102 + C64086) * C13593) *
                C92451) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6694 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139601 -
            (C13822 + C13823) * C6695 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C6696 + (C13828 + C13829) * C6691) *
               C92451 +
           ((C110550 + C110551) * C6694 + (C110552 + C110553) * C139601 -
            (C15654 + C15653) * C6695 - (C15656 + C15655) * C139590 +
            (C15658 + C15657) * C6696 + (C15660 + C15659) * C6691) *
               C139600) *
              C139289 * C139372 * C6692 +
          (((C14686 + C14687) * C6695 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139601 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C6694) +
            (C14688 + C14689) * C139590 - (C14690 + C14691) * C6696 -
            (C14692 + C14693) * C6691) *
               C92451 +
           ((C23750 + C23749) * C6695 -
            ((C112991 + C112990) * C139601 + (C112989 + C112988) * C6694) +
            (C23752 + C23751) * C139590 -
            (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
             C13593 * C4163) *
                C6696 -
            (C13796 * C3903 + C139598 * C4170 + C13795 * C3902 +
             C13593 * C4169) *
                C6691) *
               C139600) *
              C139289 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6771 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C6692 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C6772 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C92451 +
           ((C110550 + C110551) * C6771 + (C110656 + C110657) * C6692 -
            (C112989 + C112988) * C6772 - (C113102 + C113103) * C139360) *
               C139600) *
              C139289 * C139601 +
          (((C14686 + C14687) * C6772 -
            ((C13913 + C13912) * C6692 + (C13822 + C13823) * C6771) +
            (C14801 + C14800) * C139360) *
               C92451 +
           ((C23750 + C23749) * C6772 -
            ((C15768 + C15767) * C6692 + (C15654 + C15653) * C6771) +
            (C23887 + C23888) * C139360) *
               C139600) *
              C139289 * C139590 +
          (((C13826 + C13827) * C6771 + (C13915 + C13914) * C6692 -
            (C14690 + C14691) * C6772 - (C14803 + C14802) * C139360) *
               C92451 +
           ((C15658 + C15657) * C6771 + (C15769 + C15770) * C6692 -
            (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
             C13593 * C4163) *
                C6772 -
            (C13796 * C3992 + C139598 * C4252 + C13795 * C3991 +
             C13593 * C4251) *
                C139360) *
               C139600) *
              C139289 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C92451 +
            ((C110550 + C110551) * C244 + (C110761 + C110760) * C139372) *
                C139600) *
               C139289 * C6692 -
           (((C113213 + C113212) * C139372 + (C112989 + C112988) * C244) *
                C139600 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C92451) *
               C139289 * C139360) *
              C139601 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C92451 +
            ((C23750 + C23749) * C244 + (C24023 + C24024) * C139372) *
                C139600) *
               C139289 * C139360 -
           (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
               C139289 * C6692) *
              C139590 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C92451 +
            ((C15658 + C15657) * C244 + (C15879 + C15880) * C139372) *
                C139600) *
               C139289 * C6692 -
           (((C13796 * C4078 + C139598 * C4332 + C13795 * C4077 +
              C13593 * C4329) *
                 C139372 +
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C244) *
                C139600 +
            ((C14913 + C14912) * C139372 + (C14690 + C14691) * C244) * C92451) *
               C139289 * C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6694 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139601 -
            (C92876 + C92877) * C6695 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C6696 + (C92882 + C92883) * C6691) *
               C139289 * C13593 +
           ((C109938 + C109939) * C6694 + (C109940 + C109941) * C139601 -
            (C93759 + C93758) * C6695 - (C93761 + C93760) * C139590 +
            (C93763 + C93762) * C6696 + (C93765 + C93764) * C6691) *
               C139289 * C139598) *
              C139372 * C6692 +
          (((C93758 + C93759) * C6695 -
            ((C109941 + C109940) * C139601 + (C109939 + C109938) * C6694) +
            (C93760 + C93761) * C139590 - (C93762 + C93763) * C6696 -
            (C93764 + C93765) * C6691) *
               C139289 * C13593 +
           ((C95683 + C95682) * C6695 -
            ((C111750 + C111751) * C139601 + (C111752 + C111753) * C6694) +
            (C95685 + C95684) * C139590 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C6696 -
            (C92850 * C3903 + C139600 * C4416 + C92849 * C2579 +
             C92451 * C3111) *
                C6691) *
               C139289 * C139598) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6771 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C6692 -
            (C109939 + C109938) * C6772 - (C110044 + C110045) * C139360) *
               C139289 * C13593 +
           ((C109938 + C109939) * C6771 + (C110045 + C110044) * C6692 -
            (C111752 + C111753) * C6772 - (C111857 + C111856) * C139360) *
               C139289 * C139598) *
              C139601 +
          (((C93758 + C93759) * C6772 -
            ((C92967 + C92966) * C6692 + (C92876 + C92877) * C6771) +
            (C93873 + C93872) * C139360) *
               C139289 * C13593 +
           ((C95683 + C95682) * C6772 -
            ((C93872 + C93873) * C6692 + (C93759 + C93758) * C6771) +
            (C95788 + C95789) * C139360) *
               C139289 * C139598) *
              C139590 +
          (((C92880 + C92881) * C6771 + (C92969 + C92968) * C6692 -
            (C93762 + C93763) * C6772 - (C93875 + C93874) * C139360) *
               C139289 * C13593 +
           ((C93763 + C93762) * C6771 + (C93874 + C93875) * C6692 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C6772 -
            (C92850 * C3992 + C139600 * C4498 + C92849 * C2665 +
             C92451 * C3201) *
                C139360) *
               C139289 * C139598) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C13593 +
            ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
                C139289 * C139598) *
               C6692 -
           (((C111960 + C111961) * C139372 + (C111752 + C111753) * C244) *
                C139289 * C139598 +
            ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
                C139289 * C13593) *
               C139360) *
              C139601 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C139289 *
                C13593 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139289 *
                C139598) *
               C139360 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
                C139598 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
                C13593) *
               C6692) *
              C139590 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C139289 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) * C139289 *
                C139598) *
               C6692 -
           (((C92850 * C4078 + C139600 * C4578 + C92849 * C2747 +
              C92451 * C3297) *
                 C139372 +
             (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
              C92451 * C3107) *
                 C244) *
                C139289 * C139598 +
            ((C93985 + C93984) * C139372 + (C93762 + C93763) * C244) * C139289 *
                C13593) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C13593 +
            (C69851 + C69852 - C69853 - C69854) * C139598) *
               C92451 +
           ((C85382 + C85383 - C85384 - C85385) * C13593 + C85394 * C139598) *
               C139600) *
              C139372 * C139602 +
          (((C69853 - (C69852 + C69851) + C69854) * C13593 +
            (C69857 - (C69856 + C69855) + C69858) * C139598) *
               C92451 +
           (C85395 * C13593 + (C70582 - (C70572 + C70573) + C70583) * C139598) *
               C139600) *
              C139372 * C139593 +
          ((C69865 * C13593 + (C69861 + C69860 - C69859 - C69862) * C139598) *
               C92451 +
           ((C70573 + C70572 - C70582 - C70583) * C13593 +
            (C66549 * C7401 + C66550 * C7396 -
             (C63381 * C17958 + C139289 * C17962) * C7402 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C139598) *
               C139600) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7477 +
             (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
             C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
                C13593 +
            (C63884 * C7477 + C63994 * C139602 - C63890 * C7478 -
             C63995 * C139593 + C65313 * C7479 + C65399 * C7400) *
                C139598) *
               C92451 +
           ((C90788 + C90789 - C90790 - C90791 + C90792 + C90793) * C13593 +
            (C90794 + C90795 - C90796 - C90797 + C90798 + C90799) * C139598) *
               C139600) *
              C7396 +
          (((C63886 * C7478 -
             ((C63381 * C183 + C139289 * C189) * C139602 +
              (C63381 * C108 + C139289 * C114) * C7477) +
             C63996 * C139593 - C63892 * C7479 - C63997 * C7400) *
                C13593 +
            (C63892 * C7478 - (C63996 * C139602 + C63886 * C7477) +
             C63997 * C139593 - C65311 * C7479 - C65400 * C7400) *
                C139598) *
               C92451 +
           ((C70576 * C7478 - (C77641 * C139602 + C77517 * C7477) +
             C70686 * C139593 - C70578 * C7479 - C70687 * C7400) *
                C13593 +
            (C70578 * C7478 - (C70686 * C139602 + C70576 * C7477) +
             C70687 * C139593 - (C63381 * C17958 + C139289 * C17962) * C7479 -
             (C63381 * C18088 + C139289 * C18090) * C7400) *
                C139598) *
               C139600) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C13593 +
             (C64074 + C64098) * C139598) *
                C92451 +
            ((C77515 * C244 + C77750 * C139372) * C13593 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C139602 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
                C92451) *
               C139593 +
           ((C65475 * C13593 + (C65478 + C65485) * C139598) * C92451 +
            ((C78660 + C78659) * C13593 + (C79473 + C79474) * C139598) *
                C139600) *
               C7400) *
              C7396 +
          ((((C64080 + C64100) * C13593 + (C64083 + C64101) * C139598) *
                C92451 +
            ((C76786 + C76787) * C13593 + (C78661 + C78662) * C139598) *
                C139600) *
               C139593 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C13593) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C13593) *
                C92451) *
               C139602 -
           ((((C63381 * C18202 + C139289 * C18204) * C139372 +
              (C63381 * C17958 + C139289 * C17962) * C244) *
                 C139598 +
             (C78662 + C78661) * C13593) *
                C139600 +
            ((C65486 + C65479) * C139598 + C65482 * C13593) * C92451) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7401 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C7396 -
            (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
               C92451 +
           ((C110550 + C110551) * C7401 + (C110552 + C110553) * C7396 -
            (C15654 + C15653) * C7402 - (C15656 + C15655) * C139308) *
               C139600) *
              C139289 * C139372 * C139602 +
          (((C14686 + C14687) * C7402 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C7396 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C7401) +
            (C14688 + C14689) * C139308) *
               C92451 +
           ((C23750 + C23749) * C7402 -
            ((C112991 + C112990) * C7396 + (C112989 + C112988) * C7401) +
            (C23752 + C23751) * C139308) *
               C139600) *
              C139289 * C139372 * C139593 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C7401 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C7396 -
            (C16627 + C16628) * C7402 - (C16629 + C16630) * C139308) *
               C92451 +
           ((C112992 + C112993) * C7401 + (C112994 + C112995) * C7396 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C7402 -
            (C13796 * C17960 + C139598 * C18318 + C13795 * C3904 +
             C13593 * C4171) *
                C139308) *
               C139600) *
              C139289 * C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7477 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139602 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C7478 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139593 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C7400) *
               C92451 +
           ((C110550 + C110551) * C7477 + (C110656 + C110657) * C139602 -
            (C112989 + C112988) * C7478 - (C113102 + C113103) * C139593 +
            (C112992 + C112993) * C7479 + (C113104 + C113105) * C7400) *
               C139600) *
              C139289 * C7396 +
          (((C14686 + C14687) * C7478 -
            ((C13913 + C13912) * C139602 + (C13822 + C13823) * C7477) +
            (C14801 + C14800) * C139593 - (C16627 + C16628) * C7479 -
            (C16734 + C16733) * C7400) *
               C92451 +
           ((C23750 + C23749) * C7478 -
            ((C15768 + C15767) * C139602 + (C15654 + C15653) * C7477) +
            (C23887 + C23888) * C139593 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C7479 -
            (C13796 * C18088 + C139598 * C18419 + C13795 * C3993 +
             C13593 * C4250) *
                C7400) *
               C139600) *
              C139289 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C92451 +
            ((C110550 + C110551) * C244 + (C110761 + C110760) * C139372) *
                C139600) *
               C139289 * C139602 -
           (((C113213 + C113212) * C139372 + (C112989 + C112988) * C244) *
                C139600 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C92451) *
               C139289 * C139593 +
           (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C92451 +
            ((C112992 + C112993) * C244 + (C113215 + C113214) * C139372) *
                C139600) *
               C139289 * C7400) *
              C7396 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C92451 +
            ((C23750 + C23749) * C244 + (C24023 + C24024) * C139372) *
                C139600) *
               C139289 * C139593 -
           (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
               C139289 * C139602 -
           (((C13796 * C18202 + C139598 * C18519 + C13795 * C4079 +
              C13593 * C4331) *
                 C139372 +
             (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
              C13593 * C4165) *
                 C244) *
                C139600 +
            ((C16838 + C16837) * C139372 + (C16627 + C16628) * C244) * C92451) *
               C139289 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7401 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C7396 -
            (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
               C139289 * C13593 +
           ((C109938 + C109939) * C7401 + (C109940 + C109941) * C7396 -
            (C93759 + C93758) * C7402 - (C93761 + C93760) * C139308) *
               C139289 * C139598) *
              C139372 * C139602 +
          (((C93758 + C93759) * C7402 -
            ((C109941 + C109940) * C7396 + (C109939 + C109938) * C7401) +
            (C93760 + C93761) * C139308) *
               C139289 * C13593 +
           ((C95683 + C95682) * C7402 -
            ((C111750 + C111751) * C7396 + (C111752 + C111753) * C7401) +
            (C95685 + C95684) * C139308) *
               C139289 * C139598) *
              C139372 * C139593 +
          (((C111753 + C111752) * C7401 + (C111751 + C111750) * C7396 -
            (C95682 + C95683) * C7402 - (C95684 + C95685) * C139308) *
               C139289 * C13593 +
           ((C112432 + C112433) * C7401 + (C112434 + C112435) * C7396 -
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C7402 -
            (C92850 * C17960 + C139600 * C18620 + C92849 * C3369 +
             C92451 * C3709) *
                C139308) *
               C139289 * C139598) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7477 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139602 -
            (C109939 + C109938) * C7478 - (C110044 + C110045) * C139593 +
            (C111753 + C111752) * C7479 + (C111856 + C111857) * C7400) *
               C139289 * C13593 +
           ((C109938 + C109939) * C7477 + (C110045 + C110044) * C139602 -
            (C111752 + C111753) * C7478 - (C111857 + C111856) * C139593 +
            (C112432 + C112433) * C7479 + (C112507 + C112506) * C7400) *
               C139289 * C139598) *
              C7396 +
          (((C93758 + C93759) * C7478 -
            ((C92967 + C92966) * C139602 + (C92876 + C92877) * C7477) +
            (C93873 + C93872) * C139593 - (C95682 + C95683) * C7479 -
            (C95789 + C95788) * C7400) *
               C139289 * C13593 +
           ((C95683 + C95682) * C7478 -
            ((C93872 + C93873) * C139602 + (C93759 + C93758) * C7477) +
            (C95788 + C95789) * C139593 -
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C7479 -
            (C92850 * C18088 + C139600 * C18747 + C92849 * C3432 +
             C92451 * C3762) *
                C7400) *
               C139289 * C139598) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eezz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C13593 +
            ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
                C139289 * C139598) *
               C139602 -
           (((C111960 + C111961) * C139372 + (C111752 + C111753) * C244) *
                C139289 * C139598 +
            ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
                C139289 * C13593) *
               C139593 +
           (((C111753 + C111752) * C244 + (C111961 + C111960) * C139372) *
                C139289 * C13593 +
            ((C112432 + C112433) * C244 + (C112578 + C112579) * C139372) *
                C139289 * C139598) *
               C7400) *
              C7396 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C139289 *
                C13593 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139289 *
                C139598) *
               C139593 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
                C139598 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
                C13593) *
               C139602 -
           (((C92850 * C18202 + C139600 * C18856 + C92849 * C3488 +
              C92451 * C3815) *
                 C139372 +
             (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
              C92451 * C3706) *
                 C244) *
                C139289 * C139598 +
            ((C95893 + C95892) * C139372 + (C95682 + C95683) * C244) * C139289 *
                C13593) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C7401 +
              (C63381 * C116 + C139289 * C125) * C7396 -
              (C63381 * C108 + C139289 * C114) * C7402 -
              (C63381 * C117 + C139289 * C126) * C139308) *
                 C13593 +
             (C69851 + C69852 - C69853 - C69854) * C139598) *
                C92451 +
            ((C85382 + C85383 - C85384 - C85385) * C13593 + C85394 * C139598) *
                C139600) *
               C139571 +
           (((C85384 - (C85383 + C85382) + C85385) * C13593 +
             C85395 * C139598) *
                C92451 +
            ((C88628 - (C88629 + C88630) + C88631) * C13593 +
             (C85388 - (C85389 + C85390) + C85391) * C139598) *
                C139600) *
               C139384) *
              C6692 +
          ((((C69853 - (C69852 + C69851) + C69854) * C13593 +
             (C69857 - (C69856 + C69855) + C69858) * C139598) *
                C92451 +
            (C85395 * C13593 +
             (C70582 - (C70572 + C70573) + C70583) * C139598) *
                C139600) *
               C139571 +
           ((C85394 * C13593 + (C70573 + C70572 - C70582 - C70583) * C139598) *
                C92451 +
            ((C85390 + C85389 - C85388 - C85391) * C13593 +
             (C67973 * C7401 + C67974 * C7396 -
              (C63381 * C19902 + C139289 * C19906) * C7402 -
              (C63381 * C19904 + C139289 * C19908) * C139308) *
                 C139598) *
                C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139289 * C113) * C6771 +
                         (C63381 * C182 + C139289 * C188) * C6692 -
                         C63884 * C6772 - C63994 * C139360) *
                            C13593 +
                        (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                         C63995 * C139360) *
                            C139598) *
                           C92451 +
                       ((C85526 + C85527 - C85528 - C85529) * C13593 +
                        (C85530 + C85531 - C85532 - C85533) * C139598) *
                           C139600) *
                          C7396 +
                      (((C63886 * C6772 -
                         ((C63381 * C183 + C139289 * C189) * C6692 +
                          (C63381 * C108 + C139289 * C114) * C6771) +
                         C63996 * C139360) *
                            C13593 +
                        (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                         C63997 * C139360) *
                            C139598) *
                           C92451 +
                       ((C85534 - (C85535 + C85536) + C85537) * C13593 +
                        (C85538 - (C85539 + C85540) + C85541) * C139598) *
                           C139600) *
                          C139308) *
                         C139571 +
                     ((((C85528 - (C85527 + C85526) + C85529) * C13593 +
                        (C85532 - (C85531 + C85530) + C85533) * C139598) *
                           C92451 +
                       ((C91686 - (C91687 + C91688) + C91689) * C13593 +
                        (C91690 - (C91691 + C91692) + C91693) * C139598) *
                           C139600) *
                          C7396 +
                      (((C85536 + C85535 - C85534 - C85537) * C13593 +
                        (C85540 + C85539 - C85538 - C85541) * C139598) *
                           C92451 +
                       ((C81014 * C6771 + C81135 * C6692 - C81018 * C6772 -
                         C81136 * C139360) *
                            C13593 +
                        (C81018 * C6771 + C81136 * C6692 -
                         (C63381 * C19902 + C139289 * C19906) * C6772 -
                         (C63381 * C20020 + C139289 * C20022) * C139360) *
                            C139598) *
                           C139600) *
                          C139308) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[107] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139289 * C113) * C1875 +
                         (C63381 * C245 + C139289 * C251) * C139571 -
                         C77515 * C1876 - C77750 * C139384) *
                            C13593 +
                        (C66719 + C66720 - C66721 - C66738) * C139598) *
                           C92451 +
                       ((C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
                         C81245 * C139384) *
                            C13593 +
                        (C80206 + C80207 - C80208 - C80209) * C139598) *
                           C139600) *
                          C6692 +
                      (((C66721 - (C66720 + C66719) + C66738) * C13593 +
                        (C66726 - (C66725 + C66724) + C66740) * C139598) *
                           C92451 +
                       ((C80208 - (C80207 + C80206) + C80209) * C13593 +
                        (C80210 - (C80211 + C80212) + C80213) * C139598) *
                           C139600) *
                          C139360) *
                         C7396 +
                     ((((C77517 * C1876 -
                         ((C63381 * C246 + C139289 * C252) * C139571 +
                          (C63381 * C108 + C139289 * C114) * C1875) +
                         C77751 * C139384) *
                            C13593 +
                        (C70786 - (C70787 + C70788) + C70798) * C139598) *
                           C92451 +
                       ((C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
                         C81246 * C139384) *
                            C13593 +
                        (C85672 - (C85673 + C85674) + C85675) * C139598) *
                           C139600) *
                          C6692 +
                      (((C70788 + C70787 - C70786 - C70798) * C13593 +
                        (C70793 + C70792 - C70791 - C70799) * C139598) *
                           C92451 +
                       ((C85674 + C85673 - C85672 - C85675) * C13593 +
                        (C70578 * C1875 + C70797 * C139571 -
                         (C63381 * C19902 + C139289 * C19906) * C1876 -
                         (C63381 * C20128 + C139289 * C20130) * C139384) *
                            C139598) *
                           C139600) *
                          C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C7401 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C7396 -
             (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
                C92451 +
            ((C110550 + C110551) * C7401 + (C110552 + C110553) * C7396 -
             (C15654 + C15653) * C7402 - (C15656 + C15655) * C139308) *
                C139600) *
               C139289 * C139571 +
           (((C15653 + C15654) * C7402 -
             ((C110553 + C110552) * C7396 + (C110551 + C110550) * C7401) +
             (C15655 + C15656) * C139308) *
                C92451 +
            ((C19280 + C19279) * C7402 -
             ((C113958 + C113959) * C7396 + (C113960 + C113961) * C7401) +
             (C19282 + C19281) * C139308) *
                C139600) *
               C139289 * C139384) *
              C6692 +
          ((((C14686 + C14687) * C7402 -
             ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
               C13593 * C1098) *
                  C7396 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C7401) +
             (C14688 + C14689) * C139308) *
                C92451 +
            ((C23750 + C23749) * C7402 -
             ((C112991 + C112990) * C7396 + (C112989 + C112988) * C7401) +
             (C23752 + C23751) * C139308) *
                C139600) *
               C139289 * C139571 +
           (((C112988 + C112989) * C7401 + (C112990 + C112991) * C7396 -
             (C23749 + C23750) * C7402 - (C23751 + C23752) * C139308) *
                C92451 +
            ((C114864 + C114865) * C7401 + (C114866 + C114867) * C7396 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C7402 -
             (C13796 * C19904 + C139598 * C20238 + C13795 * C5473 +
              C13593 * C5719) *
                 C139308) *
                C139600) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C6771 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C6692 -
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C6772 -
             (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
              C13593 * C1195) *
                 C139360) *
                C92451 +
            ((C110550 + C110551) * C6771 + (C110656 + C110657) * C6692 -
             (C112989 + C112988) * C6772 - (C113102 + C113103) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C14686 + C14687) * C6772 -
             ((C13913 + C13912) * C6692 + (C13822 + C13823) * C6771) +
             (C14801 + C14800) * C139360) *
                C92451 +
            ((C23750 + C23749) * C6772 -
             ((C15768 + C15767) * C6692 + (C15654 + C15653) * C6771) +
             (C23887 + C23888) * C139360) *
                C139600) *
               C139289 * C139308) *
              C139571 +
          ((((C112988 + C112989) * C6772 -
             ((C110657 + C110656) * C6692 + (C110551 + C110550) * C6771) +
             (C113103 + C113102) * C139360) *
                C92451 +
            ((C114864 + C114865) * C6772 -
             ((C114064 + C114065) * C6692 + (C113960 + C113961) * C6771) +
             (C114970 + C114971) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C15653 + C15654) * C6771 + (C15767 + C15768) * C6692 -
             (C23749 + C23750) * C6772 - (C23888 + C23887) * C139360) *
                C92451 +
            ((C19280 + C19279) * C6771 + (C19385 + C19386) * C6692 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C6772 -
             (C13796 * C20020 + C139598 * C20339 + C13795 * C5556 +
              C13593 * C5796) *
                 C139360) *
                C139600) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C1875 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139571 -
             (C110551 + C110550) * C1876 - (C110760 + C110761) * C139384) *
                C92451 +
            ((C110550 + C110551) * C1875 + (C110761 + C110760) * C139571 -
             (C113960 + C113961) * C1876 - (C114169 + C114168) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C112988 + C112989) * C1876 -
             ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
               C13593 * C1301) *
                  C139571 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C1875) +
             (C113212 + C113213) * C139384) *
                C92451 +
            ((C114864 + C114865) * C1876 -
             ((C113213 + C113212) * C139571 + (C112989 + C112988) * C1875) +
             (C115075 + C115074) * C139384) *
                C139600) *
               C139289 * C139360) *
              C7396 +
          ((((C15653 + C15654) * C1876 -
             ((C13997 + C13996) * C139571 + (C13822 + C13823) * C1875) +
             (C15878 + C15877) * C139384) *
                C92451 +
            ((C19280 + C19279) * C1876 -
             ((C15877 + C15878) * C139571 + (C15654 + C15653) * C1875) +
             (C19489 + C19490) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C14686 + C14687) * C1875 + (C14911 + C14910) * C139571 -
             (C23749 + C23750) * C1876 - (C24024 + C24023) * C139384) *
                C92451 +
            ((C23750 + C23749) * C1875 + (C24023 + C24024) * C139571 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C1876 -
             (C13796 * C20128 + C139598 * C20439 + C13795 * C5636 +
              C13593 * C5873) *
                 C139384) *
                C139600) *
               C139289 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
                C139289 * C13593 +
            ((C109938 + C109939) * C7401 + (C109940 + C109941) * C7396 -
             (C93759 + C93758) * C7402 - (C93761 + C93760) * C139308) *
                C139289 * C139598) *
               C139571 +
           (((C94760 + C94761) * C7402 -
             ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
               C92451 * C2268) *
                  C7396 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C7401) +
             (C94762 + C94763) * C139308) *
                C139289 * C13593 +
            ((C102507 + C102506) * C7402 -
             ((C113330 + C113331) * C7396 + (C113332 + C113333) * C7401) +
             (C102509 + C102508) * C139308) *
                C139289 * C139598) *
               C139384) *
              C6692 +
          ((((C93758 + C93759) * C7402 -
             ((C109941 + C109940) * C7396 + (C109939 + C109938) * C7401) +
             (C93760 + C93761) * C139308) *
                C139289 * C13593 +
            ((C95683 + C95682) * C7402 -
             ((C111750 + C111751) * C7396 + (C111752 + C111753) * C7401) +
             (C95685 + C95684) * C139308) *
                C139289 * C139598) *
               C139571 +
           (((C113333 + C113332) * C7401 + (C113331 + C113330) * C7396 -
             (C102506 + C102507) * C7402 - (C102508 + C102509) * C139308) *
                C139289 * C13593 +
            ((C113334 + C113335) * C7401 + (C113336 + C113337) * C7396 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C7402 -
             (C92850 * C19904 + C139600 * C20540 + C92849 * C3904 +
              C92451 * C4417) *
                 C139308) *
                C139289 * C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C109939 + C109938) * C6772 - (C110044 + C110045) * C139360) *
                C139289 * C13593 +
            ((C109938 + C109939) * C6771 + (C110045 + C110044) * C6692 -
             (C111752 + C111753) * C6772 - (C111857 + C111856) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C93758 + C93759) * C6772 -
             ((C92967 + C92966) * C6692 + (C92876 + C92877) * C6771) +
             (C93873 + C93872) * C139360) *
                C139289 * C13593 +
            ((C95683 + C95682) * C6772 -
             ((C93872 + C93873) * C6692 + (C93759 + C93758) * C6771) +
             (C95788 + C95789) * C139360) *
                C139289 * C139598) *
               C139308) *
              C139571 +
          ((((C113333 + C113332) * C6772 -
             ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
               C92451 * C2368) *
                  C6692 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C6771) +
             (C113444 + C113445) * C139360) *
                C139289 * C13593 +
            ((C113334 + C113335) * C6772 -
             ((C113445 + C113444) * C6692 + (C113332 + C113333) * C6771) +
             (C113447 + C113446) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C94760 + C94761) * C6771 + (C94874 + C94875) * C6692 -
             (C102506 + C102507) * C6772 - (C102645 + C102644) * C139360) *
                C139289 * C13593 +
            ((C102507 + C102506) * C6771 + (C102644 + C102645) * C6692 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C6772 -
             (C92850 * C20020 + C139600 * C20651 + C92849 * C3993 +
              C92451 * C4496) *
                 C139360) *
                C139289 * C139598) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[107] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C1875 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139571 -
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C1876 -
             (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
              C92451 * C2460) *
                 C139384) *
                C139289 * C13593 +
            ((C109938 + C109939) * C1875 + (C110148 + C110149) * C139571 -
             (C113332 + C113333) * C1876 - (C113554 + C113555) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C113333 + C113332) * C1876 -
             ((C110149 + C110148) * C139571 + (C109939 + C109938) * C1875) +
             (C113555 + C113554) * C139384) *
                C139289 * C13593 +
            ((C113334 + C113335) * C1876 -
             ((C111960 + C111961) * C139571 + (C111752 + C111753) * C1875) +
             (C113556 + C113557) * C139384) *
                C139289 * C139598) *
               C139360) *
              C7396 +
          ((((C94760 + C94761) * C1876 -
             ((C93051 + C93050) * C139571 + (C92876 + C92877) * C1875) +
             (C94985 + C94984) * C139384) *
                C139289 * C13593 +
            ((C102507 + C102506) * C1876 -
             ((C93982 + C93983) * C139571 + (C93759 + C93758) * C1875) +
             (C102780 + C102781) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C93758 + C93759) * C1875 + (C93983 + C93982) * C139571 -
             (C102506 + C102507) * C1876 - (C102781 + C102780) * C139384) *
                C139289 * C13593 +
            ((C95683 + C95682) * C1875 + (C95892 + C95893) * C139571 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C1876 -
             (C92850 * C20128 + C139600 * C20754 + C92849 * C4079 +
              C92451 * C4577) *
                 C139384) *
                C139289 * C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C137108 +
              (C63381 * C116 + C139289 * C125) * C139562 -
              (C63381 * C108 + C139289 * C114) * C137101 -
              (C63381 * C117 + C139289 * C126) * C139308) *
                 C13593 +
             (C65294 + C65295 - C65296 - C65297) * C139598) *
                C92451 +
            ((C80996 + C80997 - C80998 - C80999) * C13593 + C89550 * C139598) *
                C139600) *
               C9074 +
           (((C80998 - (C80997 + C80996) + C80999) * C13593 +
             C89551 * C139598) *
                C92451 +
            ((C81020 - (C81021 + C81022) + C81023) * C13593 +
             (C81024 - (C81010 + C81011) + C81025) * C139598) *
                C139600) *
               C139384) *
              C6692 +
          ((((C65296 - (C65295 + C65294) + C65297) * C13593 +
             (C65300 - (C65299 + C65298) + C65301) * C139598) *
                C92451 +
            (C89551 * C13593 +
             (C73724 - (C73725 + C73726) + C73727) * C139598) *
                C139600) *
               C9074 +
           ((C89550 * C13593 + (C73726 + C73725 - C73724 - C73727) * C139598) *
                C92451 +
            ((C81011 + C81010 - C81024 - C81025) * C13593 +
             (C67973 * C137108 + C67974 * C139562 -
              (C63381 * C19902 + C139289 * C19906) * C137101 -
              (C63381 * C19904 + C139289 * C19908) * C139308) *
                 C139598) *
                C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[108] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139289 * C113) * C6771 +
                         (C63381 * C182 + C139289 * C188) * C6692 -
                         C63884 * C6772 - C63994 * C139360) *
                            C13593 +
                        (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                         C63995 * C139360) *
                            C139598) *
                           C92451 +
                       ((C85526 + C85527 - C85528 - C85529) * C13593 +
                        (C85530 + C85531 - C85532 - C85533) * C139598) *
                           C139600) *
                          C139562 +
                      (((C63886 * C6772 -
                         ((C63381 * C183 + C139289 * C189) * C6692 +
                          (C63381 * C108 + C139289 * C114) * C6771) +
                         C63996 * C139360) *
                            C13593 +
                        (C63892 * C6772 - (C63996 * C6692 + C63886 * C6771) +
                         C63997 * C139360) *
                            C139598) *
                           C92451 +
                       ((C85534 - (C85535 + C85536) + C85537) * C13593 +
                        (C85538 - (C85539 + C85540) + C85541) * C139598) *
                           C139600) *
                          C139308) *
                         C9074 +
                     ((((C85528 - (C85527 + C85526) + C85529) * C13593 +
                        (C85532 - (C85531 + C85530) + C85533) * C139598) *
                           C92451 +
                       ((C91686 - (C91687 + C91688) + C91689) * C13593 +
                        (C91690 - (C91691 + C91692) + C91693) * C139598) *
                           C139600) *
                          C139562 +
                      (((C85536 + C85535 - C85534 - C85537) * C13593 +
                        (C85540 + C85539 - C85538 - C85541) * C139598) *
                           C92451 +
                       ((C81014 * C6771 + C81135 * C6692 - C81018 * C6772 -
                         C81136 * C139360) *
                            C13593 +
                        (C81018 * C6771 + C81136 * C6692 -
                         (C63381 * C19902 + C139289 * C19906) * C6772 -
                         (C63381 * C20020 + C139289 * C20022) * C139360) *
                            C139598) *
                           C139600) *
                          C139308) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[108] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139289 * C113) * C9224 +
                         (C63381 * C245 + C139289 * C251) * C9074 -
                         C77515 * C9225 - C77750 * C139384) *
                            C13593 +
                        (C72352 + C72353 - C72354 - C72355) * C139598) *
                           C92451 +
                       ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                         C81245 * C139384) *
                            C13593 +
                        (C87742 + C87743 - C87744 - C87745) * C139598) *
                           C139600) *
                          C6692 +
                      (((C72354 - (C72353 + C72352) + C72355) * C13593 +
                        (C72358 - (C72357 + C72356) + C72359) * C139598) *
                           C92451 +
                       ((C87744 - (C87743 + C87742) + C87745) * C13593 +
                        (C90898 - (C90899 + C90900) + C90901) * C139598) *
                           C139600) *
                          C139360) *
                         C139562 +
                     ((((C77517 * C9225 -
                         ((C63381 * C246 + C139289 * C252) * C9074 +
                          (C63381 * C108 + C139289 * C114) * C9224) +
                         C77751 * C139384) *
                            C13593 +
                        (C72360 - (C72361 + C72362) + C72363) * C139598) *
                           C92451 +
                       ((C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                         C81246 * C139384) *
                            C13593 +
                        (C87746 - (C87747 + C87748) + C87749) * C139598) *
                           C139600) *
                          C6692 +
                      (((C72362 + C72361 - C72360 - C72363) * C13593 +
                        (C72366 + C72365 - C72364 - C72367) * C139598) *
                           C92451 +
                       ((C87748 + C87747 - C87746 - C87749) * C13593 +
                        (C70578 * C9224 + C70797 * C9074 -
                         (C63381 * C19902 + C139289 * C19906) * C9225 -
                         (C63381 * C20128 + C139289 * C20130) * C139384) *
                            C139598) *
                           C139600) *
                          C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C137108 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139562 -
             (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
                C92451 +
            ((C110550 + C110551) * C137108 + (C110552 + C110553) * C139562 -
             (C15654 + C15653) * C137101 - (C15656 + C15655) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C15653 + C15654) * C137101 -
             ((C110553 + C110552) * C139562 + (C110551 + C110550) * C137108) +
             (C15655 + C15656) * C139308) *
                C92451 +
            ((C19280 + C19279) * C137101 -
             ((C113958 + C113959) * C139562 + (C113960 + C113961) * C137108) +
             (C19282 + C19281) * C139308) *
                C139600) *
               C139289 * C139384) *
              C6692 +
          ((((C14686 + C14687) * C137101 -
             ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
               C13593 * C1098) *
                  C139562 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C137108) +
             (C14688 + C14689) * C139308) *
                C92451 +
            ((C23750 + C23749) * C137101 -
             ((C112991 + C112990) * C139562 + (C112989 + C112988) * C137108) +
             (C23752 + C23751) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C112988 + C112989) * C137108 + (C112990 + C112991) * C139562 -
             (C23749 + C23750) * C137101 - (C23751 + C23752) * C139308) *
                C92451 +
            ((C114864 + C114865) * C137108 + (C114866 + C114867) * C139562 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C137101 -
             (C13796 * C19904 + C139598 * C20238 + C13795 * C5473 +
              C13593 * C5719) *
                 C139308) *
                C139600) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C6771 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C6692 -
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C6772 -
             (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
              C13593 * C1195) *
                 C139360) *
                C92451 +
            ((C110550 + C110551) * C6771 + (C110656 + C110657) * C6692 -
             (C112989 + C112988) * C6772 - (C113102 + C113103) * C139360) *
                C139600) *
               C139289 * C139562 +
           (((C14686 + C14687) * C6772 -
             ((C13913 + C13912) * C6692 + (C13822 + C13823) * C6771) +
             (C14801 + C14800) * C139360) *
                C92451 +
            ((C23750 + C23749) * C6772 -
             ((C15768 + C15767) * C6692 + (C15654 + C15653) * C6771) +
             (C23887 + C23888) * C139360) *
                C139600) *
               C139289 * C139308) *
              C9074 +
          ((((C112988 + C112989) * C6772 -
             ((C110657 + C110656) * C6692 + (C110551 + C110550) * C6771) +
             (C113103 + C113102) * C139360) *
                C92451 +
            ((C114864 + C114865) * C6772 -
             ((C114064 + C114065) * C6692 + (C113960 + C113961) * C6771) +
             (C114970 + C114971) * C139360) *
                C139600) *
               C139289 * C139562 +
           (((C15653 + C15654) * C6771 + (C15767 + C15768) * C6692 -
             (C23749 + C23750) * C6772 - (C23888 + C23887) * C139360) *
                C92451 +
            ((C19280 + C19279) * C6771 + (C19385 + C19386) * C6692 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C6772 -
             (C13796 * C20020 + C139598 * C20339 + C13795 * C5556 +
              C13593 * C5796) *
                 C139360) *
                C139600) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C9224 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C110551 + C110550) * C9225 - (C110760 + C110761) * C139384) *
                C92451 +
            ((C110550 + C110551) * C9224 + (C110761 + C110760) * C9074 -
             (C113960 + C113961) * C9225 - (C114169 + C114168) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C112988 + C112989) * C9225 -
             ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
               C13593 * C1301) *
                  C9074 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C9224) +
             (C113212 + C113213) * C139384) *
                C92451 +
            ((C114864 + C114865) * C9225 -
             ((C113213 + C113212) * C9074 + (C112989 + C112988) * C9224) +
             (C115075 + C115074) * C139384) *
                C139600) *
               C139289 * C139360) *
              C139562 +
          ((((C15653 + C15654) * C9225 -
             ((C13997 + C13996) * C9074 + (C13822 + C13823) * C9224) +
             (C15878 + C15877) * C139384) *
                C92451 +
            ((C19280 + C19279) * C9225 -
             ((C15877 + C15878) * C9074 + (C15654 + C15653) * C9224) +
             (C19489 + C19490) * C139384) *
                C139600) *
               C139289 * C6692 +
           (((C14686 + C14687) * C9224 + (C14911 + C14910) * C9074 -
             (C23749 + C23750) * C9225 - (C24024 + C24023) * C139384) *
                C92451 +
            ((C23750 + C23749) * C9224 + (C24023 + C24024) * C9074 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C9225 -
             (C13796 * C20128 + C139598 * C20439 + C13795 * C5636 +
              C13593 * C5873) *
                 C139384) *
                C139600) *
               C139289 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C137108 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139562 -
             (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
                C139289 * C13593 +
            ((C109938 + C109939) * C137108 + (C109940 + C109941) * C139562 -
             (C93759 + C93758) * C137101 - (C93761 + C93760) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C94760 + C94761) * C137101 -
             ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
               C92451 * C2268) *
                  C139562 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C137108) +
             (C94762 + C94763) * C139308) *
                C139289 * C13593 +
            ((C102507 + C102506) * C137101 -
             ((C113330 + C113331) * C139562 + (C113332 + C113333) * C137108) +
             (C102509 + C102508) * C139308) *
                C139289 * C139598) *
               C139384) *
              C6692 +
          ((((C93758 + C93759) * C137101 -
             ((C109941 + C109940) * C139562 + (C109939 + C109938) * C137108) +
             (C93760 + C93761) * C139308) *
                C139289 * C13593 +
            ((C95683 + C95682) * C137101 -
             ((C111750 + C111751) * C139562 + (C111752 + C111753) * C137108) +
             (C95685 + C95684) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C113333 + C113332) * C137108 + (C113331 + C113330) * C139562 -
             (C102506 + C102507) * C137101 - (C102508 + C102509) * C139308) *
                C139289 * C13593 +
            ((C113334 + C113335) * C137108 + (C113336 + C113337) * C139562 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C137101 -
             (C92850 * C19904 + C139600 * C20540 + C92849 * C3904 +
              C92451 * C4417) *
                 C139308) *
                C139289 * C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C6771 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C6692 -
             (C109939 + C109938) * C6772 - (C110044 + C110045) * C139360) *
                C139289 * C13593 +
            ((C109938 + C109939) * C6771 + (C110045 + C110044) * C6692 -
             (C111752 + C111753) * C6772 - (C111857 + C111856) * C139360) *
                C139289 * C139598) *
               C139562 +
           (((C93758 + C93759) * C6772 -
             ((C92967 + C92966) * C6692 + (C92876 + C92877) * C6771) +
             (C93873 + C93872) * C139360) *
                C139289 * C13593 +
            ((C95683 + C95682) * C6772 -
             ((C93872 + C93873) * C6692 + (C93759 + C93758) * C6771) +
             (C95788 + C95789) * C139360) *
                C139289 * C139598) *
               C139308) *
              C9074 +
          ((((C113333 + C113332) * C6772 -
             ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
               C92451 * C2368) *
                  C6692 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C6771) +
             (C113444 + C113445) * C139360) *
                C139289 * C13593 +
            ((C113334 + C113335) * C6772 -
             ((C113445 + C113444) * C6692 + (C113332 + C113333) * C6771) +
             (C113447 + C113446) * C139360) *
                C139289 * C139598) *
               C139562 +
           (((C94760 + C94761) * C6771 + (C94874 + C94875) * C6692 -
             (C102506 + C102507) * C6772 - (C102645 + C102644) * C139360) *
                C139289 * C13593 +
            ((C102507 + C102506) * C6771 + (C102644 + C102645) * C6692 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C6772 -
             (C92850 * C20020 + C139600 * C20651 + C92849 * C3993 +
              C92451 * C4496) *
                 C139360) *
                C139289 * C139598) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C9225 -
             (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
              C92451 * C2460) *
                 C139384) *
                C139289 * C13593 +
            ((C109938 + C109939) * C9224 + (C110148 + C110149) * C9074 -
             (C113332 + C113333) * C9225 - (C113554 + C113555) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C113333 + C113332) * C9225 -
             ((C110149 + C110148) * C9074 + (C109939 + C109938) * C9224) +
             (C113555 + C113554) * C139384) *
                C139289 * C13593 +
            ((C113334 + C113335) * C9225 -
             ((C111960 + C111961) * C9074 + (C111752 + C111753) * C9224) +
             (C113556 + C113557) * C139384) *
                C139289 * C139598) *
               C139360) *
              C139562 +
          ((((C94760 + C94761) * C9225 -
             ((C93051 + C93050) * C9074 + (C92876 + C92877) * C9224) +
             (C94985 + C94984) * C139384) *
                C139289 * C13593 +
            ((C102507 + C102506) * C9225 -
             ((C93982 + C93983) * C9074 + (C93759 + C93758) * C9224) +
             (C102780 + C102781) * C139384) *
                C139289 * C139598) *
               C6692 +
           (((C93758 + C93759) * C9224 + (C93983 + C93982) * C9074 -
             (C102506 + C102507) * C9225 - (C102781 + C102780) * C139384) *
                C139289 * C13593 +
            ((C95683 + C95682) * C9224 + (C95892 + C95893) * C9074 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C9225 -
             (C92850 * C20128 + C139600 * C20754 + C92849 * C4079 +
              C92451 * C4577) *
                 C139384) *
                C139289 * C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C13593 +
             (C65996 + C65997) * C139598) *
                C92451 +
            ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
               C9074 -
           ((C81958 * C139598 + (C81959 + C81960) * C13593) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C13593) * C92451) *
               C139384) *
              C139602 +
          (((C79995 * C13593 + C79997 * C139598) * C92451 +
            (C81961 * C13593 + (C67977 + C67978) * C139598) * C139600) *
               C139384 -
           ((C66557 * C139598 + C79996 * C13593) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
                C92451) *
               C9074) *
              C139593 +
          (((C66006 * C13593 + (C66001 + C66000) * C139598) * C92451 +
            (C79997 * C13593 + (C66555 + C66556) * C139598) * C139600) *
               C9074 -
           ((((C63381 * C67959 + C139289 * C67961) * C139303 +
              (C63381 * C67958 + C139289 * C67960) * C3364) *
                 C139598 +
             (C67978 + C67977) * C13593) *
                C139600 +
            ((C66556 + C66555) * C139598 + C66557 * C13593) * C92451) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7477 +
             (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
             C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
                C13593 +
            (C63884 * C7477 + C63994 * C139602 - C63890 * C7478 -
             C63995 * C139593 + C65313 * C7479 + C65399 * C7400) *
                C139598) *
               C92451 +
           ((C90788 + C90789 - C90790 - C90791 + C90792 + C90793) * C13593 +
            (C90794 + C90795 - C90796 - C90797 + C90798 + C90799) * C139598) *
               C139600) *
              C139303 * C9074 +
          (((C90790 - (C90789 + C90788) + C90791 - C90792 - C90793) * C13593 +
            (C90796 - (C90795 + C90794) + C90797 - C90798 - C90799) * C139598) *
               C92451 +
           ((C67971 * C7478 - (C81137 * C139602 + C81016 * C7477) +
             C68059 * C139593 - C67973 * C7479 - C68060 * C7400) *
                C13593 +
            (C67973 * C7478 - (C68059 * C139602 + C67971 * C7477) +
             C68060 * C139593 - (C63381 * C67958 + C139289 * C67960) * C7479 -
             (C63381 * C68052 + C139289 * C68053) * C7400) *
                C139598) *
               C139600) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C9224 +
             (C63381 * C245 + C139289 * C251) * C9074 - C77515 * C9225 -
             C77750 * C139384) *
                C13593 +
            (C72352 + C72353 - C72354 - C72355) * C139598) *
               C92451 +
           ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
             C81245 * C139384) *
                C13593 +
            (C87742 + C87743 - C87744 - C87745) * C139598) *
               C139600) *
              C139602 +
          (((C72354 - (C72353 + C72352) + C72355) * C13593 +
            (C72358 - (C72357 + C72356) + C72359) * C139598) *
               C92451 +
           ((C87744 - (C87743 + C87742) + C87745) * C13593 +
            (C90898 - (C90899 + C90900) + C90901) * C139598) *
               C139600) *
              C139593 +
          ((C74744 * C13593 + (C74741 + C74740 - C74739 - C74742) * C139598) *
               C92451 +
           ((C90900 + C90899 - C90898 - C90901) * C13593 +
            (C66549 * C9224 + C66737 * C9074 -
             (C63381 * C67958 + C139289 * C67960) * C9225 -
             (C63381 * C68134 + C139289 * C68135) * C139384) *
                C139598) *
               C139600) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C92451 +
            ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
                C139600) *
               C139289 * C9074 -
           (((C113958 + C113959) * C139303 + (C113960 + C113961) * C3364) *
                C139600 +
            ((C110553 + C110552) * C139303 + (C110551 + C110550) * C3364) *
                C92451) *
               C139289 * C139384) *
              C139602 +
          ((((C112988 + C112989) * C3364 + (C112990 + C112991) * C139303) *
                C92451 +
            ((C114864 + C114865) * C3364 + (C114866 + C114867) * C139303) *
                C139600) *
               C139289 * C139384 -
           (((C112991 + C112990) * C139303 + (C112989 + C112988) * C3364) *
                C139600 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C92451) *
               C139289 * C9074) *
              C139593 +
          ((((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C92451 +
            ((C112992 + C112993) * C3364 + (C112994 + C112995) * C139303) *
                C139600) *
               C139289 * C9074 -
           (((C13796 * C67959 + C139598 * C68229 + C13795 * C19905 +
              C13593 * C20239) *
                 C139303 +
             (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
              C13593 * C20237) *
                 C3364) *
                C139600 +
            ((C112995 + C112994) * C139303 + (C112993 + C112992) * C3364) *
                C92451) *
               C139289 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7477 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139602 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C7478 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139593 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C7479 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C7400) *
               C92451 +
           ((C110550 + C110551) * C7477 + (C110656 + C110657) * C139602 -
            (C112989 + C112988) * C7478 - (C113102 + C113103) * C139593 +
            (C112992 + C112993) * C7479 + (C113104 + C113105) * C7400) *
               C139600) *
              C139289 * C139303 * C9074 +
          (((C112988 + C112989) * C7478 -
            ((C110657 + C110656) * C139602 + (C110551 + C110550) * C7477) +
            (C113103 + C113102) * C139593 - (C112993 + C112992) * C7479 -
            (C113105 + C113104) * C7400) *
               C92451 +
           ((C114864 + C114865) * C7478 -
            ((C114064 + C114065) * C139602 + (C113960 + C113961) * C7477) +
            (C114970 + C114971) * C139593 -
            (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
             C13593 * C20237) *
                C7479 -
            (C13796 * C68052 + C139598 * C68304 + C13795 * C20021 +
             C13593 * C20338) *
                C7400) *
               C139600) *
              C139289 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C9224 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C9074 -
            (C110551 + C110550) * C9225 - (C110760 + C110761) * C139384) *
               C92451 +
           ((C110550 + C110551) * C9224 + (C110761 + C110760) * C9074 -
            (C113960 + C113961) * C9225 - (C114169 + C114168) * C139384) *
               C139600) *
              C139289 * C139602 +
          (((C112988 + C112989) * C9225 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C9074 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C9224) +
            (C113212 + C113213) * C139384) *
               C92451 +
           ((C114864 + C114865) * C9225 -
            ((C113213 + C113212) * C9074 + (C112989 + C112988) * C9224) +
            (C115075 + C115074) * C139384) *
               C139600) *
              C139289 * C139593 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C9224 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C9074 -
            (C112993 + C112992) * C9225 - (C113214 + C113215) * C139384) *
               C92451 +
           ((C112992 + C112993) * C9224 + (C113215 + C113214) * C9074 -
            (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
             C13593 * C20237) *
                C9225 -
            (C13796 * C68134 + C139598 * C68379 + C13795 * C20129 +
             C13593 * C20438) *
                C139384) *
               C139600) *
              C139289 * C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C13593 +
            ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
                C139289 * C139598) *
               C9074 -
           (((C113330 + C113331) * C139303 + (C113332 + C113333) * C3364) *
                C139289 * C139598 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C139289 * C13593) *
               C139384) *
              C139602 +
          ((((C113333 + C113332) * C3364 + (C113331 + C113330) * C139303) *
                C139289 * C13593 +
            ((C113334 + C113335) * C3364 + (C113336 + C113337) * C139303) *
                C139289 * C139598) *
               C139384 -
           (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
                C139289 * C139598 +
            ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
                C139289 * C13593) *
               C9074) *
              C139593 +
          ((((C111753 + C111752) * C3364 + (C111751 + C111750) * C139303) *
                C139289 * C13593 +
            ((C112432 + C112433) * C3364 + (C112434 + C112435) * C139303) *
                C139289 * C139598) *
               C9074 -
           (((C92850 * C67959 + C139600 * C68455 + C92849 * C17961 +
              C92451 * C18621) *
                 C139303 +
             (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
              C92451 * C18619) *
                 C3364) *
                C139289 * C139598 +
            ((C113337 + C113336) * C139303 + (C113335 + C113334) * C3364) *
                C139289 * C13593) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7477 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139602 -
            (C109939 + C109938) * C7478 - (C110044 + C110045) * C139593 +
            (C111753 + C111752) * C7479 + (C111856 + C111857) * C7400) *
               C139289 * C13593 +
           ((C109938 + C109939) * C7477 + (C110045 + C110044) * C139602 -
            (C111752 + C111753) * C7478 - (C111857 + C111856) * C139593 +
            (C112432 + C112433) * C7479 + (C112507 + C112506) * C7400) *
               C139289 * C139598) *
              C139303 * C9074 +
          (((C113333 + C113332) * C7478 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139602 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C7477) +
            (C113444 + C113445) * C139593 - (C113335 + C113334) * C7479 -
            (C113446 + C113447) * C7400) *
               C139289 * C13593 +
           ((C113334 + C113335) * C7478 -
            ((C113445 + C113444) * C139602 + (C113332 + C113333) * C7477) +
            (C113447 + C113446) * C139593 -
            (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
             C92451 * C18619) *
                C7479 -
            (C92850 * C68052 + C139600 * C68538 + C92849 * C18089 +
             C92451 * C18746) *
                C7400) *
               C139289 * C139598) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[109] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C9224 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C9074 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C9225 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C139289 * C13593 +
           ((C109938 + C109939) * C9224 + (C110148 + C110149) * C9074 -
            (C113332 + C113333) * C9225 - (C113554 + C113555) * C139384) *
               C139289 * C139598) *
              C139602 +
          (((C113333 + C113332) * C9225 -
            ((C110149 + C110148) * C9074 + (C109939 + C109938) * C9224) +
            (C113555 + C113554) * C139384) *
               C139289 * C13593 +
           ((C113334 + C113335) * C9225 -
            ((C111960 + C111961) * C9074 + (C111752 + C111753) * C9224) +
            (C113556 + C113557) * C139384) *
               C139289 * C139598) *
              C139593 +
          (((C111753 + C111752) * C9224 + (C111961 + C111960) * C9074 -
            (C113335 + C113334) * C9225 - (C113557 + C113556) * C139384) *
               C139289 * C13593 +
           ((C112432 + C112433) * C9224 + (C112578 + C112579) * C9074 -
            (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
             C92451 * C18619) *
                C9225 -
            (C92850 * C68134 + C139600 * C68616 + C92849 * C18203 +
             C92451 * C18855) *
                C139384) *
               C139289 * C139598) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C13593 +
             (C65996 + C65997) * C139598) *
                C92451 +
            ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
               C139603 -
           ((C81958 * C139598 + (C81959 + C81960) * C13593) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C13593) * C92451) *
               C139596 +
           (((C81960 + C81959) * C13593 + C81961 * C139598) * C92451 +
            ((C82906 + C82907) * C13593 + (C81968 + C81969) * C139598) *
                C139600) *
               C10691) *
              C6692 +
          (((C79995 * C13593 + C79997 * C139598) * C92451 +
            (C81961 * C13593 + (C67977 + C67978) * C139598) * C139600) *
               C139596 -
           ((C66557 * C139598 + C79996 * C13593) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
                C92451) *
               C139603 -
           ((((C63381 * C68677 + C139289 * C68679) * C139303 +
              (C63381 * C68676 + C139289 * C68678) * C3364) *
                 C139598 +
             (C81969 + C81968) * C13593) *
                C139600 +
            ((C67978 + C67977) * C139598 + C81958 * C13593) * C92451) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[110] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139289 * C113) * C6771 +
                        (C63381 * C182 + C139289 * C188) * C6692 -
                        C63884 * C6772 - C63994 * C139360) *
                           C13593 +
                       (C63884 * C6771 + C63994 * C6692 - C63890 * C6772 -
                        C63995 * C139360) *
                           C139598) *
                          C92451 +
                      ((C85526 + C85527 - C85528 - C85529) * C13593 +
                       (C85530 + C85531 - C85532 - C85533) * C139598) *
                          C139600) *
                         C139303 * C139603 +
                     (((C85528 - (C85527 + C85526) + C85529) * C13593 +
                       (C85532 - (C85531 + C85530) + C85533) * C139598) *
                          C92451 +
                      ((C91686 - (C91687 + C91688) + C91689) * C13593 +
                       (C91690 - (C91691 + C91692) + C91693) * C139598) *
                          C139600) *
                         C139303 * C139596 +
                     (((C91688 + C91687 - C91686 - C91689) * C13593 +
                       (C91692 + C91691 - C91690 - C91693) * C139598) *
                          C92451 +
                      ((C82904 * C6771 + C82981 * C6692 - C81966 * C6772 -
                        C82086 * C139360) *
                           C13593 +
                       (C81966 * C6771 + C82086 * C6692 -
                        (C63381 * C68676 + C139289 * C68678) * C6772 -
                        (C63381 * C68730 + C139289 * C68731) * C139360) *
                           C139598) *
                          C139600) *
                         C139303 * C10691)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C10840 +
             (C63381 * C245 + C139289 * C251) * C139603 - C77515 * C10841 -
             C77750 * C139596 + C81016 * C10842 + C81245 * C10691) *
                C13593 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139598) *
               C92451 +
           ((C77515 * C10840 + C77750 * C139603 - C81016 * C10841 -
             C81245 * C139596 + C82904 * C10842 + C83053 * C10691) *
                C13593 +
            (C91792 + C91793 - C91794 - C91795 + C91796 + C91797) * C139598) *
               C139600) *
              C6692 +
          (((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C13593 +
            (C75427 - (C75426 + C75425) + C75428 - C75429 - C75430) * C139598) *
               C92451 +
           ((C91794 - (C91793 + C91792) + C91795 - C91796 - C91797) * C13593 +
            (C67973 * C10841 - (C66736 * C139603 + C66546 * C10840) +
             C68152 * C139596 - (C63381 * C68676 + C139289 * C68678) * C10842 -
             (C63381 * C68782 + C139289 * C68783) * C10691) *
                C139598) *
               C139600) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C92451 +
            ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
                C139600) *
               C139289 * C139603 -
           (((C113958 + C113959) * C139303 + (C113960 + C113961) * C3364) *
                C139600 +
            ((C110553 + C110552) * C139303 + (C110551 + C110550) * C3364) *
                C92451) *
               C139289 * C139596 +
           (((C113961 + C113960) * C3364 + (C113959 + C113958) * C139303) *
                C92451 +
            ((C115666 + C115667) * C3364 + (C115668 + C115669) * C139303) *
                C139600) *
               C139289 * C10691) *
              C6692 +
          ((((C112988 + C112989) * C3364 + (C112990 + C112991) * C139303) *
                C92451 +
            ((C114864 + C114865) * C3364 + (C114866 + C114867) * C139303) *
                C139600) *
               C139289 * C139596 -
           (((C112991 + C112990) * C139303 + (C112989 + C112988) * C3364) *
                C139600 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C92451) *
               C139289 * C139603 -
           (((C13796 * C68677 + C139598 * C68835 + C13795 * C20833 +
              C13593 * C21047) *
                 C139303 +
             (C13796 * C68676 + C139598 * C68834 + C13795 * C20831 +
              C13593 * C21045) *
                 C3364) *
                C139600 +
            ((C114867 + C114866) * C139303 + (C114865 + C114864) * C3364) *
                C92451) *
               C139289 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6771 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C6692 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C6772 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C92451 +
           ((C110550 + C110551) * C6771 + (C110656 + C110657) * C6692 -
            (C112989 + C112988) * C6772 - (C113102 + C113103) * C139360) *
               C139600) *
              C139289 * C139303 * C139603 +
          (((C112988 + C112989) * C6772 -
            ((C110657 + C110656) * C6692 + (C110551 + C110550) * C6771) +
            (C113103 + C113102) * C139360) *
               C92451 +
           ((C114864 + C114865) * C6772 -
            ((C114064 + C114065) * C6692 + (C113960 + C113961) * C6771) +
            (C114970 + C114971) * C139360) *
               C139600) *
              C139289 * C139303 * C139596 +
          (((C113961 + C113960) * C6771 + (C114065 + C114064) * C6692 -
            (C114865 + C114864) * C6772 - (C114971 + C114970) * C139360) *
               C92451 +
           ((C115666 + C115667) * C6771 + (C115740 + C115741) * C6692 -
            (C13796 * C68676 + C139598 * C68834 + C13795 * C20831 +
             C13593 * C21045) *
                C6772 -
            (C13796 * C68730 + C139598 * C68886 + C13795 * C20905 +
             C13593 * C21115) *
                C139360) *
               C139600) *
              C139289 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C10840 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139603 -
            (C110551 + C110550) * C10841 - (C110760 + C110761) * C139596 +
            (C113961 + C113960) * C10842 + (C114168 + C114169) * C10691) *
               C92451 +
           ((C110550 + C110551) * C10840 + (C110761 + C110760) * C139603 -
            (C113960 + C113961) * C10841 - (C114169 + C114168) * C139596 +
            (C115666 + C115667) * C10842 + (C115813 + C115812) * C10691) *
               C139600) *
              C139289 * C6692 +
          (((C112988 + C112989) * C10841 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139603 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C10840) +
            (C113212 + C113213) * C139596 - (C114865 + C114864) * C10842 -
            (C115074 + C115075) * C10691) *
               C92451 +
           ((C114864 + C114865) * C10841 -
            ((C113213 + C113212) * C139603 + (C112989 + C112988) * C10840) +
            (C115075 + C115074) * C139596 -
            (C13796 * C68676 + C139598 * C68834 + C13795 * C20831 +
             C13593 * C21045) *
                C10842 -
            (C13796 * C68782 + C139598 * C68937 + C13795 * C20975 +
             C13593 * C21182) *
                C10691) *
               C139600) *
              C139289 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C13593 +
            ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
                C139289 * C139598) *
               C139603 -
           (((C113330 + C113331) * C139303 + (C113332 + C113333) * C3364) *
                C139289 * C139598 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C139289 * C13593) *
               C139596 +
           (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C139289 * C13593 +
            ((C115182 + C115183) * C3364 + (C115184 + C115185) * C139303) *
                C139289 * C139598) *
               C10691) *
              C6692 +
          ((((C113333 + C113332) * C3364 + (C113331 + C113330) * C139303) *
                C139289 * C13593 +
            ((C113334 + C113335) * C3364 + (C113336 + C113337) * C139303) *
                C139289 * C139598) *
               C139596 -
           (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
                C139289 * C139598 +
            ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
                C139289 * C13593) *
               C139603 -
           (((C92850 * C68677 + C139600 * C68989 + C92849 * C19905 +
              C92451 * C20541) *
                 C139303 +
             (C92850 * C68676 + C139600 * C68988 + C92849 * C19903 +
              C92451 * C20539) *
                 C3364) *
                C139289 * C139598 +
            ((C115185 + C115184) * C139303 + (C115183 + C115182) * C3364) *
                C139289 * C13593) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6771 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C6692 -
            (C109939 + C109938) * C6772 - (C110044 + C110045) * C139360) *
               C139289 * C13593 +
           ((C109938 + C109939) * C6771 + (C110045 + C110044) * C6692 -
            (C111752 + C111753) * C6772 - (C111857 + C111856) * C139360) *
               C139289 * C139598) *
              C139303 * C139603 +
          (((C113333 + C113332) * C6772 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C6692 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C6771) +
            (C113444 + C113445) * C139360) *
               C139289 * C13593 +
           ((C113334 + C113335) * C6772 -
            ((C113445 + C113444) * C6692 + (C113332 + C113333) * C6771) +
            (C113447 + C113446) * C139360) *
               C139289 * C139598) *
              C139303 * C139596 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C6771 +
            (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
             C139600 * C6561) *
                C6692 -
            (C115183 + C115182) * C6772 - (C115288 + C115289) * C139360) *
               C139289 * C13593 +
           ((C115182 + C115183) * C6771 + (C115289 + C115288) * C6692 -
            (C92850 * C68676 + C139600 * C68988 + C92849 * C19903 +
             C92451 * C20539) *
                C6772 -
            (C92850 * C68730 + C139600 * C69040 + C92849 * C20021 +
             C92451 * C20650) *
                C139360) *
               C139289 * C139598) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C10840 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139603 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C10841 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139596 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C10691) *
               C139289 * C13593 +
           ((C109938 + C109939) * C10840 + (C110148 + C110149) * C139603 -
            (C113332 + C113333) * C10841 - (C113554 + C113555) * C139596 +
            (C115182 + C115183) * C10842 + (C115392 + C115393) * C10691) *
               C139289 * C139598) *
              C6692 +
          (((C113333 + C113332) * C10841 -
            ((C110149 + C110148) * C139603 + (C109939 + C109938) * C10840) +
            (C113555 + C113554) * C139596 - (C115183 + C115182) * C10842 -
            (C115393 + C115392) * C10691) *
               C139289 * C13593 +
           ((C113334 + C113335) * C10841 -
            ((C111960 + C111961) * C139603 + (C111752 + C111753) * C10840) +
            (C113556 + C113557) * C139596 -
            (C92850 * C68676 + C139600 * C68988 + C92849 * C19903 +
             C92451 * C20539) *
                C10842 -
            (C92850 * C68782 + C139600 * C69091 + C92849 * C20129 +
             C92451 * C20753) *
                C10691) *
               C139289 * C139598) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eexx[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C13593 +
            (C65294 + C65295 - C65296 - C65297) * C139598) *
               C92451 +
           ((C80996 + C80997 - C80998 - C80999) * C13593 + C89550 * C139598) *
               C139600) *
              C139372 * C2565 +
          (((C65296 - (C65295 + C65294) + C65297) * C13593 +
            (C65300 - (C65299 + C65298) + C65301) * C139598) *
               C92451 +
           (C89551 * C13593 + (C73724 - (C73725 + C73726) + C73727) * C139598) *
               C139600) *
              C139372 * C2566 +
          ((C65320 * C13593 + (C65318 + C65317 - C65316 - C65319) * C139598) *
               C92451 +
           ((C73726 + C73725 - C73724 - C73727) * C13593 +
            (C66549 * C137108 + C66550 * C139562 -
             (C63381 * C17958 + C139289 * C17962) * C137101 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C139598) *
               C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C103 +
            (C63381 * C116 + C139289 * C125) * C92 -
            (C63381 * C108 + C139289 * C114) * C104 -
            (C63381 * C117 + C139289 * C126) * C93 +
            (C63381 * C109 + C139289 * C115) * C105 +
            (C63381 * C118 + C139289 * C127) * C94 -
            (C63381 * C110 + C139289 * C119) * C106 -
            (C63381 * C120 + C139289 * C128) * C95) *
               C13593 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C63888 * C105 + C63889 * C94 -
            (C63381 * C831 + C139289 * C836) * C106 -
            (C63381 * C841 + C139289 * C847) * C95) *
               C139598) *
              C92451 +
          ((C77515 * C103 + C77516 * C92 - C77517 * C104 - C77518 * C93 +
            C77519 * C105 + C77520 * C94 -
            (C63381 * C1699 + C139289 * C1704) * C106 -
            (C63381 * C1709 + C139289 * C1715) * C95) *
               C13593 +
           (C66548 * C103 + C66547 * C92 - C70576 * C104 - C70577 * C93 +
            C76581 * C105 + C76582 * C94 -
            (C63381 * C8120 + C139289 * C8121) * C106 -
            (C63381 * C8122 + C139289 * C8123) * C95) *
               C139598) *
              C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C13593 +
            (C65294 + C65295 - C65296 - C65297) * C139598) *
               C92451 +
           ((C80996 + C80997 - C80998 - C80999) * C13593 + C89550 * C139598) *
               C139600) *
              C4653 +
          (((C80998 - (C80997 + C80996) + C80999) * C13593 + C89551 * C139598) *
               C92451 +
           ((C81020 - (C81021 + C81022) + C81023) * C13593 +
            (C81024 - (C81010 + C81011) + C81025) * C139598) *
               C139600) *
              C4654 +
          (((C81022 + C81021 - C81020 - C81023) * C13593 +
            (C81011 + C81010 - C81024 - C81025) * C139598) *
               C92451 +
           ((C82904 * C137108 + C82905 * C139562 -
             (C63381 * C6164 + C139289 * C6170) * C137101 -
             (C63381 * C6167 + C139289 * C6173) * C139308) *
                C13593 +
            (C81966 * C137108 + C81967 * C139562 -
             (C63381 * C20830 + C139289 * C20834) * C137101 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139598) *
               C139600) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C13593 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C92451 +
           ((C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C13593 +
            (C80102 + C80103 - C80104 - C80105 + C80106 + C80107) * C139598) *
               C139600) *
              C139562 +
          (((C63886 * C2661 -
             ((C63381 * C183 + C139289 * C189) * C2565 +
              (C63381 * C108 + C139289 * C114) * C2660) +
             C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
                C13593 +
            (C63892 * C2661 - (C63996 * C2565 + C63886 * C2660) +
             C63997 * C2566 - C65311 * C2662 - C65400 * C2567) *
                C139598) *
               C92451 +
           ((C70576 * C2661 - (C77641 * C2565 + C77517 * C2660) +
             C70686 * C2566 - C70578 * C2662 - C70687 * C2567) *
                C13593 +
            (C70578 * C2661 - (C70686 * C2565 + C70576 * C2660) +
             C70687 * C2566 - (C63381 * C17958 + C139289 * C17962) * C2662 -
             (C63381 * C18088 + C139289 * C18090) * C2567) *
                C139598) *
               C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C13593 +
            (C63884 * C181 + C63994 * C139346) * C139598) *
               C92451 +
           ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
               C139600) *
              C92 -
          (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
               C139600 +
           ((C63996 * C139346 + C63886 * C181) * C139598 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C13593) *
               C92451) *
              C93 +
          ((((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C13593 +
            (C63888 * C181 + C63998 * C139346) * C139598) *
               C92451 +
           ((C77635 + C77645) * C13593 + (C77638 + C77639) * C139598) *
               C139600) *
              C94 -
          ((((C63381 * C8222 + C139289 * C8223) * C139346 +
             (C63381 * C8120 + C139289 * C8121) * C181) *
                C139598 +
            ((C63381 * C1793 + C139289 * C1798) * C139346 +
             (C63381 * C1699 + C139289 * C1704) * C181) *
                C13593) *
               C139600 +
           (((C63381 * C928 + C139289 * C933) * C139346 +
             (C63381 * C831 + C139289 * C836) * C181) *
                C139598 +
            ((C63381 * C185 + C139289 * C191) * C139346 +
             (C63381 * C110 + C139289 * C119) * C181) *
                C13593) *
               C92451) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C13593 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C92451 +
            ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
                C139600) *
               C139562 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C13593) *
                C92451) *
               C139308) *
              C4653 +
          ((((C77634 + C77644) * C13593 + (C77631 + C77630) * C139598) *
                C92451 +
            ((C81124 + C81138) * C13593 + (C81127 + C81139) * C139598) *
                C139600) *
               C139308 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C13593) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C13593) *
                C92451) *
               C139562) *
              C4654 +
          ((((C81134 + C81140) * C13593 + (C81131 + C81130) * C139598) *
                C92451 +
            ((C82976 + C82982) * C13593 + (C82979 + C82980) * C139598) *
                C139600) *
               C139562 -
           ((((C63381 * C20904 + C139289 * C20906) * C139346 +
              (C63381 * C20830 + C139289 * C20834) * C181) *
                 C139598 +
             ((C63381 * C6226 + C139289 * C6229) * C139346 +
              (C63381 * C6164 + C139289 * C6170) * C181) *
                 C13593) *
                C139600 +
            ((C81139 + C81127) * C139598 + (C81138 + C81124) * C13593) *
                C92451) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[111] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C13593 +
             (C64074 + C64098) * C139598) *
                C92451 +
            ((C77515 * C244 + C77750 * C139372) * C13593 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C2565 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
                C92451) *
               C2566 +
           ((C65475 * C13593 + (C65478 + C65485) * C139598) * C92451 +
            ((C78660 + C78659) * C13593 + (C79473 + C79474) * C139598) *
                C139600) *
               C2567) *
              C139562 +
          ((((C64080 + C64100) * C13593 + (C64083 + C64101) * C139598) *
                C92451 +
            ((C76786 + C76787) * C13593 + (C78661 + C78662) * C139598) *
                C139600) *
               C2566 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C13593) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C13593) *
                C92451) *
               C2565 -
           ((((C63381 * C18202 + C139289 * C18204) * C139372 +
              (C63381 * C17958 + C139289 * C17962) * C244) *
                 C139598 +
             (C78662 + C78661) * C13593) *
                C139600 +
            ((C65486 + C65479) * C139598 + C65482 * C13593) * C92451) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139289 * C113) * C244 +
                                 (C63381 * C245 + C139289 * C251) * C139372) *
                                    C13593 +
                                (C64074 + C64098) * C139598) *
                                   C92451 +
                               ((C77515 * C244 + C77750 * C139372) * C13593 +
                                (C76784 + C76785) * C139598) *
                                   C139600) *
                                  C139346 * C92 -
                              (((C76787 + C76786) * C139598 +
                                (C77751 * C139372 + C77517 * C244) * C13593) *
                                   C139600 +
                               ((C64100 + C64080) * C139598 +
                                ((C63381 * C246 + C139289 * C252) * C139372 +
                                 (C63381 * C108 + C139289 * C114) * C244) *
                                    C13593) *
                                   C92451) *
                                  C139346 * C93 +
                              ((((C63381 * C109 + C139289 * C115) * C244 +
                                 (C63381 * C247 + C139289 * C253) * C139372) *
                                    C13593 +
                                (C64086 + C64102) * C139598) *
                                   C92451 +
                               ((C77519 * C244 + C77752 * C139372) * C13593 +
                                (C76788 + C76792) * C139598) *
                                   C139600) *
                                  C139346 * C94 -
                              ((((C63381 * C8322 + C139289 * C8323) * C139372 +
                                 (C63381 * C8120 + C139289 * C8121) * C244) *
                                    C139598 +
                                ((C63381 * C1880 + C139289 * C1885) * C139372 +
                                 (C63381 * C1699 + C139289 * C1704) * C244) *
                                    C13593) *
                                   C139600 +
                               (((C63381 * C1012 + C139289 * C1017) * C139372 +
                                 (C63381 * C831 + C139289 * C836) * C244) *
                                    C139598 +
                                ((C63381 * C248 + C139289 * C254) * C139372 +
                                 (C63381 * C110 + C139289 * C119) * C244) *
                                    C13593) *
                                   C92451) *
                                  C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C4828 +
             (C63381 * C245 + C139289 * C251) * C4653 - C77515 * C4829 -
             C77750 * C4654 + C81016 * C4830 + C81245 * C4655) *
                C13593 +
            (C68137 + C68138 - C68139 - C68140 + C68141 + C68153) * C139598) *
               C92451 +
           ((C77515 * C4828 + C77750 * C4653 - C81016 * C4829 - C81245 * C4654 +
             C82904 * C4830 + C83053 * C4655) *
                C13593 +
            (C82185 + C82186 - C82187 - C82188 + C82189 + C82193) * C139598) *
               C139600) *
              C139346 * C139562 +
          (((C77517 * C4829 -
             ((C63381 * C246 + C139289 * C252) * C4653 +
              (C63381 * C108 + C139289 * C114) * C4828) +
             C77751 * C4654 - C81014 * C4830 - C81246 * C4655) *
                C13593 +
            (C70576 * C4829 - (C64094 * C4653 + C63886 * C4828) +
             C70796 * C4654 - C81018 * C4830 - C81247 * C4655) *
                C139598) *
               C92451 +
           ((C81014 * C4829 - (C77751 * C4653 + C77517 * C4828) +
             C81246 * C4654 - (C63381 * C6164 + C139289 * C6170) * C4830 -
             (C63381 * C6286 + C139289 * C6289) * C4655) *
                C13593 +
            (C81018 * C4829 - (C70796 * C4653 + C70576 * C4828) +
             C81247 * C4654 - (C63381 * C20830 + C139289 * C20834) * C4830 -
             (C63381 * C20974 + C139289 * C20976) * C4655) *
                C139598) *
               C139600) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139562 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
               C92451 +
           ((C110550 + C110551) * C137108 + (C110552 + C110553) * C139562 -
            (C15654 + C15653) * C137101 - (C15656 + C15655) * C139308) *
               C139600) *
              C139289 * C139372 * C2565 +
          (((C14686 + C14687) * C137101 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139562 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C137108) +
            (C14688 + C14689) * C139308) *
               C92451 +
           ((C23750 + C23749) * C137101 -
            ((C13796 * C3905 + C139598 * C4172 + C13795 * C3900 +
              C13593 * C4167) *
                 C139562 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C137108) +
            (C23752 + C23751) * C139308) *
               C139600) *
              C139289 * C139372 * C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C16627 + C16628) * C137101 - (C16629 + C16630) * C139308) *
               C92451 +
           ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C137108 +
            (C13795 * C3905 + C13593 * C4172 + C13796 * C17961 +
             C139598 * C18319) *
                C139562 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C137101 -
            (C13796 * C17960 + C139598 * C18318 + C13795 * C3904 +
             C13593 * C4171) *
                C139308) *
               C139600) *
              C139289 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C92451 +
          ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
            C139598 * C4161) *
               C103 +
           (C13795 * C1707 + C13593 * C1966 + C13796 * C3900 +
            C139598 * C4167) *
               C92 -
           (C15654 + C15653) * C104 - (C15656 + C15655) * C93 +
           (C15658 + C15657) * C105 + (C15660 + C15659) * C94 -
           (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
            C13593 * C1964) *
               C106 -
           (C13796 * C8122 + C139598 * C8423 + C13795 * C1709 +
            C13593 * C1969) *
               C95) *
              C139600) *
         C139289 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139562 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
               C92451 +
           ((C110550 + C110551) * C137108 + (C110552 + C110553) * C139562 -
            (C15654 + C15653) * C137101 - (C15656 + C15655) * C139308) *
               C139600) *
              C139289 * C4653 +
          (((C15653 + C15654) * C137101 -
            ((C110553 + C110552) * C139562 + (C110551 + C110550) * C137108) +
            (C15655 + C15656) * C139308) *
               C92451 +
           ((C19280 + C19279) * C137101 -
            ((C113958 + C113959) * C139562 + (C113960 + C113961) * C137108) +
            (C19282 + C19281) * C139308) *
               C139600) *
              C139289 * C4654 +
          (((C113961 + C113960) * C137108 + (C113959 + C113958) * C139562 -
            (C19279 + C19280) * C137101 - (C19281 + C19282) * C139308) *
               C92451 +
           ((C13795 * C6165 + C13593 * C6343 + C13796 * C20831 +
             C139598 * C21045) *
                C137108 +
            (C13795 * C6168 + C13593 * C6346 + C13796 * C20833 +
             C139598 * C21047) *
                C139562 -
            (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
             C13593 * C6342) *
                C137101 -
            (C13796 * C20832 + C139598 * C21046 + C13795 * C6167 +
             C13593 * C6345) *
                C139308) *
               C139600) *
              C139289 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C92451 +
           ((C110550 + C110551) * C2660 + (C110656 + C110657) * C2565 -
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C2661 -
            (C13796 * C3994 + C139598 * C4248 + C13795 * C3989 +
             C13593 * C4247) *
                C2566 +
            (C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C2662 +
            (C13795 * C3994 + C13593 * C4248 + C13796 * C18089 +
             C139598 * C18418) *
                C2567) *
               C139600) *
              C139289 * C139562 +
          (((C14686 + C14687) * C2661 -
            ((C13913 + C13912) * C2565 + (C13822 + C13823) * C2660) +
            (C14801 + C14800) * C2566 - (C16627 + C16628) * C2662 -
            (C16734 + C16733) * C2567) *
               C92451 +
           ((C23750 + C23749) * C2661 -
            ((C15768 + C15767) * C2565 + (C15654 + C15653) * C2660) +
            (C23887 + C23888) * C2566 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C2662 -
            (C13796 * C18088 + C139598 * C18419 + C13795 * C3993 +
             C13593 * C4250) *
                C2567) *
               C139600) *
              C139289 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139346) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C181 +
            (C13795 * C1794 + C13593 * C2066 + C13796 * C3989 +
             C139598 * C4247) *
                C139346) *
               C139600) *
              C139289 * C92 -
          (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
           ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
              C139289 * C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C92451 +
           ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139600) *
              C139289 * C94 -
          (((C13796 * C8222 + C139598 * C8534 + C13795 * C1793 +
             C13593 * C2065) *
                C139346 +
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C181) *
               C139600 +
           ((C13917 + C13916) * C139346 + (C13830 + C13831) * C181) * C92451) *
              C139289 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C92451 +
            ((C110550 + C110551) * C181 + (C110656 + C110657) * C139346) *
                C139600) *
               C139289 * C139562 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
               C139289 * C139308) *
              C4653 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C92451 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) *
                C139600) *
               C139289 * C139308 -
           (((C114064 + C114065) * C139346 + (C113960 + C113961) * C181) *
                C139600 +
            ((C110657 + C110656) * C139346 + (C110551 + C110550) * C181) *
                C92451) *
               C139289 * C139562) *
              C4654 +
          ((((C113961 + C113960) * C181 + (C114065 + C114064) * C139346) *
                C92451 +
            ((C13795 * C6165 + C13593 * C6343 + C13796 * C20831 +
              C139598 * C21045) *
                 C181 +
             (C13795 * C6227 + C13593 * C6399 + C13796 * C20905 +
              C139598 * C21115) *
                 C139346) *
                C139600) *
               C139289 * C139562 -
           (((C13796 * C20904 + C139598 * C21114 + C13795 * C6226 +
              C13593 * C6398) *
                 C139346 +
             (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
              C13593 * C6342) *
                 C181) *
                C139600 +
            ((C19386 + C19385) * C139346 + (C19279 + C19280) * C181) * C92451) *
               C139289 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C92451 +
            ((C110550 + C110551) * C244 + (C110761 + C110760) * C139372) *
                C139600) *
               C139289 * C2565 -
           (((C13796 * C4080 + C139598 * C4330 + C13795 * C4075 +
              C13593 * C4327) *
                 C139372 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C244) *
                C139600 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C92451) *
               C139289 * C2566 +
           (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C92451 +
            ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
              C139598 * C18317) *
                 C244 +
             (C13795 * C4080 + C13593 * C4330 + C13796 * C18203 +
              C139598 * C18518) *
                 C139372) *
                C139600) *
               C139289 * C2567) *
              C139562 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C92451 +
            ((C23750 + C23749) * C244 + (C24023 + C24024) * C139372) *
                C139600) *
               C139289 * C2566 -
           (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
               C139289 * C2565 -
           (((C13796 * C18202 + C139598 * C18519 + C13795 * C4079 +
              C13593 * C4331) *
                 C139372 +
             (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
              C13593 * C4165) *
                 C244) *
                C139600 +
            ((C16838 + C16837) * C139372 + (C16627 + C16628) * C244) * C92451) *
               C139289 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C244 +
            (C13795 * C1879 + C13593 * C2159 + C13796 * C4075 +
             C139598 * C4327) *
                C139372) *
               C139600) *
              C139289 * C139346 * C92 -
          (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
           ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
              C139289 * C139346 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C92451 +
           ((C15658 + C15657) * C244 + (C15879 + C15880) * C139372) * C139600) *
              C139289 * C139346 * C94 -
          (((C13796 * C8322 + C139598 * C8647 + C13795 * C1880 +
             C13593 * C2162) *
                C139372 +
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C244) *
               C139600 +
           ((C14001 + C14000) * C139372 + (C13830 + C13831) * C244) * C92451) *
              C139289 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C4828 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C4653 -
            (C110551 + C110550) * C4829 - (C110760 + C110761) * C4654 +
            (C113961 + C113960) * C4830 + (C114168 + C114169) * C4655) *
               C92451 +
           ((C110550 + C110551) * C4828 + (C110761 + C110760) * C4653 -
            (C113960 + C113961) * C4829 - (C114169 + C114168) * C4654 +
            (C13795 * C6165 + C13593 * C6343 + C13796 * C20831 +
             C139598 * C21045) *
                C4830 +
            (C13795 * C6287 + C13593 * C6450 + C13796 * C20975 +
             C139598 * C21182) *
                C4655) *
               C139600) *
              C139289 * C139346 * C139562 +
          (((C15653 + C15654) * C4829 -
            ((C13997 + C13996) * C4653 + (C13822 + C13823) * C4828) +
            (C15878 + C15877) * C4654 - (C19279 + C19280) * C4830 -
            (C19490 + C19489) * C4655) *
               C92451 +
           ((C19280 + C19279) * C4829 -
            ((C15877 + C15878) * C4653 + (C15654 + C15653) * C4828) +
            (C19489 + C19490) * C4654 -
            (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
             C13593 * C6342) *
                C4830 -
            (C13796 * C20974 + C139598 * C21183 + C13795 * C6286 +
             C13593 * C6451) *
                C4655) *
               C139600) *
              C139289 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139562 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
               C139289 * C13593 +
           ((C109938 + C109939) * C137108 + (C109940 + C109941) * C139562 -
            (C93759 + C93758) * C137101 - (C93761 + C93760) * C139308) *
               C139289 * C139598) *
              C139372 * C2565 +
          (((C93758 + C93759) * C137101 -
            ((C109941 + C109940) * C139562 + (C109939 + C109938) * C137108) +
            (C93760 + C93761) * C139308) *
               C139289 * C13593 +
           ((C95683 + C95682) * C137101 -
            ((C111750 + C111751) * C139562 + (C111752 + C111753) * C137108) +
            (C95685 + C95684) * C139308) *
               C139289 * C139598) *
              C139372 * C2566 +
          (((C111753 + C111752) * C137108 + (C111751 + C111750) * C139562 -
            (C95682 + C95683) * C137101 - (C95684 + C95685) * C139308) *
               C139289 * C13593 +
           ((C92849 * C3367 + C92451 * C3707 + C92850 * C17959 +
             C139600 * C18619) *
                C137108 +
            (C92849 * C3370 + C92451 * C3710 + C92850 * C17961 +
             C139600 * C18621) *
                C139562 -
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C137101 -
            (C92850 * C17960 + C139600 * C18620 + C92849 * C3369 +
             C92451 * C3709) *
                C139308) *
               C139289 * C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C139289 * C13593 +
          ((C92849 * C832 + C92451 * C1396 + C92850 * C3891 + C139600 * C4407) *
               C103 +
           (C92849 * C839 + C92451 * C1400 + C92850 * C3900 + C139600 * C4413) *
               C92 -
           (C93759 + C93758) * C104 - (C93761 + C93760) * C93 +
           (C93763 + C93762) * C105 + (C93765 + C93764) * C94 -
           (C92850 * C8120 + C139600 * C8760 + C92849 * C831 + C92451 * C1398) *
               C106 -
           (C92850 * C8122 + C139600 * C8761 + C92849 * C841 + C92451 * C1403) *
               C95) *
              C139289 * C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139562 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
               C139289 * C13593 +
           ((C109938 + C109939) * C137108 + (C109940 + C109941) * C139562 -
            (C93759 + C93758) * C137101 - (C93761 + C93760) * C139308) *
               C139289 * C139598) *
              C4653 +
          (((C94760 + C94761) * C137101 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139562 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C137108) +
            (C94762 + C94763) * C139308) *
               C139289 * C13593 +
           ((C102507 + C102506) * C137101 -
            ((C113330 + C113331) * C139562 + (C113332 + C113333) * C137108) +
            (C102509 + C102508) * C139308) *
               C139289 * C139598) *
              C4654 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C137108 +
            (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
             C139600 * C6508) *
                C139562 -
            (C98112 + C98113) * C137101 - (C98114 + C98115) * C139308) *
               C139289 * C13593 +
           ((C92849 * C5471 + C92451 * C5951 + C92850 * C20831 +
             C139600 * C21251) *
                C137108 +
            (C92849 * C5474 + C92451 * C5954 + C92850 * C20833 +
             C139600 * C21253) *
                C139562 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C137101 -
            (C92850 * C20832 + C139600 * C21252 + C92849 * C5473 +
             C92451 * C5953) *
                C139308) *
               C139289 * C139598) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[111] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C109939 + C109938) * C2661 - (C110044 + C110045) * C2566 +
            (C111753 + C111752) * C2662 + (C111856 + C111857) * C2567) *
               C139289 * C13593 +
           ((C109938 + C109939) * C2660 + (C110045 + C110044) * C2565 -
            (C111752 + C111753) * C2661 - (C111857 + C111856) * C2566 +
            (C92849 * C3367 + C92451 * C3707 + C92850 * C17959 +
             C139600 * C18619) *
                C2662 +
            (C92849 * C3433 + C92451 * C3761 + C92850 * C18089 +
             C139600 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139562 +
          (((C93758 + C93759) * C2661 -
            ((C92967 + C92966) * C2565 + (C92876 + C92877) * C2660) +
            (C93873 + C93872) * C2566 - (C95682 + C95683) * C2662 -
            (C95789 + C95788) * C2567) *
               C139289 * C13593 +
           ((C95683 + C95682) * C2661 -
            ((C93872 + C93873) * C2565 + (C93759 + C93758) * C2660) +
            (C95788 + C95789) * C2566 -
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C2662 -
            (C92850 * C18088 + C139600 * C18747 + C92849 * C3432 +
             C92451 * C3762) *
                C2567) *
               C139289 * C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139346) *
               C139289 * C13593 +
           ((C92849 * C832 + C92451 * C1396 + C92850 * C3891 +
             C139600 * C4407) *
                C181 +
            (C92849 * C927 + C92451 * C1497 + C92850 * C3989 +
             C139600 * C4493) *
                C139346) *
               C139289 * C139598) *
              C92 -
          (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
               C139598 +
           ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
               C13593) *
              C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C139289 *
               C13593 +
           ((C93763 + C93762) * C181 + (C93874 + C93875) * C139346) * C139289 *
               C139598) *
              C94 -
          (((C92850 * C8222 + C139600 * C8872 + C92849 * C928 +
             C92451 * C1500) *
                C139346 +
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C181) *
               C139289 * C139598 +
           ((C92971 + C92970) * C139346 + (C92884 + C92885) * C181) * C139289 *
               C13593) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C13593 +
            ((C109938 + C109939) * C181 + (C110045 + C110044) * C139346) *
                C139289 * C139598) *
               C139562 -
           (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
                C139598 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
                C13593) *
               C139308) *
              C4653 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C139289 *
                C13593 +
            ((C102507 + C102506) * C181 + (C102644 + C102645) * C139346) *
                C139289 * C139598) *
               C139308 -
           (((C113445 + C113444) * C139346 + (C113332 + C113333) * C181) *
                C139289 * C139598 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C139289 * C13593) *
               C139562) *
              C4654 +
          ((((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C139289 * C13593 +
            ((C92849 * C5471 + C92451 * C5951 + C92850 * C20831 +
              C139600 * C21251) *
                 C181 +
             (C92849 * C5557 + C92451 * C6029 + C92850 * C20905 +
              C139600 * C21321) *
                 C139346) *
                C139289 * C139598) *
               C139562 -
           (((C92850 * C20904 + C139600 * C21320 + C92849 * C5556 +
              C92451 * C6030) *
                 C139346 +
             (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
              C92451 * C5950) *
                 C181) *
                C139289 * C139598 +
            ((C98219 + C98218) * C139346 + (C98112 + C98113) * C181) * C139289 *
                C13593) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[111] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C13593 +
            ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
                C139289 * C139598) *
               C2565 -
           (((C111960 + C111961) * C139372 + (C111752 + C111753) * C244) *
                C139289 * C139598 +
            ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
                C139289 * C13593) *
               C2566 +
           (((C111753 + C111752) * C244 + (C111961 + C111960) * C139372) *
                C139289 * C13593 +
            ((C92849 * C3367 + C92451 * C3707 + C92850 * C17959 +
              C139600 * C18619) *
                 C244 +
             (C92849 * C3489 + C92451 * C3816 + C92850 * C18203 +
              C139600 * C18855) *
                 C139372) *
                C139289 * C139598) *
               C2567) *
              C139562 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C139289 *
                C13593 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139289 *
                C139598) *
               C2566 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
                C139598 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
                C13593) *
               C2565 -
           (((C92850 * C18202 + C139600 * C18856 + C92849 * C3488 +
              C92451 * C3815) *
                 C139372 +
             (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
              C92451 * C3706) *
                 C244) *
                C139289 * C139598 +
            ((C95893 + C95892) * C139372 + (C95682 + C95683) * C244) * C139289 *
                C13593) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C13593 +
           ((C92849 * C832 + C92451 * C1396 + C92850 * C3891 +
             C139600 * C4407) *
                C244 +
            (C92849 * C1011 + C92451 * C1602 + C92850 * C4075 +
             C139600 * C4573) *
                C139372) *
               C139289 * C139598) *
              C139346 * C92 -
          (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
               C139598 +
           ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
               C13593) *
              C139346 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C139289 *
               C13593 +
           ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) * C139289 *
               C139598) *
              C139346 * C94 -
          (((C92850 * C8322 + C139600 * C8985 + C92849 * C1012 +
             C92451 * C1603) *
                C139372 +
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C244) *
               C139289 * C139598 +
           ((C93055 + C93054) * C139372 + (C92884 + C92885) * C244) * C139289 *
               C13593) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C4828 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C4653 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C4829 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C4654 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C4655) *
               C139289 * C13593 +
           ((C109938 + C109939) * C4828 + (C110148 + C110149) * C4653 -
            (C113332 + C113333) * C4829 - (C113554 + C113555) * C4654 +
            (C92849 * C5471 + C92451 * C5951 + C92850 * C20831 +
             C139600 * C21251) *
                C4830 +
            (C92849 * C5637 + C92451 * C6106 + C92850 * C20975 +
             C139600 * C21388) *
                C4655) *
               C139289 * C139598) *
              C139346 * C139562 +
          (((C94760 + C94761) * C4829 -
            ((C93051 + C93050) * C4653 + (C92876 + C92877) * C4828) +
            (C94985 + C94984) * C4654 - (C98112 + C98113) * C4830 -
            (C98323 + C98322) * C4655) *
               C139289 * C13593 +
           ((C102507 + C102506) * C4829 -
            ((C93982 + C93983) * C4653 + (C93759 + C93758) * C4828) +
            (C102780 + C102781) * C4654 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C4830 -
            (C92850 * C20974 + C139600 * C21389 + C92849 * C5636 +
             C92451 * C6107) *
                C4655) *
               C139289 * C139598) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[112] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C13593 +
            (C65996 + C65997) * C139598) *
               C92451 +
           ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
              C139372 * C3360 -
          ((C66557 * C139598 + C79996 * C13593) * C139600 +
           ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
               C92451) *
              C139372 * C3361 +
          ((C66006 * C13593 + (C66001 + C66000) * C139598) * C92451 +
           (C79997 * C13593 + (C66555 + C66556) * C139598) * C139600) *
              C139372 * C3362 -
          ((((C63381 * C66529 + C139289 * C66531) * C139303 +
             (C63381 * C66528 + C139289 * C66530) * C3364) *
                C139598 +
            (C66556 + C66555) * C13593) *
               C139600 +
           ((C66011 + C66010) * C139598 + C66007 * C13593) * C92451) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C92451 +
           ((C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C13593 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139372 * C139570 +
          (((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C13593 +
            (C63904 - (C63903 + C63902) + C63905 - C63906 - C63907) * C139598) *
               C92451 +
           ((C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C13593 +
            (C70578 * C827 - (C66545 * C821 + C66546 * C826) + C70579 * C822 -
             (C63381 * C3894 + C139289 * C3906) * C828 -
             (C63381 * C3903 + C139289 * C3912) * C823) *
                C139598) *
               C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C13593 +
             (C65996 + C65997) * C139598) *
                C92451 +
            ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
               C4653 -
           ((C81958 * C139598 + (C81959 + C81960) * C13593) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C13593) * C92451) *
               C4654 +
           (((C81960 + C81959) * C13593 + C81961 * C139598) * C92451 +
            ((C82906 + C82907) * C13593 + (C81968 + C81969) * C139598) *
                C139600) *
               C4655) *
              C139570 +
          (((C79995 * C13593 + C79997 * C139598) * C92451 +
            (C81961 * C13593 + (C67977 + C67978) * C139598) * C139600) *
               C4654 -
           ((C66557 * C139598 + C79996 * C13593) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
                C92451) *
               C4653 -
           ((((C63381 * C68677 + C139289 * C68679) * C139303 +
              (C63381 * C68676 + C139289 * C68678) * C3364) *
                 C139598 +
             (C81969 + C81968) * C13593) *
                C139600 +
            ((C67978 + C67977) * C139598 + C81958 * C13593) * C92451) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3427 +
            (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
            C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
            C65399 * C3363) *
               C13593 +
           (C63884 * C3427 + C63994 * C3360 - C63890 * C3428 - C63995 * C3361 +
            C65313 * C3429 + C65399 * C3362 - C66008 * C3430 - C66066 * C3363) *
               C139598) *
              C92451 +
          ((C77515 * C3427 + C77640 * C3360 - C66548 * C3428 - C66640 * C3361 +
            C66546 * C3429 + C66641 * C3362 - C66549 * C3430 - C66642 * C3363) *
               C13593 +
           (C66548 * C3427 + C66640 * C3360 - C66546 * C3428 - C66641 * C3361 +
            C66549 * C3429 + C66642 * C3362 -
            (C63381 * C66528 + C139289 * C66530) * C3430 -
            (C63381 * C66631 + C139289 * C66632) * C3363) *
               C139598) *
              C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C13593 +
            (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
             C63995 * C139360) *
                C139598) *
               C92451 +
           ((C82068 + C82069 - C82070 - C82071) * C13593 +
            (C82072 + C82073 - C82074 - C82075) * C139598) *
               C139600) *
              C821 +
          (((C63886 * C924 -
             ((C63381 * C183 + C139289 * C189) * C139570 +
              (C63381 * C108 + C139289 * C114) * C923) +
             C63996 * C139360) *
                C13593 +
            (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
             C63997 * C139360) *
                C139598) *
               C92451 +
           ((C87604 - (C87605 + C87606) + C87607) * C13593 +
            (C87608 - (C87609 + C87610) + C87611) * C139598) *
               C139600) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C923 +
             (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
             C63998 * C139360) *
                C13593 +
            (C63888 * C923 + C63998 * C139570 - C63894 * C924 -
             C63999 * C139360) *
                C139598) *
               C92451 +
           ((C77519 * C923 + C77642 * C139570 - C76581 * C924 -
             C76685 * C139360) *
                C13593 +
            (C76581 * C923 + C76685 * C139570 -
             (C63381 * C3894 + C139289 * C3906) * C924 -
             (C63381 * C3992 + C139289 * C3998) * C139360) *
                C139598) *
               C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C13593 +
            (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
             C63995 * C139360) *
                C139598) *
               C92451 +
           ((C82068 + C82069 - C82070 - C82071) * C13593 +
            (C82072 + C82073 - C82074 - C82075) * C139598) *
               C139600) *
              C139303 * C4653 +
          (((C82070 - (C82069 + C82068) + C82071) * C13593 +
            (C82074 - (C82073 + C82072) + C82075) * C139598) *
               C92451 +
           ((C82076 - (C82077 + C82078) + C82079) * C13593 +
            (C82080 - (C82081 + C82082) + C82083) * C139598) *
               C139600) *
              C139303 * C4654 +
          (((C82078 + C82077 - C82076 - C82079) * C13593 +
            (C82082 + C82081 - C82080 - C82083) * C139598) *
               C92451 +
           ((C82904 * C923 + C82981 * C139570 - C81966 * C924 -
             C82086 * C139360) *
                C13593 +
            (C81966 * C923 + C82086 * C139570 -
             (C63381 * C68676 + C139289 * C68678) * C924 -
             (C63381 * C68730 + C139289 * C68731) * C139360) *
                C139598) *
               C139600) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[112] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C13593 +
            (C64074 + C64098) * C139598) *
               C92451 +
           ((C77515 * C244 + C77750 * C139372) * C13593 +
            (C76784 + C76785) * C139598) *
               C139600) *
              C3360 -
          (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
               C139600 +
           ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
               C92451) *
              C3361 +
          ((C65475 * C13593 + (C65478 + C65485) * C139598) * C92451 +
           ((C78660 + C78659) * C13593 + (C79473 + C79474) * C139598) *
               C139600) *
              C3362 -
          ((((C63381 * C66716 + C139289 * C66717) * C139372 +
             (C63381 * C66528 + C139289 * C66530) * C244) *
                C139598 +
            (C79474 + C79473) * C13593) *
               C139600 +
           ((C66124 + C66120) * C139598 + C66119 * C13593) * C92451) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C13593 +
             (C64074 + C64098) * C139598) *
                C92451 +
            ((C77515 * C244 + C77750 * C139372) * C13593 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C139570 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
                C92451) *
               C139360) *
              C821 +
          ((((C64080 + C64100) * C13593 + (C64083 + C64101) * C139598) *
                C92451 +
            ((C76786 + C76787) * C13593 + (C78661 + C78662) * C139598) *
                C139600) *
               C139360 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C13593) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C13593) *
                C92451) *
               C139570) *
              C822 +
          (((((C63381 * C109 + C139289 * C115) * C244 +
              (C63381 * C247 + C139289 * C253) * C139372) *
                 C13593 +
             (C64086 + C64102) * C139598) *
                C92451 +
            ((C77519 * C244 + C77752 * C139372) * C13593 +
             (C76788 + C76792) * C139598) *
                C139600) *
               C139570 -
           ((((C63381 * C4078 + C139289 * C4084) * C139372 +
              (C63381 * C3894 + C139289 * C3906) * C244) *
                 C139598 +
             (C76792 + C76788) * C13593) *
                C139600 +
            ((C64103 + C64089) * C139598 + (C64102 + C64086) * C13593) *
                C92451) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C4828 +
             (C63381 * C245 + C139289 * C251) * C4653 - C77515 * C4829 -
             C77750 * C4654 + C81016 * C4830 + C81245 * C4655) *
                C13593 +
            (C68137 + C68138 - C68139 - C68140 + C68141 + C68153) * C139598) *
               C92451 +
           ((C77515 * C4828 + C77750 * C4653 - C81016 * C4829 - C81245 * C4654 +
             C82904 * C4830 + C83053 * C4655) *
                C13593 +
            (C82185 + C82186 - C82187 - C82188 + C82189 + C82193) * C139598) *
               C139600) *
              C139570 +
          (((C68139 - (C68138 + C68137) + C68140 - C68141 - C68153) * C13593 +
            (C68146 - (C68145 + C68144) + C68147 - C68148 - C68154) * C139598) *
               C92451 +
           ((C82187 - (C82186 + C82185) + C82188 - C82189 - C82193) * C13593 +
            (C67973 * C4829 - (C66736 * C4653 + C66546 * C4828) +
             C68152 * C4654 - (C63381 * C68676 + C139289 * C68678) * C4830 -
             (C63381 * C68782 + C139289 * C68783) * C4655) *
                C139598) *
               C139600) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C3364 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139303) *
               C92451 +
           ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
               C139600) *
              C139289 * C139372 * C3360 -
          (((C13796 * C3905 + C139598 * C4172 + C13795 * C3900 +
             C13593 * C4167) *
                C139303 +
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C3364) *
               C139600 +
           ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
             C13593 * C1098) *
                C139303 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C3364) *
               C92451) *
              C139289 * C139372 * C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139303) *
               C92451 +
           ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C3364 +
            (C13795 * C3905 + C13593 * C4172 + C13796 * C17961 +
             C139598 * C18319) *
                C139303) *
               C139600) *
              C139289 * C139372 * C3362 -
          (((C13796 * C66529 + C139598 * C66817 + C13795 * C17961 +
             C13593 * C18319) *
                C139303 +
            (C13796 * C66528 + C139598 * C66816 + C13795 * C17959 +
             C13593 * C18317) *
                C3364) *
               C139600 +
           ((C13796 * C17253 + C139598 * C17491 + C13795 * C3370 +
             C13593 * C3548) *
                C139303 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C3364) *
               C92451) *
              C139289 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C826 +
            (C13795 * C1707 + C13593 * C1966 + C13796 * C3900 +
             C139598 * C4167) *
                C821 -
            (C15654 + C15653) * C827 - (C15656 + C15655) * C822 +
            (C15658 + C15657) * C828 + (C15660 + C15659) * C823) *
               C139600) *
              C139289 * C139372 * C139570 +
          (((C14686 + C14687) * C827 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C821 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C826) +
            (C14688 + C14689) * C822 - (C14690 + C14691) * C828 -
            (C14692 + C14693) * C823) *
               C92451 +
           ((C23750 + C23749) * C827 -
            ((C13796 * C3905 + C139598 * C4172 + C13795 * C3900 +
              C13593 * C4167) *
                 C821 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C826) +
            (C23752 + C23751) * C822 -
            (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
             C13593 * C4163) *
                C828 -
            (C13796 * C3903 + C139598 * C4170 + C13795 * C3902 +
             C13593 * C4169) *
                C823) *
               C139600) *
              C139289 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C92451 +
            ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
                C139600) *
               C139289 * C4653 -
           (((C113958 + C113959) * C139303 + (C113960 + C113961) * C3364) *
                C139600 +
            ((C110553 + C110552) * C139303 + (C110551 + C110550) * C3364) *
                C92451) *
               C139289 * C4654 +
           (((C113961 + C113960) * C3364 + (C113959 + C113958) * C139303) *
                C92451 +
            ((C13795 * C6165 + C13593 * C6343 + C13796 * C20831 +
              C139598 * C21045) *
                 C3364 +
             (C13795 * C6168 + C13593 * C6346 + C13796 * C20833 +
              C139598 * C21047) *
                 C139303) *
                C139600) *
               C139289 * C4655) *
              C139570 +
          ((((C112988 + C112989) * C3364 + (C112990 + C112991) * C139303) *
                C92451 +
            ((C114864 + C114865) * C3364 + (C114866 + C114867) * C139303) *
                C139600) *
               C139289 * C4654 -
           (((C112991 + C112990) * C139303 + (C112989 + C112988) * C3364) *
                C139600 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C92451) *
               C139289 * C4653 -
           (((C13796 * C68677 + C139598 * C68835 + C13795 * C20833 +
              C13593 * C21047) *
                 C139303 +
             (C13796 * C68676 + C139598 * C68834 + C13795 * C20831 +
              C13593 * C21045) *
                 C3364) *
                C139600 +
            ((C114867 + C114866) * C139303 + (C114865 + C114864) * C3364) *
                C92451) *
               C139289 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C3427 +
           (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
               C3360 -
           (C13796 * C2570 + C139598 * C2827 + C13795 * C832 + C13593 * C1094) *
               C3428 -
           (C13796 * C2663 + C139598 * C2921 + C13795 * C927 + C13593 * C1195) *
               C3361 +
           (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
            C13593 * C3545) *
               C3430 -
           (C13796 * C17337 + C139598 * C17558 + C13795 * C3433 +
            C13593 * C3599) *
               C3363) *
              C92451 +
          ((C110550 + C110551) * C3427 + (C110656 + C110657) * C3360 -
           (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
            C13593 * C4161) *
               C3428 -
           (C13796 * C3994 + C139598 * C4248 + C13795 * C3989 +
            C13593 * C4247) *
               C3361 +
           (C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
            C139598 * C18317) *
               C3429 +
           (C13795 * C3994 + C13593 * C4248 + C13796 * C18089 +
            C139598 * C18418) *
               C3362 -
           (C13796 * C66528 + C139598 * C66816 + C13795 * C17959 +
            C13593 * C18317) *
               C3430 -
           (C13796 * C66631 + C139598 * C66892 + C13795 * C18089 +
            C13593 * C18418) *
               C3363) *
              C139600) *
         C139289 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C923 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139570 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C924 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C923 +
            (C13795 * C1794 + C13593 * C2066 + C13796 * C3989 +
             C139598 * C4247) *
                C139570 -
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C924 -
            (C13796 * C3994 + C139598 * C4248 + C13795 * C3989 +
             C13593 * C4247) *
                C139360) *
               C139600) *
              C139289 * C821 +
          (((C14686 + C14687) * C924 -
            ((C13913 + C13912) * C139570 + (C13822 + C13823) * C923) +
            (C14801 + C14800) * C139360) *
               C92451 +
           ((C23750 + C23749) * C924 -
            ((C15768 + C15767) * C139570 + (C15654 + C15653) * C923) +
            (C23887 + C23888) * C139360) *
               C139600) *
              C139289 * C822 +
          (((C13826 + C13827) * C923 + (C13915 + C13914) * C139570 -
            (C14690 + C14691) * C924 - (C14803 + C14802) * C139360) *
               C92451 +
           ((C15658 + C15657) * C923 + (C15769 + C15770) * C139570 -
            (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
             C13593 * C4163) *
                C924 -
            (C13796 * C3992 + C139598 * C4252 + C13795 * C3991 +
             C13593 * C4251) *
                C139360) *
               C139600) *
              C139289 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C923 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139570 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C924 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C92451 +
           ((C110550 + C110551) * C923 + (C110656 + C110657) * C139570 -
            (C112989 + C112988) * C924 - (C113102 + C113103) * C139360) *
               C139600) *
              C139289 * C139303 * C4653 +
          (((C112988 + C112989) * C924 -
            ((C110657 + C110656) * C139570 + (C110551 + C110550) * C923) +
            (C113103 + C113102) * C139360) *
               C92451 +
           ((C114864 + C114865) * C924 -
            ((C114064 + C114065) * C139570 + (C113960 + C113961) * C923) +
            (C114970 + C114971) * C139360) *
               C139600) *
              C139289 * C139303 * C4654 +
          (((C113961 + C113960) * C923 + (C114065 + C114064) * C139570 -
            (C114865 + C114864) * C924 - (C114971 + C114970) * C139360) *
               C92451 +
           ((C13795 * C6165 + C13593 * C6343 + C13796 * C20831 +
             C139598 * C21045) *
                C923 +
            (C13795 * C6227 + C13593 * C6399 + C13796 * C20905 +
             C139598 * C21115) *
                C139570 -
            (C13796 * C68676 + C139598 * C68834 + C13795 * C20831 +
             C13593 * C21045) *
                C924 -
            (C13796 * C68730 + C139598 * C68886 + C13795 * C20905 +
             C13593 * C21115) *
                C139360) *
               C139600) *
              C139289 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C92451 +
           ((C110550 + C110551) * C244 + (C110761 + C110760) * C139372) *
               C139600) *
              C139289 * C3360 -
          (((C13796 * C4080 + C139598 * C4330 + C13795 * C4075 +
             C13593 * C4327) *
                C139372 +
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C244) *
               C139600 +
           ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
             C13593 * C1301) *
                C139372 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C244) *
               C92451) *
              C139289 * C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C244 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139372) *
               C92451 +
           ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C244 +
            (C13795 * C4080 + C13593 * C4330 + C13796 * C18203 +
             C139598 * C18518) *
                C139372) *
               C139600) *
              C139289 * C3362 -
          (((C13796 * C66716 + C139598 * C66967 + C13795 * C18203 +
             C13593 * C18518) *
                C139372 +
            (C13796 * C66528 + C139598 * C66816 + C13795 * C17959 +
             C13593 * C18317) *
                C244) *
               C139600 +
           ((C13796 * C17413 + C139598 * C17627 + C13795 * C3489 +
             C13593 * C3654) *
                C139372 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C244) *
               C92451) *
              C139289 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C92451 +
            ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
              C139598 * C4161) *
                 C244 +
             (C13795 * C1879 + C13593 * C2159 + C13796 * C4075 +
              C139598 * C4327) *
                 C139372) *
                C139600) *
               C139289 * C139570 -
           (((C13796 * C4080 + C139598 * C4330 + C13795 * C4075 +
              C13593 * C4327) *
                 C139372 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C244) *
                C139600 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C92451) *
               C139289 * C139360) *
              C821 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C92451 +
            ((C23750 + C23749) * C244 + (C24023 + C24024) * C139372) *
                C139600) *
               C139289 * C139360 -
           (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
               C139289 * C139570) *
              C822 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C92451 +
            ((C15658 + C15657) * C244 + (C15879 + C15880) * C139372) *
                C139600) *
               C139289 * C139570 -
           (((C13796 * C4078 + C139598 * C4332 + C13795 * C4077 +
              C13593 * C4329) *
                 C139372 +
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C244) *
                C139600 +
            ((C14913 + C14912) * C139372 + (C14690 + C14691) * C244) * C92451) *
               C139289 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C4828 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C4653 -
            (C110551 + C110550) * C4829 - (C110760 + C110761) * C4654 +
            (C113961 + C113960) * C4830 + (C114168 + C114169) * C4655) *
               C92451 +
           ((C110550 + C110551) * C4828 + (C110761 + C110760) * C4653 -
            (C113960 + C113961) * C4829 - (C114169 + C114168) * C4654 +
            (C13795 * C6165 + C13593 * C6343 + C13796 * C20831 +
             C139598 * C21045) *
                C4830 +
            (C13795 * C6287 + C13593 * C6450 + C13796 * C20975 +
             C139598 * C21182) *
                C4655) *
               C139600) *
              C139289 * C139570 +
          (((C112988 + C112989) * C4829 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C4653 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C4828) +
            (C113212 + C113213) * C4654 - (C114865 + C114864) * C4830 -
            (C115074 + C115075) * C4655) *
               C92451 +
           ((C114864 + C114865) * C4829 -
            ((C113213 + C113212) * C4653 + (C112989 + C112988) * C4828) +
            (C115075 + C115074) * C4654 -
            (C13796 * C68676 + C139598 * C68834 + C13795 * C20831 +
             C13593 * C21045) *
                C4830 -
            (C13796 * C68782 + C139598 * C68937 + C13795 * C20975 +
             C13593 * C21182) *
                C4655) *
               C139600) *
              C139289 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C3364 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139303) *
               C139289 * C13593 +
           ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
               C139289 * C139598) *
              C139372 * C3360 -
          (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
               C139289 * C139598 +
           ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
               C139289 * C13593) *
              C139372 * C3361 +
          (((C111753 + C111752) * C3364 + (C111751 + C111750) * C139303) *
               C139289 * C13593 +
           ((C112432 + C112433) * C3364 + (C112434 + C112435) * C139303) *
               C139289 * C139598) *
              C139372 * C3362 -
          (((C92850 * C66529 + C139600 * C67043 + C92849 * C17253 +
             C92451 * C17697) *
                C139303 +
            (C92850 * C66528 + C139600 * C67042 + C92849 * C17251 +
             C92451 * C17695) *
                C3364) *
               C139289 * C139598 +
           ((C112435 + C112434) * C139303 + (C112433 + C112432) * C3364) *
               C139289 * C13593) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C139289 * C13593 +
           ((C109938 + C109939) * C826 + (C109940 + C109941) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C822 +
            (C93763 + C93762) * C828 + (C93765 + C93764) * C823) *
               C139289 * C139598) *
              C139372 * C139570 +
          (((C93758 + C93759) * C827 -
            ((C109941 + C109940) * C821 + (C109939 + C109938) * C826) +
            (C93760 + C93761) * C822 - (C93762 + C93763) * C828 -
            (C93764 + C93765) * C823) *
               C139289 * C13593 +
           ((C95683 + C95682) * C827 -
            ((C92850 * C3905 + C139600 * C4418 + C92849 * C2577 +
              C92451 * C3109) *
                 C821 +
             (C92850 * C3896 + C139600 * C4412 + C92849 * C2570 +
              C92451 * C3105) *
                 C826) +
            (C95685 + C95684) * C822 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C828 -
            (C92850 * C3903 + C139600 * C4416 + C92849 * C2579 +
             C92451 * C3111) *
                C823) *
               C139289 * C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C13593 +
            ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
                C139289 * C139598) *
               C4653 -
           (((C113330 + C113331) * C139303 + (C113332 + C113333) * C3364) *
                C139289 * C139598 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C139289 * C13593) *
               C4654 +
           (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C3364 +
             (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
              C139600 * C6508) *
                 C139303) *
                C139289 * C13593 +
            ((C115182 + C115183) * C3364 + (C115184 + C115185) * C139303) *
                C139289 * C139598) *
               C4655) *
              C139570 +
          ((((C113333 + C113332) * C3364 + (C113331 + C113330) * C139303) *
                C139289 * C13593 +
            ((C113334 + C113335) * C3364 + (C113336 + C113337) * C139303) *
                C139289 * C139598) *
               C4654 -
           (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
                C139289 * C139598 +
            ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
                C139289 * C13593) *
               C4653 -
           (((C92850 * C68677 + C139600 * C68989 + C92849 * C19905 +
              C92451 * C20541) *
                 C139303 +
             (C92850 * C68676 + C139600 * C68988 + C92849 * C19903 +
              C92451 * C20539) *
                 C3364) *
                C139289 * C139598 +
            ((C115185 + C115184) * C139303 + (C115183 + C115182) * C3364) *
                C139289 * C13593) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eezy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C3427 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
               C3360 -
           (C109939 + C109938) * C3428 - (C110044 + C110045) * C3361 +
           (C111753 + C111752) * C3429 + (C111856 + C111857) * C3362 -
           (C112433 + C112432) * C3430 - (C112506 + C112507) * C3363) *
              C139289 * C13593 +
          ((C109938 + C109939) * C3427 + (C110045 + C110044) * C3360 -
           (C111752 + C111753) * C3428 - (C111857 + C111856) * C3361 +
           (C112432 + C112433) * C3429 + (C112507 + C112506) * C3362 -
           (C92850 * C66528 + C139600 * C67042 + C92849 * C17251 +
            C92451 * C17695) *
               C3430 -
           (C92850 * C66631 + C139600 * C67128 + C92849 * C17337 +
            C92451 * C17782) *
               C3363) *
              C139289 * C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C923 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139570 -
            (C109939 + C109938) * C924 - (C110044 + C110045) * C139360) *
               C139289 * C13593 +
           ((C109938 + C109939) * C923 + (C110045 + C110044) * C139570 -
            (C92850 * C3896 + C139600 * C4412 + C92849 * C2570 +
             C92451 * C3105) *
                C924 -
            (C92850 * C3994 + C139600 * C4494 + C92849 * C2663 +
             C92451 * C3199) *
                C139360) *
               C139289 * C139598) *
              C821 +
          (((C93758 + C93759) * C924 -
            ((C92967 + C92966) * C139570 + (C92876 + C92877) * C923) +
            (C93873 + C93872) * C139360) *
               C139289 * C13593 +
           ((C95683 + C95682) * C924 -
            ((C93872 + C93873) * C139570 + (C93759 + C93758) * C923) +
            (C95788 + C95789) * C139360) *
               C139289 * C139598) *
              C822 +
          (((C92880 + C92881) * C923 + (C92969 + C92968) * C139570 -
            (C93762 + C93763) * C924 - (C93875 + C93874) * C139360) *
               C139289 * C13593 +
           ((C93763 + C93762) * C923 + (C93874 + C93875) * C139570 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C924 -
            (C92850 * C3992 + C139600 * C4498 + C92849 * C2665 +
             C92451 * C3201) *
                C139360) *
               C139289 * C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C923 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139570 -
            (C109939 + C109938) * C924 - (C110044 + C110045) * C139360) *
               C139289 * C13593 +
           ((C109938 + C109939) * C923 + (C110045 + C110044) * C139570 -
            (C111752 + C111753) * C924 - (C111857 + C111856) * C139360) *
               C139289 * C139598) *
              C139303 * C4653 +
          (((C113333 + C113332) * C924 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139570 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C923) +
            (C113444 + C113445) * C139360) *
               C139289 * C13593 +
           ((C113334 + C113335) * C924 -
            ((C113445 + C113444) * C139570 + (C113332 + C113333) * C923) +
            (C113447 + C113446) * C139360) *
               C139289 * C139598) *
              C139303 * C4654 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C923 +
            (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
             C139600 * C6561) *
                C139570 -
            (C115183 + C115182) * C924 - (C115288 + C115289) * C139360) *
               C139289 * C13593 +
           ((C115182 + C115183) * C923 + (C115289 + C115288) * C139570 -
            (C92850 * C68676 + C139600 * C68988 + C92849 * C19903 +
             C92451 * C20539) *
                C924 -
            (C92850 * C68730 + C139600 * C69040 + C92849 * C20021 +
             C92451 * C20650) *
                C139360) *
               C139289 * C139598) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C13593 +
           ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
               C139289 * C139598) *
              C3360 -
          (((C111960 + C111961) * C139372 + (C111752 + C111753) * C244) *
               C139289 * C139598 +
           ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
               C139289 * C13593) *
              C3361 +
          (((C111753 + C111752) * C244 + (C111961 + C111960) * C139372) *
               C139289 * C13593 +
           ((C112432 + C112433) * C244 + (C112578 + C112579) * C139372) *
               C139289 * C139598) *
              C3362 -
          (((C92850 * C66716 + C139600 * C67206 + C92849 * C17413 +
             C92451 * C17854) *
                C139372 +
            (C92850 * C66528 + C139600 * C67042 + C92849 * C17251 +
             C92451 * C17695) *
                C244) *
               C139289 * C139598 +
           ((C112579 + C112578) * C139372 + (C112433 + C112432) * C244) *
               C139289 * C13593) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C13593 +
            ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
                C139289 * C139598) *
               C139570 -
           (((C92850 * C4080 + C139600 * C4576 + C92849 * C2745 +
              C92451 * C3295) *
                 C139372 +
             (C92850 * C3896 + C139600 * C4412 + C92849 * C2570 +
              C92451 * C3105) *
                 C244) *
                C139289 * C139598 +
            ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
                C139289 * C13593) *
               C139360) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C139289 *
                C13593 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139289 *
                C139598) *
               C139360 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
                C139598 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
                C13593) *
               C139570) *
              C822 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C139289 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) * C139289 *
                C139598) *
               C139570 -
           (((C92850 * C4078 + C139600 * C4578 + C92849 * C2747 +
              C92451 * C3297) *
                 C139372 +
             (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
              C92451 * C3107) *
                 C244) *
                C139289 * C139598 +
            ((C93985 + C93984) * C139372 + (C93762 + C93763) * C244) * C139289 *
                C13593) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C4828 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C4653 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C4829 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C4654 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C4830 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C4655) *
               C139289 * C13593 +
           ((C109938 + C109939) * C4828 + (C110148 + C110149) * C4653 -
            (C113332 + C113333) * C4829 - (C113554 + C113555) * C4654 +
            (C115182 + C115183) * C4830 + (C115392 + C115393) * C4655) *
               C139289 * C139598) *
              C139570 +
          (((C113333 + C113332) * C4829 -
            ((C110149 + C110148) * C4653 + (C109939 + C109938) * C4828) +
            (C113555 + C113554) * C4654 - (C115183 + C115182) * C4830 -
            (C115393 + C115392) * C4655) *
               C139289 * C13593 +
           ((C113334 + C113335) * C4829 -
            ((C111960 + C111961) * C4653 + (C111752 + C111753) * C4828) +
            (C113556 + C113557) * C4654 -
            (C92850 * C68676 + C139600 * C68988 + C92849 * C19903 +
             C92451 * C20539) *
                C4830 -
            (C92850 * C68782 + C139600 * C69091 + C92849 * C20129 +
             C92451 * C20753) *
                C4655) *
               C139289 * C139598) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[113] +=
        (-std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C13593 +
             (C65996 + C65997) * C139598) *
                C92451 +
            ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
               C139571 -
           ((C81958 * C139598 + (C81959 + C81960) * C13593) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C13593) * C92451) *
               C139384) *
              C2565 +
          (((C79995 * C13593 + C79997 * C139598) * C92451 +
            (C81961 * C13593 + (C67977 + C67978) * C139598) * C139600) *
               C139384 -
           ((C66557 * C139598 + C79996 * C13593) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
                C92451) *
               C139571) *
              C2566 +
          (((C66006 * C13593 + (C66001 + C66000) * C139598) * C92451 +
            (C79997 * C13593 + (C66555 + C66556) * C139598) * C139600) *
               C139571 -
           ((((C63381 * C67959 + C139289 * C67961) * C139303 +
              (C63381 * C67958 + C139289 * C67960) * C3364) *
                 C139598 +
             (C67978 + C67977) * C13593) *
                C139600 +
            ((C66556 + C66555) * C139598 + C66557 * C13593) * C92451) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C92451 +
           ((C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C13593 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139571 +
          (((C77523 - (C77522 + C77521) + C77524 - C77525 - C77526) * C13593 +
            (C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C139598) *
               C92451 +
           ((C81014 * C827 - (C81015 * C821 + C81016 * C826) + C81017 * C822 -
             (C63381 * C4658 + C139289 * C4662) * C828 -
             (C63381 * C4665 + C139289 * C4670) * C823) *
                C13593 +
            (C81018 * C827 - (C67972 * C821 + C67971 * C826) + C81019 * C822 -
             (C63381 * C5469 + C139289 * C5475) * C828 -
             (C63381 * C5472 + C139289 * C5478) * C823) *
                C139598) *
               C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C13593 +
            (C65996 + C65997) * C139598) *
               C92451 +
           ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
              C6159 -
          ((C81958 * C139598 + (C81959 + C81960) * C13593) * C139600 +
           (C79996 * C139598 + (C79994 + C79993) * C13593) * C92451) *
              C6160 +
          (((C81960 + C81959) * C13593 + C81961 * C139598) * C92451 +
           ((C82906 + C82907) * C13593 + (C81968 + C81969) * C139598) *
               C139600) *
              C6161 -
          ((((C63381 * C82896 + C139289 * C82898) * C139303 +
             (C63381 * C82895 + C139289 * C82897) * C3364) *
                C139598 +
            ((C63381 * C37436 + C139289 * C37440) * C139303 +
             (C63381 * C37434 + C139289 * C37438) * C3364) *
                C13593) *
               C139600 +
           ((C81969 + C81968) * C139598 + (C82907 + C82906) * C13593) *
               C92451) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C13593 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C92451 +
           ((C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C13593 +
            (C80102 + C80103 - C80104 - C80105 + C80106 + C80107) * C139598) *
               C139600) *
              C139303 * C139571 +
          (((C80098 - (C80097 + C80096) + C80099 - C80100 - C80101) * C13593 +
            (C80104 - (C80103 + C80102) + C80105 - C80106 - C80107) * C139598) *
               C92451 +
           ((C67971 * C2661 - (C81137 * C2565 + C81016 * C2660) +
             C68059 * C2566 - C67973 * C2662 - C68060 * C2567) *
                C13593 +
            (C67973 * C2661 - (C68059 * C2565 + C67971 * C2660) +
             C68060 * C2566 - (C63381 * C67958 + C139289 * C67960) * C2662 -
             (C63381 * C68052 + C139289 * C68053) * C2567) *
                C139598) *
               C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C13593 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C92451 +
            ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
                C139600) *
               C821 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C13593) *
                C92451) *
               C822 +
           ((((C63381 * C109 + C139289 * C115) * C181 +
              (C63381 * C184 + C139289 * C190) * C139346) *
                 C13593 +
             (C63888 * C181 + C63998 * C139346) * C139598) *
                C92451 +
            ((C77635 + C77645) * C13593 + (C77638 + C77639) * C139598) *
                C139600) *
               C823) *
              C139571 +
          ((((C77634 + C77644) * C13593 + (C77631 + C77630) * C139598) *
                C92451 +
            ((C81124 + C81138) * C13593 + (C81127 + C81139) * C139598) *
                C139600) *
               C822 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C13593) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C13593) *
                C92451) *
               C821 -
           ((((C63381 * C5555 + C139289 * C5558) * C139346 +
              (C63381 * C5469 + C139289 * C5475) * C181) *
                 C139598 +
             ((C63381 * C4748 + C139289 * C4752) * C139346 +
              (C63381 * C4658 + C139289 * C4662) * C181) *
                 C13593) *
                C139600 +
            ((C77639 + C77638) * C139598 + (C77645 + C77635) * C13593) *
                C92451) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C13593 +
            (C63884 * C181 + C63994 * C139346) * C139598) *
               C92451 +
           ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
               C139600) *
              C139303 * C6159 -
          (((C81130 + C81131) * C139598 + (C81140 + C81134) * C13593) *
               C139600 +
           ((C77629 + C77628) * C139598 + (C77643 + C77625) * C13593) *
               C92451) *
              C139303 * C6160 +
          (((C81134 + C81140) * C13593 + (C81131 + C81130) * C139598) * C92451 +
           ((C82976 + C82982) * C13593 + (C82979 + C82980) * C139598) *
               C139600) *
              C139303 * C6161 -
          ((((C63381 * C82973 + C139289 * C82974) * C139346 +
             (C63381 * C82895 + C139289 * C82897) * C181) *
                C139598 +
            ((C63381 * C37520 + C139289 * C37522) * C139346 +
             (C63381 * C37434 + C139289 * C37438) * C181) *
                C13593) *
               C139600 +
           ((C82980 + C82979) * C139598 + (C82982 + C82976) * C13593) *
               C92451) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C13593 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C92451 +
           ((C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
             C81245 * C139384) *
                C13593 +
            (C80206 + C80207 - C80208 - C80209) * C139598) *
               C139600) *
              C2565 +
          (((C66721 - (C66720 + C66719) + C66738) * C13593 +
            (C66726 - (C66725 + C66724) + C66740) * C139598) *
               C92451 +
           ((C80208 - (C80207 + C80206) + C80209) * C13593 +
            (C80210 - (C80211 + C80212) + C80213) * C139598) *
               C139600) *
              C2566 +
          ((C66742 * C13593 + (C66731 + C66730 - C66729 - C66741) * C139598) *
               C92451 +
           ((C80212 + C80211 - C80210 - C80213) * C13593 +
            (C66549 * C1875 + C66737 * C139571 -
             (C63381 * C67958 + C139289 * C67960) * C1876 -
             (C63381 * C68134 + C139289 * C68135) * C139384) *
                C139598) *
               C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C13593 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C92451 +
           ((C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
             C81245 * C139384) *
                C13593 +
            (C80206 + C80207 - C80208 - C80209) * C139598) *
               C139600) *
              C139346 * C821 +
          (((C77517 * C1876 -
             ((C63381 * C246 + C139289 * C252) * C139571 +
              (C63381 * C108 + C139289 * C114) * C1875) +
             C77751 * C139384) *
                C13593 +
            (C70786 - (C70787 + C70788) + C70798) * C139598) *
               C92451 +
           ((C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
             C81246 * C139384) *
                C13593 +
            (C85672 - (C85673 + C85674) + C85675) * C139598) *
               C139600) *
              C139346 * C822 +
          ((((C63381 * C109 + C139289 * C115) * C1875 +
             (C63381 * C247 + C139289 * C253) * C139571 - C77519 * C1876 -
             C77752 * C139384) *
                C13593 +
            (C63888 * C1875 + C64096 * C139571 - C76581 * C1876 -
             C76791 * C139384) *
                C139598) *
               C92451 +
           ((C77519 * C1875 + C77752 * C139571 -
             (C63381 * C4658 + C139289 * C4662) * C1876 -
             (C63381 * C4833 + C139289 * C4837) * C139384) *
                C13593 +
            (C76581 * C1875 + C76791 * C139571 -
             (C63381 * C5469 + C139289 * C5475) * C1876 -
             (C63381 * C5635 + C139289 * C5638) * C139384) *
                C139598) *
               C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6281 +
            (C63381 * C245 + C139289 * C251) * C6159 - C77515 * C6282 -
            C77750 * C6160 + C81016 * C6283 + C81245 * C6161 - C82904 * C6284 -
            C83053 * C6162) *
               C13593 +
           (C63884 * C6281 + C64092 * C6159 - C66548 * C6282 - C66734 * C6160 +
            C67971 * C6283 + C68151 * C6161 - C81966 * C6284 - C82192 * C6162) *
               C139598) *
              C92451 +
          ((C77515 * C6281 + C77750 * C6159 - C81016 * C6282 - C81245 * C6160 +
            C82904 * C6283 + C83053 * C6161 -
            (C63381 * C37434 + C139289 * C37438) * C6284 -
            (C63381 * C37596 + C139289 * C37598) * C6162) *
               C13593 +
           (C66548 * C6281 + C66734 * C6159 - C67971 * C6282 - C68151 * C6160 +
            C81966 * C6283 + C82192 * C6161 -
            (C63381 * C82895 + C139289 * C82897) * C6284 -
            (C63381 * C83048 + C139289 * C83049) * C6162) *
               C139598) *
              C139600) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C92451 +
            ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C13796 * C5474 + C139598 * C5720 + C13795 * C4663 +
              C13593 * C4917) *
                 C139303 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C3364) *
                C139600 +
            ((C110553 + C110552) * C139303 + (C110551 + C110550) * C3364) *
                C92451) *
               C139289 * C139384) *
              C2565 +
          ((((C112988 + C112989) * C3364 + (C112990 + C112991) * C139303) *
                C92451 +
            ((C13795 * C5471 + C13593 * C5717 + C13796 * C19903 +
              C139598 * C20237) *
                 C3364 +
             (C13795 * C5474 + C13593 * C5720 + C13796 * C19905 +
              C139598 * C20239) *
                 C139303) *
                C139600) *
               C139289 * C139384 -
           (((C112991 + C112990) * C139303 + (C112989 + C112988) * C3364) *
                C139600 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C92451) *
               C139289 * C139571) *
              C2566 +
          ((((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C92451 +
            ((C112992 + C112993) * C3364 + (C112994 + C112995) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C13796 * C67959 + C139598 * C68229 + C13795 * C19905 +
              C13593 * C20239) *
                 C139303 +
             (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
              C13593 * C20237) *
                 C3364) *
                C139600 +
            ((C112995 + C112994) * C139303 + (C112993 + C112992) * C3364) *
                C92451) *
               C139289 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C92451 +
           ((C110550 + C110551) * C826 + (C110552 + C110553) * C821 -
            (C15654 + C15653) * C827 - (C15656 + C15655) * C822 +
            (C15658 + C15657) * C828 + (C15660 + C15659) * C823) *
               C139600) *
              C139289 * C139571 +
          (((C15653 + C15654) * C827 -
            ((C110553 + C110552) * C821 + (C110551 + C110550) * C826) +
            (C15655 + C15656) * C822 - (C15657 + C15658) * C828 -
            (C15659 + C15660) * C823) *
               C92451 +
           ((C19280 + C19279) * C827 -
            ((C13796 * C5474 + C139598 * C5720 + C13795 * C4663 +
              C13593 * C4917) *
                 C821 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C826) +
            (C19282 + C19281) * C822 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C828 -
            (C13796 * C5472 + C139598 * C5718 + C13795 * C4665 +
             C13593 * C4919) *
                C823) *
               C139600) *
              C139289 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C3364 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139303) *
               C92451 +
           ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
               C139600) *
              C139289 * C6159 -
          (((C113958 + C113959) * C139303 + (C113960 + C113961) * C3364) *
               C139600 +
           ((C110553 + C110552) * C139303 + (C110551 + C110550) * C3364) *
               C92451) *
              C139289 * C6160 +
          (((C113961 + C113960) * C3364 + (C113959 + C113958) * C139303) *
               C92451 +
           ((C115666 + C115667) * C3364 + (C115668 + C115669) * C139303) *
               C139600) *
              C139289 * C6161 -
          (((C13796 * C82896 + C139598 * C83120 + C13795 * C37436 +
             C13593 * C37674) *
                C139303 +
            (C13796 * C82895 + C139598 * C83119 + C13795 * C37434 +
             C13593 * C37672) *
                C3364) *
               C139600 +
           ((C115669 + C115668) * C139303 + (C115667 + C115666) * C3364) *
               C92451) *
              C139289 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C92451 +
           ((C110550 + C110551) * C2660 + (C110656 + C110657) * C2565 -
            (C112989 + C112988) * C2661 - (C113102 + C113103) * C2566 +
            (C112992 + C112993) * C2662 + (C113104 + C113105) * C2567) *
               C139600) *
              C139289 * C139303 * C139571 +
          (((C112988 + C112989) * C2661 -
            ((C110657 + C110656) * C2565 + (C110551 + C110550) * C2660) +
            (C113103 + C113102) * C2566 - (C112993 + C112992) * C2662 -
            (C113105 + C113104) * C2567) *
               C92451 +
           ((C13795 * C5471 + C13593 * C5717 + C13796 * C19903 +
             C139598 * C20237) *
                C2661 -
            ((C13796 * C5557 + C139598 * C5795 + C13795 * C4746 +
              C13593 * C5007) *
                 C2565 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C2660) +
            (C13795 * C5557 + C13593 * C5795 + C13796 * C20021 +
             C139598 * C20338) *
                C2566 -
            (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
             C13593 * C20237) *
                C2662 -
            (C13796 * C68052 + C139598 * C68304 + C13795 * C20021 +
             C13593 * C20338) *
                C2567) *
               C139600) *
              C139289 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C92451 +
            ((C110550 + C110551) * C181 + (C110656 + C110657) * C139346) *
                C139600) *
               C139289 * C821 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
               C139289 * C822 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C92451 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) *
                C139600) *
               C139289 * C823) *
              C139571 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C92451 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) *
                C139600) *
               C139289 * C822 -
           (((C13796 * C5557 + C139598 * C5795 + C13795 * C4746 +
              C13593 * C5007) *
                 C139346 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C181) *
                C139600 +
            ((C110657 + C110656) * C139346 + (C110551 + C110550) * C181) *
                C92451) *
               C139289 * C821 -
           (((C13796 * C5555 + C139598 * C5797 + C13795 * C4748 +
              C13593 * C5009) *
                 C139346 +
             (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
              C13593 * C4915) *
                 C181) *
                C139600 +
            ((C15770 + C15769) * C139346 + (C15657 + C15658) * C181) * C92451) *
               C139289 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139346) *
               C92451 +
           ((C110550 + C110551) * C181 + (C110656 + C110657) * C139346) *
               C139600) *
              C139289 * C139303 * C6159 -
          (((C114064 + C114065) * C139346 + (C113960 + C113961) * C181) *
               C139600 +
           ((C110657 + C110656) * C139346 + (C110551 + C110550) * C181) *
               C92451) *
              C139289 * C139303 * C6160 +
          (((C113961 + C113960) * C181 + (C114065 + C114064) * C139346) *
               C92451 +
           ((C115666 + C115667) * C181 + (C115740 + C115741) * C139346) *
               C139600) *
              C139289 * C139303 * C6161 -
          (((C13796 * C82973 + C139598 * C83199 + C13795 * C37520 +
             C13593 * C37752) *
                C139346 +
            (C13796 * C82895 + C139598 * C83119 + C13795 * C37434 +
             C13593 * C37672) *
                C181) *
               C139600 +
           ((C115741 + C115740) * C139346 + (C115667 + C115666) * C181) *
               C92451) *
              C139289 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C110551 + C110550) * C1876 - (C110760 + C110761) * C139384) *
               C92451 +
           ((C110550 + C110551) * C1875 + (C110761 + C110760) * C139571 -
            (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
             C13593 * C4913) *
                C1876 -
            (C13796 * C5637 + C139598 * C5872 + C13795 * C4831 +
             C13593 * C5095) *
                C139384) *
               C139600) *
              C139289 * C2565 +
          (((C112988 + C112989) * C1876 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139571 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C1875) +
            (C113212 + C113213) * C139384) *
               C92451 +
           ((C13795 * C5471 + C13593 * C5717 + C13796 * C19903 +
             C139598 * C20237) *
                C1876 -
            ((C113213 + C113212) * C139571 + (C112989 + C112988) * C1875) +
            (C13795 * C5637 + C13593 * C5872 + C13796 * C20129 +
             C139598 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C112993 + C112992) * C1876 - (C113214 + C113215) * C139384) *
               C92451 +
           ((C112992 + C112993) * C1875 + (C113215 + C113214) * C139571 -
            (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
             C13593 * C20237) *
                C1876 -
            (C13796 * C68134 + C139598 * C68379 + C13795 * C20129 +
             C13593 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C110551 + C110550) * C1876 - (C110760 + C110761) * C139384) *
               C92451 +
           ((C110550 + C110551) * C1875 + (C110761 + C110760) * C139571 -
            (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
             C13593 * C4913) *
                C1876 -
            (C13796 * C5637 + C139598 * C5872 + C13795 * C4831 +
             C13593 * C5095) *
                C139384) *
               C139600) *
              C139289 * C139346 * C821 +
          (((C15653 + C15654) * C1876 -
            ((C13997 + C13996) * C139571 + (C13822 + C13823) * C1875) +
            (C15878 + C15877) * C139384) *
               C92451 +
           ((C19280 + C19279) * C1876 -
            ((C15877 + C15878) * C139571 + (C15654 + C15653) * C1875) +
            (C19489 + C19490) * C139384) *
               C139600) *
              C139289 * C139346 * C822 +
          (((C13826 + C13827) * C1875 + (C13999 + C13998) * C139571 -
            (C15657 + C15658) * C1876 - (C15880 + C15879) * C139384) *
               C92451 +
           ((C15658 + C15657) * C1875 + (C15879 + C15880) * C139571 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C1876 -
            (C13796 * C5635 + C139598 * C5874 + C13795 * C4833 +
             C13593 * C5097) *
                C139384) *
               C139600) *
              C139289 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C6281 +
           (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
               C6159 -
           (C110551 + C110550) * C6282 - (C110760 + C110761) * C6160 +
           (C113961 + C113960) * C6283 + (C114168 + C114169) * C6161 -
           (C115667 + C115666) * C6284 - (C115812 + C115813) * C6162) *
              C92451 +
          ((C110550 + C110551) * C6281 + (C110761 + C110760) * C6159 -
           (C113960 + C113961) * C6282 - (C114169 + C114168) * C6160 +
           (C115666 + C115667) * C6283 + (C115813 + C115812) * C6161 -
           (C13796 * C82895 + C139598 * C83119 + C13795 * C37434 +
            C13593 * C37672) *
               C6284 -
           (C13796 * C83048 + C139598 * C83272 + C13795 * C37596 +
            C13593 * C37824) *
               C6162) *
              C139600) *
         C139289 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[113] +=
        (-std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C13593 +
            ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C113330 + C113331) * C139303 + (C113332 + C113333) * C3364) *
                C139289 * C139598 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C139289 * C13593) *
               C139384) *
              C2565 +
          ((((C113333 + C113332) * C3364 + (C113331 + C113330) * C139303) *
                C139289 * C13593 +
            ((C113334 + C113335) * C3364 + (C113336 + C113337) * C139303) *
                C139289 * C139598) *
               C139384 -
           (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
                C139289 * C139598 +
            ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
                C139289 * C13593) *
               C139571) *
              C2566 +
          ((((C111753 + C111752) * C3364 + (C111751 + C111750) * C139303) *
                C139289 * C13593 +
            ((C112432 + C112433) * C3364 + (C112434 + C112435) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C92850 * C67959 + C139600 * C68455 + C92849 * C17961 +
              C92451 * C18621) *
                 C139303 +
             (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
              C92451 * C18619) *
                 C3364) *
                C139289 * C139598 +
            ((C113337 + C113336) * C139303 + (C113335 + C113334) * C3364) *
                C139289 * C13593) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C139289 * C13593 +
           ((C109938 + C109939) * C826 + (C109940 + C109941) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C822 +
            (C93763 + C93762) * C828 + (C93765 + C93764) * C823) *
               C139289 * C139598) *
              C139571 +
          (((C94760 + C94761) * C827 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C821 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C826) +
            (C94762 + C94763) * C822 - (C94764 + C94765) * C828 -
            (C94766 + C94767) * C823) *
               C139289 * C13593 +
           ((C102507 + C102506) * C827 -
            ((C92850 * C5474 + C139600 * C5954 + C92849 * C3900 +
              C92451 * C4413) *
                 C821 +
             (C92850 * C5471 + C139600 * C5951 + C92849 * C3891 +
              C92451 * C4407) *
                 C826) +
            (C102509 + C102508) * C822 -
            (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
             C92451 * C4409) *
                C828 -
            (C92850 * C5472 + C139600 * C5952 + C92849 * C3902 +
             C92451 * C4415) *
                C823) *
               C139289 * C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C3364 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139303) *
               C139289 * C13593 +
           ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
               C139289 * C139598) *
              C6159 -
          (((C113330 + C113331) * C139303 + (C113332 + C113333) * C3364) *
               C139289 * C139598 +
           ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
             C92451 * C2268) *
                C139303 +
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C3364) *
               C139289 * C13593) *
              C6160 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C3364 +
            (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
             C139600 * C6508) *
                C139303) *
               C139289 * C13593 +
           ((C115182 + C115183) * C3364 + (C115184 + C115185) * C139303) *
               C139289 * C139598) *
              C6161 -
          (((C92850 * C82896 + C139600 * C83346 + C92849 * C20833 +
             C92451 * C21253) *
                C139303 +
            (C92850 * C82895 + C139600 * C83345 + C92849 * C20831 +
             C92451 * C21251) *
                C3364) *
               C139289 * C139598 +
           ((C92850 * C37436 + C139600 * C37898 + C92849 * C6168 +
             C92451 * C6508) *
                C139303 +
            (C92850 * C37434 + C139600 * C37896 + C92849 * C6165 +
             C92451 * C6505) *
                C3364) *
               C139289 * C13593) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C109939 + C109938) * C2661 - (C110044 + C110045) * C2566 +
            (C111753 + C111752) * C2662 + (C111856 + C111857) * C2567) *
               C139289 * C13593 +
           ((C109938 + C109939) * C2660 + (C110045 + C110044) * C2565 -
            (C111752 + C111753) * C2661 - (C111857 + C111856) * C2566 +
            (C112432 + C112433) * C2662 + (C112507 + C112506) * C2567) *
               C139289 * C139598) *
              C139303 * C139571 +
          (((C113333 + C113332) * C2661 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C2565 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C2660) +
            (C113444 + C113445) * C2566 - (C113335 + C113334) * C2662 -
            (C113446 + C113447) * C2567) *
               C139289 * C13593 +
           ((C113334 + C113335) * C2661 -
            ((C113445 + C113444) * C2565 + (C113332 + C113333) * C2660) +
            (C113447 + C113446) * C2566 -
            (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
             C92451 * C18619) *
                C2662 -
            (C92850 * C68052 + C139600 * C68538 + C92849 * C18089 +
             C92451 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C13593 +
            ((C109938 + C109939) * C181 + (C110045 + C110044) * C139346) *
                C139289 * C139598) *
               C821 -
           (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
                C139598 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
                C13593) *
               C822 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C139289 *
                C13593 +
            ((C93763 + C93762) * C181 + (C93874 + C93875) * C139346) * C139289 *
                C139598) *
               C823) *
              C139571 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C139289 *
                C13593 +
            ((C102507 + C102506) * C181 + (C102644 + C102645) * C139346) *
                C139289 * C139598) *
               C822 -
           (((C92850 * C5557 + C139600 * C6029 + C92849 * C3989 +
              C92451 * C4493) *
                 C139346 +
             (C92850 * C5471 + C139600 * C5951 + C92849 * C3891 +
              C92451 * C4407) *
                 C181) *
                C139289 * C139598 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C139289 * C13593) *
               C821 -
           (((C92850 * C5555 + C139600 * C6031 + C92849 * C3991 +
              C92451 * C4497) *
                 C139346 +
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C181) *
                C139289 * C139598 +
            ((C94877 + C94876) * C139346 + (C94764 + C94765) * C181) * C139289 *
                C13593) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139346) *
               C139289 * C13593 +
           ((C109938 + C109939) * C181 + (C110045 + C110044) * C139346) *
               C139289 * C139598) *
              C139303 * C6159 -
          (((C113445 + C113444) * C139346 + (C113332 + C113333) * C181) *
               C139289 * C139598 +
           ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
             C92451 * C2368) *
                C139346 +
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C181) *
               C139289 * C13593) *
              C139303 * C6160 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C181 +
            (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
             C139600 * C6561) *
                C139346) *
               C139289 * C13593 +
           ((C115182 + C115183) * C181 + (C115289 + C115288) * C139346) *
               C139289 * C139598) *
              C139303 * C6161 -
          (((C92850 * C82973 + C139600 * C83413 + C92849 * C20905 +
             C92451 * C21321) *
                C139346 +
            (C92850 * C82895 + C139600 * C83345 + C92849 * C20831 +
             C92451 * C21251) *
                C181) *
               C139289 * C139598 +
           ((C92850 * C37520 + C139600 * C37966 + C92849 * C6227 +
             C92451 * C6561) *
                C139346 +
            (C92850 * C37434 + C139600 * C37896 + C92849 * C6165 +
             C92451 * C6505) *
                C181) *
               C139289 * C13593) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[113] +=
        (-std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C139289 * C13593 +
           ((C109938 + C109939) * C1875 + (C110148 + C110149) * C139571 -
            (C113332 + C113333) * C1876 - (C113554 + C113555) * C139384) *
               C139289 * C139598) *
              C2565 +
          (((C113333 + C113332) * C1876 -
            ((C110149 + C110148) * C139571 + (C109939 + C109938) * C1875) +
            (C113555 + C113554) * C139384) *
               C139289 * C13593 +
           ((C113334 + C113335) * C1876 -
            ((C111960 + C111961) * C139571 + (C111752 + C111753) * C1875) +
            (C113556 + C113557) * C139384) *
               C139289 * C139598) *
              C2566 +
          (((C111753 + C111752) * C1875 + (C111961 + C111960) * C139571 -
            (C113335 + C113334) * C1876 - (C113557 + C113556) * C139384) *
               C139289 * C13593 +
           ((C112432 + C112433) * C1875 + (C112578 + C112579) * C139571 -
            (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
             C92451 * C18619) *
                C1876 -
            (C92850 * C68134 + C139600 * C68616 + C92849 * C18203 +
             C92451 * C18855) *
                C139384) *
               C139289 * C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C139289 * C13593 +
           ((C109938 + C109939) * C1875 + (C110148 + C110149) * C139571 -
            (C92850 * C5471 + C139600 * C5951 + C92849 * C3891 +
             C92451 * C4407) *
                C1876 -
            (C92850 * C5637 + C139600 * C6106 + C92849 * C4075 +
             C92451 * C4573) *
                C139384) *
               C139289 * C139598) *
              C139346 * C821 +
          (((C94760 + C94761) * C1876 -
            ((C93051 + C93050) * C139571 + (C92876 + C92877) * C1875) +
            (C94985 + C94984) * C139384) *
               C139289 * C13593 +
           ((C102507 + C102506) * C1876 -
            ((C93982 + C93983) * C139571 + (C93759 + C93758) * C1875) +
            (C102780 + C102781) * C139384) *
               C139289 * C139598) *
              C139346 * C822 +
          (((C92880 + C92881) * C1875 + (C93053 + C93052) * C139571 -
            (C94764 + C94765) * C1876 - (C94987 + C94986) * C139384) *
               C139289 * C13593 +
           ((C93763 + C93762) * C1875 + (C93984 + C93985) * C139571 -
            (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
             C92451 * C4409) *
                C1876 -
            (C92850 * C5635 + C139600 * C6108 + C92849 * C4077 +
             C92451 * C4575) *
                C139384) *
               C139289 * C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C6281 +
           (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
               C6159 -
           (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
            C92451 * C2264) *
               C6282 -
           (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
            C92451 * C2460) *
               C6160 +
           (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
            C139600 * C6505) *
               C6283 +
           (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
            C139600 * C6612) *
               C6161 -
           (C92850 * C37434 + C139600 * C37896 + C92849 * C6165 +
            C92451 * C6505) *
               C6284 -
           (C92850 * C37596 + C139600 * C38033 + C92849 * C6287 +
            C92451 * C6612) *
               C6162) *
              C139289 * C13593 +
          ((C109938 + C109939) * C6281 + (C110148 + C110149) * C6159 -
           (C113332 + C113333) * C6282 - (C113554 + C113555) * C6160 +
           (C115182 + C115183) * C6283 + (C115392 + C115393) * C6161 -
           (C92850 * C82895 + C139600 * C83345 + C92849 * C20831 +
            C92451 * C21251) *
               C6284 -
           (C92850 * C83048 + C139600 * C83480 + C92849 * C20975 +
            C92451 * C21388) *
               C6162) *
              C139289 * C139598) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C6694 +
             (C63381 * C116 + C139289 * C125) * C139601 -
             (C63381 * C108 + C139289 * C114) * C6695 -
             (C63381 * C117 + C139289 * C126) * C139590 +
             (C63381 * C109 + C139289 * C115) * C6696 +
             (C63381 * C118 + C139289 * C127) * C6691) *
                C13593 +
            (C69167 + C69168 - C69169 - C69170 + C69171 + C69172) * C139598) *
               C92451 +
           ((C86554 + C86555 - C86556 - C86557 + C86558 + C86559) * C13593 +
            (C83580 + C83581 - C83582 - C83583 + C83584 + C83585) * C139598) *
               C139600) *
              C9074 +
          (((C86556 - (C86555 + C86554) + C86557 - C86558 - C86559) * C13593 +
            (C83582 - (C83581 + C83580) + C83583 - C83584 - C83585) * C139598) *
               C92451 +
           ((C81014 * C6695 - (C81015 * C139601 + C81016 * C6694) +
             C81017 * C139590 - (C63381 * C4658 + C139289 * C4662) * C6696 -
             (C63381 * C4665 + C139289 * C4670) * C6691) *
                C13593 +
            (C81018 * C6695 - (C67972 * C139601 + C67971 * C6694) +
             C81019 * C139590 - (C63381 * C5469 + C139289 * C5475) * C6696 -
             (C63381 * C5472 + C139289 * C5478) * C6691) *
                C139598) *
               C139600) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C13593 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C92451 +
            ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
                C139600) *
               C139601 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C13593) *
                C92451) *
               C139590 +
           ((((C63381 * C109 + C139289 * C115) * C181 +
              (C63381 * C184 + C139289 * C190) * C139346) *
                 C13593 +
             (C63888 * C181 + C63998 * C139346) * C139598) *
                C92451 +
            ((C77635 + C77645) * C13593 + (C77638 + C77639) * C139598) *
                C139600) *
               C6691) *
              C9074 +
          ((((C77634 + C77644) * C13593 + (C77631 + C77630) * C139598) *
                C92451 +
            ((C81124 + C81138) * C13593 + (C81127 + C81139) * C139598) *
                C139600) *
               C139590 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C13593) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C13593) *
                C92451) *
               C139601 -
           ((((C63381 * C5555 + C139289 * C5558) * C139346 +
              (C63381 * C5469 + C139289 * C5475) * C181) *
                 C139598 +
             ((C63381 * C4748 + C139289 * C4752) * C139346 +
              (C63381 * C4658 + C139289 * C4662) * C181) *
                 C13593) *
                C139600 +
            ((C77639 + C77638) * C139598 + (C77645 + C77635) * C13593) *
                C92451) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[114] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63381 * C107 + C139289 * C113) * C9224 +
                        (C63381 * C245 + C139289 * C251) * C9074 -
                        C77515 * C9225 - C77750 * C139384) *
                           C13593 +
                       (C72352 + C72353 - C72354 - C72355) * C139598) *
                          C92451 +
                      ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                        C81245 * C139384) *
                           C13593 +
                       (C87742 + C87743 - C87744 - C87745) * C139598) *
                          C139600) *
                         C139346 * C139601 +
                     (((C77517 * C9225 -
                        ((C63381 * C246 + C139289 * C252) * C9074 +
                         (C63381 * C108 + C139289 * C114) * C9224) +
                        C77751 * C139384) *
                           C13593 +
                       (C72360 - (C72361 + C72362) + C72363) * C139598) *
                          C92451 +
                      ((C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                        C81246 * C139384) *
                           C13593 +
                       (C87746 - (C87747 + C87748) + C87749) * C139598) *
                          C139600) *
                         C139346 * C139590 +
                     ((((C63381 * C109 + C139289 * C115) * C9224 +
                        (C63381 * C247 + C139289 * C253) * C9074 -
                        C77519 * C9225 - C77752 * C139384) *
                           C13593 +
                       (C63888 * C9224 + C64096 * C9074 - C76581 * C9225 -
                        C76791 * C139384) *
                           C139598) *
                          C92451 +
                      ((C77519 * C9224 + C77752 * C9074 -
                        (C63381 * C4658 + C139289 * C4662) * C9225 -
                        (C63381 * C4833 + C139289 * C4837) * C139384) *
                           C13593 +
                       (C76581 * C9224 + C76791 * C9074 -
                        (C63381 * C5469 + C139289 * C5475) * C9225 -
                        (C63381 * C5635 + C139289 * C5638) * C139384) *
                           C139598) *
                          C139600) *
                         C139346 * C6691)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C6694 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139601 -
            (C13822 + C13823) * C6695 - (C13824 + C13825) * C139590 +
            (C13826 + C13827) * C6696 + (C13828 + C13829) * C6691) *
               C92451 +
           ((C110550 + C110551) * C6694 + (C110552 + C110553) * C139601 -
            (C15654 + C15653) * C6695 - (C15656 + C15655) * C139590 +
            (C15658 + C15657) * C6696 + (C15660 + C15659) * C6691) *
               C139600) *
              C139289 * C9074 +
          (((C15653 + C15654) * C6695 -
            ((C110553 + C110552) * C139601 + (C110551 + C110550) * C6694) +
            (C15655 + C15656) * C139590 - (C15657 + C15658) * C6696 -
            (C15659 + C15660) * C6691) *
               C92451 +
           ((C19280 + C19279) * C6695 -
            ((C113958 + C113959) * C139601 + (C113960 + C113961) * C6694) +
            (C19282 + C19281) * C139590 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C6696 -
            (C13796 * C5472 + C139598 * C5718 + C13795 * C4665 +
             C13593 * C4919) *
                C6691) *
               C139600) *
              C139289 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C92451 +
            ((C110550 + C110551) * C181 + (C110656 + C110657) * C139346) *
                C139600) *
               C139289 * C139601 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
               C139289 * C139590 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C92451 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) *
                C139600) *
               C139289 * C6691) *
              C9074 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C92451 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) *
                C139600) *
               C139289 * C139590 -
           (((C114064 + C114065) * C139346 + (C113960 + C113961) * C181) *
                C139600 +
            ((C110657 + C110656) * C139346 + (C110551 + C110550) * C181) *
                C92451) *
               C139289 * C139601 -
           (((C13796 * C5555 + C139598 * C5797 + C13795 * C4748 +
              C13593 * C5009) *
                 C139346 +
             (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
              C13593 * C4915) *
                 C181) *
                C139600 +
            ((C15770 + C15769) * C139346 + (C15657 + C15658) * C181) * C92451) *
               C139289 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C9224 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C9074 -
            (C110551 + C110550) * C9225 - (C110760 + C110761) * C139384) *
               C92451 +
           ((C110550 + C110551) * C9224 + (C110761 + C110760) * C9074 -
            (C113960 + C113961) * C9225 - (C114169 + C114168) * C139384) *
               C139600) *
              C139289 * C139346 * C139601 +
          (((C15653 + C15654) * C9225 -
            ((C13997 + C13996) * C9074 + (C13822 + C13823) * C9224) +
            (C15878 + C15877) * C139384) *
               C92451 +
           ((C19280 + C19279) * C9225 -
            ((C15877 + C15878) * C9074 + (C15654 + C15653) * C9224) +
            (C19489 + C19490) * C139384) *
               C139600) *
              C139289 * C139346 * C139590 +
          (((C13826 + C13827) * C9224 + (C13999 + C13998) * C9074 -
            (C15657 + C15658) * C9225 - (C15880 + C15879) * C139384) *
               C92451 +
           ((C15658 + C15657) * C9224 + (C15879 + C15880) * C9074 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C9225 -
            (C13796 * C5635 + C139598 * C5874 + C13795 * C4833 +
             C13593 * C5097) *
                C139384) *
               C139600) *
              C139289 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C6694 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139601 -
            (C92876 + C92877) * C6695 - (C92878 + C92879) * C139590 +
            (C92880 + C92881) * C6696 + (C92882 + C92883) * C6691) *
               C139289 * C13593 +
           ((C109938 + C109939) * C6694 + (C109940 + C109941) * C139601 -
            (C93759 + C93758) * C6695 - (C93761 + C93760) * C139590 +
            (C93763 + C93762) * C6696 + (C93765 + C93764) * C6691) *
               C139289 * C139598) *
              C9074 +
          (((C94760 + C94761) * C6695 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139601 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C6694) +
            (C94762 + C94763) * C139590 - (C94764 + C94765) * C6696 -
            (C94766 + C94767) * C6691) *
               C139289 * C13593 +
           ((C102507 + C102506) * C6695 -
            ((C113330 + C113331) * C139601 + (C113332 + C113333) * C6694) +
            (C102509 + C102508) * C139590 -
            (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
             C92451 * C4409) *
                C6696 -
            (C92850 * C5472 + C139600 * C5952 + C92849 * C3902 +
             C92451 * C4415) *
                C6691) *
               C139289 * C139598) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C13593 +
            ((C109938 + C109939) * C181 + (C110045 + C110044) * C139346) *
                C139289 * C139598) *
               C139601 -
           (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
                C139598 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
                C13593) *
               C139590 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C139289 *
                C13593 +
            ((C93763 + C93762) * C181 + (C93874 + C93875) * C139346) * C139289 *
                C139598) *
               C6691) *
              C9074 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C139289 *
                C13593 +
            ((C102507 + C102506) * C181 + (C102644 + C102645) * C139346) *
                C139289 * C139598) *
               C139590 -
           (((C113445 + C113444) * C139346 + (C113332 + C113333) * C181) *
                C139289 * C139598 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C139289 * C13593) *
               C139601 -
           (((C92850 * C5555 + C139600 * C6031 + C92849 * C3991 +
              C92451 * C4497) *
                 C139346 +
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C181) *
                C139289 * C139598 +
            ((C94877 + C94876) * C139346 + (C94764 + C94765) * C181) * C139289 *
                C13593) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[114] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C9224 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C9074 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C9225 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C139289 * C13593 +
           ((C109938 + C109939) * C9224 + (C110148 + C110149) * C9074 -
            (C113332 + C113333) * C9225 - (C113554 + C113555) * C139384) *
               C139289 * C139598) *
              C139346 * C139601 +
          (((C94760 + C94761) * C9225 -
            ((C93051 + C93050) * C9074 + (C92876 + C92877) * C9224) +
            (C94985 + C94984) * C139384) *
               C139289 * C13593 +
           ((C102507 + C102506) * C9225 -
            ((C93982 + C93983) * C9074 + (C93759 + C93758) * C9224) +
            (C102780 + C102781) * C139384) *
               C139289 * C139598) *
              C139346 * C139590 +
          (((C92880 + C92881) * C9224 + (C93053 + C93052) * C9074 -
            (C94764 + C94765) * C9225 - (C94987 + C94986) * C139384) *
               C139289 * C13593 +
           ((C93763 + C93762) * C9224 + (C93984 + C93985) * C9074 -
            (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
             C92451 * C4409) *
                C9225 -
            (C92850 * C5635 + C139600 * C6108 + C92849 * C4077 +
             C92451 * C4575) *
                C139384) *
               C139289 * C139598) *
              C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C7401 +
              (C63381 * C116 + C139289 * C125) * C7396 -
              (C63381 * C108 + C139289 * C114) * C7402 -
              (C63381 * C117 + C139289 * C126) * C139308) *
                 C13593 +
             (C69851 + C69852 - C69853 - C69854) * C139598) *
                C92451 +
            ((C85382 + C85383 - C85384 - C85385) * C13593 + C85394 * C139598) *
                C139600) *
               C9074 +
           (((C85384 - (C85383 + C85382) + C85385) * C13593 +
             C85395 * C139598) *
                C92451 +
            ((C88628 - (C88629 + C88630) + C88631) * C13593 +
             (C85388 - (C85389 + C85390) + C85391) * C139598) *
                C139600) *
               C139384) *
              C139570 +
          ((((C69853 - (C69852 + C69851) + C69854) * C13593 +
             (C69857 - (C69856 + C69855) + C69858) * C139598) *
                C92451 +
            (C85395 * C13593 +
             (C70582 - (C70572 + C70573) + C70583) * C139598) *
                C139600) *
               C9074 +
           ((C85394 * C13593 + (C70573 + C70572 - C70582 - C70583) * C139598) *
                C92451 +
            ((C85390 + C85389 - C85388 - C85391) * C13593 +
             (C67973 * C7401 + C67974 * C7396 -
              (C63381 * C19902 + C139289 * C19906) * C7402 -
              (C63381 * C19904 + C139289 * C19908) * C139308) *
                 C139598) *
                C139600) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139289 * C113) * C923 +
                         (C63381 * C182 + C139289 * C188) * C139570 -
                         C63884 * C924 - C63994 * C139360) *
                            C13593 +
                        (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
                         C63995 * C139360) *
                            C139598) *
                           C92451 +
                       ((C82068 + C82069 - C82070 - C82071) * C13593 +
                        (C82072 + C82073 - C82074 - C82075) * C139598) *
                           C139600) *
                          C7396 +
                      (((C63886 * C924 -
                         ((C63381 * C183 + C139289 * C189) * C139570 +
                          (C63381 * C108 + C139289 * C114) * C923) +
                         C63996 * C139360) *
                            C13593 +
                        (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
                         C63997 * C139360) *
                            C139598) *
                           C92451 +
                       ((C87604 - (C87605 + C87606) + C87607) * C13593 +
                        (C87608 - (C87609 + C87610) + C87611) * C139598) *
                           C139600) *
                          C139308) *
                         C9074 +
                     ((((C82070 - (C82069 + C82068) + C82071) * C13593 +
                        (C82074 - (C82073 + C82072) + C82075) * C139598) *
                           C92451 +
                       ((C82076 - (C82077 + C82078) + C82079) * C13593 +
                        (C82080 - (C82081 + C82082) + C82083) * C139598) *
                           C139600) *
                          C7396 +
                      (((C87606 + C87605 - C87604 - C87607) * C13593 +
                        (C87610 + C87609 - C87608 - C87611) * C139598) *
                           C92451 +
                       ((C81014 * C923 + C81135 * C139570 - C81018 * C924 -
                         C81136 * C139360) *
                            C13593 +
                        (C81018 * C923 + C81136 * C139570 -
                         (C63381 * C19902 + C139289 * C19906) * C924 -
                         (C63381 * C20020 + C139289 * C20022) * C139360) *
                            C139598) *
                           C139600) *
                          C139308) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63381 * C107 + C139289 * C113) * C9224 +
                         (C63381 * C245 + C139289 * C251) * C9074 -
                         C77515 * C9225 - C77750 * C139384) *
                            C13593 +
                        (C72352 + C72353 - C72354 - C72355) * C139598) *
                           C92451 +
                       ((C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                         C81245 * C139384) *
                            C13593 +
                        (C87742 + C87743 - C87744 - C87745) * C139598) *
                           C139600) *
                          C139570 +
                      (((C72354 - (C72353 + C72352) + C72355) * C13593 +
                        (C72358 - (C72357 + C72356) + C72359) * C139598) *
                           C92451 +
                       ((C87744 - (C87743 + C87742) + C87745) * C13593 +
                        (C90898 - (C90899 + C90900) + C90901) * C139598) *
                           C139600) *
                          C139360) *
                         C7396 +
                     ((((C77517 * C9225 -
                         ((C63381 * C246 + C139289 * C252) * C9074 +
                          (C63381 * C108 + C139289 * C114) * C9224) +
                         C77751 * C139384) *
                            C13593 +
                        (C72360 - (C72361 + C72362) + C72363) * C139598) *
                           C92451 +
                       ((C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                         C81246 * C139384) *
                            C13593 +
                        (C87746 - (C87747 + C87748) + C87749) * C139598) *
                           C139600) *
                          C139570 +
                      (((C72362 + C72361 - C72360 - C72363) * C13593 +
                        (C72366 + C72365 - C72364 - C72367) * C139598) *
                           C92451 +
                       ((C87748 + C87747 - C87746 - C87749) * C13593 +
                        (C70578 * C9224 + C70797 * C9074 -
                         (C63381 * C19902 + C139289 * C19906) * C9225 -
                         (C63381 * C20128 + C139289 * C20130) * C139384) *
                            C139598) *
                           C139600) *
                          C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C7401 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C7396 -
             (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
                C92451 +
            ((C110550 + C110551) * C7401 + (C110552 + C110553) * C7396 -
             (C15654 + C15653) * C7402 - (C15656 + C15655) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C15653 + C15654) * C7402 -
             ((C110553 + C110552) * C7396 + (C110551 + C110550) * C7401) +
             (C15655 + C15656) * C139308) *
                C92451 +
            ((C19280 + C19279) * C7402 -
             ((C113958 + C113959) * C7396 + (C113960 + C113961) * C7401) +
             (C19282 + C19281) * C139308) *
                C139600) *
               C139289 * C139384) *
              C139570 +
          ((((C14686 + C14687) * C7402 -
             ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
               C13593 * C1098) *
                  C7396 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C7401) +
             (C14688 + C14689) * C139308) *
                C92451 +
            ((C23750 + C23749) * C7402 -
             ((C112991 + C112990) * C7396 + (C112989 + C112988) * C7401) +
             (C23752 + C23751) * C139308) *
                C139600) *
               C139289 * C9074 +
           (((C112988 + C112989) * C7401 + (C112990 + C112991) * C7396 -
             (C23749 + C23750) * C7402 - (C23751 + C23752) * C139308) *
                C92451 +
            ((C114864 + C114865) * C7401 + (C114866 + C114867) * C7396 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C7402 -
             (C13796 * C19904 + C139598 * C20238 + C13795 * C5473 +
              C13593 * C5719) *
                 C139308) *
                C139600) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C923 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139570 -
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C924 -
             (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
              C13593 * C1195) *
                 C139360) *
                C92451 +
            ((C110550 + C110551) * C923 + (C110656 + C110657) * C139570 -
             (C112989 + C112988) * C924 - (C113102 + C113103) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C14686 + C14687) * C924 -
             ((C13913 + C13912) * C139570 + (C13822 + C13823) * C923) +
             (C14801 + C14800) * C139360) *
                C92451 +
            ((C23750 + C23749) * C924 -
             ((C15768 + C15767) * C139570 + (C15654 + C15653) * C923) +
             (C23887 + C23888) * C139360) *
                C139600) *
               C139289 * C139308) *
              C9074 +
          ((((C112988 + C112989) * C924 -
             ((C110657 + C110656) * C139570 + (C110551 + C110550) * C923) +
             (C113103 + C113102) * C139360) *
                C92451 +
            ((C114864 + C114865) * C924 -
             ((C114064 + C114065) * C139570 + (C113960 + C113961) * C923) +
             (C114970 + C114971) * C139360) *
                C139600) *
               C139289 * C7396 +
           (((C15653 + C15654) * C923 + (C15767 + C15768) * C139570 -
             (C23749 + C23750) * C924 - (C23888 + C23887) * C139360) *
                C92451 +
            ((C19280 + C19279) * C923 + (C19385 + C19386) * C139570 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C924 -
             (C13796 * C20020 + C139598 * C20339 + C13795 * C5556 +
              C13593 * C5796) *
                 C139360) *
                C139600) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C9224 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C9074 -
             (C110551 + C110550) * C9225 - (C110760 + C110761) * C139384) *
                C92451 +
            ((C110550 + C110551) * C9224 + (C110761 + C110760) * C9074 -
             (C113960 + C113961) * C9225 - (C114169 + C114168) * C139384) *
                C139600) *
               C139289 * C139570 +
           (((C112988 + C112989) * C9225 -
             ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
               C13593 * C1301) *
                  C9074 +
              (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
               C13593 * C1094) *
                  C9224) +
             (C113212 + C113213) * C139384) *
                C92451 +
            ((C114864 + C114865) * C9225 -
             ((C113213 + C113212) * C9074 + (C112989 + C112988) * C9224) +
             (C115075 + C115074) * C139384) *
                C139600) *
               C139289 * C139360) *
              C7396 +
          ((((C15653 + C15654) * C9225 -
             ((C13997 + C13996) * C9074 + (C13822 + C13823) * C9224) +
             (C15878 + C15877) * C139384) *
                C92451 +
            ((C19280 + C19279) * C9225 -
             ((C15877 + C15878) * C9074 + (C15654 + C15653) * C9224) +
             (C19489 + C19490) * C139384) *
                C139600) *
               C139289 * C139570 +
           (((C14686 + C14687) * C9224 + (C14911 + C14910) * C9074 -
             (C23749 + C23750) * C9225 - (C24024 + C24023) * C139384) *
                C92451 +
            ((C23750 + C23749) * C9224 + (C24023 + C24024) * C9074 -
             (C13796 * C19902 + C139598 * C20236 + C13795 * C5470 +
              C13593 * C5716) *
                 C9225 -
             (C13796 * C20128 + C139598 * C20439 + C13795 * C5636 +
              C13593 * C5873) *
                 C139384) *
                C139600) *
               C139289 * C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C7401 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C7396 -
             (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
                C139289 * C13593 +
            ((C109938 + C109939) * C7401 + (C109940 + C109941) * C7396 -
             (C93759 + C93758) * C7402 - (C93761 + C93760) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C94760 + C94761) * C7402 -
             ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
               C92451 * C2268) *
                  C7396 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C7401) +
             (C94762 + C94763) * C139308) *
                C139289 * C13593 +
            ((C102507 + C102506) * C7402 -
             ((C113330 + C113331) * C7396 + (C113332 + C113333) * C7401) +
             (C102509 + C102508) * C139308) *
                C139289 * C139598) *
               C139384) *
              C139570 +
          ((((C93758 + C93759) * C7402 -
             ((C109941 + C109940) * C7396 + (C109939 + C109938) * C7401) +
             (C93760 + C93761) * C139308) *
                C139289 * C13593 +
            ((C95683 + C95682) * C7402 -
             ((C111750 + C111751) * C7396 + (C111752 + C111753) * C7401) +
             (C95685 + C95684) * C139308) *
                C139289 * C139598) *
               C9074 +
           (((C113333 + C113332) * C7401 + (C113331 + C113330) * C7396 -
             (C102506 + C102507) * C7402 - (C102508 + C102509) * C139308) *
                C139289 * C13593 +
            ((C113334 + C113335) * C7401 + (C113336 + C113337) * C7396 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C7402 -
             (C92850 * C19904 + C139600 * C20540 + C92849 * C3904 +
              C92451 * C4417) *
                 C139308) *
                C139289 * C139598) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eezy[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C923 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139570 -
             (C109939 + C109938) * C924 - (C110044 + C110045) * C139360) *
                C139289 * C13593 +
            ((C109938 + C109939) * C923 + (C110045 + C110044) * C139570 -
             (C111752 + C111753) * C924 - (C111857 + C111856) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C93758 + C93759) * C924 -
             ((C92967 + C92966) * C139570 + (C92876 + C92877) * C923) +
             (C93873 + C93872) * C139360) *
                C139289 * C13593 +
            ((C95683 + C95682) * C924 -
             ((C93872 + C93873) * C139570 + (C93759 + C93758) * C923) +
             (C95788 + C95789) * C139360) *
                C139289 * C139598) *
               C139308) *
              C9074 +
          ((((C113333 + C113332) * C924 -
             ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
               C92451 * C2368) *
                  C139570 +
              (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
               C92451 * C2264) *
                  C923) +
             (C113444 + C113445) * C139360) *
                C139289 * C13593 +
            ((C113334 + C113335) * C924 -
             ((C113445 + C113444) * C139570 + (C113332 + C113333) * C923) +
             (C113447 + C113446) * C139360) *
                C139289 * C139598) *
               C7396 +
           (((C94760 + C94761) * C923 + (C94874 + C94875) * C139570 -
             (C102506 + C102507) * C924 - (C102645 + C102644) * C139360) *
                C139289 * C13593 +
            ((C102507 + C102506) * C923 + (C102644 + C102645) * C139570 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C924 -
             (C92850 * C20020 + C139600 * C20651 + C92849 * C3993 +
              C92451 * C4496) *
                 C139360) *
                C139289 * C139598) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eezz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C9224 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C9074 -
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C9225 -
             (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
              C92451 * C2460) *
                 C139384) *
                C139289 * C13593 +
            ((C109938 + C109939) * C9224 + (C110148 + C110149) * C9074 -
             (C113332 + C113333) * C9225 - (C113554 + C113555) * C139384) *
                C139289 * C139598) *
               C139570 +
           (((C113333 + C113332) * C9225 -
             ((C110149 + C110148) * C9074 + (C109939 + C109938) * C9224) +
             (C113555 + C113554) * C139384) *
                C139289 * C13593 +
            ((C113334 + C113335) * C9225 -
             ((C111960 + C111961) * C9074 + (C111752 + C111753) * C9224) +
             (C113556 + C113557) * C139384) *
                C139289 * C139598) *
               C139360) *
              C7396 +
          ((((C94760 + C94761) * C9225 -
             ((C93051 + C93050) * C9074 + (C92876 + C92877) * C9224) +
             (C94985 + C94984) * C139384) *
                C139289 * C13593 +
            ((C102507 + C102506) * C9225 -
             ((C93982 + C93983) * C9074 + (C93759 + C93758) * C9224) +
             (C102780 + C102781) * C139384) *
                C139289 * C139598) *
               C139570 +
           (((C93758 + C93759) * C9224 + (C93983 + C93982) * C9074 -
             (C102506 + C102507) * C9225 - (C102781 + C102780) * C139384) *
                C139289 * C13593 +
            ((C95683 + C95682) * C9224 + (C95892 + C95893) * C9074 -
             (C92850 * C19902 + C139600 * C20538 + C92849 * C3895 +
              C92451 * C4411) *
                 C9225 -
             (C92850 * C20128 + C139600 * C20754 + C92849 * C4079 +
              C92451 * C4577) *
                 C139384) *
                C139289 * C139598) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C13593 +
            (C69851 + C69852 - C69853 - C69854) * C139598) *
               C92451 +
           ((C85382 + C85383 - C85384 - C85385) * C13593 + C85394 * C139598) *
               C139600) *
              C139603 +
          (((C85384 - (C85383 + C85382) + C85385) * C13593 + C85395 * C139598) *
               C92451 +
           ((C88628 - (C88629 + C88630) + C88631) * C13593 +
            (C85388 - (C85389 + C85390) + C85391) * C139598) *
               C139600) *
              C139596 +
          (((C88630 + C88629 - C88628 - C88631) * C13593 +
            (C85390 + C85389 - C85388 - C85391) * C139598) *
               C92451 +
           ((C82904 * C7401 + C82905 * C7396 -
             (C63381 * C6164 + C139289 * C6170) * C7402 -
             (C63381 * C6167 + C139289 * C6173) * C139308) *
                C13593 +
            (C81966 * C7401 + C81967 * C7396 -
             (C63381 * C20830 + C139289 * C20834) * C7402 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139598) *
               C139600) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C13593 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C92451 +
            ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
                C139600) *
               C7396 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C13593) *
                C92451) *
               C139308) *
              C139603 +
          ((((C77634 + C77644) * C13593 + (C77631 + C77630) * C139598) *
                C92451 +
            ((C81124 + C81138) * C13593 + (C81127 + C81139) * C139598) *
                C139600) *
               C139308 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C13593) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C13593) *
                C92451) *
               C7396) *
              C139596 +
          ((((C81134 + C81140) * C13593 + (C81131 + C81130) * C139598) *
                C92451 +
            ((C82976 + C82982) * C13593 + (C82979 + C82980) * C139598) *
                C139600) *
               C7396 -
           ((((C63381 * C20904 + C139289 * C20906) * C139346 +
              (C63381 * C20830 + C139289 * C20834) * C181) *
                 C139598 +
             ((C63381 * C6226 + C139289 * C6229) * C139346 +
              (C63381 * C6164 + C139289 * C6170) * C181) *
                 C13593) *
                C139600 +
            ((C81139 + C81127) * C139598 + (C81138 + C81124) * C13593) *
                C92451) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C10840 +
             (C63381 * C245 + C139289 * C251) * C139603 - C77515 * C10841 -
             C77750 * C139596 + C81016 * C10842 + C81245 * C10691) *
                C13593 +
            (C75419 + C75420 - C75421 - C75422 + C75423 + C75424) * C139598) *
               C92451 +
           ((C77515 * C10840 + C77750 * C139603 - C81016 * C10841 -
             C81245 * C139596 + C82904 * C10842 + C83053 * C10691) *
                C13593 +
            (C91792 + C91793 - C91794 - C91795 + C91796 + C91797) * C139598) *
               C139600) *
              C139346 * C7396 +
          (((C77517 * C10841 -
             ((C63381 * C246 + C139289 * C252) * C139603 +
              (C63381 * C108 + C139289 * C114) * C10840) +
             C77751 * C139596 - C81014 * C10842 - C81246 * C10691) *
                C13593 +
            (C70576 * C10841 - (C64094 * C139603 + C63886 * C10840) +
             C70796 * C139596 - C81018 * C10842 - C81247 * C10691) *
                C139598) *
               C92451 +
           ((C81014 * C10841 - (C77751 * C139603 + C77517 * C10840) +
             C81246 * C139596 - (C63381 * C6164 + C139289 * C6170) * C10842 -
             (C63381 * C6286 + C139289 * C6289) * C10691) *
                C13593 +
            (C81018 * C10841 - (C70796 * C139603 + C70576 * C10840) +
             C81247 * C139596 - (C63381 * C20830 + C139289 * C20834) * C10842 -
             (C63381 * C20974 + C139289 * C20976) * C10691) *
                C139598) *
               C139600) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C7401 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C7396 -
            (C13822 + C13823) * C7402 - (C13824 + C13825) * C139308) *
               C92451 +
           ((C110550 + C110551) * C7401 + (C110552 + C110553) * C7396 -
            (C15654 + C15653) * C7402 - (C15656 + C15655) * C139308) *
               C139600) *
              C139289 * C139603 +
          (((C15653 + C15654) * C7402 -
            ((C110553 + C110552) * C7396 + (C110551 + C110550) * C7401) +
            (C15655 + C15656) * C139308) *
               C92451 +
           ((C19280 + C19279) * C7402 -
            ((C113958 + C113959) * C7396 + (C113960 + C113961) * C7401) +
            (C19282 + C19281) * C139308) *
               C139600) *
              C139289 * C139596 +
          (((C113961 + C113960) * C7401 + (C113959 + C113958) * C7396 -
            (C19279 + C19280) * C7402 - (C19281 + C19282) * C139308) *
               C92451 +
           ((C115666 + C115667) * C7401 + (C115668 + C115669) * C7396 -
            (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
             C13593 * C6342) *
                C7402 -
            (C13796 * C20832 + C139598 * C21046 + C13795 * C6167 +
             C13593 * C6345) *
                C139308) *
               C139600) *
              C139289 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C92451 +
            ((C110550 + C110551) * C181 + (C110656 + C110657) * C139346) *
                C139600) *
               C139289 * C7396 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
               C139289 * C139308) *
              C139603 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C92451 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) *
                C139600) *
               C139289 * C139308 -
           (((C114064 + C114065) * C139346 + (C113960 + C113961) * C181) *
                C139600 +
            ((C110657 + C110656) * C139346 + (C110551 + C110550) * C181) *
                C92451) *
               C139289 * C7396) *
              C139596 +
          ((((C113961 + C113960) * C181 + (C114065 + C114064) * C139346) *
                C92451 +
            ((C115666 + C115667) * C181 + (C115740 + C115741) * C139346) *
                C139600) *
               C139289 * C7396 -
           (((C13796 * C20904 + C139598 * C21114 + C13795 * C6226 +
              C13593 * C6398) *
                 C139346 +
             (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
              C13593 * C6342) *
                 C181) *
                C139600 +
            ((C19386 + C19385) * C139346 + (C19279 + C19280) * C181) * C92451) *
               C139289 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C10840 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139603 -
            (C110551 + C110550) * C10841 - (C110760 + C110761) * C139596 +
            (C113961 + C113960) * C10842 + (C114168 + C114169) * C10691) *
               C92451 +
           ((C110550 + C110551) * C10840 + (C110761 + C110760) * C139603 -
            (C113960 + C113961) * C10841 - (C114169 + C114168) * C139596 +
            (C115666 + C115667) * C10842 + (C115813 + C115812) * C10691) *
               C139600) *
              C139289 * C139346 * C7396 +
          (((C15653 + C15654) * C10841 -
            ((C13997 + C13996) * C139603 + (C13822 + C13823) * C10840) +
            (C15878 + C15877) * C139596 - (C19279 + C19280) * C10842 -
            (C19490 + C19489) * C10691) *
               C92451 +
           ((C19280 + C19279) * C10841 -
            ((C15877 + C15878) * C139603 + (C15654 + C15653) * C10840) +
            (C19489 + C19490) * C139596 -
            (C13796 * C20830 + C139598 * C21044 + C13795 * C6164 +
             C13593 * C6342) *
                C10842 -
            (C13796 * C20974 + C139598 * C21183 + C13795 * C6286 +
             C13593 * C6451) *
                C10691) *
               C139600) *
              C139289 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C7401 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C7396 -
            (C92876 + C92877) * C7402 - (C92878 + C92879) * C139308) *
               C139289 * C13593 +
           ((C109938 + C109939) * C7401 + (C109940 + C109941) * C7396 -
            (C93759 + C93758) * C7402 - (C93761 + C93760) * C139308) *
               C139289 * C139598) *
              C139603 +
          (((C94760 + C94761) * C7402 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C7396 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C7401) +
            (C94762 + C94763) * C139308) *
               C139289 * C13593 +
           ((C102507 + C102506) * C7402 -
            ((C113330 + C113331) * C7396 + (C113332 + C113333) * C7401) +
            (C102509 + C102508) * C139308) *
               C139289 * C139598) *
              C139596 +
          (((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C7401 +
            (C92849 * C4663 + C92451 * C5195 + C92850 * C6168 +
             C139600 * C6508) *
                C7396 -
            (C98112 + C98113) * C7402 - (C98114 + C98115) * C139308) *
               C139289 * C13593 +
           ((C115182 + C115183) * C7401 + (C115184 + C115185) * C7396 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C7402 -
            (C92850 * C20832 + C139600 * C21252 + C92849 * C5473 +
             C92451 * C5953) *
                C139308) *
               C139289 * C139598) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eezy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C13593 +
            ((C109938 + C109939) * C181 + (C110045 + C110044) * C139346) *
                C139289 * C139598) *
               C7396 -
           (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
                C139598 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
                C13593) *
               C139308) *
              C139603 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C139289 *
                C13593 +
            ((C102507 + C102506) * C181 + (C102644 + C102645) * C139346) *
                C139289 * C139598) *
               C139308 -
           (((C113445 + C113444) * C139346 + (C113332 + C113333) * C181) *
                C139289 * C139598 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C139289 * C13593) *
               C7396) *
              C139596 +
          ((((C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
              C139600 * C6505) *
                 C181 +
             (C92849 * C4746 + C92451 * C5285 + C92850 * C6227 +
              C139600 * C6561) *
                 C139346) *
                C139289 * C13593 +
            ((C115182 + C115183) * C181 + (C115289 + C115288) * C139346) *
                C139289 * C139598) *
               C7396 -
           (((C92850 * C20904 + C139600 * C21320 + C92849 * C5556 +
              C92451 * C6030) *
                 C139346 +
             (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
              C92451 * C5950) *
                 C181) *
                C139289 * C139598 +
            ((C98219 + C98218) * C139346 + (C98112 + C98113) * C181) * C139289 *
                C13593) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C10840 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139603 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C10841 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139596 +
            (C92849 * C4656 + C92451 * C5191 + C92850 * C6165 +
             C139600 * C6505) *
                C10842 +
            (C92849 * C4831 + C92451 * C5373 + C92850 * C6287 +
             C139600 * C6612) *
                C10691) *
               C139289 * C13593 +
           ((C109938 + C109939) * C10840 + (C110148 + C110149) * C139603 -
            (C113332 + C113333) * C10841 - (C113554 + C113555) * C139596 +
            (C115182 + C115183) * C10842 + (C115392 + C115393) * C10691) *
               C139289 * C139598) *
              C139346 * C7396 +
          (((C94760 + C94761) * C10841 -
            ((C93051 + C93050) * C139603 + (C92876 + C92877) * C10840) +
            (C94985 + C94984) * C139596 - (C98112 + C98113) * C10842 -
            (C98323 + C98322) * C10691) *
               C139289 * C13593 +
           ((C102507 + C102506) * C10841 -
            ((C93982 + C93983) * C139603 + (C93759 + C93758) * C10840) +
            (C102780 + C102781) * C139596 -
            (C92850 * C20830 + C139600 * C21250 + C92849 * C5470 +
             C92451 * C5950) *
                C10842 -
            (C92850 * C20974 + C139600 * C21389 + C92849 * C5636 +
             C92451 * C6107) *
                C10691) *
               C139289 * C139598) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eexx[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C103 +
            (C63381 * C116 + C139289 * C125) * C92 -
            (C63381 * C108 + C139289 * C114) * C104 -
            (C63381 * C117 + C139289 * C126) * C93 +
            (C63381 * C109 + C139289 * C115) * C105 +
            (C63381 * C118 + C139289 * C127) * C94 -
            (C63381 * C110 + C139289 * C119) * C106 -
            (C63381 * C120 + C139289 * C128) * C95) *
               C13593 +
           (C63884 * C103 + C63885 * C92 - C63886 * C104 - C63887 * C93 +
            C63888 * C105 + C63889 * C94 -
            (C63381 * C831 + C139289 * C836) * C106 -
            (C63381 * C841 + C139289 * C847) * C95) *
               C139598) *
              C92451 +
          ((C77515 * C103 + C77516 * C92 - C77517 * C104 - C77518 * C93 +
            C77519 * C105 + C77520 * C94 -
            (C63381 * C1699 + C139289 * C1704) * C106 -
            (C63381 * C1709 + C139289 * C1715) * C95) *
               C13593 +
           (C66548 * C103 + C66547 * C92 - C70576 * C104 - C70577 * C93 +
            C76581 * C105 + C76582 * C94 -
            (C63381 * C8120 + C139289 * C8121) * C106 -
            (C63381 * C8122 + C139289 * C8123) * C95) *
               C139598) *
              C139600) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C13593 +
            (C65294 + C65295 - C65296 - C65297) * C139598) *
               C92451 +
           ((C80996 + C80997 - C80998 - C80999) * C13593 + C89550 * C139598) *
               C139600) *
              C139372 * C2565 +
          (((C65296 - (C65295 + C65294) + C65297) * C13593 +
            (C65300 - (C65299 + C65298) + C65301) * C139598) *
               C92451 +
           (C89551 * C13593 + (C73724 - (C73725 + C73726) + C73727) * C139598) *
               C139600) *
              C139372 * C2566 +
          ((C65320 * C13593 + (C65318 + C65317 - C65316 - C65319) * C139598) *
               C92451 +
           ((C73726 + C73725 - C73724 - C73727) * C13593 +
            (C66549 * C137108 + C66550 * C139562 -
             (C63381 * C17958 + C139289 * C17962) * C137101 -
             (C63381 * C17960 + C139289 * C17964) * C139308) *
                C139598) *
               C139600) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C13593 +
            (C63884 * C181 + C63994 * C139346) * C139598) *
               C92451 +
           ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
               C139600) *
              C92 -
          (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
               C139600 +
           ((C63996 * C139346 + C63886 * C181) * C139598 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C13593) *
               C92451) *
              C93 +
          ((((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C13593 +
            (C63888 * C181 + C63998 * C139346) * C139598) *
               C92451 +
           ((C77635 + C77645) * C13593 + (C77638 + C77639) * C139598) *
               C139600) *
              C94 -
          ((((C63381 * C8222 + C139289 * C8223) * C139346 +
             (C63381 * C8120 + C139289 * C8121) * C181) *
                C139598 +
            ((C63381 * C1793 + C139289 * C1798) * C139346 +
             (C63381 * C1699 + C139289 * C1704) * C181) *
                C13593) *
               C139600 +
           (((C63381 * C928 + C139289 * C933) * C139346 +
             (C63381 * C831 + C139289 * C836) * C181) *
                C139598 +
            ((C63381 * C185 + C139289 * C191) * C139346 +
             (C63381 * C110 + C139289 * C119) * C181) *
                C13593) *
               C92451) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C13593 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C92451 +
           ((C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C13593 +
            (C80102 + C80103 - C80104 - C80105 + C80106 + C80107) * C139598) *
               C139600) *
              C139562 +
          (((C63886 * C2661 -
             ((C63381 * C183 + C139289 * C189) * C2565 +
              (C63381 * C108 + C139289 * C114) * C2660) +
             C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
                C13593 +
            (C63892 * C2661 - (C63996 * C2565 + C63886 * C2660) +
             C63997 * C2566 - C65311 * C2662 - C65400 * C2567) *
                C139598) *
               C92451 +
           ((C70576 * C2661 - (C77641 * C2565 + C77517 * C2660) +
             C70686 * C2566 - C70578 * C2662 - C70687 * C2567) *
                C13593 +
            (C70578 * C2661 - (C70686 * C2565 + C70576 * C2660) +
             C70687 * C2566 - (C63381 * C17958 + C139289 * C17962) * C2662 -
             (C63381 * C18088 + C139289 * C18090) * C2567) *
                C139598) *
               C139600) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C13593 +
            (C64074 + C64098) * C139598) *
               C92451 +
           ((C77515 * C244 + C77750 * C139372) * C13593 +
            (C76784 + C76785) * C139598) *
               C139600) *
              C139346 * C92 -
          (((C76787 + C76786) * C139598 +
            (C77751 * C139372 + C77517 * C244) * C13593) *
               C139600 +
           ((C64100 + C64080) * C139598 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C13593) *
               C92451) *
              C139346 * C93 +
          ((((C63381 * C109 + C139289 * C115) * C244 +
             (C63381 * C247 + C139289 * C253) * C139372) *
                C13593 +
            (C64086 + C64102) * C139598) *
               C92451 +
           ((C77519 * C244 + C77752 * C139372) * C13593 +
            (C76788 + C76792) * C139598) *
               C139600) *
              C139346 * C94 -
          ((((C63381 * C8322 + C139289 * C8323) * C139372 +
             (C63381 * C8120 + C139289 * C8121) * C244) *
                C139598 +
            ((C63381 * C1880 + C139289 * C1885) * C139372 +
             (C63381 * C1699 + C139289 * C1704) * C244) *
                C13593) *
               C139600 +
           (((C63381 * C1012 + C139289 * C1017) * C139372 +
             (C63381 * C831 + C139289 * C836) * C244) *
                C139598 +
            ((C63381 * C248 + C139289 * C254) * C139372 +
             (C63381 * C110 + C139289 * C119) * C244) *
                C13593) *
               C92451) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C13593 +
             (C64074 + C64098) * C139598) *
                C92451 +
            ((C77515 * C244 + C77750 * C139372) * C13593 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C2565 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
                C92451) *
               C2566 +
           ((C65475 * C13593 + (C65478 + C65485) * C139598) * C92451 +
            ((C78660 + C78659) * C13593 + (C79473 + C79474) * C139598) *
                C139600) *
               C2567) *
              C139562 +
          ((((C64080 + C64100) * C13593 + (C64083 + C64101) * C139598) *
                C92451 +
            ((C76786 + C76787) * C13593 + (C78661 + C78662) * C139598) *
                C139600) *
               C2566 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C13593) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C13593) *
                C92451) *
               C2565 -
           ((((C63381 * C18202 + C139289 * C18204) * C139372 +
              (C63381 * C17958 + C139289 * C17962) * C244) *
                 C139598 +
             (C78662 + C78661) * C13593) *
                C139600 +
            ((C65486 + C65479) * C139598 + C65482 * C13593) * C92451) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C103 +
           (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
               C92 -
           (C13822 + C13823) * C104 - (C13824 + C13825) * C93 +
           (C13826 + C13827) * C105 + (C13828 + C13829) * C94 -
           (C13830 + C13831) * C106 - (C13832 + C13833) * C95) *
              C92451 +
          ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
            C139598 * C4161) *
               C103 +
           (C13795 * C1707 + C13593 * C1966 + C13796 * C3900 +
            C139598 * C4167) *
               C92 -
           (C15654 + C15653) * C104 - (C15656 + C15655) * C93 +
           (C15658 + C15657) * C105 + (C15660 + C15659) * C94 -
           (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
            C13593 * C1964) *
               C106 -
           (C13796 * C8122 + C139598 * C8423 + C13795 * C1709 +
            C13593 * C1969) *
               C95) *
              C139600) *
         C139289 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C137108 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139562 -
            (C13822 + C13823) * C137101 - (C13824 + C13825) * C139308) *
               C92451 +
           ((C110550 + C110551) * C137108 + (C110552 + C110553) * C139562 -
            (C15654 + C15653) * C137101 - (C15656 + C15655) * C139308) *
               C139600) *
              C139289 * C139372 * C2565 +
          (((C14686 + C14687) * C137101 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139562 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C137108) +
            (C14688 + C14689) * C139308) *
               C92451 +
           ((C23750 + C23749) * C137101 -
            ((C13796 * C3905 + C139598 * C4172 + C13795 * C3900 +
              C13593 * C4167) *
                 C139562 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C137108) +
            (C23752 + C23751) * C139308) *
               C139600) *
              C139289 * C139372 * C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C137108 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139562 -
            (C16627 + C16628) * C137101 - (C16629 + C16630) * C139308) *
               C92451 +
           ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C137108 +
            (C13795 * C3905 + C13593 * C4172 + C13796 * C17961 +
             C139598 * C18319) *
                C139562 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C137101 -
            (C13796 * C17960 + C139598 * C18318 + C13795 * C3904 +
             C13593 * C4171) *
                C139308) *
               C139600) *
              C139289 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C181 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139346) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C181 +
            (C13795 * C1794 + C13593 * C2066 + C13796 * C3989 +
             C139598 * C4247) *
                C139346) *
               C139600) *
              C139289 * C92 -
          (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
           ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
              C139289 * C93 +
          (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C92451 +
           ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) * C139600) *
              C139289 * C94 -
          (((C13796 * C8222 + C139598 * C8534 + C13795 * C1793 +
             C13593 * C2065) *
                C139346 +
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C181) *
               C139600 +
           ((C13917 + C13916) * C139346 + (C13830 + C13831) * C181) * C92451) *
              C139289 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C92451 +
           ((C110550 + C110551) * C2660 + (C110656 + C110657) * C2565 -
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C2661 -
            (C13796 * C3994 + C139598 * C4248 + C13795 * C3989 +
             C13593 * C4247) *
                C2566 +
            (C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C2662 +
            (C13795 * C3994 + C13593 * C4248 + C13796 * C18089 +
             C139598 * C18418) *
                C2567) *
               C139600) *
              C139289 * C139562 +
          (((C14686 + C14687) * C2661 -
            ((C13913 + C13912) * C2565 + (C13822 + C13823) * C2660) +
            (C14801 + C14800) * C2566 - (C16627 + C16628) * C2662 -
            (C16734 + C16733) * C2567) *
               C92451 +
           ((C23750 + C23749) * C2661 -
            ((C15768 + C15767) * C2565 + (C15654 + C15653) * C2660) +
            (C23887 + C23888) * C2566 -
            (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
             C13593 * C4165) *
                C2662 -
            (C13796 * C18088 + C139598 * C18419 + C13795 * C3993 +
             C13593 * C4250) *
                C2567) *
               C139600) *
              C139289 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C244 +
            (C13795 * C1879 + C13593 * C2159 + C13796 * C4075 +
             C139598 * C4327) *
                C139372) *
               C139600) *
              C139289 * C139346 * C92 -
          (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
           ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
              C139289 * C139346 * C93 +
          (((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C92451 +
           ((C15658 + C15657) * C244 + (C15879 + C15880) * C139372) * C139600) *
              C139289 * C139346 * C94 -
          (((C13796 * C8322 + C139598 * C8647 + C13795 * C1880 +
             C13593 * C2162) *
                C139372 +
            (C13796 * C8120 + C139598 * C8422 + C13795 * C1699 +
             C13593 * C1964) *
                C244) *
               C139600 +
           ((C14001 + C14000) * C139372 + (C13830 + C13831) * C244) * C92451) *
              C139289 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C92451 +
            ((C110550 + C110551) * C244 + (C110761 + C110760) * C139372) *
                C139600) *
               C139289 * C2565 -
           (((C13796 * C4080 + C139598 * C4330 + C13795 * C4075 +
              C13593 * C4327) *
                 C139372 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C244) *
                C139600 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C92451) *
               C139289 * C2566 +
           (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C244 +
             (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
              C139598 * C3654) *
                 C139372) *
                C92451 +
            ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
              C139598 * C18317) *
                 C244 +
             (C13795 * C4080 + C13593 * C4330 + C13796 * C18203 +
              C139598 * C18518) *
                 C139372) *
                C139600) *
               C139289 * C2567) *
              C139562 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C92451 +
            ((C23750 + C23749) * C244 + (C24023 + C24024) * C139372) *
                C139600) *
               C139289 * C2566 -
           (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
               C139289 * C2565 -
           (((C13796 * C18202 + C139598 * C18519 + C13795 * C4079 +
              C13593 * C4331) *
                 C139372 +
             (C13796 * C17958 + C139598 * C18316 + C13795 * C3895 +
              C13593 * C4165) *
                 C244) *
                C139600 +
            ((C16838 + C16837) * C139372 + (C16627 + C16628) * C244) * C92451) *
               C139289 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C103 +
           (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
               C92 -
           (C92876 + C92877) * C104 - (C92878 + C92879) * C93 +
           (C92880 + C92881) * C105 + (C92882 + C92883) * C94 -
           (C92884 + C92885) * C106 - (C92886 + C92887) * C95) *
              C139289 * C13593 +
          ((C92849 * C832 + C92451 * C1396 + C92850 * C3891 + C139600 * C4407) *
               C103 +
           (C92849 * C839 + C92451 * C1400 + C92850 * C3900 + C139600 * C4413) *
               C92 -
           (C93759 + C93758) * C104 - (C93761 + C93760) * C93 +
           (C93763 + C93762) * C105 + (C93765 + C93764) * C94 -
           (C92850 * C8120 + C139600 * C8760 + C92849 * C831 + C92451 * C1398) *
               C106 -
           (C92850 * C8122 + C139600 * C8761 + C92849 * C841 + C92451 * C1403) *
               C95) *
              C139289 * C139598) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C137108 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139562 -
            (C92876 + C92877) * C137101 - (C92878 + C92879) * C139308) *
               C139289 * C13593 +
           ((C109938 + C109939) * C137108 + (C109940 + C109941) * C139562 -
            (C93759 + C93758) * C137101 - (C93761 + C93760) * C139308) *
               C139289 * C139598) *
              C139372 * C2565 +
          (((C93758 + C93759) * C137101 -
            ((C109941 + C109940) * C139562 + (C109939 + C109938) * C137108) +
            (C93760 + C93761) * C139308) *
               C139289 * C13593 +
           ((C95683 + C95682) * C137101 -
            ((C111750 + C111751) * C139562 + (C111752 + C111753) * C137108) +
            (C95685 + C95684) * C139308) *
               C139289 * C139598) *
              C139372 * C2566 +
          (((C111753 + C111752) * C137108 + (C111751 + C111750) * C139562 -
            (C95682 + C95683) * C137101 - (C95684 + C95685) * C139308) *
               C139289 * C13593 +
           ((C92849 * C3367 + C92451 * C3707 + C92850 * C17959 +
             C139600 * C18619) *
                C137108 +
            (C92849 * C3370 + C92451 * C3710 + C92850 * C17961 +
             C139600 * C18621) *
                C139562 -
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C137101 -
            (C92850 * C17960 + C139600 * C18620 + C92849 * C3369 +
             C92451 * C3709) *
                C139308) *
               C139289 * C139598) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C181 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139346) *
               C139289 * C13593 +
           ((C92849 * C832 + C92451 * C1396 + C92850 * C3891 +
             C139600 * C4407) *
                C181 +
            (C92849 * C927 + C92451 * C1497 + C92850 * C3989 +
             C139600 * C4493) *
                C139346) *
               C139289 * C139598) *
              C92 -
          (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
               C139598 +
           ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
               C13593) *
              C93 +
          (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C139289 *
               C13593 +
           ((C93763 + C93762) * C181 + (C93874 + C93875) * C139346) * C139289 *
               C139598) *
              C94 -
          (((C92850 * C8222 + C139600 * C8872 + C92849 * C928 +
             C92451 * C1500) *
                C139346 +
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C181) *
               C139289 * C139598 +
           ((C92971 + C92970) * C139346 + (C92884 + C92885) * C181) * C139289 *
               C13593) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C109939 + C109938) * C2661 - (C110044 + C110045) * C2566 +
            (C111753 + C111752) * C2662 + (C111856 + C111857) * C2567) *
               C139289 * C13593 +
           ((C109938 + C109939) * C2660 + (C110045 + C110044) * C2565 -
            (C111752 + C111753) * C2661 - (C111857 + C111856) * C2566 +
            (C92849 * C3367 + C92451 * C3707 + C92850 * C17959 +
             C139600 * C18619) *
                C2662 +
            (C92849 * C3433 + C92451 * C3761 + C92850 * C18089 +
             C139600 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139562 +
          (((C93758 + C93759) * C2661 -
            ((C92967 + C92966) * C2565 + (C92876 + C92877) * C2660) +
            (C93873 + C93872) * C2566 - (C95682 + C95683) * C2662 -
            (C95789 + C95788) * C2567) *
               C139289 * C13593 +
           ((C95683 + C95682) * C2661 -
            ((C93872 + C93873) * C2565 + (C93759 + C93758) * C2660) +
            (C95788 + C95789) * C2566 -
            (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
             C92451 * C3706) *
                C2662 -
            (C92850 * C18088 + C139600 * C18747 + C92849 * C3432 +
             C92451 * C3762) *
                C2567) *
               C139289 * C139598) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[117] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C13593 +
           ((C92849 * C832 + C92451 * C1396 + C92850 * C3891 +
             C139600 * C4407) *
                C244 +
            (C92849 * C1011 + C92451 * C1602 + C92850 * C4075 +
             C139600 * C4573) *
                C139372) *
               C139289 * C139598) *
              C139346 * C92 -
          (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
               C139598 +
           ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
               C13593) *
              C139346 * C93 +
          (((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C139289 *
               C13593 +
           ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) * C139289 *
               C139598) *
              C139346 * C94 -
          (((C92850 * C8322 + C139600 * C8985 + C92849 * C1012 +
             C92451 * C1603) *
                C139372 +
            (C92850 * C8120 + C139600 * C8760 + C92849 * C831 +
             C92451 * C1398) *
                C244) *
               C139289 * C139598 +
           ((C93055 + C93054) * C139372 + (C92884 + C92885) * C244) * C139289 *
               C13593) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C13593 +
            ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
                C139289 * C139598) *
               C2565 -
           (((C111960 + C111961) * C139372 + (C111752 + C111753) * C244) *
                C139289 * C139598 +
            ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
                C139289 * C13593) *
               C2566 +
           (((C111753 + C111752) * C244 + (C111961 + C111960) * C139372) *
                C139289 * C13593 +
            ((C92849 * C3367 + C92451 * C3707 + C92850 * C17959 +
              C139600 * C18619) *
                 C244 +
             (C92849 * C3489 + C92451 * C3816 + C92850 * C18203 +
              C139600 * C18855) *
                 C139372) *
                C139289 * C139598) *
               C2567) *
              C139562 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C139289 *
                C13593 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139289 *
                C139598) *
               C2566 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
                C139598 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
                C13593) *
               C2565 -
           (((C92850 * C18202 + C139600 * C18856 + C92849 * C3488 +
              C92451 * C3815) *
                 C139372 +
             (C92850 * C17958 + C139600 * C18618 + C92849 * C3366 +
              C92451 * C3706) *
                 C244) *
                C139289 * C139598 +
            ((C95893 + C95892) * C139372 + (C95682 + C95683) * C244) * C139289 *
                C13593) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eexx[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C92451 +
           ((C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C13593 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139372 * C139570 +
          (((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C13593 +
            (C63904 - (C63903 + C63902) + C63905 - C63906 - C63907) * C139598) *
               C92451 +
           ((C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C13593 +
            (C70578 * C827 - (C66545 * C821 + C66546 * C826) + C70579 * C822 -
             (C63381 * C3894 + C139289 * C3906) * C828 -
             (C63381 * C3903 + C139289 * C3912) * C823) *
                C139598) *
               C139600) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C13593 +
            (C65996 + C65997) * C139598) *
               C92451 +
           ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
              C139372 * C3360 -
          ((C66557 * C139598 + C79996 * C13593) * C139600 +
           ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
               C92451) *
              C139372 * C3361 +
          ((C66006 * C13593 + (C66001 + C66000) * C139598) * C92451 +
           (C79997 * C13593 + (C66555 + C66556) * C139598) * C139600) *
              C139372 * C3362 -
          ((((C63381 * C66529 + C139289 * C66531) * C139303 +
             (C63381 * C66528 + C139289 * C66530) * C3364) *
                C139598 +
            (C66556 + C66555) * C13593) *
               C139600 +
           ((C66011 + C66010) * C139598 + C66007 * C13593) * C92451) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C13593 +
            (C63884 * C923 + C63994 * C139570 - C63890 * C924 -
             C63995 * C139360) *
                C139598) *
               C92451 +
           ((C82068 + C82069 - C82070 - C82071) * C13593 +
            (C82072 + C82073 - C82074 - C82075) * C139598) *
               C139600) *
              C821 +
          (((C63886 * C924 -
             ((C63381 * C183 + C139289 * C189) * C139570 +
              (C63381 * C108 + C139289 * C114) * C923) +
             C63996 * C139360) *
                C13593 +
            (C63892 * C924 - (C63996 * C139570 + C63886 * C923) +
             C63997 * C139360) *
                C139598) *
               C92451 +
           ((C87604 - (C87605 + C87606) + C87607) * C13593 +
            (C87608 - (C87609 + C87610) + C87611) * C139598) *
               C139600) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C923 +
             (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
             C63998 * C139360) *
                C13593 +
            (C63888 * C923 + C63998 * C139570 - C63894 * C924 -
             C63999 * C139360) *
                C139598) *
               C92451 +
           ((C77519 * C923 + C77642 * C139570 - C76581 * C924 -
             C76685 * C139360) *
                C13593 +
            (C76581 * C923 + C76685 * C139570 -
             (C63381 * C3894 + C139289 * C3906) * C924 -
             (C63381 * C3992 + C139289 * C3998) * C139360) *
                C139598) *
               C139600) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3427 +
            (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
            C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
            C65399 * C3363) *
               C13593 +
           (C63884 * C3427 + C63994 * C3360 - C63890 * C3428 - C63995 * C3361 +
            C65313 * C3429 + C65399 * C3362 - C66008 * C3430 - C66066 * C3363) *
               C139598) *
              C92451 +
          ((C77515 * C3427 + C77640 * C3360 - C66548 * C3428 - C66640 * C3361 +
            C66546 * C3429 + C66641 * C3362 - C66549 * C3430 - C66642 * C3363) *
               C13593 +
           (C66548 * C3427 + C66640 * C3360 - C66546 * C3428 - C66641 * C3361 +
            C66549 * C3429 + C66642 * C3362 -
            (C63381 * C66528 + C139289 * C66530) * C3430 -
            (C63381 * C66631 + C139289 * C66632) * C3363) *
               C139598) *
              C139600) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C244 +
              (C63381 * C245 + C139289 * C251) * C139372) *
                 C13593 +
             (C64074 + C64098) * C139598) *
                C92451 +
            ((C77515 * C244 + C77750 * C139372) * C13593 +
             (C76784 + C76785) * C139598) *
                C139600) *
               C139570 -
           (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
                C139600 +
            ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
                C92451) *
               C139360) *
              C821 +
          ((((C64080 + C64100) * C13593 + (C64083 + C64101) * C139598) *
                C92451 +
            ((C76786 + C76787) * C13593 + (C78661 + C78662) * C139598) *
                C139600) *
               C139360 -
           (((C76787 + C76786) * C139598 +
             (C77751 * C139372 + C77517 * C244) * C13593) *
                C139600 +
            ((C64100 + C64080) * C139598 +
             ((C63381 * C246 + C139289 * C252) * C139372 +
              (C63381 * C108 + C139289 * C114) * C244) *
                 C13593) *
                C92451) *
               C139570) *
              C822 +
          (((((C63381 * C109 + C139289 * C115) * C244 +
              (C63381 * C247 + C139289 * C253) * C139372) *
                 C13593 +
             (C64086 + C64102) * C139598) *
                C92451 +
            ((C77519 * C244 + C77752 * C139372) * C13593 +
             (C76788 + C76792) * C139598) *
                C139600) *
               C139570 -
           ((((C63381 * C4078 + C139289 * C4084) * C139372 +
              (C63381 * C3894 + C139289 * C3906) * C244) *
                 C139598 +
             (C76792 + C76788) * C13593) *
                C139600 +
            ((C64103 + C64089) * C139598 + (C64102 + C64086) * C13593) *
                C92451) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C13593 +
            (C64074 + C64098) * C139598) *
               C92451 +
           ((C77515 * C244 + C77750 * C139372) * C13593 +
            (C76784 + C76785) * C139598) *
               C139600) *
              C3360 -
          (((C78659 + C78660) * C139598 + (C76785 + C76784) * C13593) *
               C139600 +
           ((C64099 + C64077) * C139598 + (C64098 + C64074) * C13593) *
               C92451) *
              C3361 +
          ((C65475 * C13593 + (C65478 + C65485) * C139598) * C92451 +
           ((C78660 + C78659) * C13593 + (C79473 + C79474) * C139598) *
               C139600) *
              C3362 -
          ((((C63381 * C66716 + C139289 * C66717) * C139372 +
             (C63381 * C66528 + C139289 * C66530) * C244) *
                C139598 +
            (C79474 + C79473) * C13593) *
               C139600 +
           ((C66124 + C66120) * C139598 + C66119 * C13593) * C92451) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C826 +
            (C13795 * C1707 + C13593 * C1966 + C13796 * C3900 +
             C139598 * C4167) *
                C821 -
            (C15654 + C15653) * C827 - (C15656 + C15655) * C822 +
            (C15658 + C15657) * C828 + (C15660 + C15659) * C823) *
               C139600) *
              C139289 * C139372 * C139570 +
          (((C14686 + C14687) * C827 -
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C821 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C826) +
            (C14688 + C14689) * C822 - (C14690 + C14691) * C828 -
            (C14692 + C14693) * C823) *
               C92451 +
           ((C23750 + C23749) * C827 -
            ((C13796 * C3905 + C139598 * C4172 + C13795 * C3900 +
              C13593 * C4167) *
                 C821 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C826) +
            (C23752 + C23751) * C822 -
            (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
             C13593 * C4163) *
                C828 -
            (C13796 * C3903 + C139598 * C4170 + C13795 * C3902 +
             C13593 * C4169) *
                C823) *
               C139600) *
              C139289 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C3364 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C139303) *
               C92451 +
           ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
               C139600) *
              C139289 * C139372 * C3360 -
          (((C13796 * C3905 + C139598 * C4172 + C13795 * C3900 +
             C13593 * C4167) *
                C139303 +
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C3364) *
               C139600 +
           ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
             C13593 * C1098) *
                C139303 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C3364) *
               C92451) *
              C139289 * C139372 * C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C3364 +
            (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
             C139598 * C3548) *
                C139303) *
               C92451 +
           ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C3364 +
            (C13795 * C3905 + C13593 * C4172 + C13796 * C17961 +
             C139598 * C18319) *
                C139303) *
               C139600) *
              C139289 * C139372 * C3362 -
          (((C13796 * C66529 + C139598 * C66817 + C13795 * C17961 +
             C13593 * C18319) *
                C139303 +
            (C13796 * C66528 + C139598 * C66816 + C13795 * C17959 +
             C13593 * C18317) *
                C3364) *
               C139600 +
           ((C13796 * C17253 + C139598 * C17491 + C13795 * C3370 +
             C13593 * C3548) *
                C139303 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C3364) *
               C92451) *
              C139289 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C923 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C139570 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C924 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C139360) *
               C92451 +
           ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
             C139598 * C4161) *
                C923 +
            (C13795 * C1794 + C13593 * C2066 + C13796 * C3989 +
             C139598 * C4247) *
                C139570 -
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C924 -
            (C13796 * C3994 + C139598 * C4248 + C13795 * C3989 +
             C13593 * C4247) *
                C139360) *
               C139600) *
              C139289 * C821 +
          (((C14686 + C14687) * C924 -
            ((C13913 + C13912) * C139570 + (C13822 + C13823) * C923) +
            (C14801 + C14800) * C139360) *
               C92451 +
           ((C23750 + C23749) * C924 -
            ((C15768 + C15767) * C139570 + (C15654 + C15653) * C923) +
            (C23887 + C23888) * C139360) *
               C139600) *
              C139289 * C822 +
          (((C13826 + C13827) * C923 + (C13915 + C13914) * C139570 -
            (C14690 + C14691) * C924 - (C14803 + C14802) * C139360) *
               C92451 +
           ((C15658 + C15657) * C923 + (C15769 + C15770) * C139570 -
            (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
             C13593 * C4163) *
                C924 -
            (C13796 * C3992 + C139598 * C4252 + C13795 * C3991 +
             C13593 * C4251) *
                C139360) *
               C139600) *
              C139289 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
               C3427 +
           (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
               C3360 -
           (C13796 * C2570 + C139598 * C2827 + C13795 * C832 + C13593 * C1094) *
               C3428 -
           (C13796 * C2663 + C139598 * C2921 + C13795 * C927 + C13593 * C1195) *
               C3361 +
           (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
            C139598 * C3545) *
               C3429 +
           (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
            C139598 * C3599) *
               C3362 -
           (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
            C13593 * C3545) *
               C3430 -
           (C13796 * C17337 + C139598 * C17558 + C13795 * C3433 +
            C13593 * C3599) *
               C3363) *
              C92451 +
          ((C110550 + C110551) * C3427 + (C110656 + C110657) * C3360 -
           (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
            C13593 * C4161) *
               C3428 -
           (C13796 * C3994 + C139598 * C4248 + C13795 * C3989 +
            C13593 * C4247) *
               C3361 +
           (C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
            C139598 * C18317) *
               C3429 +
           (C13795 * C3994 + C13593 * C4248 + C13796 * C18089 +
            C139598 * C18418) *
               C3362 -
           (C13796 * C66528 + C139598 * C66816 + C13795 * C17959 +
            C13593 * C18317) *
               C3430 -
           (C13796 * C66631 + C139598 * C66892 + C13795 * C18089 +
            C13593 * C18418) *
               C3363) *
              C139600) *
         C139289 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C244 +
             (C13795 * C245 + C13593 * C474 + C13796 * C1011 +
              C139598 * C1301) *
                 C139372) *
                C92451 +
            ((C13795 * C1700 + C13593 * C1962 + C13796 * C3891 +
              C139598 * C4161) *
                 C244 +
             (C13795 * C1879 + C13593 * C2159 + C13796 * C4075 +
              C139598 * C4327) *
                 C139372) *
                C139600) *
               C139289 * C139570 -
           (((C13796 * C4080 + C139598 * C4330 + C13795 * C4075 +
              C13593 * C4327) *
                 C139372 +
             (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
              C13593 * C4161) *
                 C244) *
                C139600 +
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139372 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C244) *
                C92451) *
               C139289 * C139360) *
              C821 +
          ((((C14686 + C14687) * C244 + (C14911 + C14910) * C139372) * C92451 +
            ((C23750 + C23749) * C244 + (C24023 + C24024) * C139372) *
                C139600) *
               C139289 * C139360 -
           (((C15877 + C15878) * C139372 + (C15654 + C15653) * C244) * C139600 +
            ((C13997 + C13996) * C139372 + (C13822 + C13823) * C244) * C92451) *
               C139289 * C139570) *
              C822 +
          ((((C13826 + C13827) * C244 + (C13999 + C13998) * C139372) * C92451 +
            ((C15658 + C15657) * C244 + (C15879 + C15880) * C139372) *
                C139600) *
               C139289 * C139570 -
           (((C13796 * C4078 + C139598 * C4332 + C13795 * C4077 +
              C13593 * C4329) *
                 C139372 +
             (C13796 * C3894 + C139598 * C4164 + C13795 * C3893 +
              C13593 * C4163) *
                 C244) *
                C139600 +
            ((C14913 + C14912) * C139372 + (C14690 + C14691) * C244) * C92451) *
               C139289 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C244 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139372) *
               C92451 +
           ((C110550 + C110551) * C244 + (C110761 + C110760) * C139372) *
               C139600) *
              C139289 * C3360 -
          (((C13796 * C4080 + C139598 * C4330 + C13795 * C4075 +
             C13593 * C4327) *
                C139372 +
            (C13796 * C3896 + C139598 * C4166 + C13795 * C3891 +
             C13593 * C4161) *
                C244) *
               C139600 +
           ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
             C13593 * C1301) *
                C139372 +
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C244) *
               C92451) *
              C139289 * C3361 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C244 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139372) *
               C92451 +
           ((C13795 * C3896 + C13593 * C4166 + C13796 * C17959 +
             C139598 * C18317) *
                C244 +
            (C13795 * C4080 + C13593 * C4330 + C13796 * C18203 +
             C139598 * C18518) *
                C139372) *
               C139600) *
              C139289 * C3362 -
          (((C13796 * C66716 + C139598 * C66967 + C13795 * C18203 +
             C13593 * C18518) *
                C139372 +
            (C13796 * C66528 + C139598 * C66816 + C13795 * C17959 +
             C13593 * C18317) *
                C244) *
               C139600 +
           ((C13796 * C17413 + C139598 * C17627 + C13795 * C3489 +
             C13593 * C3654) *
                C139372 +
            (C13796 * C17251 + C139598 * C17489 + C13795 * C3367 +
             C13593 * C3545) *
                C244) *
               C92451) *
              C139289 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C139289 * C13593 +
           ((C109938 + C109939) * C826 + (C109940 + C109941) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C822 +
            (C93763 + C93762) * C828 + (C93765 + C93764) * C823) *
               C139289 * C139598) *
              C139372 * C139570 +
          (((C93758 + C93759) * C827 -
            ((C109941 + C109940) * C821 + (C109939 + C109938) * C826) +
            (C93760 + C93761) * C822 - (C93762 + C93763) * C828 -
            (C93764 + C93765) * C823) *
               C139289 * C13593 +
           ((C95683 + C95682) * C827 -
            ((C92850 * C3905 + C139600 * C4418 + C92849 * C2577 +
              C92451 * C3109) *
                 C821 +
             (C92850 * C3896 + C139600 * C4412 + C92849 * C2570 +
              C92451 * C3105) *
                 C826) +
            (C95685 + C95684) * C822 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C828 -
            (C92850 * C3903 + C139600 * C4416 + C92849 * C2579 +
             C92451 * C3111) *
                C823) *
               C139289 * C139598) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C3364 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C139303) *
               C139289 * C13593 +
           ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
               C139289 * C139598) *
              C139372 * C3360 -
          (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
               C139289 * C139598 +
           ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
               C139289 * C13593) *
              C139372 * C3361 +
          (((C111753 + C111752) * C3364 + (C111751 + C111750) * C139303) *
               C139289 * C13593 +
           ((C112432 + C112433) * C3364 + (C112434 + C112435) * C139303) *
               C139289 * C139598) *
              C139372 * C3362 -
          (((C92850 * C66529 + C139600 * C67043 + C92849 * C17253 +
             C92451 * C17697) *
                C139303 +
            (C92850 * C66528 + C139600 * C67042 + C92849 * C17251 +
             C92451 * C17695) *
                C3364) *
               C139289 * C139598 +
           ((C112435 + C112434) * C139303 + (C112433 + C112432) * C3364) *
               C139289 * C13593) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C923 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C139570 -
            (C109939 + C109938) * C924 - (C110044 + C110045) * C139360) *
               C139289 * C13593 +
           ((C109938 + C109939) * C923 + (C110045 + C110044) * C139570 -
            (C92850 * C3896 + C139600 * C4412 + C92849 * C2570 +
             C92451 * C3105) *
                C924 -
            (C92850 * C3994 + C139600 * C4494 + C92849 * C2663 +
             C92451 * C3199) *
                C139360) *
               C139289 * C139598) *
              C821 +
          (((C93758 + C93759) * C924 -
            ((C92967 + C92966) * C139570 + (C92876 + C92877) * C923) +
            (C93873 + C93872) * C139360) *
               C139289 * C13593 +
           ((C95683 + C95682) * C924 -
            ((C93872 + C93873) * C139570 + (C93759 + C93758) * C923) +
            (C95788 + C95789) * C139360) *
               C139289 * C139598) *
              C822 +
          (((C92880 + C92881) * C923 + (C92969 + C92968) * C139570 -
            (C93762 + C93763) * C924 - (C93875 + C93874) * C139360) *
               C139289 * C13593 +
           ((C93763 + C93762) * C923 + (C93874 + C93875) * C139570 -
            (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
             C92451 * C3107) *
                C924 -
            (C92850 * C3992 + C139600 * C4498 + C92849 * C2665 +
             C92451 * C3201) *
                C139360) *
               C139289 * C139598) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
               C3427 +
           (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
               C3360 -
           (C109939 + C109938) * C3428 - (C110044 + C110045) * C3361 +
           (C111753 + C111752) * C3429 + (C111856 + C111857) * C3362 -
           (C112433 + C112432) * C3430 - (C112506 + C112507) * C3363) *
              C139289 * C13593 +
          ((C109938 + C109939) * C3427 + (C110045 + C110044) * C3360 -
           (C111752 + C111753) * C3428 - (C111857 + C111856) * C3361 +
           (C112432 + C112433) * C3429 + (C112507 + C112506) * C3362 -
           (C92850 * C66528 + C139600 * C67042 + C92849 * C17251 +
            C92451 * C17695) *
               C3430 -
           (C92850 * C66631 + C139600 * C67128 + C92849 * C17337 +
            C92451 * C17782) *
               C3363) *
              C139289 * C139598) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eezz[118] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C244 +
             (C92849 * C245 + C92451 * C719 + C92850 * C1879 +
              C139600 * C2460) *
                 C139372) *
                C139289 * C13593 +
            ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
                C139289 * C139598) *
               C139570 -
           (((C92850 * C4080 + C139600 * C4576 + C92849 * C2745 +
              C92451 * C3295) *
                 C139372 +
             (C92850 * C3896 + C139600 * C4412 + C92849 * C2570 +
              C92451 * C3105) *
                 C244) *
                C139289 * C139598 +
            ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
                C139289 * C13593) *
               C139360) *
              C821 +
          ((((C93758 + C93759) * C244 + (C93983 + C93982) * C139372) * C139289 *
                C13593 +
            ((C95683 + C95682) * C244 + (C95892 + C95893) * C139372) * C139289 *
                C139598) *
               C139360 -
           (((C93982 + C93983) * C139372 + (C93759 + C93758) * C244) * C139289 *
                C139598 +
            ((C93051 + C93050) * C139372 + (C92876 + C92877) * C244) * C139289 *
                C13593) *
               C139570) *
              C822 +
          ((((C92880 + C92881) * C244 + (C93053 + C93052) * C139372) * C139289 *
                C13593 +
            ((C93763 + C93762) * C244 + (C93984 + C93985) * C139372) * C139289 *
                C139598) *
               C139570 -
           (((C92850 * C4078 + C139600 * C4578 + C92849 * C2747 +
              C92451 * C3297) *
                 C139372 +
             (C92850 * C3894 + C139600 * C4410 + C92849 * C2572 +
              C92451 * C3107) *
                 C244) *
                C139289 * C139598 +
            ((C93985 + C93984) * C139372 + (C93762 + C93763) * C244) * C139289 *
                C13593) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C244 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139372) *
               C139289 * C13593 +
           ((C109938 + C109939) * C244 + (C110148 + C110149) * C139372) *
               C139289 * C139598) *
              C3360 -
          (((C111960 + C111961) * C139372 + (C111752 + C111753) * C244) *
               C139289 * C139598 +
           ((C110149 + C110148) * C139372 + (C109939 + C109938) * C244) *
               C139289 * C13593) *
              C3361 +
          (((C111753 + C111752) * C244 + (C111961 + C111960) * C139372) *
               C139289 * C13593 +
           ((C112432 + C112433) * C244 + (C112578 + C112579) * C139372) *
               C139289 * C139598) *
              C3362 -
          (((C92850 * C66716 + C139600 * C67206 + C92849 * C17413 +
             C92451 * C17854) *
                C139372 +
            (C92850 * C66528 + C139600 * C67042 + C92849 * C17251 +
             C92451 * C17695) *
                C244) *
               C139289 * C139598 +
           ((C112579 + C112578) * C139372 + (C112433 + C112432) * C244) *
               C139289 * C13593) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C826 +
             (C63381 * C116 + C139289 * C125) * C821 -
             (C63381 * C108 + C139289 * C114) * C827 -
             (C63381 * C117 + C139289 * C126) * C822 +
             (C63381 * C109 + C139289 * C115) * C828 +
             (C63381 * C118 + C139289 * C127) * C823) *
                C13593 +
            (C63896 + C63897 - C63898 - C63899 + C63900 + C63901) * C139598) *
               C92451 +
           ((C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C13593 +
            (C76573 + C76574 - C76575 - C76576 + C76583 + C76584) * C139598) *
               C139600) *
              C139571 +
          (((C77523 - (C77522 + C77521) + C77524 - C77525 - C77526) * C13593 +
            (C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C139598) *
               C92451 +
           ((C81014 * C827 - (C81015 * C821 + C81016 * C826) + C81017 * C822 -
             (C63381 * C4658 + C139289 * C4662) * C828 -
             (C63381 * C4665 + C139289 * C4670) * C823) *
                C13593 +
            (C81018 * C827 - (C67972 * C821 + C67971 * C826) + C81019 * C822 -
             (C63381 * C5469 + C139289 * C5475) * C828 -
             (C63381 * C5472 + C139289 * C5478) * C823) *
                C139598) *
               C139600) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C3364 +
              (C63381 * C116 + C139289 * C125) * C139303) *
                 C13593 +
             (C65996 + C65997) * C139598) *
                C92451 +
            ((C79993 + C79994) * C13593 + C79995 * C139598) * C139600) *
               C139571 -
           ((C81958 * C139598 + (C81959 + C81960) * C13593) * C139600 +
            (C79996 * C139598 + (C79994 + C79993) * C13593) * C92451) *
               C139384) *
              C2565 +
          (((C79995 * C13593 + C79997 * C139598) * C92451 +
            (C81961 * C13593 + (C67977 + C67978) * C139598) * C139600) *
               C139384 -
           ((C66557 * C139598 + C79996 * C13593) * C139600 +
            ((C65999 + C65998) * C139598 + (C65997 + C65996) * C13593) *
                C92451) *
               C139571) *
              C2566 +
          (((C66006 * C13593 + (C66001 + C66000) * C139598) * C92451 +
            (C79997 * C13593 + (C66555 + C66556) * C139598) * C139600) *
               C139571 -
           ((((C63381 * C67959 + C139289 * C67961) * C139303 +
              (C63381 * C67958 + C139289 * C67960) * C3364) *
                 C139598 +
             (C67978 + C67977) * C13593) *
                C139600 +
            ((C66556 + C66555) * C139598 + C66557 * C13593) * C92451) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C63381 * C107 + C139289 * C113) * C181 +
              (C63381 * C182 + C139289 * C188) * C139346) *
                 C13593 +
             (C63884 * C181 + C63994 * C139346) * C139598) *
                C92451 +
            ((C77625 + C77643) * C13593 + (C77628 + C77629) * C139598) *
                C139600) *
               C821 -
           (((C77630 + C77631) * C139598 + (C77644 + C77634) * C13593) *
                C139600 +
            ((C63996 * C139346 + C63886 * C181) * C139598 +
             ((C63381 * C183 + C139289 * C189) * C139346 +
              (C63381 * C108 + C139289 * C114) * C181) *
                 C13593) *
                C92451) *
               C822 +
           ((((C63381 * C109 + C139289 * C115) * C181 +
              (C63381 * C184 + C139289 * C190) * C139346) *
                 C13593 +
             (C63888 * C181 + C63998 * C139346) * C139598) *
                C92451 +
            ((C77635 + C77645) * C13593 + (C77638 + C77639) * C139598) *
                C139600) *
               C823) *
              C139571 +
          ((((C77634 + C77644) * C13593 + (C77631 + C77630) * C139598) *
                C92451 +
            ((C81124 + C81138) * C13593 + (C81127 + C81139) * C139598) *
                C139600) *
               C822 -
           (((C81130 + C81131) * C139598 + (C81140 + C81134) * C13593) *
                C139600 +
            ((C77629 + C77628) * C139598 + (C77643 + C77625) * C13593) *
                C92451) *
               C821 -
           ((((C63381 * C5555 + C139289 * C5558) * C139346 +
              (C63381 * C5469 + C139289 * C5475) * C181) *
                 C139598 +
             ((C63381 * C4748 + C139289 * C4752) * C139346 +
              (C63381 * C4658 + C139289 * C4662) * C181) *
                 C13593) *
                C139600 +
            ((C77639 + C77638) * C139598 + (C77645 + C77635) * C13593) *
                C92451) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C2660 +
             (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
             C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
                C13593 +
            (C63884 * C2660 + C63994 * C2565 - C63890 * C2661 - C63995 * C2566 +
             C65313 * C2662 + C65399 * C2567) *
                C139598) *
               C92451 +
           ((C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C13593 +
            (C80102 + C80103 - C80104 - C80105 + C80106 + C80107) * C139598) *
               C139600) *
              C139303 * C139571 +
          (((C80098 - (C80097 + C80096) + C80099 - C80100 - C80101) * C13593 +
            (C80104 - (C80103 + C80102) + C80105 - C80106 - C80107) * C139598) *
               C92451 +
           ((C67971 * C2661 - (C81137 * C2565 + C81016 * C2660) +
             C68059 * C2566 - C67973 * C2662 - C68060 * C2567) *
                C13593 +
            (C67973 * C2661 - (C68059 * C2565 + C67971 * C2660) +
             C68060 * C2566 - (C63381 * C67958 + C139289 * C67960) * C2662 -
             (C63381 * C68052 + C139289 * C68053) * C2567) *
                C139598) *
               C139600) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C13593 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C92451 +
           ((C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
             C81245 * C139384) *
                C13593 +
            (C80206 + C80207 - C80208 - C80209) * C139598) *
               C139600) *
              C139346 * C821 +
          (((C77517 * C1876 -
             ((C63381 * C246 + C139289 * C252) * C139571 +
              (C63381 * C108 + C139289 * C114) * C1875) +
             C77751 * C139384) *
                C13593 +
            (C70786 - (C70787 + C70788) + C70798) * C139598) *
               C92451 +
           ((C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
             C81246 * C139384) *
                C13593 +
            (C85672 - (C85673 + C85674) + C85675) * C139598) *
               C139600) *
              C139346 * C822 +
          ((((C63381 * C109 + C139289 * C115) * C1875 +
             (C63381 * C247 + C139289 * C253) * C139571 - C77519 * C1876 -
             C77752 * C139384) *
                C13593 +
            (C63888 * C1875 + C64096 * C139571 - C76581 * C1876 -
             C76791 * C139384) *
                C139598) *
               C92451 +
           ((C77519 * C1875 + C77752 * C139571 -
             (C63381 * C4658 + C139289 * C4662) * C1876 -
             (C63381 * C4833 + C139289 * C4837) * C139384) *
                C13593 +
            (C76581 * C1875 + C76791 * C139571 -
             (C63381 * C5469 + C139289 * C5475) * C1876 -
             (C63381 * C5635 + C139289 * C5638) * C139384) *
                C139598) *
               C139600) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C13593 +
            (C66719 + C66720 - C66721 - C66738) * C139598) *
               C92451 +
           ((C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
             C81245 * C139384) *
                C13593 +
            (C80206 + C80207 - C80208 - C80209) * C139598) *
               C139600) *
              C2565 +
          (((C66721 - (C66720 + C66719) + C66738) * C13593 +
            (C66726 - (C66725 + C66724) + C66740) * C139598) *
               C92451 +
           ((C80208 - (C80207 + C80206) + C80209) * C13593 +
            (C80210 - (C80211 + C80212) + C80213) * C139598) *
               C139600) *
              C2566 +
          ((C66742 * C13593 + (C66731 + C66730 - C66729 - C66741) * C139598) *
               C92451 +
           ((C80212 + C80211 - C80210 - C80213) * C13593 +
            (C66549 * C1875 + C66737 * C139571 -
             (C63381 * C67958 + C139289 * C67960) * C1876 -
             (C63381 * C68134 + C139289 * C68135) * C139384) *
                C139598) *
               C139600) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C826 +
            (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                C821 -
            (C13822 + C13823) * C827 - (C13824 + C13825) * C822 +
            (C13826 + C13827) * C828 + (C13828 + C13829) * C823) *
               C92451 +
           ((C110550 + C110551) * C826 + (C110552 + C110553) * C821 -
            (C15654 + C15653) * C827 - (C15656 + C15655) * C822 +
            (C15658 + C15657) * C828 + (C15660 + C15659) * C823) *
               C139600) *
              C139289 * C139571 +
          (((C15653 + C15654) * C827 -
            ((C110553 + C110552) * C821 + (C110551 + C110550) * C826) +
            (C15655 + C15656) * C822 - (C15657 + C15658) * C828 -
            (C15659 + C15660) * C823) *
               C92451 +
           ((C19280 + C19279) * C827 -
            ((C13796 * C5474 + C139598 * C5720 + C13795 * C4663 +
              C13593 * C4917) *
                 C821 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C826) +
            (C19282 + C19281) * C822 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C828 -
            (C13796 * C5472 + C139598 * C5718 + C13795 * C4665 +
             C13593 * C4919) *
                C823) *
               C139600) *
              C139289 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C3364 +
             (C13795 * C116 + C13593 * C314 + C13796 * C839 + C139598 * C1098) *
                 C139303) *
                C92451 +
            ((C110550 + C110551) * C3364 + (C110552 + C110553) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C13796 * C5474 + C139598 * C5720 + C13795 * C4663 +
              C13593 * C4917) *
                 C139303 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C3364) *
                C139600 +
            ((C110553 + C110552) * C139303 + (C110551 + C110550) * C3364) *
                C92451) *
               C139289 * C139384) *
              C2565 +
          ((((C112988 + C112989) * C3364 + (C112990 + C112991) * C139303) *
                C92451 +
            ((C13795 * C5471 + C13593 * C5717 + C13796 * C19903 +
              C139598 * C20237) *
                 C3364 +
             (C13795 * C5474 + C13593 * C5720 + C13796 * C19905 +
              C139598 * C20239) *
                 C139303) *
                C139600) *
               C139289 * C139384 -
           (((C112991 + C112990) * C139303 + (C112989 + C112988) * C3364) *
                C139600 +
            ((C13796 * C2577 + C139598 * C2831 + C13795 * C839 +
              C13593 * C1098) *
                 C139303 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C3364) *
                C92451) *
               C139289 * C139571) *
              C2566 +
          ((((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
              C139598 * C3545) *
                 C3364 +
             (C13795 * C2577 + C13593 * C2831 + C13796 * C3370 +
              C139598 * C3548) *
                 C139303) *
                C92451 +
            ((C112992 + C112993) * C3364 + (C112994 + C112995) * C139303) *
                C139600) *
               C139289 * C139571 -
           (((C13796 * C67959 + C139598 * C68229 + C13795 * C19905 +
              C13593 * C20239) *
                 C139303 +
             (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
              C13593 * C20237) *
                 C3364) *
                C139600 +
            ((C112995 + C112994) * C139303 + (C112993 + C112992) * C3364) *
                C92451) *
               C139289 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                 C181 +
             (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                 C139346) *
                C92451 +
            ((C110550 + C110551) * C181 + (C110656 + C110657) * C139346) *
                C139600) *
               C139289 * C821 -
           (((C15768 + C15767) * C139346 + (C15654 + C15653) * C181) * C139600 +
            ((C13913 + C13912) * C139346 + (C13822 + C13823) * C181) * C92451) *
               C139289 * C822 +
           (((C13826 + C13827) * C181 + (C13915 + C13914) * C139346) * C92451 +
            ((C15658 + C15657) * C181 + (C15769 + C15770) * C139346) *
                C139600) *
               C139289 * C823) *
              C139571 +
          ((((C15653 + C15654) * C181 + (C15767 + C15768) * C139346) * C92451 +
            ((C19280 + C19279) * C181 + (C19385 + C19386) * C139346) *
                C139600) *
               C139289 * C822 -
           (((C13796 * C5557 + C139598 * C5795 + C13795 * C4746 +
              C13593 * C5007) *
                 C139346 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C181) *
                C139600 +
            ((C110657 + C110656) * C139346 + (C110551 + C110550) * C181) *
                C92451) *
               C139289 * C821 -
           (((C13796 * C5555 + C139598 * C5797 + C13795 * C4748 +
              C13593 * C5009) *
                 C139346 +
             (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
              C13593 * C4915) *
                 C181) *
                C139600 +
            ((C15770 + C15769) * C139346 + (C15657 + C15658) * C181) * C92451) *
               C139289 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C2660 +
            (C13795 * C182 + C13593 * C394 + C13796 * C927 + C139598 * C1195) *
                C2565 -
            (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
             C13593 * C1094) *
                C2661 -
            (C13796 * C2663 + C139598 * C2921 + C13795 * C927 +
             C13593 * C1195) *
                C2566 +
            (C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C2662 +
            (C13795 * C2663 + C13593 * C2921 + C13796 * C3433 +
             C139598 * C3599) *
                C2567) *
               C92451 +
           ((C110550 + C110551) * C2660 + (C110656 + C110657) * C2565 -
            (C112989 + C112988) * C2661 - (C113102 + C113103) * C2566 +
            (C112992 + C112993) * C2662 + (C113104 + C113105) * C2567) *
               C139600) *
              C139289 * C139303 * C139571 +
          (((C112988 + C112989) * C2661 -
            ((C110657 + C110656) * C2565 + (C110551 + C110550) * C2660) +
            (C113103 + C113102) * C2566 - (C112993 + C112992) * C2662 -
            (C113105 + C113104) * C2567) *
               C92451 +
           ((C13795 * C5471 + C13593 * C5717 + C13796 * C19903 +
             C139598 * C20237) *
                C2661 -
            ((C13796 * C5557 + C139598 * C5795 + C13795 * C4746 +
              C13593 * C5007) *
                 C2565 +
             (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
              C13593 * C4913) *
                 C2660) +
            (C13795 * C5557 + C13593 * C5795 + C13796 * C20021 +
             C139598 * C20338) *
                C2566 -
            (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
             C13593 * C20237) *
                C2662 -
            (C13796 * C68052 + C139598 * C68304 + C13795 * C20021 +
             C13593 * C20338) *
                C2567) *
               C139600) *
              C139289 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C110551 + C110550) * C1876 - (C110760 + C110761) * C139384) *
               C92451 +
           ((C110550 + C110551) * C1875 + (C110761 + C110760) * C139571 -
            (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
             C13593 * C4913) *
                C1876 -
            (C13796 * C5637 + C139598 * C5872 + C13795 * C4831 +
             C13593 * C5095) *
                C139384) *
               C139600) *
              C139289 * C139346 * C821 +
          (((C15653 + C15654) * C1876 -
            ((C13997 + C13996) * C139571 + (C13822 + C13823) * C1875) +
            (C15878 + C15877) * C139384) *
               C92451 +
           ((C19280 + C19279) * C1876 -
            ((C15877 + C15878) * C139571 + (C15654 + C15653) * C1875) +
            (C19489 + C19490) * C139384) *
               C139600) *
              C139289 * C139346 * C822 +
          (((C13826 + C13827) * C1875 + (C13999 + C13998) * C139571 -
            (C15657 + C15658) * C1876 - (C15880 + C15879) * C139384) *
               C92451 +
           ((C15658 + C15657) * C1875 + (C15879 + C15880) * C139571 -
            (C13796 * C5469 + C139598 * C5715 + C13795 * C4658 +
             C13593 * C4915) *
                C1876 -
            (C13796 * C5635 + C139598 * C5874 + C13795 * C4833 +
             C13593 * C5097) *
                C139384) *
               C139600) *
              C139289 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13795 * C107 + C13593 * C308 + C13796 * C832 + C139598 * C1094) *
                C1875 +
            (C13795 * C245 + C13593 * C474 + C13796 * C1011 + C139598 * C1301) *
                C139571 -
            (C110551 + C110550) * C1876 - (C110760 + C110761) * C139384) *
               C92451 +
           ((C110550 + C110551) * C1875 + (C110761 + C110760) * C139571 -
            (C13796 * C5471 + C139598 * C5717 + C13795 * C4656 +
             C13593 * C4913) *
                C1876 -
            (C13796 * C5637 + C139598 * C5872 + C13795 * C4831 +
             C13593 * C5095) *
                C139384) *
               C139600) *
              C139289 * C2565 +
          (((C112988 + C112989) * C1876 -
            ((C13796 * C2745 + C139598 * C3017 + C13795 * C1011 +
              C13593 * C1301) *
                 C139571 +
             (C13796 * C2570 + C139598 * C2827 + C13795 * C832 +
              C13593 * C1094) *
                 C1875) +
            (C113212 + C113213) * C139384) *
               C92451 +
           ((C13795 * C5471 + C13593 * C5717 + C13796 * C19903 +
             C139598 * C20237) *
                C1876 -
            ((C113213 + C113212) * C139571 + (C112989 + C112988) * C1875) +
            (C13795 * C5637 + C13593 * C5872 + C13796 * C20129 +
             C139598 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2566 +
          (((C13795 * C2570 + C13593 * C2827 + C13796 * C3367 +
             C139598 * C3545) *
                C1875 +
            (C13795 * C2745 + C13593 * C3017 + C13796 * C3489 +
             C139598 * C3654) *
                C139571 -
            (C112993 + C112992) * C1876 - (C113214 + C113215) * C139384) *
               C92451 +
           ((C112992 + C112993) * C1875 + (C113215 + C113214) * C139571 -
            (C13796 * C67958 + C139598 * C68228 + C13795 * C19903 +
             C13593 * C20237) *
                C1876 -
            (C13796 * C68134 + C139598 * C68379 + C13795 * C20129 +
             C13593 * C20438) *
                C139384) *
               C139600) *
              C139289 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C826 +
            (C92849 * C116 + C92451 * C561 + C92850 * C1707 + C139600 * C2268) *
                C821 -
            (C92876 + C92877) * C827 - (C92878 + C92879) * C822 +
            (C92880 + C92881) * C828 + (C92882 + C92883) * C823) *
               C139289 * C13593 +
           ((C109938 + C109939) * C826 + (C109940 + C109941) * C821 -
            (C93759 + C93758) * C827 - (C93761 + C93760) * C822 +
            (C93763 + C93762) * C828 + (C93765 + C93764) * C823) *
               C139289 * C139598) *
              C139571 +
          (((C94760 + C94761) * C827 -
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C821 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C826) +
            (C94762 + C94763) * C822 - (C94764 + C94765) * C828 -
            (C94766 + C94767) * C823) *
               C139289 * C13593 +
           ((C102507 + C102506) * C827 -
            ((C92850 * C5474 + C139600 * C5954 + C92849 * C3900 +
              C92451 * C4413) *
                 C821 +
             (C92850 * C5471 + C139600 * C5951 + C92849 * C3891 +
              C92451 * C4407) *
                 C826) +
            (C102509 + C102508) * C822 -
            (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
             C92451 * C4409) *
                C828 -
            (C92850 * C5472 + C139600 * C5952 + C92849 * C3902 +
             C92451 * C4415) *
                C823) *
               C139289 * C139598) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C3364 +
             (C92849 * C116 + C92451 * C561 + C92850 * C1707 +
              C139600 * C2268) *
                 C139303) *
                C139289 * C13593 +
            ((C109938 + C109939) * C3364 + (C109940 + C109941) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C113330 + C113331) * C139303 + (C113332 + C113333) * C3364) *
                C139289 * C139598 +
            ((C92850 * C4663 + C139600 * C5195 + C92849 * C1707 +
              C92451 * C2268) *
                 C139303 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C3364) *
                C139289 * C13593) *
               C139384) *
              C2565 +
          ((((C113333 + C113332) * C3364 + (C113331 + C113330) * C139303) *
                C139289 * C13593 +
            ((C113334 + C113335) * C3364 + (C113336 + C113337) * C139303) *
                C139289 * C139598) *
               C139384 -
           (((C111750 + C111751) * C139303 + (C111752 + C111753) * C3364) *
                C139289 * C139598 +
            ((C109941 + C109940) * C139303 + (C109939 + C109938) * C3364) *
                C139289 * C13593) *
               C139571) *
              C2566 +
          ((((C111753 + C111752) * C3364 + (C111751 + C111750) * C139303) *
                C139289 * C13593 +
            ((C112432 + C112433) * C3364 + (C112434 + C112435) * C139303) *
                C139289 * C139598) *
               C139571 -
           (((C92850 * C67959 + C139600 * C68455 + C92849 * C17961 +
              C92451 * C18621) *
                 C139303 +
             (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
              C92451 * C18619) *
                 C3364) *
                C139289 * C139598 +
            ((C113337 + C113336) * C139303 + (C113335 + C113334) * C3364) *
                C139289 * C13593) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92849 * C107 + C92451 * C555 + C92850 * C1700 +
              C139600 * C2264) *
                 C181 +
             (C92849 * C182 + C92451 * C641 + C92850 * C1794 +
              C139600 * C2368) *
                 C139346) *
                C139289 * C13593 +
            ((C109938 + C109939) * C181 + (C110045 + C110044) * C139346) *
                C139289 * C139598) *
               C821 -
           (((C93872 + C93873) * C139346 + (C93759 + C93758) * C181) * C139289 *
                C139598 +
            ((C92967 + C92966) * C139346 + (C92876 + C92877) * C181) * C139289 *
                C13593) *
               C822 +
           (((C92880 + C92881) * C181 + (C92969 + C92968) * C139346) * C139289 *
                C13593 +
            ((C93763 + C93762) * C181 + (C93874 + C93875) * C139346) * C139289 *
                C139598) *
               C823) *
              C139571 +
          ((((C94760 + C94761) * C181 + (C94874 + C94875) * C139346) * C139289 *
                C13593 +
            ((C102507 + C102506) * C181 + (C102644 + C102645) * C139346) *
                C139289 * C139598) *
               C822 -
           (((C92850 * C5557 + C139600 * C6029 + C92849 * C3989 +
              C92451 * C4493) *
                 C139346 +
             (C92850 * C5471 + C139600 * C5951 + C92849 * C3891 +
              C92451 * C4407) *
                 C181) *
                C139289 * C139598 +
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C139346 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C181) *
                C139289 * C13593) *
               C821 -
           (((C92850 * C5555 + C139600 * C6031 + C92849 * C3991 +
              C92451 * C4497) *
                 C139346 +
             (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
              C92451 * C4409) *
                 C181) *
                C139289 * C139598 +
            ((C94877 + C94876) * C139346 + (C94764 + C94765) * C181) * C139289 *
                C13593) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C2660 +
            (C92849 * C182 + C92451 * C641 + C92850 * C1794 + C139600 * C2368) *
                C2565 -
            (C109939 + C109938) * C2661 - (C110044 + C110045) * C2566 +
            (C111753 + C111752) * C2662 + (C111856 + C111857) * C2567) *
               C139289 * C13593 +
           ((C109938 + C109939) * C2660 + (C110045 + C110044) * C2565 -
            (C111752 + C111753) * C2661 - (C111857 + C111856) * C2566 +
            (C112432 + C112433) * C2662 + (C112507 + C112506) * C2567) *
               C139289 * C139598) *
              C139303 * C139571 +
          (((C113333 + C113332) * C2661 -
            ((C92850 * C4746 + C139600 * C5285 + C92849 * C1794 +
              C92451 * C2368) *
                 C2565 +
             (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
              C92451 * C2264) *
                 C2660) +
            (C113444 + C113445) * C2566 - (C113335 + C113334) * C2662 -
            (C113446 + C113447) * C2567) *
               C139289 * C13593 +
           ((C113334 + C113335) * C2661 -
            ((C113445 + C113444) * C2565 + (C113332 + C113333) * C2660) +
            (C113447 + C113446) * C2566 -
            (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
             C92451 * C18619) *
                C2662 -
            (C92850 * C68052 + C139600 * C68538 + C92849 * C18089 +
             C92451 * C18746) *
                C2567) *
               C139289 * C139598) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eezz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C139289 * C13593 +
           ((C109938 + C109939) * C1875 + (C110148 + C110149) * C139571 -
            (C92850 * C5471 + C139600 * C5951 + C92849 * C3891 +
             C92451 * C4407) *
                C1876 -
            (C92850 * C5637 + C139600 * C6106 + C92849 * C4075 +
             C92451 * C4573) *
                C139384) *
               C139289 * C139598) *
              C139346 * C821 +
          (((C94760 + C94761) * C1876 -
            ((C93051 + C93050) * C139571 + (C92876 + C92877) * C1875) +
            (C94985 + C94984) * C139384) *
               C139289 * C13593 +
           ((C102507 + C102506) * C1876 -
            ((C93982 + C93983) * C139571 + (C93759 + C93758) * C1875) +
            (C102780 + C102781) * C139384) *
               C139289 * C139598) *
              C139346 * C822 +
          (((C92880 + C92881) * C1875 + (C93053 + C93052) * C139571 -
            (C94764 + C94765) * C1876 - (C94987 + C94986) * C139384) *
               C139289 * C13593 +
           ((C93763 + C93762) * C1875 + (C93984 + C93985) * C139571 -
            (C92850 * C5469 + C139600 * C5949 + C92849 * C3893 +
             C92451 * C4409) *
                C1876 -
            (C92850 * C5635 + C139600 * C6108 + C92849 * C4077 +
             C92451 * C4575) *
                C139384) *
               C139289 * C139598) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92849 * C107 + C92451 * C555 + C92850 * C1700 + C139600 * C2264) *
                C1875 +
            (C92849 * C245 + C92451 * C719 + C92850 * C1879 + C139600 * C2460) *
                C139571 -
            (C92850 * C4656 + C139600 * C5191 + C92849 * C1700 +
             C92451 * C2264) *
                C1876 -
            (C92850 * C4831 + C139600 * C5373 + C92849 * C1879 +
             C92451 * C2460) *
                C139384) *
               C139289 * C13593 +
           ((C109938 + C109939) * C1875 + (C110148 + C110149) * C139571 -
            (C113332 + C113333) * C1876 - (C113554 + C113555) * C139384) *
               C139289 * C139598) *
              C2565 +
          (((C113333 + C113332) * C1876 -
            ((C110149 + C110148) * C139571 + (C109939 + C109938) * C1875) +
            (C113555 + C113554) * C139384) *
               C139289 * C13593 +
           ((C113334 + C113335) * C1876 -
            ((C111960 + C111961) * C139571 + (C111752 + C111753) * C1875) +
            (C113556 + C113557) * C139384) *
               C139289 * C139598) *
              C2566 +
          (((C111753 + C111752) * C1875 + (C111961 + C111960) * C139571 -
            (C113335 + C113334) * C1876 - (C113557 + C113556) * C139384) *
               C139289 * C13593 +
           ((C112432 + C112433) * C1875 + (C112578 + C112579) * C139571 -
            (C92850 * C67958 + C139600 * C68454 + C92849 * C17959 +
             C92451 * C18619) *
                C1876 -
            (C92850 * C68134 + C139600 * C68616 + C92849 * C18203 +
             C92451 * C18855) *
                C139384) *
               C139289 * C139598) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eexx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6694 +
            (C63381 * C116 + C139289 * C125) * C139601 -
            (C63381 * C108 + C139289 * C114) * C6695 -
            (C63381 * C117 + C139289 * C126) * C139590 +
            (C63381 * C109 + C139289 * C115) * C6696 +
            (C63381 * C118 + C139289 * C127) * C6691) *
               C139448 * C124863 +
           (C86554 + C86555 - C86556 - C86557 + C86558 + C86559) * C139448 *
               C124864 +
           (C81016 * C6694 + C81015 * C139601 - C81014 * C6695 -
            C81017 * C139590 + C126018 * C6696 + C126019 * C6691) *
               C139448 * C124865) *
              C139372 * C6692 +
          ((C69169 - (C69168 + C69167) + C69170 - C69171 - C69172) * C139448 *
               C124863 +
           (C83582 - (C83581 + C83580) + C83583 - C83584 - C83585) * C139448 *
               C124864 +
           (C81018 * C6695 - (C67972 * C139601 + C67971 * C6694) +
            C81019 * C139590 - (C63381 * C5469 + C139289 * C5475) * C6696 -
            (C63381 * C5472 + C139289 * C5478) * C6691) *
               C139448 * C124865) *
              C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6771 +
            (C63381 * C182 + C139289 * C188) * C6692 - C63884 * C6772 -
            C63994 * C139360) *
               C139448 * C124863 +
           (C85526 + C85527 - C85528 - C85529) * C139448 * C124864 +
           (C91688 + C91687 - C91686 - C91689) * C139448 * C124865) *
              C139601 +
          ((C63886 * C6772 -
            ((C63381 * C183 + C139289 * C189) * C6692 +
             (C63381 * C108 + C139289 * C114) * C6771) +
            C63996 * C139360) *
               C139448 * C124863 +
           (C85534 - (C85535 + C85536) + C85537) * C139448 * C124864 +
           (C81018 * C6772 - (C81135 * C6692 + C81014 * C6771) +
            C81136 * C139360) *
               C139448 * C124865) *
              C139590 +
          (((C63381 * C109 + C139289 * C115) * C6771 +
            (C63381 * C184 + C139289 * C190) * C6692 - C63888 * C6772 -
            C63998 * C139360) *
               C139448 * C124863 +
           (C77519 * C6771 + C77642 * C6692 - C76581 * C6772 -
            C76685 * C139360) *
               C139448 * C124864 +
           (C126018 * C6771 + C126099 * C6692 -
            (C63381 * C5469 + C139289 * C5475) * C6772 -
            (C63381 * C5555 + C139289 * C5558) * C139360) *
               C139448 * C124865) *
              C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C139448 * C124863 +
            (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
            (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
               C6692 -
           ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
            (C76785 + C76784) * C139448 * C124864 +
            (C64098 + C64074) * C139448 * C124863) *
               C139360) *
              C139601 +
          (((C64080 + C64100) * C139448 * C124863 +
            (C76786 + C76787) * C139448 * C124864 +
            (C81018 * C244 + C81247 * C139372) * C139448 * C124865) *
               C139360 -
           ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
            (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C139448 * C124863) *
               C6692) *
              C139590 +
          ((((C63381 * C109 + C139289 * C115) * C244 +
             (C63381 * C247 + C139289 * C253) * C139372) *
                C139448 * C124863 +
            (C77519 * C244 + C77752 * C139372) * C139448 * C124864 +
            (C126018 * C244 + C126177 * C139372) * C139448 * C124865) *
               C6692 -
           (((C63381 * C5635 + C139289 * C5638) * C139372 +
             (C63381 * C5469 + C139289 * C5475) * C244) *
                C139448 * C124865 +
            (C76792 + C76788) * C139448 * C124864 +
            (C64102 + C64086) * C139448 * C124863) *
               C139360) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6694 +
            (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
            C338 * C139590 + C339 * C6696 + C340 * C6691) *
               C124863 +
           (C41426 + C41427 - C41428 - C41429 + C41430 + C41431) * C124864 +
           (C35899 * C6694 + C35898 * C139601 - C4930 * C6695 -
            C4931 * C139590 + C4932 * C6696 + C4933 * C6691) *
               C124865) *
              C139289 * C139372 * C6692 +
          ((C1116 * C6695 -
            ((C307 * C839 + C139448 * C1098) * C139601 +
             (C307 * C832 + C139448 * C1094) * C6694) +
            C1117 * C139590 - C1118 * C6696 - C1119 * C6691) *
               C124863 +
           (C8433 * C6695 - (C34921 * C139601 + C34920 * C6694) +
            C8434 * C139590 - C8435 * C6696 - C8436 * C6691) *
               C124864 +
           (C36848 * C6695 - (C36847 * C139601 + C36846 * C6694) +
            C36849 * C139590 - (C307 * C5469 + C139448 * C5715) * C6696 -
            (C307 * C5472 + C139448 * C5718) * C6691) *
               C124865) *
              C139289 * C139372 * C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6771 +
            (C307 * C182 + C139448 * C394) * C6692 -
            (C307 * C832 + C139448 * C1094) * C6772 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C124863 +
           (C40472 + C40473 - C40474 - C40475) * C124864 +
           (C46570 + C46569 - C46568 - C46571) * C124865) *
              C139289 * C139601 +
          ((C6998 - (C6997 + C6996) + C6999) * C124863 + C40485 * C124864 +
           (C40478 - (C40479 + C40480) + C40481) * C124865) *
              C139289 * C139590 +
          (C7010 * C124863 + (C8543 + C8542 - C8541 - C8549) * C124864 +
           (C4932 * C6771 + C5019 * C6692 -
            (C307 * C5469 + C139448 * C5715) * C6772 -
            (C307 * C5555 + C139448 * C5797) * C139360) *
               C124865) *
              C139289 * C6691) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C244 +
                        (C307 * C245 + C139448 * C474) * C139372) *
                           C124863 +
                       (C32431 * C244 + C32649 * C139372) * C124864 +
                       (C35899 * C244 + C36121 * C139372) * C124865) *
                          C139289 * C6692 -
                      ((C37072 * C139372 + C36846 * C244) * C124865 +
                       (C35140 * C139372 + C34920 * C244) * C124864 +
                       ((C307 * C1011 + C139448 * C1301) * C139372 +
                        (C307 * C832 + C139448 * C1094) * C244) *
                           C124863) *
                          C139289 * C139360) *
                         C139601 +
                     (((C1310 + C1318) * C124863 + (C31608 + C31607) * C124864 +
                       (C36848 * C244 + C37073 * C139372) * C124865) *
                          C139289 * C139360 -
                      ((C5114 * C139372 + C4930 * C244) * C124865 +
                       (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
                          C139289 * C6692) *
                         C139590 +
                     ((C501 * C124863 + (C30744 + C30743) * C124864 +
                       (C4932 * C244 + C5115 * C139372) * C124865) *
                          C139289 * C6692 -
                      (((C307 * C5635 + C139448 * C5874) * C139372 +
                        (C307 * C5469 + C139448 * C5715) * C244) *
                           C124865 +
                       (C31610 + C31609) * C124864 + C1320 * C124863) *
                          C139289 * C139360) *
                         C6691)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C6694 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139601 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C6695 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139590 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C6696 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                       C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                          C6691) *
                         C139289 * C139448 * C139372 * C6692 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C6695 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139601 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C6694) +
                      (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                       C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                          C139590 -
                      (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                       C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                          C6696 -
                      (C125168 * C5472 + C124865 * C5952 + C125167 * C3902 +
                       C124864 * C4415 + C125166 * C837 + C124863 * C1402) *
                          C6691) *
                         C139289 * C139448 * C139372 * C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C6771 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C6692 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C6772 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139360) *
                         C139289 * C139448 * C139601 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C6772 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C6692 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C6771) +
                      (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                       C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                          C139360) *
                         C139289 * C139448 * C139590 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C6771 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                       C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                          C6692 -
                      (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                       C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                          C6772 -
                      (C125168 * C5555 + C124865 * C6031 + C125167 * C3991 +
                       C124864 * C4497 + C125166 * C925 + C124863 * C1499) *
                          C139360) *
                         C139289 * C139448 * C6691) *
                    C139372) /
                   (p * q * std::sqrt(p + q));
    d2eezz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139372) *
                          C139289 * C139448 * C6692 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139372 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C244) *
                          C139289 * C139448 * C139360) *
                         C139601 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C244 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139372) *
                          C139289 * C139448 * C139360 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139372 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139289 * C139448 * C6692) *
                         C139590 +
                     (((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                        C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                           C244 +
                       (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                        C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                           C139372) *
                          C139289 * C139448 * C6692 -
                      ((C125168 * C5635 + C124865 * C6108 + C125167 * C4077 +
                        C124864 * C4575 + C125166 * C1009 + C124863 * C1600) *
                           C139372 +
                       (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                        C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                           C244) *
                          C139289 * C139448 * C139360) *
                         C6691)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7401 +
            (C63381 * C116 + C139289 * C125) * C7396 -
            (C63381 * C108 + C139289 * C114) * C7402 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C139448 * C124863 +
           (C85382 + C85383 - C85384 - C85385) * C139448 * C124864 +
           (C88630 + C88629 - C88628 - C88631) * C139448 * C124865) *
              C139372 * C139602 +
          ((C69853 - (C69852 + C69851) + C69854) * C139448 * C124863 +
           C85395 * C139448 * C124864 +
           (C85388 - (C85389 + C85390) + C85391) * C139448 * C124865) *
              C139372 * C139593 +
          (C69865 * C139448 * C124863 +
           (C70573 + C70572 - C70582 - C70583) * C139448 * C124864 +
           (C67973 * C7401 + C67974 * C7396 -
            (C63381 * C19902 + C139289 * C19906) * C7402 -
            (C63381 * C19904 + C139289 * C19908) * C139308) *
               C139448 * C124865) *
              C139372 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7477 +
            (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
            C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
               C139448 * C124863 +
           (C90788 + C90789 - C90790 - C90791 + C90792 + C90793) * C139448 *
               C124864 +
           (C81016 * C7477 + C81137 * C139602 - C67971 * C7478 -
            C68059 * C139593 + C67973 * C7479 + C68060 * C7400) *
               C139448 * C124865) *
              C7396 +
          ((C63886 * C7478 -
            ((C63381 * C183 + C139289 * C189) * C139602 +
             (C63381 * C108 + C139289 * C114) * C7477) +
            C63996 * C139593 - C63892 * C7479 - C63997 * C7400) *
               C139448 * C124863 +
           (C70576 * C7478 - (C77641 * C139602 + C77517 * C7477) +
            C70686 * C139593 - C70578 * C7479 - C70687 * C7400) *
               C139448 * C124864 +
           (C81018 * C7478 - (C81135 * C139602 + C81014 * C7477) +
            C81136 * C139593 - (C63381 * C19902 + C139289 * C19906) * C7479 -
            (C63381 * C20020 + C139289 * C20022) * C7400) *
               C139448 * C124865) *
              C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eexz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C139448 * C124863 +
            (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
            (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
               C139602 -
           ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
            (C76785 + C76784) * C139448 * C124864 +
            (C64098 + C64074) * C139448 * C124863) *
               C139593 +
           (C65475 * C139448 * C124863 + (C78660 + C78659) * C139448 * C124864 +
            (C67973 * C244 + C68152 * C139372) * C139448 * C124865) *
               C7400) *
              C7396 +
          (((C64080 + C64100) * C139448 * C124863 +
            (C76786 + C76787) * C139448 * C124864 +
            (C81018 * C244 + C81247 * C139372) * C139448 * C124865) *
               C139593 -
           ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
            (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C139448 * C124863) *
               C139602 -
           (((C63381 * C20128 + C139289 * C20130) * C139372 +
             (C63381 * C19902 + C139289 * C19906) * C244) *
                C139448 * C124865 +
            (C78662 + C78661) * C139448 * C124864 +
            C65482 * C139448 * C124863) *
               C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C307 * C107 + C139448 * C308) * C7401 +
                       (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
                       C338 * C139308) *
                          C124863 +
                      (C40326 + C40327 - C40328 - C40329) * C124864 +
                      (C43510 + C43509 - C43508 - C43511) * C124865) *
                         C139289 * C139372 * C139602 +
                     ((C1116 * C7402 -
                       ((C307 * C839 + C139448 * C1098) * C7396 +
                        (C307 * C832 + C139448 * C1094) * C7401) +
                       C1117 * C139308) *
                          C124863 +
                      (C40334 - (C40335 + C40336) + C40337) * C124864 +
                      (C36848 * C7402 - (C36847 * C7396 + C36846 * C7401) +
                       C36849 * C139308) *
                          C124865) *
                         C139289 * C139372 * C139593 +
                     (((C307 * C2570 + C139448 * C2827) * C7401 +
                       (C307 * C2577 + C139448 * C2831) * C7396 -
                       C2844 * C7402 - C2845 * C139308) *
                          C124863 +
                      (C34922 * C7401 + C34923 * C7396 - C33388 * C7402 -
                       C33389 * C139308) *
                          C124864 +
                      (C128050 * C7401 + C128051 * C7396 -
                       (C307 * C19902 + C139448 * C20236) * C7402 -
                       (C307 * C19904 + C139448 * C20238) * C139308) *
                          C124865) *
                         C139289 * C139372 * C7400)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7477 +
            (C307 * C182 + C139448 * C394) * C139602 -
            (C307 * C832 + C139448 * C1094) * C7478 -
            (C307 * C927 + C139448 * C1195) * C139593 +
            (C307 * C2570 + C139448 * C2827) * C7479 +
            (C307 * C2663 + C139448 * C2921) * C7400) *
               C124863 +
           (C45680 + C45681 - C45682 - C45683 + C45684 + C45685) * C124864 +
           (C35899 * C7477 + C36010 * C139602 - C36846 * C7478 -
            C36966 * C139593 + C128050 * C7479 + C128135 * C7400) *
               C124865) *
              C139289 * C7396 +
          ((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C124863 +
           (C39410 - (C39409 + C39408) + C39411 - C39412 - C39413) * C124864 +
           (C36848 * C7478 - (C5018 * C139602 + C4930 * C7477) +
            C36967 * C139593 - (C307 * C19902 + C139448 * C20236) * C7479 -
            (C307 * C20020 + C139448 * C20339) * C7400) *
               C124865) *
              C139289 * C139308) *
         C139372) /
        (p * q * std::sqrt(p + q));
    d2eeyz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C124863 +
            (C32431 * C244 + C32649 * C139372) * C124864 +
            (C35899 * C244 + C36121 * C139372) * C124865) *
               C139289 * C139602 -
           ((C37072 * C139372 + C36846 * C244) * C124865 +
            (C35140 * C139372 + C34920 * C244) * C124864 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C124863) *
               C139289 * C139593 +
           (((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C124863 +
            (C34922 * C244 + C35141 * C139372) * C124864 +
            (C128050 * C244 + C128213 * C139372) * C124865) *
               C139289 * C7400) *
              C7396 +
          (((C1310 + C1318) * C124863 + (C31608 + C31607) * C124864 +
            (C36848 * C244 + C37073 * C139372) * C124865) *
               C139289 * C139593 -
           ((C5114 * C139372 + C4930 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139289 * C139602 -
           (((C307 * C20128 + C139448 * C20439) * C139372 +
             (C307 * C19902 + C139448 * C20236) * C244) *
                C124865 +
            (C33599 + C33595) * C124864 + (C3030 + C3022) * C124863) *
               C139289 * C7400) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C7401 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C7396 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C7402 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139308) *
                         C139289 * C139448 * C139372 * C139602 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C7402 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C7396 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C7401) +
                      (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                       C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                          C139308) *
                         C139289 * C139448 * C139372 * C139593 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C7401 +
                      (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                       C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                          C7396 -
                      (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                       C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                          C7402 -
                      (C125168 * C19904 + C124865 * C20540 + C125167 * C3904 +
                       C124864 * C4417 + C125166 * C2578 + C124863 * C3110) *
                          C139308) *
                         C139289 * C139448 * C139372 * C7400)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C7477 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139602 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C7478 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139593 +
                      (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C7479 +
                      (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                       C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                          C7400) *
                         C139289 * C139448 * C7396 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C7478 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139602 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C7477) +
                      (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                       C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                          C139593 -
                      (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                       C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                          C7479 -
                      (C125168 * C20020 + C124865 * C20651 + C125167 * C3993 +
                       C124864 * C4496 + C125166 * C2664 + C124863 * C3200) *
                          C7400) *
                         C139289 * C139448 * C139308) *
                    C139372) /
                   (p * q * std::sqrt(p + q));
    d2eezz[121] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139372) *
                          C139289 * C139448 * C139602 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139372 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C244) *
                          C139289 * C139448 * C139593 +
                      ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                        C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                           C244 +
                       (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                        C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                           C139372) *
                          C139289 * C139448 * C7400) *
                         C7396 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C244 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139372) *
                          C139289 * C139448 * C139593 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139372 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139289 * C139448 * C139602 -
                      ((C125168 * C20128 + C124865 * C20754 + C125167 * C4079 +
                        C124864 * C4577 + C125166 * C2746 + C124863 * C3296) *
                           C139372 +
                       (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                        C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                           C244) *
                          C139289 * C139448 * C7400) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C139448 * C124863 +
            (C85382 + C85383 - C85384 - C85385) * C139448 * C124864 +
            (C88630 + C88629 - C88628 - C88631) * C139448 * C124865) *
               C139571 +
           ((C85384 - (C85383 + C85382) + C85385) * C139448 * C124863 +
            (C88628 - (C88629 + C88630) + C88631) * C139448 * C124864 +
            (C128518 * C7402 - (C82905 * C7396 + C82904 * C7401) +
             C128519 * C139308) *
                C139448 * C124865) *
               C139384) *
              C6692 +
          (((C69853 - (C69852 + C69851) + C69854) * C139448 * C124863 +
            C85395 * C139448 * C124864 +
            (C85388 - (C85389 + C85390) + C85391) * C139448 * C124865) *
               C139571 +
           (C85394 * C139448 * C124863 +
            (C85390 + C85389 - C85388 - C85391) * C139448 * C124864 +
            (C81966 * C7401 + C81967 * C7396 -
             (C63381 * C20830 + C139289 * C20834) * C7402 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139448 * C124865) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C6771 +
             (C63381 * C182 + C139289 * C188) * C6692 - C63884 * C6772 -
             C63994 * C139360) *
                C139448 * C124863 +
            (C85526 + C85527 - C85528 - C85529) * C139448 * C124864 +
            (C91688 + C91687 - C91686 - C91689) * C139448 * C124865) *
               C7396 +
           ((C63886 * C6772 -
             ((C63381 * C183 + C139289 * C189) * C6692 +
              (C63381 * C108 + C139289 * C114) * C6771) +
             C63996 * C139360) *
                C139448 * C124863 +
            (C85534 - (C85535 + C85536) + C85537) * C139448 * C124864 +
            (C131868 - (C131869 + C131870) + C131871) * C139448 * C124865) *
               C139308) *
              C139571 +
          (((C85528 - (C85527 + C85526) + C85529) * C139448 * C124863 +
            (C91686 - (C91687 + C91688) + C91689) * C139448 * C124864 +
            (C81966 * C6772 - (C82981 * C6692 + C82904 * C6771) +
             C82086 * C139360) *
                C139448 * C124865) *
               C7396 +
           ((C85536 + C85535 - C85534 - C85537) * C139448 * C124863 +
            (C131870 + C131869 - C131868 - C131871) * C139448 * C124864 +
            (C128518 * C6771 + C128605 * C6692 -
             (C63381 * C20830 + C139289 * C20834) * C6772 -
             (C63381 * C20904 + C139289 * C20906) * C139360) *
                C139448 * C124865) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C1875 +
             (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
             C77750 * C139384) *
                C139448 * C124863 +
            (C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
             C81245 * C139384) *
                C139448 * C124864 +
            (C81016 * C1875 + C81245 * C139571 - C82904 * C1876 -
             C83053 * C139384) *
                C139448 * C124865) *
               C6692 +
           ((C66721 - (C66720 + C66719) + C66738) * C139448 * C124863 +
            (C80208 - (C80207 + C80206) + C80209) * C139448 * C124864 +
            (C81966 * C1876 - (C68151 * C139571 + C67971 * C1875) +
             C82192 * C139384) *
                C139448 * C124865) *
               C139360) *
              C7396 +
          (((C77517 * C1876 -
             ((C63381 * C246 + C139289 * C252) * C139571 +
              (C63381 * C108 + C139289 * C114) * C1875) +
             C77751 * C139384) *
                C139448 * C124863 +
            (C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
             C81246 * C139384) *
                C139448 * C124864 +
            (C128518 * C1876 - (C81246 * C139571 + C81014 * C1875) +
             C128683 * C139384) *
                C139448 * C124865) *
               C6692 +
           ((C70788 + C70787 - C70786 - C70798) * C139448 * C124863 +
            (C85674 + C85673 - C85672 - C85675) * C139448 * C124864 +
            (C81018 * C1875 + C81247 * C139571 -
             (C63381 * C20830 + C139289 * C20834) * C1876 -
             (C63381 * C20974 + C139289 * C20976) * C139384) *
                C139448 * C124865) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C7401 +
                        (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
                        C338 * C139308) *
                           C124863 +
                       (C40326 + C40327 - C40328 - C40329) * C124864 +
                       (C43510 + C43509 - C43508 - C43511) * C124865) *
                          C139289 * C139571 +
                      ((C40328 - (C40327 + C40326) + C40329) * C124863 +
                       (C43508 - (C43509 + C43510) + C43511) * C124864 +
                       (C35900 * C7402 - (C37683 * C7396 + C37682 * C7401) +
                        C35901 * C139308) *
                           C124865) *
                          C139289 * C139384) *
                         C6692 +
                     (((C1116 * C7402 -
                        ((C307 * C839 + C139448 * C1098) * C7396 +
                         (C307 * C832 + C139448 * C1094) * C7401) +
                        C1117 * C139308) *
                           C124863 +
                       (C40334 - (C40335 + C40336) + C40337) * C124864 +
                       (C132068 - (C132069 + C132070) + C132071) * C124865) *
                          C139289 * C139571 +
                      ((C40336 + C40335 - C40334 - C40337) * C124863 +
                       (C132070 + C132069 - C132068 - C132071) * C124864 +
                       (C129449 * C7401 + C129450 * C7396 -
                        (C307 * C20830 + C139448 * C21044) * C7402 -
                        (C307 * C20832 + C139448 * C21046) * C139308) *
                           C124865) *
                          C139289 * C139384) *
                         C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[122] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C124863 +
            (C40472 + C40473 - C40474 - C40475) * C124864 +
            (C46570 + C46569 - C46568 - C46571) * C124865) *
               C139289 * C7396 +
           ((C6998 - (C6997 + C6996) + C6999) * C124863 + C40485 * C124864 +
            (C40478 - (C40479 + C40480) + C40481) * C124865) *
               C139289 * C139308) *
              C139571 +
          (((C40474 - (C40473 + C40472) + C40475) * C124863 +
            (C46568 - (C46569 + C46570) + C46571) * C124864 +
            (C129449 * C6772 - (C37757 * C6692 + C37682 * C6771) +
             C129534 * C139360) *
                C124865) *
               C139289 * C7396 +
           (C40484 * C124863 + (C40480 + C40479 - C40478 - C40481) * C124864 +
            (C35900 * C6771 + C36011 * C6692 -
             (C307 * C20830 + C139448 * C21044) * C6772 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C124865) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C1875 +
                        (C307 * C245 + C139448 * C474) * C139571 -
                        C32431 * C1876 - C32649 * C139384) *
                           C124863 +
                       (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
                        C36121 * C139384) *
                           C124864 +
                       (C35899 * C1875 + C36121 * C139571 - C37682 * C1876 -
                        C37829 * C139384) *
                           C124865) *
                          C139289 * C6692 +
                      ((C34920 * C1876 -
                        ((C307 * C1011 + C139448 * C1301) * C139571 +
                         (C307 * C832 + C139448 * C1094) * C1875) +
                        C35140 * C139384) *
                           C124863 +
                       (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
                        C37072 * C139384) *
                           C124864 +
                       (C129449 * C1876 - (C37072 * C139571 + C36846 * C1875) +
                        C129613 * C139384) *
                           C124865) *
                          C139289 * C139360) *
                         C7396 +
                     (((C2167 - (C2166 + C2165) + C2184) * C124863 +
                       (C32643 - (C32642 + C32641) + C32644) * C124864 +
                       (C35900 * C1876 - (C5114 * C139571 + C4930 * C1875) +
                        C36122 * C139384) *
                           C124865) *
                          C139289 * C6692 +
                      ((C8651 + C8650 - C8649 - C8661) * C124863 +
                       (C40618 + C40617 - C40616 - C40619) * C124864 +
                       (C36848 * C1875 + C37073 * C139571 -
                        (C307 * C20830 + C139448 * C21044) * C1876 -
                        (C307 * C20974 + C139448 * C21183) * C139384) *
                           C124865) *
                          C139289 * C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C7401 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C7396 -
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C7402 -
                       (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                        C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                           C139308) *
                          C139289 * C139448 * C139571 +
                      ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C7402 -
                       ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                         C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                            C7396 +
                        (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                         C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                            C7401) +
                       (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                        C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                           C139308) *
                          C139289 * C139448 * C139384) *
                         C6692 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C7402 -
                       ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                         C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                            C7396 +
                        (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                         C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                            C7401) +
                       (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                        C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                           C139308) *
                          C139289 * C139448 * C139571 +
                      ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C7401 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C7396 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C7402 -
                       (C125168 * C20832 + C124865 * C21252 + C125167 * C5473 +
                        C124864 * C5953 + C125166 * C3901 + C124863 * C4414) *
                           C139308) *
                          C139289 * C139448 * C139384) *
                         C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C6771 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C6692 -
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C6772 -
                       (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                        C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                           C139360) *
                          C139289 * C139448 * C7396 +
                      ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C6772 -
                       ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                         C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                            C6692 +
                        (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                         C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                            C6771) +
                       (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                        C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                           C139360) *
                          C139289 * C139448 * C139308) *
                         C139571 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C6772 -
                       ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                         C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                            C6692 +
                        (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                         C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                            C6771) +
                       (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                        C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                           C139360) *
                          C139289 * C139448 * C7396 +
                      ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C6771 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C6692 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C6772 -
                       (C125168 * C20904 + C124865 * C21320 + C125167 * C5556 +
                        C124864 * C6030 + C125166 * C3990 + C124863 * C4495) *
                           C139360) *
                          C139289 * C139448 * C139308) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[122] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C1875 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139571 -
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C1876 -
                       (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                        C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                           C139384) *
                          C139289 * C139448 * C6692 +
                      ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C1876 -
                       ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                         C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                            C139571 +
                        (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                         C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                            C1875) +
                       (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                        C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                           C139384) *
                          C139289 * C139448 * C139360) *
                         C7396 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C1876 -
                       ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                         C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                            C139571 +
                        (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                         C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                            C1875) +
                       (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                        C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                           C139384) *
                          C139289 * C139448 * C6692 +
                      ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C1875 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139571 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C1876 -
                       (C125168 * C20974 + C124865 * C21389 + C125167 * C5636 +
                        C124864 * C6107 + C125166 * C4076 + C124863 * C4574) *
                           C139384) *
                          C139289 * C139448 * C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C137108 +
             (C63381 * C116 + C139289 * C125) * C139562 -
             (C63381 * C108 + C139289 * C114) * C137101 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C139448 * C124863 +
            (C80996 + C80997 - C80998 - C80999) * C139448 * C124864 +
            C128523 * C124865) *
               C9074 +
           ((C80998 - (C80997 + C80996) + C80999) * C139448 * C124863 +
            (C81020 - (C81021 + C81022) + C81023) * C139448 * C124864 +
            (C128521 - (C128513 + C128514) + C128522) * C139448 * C124865) *
               C139384) *
              C6692 +
          (((C65296 - (C65295 + C65294) + C65297) * C139448 * C124863 +
            C89551 * C139448 * C124864 +
            (C81024 - (C81010 + C81011) + C81025) * C139448 * C124865) *
               C9074 +
           (C89550 * C139448 * C124863 +
            (C81011 + C81010 - C81024 - C81025) * C139448 * C124864 +
            (C81966 * C137108 + C81967 * C139562 -
             (C63381 * C20830 + C139289 * C20834) * C137101 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139448 * C124865) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C6771 +
             (C63381 * C182 + C139289 * C188) * C6692 - C63884 * C6772 -
             C63994 * C139360) *
                C139448 * C124863 +
            (C85526 + C85527 - C85528 - C85529) * C139448 * C124864 +
            (C91688 + C91687 - C91686 - C91689) * C139448 * C124865) *
               C139562 +
           ((C63886 * C6772 -
             ((C63381 * C183 + C139289 * C189) * C6692 +
              (C63381 * C108 + C139289 * C114) * C6771) +
             C63996 * C139360) *
                C139448 * C124863 +
            (C85534 - (C85535 + C85536) + C85537) * C139448 * C124864 +
            (C131868 - (C131869 + C131870) + C131871) * C139448 * C124865) *
               C139308) *
              C9074 +
          (((C85528 - (C85527 + C85526) + C85529) * C139448 * C124863 +
            (C91686 - (C91687 + C91688) + C91689) * C139448 * C124864 +
            (C81966 * C6772 - (C82981 * C6692 + C82904 * C6771) +
             C82086 * C139360) *
                C139448 * C124865) *
               C139562 +
           ((C85536 + C85535 - C85534 - C85537) * C139448 * C124863 +
            (C131870 + C131869 - C131868 - C131871) * C139448 * C124864 +
            (C128518 * C6771 + C128605 * C6692 -
             (C63381 * C20830 + C139289 * C20834) * C6772 -
             (C63381 * C20904 + C139289 * C20906) * C139360) *
                C139448 * C124865) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C9224 +
             (C63381 * C245 + C139289 * C251) * C9074 - C77515 * C9225 -
             C77750 * C139384) *
                C139448 * C124863 +
            (C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
             C81245 * C139384) *
                C139448 * C124864 +
            (C81016 * C9224 + C81245 * C9074 - C82904 * C9225 -
             C83053 * C139384) *
                C139448 * C124865) *
               C6692 +
           ((C72354 - (C72353 + C72352) + C72355) * C139448 * C124863 +
            (C87744 - (C87743 + C87742) + C87745) * C139448 * C124864 +
            (C81966 * C9225 - (C68151 * C9074 + C67971 * C9224) +
             C82192 * C139384) *
                C139448 * C124865) *
               C139360) *
              C139562 +
          (((C77517 * C9225 -
             ((C63381 * C246 + C139289 * C252) * C9074 +
              (C63381 * C108 + C139289 * C114) * C9224) +
             C77751 * C139384) *
                C139448 * C124863 +
            (C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
             C81246 * C139384) *
                C139448 * C124864 +
            (C128518 * C9225 - (C81246 * C9074 + C81014 * C9224) +
             C128683 * C139384) *
                C139448 * C124865) *
               C6692 +
           ((C72362 + C72361 - C72360 - C72363) * C139448 * C124863 +
            (C87748 + C87747 - C87746 - C87749) * C139448 * C124864 +
            (C81018 * C9224 + C81247 * C9074 -
             (C63381 * C20830 + C139289 * C20834) * C9225 -
             (C63381 * C20974 + C139289 * C20976) * C139384) *
                C139448 * C124865) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C137108 +
             (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
             C338 * C139308) *
                C124863 +
            (C35876 + C35877 - C35878 - C35879) * C124864 + C128764 * C124865) *
               C139289 * C9074 +
           ((C35878 - (C35877 + C35876) + C35879) * C124863 +
            (C35884 - (C35902 + C35903) + C35889) * C124864 +
            (C128759 - (C128760 + C128761) + C128762) * C124865) *
               C139289 * C139384) *
              C6692 +
          (((C1116 * C137101 -
             ((C307 * C839 + C139448 * C1098) * C139562 +
              (C307 * C832 + C139448 * C1094) * C137108) +
             C1117 * C139308) *
                C124863 +
            (C44532 - (C44533 + C44534) + C44535) * C124864 +
            (C135199 - (C135200 + C135201) + C135202) * C124865) *
               C139289 * C9074 +
           ((C44534 + C44533 - C44532 - C44535) * C124863 +
            (C135201 + C135200 - C135199 - C135202) * C124864 +
            (C129449 * C137108 + C129450 * C139562 -
             (C307 * C20830 + C139448 * C21044) * C137101 -
             (C307 * C20832 + C139448 * C21046) * C139308) *
                C124865) *
               C139289 * C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C6771 +
             (C307 * C182 + C139448 * C394) * C6692 -
             (C307 * C832 + C139448 * C1094) * C6772 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C124863 +
            (C40472 + C40473 - C40474 - C40475) * C124864 +
            (C46570 + C46569 - C46568 - C46571) * C124865) *
               C139289 * C139562 +
           ((C6998 - (C6997 + C6996) + C6999) * C124863 + C40485 * C124864 +
            (C40478 - (C40479 + C40480) + C40481) * C124865) *
               C139289 * C139308) *
              C9074 +
          (((C40474 - (C40473 + C40472) + C40475) * C124863 +
            (C46568 - (C46569 + C46570) + C46571) * C124864 +
            (C129449 * C6772 - (C37757 * C6692 + C37682 * C6771) +
             C129534 * C139360) *
                C124865) *
               C139289 * C139562 +
           (C40484 * C124863 + (C40480 + C40479 - C40478 - C40481) * C124864 +
            (C35900 * C6771 + C36011 * C6692 -
             (C307 * C20830 + C139448 * C21044) * C6772 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C124865) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C9224 +
                        (C307 * C245 + C139448 * C474) * C9074 -
                        C32431 * C9225 - C32649 * C139384) *
                           C124863 +
                       (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                        C36121 * C139384) *
                           C124864 +
                       (C35899 * C9224 + C36121 * C9074 - C37682 * C9225 -
                        C37829 * C139384) *
                           C124865) *
                          C139289 * C6692 +
                      ((C34920 * C9225 -
                        ((C307 * C1011 + C139448 * C1301) * C9074 +
                         (C307 * C832 + C139448 * C1094) * C9224) +
                        C35140 * C139384) *
                           C124863 +
                       (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                        C37072 * C139384) *
                           C124864 +
                       (C129449 * C9225 - (C37072 * C9074 + C36846 * C9224) +
                        C129613 * C139384) *
                           C124865) *
                          C139289 * C139360) *
                         C139562 +
                     (((C9451 - (C9450 + C9449) + C9452) * C124863 +
                       (C41636 - (C41635 + C41634) + C41637) * C124864 +
                       (C35900 * C9225 - (C5114 * C9074 + C4930 * C9224) +
                        C36122 * C139384) *
                           C124865) *
                          C139289 * C6692 +
                      ((C10300 + C10299 - C10298 - C10301) * C124863 +
                       (C42724 + C42723 - C42722 - C42725) * C124864 +
                       (C36848 * C9224 + C37073 * C9074 -
                        (C307 * C20830 + C139448 * C21044) * C9225 -
                        (C307 * C20974 + C139448 * C21183) * C139384) *
                           C124865) *
                          C139289 * C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C137108 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C139562 -
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C137101 -
                       (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                        C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                           C139308) *
                          C139289 * C139448 * C9074 +
                      ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C137101 -
                       ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                         C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                            C139562 +
                        (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                         C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                            C137108) +
                       (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                        C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                           C139308) *
                          C139289 * C139448 * C139384) *
                         C6692 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C137101 -
                       ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                         C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                            C139562 +
                        (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                         C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                            C137108) +
                       (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                        C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                           C139308) *
                          C139289 * C139448 * C9074 +
                      ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C137108 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C139562 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C137101 -
                       (C125168 * C20832 + C124865 * C21252 + C125167 * C5473 +
                        C124864 * C5953 + C125166 * C3901 + C124863 * C4414) *
                           C139308) *
                          C139289 * C139448 * C139384) *
                         C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C6771 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C6692 -
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C6772 -
                       (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                        C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                           C139360) *
                          C139289 * C139448 * C139562 +
                      ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C6772 -
                       ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                         C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                            C6692 +
                        (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                         C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                            C6771) +
                       (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                        C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                           C139360) *
                          C139289 * C139448 * C139308) *
                         C9074 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C6772 -
                       ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                         C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                            C6692 +
                        (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                         C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                            C6771) +
                       (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                        C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                           C139360) *
                          C139289 * C139448 * C139562 +
                      ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C6771 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C6692 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C6772 -
                       (C125168 * C20904 + C124865 * C21320 + C125167 * C5556 +
                        C124864 * C6030 + C125166 * C3990 + C124863 * C4495) *
                           C139360) *
                          C139289 * C139448 * C139308) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C9224 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C9074 -
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C9225 -
                       (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                        C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                           C139384) *
                          C139289 * C139448 * C6692 +
                      ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C9225 -
                       ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                         C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                            C9074 +
                        (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                         C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                            C9224) +
                       (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                        C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                           C139384) *
                          C139289 * C139448 * C139360) *
                         C139562 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C9225 -
                       ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                         C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                            C9074 +
                        (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                         C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                            C9224) +
                       (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                        C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                           C139384) *
                          C139289 * C139448 * C6692 +
                      ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C9224 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C9074 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C9225 -
                       (C125168 * C20974 + C124865 * C21389 + C125167 * C5636 +
                        C124864 * C6107 + C125166 * C4076 + C124863 * C4574) *
                           C139384) *
                          C139289 * C139448 * C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C139448 * C124863 +
            (C79993 + C79994) * C139448 * C124864 + C129212 * C124865) *
               C9074 -
           (C129895 * C124865 + (C81959 + C81960) * C139448 * C124864 +
            (C79994 + C79993) * C139448 * C124863) *
               C139384) *
              C139602 +
          ((C79995 * C139448 * C124863 + C81961 * C139448 * C124864 +
            (C81968 + C81969) * C139448 * C124865) *
               C139384 -
           (C129211 * C124865 + C79996 * C139448 * C124864 +
            (C65997 + C65996) * C139448 * C124863) *
               C9074) *
              C139593 +
          ((C66006 * C139448 * C124863 + C79997 * C139448 * C124864 +
            (C67977 + C67978) * C139448 * C124865) *
               C9074 -
           (((C63381 * C68677 + C139289 * C68679) * C139303 +
             (C63381 * C68676 + C139289 * C68678) * C3364) *
                C139448 * C124865 +
            (C67978 + C67977) * C139448 * C124864 +
            C66557 * C139448 * C124863) *
               C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7477 +
            (C63381 * C182 + C139289 * C188) * C139602 - C63884 * C7478 -
            C63994 * C139593 + C63890 * C7479 + C63995 * C7400) *
               C139448 * C124863 +
           (C90788 + C90789 - C90790 - C90791 + C90792 + C90793) * C139448 *
               C124864 +
           (C135841 + C135842 - C135843 - C135844 + C135845 + C135846) *
               C139448 * C124865) *
              C139303 * C9074 +
          ((C90790 - (C90789 + C90788) + C90791 - C90792 - C90793) * C139448 *
               C124863 +
           (C135843 - (C135842 + C135841) + C135844 - C135845 - C135846) *
               C139448 * C124864 +
           (C81966 * C7478 - (C82981 * C139602 + C82904 * C7477) +
            C82086 * C139593 - (C63381 * C68676 + C139289 * C68678) * C7479 -
            (C63381 * C68730 + C139289 * C68731) * C7400) *
               C139448 * C124865) *
              C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C9224 +
            (C63381 * C245 + C139289 * C251) * C9074 - C77515 * C9225 -
            C77750 * C139384) *
               C139448 * C124863 +
           (C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
            C81245 * C139384) *
               C139448 * C124864 +
           (C81016 * C9224 + C81245 * C9074 - C82904 * C9225 -
            C83053 * C139384) *
               C139448 * C124865) *
              C139602 +
          ((C72354 - (C72353 + C72352) + C72355) * C139448 * C124863 +
           (C87744 - (C87743 + C87742) + C87745) * C139448 * C124864 +
           (C81966 * C9225 - (C68151 * C9074 + C67971 * C9224) +
            C82192 * C139384) *
               C139448 * C124865) *
              C139593 +
          (C74744 * C139448 * C124863 +
           (C90900 + C90899 - C90898 - C90901) * C139448 * C124864 +
           (C67973 * C9224 + C68152 * C9074 -
            (C63381 * C68676 + C139289 * C68678) * C9225 -
            (C63381 * C68782 + C139289 * C68783) * C139384) *
               C139448 * C124865) *
              C7400) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C124863 +
            (C34904 + C34905) * C124864 + C129443 * C124865) *
               C139289 * C9074 -
           (C130066 * C124865 + (C36836 + C36837) * C124864 +
            (C34905 + C34904) * C124863) *
               C139289 * C139384) *
              C139602 +
          (((C34924 + C34925) * C124863 + (C36850 + C36851) * C124864 +
            (C129451 + C129452) * C124865) *
               C139289 * C139384 -
           (C129448 * C124865 + (C34925 + C34924) * C124864 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C124863) *
               C139289 * C9074) *
              C139593 +
          ((((C307 * C2570 + C139448 * C2827) * C3364 +
             (C307 * C2577 + C139448 * C2831) * C139303) *
                C124863 +
            (C34926 + C34927) * C124864 + (C128052 + C128053) * C124865) *
               C139289 * C9074 -
           (((C307 * C68677 + C139448 * C68835) * C139303 +
             (C307 * C68676 + C139448 * C68834) * C3364) *
                C124865 +
            (C128053 + C128052) * C124864 + (C34927 + C34926) * C124863) *
               C139289 * C139384) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[124] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7477 +
            (C307 * C182 + C139448 * C394) * C139602 -
            (C307 * C832 + C139448 * C1094) * C7478 -
            (C307 * C927 + C139448 * C1195) * C139593 +
            (C307 * C2570 + C139448 * C2827) * C7479 +
            (C307 * C2663 + C139448 * C2921) * C7400) *
               C124863 +
           (C45680 + C45681 - C45682 - C45683 + C45684 + C45685) * C124864 +
           (C136069 + C136070 - C136071 - C136072 + C136073 + C136074) *
               C124865) *
              C139289 * C139303 * C9074 +
          ((C45682 - (C45681 + C45680) + C45683 - C45684 - C45685) * C124863 +
           (C136071 - (C136070 + C136069) + C136072 - C136073 - C136074) *
               C124864 +
           (C129449 * C7478 - (C37757 * C139602 + C37682 * C7477) +
            C129534 * C139593 - (C307 * C68676 + C139448 * C68834) * C7479 -
            (C307 * C68730 + C139448 * C68886) * C7400) *
               C124865) *
              C139289 * C139303 * C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[124] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C307 * C107 + C139448 * C308) * C9224 +
                       (C307 * C245 + C139448 * C474) * C9074 - C32431 * C9225 -
                       C32649 * C139384) *
                          C124863 +
                      (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                       C36121 * C139384) *
                          C124864 +
                      (C35899 * C9224 + C36121 * C9074 - C37682 * C9225 -
                       C37829 * C139384) *
                          C124865) *
                         C139289 * C139602 +
                     ((C34920 * C9225 -
                       ((C307 * C1011 + C139448 * C1301) * C9074 +
                        (C307 * C832 + C139448 * C1094) * C9224) +
                       C35140 * C139384) *
                          C124863 +
                      (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                       C37072 * C139384) *
                          C124864 +
                      (C129449 * C9225 - (C37072 * C9074 + C36846 * C9224) +
                       C129613 * C139384) *
                          C124865) *
                         C139289 * C139593 +
                     (((C307 * C2570 + C139448 * C2827) * C9224 +
                       (C307 * C2745 + C139448 * C3017) * C9074 -
                       C34922 * C9225 - C35141 * C139384) *
                          C124863 +
                      (C34922 * C9224 + C35141 * C9074 - C128050 * C9225 -
                       C128213 * C139384) *
                          C124864 +
                      (C128050 * C9224 + C128213 * C9074 -
                       (C307 * C68676 + C139448 * C68834) * C9225 -
                       (C307 * C68782 + C139448 * C68937) * C139384) *
                          C124865) *
                         C139289 * C7400) *
                    C139303) /
                   (p * q * std::sqrt(p + q));
    d2eezx[124] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C3364 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C139303) *
                          C139289 * C139448 * C9074 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C139303 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C3364) *
                          C139289 * C139448 * C139384) *
                         C139602 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C3364 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C139303) *
                          C139289 * C139448 * C139384 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139303 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C3364) *
                          C139289 * C139448 * C9074) *
                         C139593 +
                     (((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                        C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                           C3364 +
                       (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                        C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                           C139303) *
                          C139289 * C139448 * C9074 -
                      ((C125168 * C68677 + C124865 * C68989 + C125167 * C19905 +
                        C124864 * C20541 + C125166 * C3905 + C124863 * C4418) *
                           C139303 +
                       (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                        C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                           C3364) *
                          C139289 * C139448 * C139384) *
                         C7400)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[124] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C7477 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139602 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C7478 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139593 +
                      (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C7479 +
                      (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                       C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                          C7400) *
                         C139289 * C139448 * C139303 * C9074 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C7478 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C139602 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C7477) +
                      (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                       C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                          C139593 -
                      (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                       C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                          C7479 -
                      (C125168 * C68730 + C124865 * C69040 + C125167 * C20021 +
                       C124864 * C20650 + C125166 * C3994 + C124863 * C4494) *
                          C7400) *
                         C139289 * C139448 * C139303 * C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[124] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C9224 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C9074 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C9225 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139384) *
                         C139289 * C139448 * C139602 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C9225 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C9074 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C9224) +
                      (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                       C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                          C139384) *
                         C139289 * C139448 * C139593 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C9224 +
                      (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                       C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                          C9074 -
                      (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                       C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                          C9225 -
                      (C125168 * C68782 + C124865 * C69091 + C125167 * C20129 +
                       C124864 * C20753 + C125166 * C4080 + C124863 * C4576) *
                          C139384) *
                         C139289 * C139448 * C7400) *
                    C139303) /
                   (p * q * std::sqrt(p + q));
    d2eexx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C139448 * C124863 +
            (C79993 + C79994) * C139448 * C124864 + C129212 * C124865) *
               C139603 -
           (C129895 * C124865 + (C81959 + C81960) * C139448 * C124864 +
            (C79994 + C79993) * C139448 * C124863) *
               C139596 +
           (C129212 * C124863 + (C82906 + C82907) * C139448 * C124864 +
            (C129898 + C129899) * C139448 * C124865) *
               C10691) *
              C6692 +
          ((C79995 * C139448 * C124863 + C81961 * C139448 * C124864 +
            (C81968 + C81969) * C139448 * C124865) *
               C139596 -
           (C129211 * C124865 + C79996 * C139448 * C124864 +
            (C65997 + C65996) * C139448 * C124863) *
               C139603 -
           (((C63381 * C82896 + C139289 * C82898) * C139303 +
             (C63381 * C82895 + C139289 * C82897) * C3364) *
                C139448 * C124865 +
            (C81969 + C81968) * C139448 * C124864 + C129211 * C124863) *
               C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6771 +
            (C63381 * C182 + C139289 * C188) * C6692 - C63884 * C6772 -
            C63994 * C139360) *
               C139448 * C124863 +
           (C85526 + C85527 - C85528 - C85529) * C139448 * C124864 +
           C136526 * C124865) *
              C139303 * C139603 +
          ((C85528 - (C85527 + C85526) + C85529) * C139448 * C124863 +
           (C91686 - (C91687 + C91688) + C91689) * C139448 * C124864 +
           (C136520 - (C136521 + C136522) + C136523) * C139448 * C124865) *
              C139303 * C139596 +
          (C136526 * C124863 +
           (C136522 + C136521 - C136520 - C136523) * C139448 * C124864 +
           (C129896 * C6771 + C129957 * C6692 -
            (C63381 * C82895 + C139289 * C82897) * C6772 -
            (C63381 * C82973 + C139289 * C82974) * C139360) *
               C139448 * C124865) *
              C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C10840 +
            (C63381 * C245 + C139289 * C251) * C139603 - C77515 * C10841 -
            C77750 * C139596 + C81016 * C10842 + C81245 * C10691) *
               C139448 * C124863 +
           (C77515 * C10840 + C77750 * C139603 - C81016 * C10841 -
            C81245 * C139596 + C82904 * C10842 + C83053 * C10691) *
               C139448 * C124864 +
           (C81016 * C10840 + C81245 * C139603 - C82904 * C10841 -
            C83053 * C139596 + C129896 * C10842 + C130013 * C10691) *
               C139448 * C124865) *
              C6692 +
          ((C75421 - (C75420 + C75419) + C75422 - C75423 - C75424) * C139448 *
               C124863 +
           (C91794 - (C91793 + C91792) + C91795 - C91796 - C91797) * C139448 *
               C124864 +
           (C81966 * C10841 - (C68151 * C139603 + C67971 * C10840) +
            C82192 * C139596 - (C63381 * C82895 + C139289 * C82897) * C10842 -
            (C63381 * C83048 + C139289 * C83049) * C10691) *
               C139448 * C124865) *
              C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eeyx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C124863 +
            (C34904 + C34905) * C124864 + C129443 * C124865) *
               C139289 * C139603 -
           (C130066 * C124865 + (C36836 + C36837) * C124864 +
            (C34905 + C34904) * C124863) *
               C139289 * C139596 +
           (C129443 * C124863 + (C37684 + C37685) * C124864 +
            (C130073 + C130074) * C124865) *
               C139289 * C10691) *
              C6692 +
          (((C34924 + C34925) * C124863 + (C36850 + C36851) * C124864 +
            (C129451 + C129452) * C124865) *
               C139289 * C139596 -
           (C129448 * C124865 + (C34925 + C34924) * C124864 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C124863) *
               C139289 * C139603 -
           (((C307 * C82896 + C139448 * C83120) * C139303 +
             (C307 * C82895 + C139448 * C83119) * C3364) *
                C124865 +
            (C129452 + C129451) * C124864 + C129448 * C124863) *
               C139289 * C10691) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6771 +
            (C307 * C182 + C139448 * C394) * C6692 -
            (C307 * C832 + C139448 * C1094) * C6772 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C124863 +
           (C40472 + C40473 - C40474 - C40475) * C124864 + C136755 * C124865) *
              C139289 * C139303 * C139603 +
          ((C40474 - (C40473 + C40472) + C40475) * C124863 +
           (C46568 - (C46569 + C46570) + C46571) * C124864 +
           (C136750 - (C136751 + C136752) + C136753) * C124865) *
              C139289 * C139303 * C139596 +
          (C136755 * C124863 +
           (C136752 + C136751 - C136750 - C136753) * C124864 +
           (C130071 * C6771 + C130130 * C6692 -
            (C307 * C82895 + C139448 * C83119) * C6772 -
            (C307 * C82973 + C139448 * C83199) * C139360) *
               C124865) *
              C139289 * C139303 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C10840 +
            (C307 * C245 + C139448 * C474) * C139603 - C32431 * C10841 -
            C32649 * C139596 + C35899 * C10842 + C36121 * C10691) *
               C124863 +
           (C32431 * C10840 + C32649 * C139603 - C35899 * C10841 -
            C36121 * C139596 + C37682 * C10842 + C37829 * C10691) *
               C124864 +
           (C35899 * C10840 + C36121 * C139603 - C37682 * C10841 -
            C37829 * C139596 + C130071 * C10842 + C130185 * C10691) *
               C124865) *
              C139289 * C6692 +
          ((C34920 * C10841 -
            ((C307 * C1011 + C139448 * C1301) * C139603 +
             (C307 * C832 + C139448 * C1094) * C10840) +
            C35140 * C139596 - C36846 * C10842 - C37072 * C10691) *
               C124863 +
           (C36846 * C10841 - (C35140 * C139603 + C34920 * C10840) +
            C37072 * C139596 - C129449 * C10842 - C129613 * C10691) *
               C124864 +
           (C129449 * C10841 - (C37072 * C139603 + C36846 * C10840) +
            C129613 * C139596 - (C307 * C82895 + C139448 * C83119) * C10842 -
            (C307 * C83048 + C139448 * C83272) * C10691) *
               C124865) *
              C139289 * C139360) *
         C139303) /
        (p * q * std::sqrt(p + q));
    d2eezx[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C3364 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C139303) *
                          C139289 * C139448 * C139603 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C139303 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C3364) *
                          C139289 * C139448 * C139596 +
                      ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                        C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                           C3364 +
                       (C125166 * C4663 + C124863 * C5195 + C125167 * C6168 +
                        C124864 * C6508 + C125168 * C37436 + C124865 * C37898) *
                           C139303) *
                          C139289 * C139448 * C10691) *
                         C6692 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C3364 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C139303) *
                          C139289 * C139448 * C139596 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139303 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C3364) *
                          C139289 * C139448 * C139603 -
                      ((C125168 * C82896 + C124865 * C83346 + C125167 * C20833 +
                        C124864 * C21253 + C125166 * C5474 + C124863 * C5954) *
                           C139303 +
                       (C125168 * C82895 + C124865 * C83345 + C125167 * C20831 +
                        C124864 * C21251 + C125166 * C5471 + C124863 * C5951) *
                           C3364) *
                          C139289 * C139448 * C10691) *
                         C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C6771 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C6692 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C6772 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139360) *
                         C139289 * C139448 * C139303 * C139603 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C6772 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C6692 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C6771) +
                      (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                       C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                          C139360) *
                         C139289 * C139448 * C139303 * C139596 +
                     ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C6771 +
                      (C125166 * C4746 + C124863 * C5285 + C125167 * C6227 +
                       C124864 * C6561 + C125168 * C37520 + C124865 * C37966) *
                          C6692 -
                      (C125168 * C82895 + C124865 * C83345 + C125167 * C20831 +
                       C124864 * C21251 + C125166 * C5471 + C124863 * C5951) *
                          C6772 -
                      (C125168 * C82973 + C124865 * C83413 + C125167 * C20905 +
                       C124864 * C21321 + C125166 * C5557 + C124863 * C6029) *
                          C139360) *
                         C139289 * C139448 * C139303 * C10691)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C10840 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139603 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C10841 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139596 +
                      (C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C10842 +
                      (C125166 * C4831 + C124863 * C5373 + C125167 * C6287 +
                       C124864 * C6612 + C125168 * C37596 + C124865 * C38033) *
                          C10691) *
                         C139289 * C139448 * C6692 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C10841 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139603 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C10840) +
                      (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                       C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                          C139596 -
                      (C125168 * C82895 + C124865 * C83345 + C125167 * C20831 +
                       C124864 * C21251 + C125166 * C5471 + C124863 * C5951) *
                          C10842 -
                      (C125168 * C83048 + C124865 * C83480 + C125167 * C20975 +
                       C124864 * C21388 + C125166 * C5637 + C124863 * C6106) *
                          C10691) *
                         C139289 * C139448 * C139360) *
                    C139303) /
                   (p * q * std::sqrt(p + q));
    d2eexx[126] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C137108 +
            (C63381 * C116 + C139289 * C125) * C139562 -
            (C63381 * C108 + C139289 * C114) * C137101 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C139448 * C124863 +
           (C80996 + C80997 - C80998 - C80999) * C139448 * C124864 +
           (C81022 + C81021 - C81020 - C81023) * C139448 * C124865) *
              C139372 * C2565 +
          ((C65296 - (C65295 + C65294) + C65297) * C139448 * C124863 +
           C89551 * C139448 * C124864 +
           (C81024 - (C81010 + C81011) + C81025) * C139448 * C124865) *
              C139372 * C2566 +
          (C65320 * C139448 * C124863 +
           (C73726 + C73725 - C73724 - C73727) * C139448 * C124864 +
           (C67973 * C137108 + C67974 * C139562 -
            (C63381 * C19902 + C139289 * C19906) * C137101 -
            (C63381 * C19904 + C139289 * C19908) * C139308) *
               C139448 * C124865) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C103 +
           (C63381 * C116 + C139289 * C125) * C92 -
           (C63381 * C108 + C139289 * C114) * C104 -
           (C63381 * C117 + C139289 * C126) * C93 +
           (C63381 * C109 + C139289 * C115) * C105 +
           (C63381 * C118 + C139289 * C127) * C94 -
           (C63381 * C110 + C139289 * C119) * C106 -
           (C63381 * C120 + C139289 * C128) * C95) *
              C139448 * C124863 +
          (C77515 * C103 + C77516 * C92 - C77517 * C104 - C77518 * C93 +
           C77519 * C105 + C77520 * C94 -
           (C63381 * C1699 + C139289 * C1704) * C106 -
           (C63381 * C1709 + C139289 * C1715) * C95) *
              C139448 * C124864 +
          (C81016 * C103 + C81015 * C92 - C81014 * C104 - C81017 * C93 +
           (C63381 * C4658 + C139289 * C4662) * C105 +
           (C63381 * C4665 + C139289 * C4670) * C94 -
           (C63381 * C4659 + C139289 * C4666) * C106 -
           (C63381 * C4667 + C139289 * C4671) * C95) *
              C139448 * C124865) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C137108 +
            (C63381 * C116 + C139289 * C125) * C139562 -
            (C63381 * C108 + C139289 * C114) * C137101 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C139448 * C124863 +
           (C80996 + C80997 - C80998 - C80999) * C139448 * C124864 +
           C128523 * C124865) *
              C4653 +
          ((C80998 - (C80997 + C80996) + C80999) * C139448 * C124863 +
           (C81020 - (C81021 + C81022) + C81023) * C139448 * C124864 +
           (C128521 - (C128513 + C128514) + C128522) * C139448 * C124865) *
              C4654 +
          (C128523 * C124863 +
           (C128514 + C128513 - C128521 - C128522) * C139448 * C124864 +
           ((C63381 * C37434 + C139289 * C37438) * C137108 +
            (C63381 * C37436 + C139289 * C37440) * C139562 -
            (C63381 * C37433 + C139289 * C37437) * C137101 -
            (C63381 * C37435 + C139289 * C37439) * C139308) *
               C139448 * C124865) *
              C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[126] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C139448 * C124863 +
           (C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C139448 *
               C124864 +
           (C81016 * C2660 + C81137 * C2565 - C67971 * C2661 - C68059 * C2566 +
            C67973 * C2662 + C68060 * C2567) *
               C139448 * C124865) *
              C139562 +
          ((C63886 * C2661 -
            ((C63381 * C183 + C139289 * C189) * C2565 +
             (C63381 * C108 + C139289 * C114) * C2660) +
            C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
               C139448 * C124863 +
           (C70576 * C2661 - (C77641 * C2565 + C77517 * C2660) +
            C70686 * C2566 - C70578 * C2662 - C70687 * C2567) *
               C139448 * C124864 +
           (C81018 * C2661 - (C81135 * C2565 + C81014 * C2660) +
            C81136 * C2566 - (C63381 * C19902 + C139289 * C19906) * C2662 -
            (C63381 * C20020 + C139289 * C20022) * C2567) *
               C139448 * C124865) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C181 +
            (C63381 * C182 + C139289 * C188) * C139346) *
               C139448 * C124863 +
           (C77625 + C77643) * C139448 * C124864 +
           (C81134 + C81140) * C139448 * C124865) *
              C92 -
          ((C81138 + C81124) * C139448 * C124865 +
           (C77644 + C77634) * C139448 * C124864 +
           ((C63381 * C183 + C139289 * C189) * C139346 +
            (C63381 * C108 + C139289 * C114) * C181) *
               C139448 * C124863) *
              C93 +
          (((C63381 * C109 + C139289 * C115) * C181 +
            (C63381 * C184 + C139289 * C190) * C139346) *
               C139448 * C124863 +
           (C77635 + C77645) * C139448 * C124864 +
           ((C63381 * C4658 + C139289 * C4662) * C181 +
            (C63381 * C4748 + C139289 * C4752) * C139346) *
               C139448 * C124865) *
              C94 -
          (((C63381 * C4749 + C139289 * C4753) * C139346 +
            (C63381 * C4659 + C139289 * C4666) * C181) *
               C139448 * C124865 +
           ((C63381 * C1793 + C139289 * C1798) * C139346 +
            (C63381 * C1699 + C139289 * C1704) * C181) *
               C139448 * C124864 +
           ((C63381 * C185 + C139289 * C191) * C139346 +
            (C63381 * C110 + C139289 * C119) * C181) *
               C139448 * C124863) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C139448 * C124863 +
            (C77625 + C77643) * C139448 * C124864 + C128603 * C124865) *
               C139562 -
           (C128604 * C124865 + (C77644 + C77634) * C139448 * C124864 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C139448 * C124863) *
               C139308) *
              C4653 +
          (((C77634 + C77644) * C139448 * C124863 +
            (C81124 + C81138) * C139448 * C124864 +
            (C128600 + C128606) * C139448 * C124865) *
               C139308 -
           ((C82982 + C82976) * C139448 * C124865 +
            (C81140 + C81134) * C139448 * C124864 +
            (C77643 + C77625) * C139448 * C124863) *
               C139562) *
              C4654 +
          ((C128603 * C124863 + (C82976 + C82982) * C139448 * C124864 +
            ((C63381 * C37434 + C139289 * C37438) * C181 +
             (C63381 * C37520 + C139289 * C37522) * C139346) *
                C139448 * C124865) *
               C139562 -
           (((C63381 * C37519 + C139289 * C37521) * C139346 +
             (C63381 * C37433 + C139289 * C37437) * C181) *
                C139448 * C124865 +
            (C128606 + C128600) * C139448 * C124864 + C128604 * C124863) *
               C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[126] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C139448 * C124863 +
            (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
            (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
               C2565 -
           ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
            (C76785 + C76784) * C139448 * C124864 +
            (C64098 + C64074) * C139448 * C124863) *
               C2566 +
           (C65475 * C139448 * C124863 + (C78660 + C78659) * C139448 * C124864 +
            (C67973 * C244 + C68152 * C139372) * C139448 * C124865) *
               C2567) *
              C139562 +
          (((C64080 + C64100) * C139448 * C124863 +
            (C76786 + C76787) * C139448 * C124864 +
            (C81018 * C244 + C81247 * C139372) * C139448 * C124865) *
               C2566 -
           ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
            (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C139448 * C124863) *
               C2565 -
           (((C63381 * C20128 + C139289 * C20130) * C139372 +
             (C63381 * C19902 + C139289 * C19906) * C244) *
                C139448 * C124865 +
            (C78662 + C78661) * C139448 * C124864 +
            C65482 * C139448 * C124863) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C244 +
            (C63381 * C245 + C139289 * C251) * C139372) *
               C139448 * C124863 +
           (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
           (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
              C139346 * C92 -
          ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
           (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
           ((C63381 * C246 + C139289 * C252) * C139372 +
            (C63381 * C108 + C139289 * C114) * C244) *
               C139448 * C124863) *
              C139346 * C93 +
          (((C63381 * C109 + C139289 * C115) * C244 +
            (C63381 * C247 + C139289 * C253) * C139372) *
               C139448 * C124863 +
           (C77519 * C244 + C77752 * C139372) * C139448 * C124864 +
           ((C63381 * C4658 + C139289 * C4662) * C244 +
            (C63381 * C4833 + C139289 * C4837) * C139372) *
               C139448 * C124865) *
              C139346 * C94 -
          (((C63381 * C4834 + C139289 * C4838) * C139372 +
            (C63381 * C4659 + C139289 * C4666) * C244) *
               C139448 * C124865 +
           ((C63381 * C1880 + C139289 * C1885) * C139372 +
            (C63381 * C1699 + C139289 * C1704) * C244) *
               C139448 * C124864 +
           ((C63381 * C248 + C139289 * C254) * C139372 +
            (C63381 * C110 + C139289 * C119) * C244) *
               C139448 * C124863) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C4828 +
            (C63381 * C245 + C139289 * C251) * C4653 - C77515 * C4829 -
            C77750 * C4654 + C81016 * C4830 + C81245 * C4655) *
               C139448 * C124863 +
           (C77515 * C4828 + C77750 * C4653 - C81016 * C4829 - C81245 * C4654 +
            C82904 * C4830 + C83053 * C4655) *
               C139448 * C124864 +
           (C81016 * C4828 + C81245 * C4653 - C82904 * C4829 - C83053 * C4654 +
            (C63381 * C37434 + C139289 * C37438) * C4830 +
            (C63381 * C37596 + C139289 * C37598) * C4655) *
               C139448 * C124865) *
              C139346 * C139562 +
          ((C77517 * C4829 -
            ((C63381 * C246 + C139289 * C252) * C4653 +
             (C63381 * C108 + C139289 * C114) * C4828) +
            C77751 * C4654 - C81014 * C4830 - C81246 * C4655) *
               C139448 * C124863 +
           (C81014 * C4829 - (C77751 * C4653 + C77517 * C4828) +
            C81246 * C4654 - C128518 * C4830 - C128683 * C4655) *
               C139448 * C124864 +
           (C128518 * C4829 - (C81246 * C4653 + C81014 * C4828) +
            C128683 * C4654 - (C63381 * C37433 + C139289 * C37437) * C4830 -
            (C63381 * C37595 + C139289 * C37597) * C4655) *
               C139448 * C124865) *
              C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[126] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C137108 +
            (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
            C338 * C139308) *
               C124863 +
           (C35876 + C35877 - C35878 - C35879) * C124864 +
           (C35903 + C35902 - C35884 - C35889) * C124865) *
              C139289 * C139372 * C2565 +
          ((C1116 * C137101 -
            ((C307 * C839 + C139448 * C1098) * C139562 +
             (C307 * C832 + C139448 * C1094) * C137108) +
            C1117 * C139308) *
               C124863 +
           (C44532 - (C44533 + C44534) + C44535) * C124864 +
           (C36848 * C137101 - (C36847 * C139562 + C36846 * C137108) +
            C36849 * C139308) *
               C124865) *
              C139289 * C139372 * C2566 +
          (((C307 * C2570 + C139448 * C2827) * C137108 +
            (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
            C2845 * C139308) *
               C124863 +
           (C34922 * C137108 + C34923 * C139562 - C33388 * C137101 -
            C33389 * C139308) *
               C124864 +
           ((C307 * C19903 + C139448 * C20237) * C137108 +
            (C307 * C19905 + C139448 * C20239) * C139562 -
            (C307 * C19902 + C139448 * C20236) * C137101 -
            (C307 * C19904 + C139448 * C20238) * C139308) *
               C124865) *
              C139289 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C103 +
           (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C124863 +
          (C32431 * C103 + C32432 * C92 - C1984 * C104 - C1985 * C93 +
           C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
              C124864 +
          (C35899 * C103 + C35898 * C92 - C4930 * C104 - C4931 * C93 +
           C4932 * C105 + C4933 * C94 -
           (C307 * C4659 + C139448 * C4916) * C106 -
           (C307 * C4667 + C139448 * C4920) * C95) *
              C124865) *
         C139289 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C137108 +
            (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
            C338 * C139308) *
               C124863 +
           (C35876 + C35877 - C35878 - C35879) * C124864 + C128764 * C124865) *
              C139289 * C4653 +
          ((C35878 - (C35877 + C35876) + C35879) * C124863 +
           (C35884 - (C35902 + C35903) + C35889) * C124864 +
           (C128759 - (C128760 + C128761) + C128762) * C124865) *
              C139289 * C4654 +
          (C128764 * C124863 +
           (C128761 + C128760 - C128759 - C128762) * C124864 +
           ((C307 * C37434 + C139448 * C37672) * C137108 +
            (C307 * C37436 + C139448 * C37674) * C139562 -
            (C307 * C37433 + C139448 * C37671) * C137101 -
            (C307 * C37435 + C139448 * C37673) * C139308) *
               C124865) *
              C139289 * C4655) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[126] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C124863 +
           (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C124864 +
           (C35899 * C2660 + C36010 * C2565 - C36846 * C2661 - C36966 * C2566 +
            (C307 * C19903 + C139448 * C20237) * C2662 +
            (C307 * C20021 + C139448 * C20338) * C2567) *
               C124865) *
              C139289 * C139562 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C124863 +
           (C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C124864 +
           (C36848 * C2661 - (C5018 * C2565 + C4930 * C2660) + C36967 * C2566 -
            (C307 * C19902 + C139448 * C20236) * C2662 -
            (C307 * C20020 + C139448 * C20339) * C2567) *
               C124865) *
              C139289 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C181 +
            (C307 * C182 + C139448 * C394) * C139346) *
               C124863 +
           (C32533 + C32540) * C124864 + (C36006 + C36012) * C124865) *
              C139289 * C92 -
          (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
              C139289 * C93 +
          (C421 * C124863 + C32538 * C124864 + (C5015 + C5021) * C124865) *
              C139289 * C94 -
          (((C307 * C4749 + C139448 * C5010) * C139346 +
            (C307 * C4659 + C139448 * C4916) * C181) *
               C124865 +
           (C2083 + C2075) * C124864 + C422 * C124863) *
              C139289 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C124863 +
            (C32533 + C32540) * C124864 + C128839 * C124865) *
               C139289 * C139562 -
           (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
               C139289 * C139308) *
              C4653 +
          ((C32536 * C124863 + C36002 * C124864 + (C36007 + C36013) * C124865) *
               C139289 * C139308 -
           ((C37758 + C37754) * C124865 + (C36012 + C36006) * C124864 +
            (C32540 + C32533) * C124863) *
               C139289 * C139562) *
              C4654 +
          ((C128839 * C124863 + (C37754 + C37758) * C124864 +
            ((C307 * C37434 + C139448 * C37672) * C181 +
             (C307 * C37520 + C139448 * C37752) * C139346) *
                C124865) *
               C139289 * C139562 -
           (((C307 * C37519 + C139448 * C37751) * C139346 +
             (C307 * C37433 + C139448 * C37671) * C181) *
                C124865 +
            (C36013 + C36007) * C124864 + C36003 * C124863) *
               C139289 * C139308) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[126] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C124863 +
            (C32431 * C244 + C32649 * C139372) * C124864 +
            (C35899 * C244 + C36121 * C139372) * C124865) *
               C139289 * C2565 -
           ((C37072 * C139372 + C36846 * C244) * C124865 +
            (C35140 * C139372 + C34920 * C244) * C124864 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C124863) *
               C139289 * C2566 +
           (((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C124863 +
            (C34922 * C244 + C35141 * C139372) * C124864 +
            ((C307 * C19903 + C139448 * C20237) * C244 +
             (C307 * C20129 + C139448 * C20438) * C139372) *
                C124865) *
               C139289 * C2567) *
              C139562 +
          (((C1310 + C1318) * C124863 + (C31608 + C31607) * C124864 +
            (C36848 * C244 + C37073 * C139372) * C124865) *
               C139289 * C2566 -
           ((C5114 * C139372 + C4930 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139289 * C2565 -
           (((C307 * C20128 + C139448 * C20439) * C139372 +
             (C307 * C19902 + C139448 * C20236) * C244) *
                C124865 +
            (C33599 + C33595) * C124864 + (C3030 + C3022) * C124863) *
               C139289 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C244 +
            (C307 * C245 + C139448 * C474) * C139372) *
               C124863 +
           (C32431 * C244 + C32649 * C139372) * C124864 +
           (C35899 * C244 + C36121 * C139372) * C124865) *
              C139289 * C139346 * C92 -
          ((C5114 * C139372 + C4930 * C244) * C124865 +
           (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
              C139289 * C139346 * C93 +
          (C501 * C124863 + (C30744 + C30743) * C124864 +
           (C4932 * C244 + C5115 * C139372) * C124865) *
              C139289 * C139346 * C94 -
          (((C307 * C4834 + C139448 * C5098) * C139372 +
            (C307 * C4659 + C139448 * C4916) * C244) *
               C124865 +
           (C30746 + C30745) * C124864 + C502 * C124863) *
              C139289 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C4828 +
            (C307 * C245 + C139448 * C474) * C4653 - C32431 * C4829 -
            C32649 * C4654 + C35899 * C4830 + C36121 * C4655) *
               C124863 +
           (C32431 * C4828 + C32649 * C4653 - C35899 * C4829 - C36121 * C4654 +
            C37682 * C4830 + C37829 * C4655) *
               C124864 +
           (C35899 * C4828 + C36121 * C4653 - C37682 * C4829 - C37829 * C4654 +
            (C307 * C37434 + C139448 * C37672) * C4830 +
            (C307 * C37596 + C139448 * C37824) * C4655) *
               C124865) *
              C139289 * C139346 * C139562 +
          ((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C124863 +
           (C36116 - (C36115 + C36114) + C36117 - C36118 - C36123) * C124864 +
           (C35900 * C4829 - (C5114 * C4653 + C4930 * C4828) + C36122 * C4654 -
            (C307 * C37433 + C139448 * C37671) * C4830 -
            (C307 * C37595 + C139448 * C37825) * C4655) *
               C124865) *
              C139289 * C139346 * C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[126] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C137108 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139562 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C137101 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139308) *
                         C139289 * C139448 * C139372 * C2565 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C137101 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139562 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C137108) +
                      (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                       C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                          C139308) *
                         C139289 * C139448 * C139372 * C2566 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C137108 +
                      (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                       C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                          C139562 -
                      (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                       C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                          C137101 -
                      (C125168 * C19904 + C124865 * C20540 + C125167 * C3904 +
                       C124864 * C4417 + C125166 * C2578 + C124863 * C3110) *
                          C139308) *
                         C139289 * C139448 * C139372 * C2567)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                      C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                         C103 +
                     (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                      C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                         C92 -
                     (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                      C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                         C104 -
                     (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                      C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                         C93 +
                     (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                      C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                         C105 +
                     (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                      C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                         C94 -
                     (C125168 * C4659 + C124865 * C5194 + C125167 * C1699 +
                      C124864 * C2266 + C125166 * C110 + C124863 * C558) *
                         C106 -
                     (C125168 * C4667 + C124865 * C5198 + C125167 * C1709 +
                      C124864 * C2271 + C125166 * C120 + C124863 * C564) *
                         C95) *
                    C139289 * C139448 * C139372 * C139346) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C137108 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139562 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C137101 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139308) *
                         C139289 * C139448 * C4653 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C137101 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C139562 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C137108) +
                      (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                       C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                          C139308) *
                         C139289 * C139448 * C4654 +
                     ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C137108 +
                      (C125166 * C4663 + C124863 * C5195 + C125167 * C6168 +
                       C124864 * C6508 + C125168 * C37436 + C124865 * C37898) *
                          C139562 -
                      (C125168 * C37433 + C124865 * C37895 + C125167 * C6164 +
                       C124864 * C6504 + C125166 * C4657 + C124863 * C5192) *
                          C137101 -
                      (C125168 * C37435 + C124865 * C37897 + C125167 * C6167 +
                       C124864 * C6507 + C125166 * C4664 + C124863 * C5196) *
                          C139308) *
                         C139289 * C139448 * C4655) *
                    C139346) /
                       (p * q * std::sqrt(p + q));
    d2eezy[126] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C2660 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C2565 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C2661 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C2566 +
                      (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C2662 +
                      (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                       C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                          C2567) *
                         C139289 * C139448 * C139562 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C2661 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C2565 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C2660) +
                      (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                       C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                          C2566 -
                      (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                       C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                          C2662 -
                      (C125168 * C20020 + C124865 * C20651 + C125167 * C3993 +
                       C124864 * C4496 + C125166 * C2664 + C124863 * C3200) *
                          C2567) *
                         C139289 * C139448 * C139308) *
                    C139372) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C181 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139346) *
                         C139289 * C139448 * C92 -
                     ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                       C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                          C139346 +
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C181) *
                         C139289 * C139448 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C181 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                       C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                          C139346) *
                         C139289 * C139448 * C94 -
                     ((C125168 * C4749 + C124865 * C5288 + C125167 * C1793 +
                       C124864 * C2367 + C125166 * C185 + C124863 * C644) *
                          C139346 +
                      (C125168 * C4659 + C124865 * C5194 + C125167 * C1699 +
                       C124864 * C2266 + C125166 * C110 + C124863 * C558) *
                          C181) *
                         C139289 * C139448 * C95) *
                    C139372) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C181 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C139346) *
                          C139289 * C139448 * C139562 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139346 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C181) *
                          C139289 * C139448 * C139308) *
                         C4653 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C181 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C139346) *
                          C139289 * C139448 * C139308 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C139346 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C181) *
                          C139289 * C139448 * C139562) *
                         C4654 +
                     (((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                        C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                           C181 +
                       (C125166 * C4746 + C124863 * C5285 + C125167 * C6227 +
                        C124864 * C6561 + C125168 * C37520 + C124865 * C37966) *
                           C139346) *
                          C139289 * C139448 * C139562 -
                      ((C125168 * C37519 + C124865 * C37965 + C125167 * C6226 +
                        C124864 * C6560 + C125166 * C4747 + C124863 * C5286) *
                           C139346 +
                       (C125168 * C37433 + C124865 * C37895 + C125167 * C6164 +
                        C124864 * C6504 + C125166 * C4657 + C124863 * C5192) *
                           C181) *
                          C139289 * C139448 * C139308) *
                         C4655)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[126] += (-std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139372) *
                          C139289 * C139448 * C2565 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139372 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C244) *
                          C139289 * C139448 * C2566 +
                      ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                        C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                           C244 +
                       (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                        C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                           C139372) *
                          C139289 * C139448 * C2567) *
                         C139562 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C244 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139372) *
                          C139289 * C139448 * C2566 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139372 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139289 * C139448 * C2565 -
                      ((C125168 * C20128 + C124865 * C20754 + C125167 * C4079 +
                        C124864 * C4577 + C125166 * C2746 + C124863 * C3296) *
                           C139372 +
                       (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                        C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                           C244) *
                          C139289 * C139448 * C2567) *
                         C139308)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139372) *
                         C139289 * C139448 * C139346 * C92 -
                     ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                       C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                          C139372 +
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C244) *
                         C139289 * C139448 * C139346 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C244 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                       C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                          C139372) *
                         C139289 * C139448 * C139346 * C94 -
                     ((C125168 * C4834 + C124865 * C5376 + C125167 * C1880 +
                       C124864 * C2463 + C125166 * C248 + C124863 * C722) *
                          C139372 +
                      (C125168 * C4659 + C124865 * C5194 + C125167 * C1699 +
                       C124864 * C2266 + C125166 * C110 + C124863 * C558) *
                          C244) *
                         C139289 * C139448 * C139346 * C95)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C4828 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C4653 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C4829 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C4654 +
                      (C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C4830 +
                      (C125166 * C4831 + C124863 * C5373 + C125167 * C6287 +
                       C124864 * C6612 + C125168 * C37596 + C124865 * C38033) *
                          C4655) *
                         C139289 * C139448 * C139346 * C139562 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C4829 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C4653 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C4828) +
                      (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                       C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                          C4654 -
                      (C125168 * C37433 + C124865 * C37895 + C125167 * C6164 +
                       C124864 * C6504 + C125166 * C4657 + C124863 * C5192) *
                          C4830 -
                      (C125168 * C37595 + C124865 * C38034 + C125167 * C6286 +
                       C124864 * C6613 + C125166 * C4832 + C124863 * C5374) *
                          C4655) *
                         C139289 * C139448 * C139346 * C139308)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3364 +
            (C63381 * C116 + C139289 * C125) * C139303) *
               C139448 * C124863 +
           (C79993 + C79994) * C139448 * C124864 +
           (C81960 + C81959) * C139448 * C124865) *
              C139372 * C3360 -
          (C81958 * C139448 * C124865 + C79996 * C139448 * C124864 +
           (C65997 + C65996) * C139448 * C124863) *
              C139372 * C3361 +
          (C66006 * C139448 * C124863 + C79997 * C139448 * C124864 +
           (C67977 + C67978) * C139448 * C124865) *
              C139372 * C3362 -
          (((C63381 * C67959 + C139289 * C67961) * C139303 +
            (C63381 * C67958 + C139289 * C67960) * C3364) *
               C139448 * C124865 +
           (C66556 + C66555) * C139448 * C124864 + C66007 * C139448 * C124863) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C139448 * C124863 +
           (C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C139448 *
               C124864 +
           (C81016 * C826 + C81015 * C821 - C81014 * C827 - C81017 * C822 +
            (C63381 * C4658 + C139289 * C4662) * C828 +
            (C63381 * C4665 + C139289 * C4670) * C823) *
               C139448 * C124865) *
              C139372 * C139570 +
          ((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C139448 *
               C124863 +
           (C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C139448 *
               C124864 +
           (C81018 * C827 - (C67972 * C821 + C67971 * C826) + C81019 * C822 -
            (C63381 * C5469 + C139289 * C5475) * C828 -
            (C63381 * C5472 + C139289 * C5478) * C823) *
               C139448 * C124865) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C139448 * C124863 +
            (C79993 + C79994) * C139448 * C124864 + C129212 * C124865) *
               C4653 -
           ((C82907 + C82906) * C139448 * C124865 +
            (C81959 + C81960) * C139448 * C124864 +
            (C79994 + C79993) * C139448 * C124863) *
               C4654 +
           (C129212 * C124863 + (C82906 + C82907) * C139448 * C124864 +
            ((C63381 * C37434 + C139289 * C37438) * C3364 +
             (C63381 * C37436 + C139289 * C37440) * C139303) *
                C139448 * C124865) *
               C4655) *
              C139570 +
          ((C79995 * C139448 * C124863 + C81961 * C139448 * C124864 +
            (C81968 + C81969) * C139448 * C124865) *
               C4654 -
           (C129211 * C124865 + C79996 * C139448 * C124864 +
            (C65997 + C65996) * C139448 * C124863) *
               C4653 -
           (((C63381 * C82896 + C139289 * C82898) * C139303 +
             (C63381 * C82895 + C139289 * C82897) * C3364) *
                C139448 * C124865 +
            (C81969 + C81968) * C139448 * C124864 + C129211 * C124863) *
               C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eexy[127] +=
        (-std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C3427 +
           (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
           C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
           C65399 * C3363) *
              C139448 * C124863 +
          (C77515 * C3427 + C77640 * C3360 - C66548 * C3428 - C66640 * C3361 +
           C66546 * C3429 + C66641 * C3362 - C66549 * C3430 - C66642 * C3363) *
              C139448 * C124864 +
          (C81016 * C3427 + C81137 * C3360 - C67971 * C3428 - C68059 * C3361 +
           C67973 * C3429 + C68060 * C3362 -
           (C63381 * C67958 + C139289 * C67960) * C3430 -
           (C63381 * C68052 + C139289 * C68053) * C3363) *
              C139448 * C124865) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C923 +
            (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
            C63994 * C139360) *
               C139448 * C124863 +
           (C82068 + C82069 - C82070 - C82071) * C139448 * C124864 +
           (C82078 + C82077 - C82076 - C82079) * C139448 * C124865) *
              C821 +
          ((C63886 * C924 -
            ((C63381 * C183 + C139289 * C189) * C139570 +
             (C63381 * C108 + C139289 * C114) * C923) +
            C63996 * C139360) *
               C139448 * C124863 +
           (C87604 - (C87605 + C87606) + C87607) * C139448 * C124864 +
           (C81018 * C924 - (C81135 * C139570 + C81014 * C923) +
            C81136 * C139360) *
               C139448 * C124865) *
              C822 +
          (((C63381 * C109 + C139289 * C115) * C923 +
            (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
            C63998 * C139360) *
               C139448 * C124863 +
           (C77519 * C923 + C77642 * C139570 - C76581 * C924 -
            C76685 * C139360) *
               C139448 * C124864 +
           ((C63381 * C4658 + C139289 * C4662) * C923 +
            (C63381 * C4748 + C139289 * C4752) * C139570 -
            (C63381 * C5469 + C139289 * C5475) * C924 -
            (C63381 * C5555 + C139289 * C5558) * C139360) *
               C139448 * C124865) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C923 +
            (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
            C63994 * C139360) *
               C139448 * C124863 +
           (C82068 + C82069 - C82070 - C82071) * C139448 * C124864 +
           C129294 * C124865) *
              C139303 * C4653 +
          ((C82070 - (C82069 + C82068) + C82071) * C139448 * C124863 +
           (C82076 - (C82077 + C82078) + C82079) * C139448 * C124864 +
           (C129288 - (C129289 + C129290) + C129291) * C139448 * C124865) *
              C139303 * C4654 +
          (C129294 * C124863 +
           (C129290 + C129289 - C129288 - C129291) * C139448 * C124864 +
           ((C63381 * C37434 + C139289 * C37438) * C923 +
            (C63381 * C37520 + C139289 * C37522) * C139570 -
            (C63381 * C82895 + C139289 * C82897) * C924 -
            (C63381 * C82973 + C139289 * C82974) * C139360) *
               C139448 * C124865) *
              C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C244 +
            (C63381 * C245 + C139289 * C251) * C139372) *
               C139448 * C124863 +
           (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
           (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
              C3360 -
          ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
           (C76785 + C76784) * C139448 * C124864 +
           (C64098 + C64074) * C139448 * C124863) *
              C3361 +
          (C65475 * C139448 * C124863 + (C78660 + C78659) * C139448 * C124864 +
           (C67973 * C244 + C68152 * C139372) * C139448 * C124865) *
              C3362 -
          (((C63381 * C68134 + C139289 * C68135) * C139372 +
            (C63381 * C67958 + C139289 * C67960) * C244) *
               C139448 * C124865 +
           (C79474 + C79473) * C139448 * C124864 + C66119 * C139448 * C124863) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C139448 * C124863 +
            (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
            (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
               C139570 -
           ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
            (C76785 + C76784) * C139448 * C124864 +
            (C64098 + C64074) * C139448 * C124863) *
               C139360) *
              C821 +
          (((C64080 + C64100) * C139448 * C124863 +
            (C76786 + C76787) * C139448 * C124864 +
            (C81018 * C244 + C81247 * C139372) * C139448 * C124865) *
               C139360 -
           ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
            (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C139448 * C124863) *
               C139570) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C244 +
             (C63381 * C247 + C139289 * C253) * C139372) *
                C139448 * C124863 +
            (C77519 * C244 + C77752 * C139372) * C139448 * C124864 +
            ((C63381 * C4658 + C139289 * C4662) * C244 +
             (C63381 * C4833 + C139289 * C4837) * C139372) *
                C139448 * C124865) *
               C139570 -
           (((C63381 * C5635 + C139289 * C5638) * C139372 +
             (C63381 * C5469 + C139289 * C5475) * C244) *
                C139448 * C124865 +
            (C76792 + C76788) * C139448 * C124864 +
            (C64102 + C64086) * C139448 * C124863) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C4828 +
            (C63381 * C245 + C139289 * C251) * C4653 - C77515 * C4829 -
            C77750 * C4654 + C81016 * C4830 + C81245 * C4655) *
               C139448 * C124863 +
           (C77515 * C4828 + C77750 * C4653 - C81016 * C4829 - C81245 * C4654 +
            C82904 * C4830 + C83053 * C4655) *
               C139448 * C124864 +
           (C81016 * C4828 + C81245 * C4653 - C82904 * C4829 - C83053 * C4654 +
            (C63381 * C37434 + C139289 * C37438) * C4830 +
            (C63381 * C37596 + C139289 * C37598) * C4655) *
               C139448 * C124865) *
              C139570 +
          ((C68139 - (C68138 + C68137) + C68140 - C68141 - C68153) * C139448 *
               C124863 +
           (C82187 - (C82186 + C82185) + C82188 - C82189 - C82193) * C139448 *
               C124864 +
           (C81966 * C4829 - (C68151 * C4653 + C67971 * C4828) +
            C82192 * C4654 - (C63381 * C82895 + C139289 * C82897) * C4830 -
            (C63381 * C83048 + C139289 * C83049) * C4655) *
               C139448 * C124865) *
              C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3364 +
            (C307 * C116 + C139448 * C314) * C139303) *
               C124863 +
           (C34904 + C34905) * C124864 + (C36837 + C36836) * C124865) *
              C139289 * C139372 * C3360 -
          ((C36851 + C36850) * C124865 + (C34925 + C34924) * C124864 +
           ((C307 * C839 + C139448 * C1098) * C139303 +
            (C307 * C832 + C139448 * C1094) * C3364) *
               C124863) *
              C139289 * C139372 * C3361 +
          (((C307 * C2570 + C139448 * C2827) * C3364 +
            (C307 * C2577 + C139448 * C2831) * C139303) *
               C124863 +
           (C34926 + C34927) * C124864 +
           ((C307 * C19903 + C139448 * C20237) * C3364 +
            (C307 * C19905 + C139448 * C20239) * C139303) *
               C124865) *
              C139289 * C139372 * C3362 -
          (((C307 * C67959 + C139448 * C68229) * C139303 +
            (C307 * C67958 + C139448 * C68228) * C3364) *
               C124865 +
           ((C307 * C17961 + C139448 * C18319) * C139303 +
            (C307 * C17959 + C139448 * C18317) * C3364) *
               C124864 +
           ((C307 * C3370 + C139448 * C3548) * C139303 +
            (C307 * C3367 + C139448 * C3545) * C3364) *
               C124863) *
              C139289 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C826 +
            (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C124863 +
           (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C124864 +
           (C35899 * C826 + C35898 * C821 - C4930 * C827 - C4931 * C822 +
            C4932 * C828 + C4933 * C823) *
               C124865) *
              C139289 * C139372 * C139570 +
          ((C1116 * C827 -
            ((C307 * C839 + C139448 * C1098) * C821 +
             (C307 * C832 + C139448 * C1094) * C826) +
            C1117 * C822 - C1118 * C828 - C1119 * C823) *
               C124863 +
           (C8433 * C827 - (C34921 * C821 + C34920 * C826) + C8434 * C822 -
            C8435 * C828 - C8436 * C823) *
               C124864 +
           (C36848 * C827 - (C36847 * C821 + C36846 * C826) + C36849 * C822 -
            (C307 * C5469 + C139448 * C5715) * C828 -
            (C307 * C5472 + C139448 * C5718) * C823) *
               C124865) *
              C139289 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C124863 +
            (C34904 + C34905) * C124864 + C129443 * C124865) *
               C139289 * C4653 -
           ((C37685 + C37684) * C124865 + (C36836 + C36837) * C124864 +
            (C34905 + C34904) * C124863) *
               C139289 * C4654 +
           (C129443 * C124863 + (C37684 + C37685) * C124864 +
            ((C307 * C37434 + C139448 * C37672) * C3364 +
             (C307 * C37436 + C139448 * C37674) * C139303) *
                C124865) *
               C139289 * C4655) *
              C139570 +
          (((C34924 + C34925) * C124863 + (C36850 + C36851) * C124864 +
            (C129451 + C129452) * C124865) *
               C139289 * C4654 -
           (C129448 * C124865 + (C34925 + C34924) * C124864 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C124863) *
               C139289 * C4653 -
           (((C307 * C82896 + C139448 * C83120) * C139303 +
             (C307 * C82895 + C139448 * C83119) * C3364) *
                C124865 +
            (C129452 + C129451) * C124864 + C129448 * C124863) *
               C139289 * C4655) *
              C139360)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[127] +=
        (-std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C3427 +
           (C307 * C182 + C139448 * C394) * C3360 -
           (C307 * C832 + C139448 * C1094) * C3428 -
           (C307 * C927 + C139448 * C1195) * C3361 +
           (C307 * C2570 + C139448 * C2827) * C3429 +
           (C307 * C2663 + C139448 * C2921) * C3362 -
           (C307 * C3367 + C139448 * C3545) * C3430 -
           (C307 * C3433 + C139448 * C3599) * C3363) *
              C124863 +
          (C32431 * C3427 + C32539 * C3360 - C34920 * C3428 - C35034 * C3361 +
           C34922 * C3429 + C35035 * C3362 -
           (C307 * C17959 + C139448 * C18317) * C3430 -
           (C307 * C18089 + C139448 * C18418) * C3363) *
              C124864 +
          (C35899 * C3427 + C36010 * C3360 - C36846 * C3428 - C36966 * C3361 +
           (C307 * C19903 + C139448 * C20237) * C3429 +
           (C307 * C20021 + C139448 * C20338) * C3362 -
           (C307 * C67958 + C139448 * C68228) * C3430 -
           (C307 * C68052 + C139448 * C68304) * C3363) *
              C124865) *
         C139289 * C139303 * C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C923 +
            (C307 * C182 + C139448 * C394) * C139570 -
            (C307 * C832 + C139448 * C1094) * C924 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C124863 +
           (C36952 + C36953 - C36954 - C36955) * C124864 +
           (C36958 + C36957 - C36956 - C36968) * C124865) *
              C139289 * C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C124863 + C42591 * C124864 +
           (C36961 - (C36962 + C36963) + C36969) * C124865) *
              C139289 * C822 +
          (C1224 * C124863 + (C10198 + C10197 - C10196 - C10199) * C124864 +
           (C4932 * C923 + C5019 * C139570 -
            (C307 * C5469 + C139448 * C5715) * C924 -
            (C307 * C5555 + C139448 * C5797) * C139360) *
               C124865) *
              C139289 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C923 +
            (C307 * C182 + C139448 * C394) * C139570 -
            (C307 * C832 + C139448 * C1094) * C924 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C124863 +
           (C36952 + C36953 - C36954 - C36955) * C124864 + C129535 * C124865) *
              C139289 * C139303 * C4653 +
          ((C36954 - (C36953 + C36952) + C36955) * C124863 +
           (C36956 - (C36957 + C36958) + C36968) * C124864 +
           (C129528 - (C129529 + C129530) + C129536) * C124865) *
              C139289 * C139303 * C4654 +
          (C129535 * C124863 +
           (C129530 + C129529 - C129528 - C129536) * C124864 +
           ((C307 * C37434 + C139448 * C37672) * C923 +
            (C307 * C37520 + C139448 * C37752) * C139570 -
            (C307 * C82895 + C139448 * C83119) * C924 -
            (C307 * C82973 + C139448 * C83199) * C139360) *
               C124865) *
              C139289 * C139303 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C244 +
            (C307 * C245 + C139448 * C474) * C139372) *
               C124863 +
           (C32431 * C244 + C32649 * C139372) * C124864 +
           (C35899 * C244 + C36121 * C139372) * C124865) *
              C139289 * C3360 -
          ((C37072 * C139372 + C36846 * C244) * C124865 +
           (C35140 * C139372 + C34920 * C244) * C124864 +
           ((C307 * C1011 + C139448 * C1301) * C139372 +
            (C307 * C832 + C139448 * C1094) * C244) *
               C124863) *
              C139289 * C3361 +
          (((C307 * C2570 + C139448 * C2827) * C244 +
            (C307 * C2745 + C139448 * C3017) * C139372) *
               C124863 +
           (C34922 * C244 + C35141 * C139372) * C124864 +
           ((C307 * C19903 + C139448 * C20237) * C244 +
            (C307 * C20129 + C139448 * C20438) * C139372) *
               C124865) *
              C139289 * C3362 -
          (((C307 * C68134 + C139448 * C68379) * C139372 +
            (C307 * C67958 + C139448 * C68228) * C244) *
               C124865 +
           ((C307 * C18203 + C139448 * C18518) * C139372 +
            (C307 * C17959 + C139448 * C18317) * C244) *
               C124864 +
           ((C307 * C3489 + C139448 * C3654) * C139372 +
            (C307 * C3367 + C139448 * C3545) * C244) *
               C124863) *
              C139289 * C3363) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C124863 +
            (C32431 * C244 + C32649 * C139372) * C124864 +
            (C35899 * C244 + C36121 * C139372) * C124865) *
               C139289 * C139570 -
           ((C37072 * C139372 + C36846 * C244) * C124865 +
            (C35140 * C139372 + C34920 * C244) * C124864 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C124863) *
               C139289 * C139360) *
              C821 +
          (((C1310 + C1318) * C124863 + (C31608 + C31607) * C124864 +
            (C36848 * C244 + C37073 * C139372) * C124865) *
               C139289 * C139360 -
           ((C5114 * C139372 + C4930 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139289 * C139570) *
              C822 +
          ((C501 * C124863 + (C30744 + C30743) * C124864 +
            (C4932 * C244 + C5115 * C139372) * C124865) *
               C139289 * C139570 -
           (((C307 * C5635 + C139448 * C5874) * C139372 +
             (C307 * C5469 + C139448 * C5715) * C244) *
                C124865 +
            (C31610 + C31609) * C124864 + C1320 * C124863) *
               C139289 * C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C4828 +
            (C307 * C245 + C139448 * C474) * C4653 - C32431 * C4829 -
            C32649 * C4654 + C35899 * C4830 + C36121 * C4655) *
               C124863 +
           (C32431 * C4828 + C32649 * C4653 - C35899 * C4829 - C36121 * C4654 +
            C37682 * C4830 + C37829 * C4655) *
               C124864 +
           (C35899 * C4828 + C36121 * C4653 - C37682 * C4829 - C37829 * C4654 +
            (C307 * C37434 + C139448 * C37672) * C4830 +
            (C307 * C37596 + C139448 * C37824) * C4655) *
               C124865) *
              C139289 * C139570 +
          ((C34920 * C4829 -
            ((C307 * C1011 + C139448 * C1301) * C4653 +
             (C307 * C832 + C139448 * C1094) * C4828) +
            C35140 * C4654 - C36846 * C4830 - C37072 * C4655) *
               C124863 +
           (C36846 * C4829 - (C35140 * C4653 + C34920 * C4828) +
            C37072 * C4654 - C129449 * C4830 - C129613 * C4655) *
               C124864 +
           (C129449 * C4829 - (C37072 * C4653 + C36846 * C4828) +
            C129613 * C4654 - (C307 * C82895 + C139448 * C83119) * C4830 -
            (C307 * C83048 + C139448 * C83272) * C4655) *
               C124865) *
              C139289 * C139360) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[127] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C3364 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139303) *
                         C139289 * C139448 * C139372 * C3360 -
                     ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                       C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                          C139303 +
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C3364) *
                         C139289 * C139448 * C139372 * C3361 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C3364 +
                      (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                       C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                          C139303) *
                         C139289 * C139448 * C139372 * C3362 -
                     ((C125168 * C67959 + C124865 * C68455 + C125167 * C17961 +
                       C124864 * C18621 + C125166 * C3370 + C124863 * C3710) *
                          C139303 +
                      (C125168 * C67958 + C124865 * C68454 + C125167 * C17959 +
                       C124864 * C18619 + C125166 * C3367 + C124863 * C3707) *
                          C3364) *
                         C139289 * C139448 * C139372 * C3363)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C826 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C821 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C827 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C822 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C828 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                       C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                          C823) *
                         C139289 * C139448 * C139372 * C139570 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C827 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C821 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C826) +
                      (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                       C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                          C822 -
                      (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                       C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                          C828 -
                      (C125168 * C5472 + C124865 * C5952 + C125167 * C3902 +
                       C124864 * C4415 + C125166 * C837 + C124863 * C1402) *
                          C823) *
                         C139289 * C139448 * C139372 * C139360)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C3364 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C139303) *
                          C139289 * C139448 * C4653 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C139303 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C3364) *
                          C139289 * C139448 * C4654 +
                      ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                        C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                           C3364 +
                       (C125166 * C4663 + C124863 * C5195 + C125167 * C6168 +
                        C124864 * C6508 + C125168 * C37436 + C124865 * C37898) *
                           C139303) *
                          C139289 * C139448 * C4655) *
                         C139570 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C3364 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C139303) *
                          C139289 * C139448 * C4654 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139303 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C3364) *
                          C139289 * C139448 * C4653 -
                      ((C125168 * C82896 + C124865 * C83346 + C125167 * C20833 +
                        C124864 * C21253 + C125166 * C5474 + C124863 * C5954) *
                           C139303 +
                       (C125168 * C82895 + C124865 * C83345 + C125167 * C20831 +
                        C124864 * C21251 + C125166 * C5471 + C124863 * C5951) *
                           C3364) *
                          C139289 * C139448 * C4655) *
                         C139360)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[127] += (-std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                      C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                         C3427 +
                     (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                      C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                         C3360 -
                     (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                      C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                         C3428 -
                     (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                      C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                         C3361 +
                     (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                      C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                         C3429 +
                     (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                      C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                         C3362 -
                     (C125168 * C67958 + C124865 * C68454 + C125167 * C17959 +
                      C124864 * C18619 + C125166 * C3367 + C124863 * C3707) *
                         C3430 -
                     (C125168 * C68052 + C124865 * C68538 + C125167 * C18089 +
                      C124864 * C18746 + C125166 * C3433 + C124863 * C3761) *
                         C3363) *
                    C139289 * C139448 * C139303 * C139372) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C923 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139570 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C924 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139360) *
                         C139289 * C139448 * C821 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C924 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139570 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C923) +
                      (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                       C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                          C139360) *
                         C139289 * C139448 * C822 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C923 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                       C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                          C139570 -
                      (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                       C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                          C924 -
                      (C125168 * C5555 + C124865 * C6031 + C125167 * C3991 +
                       C124864 * C4497 + C125166 * C925 + C124863 * C1499) *
                          C139360) *
                         C139289 * C139448 * C823) *
                    C139372) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C923 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139570 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C924 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139360) *
                         C139289 * C139448 * C139303 * C4653 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C924 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C139570 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C923) +
                      (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                       C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                          C139360) *
                         C139289 * C139448 * C139303 * C4654 +
                     ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C923 +
                      (C125166 * C4746 + C124863 * C5285 + C125167 * C6227 +
                       C124864 * C6561 + C125168 * C37520 + C124865 * C37966) *
                          C139570 -
                      (C125168 * C82895 + C124865 * C83345 + C125167 * C20831 +
                       C124864 * C21251 + C125166 * C5471 + C124863 * C5951) *
                          C924 -
                      (C125168 * C82973 + C124865 * C83413 + C125167 * C20905 +
                       C124864 * C21321 + C125166 * C5557 + C124863 * C6029) *
                          C139360) *
                         C139289 * C139448 * C139303 * C4655)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[127] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139372) *
                         C139289 * C139448 * C3360 -
                     ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                       C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                          C139372 +
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C244) *
                         C139289 * C139448 * C3361 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C244 +
                      (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                       C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                          C139372) *
                         C139289 * C139448 * C3362 -
                     ((C125168 * C68134 + C124865 * C68616 + C125167 * C18203 +
                       C124864 * C18855 + C125166 * C3489 + C124863 * C3816) *
                          C139372 +
                      (C125168 * C67958 + C124865 * C68454 + C125167 * C17959 +
                       C124864 * C18619 + C125166 * C3367 + C124863 * C3707) *
                          C244) *
                         C139289 * C139448 * C3363) *
                    C139303) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139372) *
                          C139289 * C139448 * C139570 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139372 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C244) *
                          C139289 * C139448 * C139360) *
                         C821 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C244 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139372) *
                          C139289 * C139448 * C139360 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139372 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139289 * C139448 * C139570) *
                         C822 +
                     (((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                        C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                           C244 +
                       (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                        C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                           C139372) *
                          C139289 * C139448 * C139570 -
                      ((C125168 * C5635 + C124865 * C6108 + C125167 * C4077 +
                        C124864 * C4575 + C125166 * C1009 + C124863 * C1600) *
                           C139372 +
                       (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                        C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                           C244) *
                          C139289 * C139448 * C139360) *
                         C823)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C4828 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C4653 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C4829 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C4654 +
                      (C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C4830 +
                      (C125166 * C4831 + C124863 * C5373 + C125167 * C6287 +
                       C124864 * C6612 + C125168 * C37596 + C124865 * C38033) *
                          C4655) *
                         C139289 * C139448 * C139570 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C4829 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C4653 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C4828) +
                      (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                       C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                          C4654 -
                      (C125168 * C82895 + C124865 * C83345 + C125167 * C20831 +
                       C124864 * C21251 + C125166 * C5471 + C124863 * C5951) *
                          C4830 -
                      (C125168 * C83048 + C124865 * C83480 + C125167 * C20975 +
                       C124864 * C21388 + C125166 * C5637 + C124863 * C6106) *
                          C4655) *
                         C139289 * C139448 * C139360) *
                    C139303) /
                       (p * q * std::sqrt(p + q));
    d2eexx[128] +=
        (-std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C139448 * C124863 +
            (C79993 + C79994) * C139448 * C124864 +
            (C81960 + C81959) * C139448 * C124865) *
               C139571 -
           ((C82907 + C82906) * C139448 * C124865 +
            (C81959 + C81960) * C139448 * C124864 +
            (C79994 + C79993) * C139448 * C124863) *
               C139384) *
              C2565 +
          ((C79995 * C139448 * C124863 + C81961 * C139448 * C124864 +
            (C81968 + C81969) * C139448 * C124865) *
               C139384 -
           (C81958 * C139448 * C124865 + C79996 * C139448 * C124864 +
            (C65997 + C65996) * C139448 * C124863) *
               C139571) *
              C2566 +
          ((C66006 * C139448 * C124863 + C79997 * C139448 * C124864 +
            (C67977 + C67978) * C139448 * C124865) *
               C139571 -
           (((C63381 * C68677 + C139289 * C68679) * C139303 +
             (C63381 * C68676 + C139289 * C68678) * C3364) *
                C139448 * C124865 +
            (C67978 + C67977) * C139448 * C124864 +
            C66557 * C139448 * C124863) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C139448 * C124863 +
           (C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C139448 *
               C124864 +
           (C126010 + C126011 - C126012 - C126013 + C126020 + C126021) *
               C139448 * C124865) *
              C139571 +
          ((C77523 - (C77522 + C77521) + C77524 - C77525 - C77526) * C139448 *
               C124863 +
           (C126012 - (C126011 + C126010) + C126013 - C126020 - C126021) *
               C139448 * C124864 +
           ((C63381 * C6164 + C139289 * C6170) * C827 -
            (C82905 * C821 + C82904 * C826) +
            (C63381 * C6167 + C139289 * C6173) * C822 -
            (C63381 * C6163 + C139289 * C6169) * C828 -
            (C63381 * C6166 + C139289 * C6172) * C823) *
               C139448 * C124865) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3364 +
            (C63381 * C116 + C139289 * C125) * C139303) *
               C139448 * C124863 +
           (C79993 + C79994) * C139448 * C124864 + C129212 * C124865) *
              C6159 -
          (C129895 * C124865 + (C81959 + C81960) * C139448 * C124864 +
           (C79994 + C79993) * C139448 * C124863) *
              C6160 +
          (C129212 * C124863 + (C82906 + C82907) * C139448 * C124864 +
           (C129898 + C129899) * C139448 * C124865) *
              C6161 -
          (((C63381 * C129886 + C139289 * C129888) * C139303 +
            (C63381 * C129885 + C139289 * C129887) * C3364) *
               C139448 * C124865 +
           (C129899 + C129898) * C139448 * C124864 + C129895 * C124863) *
              C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eexy[128] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C139448 * C124863 +
           (C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C139448 *
               C124864 +
           (C127892 + C127893 - C127894 - C127895 + C127896 + C127897) *
               C139448 * C124865) *
              C139303 * C139571 +
          ((C80098 - (C80097 + C80096) + C80099 - C80100 - C80101) * C139448 *
               C124863 +
           (C127894 - (C127893 + C127892) + C127895 - C127896 - C127897) *
               C139448 * C124864 +
           (C81966 * C2661 - (C82981 * C2565 + C82904 * C2660) +
            C82086 * C2566 - (C63381 * C68676 + C139289 * C68678) * C2662 -
            (C63381 * C68730 + C139289 * C68731) * C2567) *
               C139448 * C124865) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63381 * C107 + C139289 * C113) * C181 +
                                 (C63381 * C182 + C139289 * C188) * C139346) *
                                    C139448 * C124863 +
                                (C77625 + C77643) * C139448 * C124864 +
                                (C81134 + C81140) * C139448 * C124865) *
                                   C821 -
                               ((C81138 + C81124) * C139448 * C124865 +
                                (C77644 + C77634) * C139448 * C124864 +
                                ((C63381 * C183 + C139289 * C189) * C139346 +
                                 (C63381 * C108 + C139289 * C114) * C181) *
                                    C139448 * C124863) *
                                   C822 +
                               (((C63381 * C109 + C139289 * C115) * C181 +
                                 (C63381 * C184 + C139289 * C190) * C139346) *
                                    C139448 * C124863 +
                                (C77635 + C77645) * C139448 * C124864 +
                                (C126096 + C126100) * C139448 * C124865) *
                                   C823) *
                                  C139571 +
                              (((C77634 + C77644) * C139448 * C124863 +
                                (C81124 + C81138) * C139448 * C124864 +
                                ((C63381 * C6164 + C139289 * C6170) * C181 +
                                 (C63381 * C6226 + C139289 * C6229) * C139346) *
                                    C139448 * C124865) *
                                   C822 -
                               ((C82982 + C82976) * C139448 * C124865 +
                                (C81140 + C81134) * C139448 * C124864 +
                                (C77643 + C77625) * C139448 * C124863) *
                                   C821 -
                               (((C63381 * C6225 + C139289 * C6228) * C139346 +
                                 (C63381 * C6163 + C139289 * C6169) * C181) *
                                    C139448 * C124865 +
                                (C126100 + C126096) * C139448 * C124864 +
                                (C77645 + C77635) * C139448 * C124863) *
                                   C823) *
                                  C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C181 +
            (C63381 * C182 + C139289 * C188) * C139346) *
               C139448 * C124863 +
           (C77625 + C77643) * C139448 * C124864 + C128603 * C124865) *
              C139303 * C6159 -
          (C129956 * C124865 + (C81140 + C81134) * C139448 * C124864 +
           (C77643 + C77625) * C139448 * C124863) *
              C139303 * C6160 +
          (C128603 * C124863 + (C82976 + C82982) * C139448 * C124864 +
           (C129953 + C129958) * C139448 * C124865) *
              C139303 * C6161 -
          (((C63381 * C129949 + C139289 * C129950) * C139346 +
            (C63381 * C129885 + C139289 * C129887) * C181) *
               C139448 * C124865 +
           (C129958 + C129953) * C139448 * C124864 + C129956 * C124863) *
              C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[128] +=
        (-std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
            C77750 * C139384) *
               C139448 * C124863 +
           (C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
            C81245 * C139384) *
               C139448 * C124864 +
           (C81016 * C1875 + C81245 * C139571 - C82904 * C1876 -
            C83053 * C139384) *
               C139448 * C124865) *
              C2565 +
          ((C66721 - (C66720 + C66719) + C66738) * C139448 * C124863 +
           (C80208 - (C80207 + C80206) + C80209) * C139448 * C124864 +
           (C81966 * C1876 - (C68151 * C139571 + C67971 * C1875) +
            C82192 * C139384) *
               C139448 * C124865) *
              C2566 +
          (C66742 * C139448 * C124863 +
           (C80212 + C80211 - C80210 - C80213) * C139448 * C124864 +
           (C67973 * C1875 + C68152 * C139571 -
            (C63381 * C68676 + C139289 * C68678) * C1876 -
            (C63381 * C68782 + C139289 * C68783) * C139384) *
               C139448 * C124865) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
            C77750 * C139384) *
               C139448 * C124863 +
           (C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
            C81245 * C139384) *
               C139448 * C124864 +
           (C81016 * C1875 + C81245 * C139571 - C82904 * C1876 -
            C83053 * C139384) *
               C139448 * C124865) *
              C139346 * C821 +
          ((C77517 * C1876 -
            ((C63381 * C246 + C139289 * C252) * C139571 +
             (C63381 * C108 + C139289 * C114) * C1875) +
            C77751 * C139384) *
               C139448 * C124863 +
           (C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
            C81246 * C139384) *
               C139448 * C124864 +
           ((C63381 * C6164 + C139289 * C6170) * C1876 -
            (C81246 * C139571 + C81014 * C1875) +
            (C63381 * C6286 + C139289 * C6289) * C139384) *
               C139448 * C124865) *
              C139346 * C822 +
          (((C63381 * C109 + C139289 * C115) * C1875 +
            (C63381 * C247 + C139289 * C253) * C139571 - C77519 * C1876 -
            C77752 * C139384) *
               C139448 * C124863 +
           (C77519 * C1875 + C77752 * C139571 - C126018 * C1876 -
            C126177 * C139384) *
               C139448 * C124864 +
           (C126018 * C1875 + C126177 * C139571 -
            (C63381 * C6163 + C139289 * C6169) * C1876 -
            (C63381 * C6285 + C139289 * C6288) * C139384) *
               C139448 * C124865) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C6281 +
           (C63381 * C245 + C139289 * C251) * C6159 - C77515 * C6282 -
           C77750 * C6160 + C81016 * C6283 + C81245 * C6161 - C82904 * C6284 -
           C83053 * C6162) *
              C139448 * C124863 +
          (C77515 * C6281 + C77750 * C6159 - C81016 * C6282 - C81245 * C6160 +
           C82904 * C6283 + C83053 * C6161 - C129896 * C6284 -
           C130013 * C6162) *
              C139448 * C124864 +
          (C81016 * C6281 + C81245 * C6159 - C82904 * C6282 - C83053 * C6160 +
           C129896 * C6283 + C130013 * C6161 -
           (C63381 * C129885 + C139289 * C129887) * C6284 -
           (C63381 * C130008 + C139289 * C130009) * C6162) *
              C139448 * C124865) *
         C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[128] +=
        (-std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C124863 +
            (C34904 + C34905) * C124864 + (C36837 + C36836) * C124865) *
               C139289 * C139571 -
           ((C37685 + C37684) * C124865 + (C36836 + C36837) * C124864 +
            (C34905 + C34904) * C124863) *
               C139289 * C139384) *
              C2565 +
          (((C34924 + C34925) * C124863 + (C36850 + C36851) * C124864 +
            ((C307 * C20831 + C139448 * C21045) * C3364 +
             (C307 * C20833 + C139448 * C21047) * C139303) *
                C124865) *
               C139289 * C139384 -
           ((C36851 + C36850) * C124865 + (C34925 + C34924) * C124864 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C124863) *
               C139289 * C139571) *
              C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C3364 +
             (C307 * C2577 + C139448 * C2831) * C139303) *
                C124863 +
            (C34926 + C34927) * C124864 + (C128052 + C128053) * C124865) *
               C139289 * C139571 -
           (((C307 * C68677 + C139448 * C68835) * C139303 +
             (C307 * C68676 + C139448 * C68834) * C3364) *
                C124865 +
            (C128053 + C128052) * C124864 + (C34927 + C34926) * C124863) *
               C139289 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C826 +
            (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C124863 +
           (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C124864 +
           (C126252 + C126253 - C126254 - C126255 + C126256 + C126257) *
               C124865) *
              C139289 * C139571 +
          ((C32421 - (C32434 + C32433) + C32422 - C32423 - C32424) * C124863 +
           (C126254 - (C126253 + C126252) + C126255 - C126256 - C126257) *
               C124864 +
           (C35900 * C827 - (C37683 * C821 + C37682 * C826) + C35901 * C822 -
            (C307 * C6163 + C139448 * C6341) * C828 -
            (C307 * C6166 + C139448 * C6344) * C823) *
               C124865) *
              C139289 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3364 +
            (C307 * C116 + C139448 * C314) * C139303) *
               C124863 +
           (C34904 + C34905) * C124864 + C129443 * C124865) *
              C139289 * C6159 -
          (C130066 * C124865 + (C36836 + C36837) * C124864 +
           (C34905 + C34904) * C124863) *
              C139289 * C6160 +
          (C129443 * C124863 + (C37684 + C37685) * C124864 +
           (C130073 + C130074) * C124865) *
              C139289 * C6161 -
          (((C307 * C129886 + C139448 * C130064) * C139303 +
            (C307 * C129885 + C139448 * C130063) * C3364) *
               C124865 +
           (C130074 + C130073) * C124864 + C130066 * C124863) *
              C139289 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eeyy[128] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C124863 +
           (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C124864 +
           (C128128 + C128129 - C128130 - C128131 + C128132 + C128136) *
               C124865) *
              C139289 * C139303 * C139571 +
          ((C35028 - (C35027 + C35026) + C35036 - C35031 - C35037) * C124863 +
           (C128130 - (C128129 + C128128) + C128131 - C128132 - C128136) *
               C124864 +
           ((C307 * C20831 + C139448 * C21045) * C2661 -
            (C37757 * C2565 + C37682 * C2660) +
            (C307 * C20905 + C139448 * C21115) * C2566 -
            (C307 * C68676 + C139448 * C68834) * C2662 -
            (C307 * C68730 + C139448 * C68886) * C2567) *
               C124865) *
              C139289 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C124863 +
            (C32533 + C32540) * C124864 + (C36006 + C36012) * C124865) *
               C139289 * C821 -
           (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
               C139289 * C822 +
           (C421 * C124863 + C32538 * C124864 + (C5015 + C5021) * C124865) *
               C139289 * C823) *
              C139571 +
          ((C32536 * C124863 + C36002 * C124864 + (C36007 + C36013) * C124865) *
               C139289 * C822 -
           ((C37758 + C37754) * C124865 + (C36012 + C36006) * C124864 +
            (C32540 + C32533) * C124863) *
               C139289 * C821 -
           (((C307 * C6225 + C139448 * C6397) * C139346 +
             (C307 * C6163 + C139448 * C6341) * C181) *
                C124865 +
            (C5021 + C5015) * C124864 + C2084 * C124863) *
               C139289 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C181 +
            (C307 * C182 + C139448 * C394) * C139346) *
               C124863 +
           (C32533 + C32540) * C124864 + C128839 * C124865) *
              C139289 * C139303 * C6159 -
          (C130126 * C124865 + (C36012 + C36006) * C124864 +
           (C32540 + C32533) * C124863) *
              C139289 * C139303 * C6160 +
          (C128839 * C124863 + (C37754 + C37758) * C124864 +
           (C130127 + C130131) * C124865) *
              C139289 * C139303 * C6161 -
          (((C307 * C129949 + C139448 * C130124) * C139346 +
            (C307 * C129885 + C139448 * C130063) * C181) *
               C124865 +
           (C130131 + C130127) * C124864 + C130126 * C124863) *
              C139289 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[128] +=
        (-std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
            C32649 * C139384) *
               C124863 +
           (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
            C36121 * C139384) *
               C124864 +
           (C35899 * C1875 + C36121 * C139571 - C37682 * C1876 -
            C37829 * C139384) *
               C124865) *
              C139289 * C2565 +
          ((C34920 * C1876 -
            ((C307 * C1011 + C139448 * C1301) * C139571 +
             (C307 * C832 + C139448 * C1094) * C1875) +
            C35140 * C139384) *
               C124863 +
           (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
            C37072 * C139384) *
               C124864 +
           ((C307 * C20831 + C139448 * C21045) * C1876 -
            (C37072 * C139571 + C36846 * C1875) +
            (C307 * C20975 + C139448 * C21182) * C139384) *
               C124865) *
              C139289 * C2566 +
          (((C307 * C2570 + C139448 * C2827) * C1875 +
            (C307 * C2745 + C139448 * C3017) * C139571 - C34922 * C1876 -
            C35141 * C139384) *
               C124863 +
           (C34922 * C1875 + C35141 * C139571 - C128050 * C1876 -
            C128213 * C139384) *
               C124864 +
           (C128050 * C1875 + C128213 * C139571 -
            (C307 * C68676 + C139448 * C68834) * C1876 -
            (C307 * C68782 + C139448 * C68937) * C139384) *
               C124865) *
              C139289 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
            C32649 * C139384) *
               C124863 +
           (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
            C36121 * C139384) *
               C124864 +
           (C35899 * C1875 + C36121 * C139571 - C37682 * C1876 -
            C37829 * C139384) *
               C124865) *
              C139289 * C139346 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C124863 +
           (C32643 - (C32642 + C32641) + C32644) * C124864 +
           (C35900 * C1876 - (C5114 * C139571 + C4930 * C1875) +
            C36122 * C139384) *
               C124865) *
              C139289 * C139346 * C822 +
          (C2188 * C124863 + (C32647 + C32646 - C32645 - C32648) * C124864 +
           (C4932 * C1875 + C5115 * C139571 -
            (C307 * C6163 + C139448 * C6341) * C1876 -
            (C307 * C6285 + C139448 * C6452) * C139384) *
               C124865) *
              C139289 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C6281 +
           (C307 * C245 + C139448 * C474) * C6159 - C32431 * C6282 -
           C32649 * C6160 + C35899 * C6283 + C36121 * C6161 - C37682 * C6284 -
           C37829 * C6162) *
              C124863 +
          (C32431 * C6281 + C32649 * C6159 - C35899 * C6282 - C36121 * C6160 +
           C37682 * C6283 + C37829 * C6161 - C130071 * C6284 -
           C130185 * C6162) *
              C124864 +
          (C35899 * C6281 + C36121 * C6159 - C37682 * C6282 - C37829 * C6160 +
           C130071 * C6283 + C130185 * C6161 -
           (C307 * C129885 + C139448 * C130063) * C6284 -
           (C307 * C130008 + C139448 * C130181) * C6162) *
              C124865) *
         C139289 * C139346 * C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[128] +=
        (-std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
             C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                C3364 +
            (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
             C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                C139303) *
               C139289 * C139448 * C139571 -
           ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
             C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                C139303 +
            (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
             C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                C3364) *
               C139289 * C139448 * C139384) *
              C2565 +
          (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
             C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                C3364 +
            (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
             C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                C139303) *
               C139289 * C139448 * C139384 -
           ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
             C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                C139303 +
            (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
             C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                C3364) *
               C139289 * C139448 * C139571) *
              C2566 +
          (((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
             C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                C3364 +
            (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
             C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                C139303) *
               C139289 * C139448 * C139571 -
           ((C125168 * C68677 + C124865 * C68989 + C125167 * C19905 +
             C124864 * C20541 + C125166 * C3905 + C124863 * C4418) *
                C139303 +
            (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
             C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                C3364) *
               C139289 * C139448 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
            C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
               C826 +
           (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
            C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
               C821 -
           (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
            C124864 * C2263 + C125166 * C108 + C124863 * C556) *
               C827 -
           (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
            C124864 * C2269 + C125166 * C117 + C124863 * C562) *
               C822 +
           (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
            C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
               C828 +
           (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
            C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
               C823) *
              C139289 * C139448 * C139571 +
          ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
            C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
               C827 -
           ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
             C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                C821 +
            (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
             C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                C826) +
           (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
            C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
               C822 -
           (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
            C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
               C828 -
           (C125168 * C6166 + C124865 * C6506 + C125167 * C4665 +
            C124864 * C5197 + C125166 * C1705 + C124863 * C2270) *
               C823) *
              C139289 * C139448 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
            C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
               C3364 +
           (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
            C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
               C139303) *
              C139289 * C139448 * C6159 -
          ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
            C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
               C139303 +
           (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
            C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
               C3364) *
              C139289 * C139448 * C6160 +
          ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
            C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
               C3364 +
           (C125166 * C4663 + C124863 * C5195 + C125167 * C6168 +
            C124864 * C6508 + C125168 * C37436 + C124865 * C37898) *
               C139303) *
              C139289 * C139448 * C6161 -
          ((C125168 * C129886 + C124865 * C130236 + C125167 * C37436 +
            C124864 * C37898 + C125166 * C6168 + C124863 * C6508) *
               C139303 +
           (C125168 * C129885 + C124865 * C130235 + C125167 * C37434 +
            C124864 * C37896 + C125166 * C6165 + C124863 * C6505) *
               C3364) *
              C139289 * C139448 * C6162) *
         C139346) /
            (p * q * std::sqrt(p + q));
    d2eezy[128] +=
        (-std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
            C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
               C2660 +
           (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
            C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
               C2565 -
           (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
            C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
               C2661 -
           (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
            C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
               C2566 +
           (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
            C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
               C2662 +
           (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
            C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
               C2567) *
              C139289 * C139448 * C139303 * C139571 +
          ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
            C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
               C2661 -
           ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
             C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                C2565 +
            (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
             C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                C2660) +
           (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
            C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
               C2566 -
           (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
            C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
               C2662 -
           (C125168 * C68730 + C124865 * C69040 + C125167 * C20021 +
            C124864 * C20650 + C125166 * C3994 + C124863 * C4494) *
               C2567) *
              C139289 * C139448 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
             C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                C181 +
            (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
             C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                C139346) *
               C139289 * C139448 * C821 -
           ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
             C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                C139346 +
            (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
             C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                C181) *
               C139289 * C139448 * C822 +
           ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
             C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                C181 +
            (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
             C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                C139346) *
               C139289 * C139448 * C823) *
              C139571 +
          (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
             C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                C181 +
            (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
             C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                C139346) *
               C139289 * C139448 * C822 -
           ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
             C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                C139346 +
            (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
             C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                C181) *
               C139289 * C139448 * C821 -
           ((C125168 * C6225 + C124865 * C6559 + C125167 * C4748 +
             C124864 * C5287 + C125166 * C1792 + C124863 * C2366) *
                C139346 +
            (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
             C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                C181) *
               C139289 * C139448 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
            C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
               C181 +
           (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
            C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
               C139346) *
              C139289 * C139448 * C139303 * C6159 -
          ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
            C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
               C139346 +
           (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
            C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
               C181) *
              C139289 * C139448 * C139303 * C6160 +
          ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
            C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
               C181 +
           (C125166 * C4746 + C124863 * C5285 + C125167 * C6227 +
            C124864 * C6561 + C125168 * C37520 + C124865 * C37966) *
               C139346) *
              C139289 * C139448 * C139303 * C6161 -
          ((C125168 * C129949 + C124865 * C130287 + C125167 * C37520 +
            C124864 * C37966 + C125166 * C6227 + C124863 * C6561) *
               C139346 +
           (C125168 * C129885 + C124865 * C130235 + C125167 * C37434 +
            C124864 * C37896 + C125166 * C6165 + C124863 * C6505) *
               C181) *
              C139289 * C139448 * C139303 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[128] += (-std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C1875 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139571 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C1876 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139384) *
                         C139289 * C139448 * C2565 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C1876 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139571 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C1875) +
                      (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                       C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                          C139384) *
                         C139289 * C139448 * C2566 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C1875 +
                      (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                       C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                          C139571 -
                      (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                       C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                          C1876 -
                      (C125168 * C68782 + C124865 * C69091 + C125167 * C20129 +
                       C124864 * C20753 + C125166 * C4080 + C124863 * C4576) *
                          C139384) *
                         C139289 * C139448 * C2567) *
                    C139303) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C1875 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139571 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C1876 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139384) *
                         C139289 * C139448 * C139346 * C821 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C1876 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139571 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C1875) +
                      (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                       C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                          C139384) *
                         C139289 * C139448 * C139346 * C822 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C1875 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                       C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                          C139571 -
                      (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                       C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                          C1876 -
                      (C125168 * C6285 + C124865 * C6614 + C125167 * C4833 +
                       C124864 * C5375 + C125166 * C1877 + C124863 * C2462) *
                          C139384) *
                         C139289 * C139448 * C139346 * C823)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                      C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                         C6281 +
                     (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                      C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                         C6159 -
                     (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                      C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                         C6282 -
                     (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                      C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                         C6160 +
                     (C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                      C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                         C6283 +
                     (C125166 * C4831 + C124863 * C5373 + C125167 * C6287 +
                      C124864 * C6612 + C125168 * C37596 + C124865 * C38033) *
                         C6161 -
                     (C125168 * C129885 + C124865 * C130235 + C125167 * C37434 +
                      C124864 * C37896 + C125166 * C6165 + C124863 * C6505) *
                         C6284 -
                     (C125168 * C130008 + C124865 * C130338 + C125167 * C37596 +
                      C124864 * C38033 + C125166 * C6287 + C124863 * C6612) *
                         C6162) *
                    C139289 * C139448 * C139346 * C139303) /
                       (p * q * std::sqrt(p + q));
    d2eexx[129] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C6694 +
            (C63381 * C116 + C139289 * C125) * C139601 -
            (C63381 * C108 + C139289 * C114) * C6695 -
            (C63381 * C117 + C139289 * C126) * C139590 +
            (C63381 * C109 + C139289 * C115) * C6696 +
            (C63381 * C118 + C139289 * C127) * C6691) *
               C139448 * C124863 +
           (C86554 + C86555 - C86556 - C86557 + C86558 + C86559) * C139448 *
               C124864 +
           (C132636 + C132637 - C132638 - C132639 + C132640 + C132641) *
               C139448 * C124865) *
              C9074 +
          ((C86556 - (C86555 + C86554) + C86557 - C86558 - C86559) * C139448 *
               C124863 +
           (C132638 - (C132637 + C132636) + C132639 - C132640 - C132641) *
               C139448 * C124864 +
           (C128518 * C6695 - (C82905 * C139601 + C82904 * C6694) +
            C128519 * C139590 - (C63381 * C6163 + C139289 * C6169) * C6696 -
            (C63381 * C6166 + C139289 * C6172) * C6691) *
               C139448 * C124865) *
              C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[129] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C139448 * C124863 +
            (C77625 + C77643) * C139448 * C124864 + C128603 * C124865) *
               C139601 -
           (C128604 * C124865 + (C77644 + C77634) * C139448 * C124864 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C139448 * C124863) *
               C139590 +
           (((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C139448 * C124863 +
            (C77635 + C77645) * C139448 * C124864 +
            (C126096 + C126100) * C139448 * C124865) *
               C6691) *
              C9074 +
          (((C77634 + C77644) * C139448 * C124863 +
            (C81124 + C81138) * C139448 * C124864 +
            (C128600 + C128606) * C139448 * C124865) *
               C139590 -
           (C129956 * C124865 + (C81140 + C81134) * C139448 * C124864 +
            (C77643 + C77625) * C139448 * C124863) *
               C139601 -
           (((C63381 * C6225 + C139289 * C6228) * C139346 +
             (C63381 * C6163 + C139289 * C6169) * C181) *
                C139448 * C124865 +
            (C126100 + C126096) * C139448 * C124864 +
            (C77645 + C77635) * C139448 * C124863) *
               C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[129] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C63381 * C107 + C139289 * C113) * C9224 +
                       (C63381 * C245 + C139289 * C251) * C9074 -
                       C77515 * C9225 - C77750 * C139384) *
                          C139448 * C124863 +
                      (C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
                       C81245 * C139384) *
                          C139448 * C124864 +
                      (C81016 * C9224 + C81245 * C9074 - C82904 * C9225 -
                       C83053 * C139384) *
                          C139448 * C124865) *
                         C139346 * C139601 +
                     ((C77517 * C9225 -
                       ((C63381 * C246 + C139289 * C252) * C9074 +
                        (C63381 * C108 + C139289 * C114) * C9224) +
                       C77751 * C139384) *
                          C139448 * C124863 +
                      (C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
                       C81246 * C139384) *
                          C139448 * C124864 +
                      (C128518 * C9225 - (C81246 * C9074 + C81014 * C9224) +
                       C128683 * C139384) *
                          C139448 * C124865) *
                         C139346 * C139590 +
                     (((C63381 * C109 + C139289 * C115) * C9224 +
                       (C63381 * C247 + C139289 * C253) * C9074 -
                       C77519 * C9225 - C77752 * C139384) *
                          C139448 * C124863 +
                      (C77519 * C9224 + C77752 * C9074 - C126018 * C9225 -
                       C126177 * C139384) *
                          C139448 * C124864 +
                      (C126018 * C9224 + C126177 * C9074 -
                       (C63381 * C6163 + C139289 * C6169) * C9225 -
                       (C63381 * C6285 + C139289 * C6288) * C139384) *
                          C139448 * C124865) *
                         C139346 * C6691)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[129] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C6694 +
            (C307 * C116 + C139448 * C314) * C139601 - C337 * C6695 -
            C338 * C139590 + C339 * C6696 + C340 * C6691) *
               C124863 +
           (C41426 + C41427 - C41428 - C41429 + C41430 + C41431) * C124864 +
           (C132864 + C132865 - C132866 - C132867 + C132868 + C132869) *
               C124865) *
              C139289 * C9074 +
          ((C41428 - (C41427 + C41426) + C41429 - C41430 - C41431) * C124863 +
           (C132866 - (C132865 + C132864) + C132867 - C132868 - C132869) *
               C124864 +
           (C35900 * C6695 - (C37683 * C139601 + C37682 * C6694) +
            C35901 * C139590 - (C307 * C6163 + C139448 * C6341) * C6696 -
            (C307 * C6166 + C139448 * C6344) * C6691) *
               C124865) *
              C139289 * C139384) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[129] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C124863 +
            (C32533 + C32540) * C124864 + C128839 * C124865) *
               C139289 * C139601 -
           (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
               C139289 * C139590 +
           (C421 * C124863 + C32538 * C124864 + (C5015 + C5021) * C124865) *
               C139289 * C6691) *
              C9074 +
          ((C32536 * C124863 + C36002 * C124864 + (C36007 + C36013) * C124865) *
               C139289 * C139590 -
           (C130126 * C124865 + (C36012 + C36006) * C124864 +
            (C32540 + C32533) * C124863) *
               C139289 * C139601 -
           (((C307 * C6225 + C139448 * C6397) * C139346 +
             (C307 * C6163 + C139448 * C6341) * C181) *
                C124865 +
            (C5021 + C5015) * C124864 + C2084 * C124863) *
               C139289 * C6691) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[129] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C9224 +
            (C307 * C245 + C139448 * C474) * C9074 - C32431 * C9225 -
            C32649 * C139384) *
               C124863 +
           (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
            C36121 * C139384) *
               C124864 +
           (C35899 * C9224 + C36121 * C9074 - C37682 * C9225 -
            C37829 * C139384) *
               C124865) *
              C139289 * C139346 * C139601 +
          ((C9451 - (C9450 + C9449) + C9452) * C124863 +
           (C41636 - (C41635 + C41634) + C41637) * C124864 +
           (C35900 * C9225 - (C5114 * C9074 + C4930 * C9224) +
            C36122 * C139384) *
               C124865) *
              C139289 * C139346 * C139590 +
          (C9463 * C124863 + (C41640 + C41639 - C41638 - C41641) * C124864 +
           (C4932 * C9224 + C5115 * C9074 -
            (C307 * C6163 + C139448 * C6341) * C9225 -
            (C307 * C6285 + C139448 * C6452) * C139384) *
               C124865) *
              C139289 * C139346 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[129] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C6694 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139601 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C6695 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139590 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C6696 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                       C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                          C6691) *
                         C139289 * C139448 * C9074 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C6695 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C139601 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C6694) +
                      (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                       C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                          C139590 -
                      (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                       C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                          C6696 -
                      (C125168 * C6166 + C124865 * C6506 + C125167 * C4665 +
                       C124864 * C5197 + C125166 * C1705 + C124863 * C2270) *
                          C6691) *
                         C139289 * C139448 * C139384) *
                    C139346) /
                   (p * q * std::sqrt(p + q));
    d2eezy[129] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C181 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C139346) *
                          C139289 * C139448 * C139601 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139346 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C181) *
                          C139289 * C139448 * C139590 +
                      ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                        C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                           C181 +
                       (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                        C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                           C139346) *
                          C139289 * C139448 * C6691) *
                         C9074 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C181 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C139346) *
                          C139289 * C139448 * C139590 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C139346 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C181) *
                          C139289 * C139448 * C139601 -
                      ((C125168 * C6225 + C124865 * C6559 + C125167 * C4748 +
                        C124864 * C5287 + C125166 * C1792 + C124863 * C2366) *
                           C139346 +
                       (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                        C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                           C181) *
                          C139289 * C139448 * C6691) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[129] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C9224 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C9074 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C9225 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139384) *
                         C139289 * C139448 * C139346 * C139601 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C9225 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C9074 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C9224) +
                      (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                       C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                          C139384) *
                         C139289 * C139448 * C139346 * C139590 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C9224 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                       C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                          C9074 -
                      (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                       C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                          C9225 -
                      (C125168 * C6285 + C124865 * C6614 + C125167 * C4833 +
                       C124864 * C5375 + C125166 * C1877 + C124863 * C2462) *
                          C139384) *
                         C139289 * C139448 * C139346 * C6691)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C7401 +
             (C63381 * C116 + C139289 * C125) * C7396 -
             (C63381 * C108 + C139289 * C114) * C7402 -
             (C63381 * C117 + C139289 * C126) * C139308) *
                C139448 * C124863 +
            (C85382 + C85383 - C85384 - C85385) * C139448 * C124864 +
            (C88630 + C88629 - C88628 - C88631) * C139448 * C124865) *
               C9074 +
           ((C85384 - (C85383 + C85382) + C85385) * C139448 * C124863 +
            (C88628 - (C88629 + C88630) + C88631) * C139448 * C124864 +
            (C128518 * C7402 - (C82905 * C7396 + C82904 * C7401) +
             C128519 * C139308) *
                C139448 * C124865) *
               C139384) *
              C139570 +
          (((C69853 - (C69852 + C69851) + C69854) * C139448 * C124863 +
            C85395 * C139448 * C124864 +
            (C85388 - (C85389 + C85390) + C85391) * C139448 * C124865) *
               C9074 +
           (C85394 * C139448 * C124863 +
            (C85390 + C85389 - C85388 - C85391) * C139448 * C124864 +
            (C81966 * C7401 + C81967 * C7396 -
             (C63381 * C20830 + C139289 * C20834) * C7402 -
             (C63381 * C20832 + C139289 * C20836) * C139308) *
                C139448 * C124865) *
               C139384) *
              C139360)) /
        (p * q * std::sqrt(p + q));
    d2eexy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C923 +
             (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
             C63994 * C139360) *
                C139448 * C124863 +
            (C82068 + C82069 - C82070 - C82071) * C139448 * C124864 +
            C129294 * C124865) *
               C7396 +
           ((C63886 * C924 -
             ((C63381 * C183 + C139289 * C189) * C139570 +
              (C63381 * C108 + C139289 * C114) * C923) +
             C63996 * C139360) *
                C139448 * C124863 +
            (C87604 - (C87605 + C87606) + C87607) * C139448 * C124864 +
            (C133436 - (C133437 + C133438) + C133439) * C139448 * C124865) *
               C139308) *
              C9074 +
          (((C82070 - (C82069 + C82068) + C82071) * C139448 * C124863 +
            (C82076 - (C82077 + C82078) + C82079) * C139448 * C124864 +
            (C129288 - (C129289 + C129290) + C129291) * C139448 * C124865) *
               C7396 +
           ((C87606 + C87605 - C87604 - C87607) * C139448 * C124863 +
            (C133438 + C133437 - C133436 - C133439) * C139448 * C124864 +
            (C128518 * C923 + C128605 * C139570 -
             (C63381 * C20830 + C139289 * C20834) * C924 -
             (C63381 * C20904 + C139289 * C20906) * C139360) *
                C139448 * C124865) *
               C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eexz[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C9224 +
             (C63381 * C245 + C139289 * C251) * C9074 - C77515 * C9225 -
             C77750 * C139384) *
                C139448 * C124863 +
            (C77515 * C9224 + C77750 * C9074 - C81016 * C9225 -
             C81245 * C139384) *
                C139448 * C124864 +
            (C81016 * C9224 + C81245 * C9074 - C82904 * C9225 -
             C83053 * C139384) *
                C139448 * C124865) *
               C139570 +
           ((C72354 - (C72353 + C72352) + C72355) * C139448 * C124863 +
            (C87744 - (C87743 + C87742) + C87745) * C139448 * C124864 +
            (C81966 * C9225 - (C68151 * C9074 + C67971 * C9224) +
             C82192 * C139384) *
                C139448 * C124865) *
               C139360) *
              C7396 +
          (((C77517 * C9225 -
             ((C63381 * C246 + C139289 * C252) * C9074 +
              (C63381 * C108 + C139289 * C114) * C9224) +
             C77751 * C139384) *
                C139448 * C124863 +
            (C81014 * C9225 - (C77751 * C9074 + C77517 * C9224) +
             C81246 * C139384) *
                C139448 * C124864 +
            (C128518 * C9225 - (C81246 * C9074 + C81014 * C9224) +
             C128683 * C139384) *
                C139448 * C124865) *
               C139570 +
           ((C72362 + C72361 - C72360 - C72363) * C139448 * C124863 +
            (C87748 + C87747 - C87746 - C87749) * C139448 * C124864 +
            (C81018 * C9224 + C81247 * C9074 -
             (C63381 * C20830 + C139289 * C20834) * C9225 -
             (C63381 * C20974 + C139289 * C20976) * C139384) *
                C139448 * C124865) *
               C139360) *
              C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C7401 +
                        (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
                        C338 * C139308) *
                           C124863 +
                       (C40326 + C40327 - C40328 - C40329) * C124864 +
                       (C43510 + C43509 - C43508 - C43511) * C124865) *
                          C139289 * C9074 +
                      ((C40328 - (C40327 + C40326) + C40329) * C124863 +
                       (C43508 - (C43509 + C43510) + C43511) * C124864 +
                       (C35900 * C7402 - (C37683 * C7396 + C37682 * C7401) +
                        C35901 * C139308) *
                           C124865) *
                          C139289 * C139384) *
                         C139570 +
                     (((C1116 * C7402 -
                        ((C307 * C839 + C139448 * C1098) * C7396 +
                         (C307 * C832 + C139448 * C1094) * C7401) +
                        C1117 * C139308) *
                           C124863 +
                       (C40334 - (C40335 + C40336) + C40337) * C124864 +
                       (C132068 - (C132069 + C132070) + C132071) * C124865) *
                          C139289 * C9074 +
                      ((C40336 + C40335 - C40334 - C40337) * C124863 +
                       (C132070 + C132069 - C132068 - C132071) * C124864 +
                       (C129449 * C7401 + C129450 * C7396 -
                        (C307 * C20830 + C139448 * C21044) * C7402 -
                        (C307 * C20832 + C139448 * C21046) * C139308) *
                           C124865) *
                          C139289 * C139384) *
                         C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C923 +
             (C307 * C182 + C139448 * C394) * C139570 -
             (C307 * C832 + C139448 * C1094) * C924 -
             (C307 * C927 + C139448 * C1195) * C139360) *
                C124863 +
            (C36952 + C36953 - C36954 - C36955) * C124864 + C129535 * C124865) *
               C139289 * C7396 +
           ((C1203 - (C1202 + C1201) + C1220) * C124863 + C42591 * C124864 +
            (C36961 - (C36962 + C36963) + C36969) * C124865) *
               C139289 * C139308) *
              C9074 +
          (((C36954 - (C36953 + C36952) + C36955) * C124863 +
            (C36956 - (C36957 + C36958) + C36968) * C124864 +
            (C129528 - (C129529 + C129530) + C129536) * C124865) *
               C139289 * C7396 +
           (C42590 * C124863 + (C36963 + C36962 - C36961 - C36969) * C124864 +
            (C35900 * C923 + C36011 * C139570 -
             (C307 * C20830 + C139448 * C21044) * C924 -
             (C307 * C20904 + C139448 * C21114) * C139360) *
                C124865) *
               C139289 * C139308) *
              C139384)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C9224 +
                        (C307 * C245 + C139448 * C474) * C9074 -
                        C32431 * C9225 - C32649 * C139384) *
                           C124863 +
                       (C32431 * C9224 + C32649 * C9074 - C35899 * C9225 -
                        C36121 * C139384) *
                           C124864 +
                       (C35899 * C9224 + C36121 * C9074 - C37682 * C9225 -
                        C37829 * C139384) *
                           C124865) *
                          C139289 * C139570 +
                      ((C34920 * C9225 -
                        ((C307 * C1011 + C139448 * C1301) * C9074 +
                         (C307 * C832 + C139448 * C1094) * C9224) +
                        C35140 * C139384) *
                           C124863 +
                       (C36846 * C9225 - (C35140 * C9074 + C34920 * C9224) +
                        C37072 * C139384) *
                           C124864 +
                       (C129449 * C9225 - (C37072 * C9074 + C36846 * C9224) +
                        C129613 * C139384) *
                           C124865) *
                          C139289 * C139360) *
                         C7396 +
                     (((C9451 - (C9450 + C9449) + C9452) * C124863 +
                       (C41636 - (C41635 + C41634) + C41637) * C124864 +
                       (C35900 * C9225 - (C5114 * C9074 + C4930 * C9224) +
                        C36122 * C139384) *
                           C124865) *
                          C139289 * C139570 +
                      ((C10300 + C10299 - C10298 - C10301) * C124863 +
                       (C42724 + C42723 - C42722 - C42725) * C124864 +
                       (C36848 * C9224 + C37073 * C9074 -
                        (C307 * C20830 + C139448 * C21044) * C9225 -
                        (C307 * C20974 + C139448 * C21183) * C139384) *
                           C124865) *
                          C139289 * C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C7401 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C7396 -
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C7402 -
                       (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                        C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                           C139308) *
                          C139289 * C139448 * C9074 +
                      ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C7402 -
                       ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                         C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                            C7396 +
                        (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                         C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                            C7401) +
                       (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                        C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                           C139308) *
                          C139289 * C139448 * C139384) *
                         C139570 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C7402 -
                       ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                         C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                            C7396 +
                        (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                         C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                            C7401) +
                       (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                        C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                           C139308) *
                          C139289 * C139448 * C9074 +
                      ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C7401 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C7396 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C7402 -
                       (C125168 * C20832 + C124865 * C21252 + C125167 * C5473 +
                        C124864 * C5953 + C125166 * C3901 + C124863 * C4414) *
                           C139308) *
                          C139289 * C139448 * C139384) *
                         C139360)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C923 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C139570 -
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C924 -
                       (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                        C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                           C139360) *
                          C139289 * C139448 * C7396 +
                      ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C924 -
                       ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                         C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                            C139570 +
                        (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                         C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                            C923) +
                       (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                        C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                           C139360) *
                          C139289 * C139448 * C139308) *
                         C9074 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C924 -
                       ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                         C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                            C139570 +
                        (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                         C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                            C923) +
                       (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                        C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                           C139360) *
                          C139289 * C139448 * C7396 +
                      ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C923 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C139570 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C924 -
                       (C125168 * C20904 + C124865 * C21320 + C125167 * C5556 +
                        C124864 * C6030 + C125166 * C3990 + C124863 * C4495) *
                           C139360) *
                          C139289 * C139448 * C139308) *
                         C139384)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[130] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C9224 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C9074 -
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C9225 -
                       (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                        C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                           C139384) *
                          C139289 * C139448 * C139570 +
                      ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C9225 -
                       ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                         C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                            C9074 +
                        (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                         C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                            C9224) +
                       (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                        C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                           C139384) *
                          C139289 * C139448 * C139360) *
                         C7396 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C9225 -
                       ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                         C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                            C9074 +
                        (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                         C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                            C9224) +
                       (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                        C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                           C139384) *
                          C139289 * C139448 * C139570 +
                      ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C9224 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C9074 -
                       (C125168 * C20830 + C124865 * C21250 + C125167 * C5470 +
                        C124864 * C5950 + C125166 * C3892 + C124863 * C4408) *
                           C9225 -
                       (C125168 * C20974 + C124865 * C21389 + C125167 * C5636 +
                        C124864 * C6107 + C125166 * C4076 + C124863 * C4574) *
                           C139384) *
                          C139289 * C139448 * C139360) *
                         C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C7401 +
            (C63381 * C116 + C139289 * C125) * C7396 -
            (C63381 * C108 + C139289 * C114) * C7402 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C139448 * C124863 +
           (C85382 + C85383 - C85384 - C85385) * C139448 * C124864 +
           C134207 * C124865) *
              C139603 +
          ((C85384 - (C85383 + C85382) + C85385) * C139448 * C124863 +
           (C88628 - (C88629 + C88630) + C88631) * C139448 * C124864 +
           (C134201 - (C134202 + C134203) + C134204) * C139448 * C124865) *
              C139596 +
          (C134207 * C124863 +
           (C134203 + C134202 - C134201 - C134204) * C139448 * C124864 +
           (C129896 * C7401 + C129897 * C7396 -
            (C63381 * C37433 + C139289 * C37437) * C7402 -
            (C63381 * C37435 + C139289 * C37439) * C139308) *
               C139448 * C124865) *
              C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eexy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C139448 * C124863 +
            (C77625 + C77643) * C139448 * C124864 + C128603 * C124865) *
               C7396 -
           (C128604 * C124865 + (C77644 + C77634) * C139448 * C124864 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C139448 * C124863) *
               C139308) *
              C139603 +
          (((C77634 + C77644) * C139448 * C124863 +
            (C81124 + C81138) * C139448 * C124864 +
            (C128600 + C128606) * C139448 * C124865) *
               C139308 -
           (C129956 * C124865 + (C81140 + C81134) * C139448 * C124864 +
            (C77643 + C77625) * C139448 * C124863) *
               C7396) *
              C139596 +
          ((C128603 * C124863 + (C82976 + C82982) * C139448 * C124864 +
            (C129953 + C129958) * C139448 * C124865) *
               C7396 -
           (((C63381 * C37519 + C139289 * C37521) * C139346 +
             (C63381 * C37433 + C139289 * C37437) * C181) *
                C139448 * C124865 +
            (C128606 + C128600) * C139448 * C124864 + C128604 * C124863) *
               C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C10840 +
            (C63381 * C245 + C139289 * C251) * C139603 - C77515 * C10841 -
            C77750 * C139596 + C81016 * C10842 + C81245 * C10691) *
               C139448 * C124863 +
           (C77515 * C10840 + C77750 * C139603 - C81016 * C10841 -
            C81245 * C139596 + C82904 * C10842 + C83053 * C10691) *
               C139448 * C124864 +
           (C81016 * C10840 + C81245 * C139603 - C82904 * C10841 -
            C83053 * C139596 + C129896 * C10842 + C130013 * C10691) *
               C139448 * C124865) *
              C139346 * C7396 +
          ((C77517 * C10841 -
            ((C63381 * C246 + C139289 * C252) * C139603 +
             (C63381 * C108 + C139289 * C114) * C10840) +
            C77751 * C139596 - C81014 * C10842 - C81246 * C10691) *
               C139448 * C124863 +
           (C81014 * C10841 - (C77751 * C139603 + C77517 * C10840) +
            C81246 * C139596 - C128518 * C10842 - C128683 * C10691) *
               C139448 * C124864 +
           (C128518 * C10841 - (C81246 * C139603 + C81014 * C10840) +
            C128683 * C139596 - (C63381 * C37433 + C139289 * C37437) * C10842 -
            (C63381 * C37595 + C139289 * C37597) * C10691) *
               C139448 * C124865) *
              C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C7401 +
            (C307 * C116 + C139448 * C314) * C7396 - C337 * C7402 -
            C338 * C139308) *
               C124863 +
           (C40326 + C40327 - C40328 - C40329) * C124864 + C134436 * C124865) *
              C139289 * C139603 +
          ((C40328 - (C40327 + C40326) + C40329) * C124863 +
           (C43508 - (C43509 + C43510) + C43511) * C124864 +
           (C134431 - (C134432 + C134433) + C134434) * C124865) *
              C139289 * C139596 +
          (C134436 * C124863 +
           (C134433 + C134432 - C134431 - C134434) * C124864 +
           (C130071 * C7401 + C130072 * C7396 -
            (C307 * C37433 + C139448 * C37671) * C7402 -
            (C307 * C37435 + C139448 * C37673) * C139308) *
               C124865) *
              C139289 * C10691) *
         C139346) /
        (p * q * std::sqrt(p + q));
    d2eeyy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C124863 +
            (C32533 + C32540) * C124864 + C128839 * C124865) *
               C139289 * C7396 -
           (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
               C139289 * C139308) *
              C139603 +
          ((C32536 * C124863 + C36002 * C124864 + (C36007 + C36013) * C124865) *
               C139289 * C139308 -
           (C130126 * C124865 + (C36012 + C36006) * C124864 +
            (C32540 + C32533) * C124863) *
               C139289 * C7396) *
              C139596 +
          ((C128839 * C124863 + (C37754 + C37758) * C124864 +
            (C130127 + C130131) * C124865) *
               C139289 * C7396 -
           (((C307 * C37519 + C139448 * C37751) * C139346 +
             (C307 * C37433 + C139448 * C37671) * C181) *
                C124865 +
            (C36013 + C36007) * C124864 + C36003 * C124863) *
               C139289 * C139308) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C10840 +
            (C307 * C245 + C139448 * C474) * C139603 - C32431 * C10841 -
            C32649 * C139596 + C35899 * C10842 + C36121 * C10691) *
               C124863 +
           (C32431 * C10840 + C32649 * C139603 - C35899 * C10841 -
            C36121 * C139596 + C37682 * C10842 + C37829 * C10691) *
               C124864 +
           (C35899 * C10840 + C36121 * C139603 - C37682 * C10841 -
            C37829 * C139596 + C130071 * C10842 + C130185 * C10691) *
               C124865) *
              C139289 * C139346 * C7396 +
          ((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C124863 +
           (C43714 - (C43713 + C43712) + C43715 - C43716 - C43717) * C124864 +
           (C35900 * C10841 - (C5114 * C139603 + C4930 * C10840) +
            C36122 * C139596 - (C307 * C37433 + C139448 * C37671) * C10842 -
            (C307 * C37595 + C139448 * C37825) * C10691) *
               C124865) *
              C139289 * C139346 * C139308)) /
        (p * q * std::sqrt(p + q));
    d2eezx[131] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C7401 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C7396 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C7402 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139308) *
                         C139289 * C139448 * C139603 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C7402 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C7396 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C7401) +
                      (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                       C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                          C139308) *
                         C139289 * C139448 * C139596 +
                     ((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C7401 +
                      (C125166 * C4663 + C124863 * C5195 + C125167 * C6168 +
                       C124864 * C6508 + C125168 * C37436 + C124865 * C37898) *
                          C7396 -
                      (C125168 * C37433 + C124865 * C37895 + C125167 * C6164 +
                       C124864 * C6504 + C125166 * C4657 + C124863 * C5192) *
                          C7402 -
                      (C125168 * C37435 + C124865 * C37897 + C125167 * C6167 +
                       C124864 * C6507 + C125166 * C4664 + C124863 * C5196) *
                          C139308) *
                         C139289 * C139448 * C10691) *
                    C139346) /
                   (p * q * std::sqrt(p + q));
    d2eezy[131] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C181 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C139346) *
                          C139289 * C139448 * C7396 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139346 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C181) *
                          C139289 * C139448 * C139308) *
                         C139603 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C181 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C139346) *
                          C139289 * C139448 * C139308 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C139346 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C181) *
                          C139289 * C139448 * C7396) *
                         C139596 +
                     (((C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                        C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                           C181 +
                       (C125166 * C4746 + C124863 * C5285 + C125167 * C6227 +
                        C124864 * C6561 + C125168 * C37520 + C124865 * C37966) *
                           C139346) *
                          C139289 * C139448 * C7396 -
                      ((C125168 * C37519 + C124865 * C37965 + C125167 * C6226 +
                        C124864 * C6560 + C125166 * C4747 + C124863 * C5286) *
                           C139346 +
                       (C125168 * C37433 + C124865 * C37895 + C125167 * C6164 +
                        C124864 * C6504 + C125166 * C4657 + C124863 * C5192) *
                           C181) *
                          C139289 * C139448 * C139308) *
                         C10691)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[131] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C10840 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139603 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C10841 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139596 +
                      (C125166 * C4656 + C124863 * C5191 + C125167 * C6165 +
                       C124864 * C6505 + C125168 * C37434 + C124865 * C37896) *
                          C10842 +
                      (C125166 * C4831 + C124863 * C5373 + C125167 * C6287 +
                       C124864 * C6612 + C125168 * C37596 + C124865 * C38033) *
                          C10691) *
                         C139289 * C139448 * C139346 * C7396 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C10841 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139603 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C10840) +
                      (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                       C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                          C139596 -
                      (C125168 * C37433 + C124865 * C37895 + C125167 * C6164 +
                       C124864 * C6504 + C125166 * C4657 + C124863 * C5192) *
                          C10842 -
                      (C125168 * C37595 + C124865 * C38034 + C125167 * C6286 +
                       C124864 * C6613 + C125166 * C4832 + C124863 * C5374) *
                          C10691) *
                         C139289 * C139448 * C139346 * C139308)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C103 +
           (C63381 * C116 + C139289 * C125) * C92 -
           (C63381 * C108 + C139289 * C114) * C104 -
           (C63381 * C117 + C139289 * C126) * C93 +
           (C63381 * C109 + C139289 * C115) * C105 +
           (C63381 * C118 + C139289 * C127) * C94 -
           (C63381 * C110 + C139289 * C119) * C106 -
           (C63381 * C120 + C139289 * C128) * C95) *
              C139448 * C124863 +
          (C77515 * C103 + C77516 * C92 - C77517 * C104 - C77518 * C93 +
           C77519 * C105 + C77520 * C94 -
           (C63381 * C1699 + C139289 * C1704) * C106 -
           (C63381 * C1709 + C139289 * C1715) * C95) *
              C139448 * C124864 +
          (C81016 * C103 + C81015 * C92 - C81014 * C104 - C81017 * C93 +
           (C63381 * C4658 + C139289 * C4662) * C105 +
           (C63381 * C4665 + C139289 * C4670) * C94 -
           (C63381 * C4659 + C139289 * C4666) * C106 -
           (C63381 * C4667 + C139289 * C4671) * C95) *
              C139448 * C124865) *
         C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C137108 +
            (C63381 * C116 + C139289 * C125) * C139562 -
            (C63381 * C108 + C139289 * C114) * C137101 -
            (C63381 * C117 + C139289 * C126) * C139308) *
               C139448 * C124863 +
           (C80996 + C80997 - C80998 - C80999) * C139448 * C124864 +
           (C81022 + C81021 - C81020 - C81023) * C139448 * C124865) *
              C139372 * C2565 +
          ((C65296 - (C65295 + C65294) + C65297) * C139448 * C124863 +
           C89551 * C139448 * C124864 +
           (C81024 - (C81010 + C81011) + C81025) * C139448 * C124865) *
              C139372 * C2566 +
          (C65320 * C139448 * C124863 +
           (C73726 + C73725 - C73724 - C73727) * C139448 * C124864 +
           (C67973 * C137108 + C67974 * C139562 -
            (C63381 * C19902 + C139289 * C19906) * C137101 -
            (C63381 * C19904 + C139289 * C19908) * C139308) *
               C139448 * C124865) *
              C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C181 +
            (C63381 * C182 + C139289 * C188) * C139346) *
               C139448 * C124863 +
           (C77625 + C77643) * C139448 * C124864 +
           (C81134 + C81140) * C139448 * C124865) *
              C92 -
          ((C81138 + C81124) * C139448 * C124865 +
           (C77644 + C77634) * C139448 * C124864 +
           ((C63381 * C183 + C139289 * C189) * C139346 +
            (C63381 * C108 + C139289 * C114) * C181) *
               C139448 * C124863) *
              C93 +
          (((C63381 * C109 + C139289 * C115) * C181 +
            (C63381 * C184 + C139289 * C190) * C139346) *
               C139448 * C124863 +
           (C77635 + C77645) * C139448 * C124864 +
           ((C63381 * C4658 + C139289 * C4662) * C181 +
            (C63381 * C4748 + C139289 * C4752) * C139346) *
               C139448 * C124865) *
              C94 -
          (((C63381 * C4749 + C139289 * C4753) * C139346 +
            (C63381 * C4659 + C139289 * C4666) * C181) *
               C139448 * C124865 +
           ((C63381 * C1793 + C139289 * C1798) * C139346 +
            (C63381 * C1699 + C139289 * C1704) * C181) *
               C139448 * C124864 +
           ((C63381 * C185 + C139289 * C191) * C139346 +
            (C63381 * C110 + C139289 * C119) * C181) *
               C139448 * C124863) *
              C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C139448 * C124863 +
           (C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C139448 *
               C124864 +
           (C81016 * C2660 + C81137 * C2565 - C67971 * C2661 - C68059 * C2566 +
            C67973 * C2662 + C68060 * C2567) *
               C139448 * C124865) *
              C139562 +
          ((C63886 * C2661 -
            ((C63381 * C183 + C139289 * C189) * C2565 +
             (C63381 * C108 + C139289 * C114) * C2660) +
            C63996 * C2566 - C63892 * C2662 - C63997 * C2567) *
               C139448 * C124863 +
           (C70576 * C2661 - (C77641 * C2565 + C77517 * C2660) +
            C70686 * C2566 - C70578 * C2662 - C70687 * C2567) *
               C139448 * C124864 +
           (C81018 * C2661 - (C81135 * C2565 + C81014 * C2660) +
            C81136 * C2566 - (C63381 * C19902 + C139289 * C19906) * C2662 -
            (C63381 * C20020 + C139289 * C20022) * C2567) *
               C139448 * C124865) *
              C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C244 +
            (C63381 * C245 + C139289 * C251) * C139372) *
               C139448 * C124863 +
           (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
           (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
              C139346 * C92 -
          ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
           (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
           ((C63381 * C246 + C139289 * C252) * C139372 +
            (C63381 * C108 + C139289 * C114) * C244) *
               C139448 * C124863) *
              C139346 * C93 +
          (((C63381 * C109 + C139289 * C115) * C244 +
            (C63381 * C247 + C139289 * C253) * C139372) *
               C139448 * C124863 +
           (C77519 * C244 + C77752 * C139372) * C139448 * C124864 +
           ((C63381 * C4658 + C139289 * C4662) * C244 +
            (C63381 * C4833 + C139289 * C4837) * C139372) *
               C139448 * C124865) *
              C139346 * C94 -
          (((C63381 * C4834 + C139289 * C4838) * C139372 +
            (C63381 * C4659 + C139289 * C4666) * C244) *
               C139448 * C124865 +
           ((C63381 * C1880 + C139289 * C1885) * C139372 +
            (C63381 * C1699 + C139289 * C1704) * C244) *
               C139448 * C124864 +
           ((C63381 * C248 + C139289 * C254) * C139372 +
            (C63381 * C110 + C139289 * C119) * C244) *
               C139448 * C124863) *
              C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C139448 * C124863 +
            (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
            (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
               C2565 -
           ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
            (C76785 + C76784) * C139448 * C124864 +
            (C64098 + C64074) * C139448 * C124863) *
               C2566 +
           (C65475 * C139448 * C124863 + (C78660 + C78659) * C139448 * C124864 +
            (C67973 * C244 + C68152 * C139372) * C139448 * C124865) *
               C2567) *
              C139562 +
          (((C64080 + C64100) * C139448 * C124863 +
            (C76786 + C76787) * C139448 * C124864 +
            (C81018 * C244 + C81247 * C139372) * C139448 * C124865) *
               C2566 -
           ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
            (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C139448 * C124863) *
               C2565 -
           (((C63381 * C20128 + C139289 * C20130) * C139372 +
             (C63381 * C19902 + C139289 * C19906) * C244) *
                C139448 * C124865 +
            (C78662 + C78661) * C139448 * C124864 +
            C65482 * C139448 * C124863) *
               C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C103 +
           (C307 * C116 + C139448 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C124863 +
          (C32431 * C103 + C32432 * C92 - C1984 * C104 - C1985 * C93 +
           C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
              C124864 +
          (C35899 * C103 + C35898 * C92 - C4930 * C104 - C4931 * C93 +
           C4932 * C105 + C4933 * C94 -
           (C307 * C4659 + C139448 * C4916) * C106 -
           (C307 * C4667 + C139448 * C4920) * C95) *
              C124865) *
         C139289 * C139372 * C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C137108 +
            (C307 * C116 + C139448 * C314) * C139562 - C337 * C137101 -
            C338 * C139308) *
               C124863 +
           (C35876 + C35877 - C35878 - C35879) * C124864 +
           (C35903 + C35902 - C35884 - C35889) * C124865) *
              C139289 * C139372 * C2565 +
          ((C1116 * C137101 -
            ((C307 * C839 + C139448 * C1098) * C139562 +
             (C307 * C832 + C139448 * C1094) * C137108) +
            C1117 * C139308) *
               C124863 +
           (C44532 - (C44533 + C44534) + C44535) * C124864 +
           (C36848 * C137101 - (C36847 * C139562 + C36846 * C137108) +
            C36849 * C139308) *
               C124865) *
              C139289 * C139372 * C2566 +
          (((C307 * C2570 + C139448 * C2827) * C137108 +
            (C307 * C2577 + C139448 * C2831) * C139562 - C2844 * C137101 -
            C2845 * C139308) *
               C124863 +
           (C34922 * C137108 + C34923 * C139562 - C33388 * C137101 -
            C33389 * C139308) *
               C124864 +
           ((C307 * C19903 + C139448 * C20237) * C137108 +
            (C307 * C19905 + C139448 * C20239) * C139562 -
            (C307 * C19902 + C139448 * C20236) * C137101 -
            (C307 * C19904 + C139448 * C20238) * C139308) *
               C124865) *
              C139289 * C139372 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C181 +
            (C307 * C182 + C139448 * C394) * C139346) *
               C124863 +
           (C32533 + C32540) * C124864 + (C36006 + C36012) * C124865) *
              C139289 * C92 -
          (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
              C139289 * C93 +
          (C421 * C124863 + C32538 * C124864 + (C5015 + C5021) * C124865) *
              C139289 * C94 -
          (((C307 * C4749 + C139448 * C5010) * C139346 +
            (C307 * C4659 + C139448 * C4916) * C181) *
               C124865 +
           (C2083 + C2075) * C124864 + C422 * C124863) *
              C139289 * C95) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C124863 +
           (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C124864 +
           (C35899 * C2660 + C36010 * C2565 - C36846 * C2661 - C36966 * C2566 +
            (C307 * C19903 + C139448 * C20237) * C2662 +
            (C307 * C20021 + C139448 * C20338) * C2567) *
               C124865) *
              C139289 * C139562 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C124863 +
           (C33490 - (C33489 + C33488) + C33491 - C33492 - C33496) * C124864 +
           (C36848 * C2661 - (C5018 * C2565 + C4930 * C2660) + C36967 * C2566 -
            (C307 * C19902 + C139448 * C20236) * C2662 -
            (C307 * C20020 + C139448 * C20339) * C2567) *
               C124865) *
              C139289 * C139308) *
         C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[132] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C244 +
            (C307 * C245 + C139448 * C474) * C139372) *
               C124863 +
           (C32431 * C244 + C32649 * C139372) * C124864 +
           (C35899 * C244 + C36121 * C139372) * C124865) *
              C139289 * C139346 * C92 -
          ((C5114 * C139372 + C4930 * C244) * C124865 +
           (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
              C139289 * C139346 * C93 +
          (C501 * C124863 + (C30744 + C30743) * C124864 +
           (C4932 * C244 + C5115 * C139372) * C124865) *
              C139289 * C139346 * C94 -
          (((C307 * C4834 + C139448 * C5098) * C139372 +
            (C307 * C4659 + C139448 * C4916) * C244) *
               C124865 +
           (C30746 + C30745) * C124864 + C502 * C124863) *
              C139289 * C139346 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C244 +
             (C307 * C245 + C139448 * C474) * C139372) *
                C124863 +
            (C32431 * C244 + C32649 * C139372) * C124864 +
            (C35899 * C244 + C36121 * C139372) * C124865) *
               C139289 * C2565 -
           ((C37072 * C139372 + C36846 * C244) * C124865 +
            (C35140 * C139372 + C34920 * C244) * C124864 +
            ((C307 * C1011 + C139448 * C1301) * C139372 +
             (C307 * C832 + C139448 * C1094) * C244) *
                C124863) *
               C139289 * C2566 +
           (((C307 * C2570 + C139448 * C2827) * C244 +
             (C307 * C2745 + C139448 * C3017) * C139372) *
                C124863 +
            (C34922 * C244 + C35141 * C139372) * C124864 +
            ((C307 * C19903 + C139448 * C20237) * C244 +
             (C307 * C20129 + C139448 * C20438) * C139372) *
                C124865) *
               C139289 * C2567) *
              C139562 +
          (((C1310 + C1318) * C124863 + (C31608 + C31607) * C124864 +
            (C36848 * C244 + C37073 * C139372) * C124865) *
               C139289 * C2566 -
           ((C5114 * C139372 + C4930 * C244) * C124865 +
            (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
               C139289 * C2565 -
           (((C307 * C20128 + C139448 * C20439) * C139372 +
             (C307 * C19902 + C139448 * C20236) * C244) *
                C124865 +
            (C33599 + C33595) * C124864 + (C3030 + C3022) * C124863) *
               C139289 * C2567) *
              C139308)) /
            (p * q * std::sqrt(p + q));
    d2eezx[132] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                      C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                         C103 +
                     (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                      C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                         C92 -
                     (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                      C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                         C104 -
                     (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                      C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                         C93 +
                     (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                      C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                         C105 +
                     (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                      C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                         C94 -
                     (C125168 * C4659 + C124865 * C5194 + C125167 * C1699 +
                      C124864 * C2266 + C125166 * C110 + C124863 * C558) *
                         C106 -
                     (C125168 * C4667 + C124865 * C5198 + C125167 * C1709 +
                      C124864 * C2271 + C125166 * C120 + C124863 * C564) *
                         C95) *
                    C139289 * C139448 * C139372 * C139346) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C137108 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139562 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C137101 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C139308) *
                         C139289 * C139448 * C139372 * C2565 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C137101 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139562 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C137108) +
                      (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                       C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                          C139308) *
                         C139289 * C139448 * C139372 * C2566 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C137108 +
                      (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                       C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                          C139562 -
                      (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                       C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                          C137101 -
                      (C125168 * C19904 + C124865 * C20540 + C125167 * C3904 +
                       C124864 * C4417 + C125166 * C2578 + C124863 * C3110) *
                          C139308) *
                         C139289 * C139448 * C139372 * C2567)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[132] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C181 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139346) *
                         C139289 * C139448 * C92 -
                     ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                       C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                          C139346 +
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C181) *
                         C139289 * C139448 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C181 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                       C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                          C139346) *
                         C139289 * C139448 * C94 -
                     ((C125168 * C4749 + C124865 * C5288 + C125167 * C1793 +
                       C124864 * C2367 + C125166 * C185 + C124863 * C644) *
                          C139346 +
                      (C125168 * C4659 + C124865 * C5194 + C125167 * C1699 +
                       C124864 * C2266 + C125166 * C110 + C124863 * C558) *
                          C181) *
                         C139289 * C139448 * C95) *
                    C139372) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C2660 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C2565 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C2661 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C2566 +
                      (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C2662 +
                      (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                       C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                          C2567) *
                         C139289 * C139448 * C139562 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C2661 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C2565 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C2660) +
                      (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                       C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                          C2566 -
                      (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                       C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                          C2662 -
                      (C125168 * C20020 + C124865 * C20651 + C125167 * C3993 +
                       C124864 * C4496 + C125166 * C2664 + C124863 * C3200) *
                          C2567) *
                         C139289 * C139448 * C139308) *
                    C139372) /
                       (p * q * std::sqrt(p + q));
    d2eezz[132] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139372) *
                         C139289 * C139448 * C139346 * C92 -
                     ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                       C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                          C139372 +
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C244) *
                         C139289 * C139448 * C139346 * C93 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C244 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                       C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                          C139372) *
                         C139289 * C139448 * C139346 * C94 -
                     ((C125168 * C4834 + C124865 * C5376 + C125167 * C1880 +
                       C124864 * C2463 + C125166 * C248 + C124863 * C722) *
                          C139372 +
                      (C125168 * C4659 + C124865 * C5194 + C125167 * C1699 +
                       C124864 * C2266 + C125166 * C110 + C124863 * C558) *
                          C244) *
                         C139289 * C139448 * C139346 * C95)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139372) *
                          C139289 * C139448 * C2565 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139372 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C244) *
                          C139289 * C139448 * C2566 +
                      ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                        C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                           C244 +
                       (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                        C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                           C139372) *
                          C139289 * C139448 * C2567) *
                         C139562 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C244 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139372) *
                          C139289 * C139448 * C2566 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139372 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139289 * C139448 * C2565 -
                      ((C125168 * C20128 + C124865 * C20754 + C125167 * C4079 +
                        C124864 * C4577 + C125166 * C2746 + C124863 * C3296) *
                           C139372 +
                       (C125168 * C19902 + C124865 * C20538 + C125167 * C3895 +
                        C124864 * C4411 + C125166 * C2571 + C124863 * C3106) *
                           C244) *
                          C139289 * C139448 * C2567) *
                         C139308)) /
                       (p * q * std::sqrt(p + q));
    d2eexx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C139448 * C124863 +
           (C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C139448 *
               C124864 +
           (C81016 * C826 + C81015 * C821 - C81014 * C827 - C81017 * C822 +
            (C63381 * C4658 + C139289 * C4662) * C828 +
            (C63381 * C4665 + C139289 * C4670) * C823) *
               C139448 * C124865) *
              C139372 * C139570 +
          ((C63898 - (C63897 + C63896) + C63899 - C63900 - C63901) * C139448 *
               C124863 +
           (C76575 - (C76574 + C76573) + C76576 - C76583 - C76584) * C139448 *
               C124864 +
           (C81018 * C827 - (C67972 * C821 + C67971 * C826) + C81019 * C822 -
            (C63381 * C5469 + C139289 * C5475) * C828 -
            (C63381 * C5472 + C139289 * C5478) * C823) *
               C139448 * C124865) *
              C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C3364 +
            (C63381 * C116 + C139289 * C125) * C139303) *
               C139448 * C124863 +
           (C79993 + C79994) * C139448 * C124864 +
           (C81960 + C81959) * C139448 * C124865) *
              C139372 * C3360 -
          (C81958 * C139448 * C124865 + C79996 * C139448 * C124864 +
           (C65997 + C65996) * C139448 * C124863) *
              C139372 * C3361 +
          (C66006 * C139448 * C124863 + C79997 * C139448 * C124864 +
           (C67977 + C67978) * C139448 * C124865) *
              C139372 * C3362 -
          (((C63381 * C67959 + C139289 * C67961) * C139303 +
            (C63381 * C67958 + C139289 * C67960) * C3364) *
               C139448 * C124865 +
           (C66556 + C66555) * C139448 * C124864 + C66007 * C139448 * C124863) *
              C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C923 +
            (C63381 * C182 + C139289 * C188) * C139570 - C63884 * C924 -
            C63994 * C139360) *
               C139448 * C124863 +
           (C82068 + C82069 - C82070 - C82071) * C139448 * C124864 +
           (C82078 + C82077 - C82076 - C82079) * C139448 * C124865) *
              C821 +
          ((C63886 * C924 -
            ((C63381 * C183 + C139289 * C189) * C139570 +
             (C63381 * C108 + C139289 * C114) * C923) +
            C63996 * C139360) *
               C139448 * C124863 +
           (C87604 - (C87605 + C87606) + C87607) * C139448 * C124864 +
           (C81018 * C924 - (C81135 * C139570 + C81014 * C923) +
            C81136 * C139360) *
               C139448 * C124865) *
              C822 +
          (((C63381 * C109 + C139289 * C115) * C923 +
            (C63381 * C184 + C139289 * C190) * C139570 - C63888 * C924 -
            C63998 * C139360) *
               C139448 * C124863 +
           (C77519 * C923 + C77642 * C139570 - C76581 * C924 -
            C76685 * C139360) *
               C139448 * C124864 +
           ((C63381 * C4658 + C139289 * C4662) * C923 +
            (C63381 * C4748 + C139289 * C4752) * C139570 -
            (C63381 * C5469 + C139289 * C5475) * C924 -
            (C63381 * C5555 + C139289 * C5558) * C139360) *
               C139448 * C124865) *
              C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63381 * C107 + C139289 * C113) * C3427 +
           (C63381 * C182 + C139289 * C188) * C3360 - C63884 * C3428 -
           C63994 * C3361 + C63890 * C3429 + C63995 * C3362 - C65313 * C3430 -
           C65399 * C3363) *
              C139448 * C124863 +
          (C77515 * C3427 + C77640 * C3360 - C66548 * C3428 - C66640 * C3361 +
           C66546 * C3429 + C66641 * C3362 - C66549 * C3430 - C66642 * C3363) *
              C139448 * C124864 +
          (C81016 * C3427 + C81137 * C3360 - C67971 * C3428 - C68059 * C3361 +
           C67973 * C3429 + C68060 * C3362 -
           (C63381 * C67958 + C139289 * C67960) * C3430 -
           (C63381 * C68052 + C139289 * C68053) * C3363) *
              C139448 * C124865) *
         C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eexz[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C244 +
             (C63381 * C245 + C139289 * C251) * C139372) *
                C139448 * C124863 +
            (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
            (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
               C139570 -
           ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
            (C76785 + C76784) * C139448 * C124864 +
            (C64098 + C64074) * C139448 * C124863) *
               C139360) *
              C821 +
          (((C64080 + C64100) * C139448 * C124863 +
            (C76786 + C76787) * C139448 * C124864 +
            (C81018 * C244 + C81247 * C139372) * C139448 * C124865) *
               C139360 -
           ((C81246 * C139372 + C81014 * C244) * C139448 * C124865 +
            (C77751 * C139372 + C77517 * C244) * C139448 * C124864 +
            ((C63381 * C246 + C139289 * C252) * C139372 +
             (C63381 * C108 + C139289 * C114) * C244) *
                C139448 * C124863) *
               C139570) *
              C822 +
          ((((C63381 * C109 + C139289 * C115) * C244 +
             (C63381 * C247 + C139289 * C253) * C139372) *
                C139448 * C124863 +
            (C77519 * C244 + C77752 * C139372) * C139448 * C124864 +
            ((C63381 * C4658 + C139289 * C4662) * C244 +
             (C63381 * C4833 + C139289 * C4837) * C139372) *
                C139448 * C124865) *
               C139570 -
           (((C63381 * C5635 + C139289 * C5638) * C139372 +
             (C63381 * C5469 + C139289 * C5475) * C244) *
                C139448 * C124865 +
            (C76792 + C76788) * C139448 * C124864 +
            (C64102 + C64086) * C139448 * C124863) *
               C139360) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C244 +
            (C63381 * C245 + C139289 * C251) * C139372) *
               C139448 * C124863 +
           (C77515 * C244 + C77750 * C139372) * C139448 * C124864 +
           (C81016 * C244 + C81245 * C139372) * C139448 * C124865) *
              C3360 -
          ((C68151 * C139372 + C67971 * C244) * C139448 * C124865 +
           (C76785 + C76784) * C139448 * C124864 +
           (C64098 + C64074) * C139448 * C124863) *
              C3361 +
          (C65475 * C139448 * C124863 + (C78660 + C78659) * C139448 * C124864 +
           (C67973 * C244 + C68152 * C139372) * C139448 * C124865) *
              C3362 -
          (((C63381 * C68134 + C139289 * C68135) * C139372 +
            (C63381 * C67958 + C139289 * C67960) * C244) *
               C139448 * C124865 +
           (C79474 + C79473) * C139448 * C124864 + C66119 * C139448 * C124863) *
              C3363) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C826 +
            (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C124863 +
           (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C124864 +
           (C35899 * C826 + C35898 * C821 - C4930 * C827 - C4931 * C822 +
            C4932 * C828 + C4933 * C823) *
               C124865) *
              C139289 * C139372 * C139570 +
          ((C1116 * C827 -
            ((C307 * C839 + C139448 * C1098) * C821 +
             (C307 * C832 + C139448 * C1094) * C826) +
            C1117 * C822 - C1118 * C828 - C1119 * C823) *
               C124863 +
           (C8433 * C827 - (C34921 * C821 + C34920 * C826) + C8434 * C822 -
            C8435 * C828 - C8436 * C823) *
               C124864 +
           (C36848 * C827 - (C36847 * C821 + C36846 * C826) + C36849 * C822 -
            (C307 * C5469 + C139448 * C5715) * C828 -
            (C307 * C5472 + C139448 * C5718) * C823) *
               C124865) *
              C139289 * C139372 * C139360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C3364 +
            (C307 * C116 + C139448 * C314) * C139303) *
               C124863 +
           (C34904 + C34905) * C124864 + (C36837 + C36836) * C124865) *
              C139289 * C139372 * C3360 -
          ((C36851 + C36850) * C124865 + (C34925 + C34924) * C124864 +
           ((C307 * C839 + C139448 * C1098) * C139303 +
            (C307 * C832 + C139448 * C1094) * C3364) *
               C124863) *
              C139289 * C139372 * C3361 +
          (((C307 * C2570 + C139448 * C2827) * C3364 +
            (C307 * C2577 + C139448 * C2831) * C139303) *
               C124863 +
           (C34926 + C34927) * C124864 +
           ((C307 * C19903 + C139448 * C20237) * C3364 +
            (C307 * C19905 + C139448 * C20239) * C139303) *
               C124865) *
              C139289 * C139372 * C3362 -
          (((C307 * C67959 + C139448 * C68229) * C139303 +
            (C307 * C67958 + C139448 * C68228) * C3364) *
               C124865 +
           ((C307 * C17961 + C139448 * C18319) * C139303 +
            (C307 * C17959 + C139448 * C18317) * C3364) *
               C124864 +
           ((C307 * C3370 + C139448 * C3548) * C139303 +
            (C307 * C3367 + C139448 * C3545) * C3364) *
               C124863) *
              C139289 * C139372 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[133] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C923 +
            (C307 * C182 + C139448 * C394) * C139570 -
            (C307 * C832 + C139448 * C1094) * C924 -
            (C307 * C927 + C139448 * C1195) * C139360) *
               C124863 +
           (C36952 + C36953 - C36954 - C36955) * C124864 +
           (C36958 + C36957 - C36956 - C36968) * C124865) *
              C139289 * C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C124863 + C42591 * C124864 +
           (C36961 - (C36962 + C36963) + C36969) * C124865) *
              C139289 * C822 +
          (C1224 * C124863 + (C10198 + C10197 - C10196 - C10199) * C124864 +
           (C4932 * C923 + C5019 * C139570 -
            (C307 * C5469 + C139448 * C5715) * C924 -
            (C307 * C5555 + C139448 * C5797) * C139360) *
               C124865) *
              C139289 * C823) *
         C139372) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C139448 * C308) * C3427 +
           (C307 * C182 + C139448 * C394) * C3360 -
           (C307 * C832 + C139448 * C1094) * C3428 -
           (C307 * C927 + C139448 * C1195) * C3361 +
           (C307 * C2570 + C139448 * C2827) * C3429 +
           (C307 * C2663 + C139448 * C2921) * C3362 -
           (C307 * C3367 + C139448 * C3545) * C3430 -
           (C307 * C3433 + C139448 * C3599) * C3363) *
              C124863 +
          (C32431 * C3427 + C32539 * C3360 - C34920 * C3428 - C35034 * C3361 +
           C34922 * C3429 + C35035 * C3362 -
           (C307 * C17959 + C139448 * C18317) * C3430 -
           (C307 * C18089 + C139448 * C18418) * C3363) *
              C124864 +
          (C35899 * C3427 + C36010 * C3360 - C36846 * C3428 - C36966 * C3361 +
           (C307 * C19903 + C139448 * C20237) * C3429 +
           (C307 * C20021 + C139448 * C20338) * C3362 -
           (C307 * C67958 + C139448 * C68228) * C3430 -
           (C307 * C68052 + C139448 * C68304) * C3363) *
              C124865) *
         C139289 * C139303 * C139372) /
            (p * q * std::sqrt(p + q));
    d2eeyz[133] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C307 * C107 + C139448 * C308) * C244 +
                        (C307 * C245 + C139448 * C474) * C139372) *
                           C124863 +
                       (C32431 * C244 + C32649 * C139372) * C124864 +
                       (C35899 * C244 + C36121 * C139372) * C124865) *
                          C139289 * C139570 -
                      ((C37072 * C139372 + C36846 * C244) * C124865 +
                       (C35140 * C139372 + C34920 * C244) * C124864 +
                       ((C307 * C1011 + C139448 * C1301) * C139372 +
                        (C307 * C832 + C139448 * C1094) * C244) *
                           C124863) *
                          C139289 * C139360) *
                         C821 +
                     (((C1310 + C1318) * C124863 + (C31608 + C31607) * C124864 +
                       (C36848 * C244 + C37073 * C139372) * C124865) *
                          C139289 * C139360 -
                      ((C5114 * C139372 + C4930 * C244) * C124865 +
                       (C30742 + C30741) * C124864 + (C497 + C481) * C124863) *
                          C139289 * C139570) *
                         C822 +
                     ((C501 * C124863 + (C30744 + C30743) * C124864 +
                       (C4932 * C244 + C5115 * C139372) * C124865) *
                          C139289 * C139570 -
                      (((C307 * C5635 + C139448 * C5874) * C139372 +
                        (C307 * C5469 + C139448 * C5715) * C244) *
                           C124865 +
                       (C31610 + C31609) * C124864 + C1320 * C124863) *
                          C139289 * C139360) *
                         C823)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C307 * C107 + C139448 * C308) * C244 +
                       (C307 * C245 + C139448 * C474) * C139372) *
                          C124863 +
                      (C32431 * C244 + C32649 * C139372) * C124864 +
                      (C35899 * C244 + C36121 * C139372) * C124865) *
                         C139289 * C3360 -
                     ((C37072 * C139372 + C36846 * C244) * C124865 +
                      (C35140 * C139372 + C34920 * C244) * C124864 +
                      ((C307 * C1011 + C139448 * C1301) * C139372 +
                       (C307 * C832 + C139448 * C1094) * C244) *
                          C124863) *
                         C139289 * C3361 +
                     (((C307 * C2570 + C139448 * C2827) * C244 +
                       (C307 * C2745 + C139448 * C3017) * C139372) *
                          C124863 +
                      (C34922 * C244 + C35141 * C139372) * C124864 +
                      ((C307 * C19903 + C139448 * C20237) * C244 +
                       (C307 * C20129 + C139448 * C20438) * C139372) *
                          C124865) *
                         C139289 * C3362 -
                     (((C307 * C68134 + C139448 * C68379) * C139372 +
                       (C307 * C67958 + C139448 * C68228) * C244) *
                          C124865 +
                      ((C307 * C18203 + C139448 * C18518) * C139372 +
                       (C307 * C17959 + C139448 * C18317) * C244) *
                          C124864 +
                      ((C307 * C3489 + C139448 * C3654) * C139372 +
                       (C307 * C3367 + C139448 * C3545) * C244) *
                          C124863) *
                         C139289 * C3363) *
                    C139303) /
                       (p * q * std::sqrt(p + q));
    d2eezx[133] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C826 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C821 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C827 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C822 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C828 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                       C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                          C823) *
                         C139289 * C139448 * C139372 * C139570 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C827 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C821 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C826) +
                      (C125166 * C838 + C124863 * C1401 + C125167 * C3901 +
                       C124864 * C4414 + C125168 * C5473 + C124865 * C5953) *
                          C822 -
                      (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                       C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                          C828 -
                      (C125168 * C5472 + C124865 * C5952 + C125167 * C3902 +
                       C124864 * C4415 + C125166 * C837 + C124863 * C1402) *
                          C823) *
                         C139289 * C139448 * C139372 * C139360)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C3364 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C139303) *
                         C139289 * C139448 * C139372 * C3360 -
                     ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                       C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                          C139303 +
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C3364) *
                         C139289 * C139448 * C139372 * C3361 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C3364 +
                      (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                       C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                          C139303) *
                         C139289 * C139448 * C139372 * C3362 -
                     ((C125168 * C67959 + C124865 * C68455 + C125167 * C17961 +
                       C124864 * C18621 + C125166 * C3370 + C124863 * C3710) *
                          C139303 +
                      (C125168 * C67958 + C124865 * C68454 + C125167 * C17959 +
                       C124864 * C18619 + C125166 * C3367 + C124863 * C3707) *
                          C3364) *
                         C139289 * C139448 * C139372 * C3363)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[133] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C923 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C139570 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C924 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C139360) *
                         C139289 * C139448 * C821 +
                     ((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                       C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                          C924 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139570 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C923) +
                      (C125166 * C926 + C124863 * C1498 + C125167 * C3990 +
                       C124864 * C4495 + C125168 * C5556 + C124865 * C6030) *
                          C139360) *
                         C139289 * C139448 * C822 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C923 +
                      (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                       C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                          C139570 -
                      (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                       C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                          C924 -
                      (C125168 * C5555 + C124865 * C6031 + C125167 * C3991 +
                       C124864 * C4497 + C125166 * C925 + C124863 * C1499) *
                          C139360) *
                         C139289 * C139448 * C823) *
                    C139372) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                      C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                         C3427 +
                     (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                      C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                         C3360 -
                     (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                      C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                         C3428 -
                     (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                      C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                         C3361 +
                     (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                      C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                         C3429 +
                     (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                      C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                         C3362 -
                     (C125168 * C67958 + C124865 * C68454 + C125167 * C17959 +
                      C124864 * C18619 + C125166 * C3367 + C124863 * C3707) *
                         C3430 -
                     (C125168 * C68052 + C124865 * C68538 + C125167 * C18089 +
                      C124864 * C18746 + C125166 * C3433 + C124863 * C3761) *
                         C3363) *
                    C139289 * C139448 * C139303 * C139372) /
                       (p * q * std::sqrt(p + q));
    d2eezz[133] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C244 +
                       (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                        C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                           C139372) *
                          C139289 * C139448 * C139570 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139372 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C244) *
                          C139289 * C139448 * C139360) *
                         C821 +
                     (((C125166 * C829 + C124863 * C1395 + C125167 * C3892 +
                        C124864 * C4408 + C125168 * C5470 + C124865 * C5950) *
                           C244 +
                       (C125166 * C1010 + C124863 * C1601 + C125167 * C4076 +
                        C124864 * C4574 + C125168 * C5636 + C124865 * C6107) *
                           C139372) *
                          C139289 * C139448 * C139360 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139372 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C244) *
                          C139289 * C139448 * C139570) *
                         C822 +
                     (((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                        C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                           C244 +
                       (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                        C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                           C139372) *
                          C139289 * C139448 * C139570 -
                      ((C125168 * C5635 + C124865 * C6108 + C125167 * C4077 +
                        C124864 * C4575 + C125166 * C1009 + C124863 * C1600) *
                           C139372 +
                       (C125168 * C5469 + C124865 * C5949 + C125167 * C3893 +
                        C124864 * C4409 + C125166 * C830 + C124863 * C1397) *
                           C244) *
                          C139289 * C139448 * C139360) *
                         C823)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C244 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139372) *
                         C139289 * C139448 * C3360 -
                     ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                       C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                          C139372 +
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C244) *
                         C139289 * C139448 * C3361 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C244 +
                      (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                       C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                          C139372) *
                         C139289 * C139448 * C3362 -
                     ((C125168 * C68134 + C124865 * C68616 + C125167 * C18203 +
                       C124864 * C18855 + C125166 * C3489 + C124863 * C3816) *
                          C139372 +
                      (C125168 * C67958 + C124865 * C68454 + C125167 * C17959 +
                       C124864 * C18619 + C125166 * C3367 + C124863 * C3707) *
                          C244) *
                         C139289 * C139448 * C3363) *
                    C139303) /
                       (p * q * std::sqrt(p + q));
    d2eexx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C826 +
            (C63381 * C116 + C139289 * C125) * C821 -
            (C63381 * C108 + C139289 * C114) * C827 -
            (C63381 * C117 + C139289 * C126) * C822 +
            (C63381 * C109 + C139289 * C115) * C828 +
            (C63381 * C118 + C139289 * C127) * C823) *
               C139448 * C124863 +
           (C77521 + C77522 - C77523 - C77524 + C77525 + C77526) * C139448 *
               C124864 +
           (C126010 + C126011 - C126012 - C126013 + C126020 + C126021) *
               C139448 * C124865) *
              C139571 +
          ((C77523 - (C77522 + C77521) + C77524 - C77525 - C77526) * C139448 *
               C124863 +
           (C126012 - (C126011 + C126010) + C126013 - C126020 - C126021) *
               C139448 * C124864 +
           ((C63381 * C6164 + C139289 * C6170) * C827 -
            (C82905 * C821 + C82904 * C826) +
            (C63381 * C6167 + C139289 * C6173) * C822 -
            (C63381 * C6163 + C139289 * C6169) * C828 -
            (C63381 * C6166 + C139289 * C6172) * C823) *
               C139448 * C124865) *
              C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C3364 +
             (C63381 * C116 + C139289 * C125) * C139303) *
                C139448 * C124863 +
            (C79993 + C79994) * C139448 * C124864 +
            (C81960 + C81959) * C139448 * C124865) *
               C139571 -
           ((C82907 + C82906) * C139448 * C124865 +
            (C81959 + C81960) * C139448 * C124864 +
            (C79994 + C79993) * C139448 * C124863) *
               C139384) *
              C2565 +
          ((C79995 * C139448 * C124863 + C81961 * C139448 * C124864 +
            (C81968 + C81969) * C139448 * C124865) *
               C139384 -
           (C81958 * C139448 * C124865 + C79996 * C139448 * C124864 +
            (C65997 + C65996) * C139448 * C124863) *
               C139571) *
              C2566 +
          ((C66006 * C139448 * C124863 + C79997 * C139448 * C124864 +
            (C67977 + C67978) * C139448 * C124865) *
               C139571 -
           (((C63381 * C68677 + C139289 * C68679) * C139303 +
             (C63381 * C68676 + C139289 * C68678) * C3364) *
                C139448 * C124865 +
            (C67978 + C67977) * C139448 * C124864 +
            C66557 * C139448 * C124863) *
               C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63381 * C107 + C139289 * C113) * C181 +
             (C63381 * C182 + C139289 * C188) * C139346) *
                C139448 * C124863 +
            (C77625 + C77643) * C139448 * C124864 +
            (C81134 + C81140) * C139448 * C124865) *
               C821 -
           ((C81138 + C81124) * C139448 * C124865 +
            (C77644 + C77634) * C139448 * C124864 +
            ((C63381 * C183 + C139289 * C189) * C139346 +
             (C63381 * C108 + C139289 * C114) * C181) *
                C139448 * C124863) *
               C822 +
           (((C63381 * C109 + C139289 * C115) * C181 +
             (C63381 * C184 + C139289 * C190) * C139346) *
                C139448 * C124863 +
            (C77635 + C77645) * C139448 * C124864 +
            (C126096 + C126100) * C139448 * C124865) *
               C823) *
              C139571 +
          (((C77634 + C77644) * C139448 * C124863 +
            (C81124 + C81138) * C139448 * C124864 +
            ((C63381 * C6164 + C139289 * C6170) * C181 +
             (C63381 * C6226 + C139289 * C6229) * C139346) *
                C139448 * C124865) *
               C822 -
           ((C82982 + C82976) * C139448 * C124865 +
            (C81140 + C81134) * C139448 * C124864 +
            (C77643 + C77625) * C139448 * C124863) *
               C821 -
           (((C63381 * C6225 + C139289 * C6228) * C139346 +
             (C63381 * C6163 + C139289 * C6169) * C181) *
                C139448 * C124865 +
            (C126100 + C126096) * C139448 * C124864 +
            (C77645 + C77635) * C139448 * C124863) *
               C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C2660 +
            (C63381 * C182 + C139289 * C188) * C2565 - C63884 * C2661 -
            C63994 * C2566 + C63890 * C2662 + C63995 * C2567) *
               C139448 * C124863 +
           (C80096 + C80097 - C80098 - C80099 + C80100 + C80101) * C139448 *
               C124864 +
           (C127892 + C127893 - C127894 - C127895 + C127896 + C127897) *
               C139448 * C124865) *
              C139303 * C139571 +
          ((C80098 - (C80097 + C80096) + C80099 - C80100 - C80101) * C139448 *
               C124863 +
           (C127894 - (C127893 + C127892) + C127895 - C127896 - C127897) *
               C139448 * C124864 +
           (C81966 * C2661 - (C82981 * C2565 + C82904 * C2660) +
            C82086 * C2566 - (C63381 * C68676 + C139289 * C68678) * C2662 -
            (C63381 * C68730 + C139289 * C68731) * C2567) *
               C139448 * C124865) *
              C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eexz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
            C77750 * C139384) *
               C139448 * C124863 +
           (C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
            C81245 * C139384) *
               C139448 * C124864 +
           (C81016 * C1875 + C81245 * C139571 - C82904 * C1876 -
            C83053 * C139384) *
               C139448 * C124865) *
              C139346 * C821 +
          ((C77517 * C1876 -
            ((C63381 * C246 + C139289 * C252) * C139571 +
             (C63381 * C108 + C139289 * C114) * C1875) +
            C77751 * C139384) *
               C139448 * C124863 +
           (C81014 * C1876 - (C77751 * C139571 + C77517 * C1875) +
            C81246 * C139384) *
               C139448 * C124864 +
           ((C63381 * C6164 + C139289 * C6170) * C1876 -
            (C81246 * C139571 + C81014 * C1875) +
            (C63381 * C6286 + C139289 * C6289) * C139384) *
               C139448 * C124865) *
              C139346 * C822 +
          (((C63381 * C109 + C139289 * C115) * C1875 +
            (C63381 * C247 + C139289 * C253) * C139571 - C77519 * C1876 -
            C77752 * C139384) *
               C139448 * C124863 +
           (C77519 * C1875 + C77752 * C139571 - C126018 * C1876 -
            C126177 * C139384) *
               C139448 * C124864 +
           (C126018 * C1875 + C126177 * C139571 -
            (C63381 * C6163 + C139289 * C6169) * C1876 -
            (C63381 * C6285 + C139289 * C6288) * C139384) *
               C139448 * C124865) *
              C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63381 * C107 + C139289 * C113) * C1875 +
            (C63381 * C245 + C139289 * C251) * C139571 - C77515 * C1876 -
            C77750 * C139384) *
               C139448 * C124863 +
           (C77515 * C1875 + C77750 * C139571 - C81016 * C1876 -
            C81245 * C139384) *
               C139448 * C124864 +
           (C81016 * C1875 + C81245 * C139571 - C82904 * C1876 -
            C83053 * C139384) *
               C139448 * C124865) *
              C2565 +
          ((C66721 - (C66720 + C66719) + C66738) * C139448 * C124863 +
           (C80208 - (C80207 + C80206) + C80209) * C139448 * C124864 +
           (C81966 * C1876 - (C68151 * C139571 + C67971 * C1875) +
            C82192 * C139384) *
               C139448 * C124865) *
              C2566 +
          (C66742 * C139448 * C124863 +
           (C80212 + C80211 - C80210 - C80213) * C139448 * C124864 +
           (C67973 * C1875 + C68152 * C139571 -
            (C63381 * C68676 + C139289 * C68678) * C1876 -
            (C63381 * C68782 + C139289 * C68783) * C139384) *
               C139448 * C124865) *
              C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eeyx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C826 +
            (C307 * C116 + C139448 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C124863 +
           (C32433 + C32434 - C32421 - C32422 + C32423 + C32424) * C124864 +
           (C126252 + C126253 - C126254 - C126255 + C126256 + C126257) *
               C124865) *
              C139289 * C139571 +
          ((C32421 - (C32434 + C32433) + C32422 - C32423 - C32424) * C124863 +
           (C126254 - (C126253 + C126252) + C126255 - C126256 - C126257) *
               C124864 +
           (C35900 * C827 - (C37683 * C821 + C37682 * C826) + C35901 * C822 -
            (C307 * C6163 + C139448 * C6341) * C828 -
            (C307 * C6166 + C139448 * C6344) * C823) *
               C124865) *
              C139289 * C139384) *
         C139346) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C3364 +
             (C307 * C116 + C139448 * C314) * C139303) *
                C124863 +
            (C34904 + C34905) * C124864 + (C36837 + C36836) * C124865) *
               C139289 * C139571 -
           ((C37685 + C37684) * C124865 + (C36836 + C36837) * C124864 +
            (C34905 + C34904) * C124863) *
               C139289 * C139384) *
              C2565 +
          (((C34924 + C34925) * C124863 + (C36850 + C36851) * C124864 +
            ((C307 * C20831 + C139448 * C21045) * C3364 +
             (C307 * C20833 + C139448 * C21047) * C139303) *
                C124865) *
               C139289 * C139384 -
           ((C36851 + C36850) * C124865 + (C34925 + C34924) * C124864 +
            ((C307 * C839 + C139448 * C1098) * C139303 +
             (C307 * C832 + C139448 * C1094) * C3364) *
                C124863) *
               C139289 * C139571) *
              C2566 +
          ((((C307 * C2570 + C139448 * C2827) * C3364 +
             (C307 * C2577 + C139448 * C2831) * C139303) *
                C124863 +
            (C34926 + C34927) * C124864 + (C128052 + C128053) * C124865) *
               C139289 * C139571 -
           (((C307 * C68677 + C139448 * C68835) * C139303 +
             (C307 * C68676 + C139448 * C68834) * C3364) *
                C124865 +
            (C128053 + C128052) * C124864 + (C34927 + C34926) * C124863) *
               C139289 * C139384) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C139448 * C308) * C181 +
             (C307 * C182 + C139448 * C394) * C139346) *
                C124863 +
            (C32533 + C32540) * C124864 + (C36006 + C36012) * C124865) *
               C139289 * C821 -
           (C36003 * C124865 + C32537 * C124864 + (C417 + C401) * C124863) *
               C139289 * C822 +
           (C421 * C124863 + C32538 * C124864 + (C5015 + C5021) * C124865) *
               C139289 * C823) *
              C139571 +
          ((C32536 * C124863 + C36002 * C124864 + (C36007 + C36013) * C124865) *
               C139289 * C822 -
           ((C37758 + C37754) * C124865 + (C36012 + C36006) * C124864 +
            (C32540 + C32533) * C124863) *
               C139289 * C821 -
           (((C307 * C6225 + C139448 * C6397) * C139346 +
             (C307 * C6163 + C139448 * C6341) * C181) *
                C124865 +
            (C5021 + C5015) * C124864 + C2084 * C124863) *
               C139289 * C823) *
              C139384)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C2660 +
            (C307 * C182 + C139448 * C394) * C2565 -
            (C307 * C832 + C139448 * C1094) * C2661 -
            (C307 * C927 + C139448 * C1195) * C2566 +
            (C307 * C2570 + C139448 * C2827) * C2662 +
            (C307 * C2663 + C139448 * C2921) * C2567) *
               C124863 +
           (C35026 + C35027 - C35028 - C35036 + C35031 + C35037) * C124864 +
           (C128128 + C128129 - C128130 - C128131 + C128132 + C128136) *
               C124865) *
              C139289 * C139303 * C139571 +
          ((C35028 - (C35027 + C35026) + C35036 - C35031 - C35037) * C124863 +
           (C128130 - (C128129 + C128128) + C128131 - C128132 - C128136) *
               C124864 +
           ((C307 * C20831 + C139448 * C21045) * C2661 -
            (C37757 * C2565 + C37682 * C2660) +
            (C307 * C20905 + C139448 * C21115) * C2566 -
            (C307 * C68676 + C139448 * C68834) * C2662 -
            (C307 * C68730 + C139448 * C68886) * C2567) *
               C124865) *
              C139289 * C139303 * C139384)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
            C32649 * C139384) *
               C124863 +
           (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
            C36121 * C139384) *
               C124864 +
           (C35899 * C1875 + C36121 * C139571 - C37682 * C1876 -
            C37829 * C139384) *
               C124865) *
              C139289 * C139346 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C124863 +
           (C32643 - (C32642 + C32641) + C32644) * C124864 +
           (C35900 * C1876 - (C5114 * C139571 + C4930 * C1875) +
            C36122 * C139384) *
               C124865) *
              C139289 * C139346 * C822 +
          (C2188 * C124863 + (C32647 + C32646 - C32645 - C32648) * C124864 +
           (C4932 * C1875 + C5115 * C139571 -
            (C307 * C6163 + C139448 * C6341) * C1876 -
            (C307 * C6285 + C139448 * C6452) * C139384) *
               C124865) *
              C139289 * C139346 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C139448 * C308) * C1875 +
            (C307 * C245 + C139448 * C474) * C139571 - C32431 * C1876 -
            C32649 * C139384) *
               C124863 +
           (C32431 * C1875 + C32649 * C139571 - C35899 * C1876 -
            C36121 * C139384) *
               C124864 +
           (C35899 * C1875 + C36121 * C139571 - C37682 * C1876 -
            C37829 * C139384) *
               C124865) *
              C139289 * C2565 +
          ((C34920 * C1876 -
            ((C307 * C1011 + C139448 * C1301) * C139571 +
             (C307 * C832 + C139448 * C1094) * C1875) +
            C35140 * C139384) *
               C124863 +
           (C36846 * C1876 - (C35140 * C139571 + C34920 * C1875) +
            C37072 * C139384) *
               C124864 +
           ((C307 * C20831 + C139448 * C21045) * C1876 -
            (C37072 * C139571 + C36846 * C1875) +
            (C307 * C20975 + C139448 * C21182) * C139384) *
               C124865) *
              C139289 * C2566 +
          (((C307 * C2570 + C139448 * C2827) * C1875 +
            (C307 * C2745 + C139448 * C3017) * C139571 - C34922 * C1876 -
            C35141 * C139384) *
               C124863 +
           (C34922 * C1875 + C35141 * C139571 - C128050 * C1876 -
            C128213 * C139384) *
               C124864 +
           (C128050 * C1875 + C128213 * C139571 -
            (C307 * C68676 + C139448 * C68834) * C1876 -
            (C307 * C68782 + C139448 * C68937) * C139384) *
               C124865) *
              C139289 * C2567) *
         C139303) /
            (p * q * std::sqrt(p + q));
    d2eezx[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C826 +
                      (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                       C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                          C821 -
                      (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                       C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                          C827 -
                      (C125168 * C4664 + C124865 * C5196 + C125167 * C1706 +
                       C124864 * C2269 + C125166 * C117 + C124863 * C562) *
                          C822 +
                      (C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C828 +
                      (C125166 * C118 + C124863 * C563 + C125167 * C1705 +
                       C124864 * C2270 + C125168 * C4665 + C124865 * C5197) *
                          C823) *
                         C139289 * C139448 * C139571 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C827 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C821 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C826) +
                      (C125166 * C1706 + C124863 * C2269 + C125167 * C4664 +
                       C124864 * C5196 + C125168 * C6167 + C124865 * C6507) *
                          C822 -
                      (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                       C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                          C828 -
                      (C125168 * C6166 + C124865 * C6506 + C125167 * C4665 +
                       C124864 * C5197 + C125166 * C1705 + C124863 * C2270) *
                          C823) *
                         C139289 * C139448 * C139384) *
                    C139346) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C3364 +
                       (C125166 * C116 + C124863 * C561 + C125167 * C1707 +
                        C124864 * C2268 + C125168 * C4663 + C124865 * C5195) *
                           C139303) *
                          C139289 * C139448 * C139571 -
                      ((C125168 * C6168 + C124865 * C6508 + C125167 * C4663 +
                        C124864 * C5195 + C125166 * C1707 + C124863 * C2268) *
                           C139303 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C3364) *
                          C139289 * C139448 * C139384) *
                         C2565 +
                     (((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                        C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                           C3364 +
                       (C125166 * C3900 + C124863 * C4413 + C125167 * C5474 +
                        C124864 * C5954 + C125168 * C20833 + C124865 * C21253) *
                           C139303) *
                          C139289 * C139448 * C139384 -
                      ((C125168 * C5474 + C124865 * C5954 + C125167 * C3900 +
                        C124864 * C4413 + C125166 * C839 + C124863 * C1400) *
                           C139303 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C3364) *
                          C139289 * C139448 * C139571) *
                         C2566 +
                     (((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                        C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                           C3364 +
                       (C125166 * C2577 + C124863 * C3109 + C125167 * C3905 +
                        C124864 * C4418 + C125168 * C19905 + C124865 * C20541) *
                           C139303) *
                          C139289 * C139448 * C139571 -
                      ((C125168 * C68677 + C124865 * C68989 + C125167 * C19905 +
                        C124864 * C20541 + C125166 * C3905 + C124863 * C4418) *
                           C139303 +
                       (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                        C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                           C3364) *
                          C139289 * C139448 * C139384) *
                         C2567)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                        C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                           C181 +
                       (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                        C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                           C139346) *
                          C139289 * C139448 * C821 -
                      ((C125168 * C4747 + C124865 * C5286 + C125167 * C1791 +
                        C124864 * C2365 + C125166 * C183 + C124863 * C642) *
                           C139346 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C181) *
                          C139289 * C139448 * C822 +
                      ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                        C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                           C181 +
                       (C125166 * C184 + C124863 * C643 + C125167 * C1792 +
                        C124864 * C2366 + C125168 * C4748 + C124865 * C5287) *
                           C139346) *
                          C139289 * C139448 * C823) *
                         C139571 +
                     (((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                        C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                           C181 +
                       (C125166 * C1791 + C124863 * C2365 + C125167 * C4747 +
                        C124864 * C5286 + C125168 * C6226 + C124865 * C6560) *
                           C139346) *
                          C139289 * C139448 * C822 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C139346 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C181) *
                          C139289 * C139448 * C821 -
                      ((C125168 * C6225 + C124865 * C6559 + C125167 * C4748 +
                        C124864 * C5287 + C125166 * C1792 + C124863 * C2366) *
                           C139346 +
                       (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                        C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                           C181) *
                          C139289 * C139448 * C823) *
                         C139384)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C2660 +
                      (C125166 * C182 + C124863 * C641 + C125167 * C1794 +
                       C124864 * C2368 + C125168 * C4746 + C124865 * C5285) *
                          C2565 -
                      (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                       C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                          C2661 -
                      (C125168 * C5557 + C124865 * C6029 + C125167 * C3989 +
                       C124864 * C4493 + C125166 * C927 + C124863 * C1497) *
                          C2566 +
                      (C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C2662 +
                      (C125166 * C2663 + C124863 * C3199 + C125167 * C3994 +
                       C124864 * C4494 + C125168 * C20021 + C124865 * C20650) *
                          C2567) *
                         C139289 * C139448 * C139303 * C139571 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C2661 -
                      ((C125168 * C6227 + C124865 * C6561 + C125167 * C4746 +
                        C124864 * C5285 + C125166 * C1794 + C124863 * C2368) *
                           C2565 +
                       (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                        C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                           C2660) +
                      (C125166 * C3989 + C124863 * C4493 + C125167 * C5557 +
                       C124864 * C6029 + C125168 * C20905 + C124865 * C21321) *
                          C2566 -
                      (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                       C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                          C2662 -
                      (C125168 * C68730 + C124865 * C69040 + C125167 * C20021 +
                       C124864 * C20650 + C125166 * C3994 + C124863 * C4494) *
                          C2567) *
                         C139289 * C139448 * C139303 * C139384)) /
                       (p * q * std::sqrt(p + q));
    d2eezz[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C1875 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139571 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C1876 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139384) *
                         C139289 * C139448 * C139346 * C821 +
                     ((C125166 * C1697 + C124863 * C2263 + C125167 * C4657 +
                       C124864 * C5192 + C125168 * C6164 + C124865 * C6504) *
                          C1876 -
                      ((C125168 * C4832 + C124865 * C5374 + C125167 * C1878 +
                        C124864 * C2461 + C125166 * C246 + C124863 * C720) *
                           C139571 +
                       (C125168 * C4657 + C124865 * C5192 + C125167 * C1697 +
                        C124864 * C2263 + C125166 * C108 + C124863 * C556) *
                           C1875) +
                      (C125166 * C1878 + C124863 * C2461 + C125167 * C4832 +
                       C124864 * C5374 + C125168 * C6286 + C124865 * C6613) *
                          C139384) *
                         C139289 * C139448 * C139346 * C822 +
                     ((C125166 * C109 + C124863 * C557 + C125167 * C1698 +
                       C124864 * C2265 + C125168 * C4658 + C124865 * C5193) *
                          C1875 +
                      (C125166 * C247 + C124863 * C721 + C125167 * C1877 +
                       C124864 * C2462 + C125168 * C4833 + C124865 * C5375) *
                          C139571 -
                      (C125168 * C6163 + C124865 * C6503 + C125167 * C4658 +
                       C124864 * C5193 + C125166 * C1698 + C124863 * C2265) *
                          C1876 -
                      (C125168 * C6285 + C124865 * C6614 + C125167 * C4833 +
                       C124864 * C5375 + C125166 * C1877 + C124863 * C2462) *
                          C139384) *
                         C139289 * C139448 * C139346 * C823)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125166 * C107 + C124863 * C555 + C125167 * C1700 +
                       C124864 * C2264 + C125168 * C4656 + C124865 * C5191) *
                          C1875 +
                      (C125166 * C245 + C124863 * C719 + C125167 * C1879 +
                       C124864 * C2460 + C125168 * C4831 + C124865 * C5373) *
                          C139571 -
                      (C125168 * C6165 + C124865 * C6505 + C125167 * C4656 +
                       C124864 * C5191 + C125166 * C1700 + C124863 * C2264) *
                          C1876 -
                      (C125168 * C6287 + C124865 * C6612 + C125167 * C4831 +
                       C124864 * C5373 + C125166 * C1879 + C124863 * C2460) *
                          C139384) *
                         C139289 * C139448 * C2565 +
                     ((C125166 * C3891 + C124863 * C4407 + C125167 * C5471 +
                       C124864 * C5951 + C125168 * C20831 + C124865 * C21251) *
                          C1876 -
                      ((C125168 * C5637 + C124865 * C6106 + C125167 * C4075 +
                        C124864 * C4573 + C125166 * C1011 + C124863 * C1602) *
                           C139571 +
                       (C125168 * C5471 + C124865 * C5951 + C125167 * C3891 +
                        C124864 * C4407 + C125166 * C832 + C124863 * C1396) *
                           C1875) +
                      (C125166 * C4075 + C124863 * C4573 + C125167 * C5637 +
                       C124864 * C6106 + C125168 * C20975 + C124865 * C21388) *
                          C139384) *
                         C139289 * C139448 * C2566 +
                     ((C125166 * C2570 + C124863 * C3105 + C125167 * C3896 +
                       C124864 * C4412 + C125168 * C19903 + C124865 * C20539) *
                          C1875 +
                      (C125166 * C2745 + C124863 * C3295 + C125167 * C4080 +
                       C124864 * C4576 + C125168 * C20129 + C124865 * C20753) *
                          C139571 -
                      (C125168 * C68676 + C124865 * C68988 + C125167 * C19903 +
                       C124864 * C20539 + C125166 * C3896 + C124863 * C4412) *
                          C1876 -
                      (C125168 * C68782 + C124865 * C69091 + C125167 * C20129 +
                       C124864 * C20753 + C125166 * C4080 + C124863 * C4576) *
                          C139384) *
                         C139289 * C139448 * C2567) *
                    C139303) /
                       (p * q * std::sqrt(p + q));
}
