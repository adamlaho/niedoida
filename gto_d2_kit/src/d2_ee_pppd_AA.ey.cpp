/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pppd_AA.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1112_11(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C137583 = ae * be;
    const double C137582 = xA - xB;
    const double C137581 = ae + be;
    const double C137580 = 0 * be;
    const double C137615 = yA - yB;
    const double C137618 = zA - zB;
    const double C137675 = 0 * be;
    const double C137705 = 0 * be;
    const double C137725 = p + q;
    const double C137724 = p * q;
    const double C137730 = xP - xQ;
    const double C137729 = bs[2];
    const double C137737 = std::pow(ae, 2);
    const double C137735 = bs[3];
    const double C137748 = bs[4];
    const double C137769 = bs[5];
    const double C137802 = bs[6];
    const double C137845 = yP - yQ;
    const double C137888 = zP - zQ;
    const double C106 = bs[0];
    const double C139319 = ce + de;
    const double C139318 = ce * de;
    const double C139317 = xC - xD;
    const double C139341 = yC - yD;
    const double C139357 = zC - zD;
    const double C137586 = 2 * C137583;
    const double C137585 = C137583 * C137582;
    const double C139297 = std::pow(C137582, 2);
    const double C139517 = C137582 * be;
    const double C139516 = C137582 * ae;
    const double C137584 = std::pow(C137581, 2);
    const double C139306 = 2 * C137581;
    const double C137635 = C137583 * C137615;
    const double C139461 = std::pow(C137615, 2);
    const double C139541 = C137615 * be;
    const double C139539 = C137615 * ae;
    const double C137647 = C137583 * C137618;
    const double C139476 = std::pow(C137618, 2);
    const double C139542 = C137618 * be;
    const double C139540 = C137618 * ae;
    const double C137726 = 2 * C137724;
    const double C137738 = C137730 * ae;
    const double C137734 = std::pow(C137730, 2);
    const double C137848 = C137845 * ae;
    const double C137847 = C137730 * C137845;
    const double C137932 = C137845 * C137730;
    const double C137953 = std::pow(C137845, 2);
    const double C137891 = C137888 * ae;
    const double C137890 = C137730 * C137888;
    const double C137974 = C137845 * C137888;
    const double C137990 = C137888 * C137730;
    const double C138011 = C137888 * C137845;
    const double C138027 = std::pow(C137888, 2);
    const double C139321 = 2 * C139319;
    const double C139331 = std::pow(C139319, 2);
    const double C139323 = C139317 * de;
    const double C139322 = C139317 * ce;
    const double C139320 = std::pow(C139317, 2);
    const double C139342 = std::pow(C139341, 2);
    const double C139394 = C139341 * de;
    const double C139393 = C139341 * ce;
    const double C139358 = std::pow(C139357, 2);
    const double C139422 = C139357 * de;
    const double C139421 = C139357 * ce;
    const double C139298 = C139297 * C137583;
    const double C137588 = 2 * C137584;
    const double C139518 = std::pow(C139306, -1);
    const double C139462 = C139461 * C137583;
    const double C139477 = C139476 * C137583;
    const double C137728 = C137726 / C137725;
    const double C118 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C137726 / C137725, 2) -
          (bs[1] * C137726) / C137725) *
         std::pow(ae, 2)) /
        C137584;
    const double C107 = -(C137730 * bs[1] * C137726) / C137725;
    const double C829 = -(C137845 * bs[1] * C137726) / C137725;
    const double C1762 = -(C137888 * bs[1] * C137726) / C137725;
    const double C137740 = C137735 * C137738;
    const double C137751 = C137748 * C137738;
    const double C137774 = C137769 * C137738;
    const double C137810 = C137802 * C137738;
    const double C112 = (-(bs[1] * C137738 * C137726) / C137725) / C137581;
    const double C137750 = C137734 * C137748;
    const double C137773 = C137734 * C137769;
    const double C137809 = C137734 * C137802;
    const double C137850 = C137735 * C137848;
    const double C137854 = C137748 * C137848;
    const double C137861 = C137769 * C137848;
    const double C137872 = C137802 * C137848;
    const double C187 = (-(bs[1] * C137848 * C137726) / C137725) / C137581;
    const double C137849 = C137847 * C137737;
    const double C137933 = C137932 * C137737;
    const double C137955 = C137953 * C137748;
    const double C137960 = C137953 * C137769;
    const double C137965 = C137953 * C137802;
    const double C137893 = C137735 * C137891;
    const double C137897 = C137748 * C137891;
    const double C137904 = C137769 * C137891;
    const double C137915 = C137802 * C137891;
    const double C274 = (-(bs[1] * C137891 * C137726) / C137725) / C137581;
    const double C137892 = C137890 * C137737;
    const double C137975 = C137974 * C137737;
    const double C137991 = C137990 * C137737;
    const double C138012 = C138011 * C137737;
    const double C138029 = C138027 * C137748;
    const double C138034 = C138027 * C137769;
    const double C138039 = C138027 * C137802;
    const double C139332 = std::pow(C139321, -1);
    const double C139527 = std::pow(C139321, -2);
    const double C139336 = 2 * C139331;
    const double C139525 = 4 * C139331;
    const double C139324 = C139320 * C139318;
    const double C139343 = C139342 * C139318;
    const double C139359 = C139358 * C139318;
    const double C139299 = C139298 / C137581;
    const double C139463 = C139462 / C137581;
    const double C139478 = C139477 / C137581;
    const double C137731 = std::pow(C137728, 2);
    const double C137736 = -C137728;
    const double C137749 = std::pow(C137728, 4);
    const double C137803 = std::pow(C137728, 6);
    const double C137853 = C137748 * C137849;
    const double C137860 = C137769 * C137849;
    const double C137871 = C137802 * C137849;
    const double C137935 = C137748 * C137933;
    const double C137938 = C137769 * C137933;
    const double C137944 = C137802 * C137933;
    const double C137896 = C137748 * C137892;
    const double C137903 = C137769 * C137892;
    const double C137914 = C137802 * C137892;
    const double C137977 = C137748 * C137975;
    const double C137980 = C137769 * C137975;
    const double C137983 = C137802 * C137975;
    const double C137993 = C137748 * C137991;
    const double C137996 = C137769 * C137991;
    const double C138002 = C137802 * C137991;
    const double C138014 = C137748 * C138012;
    const double C138017 = C137769 * C138012;
    const double C138020 = C137802 * C138012;
    const double C139325 = C139324 / C139319;
    const double C139344 = C139343 / C139319;
    const double C139360 = C139359 / C139319;
    const double C139300 = -C139299;
    const double C139464 = -C139463;
    const double C139479 = -C139478;
    const double C137733 = C137729 * C137731;
    const double C119 = (2 * ae * C137731 * C137729 * C137730 * ae +
                         C137730 *
                             (C137729 * C137731 + std::pow(C137730, 2) * bs[3] *
                                                      std::pow(-C137728, 3)) *
                             std::pow(ae, 2)) /
                        C137584;
    const double C193 =
        (C137731 * C137729 * C137730 * (yP - yQ) * C137737) / C137584;
    const double C280 =
        (C137731 * C137729 * C137730 * (zP - zQ) * C137737) / C137584;
    const double C360 =
        (C137731 * C137729 * C137845 * C137730 * C137737) / C137584;
    const double C417 = ((std::pow(C137845, 2) * C137729 * C137731 -
                          (bs[1] * C137726) / C137725) *
                         C137737) /
                        C137584;
    const double C499 =
        (C137731 * C137729 * C137845 * C137888 * C137737) / C137584;
    const double C577 =
        (C137731 * C137729 * C137888 * C137730 * C137737) / C137584;
    const double C633 =
        (C137731 * C137729 * C137888 * C137845 * C137737) / C137584;
    const double C712 = ((std::pow(C137888, 2) * C137729 * C137731 -
                          (bs[1] * C137726) / C137725) *
                         C137737) /
                        C137584;
    const double C113 = (C137730 * C137731 * C137729 * C137738) / C137581 -
                        (ae * bs[1] * C137726) / (C137725 * C137581);
    const double C188 = (C137730 * C137731 * C137729 * C137848) / C137581;
    const double C275 = (C137730 * C137731 * C137729 * C137891) / C137581;
    const double C837 = (C137845 * C137731 * C137729 * C137738) / C137581;
    const double C939 = (C137845 * C137731 * C137729 * C137848) / C137581 -
                        (ae * bs[1] * C137726) / (C137725 * C137581);
    const double C1053 = (C137845 * C137731 * C137729 * C137891) / C137581;
    const double C1770 = (C137888 * C137731 * C137729 * C137738) / C137581;
    const double C1872 = (C137888 * C137731 * C137729 * C137848) / C137581;
    const double C1986 = (C137888 * C137731 * C137729 * C137891) / C137581 -
                         (ae * bs[1] * C137726) / (C137725 * C137581);
    const double C137739 = std::pow(C137736, 3);
    const double C137770 = std::pow(C137736, 5);
    const double C137755 = C137749 * C137751;
    const double C137754 = C137750 * C137749;
    const double C137768 = C137748 * C137749;
    const double C137856 = C137749 * C137854;
    const double C137899 = C137749 * C137897;
    const double C137956 = C137955 * C137749;
    const double C138030 = C138029 * C137749;
    const double C137815 = C137803 * C137810;
    const double C137814 = C137809 * C137803;
    const double C137876 = C137803 * C137872;
    const double C137919 = C137803 * C137915;
    const double C137966 = C137965 * C137803;
    const double C138040 = C138039 * C137803;
    const double C137855 = C137749 * C137853;
    const double C137874 = C137803 * C137871;
    const double C137936 = C137749 * C137935;
    const double C137945 = C137803 * C137944;
    const double C137898 = C137749 * C137896;
    const double C137917 = C137803 * C137914;
    const double C137978 = C137749 * C137977;
    const double C137984 = C137803 * C137983;
    const double C137994 = C137749 * C137993;
    const double C138003 = C137803 * C138002;
    const double C138015 = C137749 * C138014;
    const double C138021 = C137803 * C138020;
    const double C139326 = -C139325;
    const double C139345 = -C139344;
    const double C139361 = -C139360;
    const double C139301 = std::exp(C139300);
    const double C139465 = std::exp(C139464);
    const double C139480 = std::exp(C139479);
    const double C137741 = C137733 * ae;
    const double C108 = C137733 * C137734 - (bs[1] * C137726) / C137725;
    const double C828 = C137845 * C137730 * C137733;
    const double C830 = C137733 * C137953 - (bs[1] * C137726) / C137725;
    const double C1761 = C137888 * C137730 * C137733;
    const double C1763 = C137733 * C138027 - (bs[1] * C137726) / C137725;
    const double C4159 = C137888 * C137845 * C137733;
    const double C137742 = C137739 * C137740;
    const double C137747 = C137735 * C137739;
    const double C137851 = C137739 * C137850;
    const double C137894 = C137739 * C137893;
    const double C194 =
        (ae * C137731 * C137729 * C137845 * ae +
         C137730 * C137739 * C137735 * C137730 * C137845 * C137737) /
        C137584;
    const double C281 =
        (ae * C137731 * C137729 * C137888 * ae +
         C137730 * C137739 * C137735 * C137730 * C137888 * C137737) /
        C137584;
    const double C361 =
        (ae * C137731 * C137729 * C137848 +
         C137730 * C137739 * C137735 * C137845 * C137730 * C137737) /
        C137584;
    const double C418 =
        (C137730 * (C137733 + std::pow(C137845, 2) * C137735 * C137739) *
         C137737) /
        C137584;
    const double C500 =
        (C137730 * C137739 * C137735 * C137845 * C137888 * C137737) / C137584;
    const double C501 =
        (C137739 * C137735 * C137975 + C137749 * C137748 * C137975 * C137734) /
        C137584;
    const double C578 =
        (ae * C137731 * C137729 * C137891 +
         C137730 * C137739 * C137735 * C137888 * C137730 * C137737) /
        C137584;
    const double C634 =
        (C137730 * C137739 * C137735 * C137888 * C137845 * C137737) / C137584;
    const double C635 =
        (C137739 * C137735 * C138012 + C137749 * C137748 * C138012 * C137734) /
        C137584;
    const double C713 =
        (C137730 * (C137733 + std::pow(C137888, 2) * C137735 * C137739) *
         C137737) /
        C137584;
    const double C845 =
        (C137845 * (C137733 + C137734 * C137735 * C137739) * C137737) / C137584;
    const double C947 = (ae * C137731 * C137729 * C137738 +
                         C137845 * C137739 * C137735 * C137849) /
                        C137584;
    const double C1061 = (C137845 * C137739 * C137735 * C137892) / C137584;
    const double C1167 = (ae * C137731 * C137729 * C137738 +
                          C137845 * C137739 * C137735 * C137933) /
                         C137584;
    const double C1249 =
        (2 * ae * C137731 * C137729 * C137848 +
         C137845 * (C137733 + C137953 * C137735 * C137739) * C137737) /
        C137584;
    const double C1359 = (ae * C137731 * C137729 * C137891 +
                          C137845 * C137739 * C137735 * C137975) /
                         C137584;
    const double C1461 = (C137845 * C137739 * C137735 * C137991) / C137584;
    const double C1543 = (ae * C137731 * C137729 * C137891 +
                          C137845 * C137739 * C137735 * C138012) /
                         C137584;
    const double C1645 =
        (C137845 * (C137733 + C138027 * C137735 * C137739) * C137737) / C137584;
    const double C1778 =
        (C137888 * (C137733 + C137734 * C137735 * C137739) * C137737) / C137584;
    const double C1880 = (C137888 * C137739 * C137735 * C137849) / C137584;
    const double C1994 = (ae * C137731 * C137729 * C137738 +
                          C137888 * C137739 * C137735 * C137892) /
                         C137584;
    const double C2100 = (C137888 * C137739 * C137735 * C137933) / C137584;
    const double C2182 =
        (C137888 * (C137733 + C137953 * C137735 * C137739) * C137737) / C137584;
    const double C2292 = (ae * C137731 * C137729 * C137848 +
                          C137888 * C137739 * C137735 * C137975) /
                         C137584;
    const double C2394 = (ae * C137731 * C137729 * C137738 +
                          C137888 * C137739 * C137735 * C137991) /
                         C137584;
    const double C2476 = (ae * C137731 * C137729 * C137848 +
                          C137888 * C137739 * C137735 * C138012) /
                         C137584;
    const double C2578 =
        (2 * ae * C137731 * C137729 * C137891 +
         C137888 * (C137733 + C138027 * C137735 * C137739) * C137737) /
        C137584;
    const double C137779 = C137770 * C137774;
    const double C137778 = C137773 * C137770;
    const double C137801 = C137769 * C137770;
    const double C137863 = C137770 * C137861;
    const double C137862 = C137770 * C137860;
    const double C137906 = C137770 * C137904;
    const double C137905 = C137770 * C137903;
    const double C137939 = C137770 * C137938;
    const double C137961 = C137960 * C137770;
    const double C137981 = C137770 * C137980;
    const double C137997 = C137770 * C137996;
    const double C138018 = C137770 * C138017;
    const double C138035 = C138034 * C137770;
    const double C137758 = C137730 * C137755;
    const double C137767 = ae * C137755;
    const double C138408 = C137845 * C137755;
    const double C138734 = C137888 * C137755;
    const double C137777 = C137768 * C137734;
    const double C137776 = C137730 * C137768;
    const double C137775 = C137768 * ae;
    const double C138579 = C137768 * C137953;
    const double C138578 = C137845 * C137768;
    const double C138790 = C137768 * C138027;
    const double C138789 = C137888 * C137768;
    const double C137859 = ae * C137856;
    const double C137858 = C137730 * C137856;
    const double C138372 = C137845 * C137856;
    const double C138748 = C137888 * C137856;
    const double C137902 = ae * C137899;
    const double C137901 = C137730 * C137899;
    const double C138435 = C137845 * C137899;
    const double C138523 = C137888 * C137899;
    const double C137819 = C137730 * C137815;
    const double C138810 = C137815 * C137953;
    const double C138964 = C137845 * C137815;
    const double C139014 = C137815 * C138027;
    const double C137879 = C137876 * C137734;
    const double C138554 = C137730 * C137876;
    const double C138832 = C137845 * C137876;
    const double C138973 = C137876 * C138027;
    const double C137922 = C137919 * C137734;
    const double C138596 = C137730 * C137919;
    const double C138864 = C137919 * C137953;
    const double C138987 = C137845 * C137919;
    const double C139045 = C137888 * C137919;
    const double C1881 =
        (C137739 * C137735 * C137849 + C137855 * C138027) / C137584;
    const double C137878 = C137730 * C137874;
    const double C138808 = C137845 * C137874;
    const double C139008 = C137874 * C138027;
    const double C2101 =
        (C137739 * C137735 * C137933 + C137936 * C138027) / C137584;
    const double C137946 = C137730 * C137945;
    const double C138822 = C137845 * C137945;
    const double C138888 = C137945 * C138027;
    const double C138917 = C137888 * C137945;
    const double C1062 =
        (C137739 * C137735 * C137892 + C137898 * C137953) / C137584;
    const double C137921 = C137730 * C137917;
    const double C138818 = C137917 * C137953;
    const double C138963 = C137845 * C137917;
    const double C139012 = C137888 * C137917;
    const double C502 =
        (2 * C137730 * C137978 +
         C137730 * (C137978 + C137770 * C137769 * C137975 * C137734)) /
        C137584;
    const double C137985 = C137984 * C137734;
    const double C138595 = C137730 * C137984;
    const double C138862 = C137845 * C137984;
    const double C138901 = C137888 * C137984;
    const double C1462 =
        (C137739 * C137735 * C137991 + C137994 * C137953) / C137584;
    const double C138004 = C137730 * C138003;
    const double C138873 = C138003 * C137953;
    const double C138977 = C137845 * C138003;
    const double C139029 = C137888 * C138003;
    const double C636 =
        (2 * C137730 * C138015 +
         C137730 * (C138015 + C137770 * C137769 * C138012 * C137734)) /
        C137584;
    const double C138022 = C138021 * C137734;
    const double C138609 = C137730 * C138021;
    const double C138877 = C137845 * C138021;
    const double C139035 = C137888 * C138021;
    const double C139327 = std::exp(C139326);
    const double C139346 = std::exp(C139345);
    const double C139362 = std::exp(C139361);
    const double C64353 = C139301 * C837;
    const double C78028 = C139301 * C1770;
    const double C137587 = C137585 * C139301;
    const double C139544 = C139518 * C139301;
    const double C139543 = C139301 * C139516;
    const double C13349 = -(C139301 * C139517) / C137581;
    const double C201 = C139465 * C188;
    const double C32109 = C139465 * C1872;
    const double C137636 = C137635 * C139465;
    const double C186 = -(2 * C137583 * (yA - yB) * C139465) / C137581;
    const double C416 =
        -((C139465 - (C137615 * 2 * C137583 * C137615 * C139465) / C137581) *
          C137586) /
        C137581;
    const double C13439 =
        ((C139465 - (C137615 * 2 * C137583 * C137615 * C139465) / C137581) *
         ae) /
            C137581 -
        (0 * be) / C137588;
    const double C13440 =
        (0 * ae) / C137581 - (C137583 * C137615 * C139465) / C137584;
    const double C139555 = C139518 * C139465;
    const double C139554 = C139465 * C139539;
    const double C46915 = -(C139465 * C139541) / C137581;
    const double C288 = C139480 * C275;
    const double C14385 = C139480 * C1053;
    const double C137648 = C137647 * C139480;
    const double C273 = -(2 * C137583 * (zA - zB) * C139480) / C137581;
    const double C711 =
        -((C139480 - (C137618 * 2 * C137583 * C137618 * C139480) / C137581) *
          C137586) /
        C137581;
    const double C30391 =
        ((C139480 - (C137618 * 2 * C137583 * C137618 * C139480) / C137581) *
         ae) /
            C137581 -
        (0 * be) / C137588;
    const double C30392 =
        (0 * ae) / C137581 - (C137583 * C137618 * C139480) / C137584;
    const double C139557 = C139518 * C139480;
    const double C139556 = C139480 * C139540;
    const double C92566 = -(C139480 * C139542) / C137581;
    const double C137743 = C137730 * C137742;
    const double C948 = (C137739 * C137735 * C137849 + ae * C137845 * C137742 +
                         C137845 * (ae * C137742 + C137845 * C137855)) /
                        C137584;
    const double C1168 = (C137739 * C137735 * C137933 + ae * C137845 * C137742 +
                          C137845 * (ae * C137742 + C137845 * C137936)) /
                         C137584;
    const double C1995 = (C137739 * C137735 * C137892 + ae * C137888 * C137742 +
                          C137888 * (ae * C137742 + C137888 * C137898)) /
                         C137584;
    const double C2395 = (C137739 * C137735 * C137991 + ae * C137888 * C137742 +
                          C137888 * (ae * C137742 + C137888 * C137994)) /
                         C137584;
    const double C4279 =
        (C137888 * (ae * C137742 + C137845 * C137855)) / C137584;
    const double C4397 =
        (ae * C137845 * C137742 + C137888 * C137845 * C137898) / C137584;
    const double C4511 =
        (ae * C137888 * C137742 + C137845 * C137888 * C137936) / C137584;
    const double C4841 =
        (ae * C137845 * C137742 + C137888 * C137845 * C137994) / C137584;
    const double C838 =
        (C137731 * C137729 * C137738 + C137742 * C137953) / C137581;
    const double C1771 =
        (C137731 * C137729 * C137738 + C137742 * C138027) / C137581;
    const double C4163 = (C137888 * C137845 * C137742) / C137581;
    const double C5806 =
        (2 * C137845 * C137742 + C137845 * (C137742 + C137755 * C137953)) /
        C137581;
    const double C8595 = (C137888 * (C137742 + C137755 * C137953)) / C137581;
    const double C10623 =
        (2 * C137888 * C137742 + C137888 * (C137742 + C137755 * C138027)) /
        C137581;
    const double C137753 = C137730 * C137747;
    const double C137752 = C137747 * ae;
    const double C137757 = C137747 + C137754;
    const double C137957 = C137747 + C137956;
    const double C138031 = C137747 + C138030;
    const double C138373 = C137845 * C137747;
    const double C138524 = C137888 * C137747;
    const double C419 =
        ((C137733 + C137953 * C137735 * C137739) * C137737 +
         (C137747 + C137953 * C137748 * C137749) * C137737 * C137734) /
        C137584;
    const double C714 =
        ((C137733 + C138027 * C137735 * C137739) * C137737 +
         (C137747 + C138027 * C137748 * C137749) * C137737 * C137734) /
        C137584;
    const double C109 =
        2 * C137730 * C137733 + C137730 * (C137733 + C137747 * C137734);
    const double C827 = C137845 * (C137733 + C137747 * C137734);
    const double C1760 = C137888 * (C137733 + C137747 * C137734);
    const double C5803 =
        2 * C137845 * C137733 + C137845 * (C137733 + C137747 * C137953);
    const double C8592 = C137888 * (C137733 + C137747 * C137953);
    const double C10620 =
        2 * C137888 * C137733 + C137888 * (C137733 + C137747 * C138027);
    const double C138099 = C137845 * C137851;
    const double C195 =
        (C137739 * C137735 * C137849 + ae * C137730 * C137851 +
         C137730 * (ae * C137851 + C137730 * C137749 * C137748 * C137849)) /
        C137584;
    const double C196 =
        (2 * (ae * C137851 + C137730 * C137855) +
         ae * (C137851 + C137856 * C137734) +
         C137730 * (C137855 + ae * C137730 * C137856 +
                    C137730 * (ae * C137856 +
                               C137730 * C137770 * C137769 * C137849))) /
        C137584;
    const double C362 =
        (C137739 * C137735 * C137933 + ae * C137730 * C137851 +
         C137730 * (ae * C137851 + C137730 * C137749 * C137748 * C137933)) /
        C137584;
    const double C1879 =
        (C137888 * (ae * C137851 + C137730 * C137855)) / C137584;
    const double C2099 =
        (C137888 * (ae * C137851 + C137730 * C137936)) / C137584;
    const double C2291 =
        (ae * C137730 * C137851 + C137888 * C137730 * C137978) / C137584;
    const double C2293 = (C137739 * C137735 * C137975 + ae * C137888 * C137851 +
                          C137888 * (ae * C137851 + C137888 * C137978)) /
                         C137584;
    const double C2475 =
        (ae * C137730 * C137851 + C137888 * C137730 * C138015) / C137584;
    const double C2477 = (C137739 * C137735 * C138012 + ae * C137888 * C137851 +
                          C137888 * (ae * C137851 + C137888 * C138015)) /
                         C137584;
    const double C189 =
        (C137731 * C137729 * C137848 + C137851 * C137734) / C137581;
    const double C190 =
        (2 * C137730 * C137851 + C137730 * (C137851 + C137856 * C137734)) /
        C137581;
    const double C937 = (C137845 * (C137851 + C137856 * C137734) +
                         (C137733 + C137747 * C137734) * ae) /
                        C137581;
    const double C938 =
        (C137845 * C137730 * C137851 + C137730 * C137733 * ae) / C137581;
    const double C1870 = (C137888 * (C137851 + C137856 * C137734)) / C137581;
    const double C1871 = (C137888 * C137730 * C137851) / C137581;
    const double C1873 =
        (C137731 * C137729 * C137848 + C137851 * C138027) / C137581;
    const double C10682 =
        (2 * C137888 * C137851 + C137888 * (C137851 + C137856 * C138027)) /
        C137581;
    const double C138233 = C137888 * C137894;
    const double C282 =
        (C137739 * C137735 * C137892 + ae * C137730 * C137894 +
         C137730 * (ae * C137894 + C137730 * C137749 * C137748 * C137892)) /
        C137584;
    const double C283 =
        (2 * (ae * C137894 + C137730 * C137898) +
         ae * (C137894 + C137899 * C137734) +
         C137730 * (C137898 + ae * C137730 * C137899 +
                    C137730 * (ae * C137899 +
                               C137730 * C137770 * C137769 * C137892))) /
        C137584;
    const double C579 =
        (C137739 * C137735 * C137991 + ae * C137730 * C137894 +
         C137730 * (ae * C137894 + C137730 * C137749 * C137748 * C137991)) /
        C137584;
    const double C1060 =
        (C137845 * (ae * C137894 + C137730 * C137898)) / C137584;
    const double C1358 =
        (ae * C137730 * C137894 + C137845 * C137730 * C137978) / C137584;
    const double C1360 = (C137739 * C137735 * C137975 + ae * C137845 * C137894 +
                          C137845 * (ae * C137894 + C137845 * C137978)) /
                         C137584;
    const double C1460 =
        (C137845 * (ae * C137894 + C137730 * C137994)) / C137584;
    const double C1542 =
        (ae * C137730 * C137894 + C137845 * C137730 * C138015) / C137584;
    const double C1544 = (C137739 * C137735 * C138012 + ae * C137845 * C137894 +
                          C137845 * (ae * C137894 + C137845 * C138015)) /
                         C137584;
    const double C276 =
        (C137731 * C137729 * C137891 + C137894 * C137734) / C137581;
    const double C277 =
        (2 * C137730 * C137894 + C137730 * (C137894 + C137899 * C137734)) /
        C137581;
    const double C1051 = (C137845 * (C137894 + C137899 * C137734)) / C137581;
    const double C1052 = (C137845 * C137730 * C137894) / C137581;
    const double C1054 =
        (C137731 * C137729 * C137891 + C137894 * C137953) / C137581;
    const double C1984 = (C137888 * (C137894 + C137899 * C137734) +
                          (C137733 + C137747 * C137734) * ae) /
                         C137581;
    const double C1985 =
        (C137888 * C137730 * C137894 + C137730 * C137733 * ae) / C137581;
    const double C4393 =
        (C137888 * C137845 * C137894 + C137845 * C137733 * ae) / C137581;
    const double C5921 =
        (2 * C137845 * C137894 + C137845 * (C137894 + C137899 * C137953)) /
        C137581;
    const double C8758 = (C137888 * (C137894 + C137899 * C137953) +
                          (C137733 + C137747 * C137953) * ae) /
                         C137581;
    const double C203 = C139465 * C194;
    const double C290 = C139480 * C281;
    const double C427 = C139465 * C418;
    const double C508 = C139480 * C500;
    const double C511 = C139480 * C501;
    const double C642 = C139465 * C634;
    const double C645 = C139465 * C635;
    const double C722 = C139480 * C713;
    const double C64077 = C139301 * C845;
    const double C14387 = C139480 * C1061;
    const double C64355 = C139301 * C1167;
    const double C14793 = C139480 * C1359;
    const double C64624 = C139301 * C1461;
    const double C15140 = C139480 * C1645;
    const double C77683 = C139301 * C1778;
    const double C32111 = C139465 * C1880;
    const double C78030 = C139301 * C2100;
    const double C32509 = C139465 * C2182;
    const double C78388 = C139301 * C2394;
    const double C32862 = C139465 * C2476;
    const double C137783 = C137730 * C137779;
    const double C137800 = ae * C137779;
    const double C138250 = C137845 * C137779;
    const double C138271 = C137888 * C137779;
    const double C138539 = C137779 * C137953;
    const double C138736 = C137779 * C138027;
    const double C137782 = C137768 + C137778;
    const double C137813 = C137801 * C137734;
    const double C137812 = C137730 * C137801;
    const double C137811 = C137801 * ae;
    const double C137818 = C137801 + C137814;
    const double C137967 = C137801 + C137966;
    const double C138041 = C137801 + C138040;
    const double C138834 = C137801 * C137953;
    const double C138833 = C137845 * C137801;
    const double C138972 = C137801 * C138027;
    const double C139046 = C137888 * C137801;
    const double C137865 = C137863 * C137734;
    const double C137870 = ae * C137863;
    const double C137869 = C137730 * C137863;
    const double C138577 = C137845 * C137863;
    const double C138749 = C137863 * C138027;
    const double C138900 = C137888 * C137863;
    const double C137864 = C137730 * C137862;
    const double C138538 = C137845 * C137862;
    const double C10685 =
        (2 * C137888 * C137855 + C137888 * (C137855 + C137862 * C138027)) /
        C137584;
    const double C43390 =
        (3 * (C137855 + C137862 * C138027) +
         C137888 * (2 * C137888 * C137862 +
                    C137888 * (C137862 + C137874 * C138027))) /
        C137584;
    const double C137908 = C137906 * C137734;
    const double C137913 = ae * C137906;
    const double C137912 = C137730 * C137906;
    const double C138603 = C137906 * C137953;
    const double C138716 = C137845 * C137906;
    const double C138788 = C137888 * C137906;
    const double C137907 = C137730 * C137905;
    const double C138689 = C137845 * C137905;
    const double C138735 = C137888 * C137905;
    const double C5924 =
        (2 * C137845 * C137898 + C137845 * (C137898 + C137905 * C137953)) /
        C137584;
    const double C8761 = (ae * (C137742 + C137755 * C137953) +
                          C137888 * (C137898 + C137905 * C137953)) /
                         C137584;
    const double C20434 =
        (3 * (C137898 + C137905 * C137953) +
         C137845 * (2 * C137845 * C137905 +
                    C137845 * (C137905 + C137917 * C137953))) /
        C137584;
    const double C137940 = C137730 * C137939;
    const double C138548 = C137845 * C137939;
    const double C138657 = C137888 * C137939;
    const double C6571 = (ae * (C137742 + C137755 * C138027) +
                          C137845 * (C137936 + C137939 * C138027)) /
                         C137584;
    const double C10794 =
        (2 * C137888 * C137936 + C137888 * (C137936 + C137939 * C138027)) /
        C137584;
    const double C137962 = C137768 + C137961;
    const double C138383 = C137730 * C137981;
    const double C138602 = C137845 * C137981;
    const double C138674 = C137888 * C137981;
    const double C503 =
        (3 * (C137978 + C137981 * C137734) +
         C137730 *
             (2 * C137730 * C137981 +
              C137730 * (C137981 + C137803 * C137802 * C137975 * C137734))) /
        C137584;
    const double C1357 = (ae * (C137894 + C137899 * C137734) +
                          C137845 * (C137978 + C137981 * C137734)) /
                         C137584;
    const double C2290 = (ae * (C137851 + C137856 * C137734) +
                          C137888 * (C137978 + C137981 * C137734)) /
                         C137584;
    const double C137998 = C137730 * C137997;
    const double C138699 = C137845 * C137997;
    const double C138755 = C137888 * C137997;
    const double C6139 =
        (2 * C137845 * C137994 + C137845 * (C137994 + C137997 * C137953)) /
        C137584;
    const double C9072 = (ae * (C137742 + C137755 * C137953) +
                          C137888 * (C137994 + C137997 * C137953)) /
                         C137584;
    const double C20735 =
        (3 * (C137994 + C137997 * C137953) +
         C137845 * (2 * C137845 * C137997 +
                    C137845 * (C137997 + C138003 * C137953))) /
        C137584;
    const double C138390 = C137730 * C138018;
    const double C138613 = C137845 * C138018;
    const double C138761 = C137888 * C138018;
    const double C637 =
        (3 * (C138015 + C138018 * C137734) +
         C137730 *
             (2 * C137730 * C138018 +
              C137730 * (C138018 + C137803 * C137802 * C138012 * C137734))) /
        C137584;
    const double C1541 = (ae * (C137894 + C137899 * C137734) +
                          C137845 * (C138015 + C138018 * C137734)) /
                         C137584;
    const double C2474 = (ae * (C137851 + C137856 * C137734) +
                          C137888 * (C138015 + C138018 * C137734)) /
                         C137584;
    const double C138036 = C137768 + C138035;
    const double C137772 = 2 * C137767;
    const double C5868 = (2 * (ae * C137742 + C137845 * C137855) +
                          ae * (C137742 + C137755 * C137953) +
                          C137845 * (C137855 + ae * C137845 * C137755 +
                                     C137845 * (C137767 + C137845 * C137862))) /
                         C137584;
    const double C5977 = (2 * (ae * C137742 + C137845 * C137936) +
                          ae * (C137742 + C137755 * C137953) +
                          C137845 * (C137936 + ae * C137845 * C137755 +
                                     C137845 * (C137767 + C137845 * C137939))) /
                         C137584;
    const double C6414 = (ae * C137742 + C137845 * C137855 +
                          (C137767 + C137845 * C137862) * C138027) /
                         C137584;
    const double C10741 =
        (2 * (ae * C137742 + C137888 * C137898) +
         ae * (C137742 + C137755 * C138027) +
         C137888 * (C137898 + ae * C137888 * C137755 +
                    C137888 * (C137767 + C137888 * C137905))) /
        C137584;
    const double C10956 =
        (2 * (ae * C137742 + C137888 * C137994) +
         ae * (C137742 + C137755 * C138027) +
         C137888 * (C137994 + ae * C137888 * C137755 +
                    C137888 * (C137767 + C137888 * C137997))) /
        C137584;
    const double C6494 =
        (C137845 * C137898 + ae * C137888 * C138408 +
         C137888 * (ae * C138408 + C137888 * C137845 * C137905)) /
        C137584;
    const double C6805 =
        (C137845 * C137994 + ae * C137888 * C138408 +
         C137888 * (ae * C138408 + C137888 * C137845 * C137997)) /
        C137584;
    const double C8681 = (C137888 * (C137855 + ae * C138408 +
                                     C137845 * (C137767 + C137845 * C137862))) /
                         C137584;
    const double C8838 =
        (C137888 * C137936 + ae * C137888 * C138408 +
         C137845 * (ae * C137888 * C137755 + C137845 * C137888 * C137939)) /
        C137584;
    const double C6328 = (C137845 * C137742 + C138408 * C138027) / C137581;
    const double C137781 = C137747 + C137777;
    const double C137780 = C137776 * ae;
    const double C137806 = 2 * C137776;
    const double C138363 = C137845 * C137776;
    const double C138514 = C137888 * C137776;
    const double C138583 = C137747 + C138579;
    const double C138582 = C138578 * ae;
    const double C138717 = C137888 * C138578;
    const double C138835 = 2 * C138578;
    const double C138794 = C137747 + C138790;
    const double C138793 = C138789 * ae;
    const double C139048 = 2 * C138789;
    const double C138574 = 2 * C137859;
    const double C10903 =
        (2 * (ae * C137851 + C137888 * C137978) +
         ae * (C137851 + C137856 * C138027) +
         C137888 * (C137978 + ae * C137888 * C137856 +
                    C137888 * (C137859 + C137888 * C137981))) /
        C137584;
    const double C11009 =
        (2 * (ae * C137851 + C137888 * C138015) +
         ae * (C137851 + C137856 * C138027) +
         C137888 * (C138015 + ae * C137888 * C137856 +
                    C137888 * (C137859 + C137888 * C138018))) /
        C137584;
    const double C138103 = C137845 * C137858;
    const double C363 =
        (2 * (ae * C137851 + C137730 * C137936) +
         ae * (C137851 + C137856 * C137734) +
         C137730 *
             (C137936 + ae * C137858 +
              C137730 * (C137859 + C137730 * C137770 * C137769 * C137933))) /
        C137584;
    const double C2294 =
        (C137730 * C137978 + ae * C137888 * C137858 +
         C137888 * (ae * C137858 + C137888 * C137730 * C137981)) /
        C137584;
    const double C2478 =
        (C137730 * C138015 + ae * C137888 * C137858 +
         C137888 * (ae * C137858 + C137888 * C137730 * C138018)) /
        C137584;
    const double C1874 = (C137730 * C137851 + C137858 * C138027) / C137581;
    const double C138785 = 2 * C137902;
    const double C6086 = (2 * (ae * C137894 + C137845 * C137978) +
                          ae * (C137894 + C137899 * C137953) +
                          C137845 * (C137978 + ae * C137845 * C137899 +
                                     C137845 * (C137902 + C137845 * C137981))) /
                         C137584;
    const double C6192 = (2 * (ae * C137894 + C137845 * C138015) +
                          ae * (C137894 + C137899 * C137953) +
                          C137845 * (C138015 + ae * C137845 * C137899 +
                                     C137845 * (C137902 + C137845 * C138018))) /
                         C137584;
    const double C138237 = C137888 * C137901;
    const double C580 =
        (2 * (ae * C137894 + C137730 * C137994) +
         ae * (C137894 + C137899 * C137734) +
         C137730 *
             (C137994 + ae * C137901 +
              C137730 * (C137902 + C137730 * C137770 * C137769 * C137991))) /
        C137584;
    const double C1361 =
        (C137730 * C137978 + ae * C137845 * C137901 +
         C137845 * (ae * C137901 + C137845 * C137730 * C137981)) /
        C137584;
    const double C1545 =
        (C137730 * C138015 + ae * C137845 * C137901 +
         C137845 * (ae * C137901 + C137845 * C137730 * C138018)) /
        C137584;
    const double C1055 = (C137730 * C137894 + C137901 * C137953) / C137581;
    const double C138436 = C137888 * C138435;
    const double C138812 = C137779 + C138810;
    const double C138966 = C138964 * C138027;
    const double C139016 = C137779 + C139014;
    const double C137881 = C137863 + C137879;
    const double C138558 = C137845 * C138554;
    const double C138745 = C138554 * C138027;
    const double C138975 = C137863 + C138973;
    const double C137924 = C137906 + C137922;
    const double C138598 = C138596 * C137953;
    const double C138704 = C137845 * C138596;
    const double C138767 = C137888 * C138596;
    const double C138867 = C137906 + C138864;
    const double C138991 = C137888 * C138987;
    const double C32117 = C139465 * C1881;
    const double C139009 = C137862 + C139008;
    const double C78036 = C139301 * C2101;
    const double C138889 = C137939 + C138888;
    const double C138918 = C137845 * C138917;
    const double C14393 = C139480 * C1062;
    const double C138819 = C137905 + C138818;
    const double C138965 = C137888 * C138963;
    const double C513 = C139480 * C502;
    const double C137986 = C137981 + C137985;
    const double C138597 = C137845 * C138595;
    const double C138671 = C137888 * C138595;
    const double C64627 = C139301 * C1462;
    const double C138874 = C137997 + C138873;
    const double C138978 = C137888 * C138977;
    const double C647 = C139465 * C636;
    const double C138023 = C138018 + C138022;
    const double C138610 = C137845 * C138609;
    const double C138758 = C137888 * C138609;
    const double C139328 = C139327 * C139322;
    const double C139333 = C139332 * C139327;
    const double C139522 = C139327 * C139323;
    const double C139519 = C139327 / C139321;
    const double C5153 = C139527 * C139327;
    const double C139395 = C139346 * C139393;
    const double C139398 = C139332 * C139346;
    const double C139531 = C139346 * C139394;
    const double C139526 = C139346 / C139321;
    const double C824 = C139527 * C139346;
    const double C139423 = C139362 * C139421;
    const double C139426 = C139332 * C139362;
    const double C139535 = C139362 * C139422;
    const double C139528 = C139362 / C139321;
    const double C1759 = C139527 * C139362;
    const double C137589 = 2 * C137587;
    const double C105 =
        ((0 * ae) / C137581 - C137587 / C137584) / (2 * C137581) -
        (0 * be) / C137581;
    const double C46920 = (0 * ae) / C137581 - C137587 / C137584;
    const double C91 = C139544 / C139306;
    const double C89 = C139301 / C139306 - (C139543 * C139517) / C137584;
    const double C90 = C139543 / C137588 - (C139544 * C139517) / C137581;
    const double C46913 = C139543 / C137581;
    const double C14117 = C13349 * C845;
    const double C14521 = C13349 * C1167;
    const double C14517 = C13349 * C837;
    const double C14914 = C13349 * C1462;
    const double C14908 = C13349 * C1461;
    const double C31969 = C13349 * C1778;
    const double C32373 = C13349 * C2101;
    const double C32367 = C13349 * C2100;
    const double C32363 = C13349 * C1770;
    const double C32740 = C13349 * C2394;
    const double C137683 = 2 * C137636;
    const double C13675 =
        (((-4 * C137636) / C137581 -
          (C137615 * (C139465 - (C137615 * 2 * C137636) / C137581) * C137586) /
              C137581) *
         ae) /
        C137581;
    const double C13676 =
        (-((C139465 - (C137615 * 2 * C137636) / C137581) * C137586) / C137581) /
        (2 * C137581);
    const double C47003 =
        (-(0 * be) / C137581) / (2 * C137581) -
        ((C139465 - (C137615 * 2 * C137636) / C137581) * be) / C137581;
    const double C47004 =
        (-(2 * C137636) / C137581) / (2 * C137581) - (0 * be) / C137581;
    const double C47239 =
        -(((-4 * C137636) / C137581 -
           (C137615 * (C139465 - (C137615 * 2 * C137636) / C137581) * C137586) /
               C137581) *
          be) /
        C137581;
    const double C47240 =
        (-((C139465 - (C137615 * 2 * C137636) / C137581) * C137586) / C137581) /
        (2 * C137581);
    const double C63635 =
        ((0 * ae) / C137581 - C137636 / C137584) / (2 * C137581) -
        (0 * be) / C137581;
    const double C204 = C186 * C108;
    const double C202 = C186 * C113;
    const double C200 = C186 * C107;
    const double C426 = C186 * C188;
    const double C424 = C186 * C187;
    const double C641 = C186 * C275;
    const double C960 = C186 * C828;
    const double C1262 = C186 * C939;
    const double C1893 = C186 * C1761;
    const double C2195 = C186 * C1872;
    const double C32118 = C186 * C1763;
    const double C32110 = C186 * C1770;
    const double C32108 = C186 * C1762;
    const double C32861 = C186 * C1986;
    const double C35136 = C186 * C4159;
    const double C428 = C416 * C108;
    const double C425 = C416 * C107;
    const double C1259 = C416 * C828;
    const double C2192 = C416 * C1761;
    const double C32512 = C416 * C1763;
    const double C32508 = C416 * C1762;
    const double C35558 = C416 * C4159;
    const double C13456 = C13439 * C108;
    const double C13446 = C13439 * C113;
    const double C13442 = C13439 * C107;
    const double C13681 = C13439 * C188;
    const double C13678 = C13439 * C187;
    const double C13928 = C13439 * C275;
    const double C14268 = C13439 * C828;
    const double C14669 = C13439 * C939;
    const double C15376 = C13439 * C1761;
    const double C15701 = C13439 * C1872;
    const double C110765 = C13439 * C1763;
    const double C110755 = C13439 * C1770;
    const double C110751 = C13439 * C1762;
    const double C111399 = C13439 * C1986;
    const double C113547 = C13439 * C4159;
    const double C13444 = C13440 * C828;
    const double C13679 = C13440 * C939;
    const double C110753 = C13440 * C4159;
    const double C63634 =
        (((C139465 - (C137615 * 2 * C137636) / C137581) * ae) / C137581 -
         C137675 / C137588) /
            (2 * C137581) -
        ((C137615 * ((0 * ae) / C137581 - C137636 / C137584) + C139555) * be) /
            C137581;
    const double C63568 = C139555 / C139306;
    const double C13351 = C139554 / C137581;
    const double C63566 = C139465 / C139306 - (C139554 * C139541) / C137584;
    const double C63567 = C139554 / C137588 - (C139555 * C139541) / C137581;
    const double C47011 = C46915 * C194;
    const double C47007 = C46915 * C188;
    const double C47246 = C46915 * C418;
    const double C47501 = C46915 * C636;
    const double C47499 = C46915 * C635;
    const double C47493 = C46915 * C634;
    const double C77818 = C46915 * C1881;
    const double C77812 = C46915 * C1880;
    const double C77808 = C46915 * C1872;
    const double C78172 = C46915 * C2182;
    const double C78501 = C46915 * C2476;
    const double C137713 = 2 * C137648;
    const double C30855 =
        (((-4 * C137648) / C137581 -
          (C137618 * (C139480 - (C137618 * 2 * C137648) / C137581) * C137586) /
              C137581) *
         ae) /
        C137581;
    const double C30856 =
        (-((C139480 - (C137618 * 2 * C137648) / C137581) * C137586) / C137581) /
        (2 * C137581);
    const double C92702 =
        (-(0 * be) / C137581) / (2 * C137581) -
        ((C139480 - (C137618 * 2 * C137648) / C137581) * be) / C137581;
    const double C92703 =
        (-(2 * C137648) / C137581) / (2 * C137581) - (0 * be) / C137581;
    const double C93166 =
        -(((-4 * C137648) / C137581 -
           (C137618 * (C139480 - (C137618 * 2 * C137648) / C137581) * C137586) /
               C137581) *
          be) /
        C137581;
    const double C93167 =
        (-((C139480 - (C137618 * 2 * C137648) / C137581) * C137586) / C137581) /
        (2 * C137581);
    const double C125482 =
        ((0 * ae) / C137581 - C137648 / C137584) / (2 * C137581) -
        (0 * be) / C137581;
    const double C291 = C273 * C108;
    const double C289 = C273 * C113;
    const double C287 = C273 * C107;
    const double C507 = C273 * C188;
    const double C721 = C273 * C275;
    const double C719 = C273 * C274;
    const double C1074 = C273 * C828;
    const double C1658 = C273 * C1053;
    const double C2007 = C273 * C1761;
    const double C2591 = C273 * C1986;
    const double C14394 = C273 * C830;
    const double C14386 = C273 * C837;
    const double C14384 = C273 * C829;
    const double C14792 = C273 * C939;
    const double C18454 = C273 * C4159;
    const double C723 = C711 * C108;
    const double C720 = C711 * C107;
    const double C1655 = C711 * C828;
    const double C2588 = C711 * C1761;
    const double C15143 = C711 * C830;
    const double C15139 = C711 * C829;
    const double C19318 = C711 * C4159;
    const double C30408 = C30391 * C108;
    const double C30398 = C30391 * C113;
    const double C30394 = C30391 * C107;
    const double C30628 = C30391 * C188;
    const double C30861 = C30391 * C275;
    const double C30858 = C30391 * C274;
    const double C31204 = C30391 * C828;
    const double C31845 = C30391 * C1053;
    const double C32246 = C30391 * C1761;
    const double C32983 = C30391 * C1986;
    const double C76938 = C30391 * C830;
    const double C76928 = C30391 * C837;
    const double C76924 = C30391 * C829;
    const double C77242 = C30391 * C939;
    const double C80826 = C30391 * C4159;
    const double C30396 = C30392 * C1761;
    const double C30859 = C30392 * C1986;
    const double C76926 = C30392 * C4159;
    const double C125481 =
        (((C139480 - (C137618 * 2 * C137648) / C137581) * ae) / C137581 -
         C137705 / C137588) /
            (2 * C137581) -
        ((C137618 * ((0 * ae) / C137581 - C137648 / C137584) + C139557) * be) /
            C137581;
    const double C125378 = C139557 / C139306;
    const double C30255 = C139556 / C137581;
    const double C125376 = C139480 / C139306 - (C139556 * C139542) / C137584;
    const double C125377 = C139556 / C137588 - (C139557 * C139542) / C137581;
    const double C92710 = C92566 * C281;
    const double C92706 = C92566 * C275;
    const double C92948 = C92566 * C502;
    const double C92946 = C92566 * C501;
    const double C92940 = C92566 * C500;
    const double C93173 = C92566 * C713;
    const double C109906 = C92566 * C1062;
    const double C109900 = C92566 * C1061;
    const double C109896 = C92566 * C1053;
    const double C110214 = C92566 * C1359;
    const double C110536 = C92566 * C1645;
    const double C137744 = C137743 + C137741;
    const double C14527 = C13349 * C1168;
    const double C64359 = C139301 * C1168;
    const double C32746 = C13349 * C2395;
    const double C78390 = C139301 * C2395;
    const double C35139 = C139465 * C4279;
    const double C77814 = C139555 * C4279;
    const double C80683 = C46915 * C4279;
    const double C110758 = C139555 * C4279;
    const double C18453 = C139480 * C4397;
    const double C76931 = C139557 * C4397;
    const double C109902 = C139557 * C4397;
    const double C113692 = C92566 * C4397;
    const double C18603 = C13349 * C4511;
    const double C67303 = C139301 * C4511;
    const double C19043 = C13349 * C4841;
    const double C67626 = C139301 * C4841;
    const double C14392 = C273 * C838;
    const double C14531 = C13349 * C838;
    const double C64357 = C139301 * C838;
    const double C76934 = C30391 * C838;
    const double C32116 = C186 * C1771;
    const double C32377 = C13349 * C1771;
    const double C78038 = C139301 * C1771;
    const double C110761 = C13439 * C1771;
    const double C18452 = C273 * C4163;
    const double C18607 = C13349 * C4163;
    const double C35138 = C186 * C4163;
    const double C67305 = C139301 * C4163;
    const double C76930 = C30392 * C4163;
    const double C80822 = C30391 * C4163;
    const double C110757 = C13440 * C4163;
    const double C113551 = C13439 * C4163;
    const double C20438 = C273 * C5806;
    const double C20515 = C13349 * C5806;
    const double C64363 = C139301 * C5806;
    const double C82746 = C30391 * C5806;
    const double C24222 = C273 * C8595;
    const double C24331 = C13349 * C8595;
    const double C40764 = C186 * C8595;
    const double C67301 = C139301 * C8595;
    const double C76932 = C30392 * C8595;
    const double C86504 = C30391 * C8595;
    const double C113553 = C13440 * C8595;
    const double C119249 = C13439 * C8595;
    const double C43394 = C186 * C10623;
    const double C43541 = C13349 * C10623;
    const double C89200 = C139301 * C10623;
    const double C121899 = C13439 * C10623;
    const double C137756 = C137753 * ae;
    const double C4394 =
        (C137888 * C137845 * C137901 + C137845 * C137753 * ae) / C137581;
    const double C831 = C137730 * C137733 + C137753 * C137953;
    const double C1764 = C137730 * C137733 + C137753 * C138027;
    const double C4160 = C137888 * C137845 * C137753;
    const double C5802 =
        2 * C137845 * C137753 + C137845 * (C137753 + C137776 * C137953);
    const double C8591 = C137888 * (C137753 + C137776 * C137953);
    const double C10619 =
        2 * C137888 * C137753 + C137888 * (C137753 + C137776 * C138027);
    const double C137760 = C137758 + C137752;
    const double C138374 = C138372 + C137752;
    const double C138525 = C138523 + C137752;
    const double C6728 =
        (ae * (C137894 + C137888 * (C137888 * C137899 + C137752) +
               C137888 * C137747 * ae) +
         C137845 * (C137978 + ae * C137888 * C137856 +
                    C137888 * (C137859 + C137888 * C137981))) /
        C137584;
    const double C137759 = C137757 * C137737;
    const double C137958 = C137957 * C137737;
    const double C138032 = C138031 * C137737;
    const double C138375 = C138373 * ae;
    const double C6325 = C137845 * C137733 + C138373 * C138027;
    const double C26692 =
        2 * C137888 * C138373 + C137888 * (C138373 + C138578 * C138027);
    const double C138526 = C138524 * ae;
    const double C430 = C139465 * C419;
    const double C47255 = C46915 * C419;
    const double C725 = C139480 * C714;
    const double C93182 = C92566 * C714;
    const double C210 = C186 * C109;
    const double C297 = C273 * C109;
    const double C431 = C416 * C109;
    const double C726 = C711 * C109;
    const double C13458 = C13439 * C109;
    const double C30410 = C30391 * C109;
    const double C956 = C186 * C827;
    const double C1070 = C273 * C827;
    const double C1256 = C416 * C827;
    const double C1652 = C711 * C827;
    const double C13454 = C13440 * C827;
    const double C16358 = C13439 * C827;
    const double C33302 = C30391 * C827;
    const double C1889 = C186 * C1760;
    const double C2003 = C273 * C1760;
    const double C2189 = C416 * C1760;
    const double C2585 = C711 * C1760;
    const double C17302 = C13439 * C1760;
    const double C30406 = C30392 * C1760;
    const double C34234 = C30391 * C1760;
    const double C20436 = C273 * C5803;
    const double C20879 = C711 * C5803;
    const double C82742 = C30391 * C5803;
    const double C24220 = C273 * C8592;
    const double C24855 = C711 * C8592;
    const double C40762 = C186 * C8592;
    const double C41066 = C416 * C8592;
    const double C76936 = C30392 * C8592;
    const double C86500 = C30391 * C8592;
    const double C113549 = C13440 * C8592;
    const double C119245 = C13439 * C8592;
    const double C43392 = C186 * C10620;
    const double C43620 = C416 * C10620;
    const double C121895 = C13439 * C10620;
    const double C138100 = C138099 + C137741;
    const double C207 = C139465 * C195;
    const double C47017 = C46915 * C195;
    const double C209 = C139465 * C196;
    const double C47027 = C46915 * C196;
    const double C1892 = C139465 * C1879;
    const double C48895 = C46915 * C1879;
    const double C32383 = C13349 * C2099;
    const double C32369 = C139544 * C2099;
    const double C78042 = C139301 * C2099;
    const double C94648 = C139544 * C2099;
    const double C2303 = C139480 * C2291;
    const double C30631 = C139557 * C2291;
    const double C92942 = C139557 * C2291;
    const double C94896 = C92566 * C2291;
    const double C2487 = C139465 * C2475;
    const double C49547 = C46915 * C2475;
    const double C32868 = C139465 * C2477;
    const double C78507 = C46915 * C2477;
    const double C205 = C139465 * C189;
    const double C429 = C186 * C189;
    const double C510 = C273 * C189;
    const double C13690 = C13439 * C189;
    const double C30634 = C30391 * C189;
    const double C47021 = C46915 * C189;
    const double C211 = C139465 * C190;
    const double C432 = C186 * C190;
    const double C512 = C273 * C190;
    const double C13693 = C13439 * C190;
    const double C30636 = C30391 * C190;
    const double C47023 = C46915 * C190;
    const double C957 = C139465 * C937;
    const double C1257 = C186 * C937;
    const double C1366 = C273 * C937;
    const double C13455 = C139555 * C937;
    const double C13687 = C13440 * C937;
    const double C14678 = C13439 * C937;
    const double C33608 = C30391 * C937;
    const double C47019 = C139555 * C937;
    const double C49867 = C46915 * C937;
    const double C961 = C139465 * C938;
    const double C1260 = C186 * C938;
    const double C1369 = C273 * C938;
    const double C13445 = C139555 * C938;
    const double C13684 = C13440 * C938;
    const double C14666 = C13439 * C938;
    const double C31523 = C30391 * C938;
    const double C47009 = C139555 * C938;
    const double C47833 = C46915 * C938;
    const double C1890 = C139465 * C1870;
    const double C2190 = C186 * C1870;
    const double C2299 = C273 * C1870;
    const double C15710 = C13439 * C1870;
    const double C30632 = C30392 * C1870;
    const double C34554 = C30391 * C1870;
    const double C50811 = C46915 * C1870;
    const double C1894 = C139465 * C1871;
    const double C2193 = C186 * C1871;
    const double C2302 = C273 * C1871;
    const double C15698 = C13439 * C1871;
    const double C30630 = C30392 * C1871;
    const double C32631 = C30391 * C1871;
    const double C48899 = C46915 * C1871;
    const double C2196 = C186 * C1873;
    const double C15702 = C13439 * C1873;
    const double C32119 = C139465 * C1873;
    const double C77822 = C46915 * C1873;
    const double C10851 = C186 * C10682;
    const double C26981 = C13439 * C10682;
    const double C43393 = C139465 * C10682;
    const double C89053 = C46915 * C10682;
    const double C138234 = C138233 + C137741;
    const double C294 = C139480 * C282;
    const double C92716 = C92566 * C282;
    const double C296 = C139480 * C283;
    const double C92726 = C92566 * C283;
    const double C1073 = C139480 * C1060;
    const double C93506 = C92566 * C1060;
    const double C1370 = C139480 * C1358;
    const double C93824 = C92566 * C1358;
    const double C14799 = C139480 * C1360;
    const double C110220 = C92566 * C1360;
    const double C14916 = C13349 * C1460;
    const double C14910 = C139544 * C1460;
    const double C48447 = C139544 * C1460;
    const double C64633 = C139301 * C1460;
    const double C1554 = C139465 * C1542;
    const double C13931 = C139555 * C1542;
    const double C47495 = C139555 * C1542;
    const double C48569 = C46915 * C1542;
    const double C292 = C139480 * C276;
    const double C644 = C186 * C276;
    const double C724 = C273 * C276;
    const double C13934 = C13439 * C276;
    const double C30870 = C30391 * C276;
    const double C92720 = C92566 * C276;
    const double C298 = C139480 * C277;
    const double C646 = C186 * C277;
    const double C727 = C273 * C277;
    const double C13936 = C13439 * C277;
    const double C30873 = C30391 * C277;
    const double C92722 = C92566 * C277;
    const double C1071 = C139480 * C1051;
    const double C1550 = C186 * C1051;
    const double C1653 = C273 * C1051;
    const double C13932 = C13440 * C1051;
    const double C16996 = C13439 * C1051;
    const double C31854 = C30391 * C1051;
    const double C95558 = C92566 * C1051;
    const double C1075 = C139480 * C1052;
    const double C1553 = C186 * C1052;
    const double C1656 = C273 * C1052;
    const double C13930 = C13440 * C1052;
    const double C15031 = C13439 * C1052;
    const double C31842 = C30391 * C1052;
    const double C93510 = C92566 * C1052;
    const double C1659 = C273 * C1054;
    const double C14395 = C139480 * C1054;
    const double C31846 = C30391 * C1054;
    const double C109910 = C92566 * C1054;
    const double C2004 = C139480 * C1984;
    const double C2483 = C186 * C1984;
    const double C2586 = C273 * C1984;
    const double C17918 = C13439 * C1984;
    const double C30407 = C139557 * C1984;
    const double C30867 = C30392 * C1984;
    const double C32992 = C30391 * C1984;
    const double C92718 = C139557 * C1984;
    const double C96490 = C92566 * C1984;
    const double C2008 = C139480 * C1985;
    const double C2486 = C186 * C1985;
    const double C2589 = C273 * C1985;
    const double C16033 = C13439 * C1985;
    const double C30397 = C139557 * C1985;
    const double C30864 = C30392 * C1985;
    const double C32980 = C30391 * C1985;
    const double C92708 = C139557 * C1985;
    const double C94526 = C92566 * C1985;
    const double C5060 = C273 * C4393;
    const double C18455 = C139480 * C4393;
    const double C31844 = C30392 * C4393;
    const double C35968 = C186 * C4393;
    const double C36108 = C30391 * C4393;
    const double C76927 = C139557 * C4393;
    const double C109898 = C139557 * C4393;
    const double C111401 = C13440 * C4393;
    const double C113696 = C92566 * C4393;
    const double C114383 = C13439 * C4393;
    const double C6249 = C273 * C5921;
    const double C20437 = C139480 * C5921;
    const double C37605 = C30391 * C5921;
    const double C115612 = C92566 * C5921;
    const double C9230 = C273 * C8758;
    const double C24221 = C139480 * C8758;
    const double C31847 = C30392 * C8758;
    const double C41369 = C186 * C8758;
    const double C41473 = C30391 * C8758;
    const double C76937 = C139557 * C8758;
    const double C109908 = C139557 * C8758;
    const double C114385 = C13440 * C8758;
    const double C119356 = C92566 * C8758;
    const double C119883 = C13439 * C8758;
    const double C137786 = C137783 + C137775;
    const double C137808 = 2 * C137800;
    const double C138811 = C137800 + C138808;
    const double C138823 = C137800 + C138822;
    const double C139015 = C137800 + C139012;
    const double C139030 = C137800 + C139029;
    const double C138255 = ae * C138250;
    const double C138809 = 2 * C138250;
    const double C138962 = C137888 * C138250;
    const double C21314 =
        (C137936 + C137939 * C138027 + ae * (C138408 + C138250 * C138027) +
         C137845 * (ae * (C137755 + C137779 * C138027) +
                    C137845 * (C137939 + C137945 * C138027))) /
        C137584;
    const double C26694 =
        (2 * C137888 * C138408 + C137888 * (C138408 + C138250 * C138027)) /
        C137581;
    const double C138276 = ae * C138271;
    const double C139013 = 2 * C138271;
    const double C138541 = C137755 + C138539;
    const double C138738 = C137755 + C138736;
    const double C137785 = C137782 * C137737;
    const double C137817 = C137768 + C137813;
    const double C137816 = C137812 * ae;
    const double C138556 = C137812 * C137953;
    const double C138555 = C137845 * C137812;
    const double C138769 = C137812 * C138027;
    const double C138768 = C137888 * C137812;
    const double C137823 = C137819 + C137811;
    const double C138838 = C138832 + C137811;
    const double C139052 = C139045 + C137811;
    const double C137822 = C137818 * C137737;
    const double C137968 = C137967 * C137737;
    const double C138042 = C138041 * C137737;
    const double C138840 = C137768 + C138834;
    const double C138839 = C138833 * ae;
    const double C138989 = C138833 * C138027;
    const double C138988 = C137888 * C138833;
    const double C138974 = C137768 + C138972;
    const double C139053 = C139046 * ae;
    const double C137867 = C137856 + C137865;
    const double C137880 = C137870 + C137878;
    const double C137947 = C137870 + C137946;
    const double C138828 = 2 * C137870;
    const double C138903 = C137870 + C138901;
    const double C139036 = C137870 + C139035;
    const double C137875 = 2 * C137869;
    const double C137873 = ae * C137869;
    const double C138362 = C137845 * C137869;
    const double C138744 = C137888 * C137869;
    const double C10681 =
        (2 * C137888 * C137858 + C137888 * (C137858 + C137869 * C138027)) /
        C137581;
    const double C138581 = C138577 + C137775;
    const double C138750 = C137856 + C138749;
    const double C138902 = ae * C138900;
    const double C139024 = 2 * C138900;
    const double C137866 = C137859 + C137864;
    const double C138540 = C137767 + C138538;
    const double C43395 = C139465 * C10685;
    const double C89057 = C46915 * C10685;
    const double C134975 = C139465 * C43390;
    const double C137910 = C137899 + C137908;
    const double C137923 = C137913 + C137921;
    const double C138005 = C137913 + C138004;
    const double C138866 = C137913 + C138862;
    const double C138878 = C137913 + C138877;
    const double C139041 = 2 * C137913;
    const double C137918 = 2 * C137912;
    const double C137916 = ae * C137912;
    const double C138430 = C137845 * C137912;
    const double C138513 = C137888 * C137912;
    const double C5920 =
        (2 * C137845 * C137901 + C137845 * (C137901 + C137912 * C137953)) /
        C137581;
    const double C8757 = (C137888 * (C137901 + C137912 * C137953) +
                          (C137753 + C137776 * C137953) * ae) /
                         C137581;
    const double C138605 = C137899 + C138603;
    const double C138718 = C137888 * C138716;
    const double C138863 = 2 * C138716;
    const double C138861 = ae * C138716;
    const double C138792 = C138788 + C137775;
    const double C137909 = C137902 + C137907;
    const double C138737 = C137767 + C138735;
    const double C20439 = C139480 * C5924;
    const double C115616 = C92566 * C5924;
    const double C24223 = C139480 * C8761;
    const double C76933 = C139557 * C8761;
    const double C109904 = C139557 * C8761;
    const double C119360 = C92566 * C8761;
    const double C68672 = C139480 * C20434;
    const double C137941 = C137859 + C137940;
    const double C138549 = C137767 + C138548;
    const double C26908 =
        (ae *
             (2 * C137888 * C137755 + C137888 * (C137755 + C137779 * C138027)) +
         C137845 * (2 * C138657 + C137888 * (C137939 + C137945 * C138027))) /
        C137584;
    const double C43538 =
        (3 * (C137936 + C137939 * C138027) +
         C137888 * (2 * C138657 + C137888 * (C137939 + C137945 * C138027))) /
        C137584;
    const double C21321 = C13349 * C6571;
    const double C69337 = C139301 * C6571;
    const double C43545 = C13349 * C10794;
    const double C89202 = C139301 * C10794;
    const double C137963 = C137962 * C137737;
    const double C138604 = C137902 + C138602;
    const double C138675 = C137859 + C138674;
    const double C517 = C139480 * C503;
    const double C1367 = C139480 * C1357;
    const double C95864 = C92566 * C1357;
    const double C2300 = C139480 * C2290;
    const double C30633 = C139557 * C2290;
    const double C92944 = C139557 * C2290;
    const double C96810 = C92566 * C2290;
    const double C137999 = C137902 + C137998;
    const double C138756 = C137767 + C138755;
    const double C20738 = C13349 * C6139;
    const double C64629 = C139301 * C6139;
    const double C24650 = C13349 * C9072;
    const double C67623 = C139301 * C9072;
    const double C68896 = C139301 * C20735;
    const double C138614 = C137902 + C138613;
    const double C138762 = C137859 + C138761;
    const double C651 = C139465 * C637;
    const double C1551 = C139465 * C1541;
    const double C13933 = C139555 * C1541;
    const double C47497 = C139555 * C1541;
    const double C50505 = C46915 * C1541;
    const double C2484 = C139465 * C2474;
    const double C51427 = C46915 * C2474;
    const double C138037 = C138036 * C137737;
    const double C20519 = C13349 * C5977;
    const double C64361 = C139301 * C5977;
    const double C37805 = C139465 * C6414;
    const double C77816 = C139555 * C6414;
    const double C83382 = C46915 * C6414;
    const double C110760 = C139555 * C6414;
    const double C43766 = C13349 * C10956;
    const double C89423 = C139301 * C10956;
    const double C21209 = C139480 * C6494;
    const double C80821 = C139557 * C6494;
    const double C113690 = C139557 * C6494;
    const double C116356 = C92566 * C6494;
    const double C21636 = C13349 * C6805;
    const double C69579 = C139301 * C6805;
    const double C40765 = C139465 * C8681;
    const double C80685 = C139555 * C8681;
    const double C86395 = C46915 * C8681;
    const double C113554 = C139555 * C8681;
    const double C24335 = C13349 * C8838;
    const double C67299 = C139301 * C8838;
    const double C21208 = C273 * C6328;
    const double C21317 = C13349 * C6328;
    const double C37804 = C186 * C6328;
    const double C69335 = C139301 * C6328;
    const double C80820 = C30392 * C6328;
    const double C83491 = C30391 * C6328;
    const double C110759 = C13440 * C6328;
    const double C116245 = C13439 * C6328;
    const double C137784 = C137781 * ae;
    const double C110 = 3 * (C137733 + C137747 * C137734) +
                        C137730 * (2 * C137753 + C137730 * C137781);
    const double C832 = C137733 + C137747 * C137734 + C137781 * C137953;
    const double C833 = C137845 * (2 * C137753 + C137730 * C137781);
    const double C1765 = C137733 + C137747 * C137734 + C137781 * C138027;
    const double C1766 = C137888 * (2 * C137753 + C137730 * C137781);
    const double C4161 = C137888 * C137845 * C137781;
    const double C138365 = C138363 * ae;
    const double C6324 = C137845 * C137753 + C138363 * C138027;
    const double C138516 = C138514 * ae;
    const double C138585 = C138583 * ae;
    const double C20278 = 3 * (C137733 + C137747 * C137953) +
                          C137845 * (2 * C138373 + C137845 * C138583);
    const double C20984 = C137733 + C137747 * C137953 + C138583 * C138027;
    const double C23998 = C137888 * (2 * C138373 + C137845 * C138583);
    const double C21530 =
        (C137978 + ae * C137888 * C137856 +
         C137888 * (C137859 + C137888 * C137981) +
         ae * (C138435 + C137888 * (C137888 * C137845 * C137906 + C138582) +
               C137888 * C138578 * ae) +
         C137845 * (ae * (C137899 + C137888 * (C137888 * C137906 + C137775) +
                          C137888 * C137768 * ae) +
                    C137845 * (C137981 + ae * C137888 * C137863 +
                               C137888 * (C137870 + C137888 * C137984)))) /
        C137584;
    const double C138719 = C138717 * ae;
    const double C138796 = C138794 * ae;
    const double C43304 = 3 * (C137733 + C137747 * C138027) +
                          C137888 * (2 * C138524 + C137888 * C138794);
    const double C43840 = C139465 * C11009;
    const double C89493 = C46915 * C11009;
    const double C2307 = C139480 * C2294;
    const double C32630 = C139557 * C2294;
    const double C94898 = C92566 * C2294;
    const double C94894 = C139557 * C2294;
    const double C2491 = C139465 * C2478;
    const double C49549 = C46915 * C2478;
    const double C1896 = C139465 * C1874;
    const double C2198 = C186 * C1874;
    const double C2306 = C273 * C1874;
    const double C15705 = C13439 * C1874;
    const double C32633 = C30391 * C1874;
    const double C32629 = C30392 * C1874;
    const double C48901 = C46915 * C1874;
    const double C20667 = C139480 * C6086;
    const double C115824 = C92566 * C6086;
    const double C1374 = C139480 * C1361;
    const double C93826 = C92566 * C1361;
    const double C1558 = C139465 * C1545;
    const double C15030 = C139555 * C1545;
    const double C48571 = C46915 * C1545;
    const double C48567 = C139555 * C1545;
    const double C1077 = C139480 * C1055;
    const double C1557 = C186 * C1055;
    const double C1661 = C273 * C1055;
    const double C15033 = C13439 * C1055;
    const double C15029 = C13440 * C1055;
    const double C31849 = C30391 * C1055;
    const double C93512 = C92566 * C1055;
    const double C138814 = C137845 * C138812;
    const double C138968 = C138250 + C138966;
    const double C139018 = C137888 * C139016;
    const double C137883 = C137730 * C137881;
    const double C138351 = C137845 * C137881;
    const double C138746 = C137869 + C138745;
    const double C139025 = C137888 * C138975;
    const double C137926 = C137730 * C137924;
    const double C138425 = C137845 * C137924;
    const double C138503 = C137888 * C137924;
    const double C138600 = C137912 + C138598;
    const double C138706 = C137888 * C138704;
    const double C138869 = C137845 * C138867;
    const double C138950 = C137888 * C138867;
    const double C134969 =
        (4 * (2 * C137888 * C137862 + C137888 * C139009) +
         C137888 *
             (3 * C139009 +
              C137888 * (2 * C137888 * C137874 +
                         C137888 * (C137874 + std::pow(C137736, 7) * bs[7] *
                                                  C137849 * C138027)))) /
        C137584;
    const double C73551 =
        (2 * C138657 + C137888 * C138889 +
         ae * (2 * C137888 * C138250 +
               C137888 * (C138250 + C137845 * C137815 * C138027)) +
         C137845 *
             (ae * (2 * C138271 + C137888 * (C137779 + C137815 * C138027)) +
              C137845 * (2 * C138917 +
                         C137888 * (C137945 + std::pow(C137736, 7) * bs[7] *
                                                  C137933 * C138027)))) /
        C137584;
    const double C135081 =
        (4 * (2 * C138657 + C137888 * C138889) +
         C137888 *
             (3 * C138889 +
              C137888 * (2 * C138917 +
                         C137888 * (C137945 + std::pow(C137736, 7) * bs[7] *
                                                  C137933 * C138027)))) /
        C137584;
    const double C68666 =
        (4 * (2 * C138689 + C137845 * C138819) +
         C137845 *
             (3 * C138819 +
              C137845 * (2 * C137845 * C137917 +
                         C137845 * (C137917 + std::pow(C137736, 7) * bs[7] *
                                                  C137892 * C137953)))) /
        C137584;
    const double C504 =
        (4 * (2 * C137730 * C137981 + C137730 * C137986) +
         C137730 *
             (3 * C137986 +
              C137730 * (2 * C137730 * C137984 +
                         C137730 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C68891 =
        (4 * (2 * C138699 + C137845 * C138874) +
         C137845 *
             (3 * C138874 +
              C137845 * (2 * C137845 * C138003 +
                         C137845 * (C138003 + std::pow(C137736, 7) * bs[7] *
                                                  C137991 * C137953)))) /
        C137584;
    const double C638 =
        (4 * (2 * C137730 * C138018 + C137730 * C138023) +
         C137730 *
             (3 * C138023 +
              C137730 * (2 * C137730 * C138021 +
                         C137730 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C139523 = C139328 / C139336;
    const double C139521 = C139328 / C139319;
    const double C139520 = C139328 * C139323;
    const double C5152 = (2 * C139332 * C139328) / C139319;
    const double C139524 = C139333 * C139323;
    const double C99 = C139333 / C139525;
    const double C2694 = C139333 / C139321;
    const double C139546 = C139522 / C139319;
    const double C5151 = (C139327 * std::pow(C139322, 2)) / C139331 + C139519;
    const double C139533 = C139395 / C139336;
    const double C139532 = C139395 * C139394;
    const double C139529 = C139395 / C139319;
    const double C823 = (2 * C139332 * C139395) / C139319;
    const double C139534 = C139398 * C139394;
    const double C5799 = C139398 / C139525;
    const double C7039 = C139398 / C139321;
    const double C139548 = C139531 / C139319;
    const double C822 = (C139346 * std::pow(C139393, 2)) / C139331 + C139526;
    const double C139537 = C139423 / C139336;
    const double C139536 = C139423 * C139422;
    const double C139530 = C139423 / C139319;
    const double C1758 = (2 * C139332 * C139423) / C139319;
    const double C139538 = C139426 * C139422;
    const double C10617 = C139426 / C139525;
    const double C12024 = C139426 / C139321;
    const double C139551 = C139535 / C139319;
    const double C1757 = (C139362 * std::pow(C139421, 2)) / C139331 + C139528;
    const double C137590 = C137582 * C137589;
    const double C13356 =
        (-C137589 / C137581) / (2 * C137581) - (0 * be) / C137581;
    const double C63570 = -C137589 / C137581;
    const double C46923 = C46920 * C113;
    const double C48084 = C46920 * C937;
    const double C48080 = C46920 * C827;
    const double C48068 = C46920 * C938;
    const double C48064 = C46920 * C828;
    const double C48454 = C46920 * C1051;
    const double C48448 = C46920 * C1055;
    const double C48446 = C46920 * C1052;
    const double C94663 = C46920 * C1870;
    const double C94659 = C46920 * C1760;
    const double C94649 = C46920 * C1874;
    const double C94647 = C46920 * C1871;
    const double C94643 = C46920 * C1761;
    const double C95013 = C46920 * C1984;
    const double C95005 = C46920 * C1985;
    const double C47681 = C46913 * C845;
    const double C48077 = C46913 * C838;
    const double C48073 = C46913 * C1168;
    const double C48067 = C46913 * C1167;
    const double C48063 = C46913 * C837;
    const double C48453 = C46913 * C1460;
    const double C48451 = C46913 * C1462;
    const double C48445 = C46913 * C1461;
    const double C52103 = C46913 * C4163;
    const double C52099 = C46913 * C4511;
    const double C52533 = C46913 * C4841;
    const double C53977 = C46913 * C5977;
    const double C53973 = C46913 * C5806;
    const double C54187 = C46913 * C6139;
    const double C54737 = C46913 * C6571;
    const double C54733 = C46913 * C6328;
    const double C55043 = C46913 * C6805;
    const double C57709 = C46913 * C8838;
    const double C57705 = C46913 * C8595;
    const double C58015 = C46913 * C9072;
    const double C94266 = C46913 * C1778;
    const double C94662 = C46913 * C2099;
    const double C94656 = C46913 * C1771;
    const double C94652 = C46913 * C2101;
    const double C94646 = C46913 * C2100;
    const double C94642 = C46913 * C1770;
    const double C95010 = C46913 * C2395;
    const double C95004 = C46913 * C2394;
    const double C105716 = C46913 * C10794;
    const double C105712 = C46913 * C10623;
    const double C105924 = C46913 * C10956;
    const double C137684 = C137615 * C137683;
    const double C13692 = C13675 * C109;
    const double C13689 = C13675 * C108;
    const double C13680 = C13675 * C107;
    const double C14665 = C13675 * C828;
    const double C15697 = C13675 * C1761;
    const double C16680 = C13675 * C827;
    const double C17608 = C13675 * C1760;
    const double C111091 = C13675 * C1763;
    const double C111085 = C13675 * C1762;
    const double C113969 = C13675 * C4159;
    const double C119567 = C13675 * C8592;
    const double C122109 = C13675 * C10620;
    const double C13686 = C13676 * C827;
    const double C13683 = C13676 * C828;
    const double C111087 = C13676 * C4159;
    const double C113971 = C13676 * C8592;
    const double C47022 = C47003 * C109;
    const double C47020 = C47003 * C108;
    const double C47010 = C47003 * C113;
    const double C47006 = C47003 * C107;
    const double C47257 = C47003 * C190;
    const double C47254 = C47003 * C189;
    const double C47245 = C47003 * C188;
    const double C47242 = C47003 * C187;
    const double C47500 = C47003 * C277;
    const double C47498 = C47003 * C276;
    const double C47492 = C47003 * C275;
    const double C47832 = C47003 * C828;
    const double C48224 = C47003 * C937;
    const double C48215 = C47003 * C939;
    const double C48212 = C47003 * C938;
    const double C48570 = C47003 * C1055;
    const double C48568 = C47003 * C1052;
    const double C48898 = C47003 * C1761;
    const double C49226 = C47003 * C1870;
    const double C49221 = C47003 * C1874;
    const double C49218 = C47003 * C1873;
    const double C49217 = C47003 * C1872;
    const double C49214 = C47003 * C1871;
    const double C49546 = C47003 * C1985;
    const double C49866 = C47003 * C827;
    const double C50504 = C47003 * C1051;
    const double C50810 = C47003 * C1760;
    const double C51426 = C47003 * C1984;
    const double C60317 = C47003 * C10682;
    const double C77821 = C47003 * C1763;
    const double C77817 = C47003 * C1771;
    const double C77811 = C47003 * C1770;
    const double C77807 = C47003 * C1762;
    const double C78500 = C47003 * C1986;
    const double C80682 = C47003 * C4163;
    const double C80678 = C47003 * C4159;
    const double C81514 = C47003 * C4393;
    const double C83381 = C47003 * C6328;
    const double C86394 = C47003 * C8595;
    const double C86390 = C47003 * C8592;
    const double C87028 = C47003 * C8758;
    const double C89056 = C47003 * C10623;
    const double C89052 = C47003 * C10620;
    const double C47018 = C47004 * C827;
    const double C47008 = C47004 * C828;
    const double C47251 = C47004 * C937;
    const double C47248 = C47004 * C938;
    const double C47243 = C47004 * C939;
    const double C47496 = C47004 * C1051;
    const double C47494 = C47004 * C1052;
    const double C48566 = C47004 * C1055;
    const double C77815 = C47004 * C6328;
    const double C77813 = C47004 * C4163;
    const double C77809 = C47004 * C4159;
    const double C78502 = C47004 * C4393;
    const double C80684 = C47004 * C8595;
    const double C80680 = C47004 * C8592;
    const double C81516 = C47004 * C8758;
    const double C47256 = C47239 * C109;
    const double C47253 = C47239 * C108;
    const double C47244 = C47239 * C107;
    const double C48211 = C47239 * C828;
    const double C49213 = C47239 * C1761;
    const double C50188 = C47239 * C827;
    const double C51116 = C47239 * C1760;
    const double C78177 = C47239 * C1763;
    const double C78171 = C47239 * C1762;
    const double C81100 = C47239 * C4159;
    const double C86712 = C47239 * C8592;
    const double C89276 = C47239 * C10620;
    const double C47250 = C47240 * C827;
    const double C47247 = C47240 * C828;
    const double C78173 = C47240 * C4159;
    const double C81102 = C47240 * C8592;
    const double C217 = C202 + C203;
    const double C216 = C200 + C201;
    const double C652 = C641 + C642;
    const double C32133 = C32110 + C32111;
    const double C32132 = C32108 + C32109;
    const double C32874 = C32861 + C32862;
    const double C438 = C425 + C426;
    const double C32520 = C32508 + C2195;
    const double C63797 = C63634 * C937;
    const double C63794 = C63634 * C938;
    const double C63791 = C63634 * C939;
    const double C13463 = C13351 * C196;
    const double C13459 = C13351 * C190;
    const double C13457 = C13351 * C189;
    const double C13453 = C13351 * C195;
    const double C13447 = C13351 * C194;
    const double C13443 = C13351 * C188;
    const double C13691 = C13351 * C419;
    const double C13682 = C13351 * C418;
    const double C13937 = C13351 * C636;
    const double C13935 = C13351 * C635;
    const double C13929 = C13351 * C634;
    const double C14269 = C13351 * C938;
    const double C15034 = C13351 * C1545;
    const double C15032 = C13351 * C1542;
    const double C15379 = C13351 * C1874;
    const double C15377 = C13351 * C1871;
    const double C15373 = C13351 * C1879;
    const double C16036 = C13351 * C2478;
    const double C16034 = C13351 * C2475;
    const double C16359 = C13351 * C937;
    const double C16997 = C13351 * C1541;
    const double C17303 = C13351 * C1870;
    const double C17919 = C13351 * C2474;
    const double C110766 = C13351 * C1873;
    const double C110762 = C13351 * C1881;
    const double C110756 = C13351 * C1880;
    const double C110752 = C13351 * C1872;
    const double C111086 = C13351 * C2182;
    const double C111406 = C13351 * C2477;
    const double C111400 = C13351 * C2476;
    const double C113552 = C13351 * C4279;
    const double C116246 = C13351 * C6414;
    const double C119250 = C13351 * C8681;
    const double C121900 = C13351 * C10685;
    const double C121896 = C13351 * C10682;
    const double C122320 = C13351 * C11009;
    const double C63633 =
        (((0 - (C137615 * C137675) / C137581) * ae) / C137581 -
         (0 * be) / C137588) /
            (2 * C137581) -
        ((C137615 *
              (((C139465 - (C137615 * 2 * C137636) / C137581) * ae) / C137581 -
               C137675 / C137588) +
          C13351) *
         be) /
            C137581 +
        (0 * ae) / C137581 - C137636 / C137584;
    const double C137714 = C137618 * C137713;
    const double C30872 = C30855 * C109;
    const double C30869 = C30855 * C108;
    const double C30860 = C30855 * C107;
    const double C31841 = C30855 * C828;
    const double C32979 = C30855 * C1761;
    const double C33912 = C30855 * C827;
    const double C34864 = C30855 * C1760;
    const double C77570 = C30855 * C830;
    const double C77564 = C30855 * C829;
    const double C81652 = C30855 * C4159;
    const double C83162 = C30855 * C5803;
    const double C87132 = C30855 * C8592;
    const double C30866 = C30856 * C1760;
    const double C30863 = C30856 * C1761;
    const double C77568 = C30856 * C8592;
    const double C77566 = C30856 * C4159;
    const double C92721 = C92702 * C109;
    const double C92719 = C92702 * C108;
    const double C92709 = C92702 * C113;
    const double C92705 = C92702 * C107;
    const double C92947 = C92702 * C190;
    const double C92945 = C92702 * C189;
    const double C92939 = C92702 * C188;
    const double C93184 = C92702 * C277;
    const double C93181 = C92702 * C276;
    const double C93172 = C92702 * C275;
    const double C93169 = C92702 * C274;
    const double C93509 = C92702 * C828;
    const double C93823 = C92702 * C938;
    const double C94151 = C92702 * C1051;
    const double C94146 = C92702 * C1055;
    const double C94143 = C92702 * C1054;
    const double C94142 = C92702 * C1053;
    const double C94139 = C92702 * C1052;
    const double C94525 = C92702 * C1761;
    const double C94897 = C92702 * C1874;
    const double C94895 = C92702 * C1871;
    const double C95247 = C92702 * C1984;
    const double C95238 = C92702 * C1986;
    const double C95235 = C92702 * C1985;
    const double C95557 = C92702 * C827;
    const double C95863 = C92702 * C937;
    const double C96489 = C92702 * C1760;
    const double C96809 = C92702 * C1870;
    const double C98335 = C92702 * C4393;
    const double C99830 = C92702 * C5921;
    const double C103666 = C92702 * C8758;
    const double C109909 = C92702 * C830;
    const double C109905 = C92702 * C838;
    const double C109899 = C92702 * C837;
    const double C109895 = C92702 * C829;
    const double C110213 = C92702 * C939;
    const double C113695 = C92702 * C4159;
    const double C113691 = C92702 * C4163;
    const double C115615 = C92702 * C5806;
    const double C115611 = C92702 * C5803;
    const double C116355 = C92702 * C6328;
    const double C119359 = C92702 * C8595;
    const double C119355 = C92702 * C8592;
    const double C92717 = C92703 * C1760;
    const double C92707 = C92703 * C1761;
    const double C92943 = C92703 * C1870;
    const double C92941 = C92703 * C1871;
    const double C93178 = C92703 * C1984;
    const double C93175 = C92703 * C1985;
    const double C93170 = C92703 * C1986;
    const double C94144 = C92703 * C8758;
    const double C94141 = C92703 * C4393;
    const double C94893 = C92703 * C1874;
    const double C109907 = C92703 * C8592;
    const double C109903 = C92703 * C8595;
    const double C109901 = C92703 * C4163;
    const double C109897 = C92703 * C4159;
    const double C113689 = C92703 * C6328;
    const double C93183 = C93166 * C109;
    const double C93180 = C93166 * C108;
    const double C93171 = C93166 * C107;
    const double C94138 = C93166 * C828;
    const double C95234 = C93166 * C1761;
    const double C96167 = C93166 * C827;
    const double C97119 = C93166 * C1760;
    const double C110541 = C93166 * C830;
    const double C110535 = C93166 * C829;
    const double C114521 = C93166 * C4159;
    const double C116031 = C93166 * C5803;
    const double C119987 = C93166 * C8592;
    const double C93177 = C93167 * C1760;
    const double C93174 = C93167 * C1761;
    const double C110539 = C93167 * C8592;
    const double C110537 = C93167 * C4159;
    const double C304 = C289 + C290;
    const double C303 = C287 + C288;
    const double C518 = C507 + C508;
    const double C14409 = C14386 + C14387;
    const double C14408 = C14384 + C14385;
    const double C14805 = C14792 + C14793;
    const double C733 = C720 + C721;
    const double C15148 = C15139 + C1658;
    const double C125794 = C125481 * C1984;
    const double C125791 = C125481 * C1985;
    const double C125788 = C125481 * C1986;
    const double C126469 = C125481 * C8758;
    const double C126466 = C125481 * C4393;
    const double C30415 = C30255 * C283;
    const double C30411 = C30255 * C277;
    const double C30409 = C30255 * C276;
    const double C30405 = C30255 * C282;
    const double C30399 = C30255 * C281;
    const double C30395 = C30255 * C275;
    const double C30637 = C30255 * C502;
    const double C30635 = C30255 * C501;
    const double C30629 = C30255 * C500;
    const double C30871 = C30255 * C714;
    const double C30862 = C30255 * C713;
    const double C31207 = C30255 * C1055;
    const double C31205 = C30255 * C1052;
    const double C31201 = C30255 * C1060;
    const double C31526 = C30255 * C1361;
    const double C31524 = C30255 * C1358;
    const double C32247 = C30255 * C1985;
    const double C32634 = C30255 * C2294;
    const double C32632 = C30255 * C2291;
    const double C33303 = C30255 * C1051;
    const double C33609 = C30255 * C1357;
    const double C34235 = C30255 * C1984;
    const double C34555 = C30255 * C2290;
    const double C76939 = C30255 * C1054;
    const double C76935 = C30255 * C1062;
    const double C76929 = C30255 * C1061;
    const double C76925 = C30255 * C1053;
    const double C77249 = C30255 * C1360;
    const double C77243 = C30255 * C1359;
    const double C77565 = C30255 * C1645;
    const double C80827 = C30255 * C4393;
    const double C80823 = C30255 * C4397;
    const double C82747 = C30255 * C5924;
    const double C82743 = C30255 * C5921;
    const double C82955 = C30255 * C6086;
    const double C83492 = C30255 * C6494;
    const double C86505 = C30255 * C8761;
    const double C86501 = C30255 * C8758;
    const double C125480 =
        (((0 - (C137618 * C137705) / C137581) * ae) / C137581 -
         (0 * be) / C137588) /
            (2 * C137581) -
        ((C137618 *
              (((C139480 - (C137618 * 2 * C137648) / C137581) * ae) / C137581 -
               C137705 / C137588) +
          C30255) *
         be) /
            C137581 +
        (0 * ae) / C137581 - C137648 / C137584;
    const double C137745 = ae * C137744;
    const double C114 = (C137731 * C137729 * C137738 + C137730 * C137744 +
                         C137730 * C137733 * ae) /
                        C137581;
    const double C836 = (C137845 * C137744) / C137581;
    const double C1769 = (C137888 * C137744) / C137581;
    const double C14410 = C14392 + C14393;
    const double C32134 = C32116 + C32117;
    const double C18464 = C18452 + C18453;
    const double C35151 = C35138 + C35139;
    const double C76943 = C76930 + C76931;
    const double C110770 = C110757 + C110758;
    const double C138104 = C138103 + C137756;
    const double C138238 = C138237 + C137756;
    const double C4403 = C139480 * C4394;
    const double C4949 = C186 * C4394;
    const double C5062 = C273 * C4394;
    const double C16031 = C13440 * C4394;
    const double C19182 = C13439 * C4394;
    const double C31203 = C139557 * C4394;
    const double C31839 = C30392 * C4394;
    const double C35287 = C30255 * C4394;
    const double C36111 = C30391 * C4394;
    const double C49544 = C47004 * C4394;
    const double C52530 = C46920 * C4394;
    const double C52672 = C47003 * C4394;
    const double C93508 = C139557 * C4394;
    const double C94136 = C92703 * C4394;
    const double C97530 = C92566 * C4394;
    const double C98338 = C92702 * C4394;
    const double C126472 = C125481 * C4394;
    const double C962 = C186 * C831;
    const double C1076 = C273 * C831;
    const double C1264 = C416 * C831;
    const double C1660 = C711 * C831;
    const double C14270 = C13439 * C831;
    const double C14266 = C13440 * C831;
    const double C14672 = C13675 * C831;
    const double C14662 = C13676 * C831;
    const double C31206 = C30391 * C831;
    const double C31848 = C30855 * C831;
    const double C47834 = C47003 * C831;
    const double C47830 = C47004 * C831;
    const double C48074 = C46920 * C831;
    const double C48218 = C47239 * C831;
    const double C48208 = C47240 * C831;
    const double C93511 = C92702 * C831;
    const double C94145 = C93166 * C831;
    const double C1895 = C186 * C1764;
    const double C2009 = C273 * C1764;
    const double C2197 = C416 * C1764;
    const double C2593 = C711 * C1764;
    const double C15378 = C13439 * C1764;
    const double C15704 = C13675 * C1764;
    const double C32248 = C30391 * C1764;
    const double C32244 = C30392 * C1764;
    const double C32986 = C30855 * C1764;
    const double C32976 = C30856 * C1764;
    const double C48900 = C47003 * C1764;
    const double C49220 = C47239 * C1764;
    const double C94527 = C92702 * C1764;
    const double C94523 = C92703 * C1764;
    const double C94653 = C46920 * C1764;
    const double C95241 = C93166 * C1764;
    const double C95231 = C93167 * C1764;
    const double C4284 = C186 * C4160;
    const double C4402 = C273 * C4160;
    const double C4619 = C416 * C4160;
    const double C5061 = C711 * C4160;
    const double C15374 = C13440 * C4160;
    const double C15694 = C13676 * C4160;
    const double C18308 = C13439 * C4160;
    const double C18756 = C13675 * C4160;
    const double C31202 = C30392 * C4160;
    const double C31838 = C30856 * C4160;
    const double C35286 = C30391 * C4160;
    const double C36110 = C30855 * C4160;
    const double C48896 = C47004 * C4160;
    const double C49210 = C47240 * C4160;
    const double C51816 = C47003 * C4160;
    const double C52100 = C46920 * C4160;
    const double C52252 = C47239 * C4160;
    const double C93507 = C92703 * C4160;
    const double C94135 = C93167 * C4160;
    const double C97529 = C92702 * C4160;
    const double C98337 = C93166 * C4160;
    const double C14272 = C13440 * C5802;
    const double C14396 = C273 * C5802;
    const double C14675 = C13676 * C5802;
    const double C15146 = C711 * C5802;
    const double C47836 = C47004 * C5802;
    const double C48221 = C47240 * C5802;
    const double C53974 = C46920 * C5802;
    const double C18310 = C13440 * C8591;
    const double C18456 = C273 * C8591;
    const double C18759 = C13676 * C8591;
    const double C19321 = C711 * C8591;
    const double C31094 = C186 * C8591;
    const double C31208 = C30392 * C8591;
    const double C31418 = C416 * C8591;
    const double C31851 = C30856 * C8591;
    const double C51818 = C47004 * C8591;
    const double C52255 = C47240 * C8591;
    const double C57706 = C46920 * C8591;
    const double C93513 = C92703 * C8591;
    const double C94148 = C93167 * C8591;
    const double C32120 = C186 * C10619;
    const double C32250 = C30392 * C10619;
    const double C32514 = C416 * C10619;
    const double C32989 = C30856 * C10619;
    const double C94529 = C92703 * C10619;
    const double C95244 = C93167 * C10619;
    const double C105713 = C46920 * C10619;
    const double C137762 = ae * C137760;
    const double C137761 = C137730 * C137760;
    const double C137771 = 2 * C137760;
    const double C138046 = C137845 * C137760;
    const double C138148 = C137888 * C137760;
    const double C839 = (C137744 + C137760 * C137953) / C137581;
    const double C1772 = (C137744 + C137760 * C138027) / C137581;
    const double C138377 = ae * C138374;
    const double C138376 = C137845 * C138374;
    const double C138460 = C137888 * C138374;
    const double C138576 = 2 * C138374;
    const double C138528 = ae * C138525;
    const double C138527 = C137888 * C138525;
    const double C138787 = 2 * C138525;
    const double C21533 = C139480 * C6728;
    const double C81241 = C139557 * C6728;
    const double C83816 = C30255 * C6728;
    const double C114110 = C139557 * C6728;
    const double C116674 = C92566 * C6728;
    const double C844 =
        (2 * ae * C137845 * C137742 + C137730 * C137845 * C137759) / C137584;
    const double C846 = ((C137733 + C137734 * C137735 * C137739) * C137737 +
                         C137759 * C137953) /
                        C137584;
    const double C1777 =
        (2 * ae * C137888 * C137742 + C137730 * C137888 * C137759) / C137584;
    const double C1779 = ((C137733 + C137734 * C137735 * C137739) * C137737 +
                          C137759 * C138027) /
                         C137584;
    const double C4167 = (C137888 * C137845 * C137759) / C137584;
    const double C420 =
        (2 * C137730 * C137958 +
         C137730 * (C137958 + (C137768 + C137953 * C137769 * C137770) *
                                  C137737 * C137734)) /
        C137584;
    const double C1248 =
        (2 * ae * C137730 * C137851 + C137845 * C137730 * C137958) / C137584;
    const double C2181 = (C137888 * C137730 * C137958) / C137584;
    const double C2183 = ((C137733 + C137953 * C137735 * C137739) * C137737 +
                          C137958 * C138027) /
                         C137584;
    const double C4613 =
        (2 * ae * C137888 * C137851 + C137845 * C137888 * C137958) / C137584;
    const double C715 =
        (2 * C137730 * C138032 +
         C137730 * (C138032 + (C137768 + C138027 * C137769 * C137770) *
                                  C137737 * C137734)) /
        C137584;
    const double C1644 = (C137845 * C137730 * C138032) / C137584;
    const double C1646 = ((C137733 + C138027 * C137735 * C137739) * C137737 +
                          C138032 * C137953) /
                         C137584;
    const double C2577 =
        (2 * ae * C137730 * C137894 + C137888 * C137730 * C138032) / C137584;
    const double C5055 =
        (2 * ae * C137845 * C137894 + C137888 * C137845 * C138032) / C137584;
    const double C138437 = C138436 + C138375;
    const double C21206 = C273 * C6325;
    const double C21841 = C711 * C6325;
    const double C37802 = C186 * C6325;
    const double C38106 = C416 * C6325;
    const double C77819 = C47004 * C6325;
    const double C78175 = C47240 * C6325;
    const double C80824 = C30392 * C6325;
    const double C81650 = C30856 * C6325;
    const double C83377 = C47003 * C6325;
    const double C83487 = C30391 * C6325;
    const double C83705 = C47239 * C6325;
    const double C84128 = C30855 * C6325;
    const double C110763 = C13440 * C6325;
    const double C111089 = C13676 * C6325;
    const double C113693 = C92703 * C6325;
    const double C114519 = C93167 * C6325;
    const double C116241 = C13439 * C6325;
    const double C116351 = C92702 * C6325;
    const double C116563 = C13675 * C6325;
    const double C116983 = C93166 * C6325;
    const double C83489 = C30392 * C26692;
    const double C84130 = C30856 * C26692;
    const double C89054 = C47004 * C26692;
    const double C89278 = C47240 * C26692;
    const double C116353 = C92703 * C26692;
    const double C116985 = C93167 * C26692;
    const double C121897 = C13440 * C26692;
    const double C122111 = C13676 * C26692;
    const double C130743 = C186 * C26692;
    const double C130977 = C416 * C26692;
    const double C138101 = ae * C138100;
    const double C940 = (C137731 * C137729 * C137848 + C137845 * C138100 +
                         C137845 * C137733 * ae) /
                        C137581;
    const double C4275 = (C137888 * C138100) / C137581;
    const double C6411 = (C138100 + C138374 * C138027) / C137581;
    const double C218 = C204 + C205;
    const double C439 = C428 + C429;
    const double C519 = C510 + C511;
    const double C221 = C210 + C211;
    const double C440 = C431 + C432;
    const double C520 = C512 + C513;
    const double C971 = C956 + C957;
    const double C1272 = C1256 + C1257;
    const double C13472 = C13454 + C13455;
    const double C973 = C960 + C961;
    const double C1273 = C1259 + C1260;
    const double C13467 = C13444 + C13445;
    const double C1904 = C1889 + C1890;
    const double C2205 = C2189 + C2190;
    const double C1906 = C1893 + C1894;
    const double C2206 = C2192 + C2193;
    const double C2312 = C2302 + C2303;
    const double C30641 = C30630 + C30631;
    const double C32521 = C32512 + C2196;
    const double C32135 = C32118 + C32119;
    const double C43625 = C43620 + C10851;
    const double C43398 = C43392 + C43393;
    const double C138235 = ae * C138234;
    const double C1987 = (C137731 * C137729 * C137891 + C137888 * C138234 +
                          C137888 * C137733 * ae) /
                         C137581;
    const double C1379 = C1369 + C1370;
    const double C305 = C291 + C292;
    const double C653 = C644 + C645;
    const double C734 = C723 + C724;
    const double C308 = C297 + C298;
    const double C654 = C646 + C647;
    const double C735 = C726 + C727;
    const double C1085 = C1070 + C1071;
    const double C1668 = C1652 + C1653;
    const double C1087 = C1074 + C1075;
    const double C1563 = C1553 + C1554;
    const double C1669 = C1655 + C1656;
    const double C13941 = C13930 + C13931;
    const double C15149 = C15143 + C1659;
    const double C14411 = C14394 + C14395;
    const double C2018 = C2003 + C2004;
    const double C2601 = C2585 + C2586;
    const double C30424 = C30406 + C30407;
    const double C2020 = C2007 + C2008;
    const double C2496 = C2486 + C2487;
    const double C2602 = C2588 + C2589;
    const double C30419 = C30396 + C30397;
    const double C19323 = C19318 + C5060;
    const double C18465 = C18454 + C18455;
    const double C76941 = C76926 + C76927;
    const double C20883 = C20879 + C6249;
    const double C20442 = C20436 + C20437;
    const double C24859 = C24855 + C9230;
    const double C24226 = C24220 + C24221;
    const double C76946 = C76936 + C76937;
    const double C137789 = ae * C137786;
    const double C137788 = C137730 * C137786;
    const double C137805 = 2 * C137786;
    const double C138053 = C137786 * C137953;
    const double C138059 = C137845 * C137786;
    const double C138155 = C137786 * C138027;
    const double C138161 = C137888 * C137786;
    const double C138813 = C137845 * C138811;
    const double C138824 = C137845 * C138823;
    const double C139017 = C137888 * C139015;
    const double C139031 = C137888 * C139030;
    const double C138260 = 2 * C138255;
    const double C138807 = C137862 + C138255;
    const double C138821 = C137939 + C138255;
    const double C138967 = C138255 + C138965;
    const double C138979 = C138255 + C138978;
    const double C26840 =
        (2 * (ae * C138408 + C137888 * C138689) +
         ae * (C138408 + C138250 * C138027) +
         C137888 * (C138689 + ae * C137888 * C138250 +
                    C137888 * (C138255 + C137888 * C137845 * C137917))) /
        C137584;
    const double C27116 =
        (2 * (ae * C138408 + C137888 * C138699) +
         ae * (C138408 + C138250 * C138027) +
         C137888 * (C138699 + ae * C137888 * C138250 +
                    C137888 * (C138255 + C137888 * C137845 * C138003))) /
        C137584;
    const double C69341 = C139301 * C21314;
    const double C83493 = C30392 * C26694;
    const double C83598 = C139301 * C26694;
    const double C89058 = C47004 * C26694;
    const double C116357 = C92703 * C26694;
    const double C121901 = C13440 * C26694;
    const double C130745 = C186 * C26694;
    const double C138281 = 2 * C138276;
    const double C138919 = C138276 + C138918;
    const double C139011 = C137905 + C138276;
    const double C139028 = C137997 + C138276;
    const double C21204 =
        (C137898 + C137905 * C137953 + ae * C137888 * C138541 +
         C137888 * (ae * C138541 + C137888 * (C137905 + C137917 * C137953))) /
        C137584;
    const double C21633 =
        (C137994 + C137997 * C137953 + ae * C137888 * C138541 +
         C137888 * (ae * C138541 + C137888 * (C137997 + C138003 * C137953))) /
        C137584;
    const double C24218 =
        (ae * (2 * C138408 + C137845 * C138541) +
         C137888 * (2 * C137845 * C137905 +
                    C137845 * (C137905 + C137917 * C137953))) /
        C137584;
    const double C24328 =
        (2 * (ae * C137888 * C137755 + C137845 * C138657) +
         ae * C137888 * C138541 +
         C137845 * (C138657 + ae * C137888 * C138250 +
                    C137845 * (C138276 + C137845 * C137888 * C137945))) /
        C137584;
    const double C24647 =
        (ae * (2 * C138408 + C137845 * C138541) +
         C137888 * (2 * C137845 * C137997 +
                    C137845 * (C137997 + C138003 * C137953))) /
        C137584;
    const double C73500 =
        (2 * (ae * C138541 + C137888 * C138819) +
         ae * (C138541 + C138812 * C138027) +
         C137888 *
             (C138819 + ae * C137888 * C138812 +
              C137888 * (ae * C138812 +
                         C137888 * (C137917 + std::pow(C137736, 7) * bs[7] *
                                                  C137892 * C137953)))) /
        C137584;
    const double C73707 =
        (2 * (ae * C138541 + C137888 * C138874) +
         ae * (C138541 + C138812 * C138027) +
         C137888 *
             (C138874 + ae * C137888 * C138812 +
              C137888 * (ae * C138812 +
                         C137888 * (C138003 + std::pow(C137736, 7) * bs[7] *
                                                  C137991 * C137953)))) /
        C137584;
    const double C20280 = (3 * (C137742 + C137755 * C137953) +
                           C137845 * (2 * C138408 + C137845 * C138541)) /
                          C137581;
    const double C20986 =
        (C137742 + C137755 * C137953 + C138541 * C138027) / C137581;
    const double C24000 =
        (C137888 * (2 * C138408 + C137845 * C138541)) / C137581;
    const double C73392 =
        (2 * C137888 * C138541 + C137888 * (C138541 + C138812 * C138027)) /
        C137581;
    const double C69332 =
        (2 * (ae * C138738 + C137845 * C138889) +
         ae * (C138541 + C138812 * C138027) +
         C137845 *
             (C138889 + ae * (C138250 + C137845 * C137815 * C138027) +
              C137845 * (ae * (C137779 + C137815 * C138027) +
                         C137845 * (C137945 + std::pow(C137736, 7) * bs[7] *
                                                  C137933 * C138027)))) /
        C137584;
    const double C89197 =
        (ae * (3 * C138738 +
               C137888 *
                   (2 * C138271 + C137888 * (C137779 + C137815 * C138027))) +
         C137845 *
             (3 * C138889 +
              C137888 * (2 * C138917 +
                         C137888 * (C137945 + std::pow(C137736, 7) * bs[7] *
                                                  C137933 * C138027)))) /
        C137584;
    const double C43306 = (3 * (C137742 + C137755 * C138027) +
                           C137888 * (2 * C138734 + C137888 * C138738)) /
                          C137581;
    const double C137787 = C137730 * C137785;
    const double C138057 = C137845 * C137785;
    const double C138159 = C137888 * C137785;
    const double C847 = (2 * ae * (C137742 + C137755 * C137953) +
                         C137730 * (C137759 + C137785 * C137953)) /
                        C137584;
    const double C1780 = (2 * ae * (C137742 + C137755 * C138027) +
                          C137730 * (C137759 + C137785 * C138027)) /
                         C137584;
    const double C5809 =
        (2 * C137845 * C137759 + C137845 * (C137759 + C137785 * C137953)) /
        C137584;
    const double C8598 = (C137888 * (C137759 + C137785 * C137953)) / C137584;
    const double C10626 =
        (2 * C137888 * C137759 + C137888 * (C137759 + C137785 * C138027)) /
        C137584;
    const double C137821 = C137730 * C137817;
    const double C137820 = C137817 * ae;
    const double C138352 = C137845 * C137817;
    const double C138504 = C137888 * C137817;
    const double C5801 =
        2 * C137845 * C137781 + C137845 * (C137781 + C137817 * C137953);
    const double C8590 = C137888 * (C137781 + C137817 * C137953);
    const double C10618 =
        2 * C137888 * C137781 + C137888 * (C137781 + C137817 * C138027);
    const double C138562 = C138558 + C137816;
    const double C138771 = C138767 + C137816;
    const double C138560 = C137776 + C138556;
    const double C138559 = C138555 * ae;
    const double C138705 = C137888 * C138555;
    const double C26691 =
        2 * C137888 * C138363 + C137888 * (C138363 + C138555 * C138027);
    const double C138773 = C137776 + C138769;
    const double C138772 = C138768 * ae;
    const double C137828 = ae * C137823;
    const double C137826 = C137730 * C137823;
    const double C138065 = C137823 * C137953;
    const double C138167 = C137823 * C138027;
    const double C138254 = C137845 * C137823;
    const double C138275 = C137888 * C137823;
    const double C138845 = ae * C138838;
    const double C138842 = C137845 * C138838;
    const double C138893 = C138838 * C138027;
    const double C138925 = C137888 * C138838;
    const double C139058 = ae * C139052;
    const double C139056 = C137888 * C139052;
    const double C137825 = C137730 * C137822;
    const double C138063 = C137822 * C137953;
    const double C138165 = C137822 * C138027;
    const double C138251 = C137845 * C137822;
    const double C138272 = C137888 * C137822;
    const double C137969 = C137968 * C137734;
    const double C138552 = C137730 * C137968;
    const double C138829 = C137845 * C137968;
    const double C138891 = C137968 * C138027;
    const double C138922 = C137888 * C137968;
    const double C138043 = C138042 * C137734;
    const double C138616 = C137730 * C138042;
    const double C138882 = C138042 * C137953;
    const double C138985 = C137845 * C138042;
    const double C139042 = C137888 * C138042;
    const double C138844 = C137845 * C138840;
    const double C138843 = C138840 * ae;
    const double C138951 = C137888 * C138840;
    const double C73391 =
        2 * C137888 * C138583 + C137888 * (C138583 + C138840 * C138027);
    const double C138995 = C138991 + C138839;
    const double C138993 = C138578 + C138989;
    const double C138992 = C138988 * ae;
    const double C139049 = C137888 * C138974;
    const double C139047 = C138974 * ae;
    const double C138107 = C137845 * C137867;
    const double C2295 = (C137978 + C137981 * C137734 + ae * C137888 * C137867 +
                          C137888 * (ae * C137867 + C137888 * C137986)) /
                         C137584;
    const double C2296 =
        (ae * (2 * C137858 + C137730 * C137867) +
         C137888 * (2 * C137730 * C137981 + C137730 * C137986)) /
        C137584;
    const double C2479 = (C138015 + C138018 * C137734 + ae * C137888 * C137867 +
                          C137888 * (ae * C137867 + C137888 * C138023)) /
                         C137584;
    const double C2480 =
        (ae * (2 * C137858 + C137730 * C137867) +
         C137888 * (2 * C137730 * C138018 + C137730 * C138023)) /
        C137584;
    const double C10901 =
        (2 * (ae * C137867 + C137888 * C137986) +
         ae * (C137867 + C137881 * C138027) +
         C137888 *
             (C137986 + ae * C137888 * C137881 +
              C137888 * (ae * C137881 +
                         C137888 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C11007 =
        (2 * (ae * C137867 + C137888 * C138023) +
         ae * (C137867 + C137881 * C138027) +
         C137888 *
             (C138023 + ae * C137888 * C137881 +
              C137888 * (ae * C137881 +
                         C137888 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C191 = (3 * (C137851 + C137856 * C137734) +
                         C137730 * (2 * C137858 + C137730 * C137867)) /
                        C137581;
    const double C943 = (C137845 * (2 * C137858 + C137730 * C137867) +
                         (2 * C137753 + C137730 * C137781) * ae) /
                        C137581;
    const double C1875 =
        (C137851 + C137856 * C137734 + C137867 * C138027) / C137581;
    const double C1876 =
        (C137888 * (2 * C137858 + C137730 * C137867)) / C137581;
    const double C10680 =
        (2 * C137888 * C137867 + C137888 * (C137867 + C137881 * C138027)) /
        C137581;
    const double C137882 = C137730 * C137880;
    const double C138535 = C137845 * C137880;
    const double C137948 = C137730 * C137947;
    const double C138545 = C137845 * C137947;
    const double C138655 = C137888 * C137947;
    const double C138905 = C137888 * C138903;
    const double C138932 = C137845 * C138903;
    const double C139037 = C137888 * C139036;
    const double C137877 = C137862 + C137873;
    const double C137943 = C137939 + C137873;
    const double C138551 = 2 * C137873;
    const double C138672 = C137873 + C138671;
    const double C138759 = C137873 + C138758;
    const double C6727 =
        (ae * (C137901 + C137888 * (C137888 * C137912 + C137780) +
               C137888 * C137776 * ae) +
         C137845 * (C138383 + ae * C137888 * C137869 +
                    C137888 * (C137873 + C137888 * C137730 * C137984))) /
        C137584;
    const double C10902 =
        (2 * (ae * C137858 + C137888 * C138383) +
         ae * (C137858 + C137869 * C138027) +
         C137888 * (C138383 + ae * C137888 * C137869 +
                    C137888 * (C137873 + C137888 * C137730 * C137984))) /
        C137584;
    const double C11008 =
        (2 * (ae * C137858 + C137888 * C138390) +
         ae * (C137858 + C137869 * C138027) +
         C137888 * (C138390 + ae * C137888 * C137869 +
                    C137888 * (C137873 + C137888 * C137730 * C138021))) /
        C137584;
    const double C138364 = C138362 + C137780;
    const double C10850 = C186 * C10681;
    const double C26979 = C13439 * C10681;
    const double C32121 = C139465 * C10681;
    const double C32635 = C30392 * C10681;
    const double C60315 = C47003 * C10681;
    const double C94899 = C92703 * C10681;
    const double C105717 = C46920 * C10681;
    const double C138586 = ae * C138581;
    const double C138584 = C137845 * C138581;
    const double C138631 = C138581 * C138027;
    const double C138667 = C137888 * C138581;
    const double C138831 = 2 * C138581;
    const double C43388 = (3 * (C137851 + C137856 * C138027) +
                           C137888 * (2 * C138748 + C137888 * C138750)) /
                          C137581;
    const double C138904 = C137981 + C138902;
    const double C138921 = 2 * C138902;
    const double C139034 = C138018 + C138902;
    const double C197 =
        (3 * (C137855 + ae * C137858 + C137730 * C137866) +
         ae * (2 * C137858 + C137730 * C137867) +
         C137730 *
             (2 * C137866 + ae * C137867 +
              C137730 * (C137862 + ae * C137730 * C137863 +
                         C137730 * (ae * C137863 +
                                    C137730 * C137803 * C137802 * C137849)))) /
        C137584;
    const double C1878 =
        (C137888 * (C137855 + ae * C137858 + C137730 * C137866)) / C137584;
    const double C1882 =
        (ae * C137851 + C137730 * C137855 + C137866 * C138027) / C137584;
    const double C10684 =
        (2 * C137888 * C137866 + C137888 * (C137866 + C137880 * C138027)) /
        C137584;
    const double C43389 =
        (3 * (C137866 + C137880 * C138027) +
         C137888 * (2 * C137888 * C137880 +
                    C137888 * (C137880 +
                               (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849) *
                                   C138027))) /
        C137584;
    const double C20364 =
        (3 * (C137855 + ae * C138408 + C137845 * C138540) +
         ae * (2 * C138408 + C137845 * C138541) +
         C137845 * (2 * C138540 + ae * C138541 +
                    C137845 * (C137862 + C138255 +
                               C137845 * (C137800 + C137845 * C137874)))) /
        C137584;
    const double C21102 =
        (C137855 + ae * C138408 + C137845 * C138540 +
         (C137862 + C138255 + C137845 * (C137800 + C137845 * C137874)) *
             C138027) /
        C137584;
    const double C24116 =
        (C137888 * (2 * C138540 + ae * C138541 +
                    C137845 * (C137862 + C138255 +
                               C137845 * (C137800 + C137845 * C137874)))) /
        C137584;
    const double C26770 =
        (2 * C137888 * C138540 +
         C137888 * (C138540 + (C137800 + C137845 * C137874) * C138027)) /
        C137584;
    const double C89050 =
        (3 * (C138540 + C138811 * C138027) +
         C137888 * (2 * C137888 * C138811 +
                    C137888 * (C138811 +
                               (ae * C137815 + C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C137849) *
                                   C138027))) /
        C137584;
    const double C43399 = C43394 + C43395;
    const double C138241 = C137888 * C137910;
    const double C1362 = (C137978 + C137981 * C137734 + ae * C137845 * C137910 +
                          C137845 * (ae * C137910 + C137845 * C137986)) /
                         C137584;
    const double C1363 =
        (ae * (2 * C137901 + C137730 * C137910) +
         C137845 * (2 * C137730 * C137981 + C137730 * C137986)) /
        C137584;
    const double C1546 = (C138015 + C138018 * C137734 + ae * C137845 * C137910 +
                          C137845 * (ae * C137910 + C137845 * C138023)) /
                         C137584;
    const double C1547 =
        (ae * (2 * C137901 + C137730 * C137910) +
         C137845 * (2 * C137730 * C138018 + C137730 * C138023)) /
        C137584;
    const double C6084 =
        (2 * (ae * C137910 + C137845 * C137986) +
         ae * (C137910 + C137924 * C137953) +
         C137845 *
             (C137986 + ae * C137845 * C137924 +
              C137845 * (ae * C137924 +
                         C137845 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C6190 =
        (2 * (ae * C137910 + C137845 * C138023) +
         ae * (C137910 + C137924 * C137953) +
         C137845 *
             (C138023 + ae * C137845 * C137924 +
              C137845 * (ae * C137924 +
                         C137845 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C278 = (3 * (C137894 + C137899 * C137734) +
                         C137730 * (2 * C137901 + C137730 * C137910)) /
                        C137581;
    const double C1056 =
        (C137894 + C137899 * C137734 + C137910 * C137953) / C137581;
    const double C1057 =
        (C137845 * (2 * C137901 + C137730 * C137910)) / C137581;
    const double C1990 = (C137888 * (2 * C137901 + C137730 * C137910) +
                          (2 * C137753 + C137730 * C137781) * ae) /
                         C137581;
    const double C4395 =
        (C137888 * C137845 * C137910 + C137845 * C137781 * ae) / C137581;
    const double C5919 =
        (2 * C137845 * C137910 + C137845 * (C137910 + C137924 * C137953)) /
        C137581;
    const double C8756 = (C137888 * (C137910 + C137924 * C137953) +
                          (C137781 + C137817 * C137953) * ae) /
                         C137581;
    const double C137925 = C137730 * C137923;
    const double C138687 = C137845 * C137923;
    const double C138731 = C137888 * C137923;
    const double C138006 = C137730 * C138005;
    const double C138697 = C137845 * C138005;
    const double C138752 = C137888 * C138005;
    const double C138868 = C137845 * C138866;
    const double C138879 = C137845 * C138878;
    const double C138981 = C137888 * C138878;
    const double C137920 = C137905 + C137916;
    const double C138001 = C137997 + C137916;
    const double C138599 = C137916 + C138597;
    const double C138611 = C137916 + C138610;
    const double C138764 = 2 * C137916;
    const double C6085 =
        (2 * (ae * C137901 + C137845 * C138383) +
         ae * (C137901 + C137912 * C137953) +
         C137845 * (C138383 + ae * C137845 * C137912 +
                    C137845 * (C137916 + C137845 * C137730 * C137984))) /
        C137584;
    const double C6191 =
        (2 * (ae * C137901 + C137845 * C138390) +
         ae * (C137901 + C137912 * C137953) +
         C137845 * (C138390 + ae * C137845 * C137912 +
                    C137845 * (C137916 + C137845 * C137730 * C138021))) /
        C137584;
    const double C138431 = C137888 * C138430;
    const double C138515 = C138513 + C137780;
    const double C6248 = C273 * C5920;
    const double C14397 = C139480 * C5920;
    const double C15035 = C13440 * C5920;
    const double C37603 = C30391 * C5920;
    const double C48572 = C47004 * C5920;
    const double C54188 = C46920 * C5920;
    const double C99828 = C92702 * C5920;
    const double C9229 = C273 * C8757;
    const double C18457 = C139480 * C8757;
    const double C19184 = C13440 * C8757;
    const double C31209 = C139557 * C8757;
    const double C31736 = C186 * C8757;
    const double C31852 = C30392 * C8757;
    const double C41471 = C30391 * C8757;
    const double C52674 = C47004 * C8757;
    const double C58016 = C46920 * C8757;
    const double C93514 = C139557 * C8757;
    const double C94149 = C92703 * C8757;
    const double C103664 = C92702 * C8757;
    const double C126475 = C125481 * C8757;
    const double C138645 = C137888 * C138605;
    const double C20432 = (3 * (C137894 + C137899 * C137953) +
                           C137845 * (2 * C138435 + C137845 * C138605)) /
                          C137581;
    const double C24216 = (C137888 * (2 * C138435 + C137845 * C138605) +
                           (2 * C138373 + C137845 * C138583) * ae) /
                          C137581;
    const double C138720 = C138718 + C138582;
    const double C138865 = C137981 + C138861;
    const double C138876 = C138018 + C138861;
    const double C138984 = 2 * C138861;
    const double C138797 = ae * C138792;
    const double C138795 = C137888 * C138792;
    const double C139044 = 2 * C138792;
    const double C284 =
        (3 * (C137898 + ae * C137901 + C137730 * C137909) +
         ae * (2 * C137901 + C137730 * C137910) +
         C137730 *
             (2 * C137909 + ae * C137910 +
              C137730 * (C137905 + ae * C137730 * C137906 +
                         C137730 * (ae * C137906 +
                                    C137730 * C137803 * C137802 * C137892)))) /
        C137584;
    const double C1059 =
        (C137845 * (C137898 + ae * C137901 + C137730 * C137909)) / C137584;
    const double C1063 =
        (ae * C137894 + C137730 * C137898 + C137909 * C137953) / C137584;
    const double C5923 =
        (2 * C137845 * C137909 + C137845 * (C137909 + C137923 * C137953)) /
        C137584;
    const double C20433 =
        (3 * (C137909 + C137923 * C137953) +
         C137845 * (2 * C137845 * C137923 +
                    C137845 * (C137923 +
                               (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892) *
                                   C137953))) /
        C137584;
    const double C43470 =
        (3 * (C137898 + ae * C138734 + C137888 * C138737) +
         ae * (2 * C138734 + C137888 * C138738) +
         C137888 * (2 * C138737 + ae * C138738 +
                    C137888 * (C137905 + C138276 +
                               C137888 * (C137800 + C137888 * C137917)))) /
        C137584;
    const double C20443 = C20438 + C20439;
    const double C24227 = C24222 + C24223;
    const double C76944 = C76932 + C76933;
    const double C364 =
        (3 * (C137936 + ae * C137858 + C137730 * C137941) +
         ae * (2 * C137858 + C137730 * C137867) +
         C137730 * (2 * C137941 + ae * C137867 +
                    C137730 * (C137939 + C137873 +
                               C137730 * (C137870 + C137730 * C137803 *
                                                        C137802 * C137933)))) /
        C137584;
    const double C2098 =
        (C137888 * (C137936 + ae * C137858 + C137730 * C137941)) / C137584;
    const double C2102 =
        (ae * C137851 + C137730 * C137936 + C137941 * C138027) / C137584;
    const double C10793 =
        (2 * C137888 * C137941 + C137888 * (C137941 + C137947 * C138027)) /
        C137584;
    const double C20512 =
        (3 * (C137936 + ae * C138408 + C137845 * C138549) +
         ae * (2 * C138408 + C137845 * C138541) +
         C137845 * (2 * C138549 + ae * C138541 +
                    C137845 * (C137939 + C138255 +
                               C137845 * (C137800 + C137845 * C137945)))) /
        C137584;
    const double C83600 = C139301 * C26908;
    const double C135087 = C139301 * C43538;
    const double C138361 = C137730 * C137963;
    const double C138575 = C137845 * C137963;
    const double C138665 = C137888 * C137963;
    const double C421 =
        (3 * (C137958 + C137963 * C137734) +
         C137730 *
             (2 * C137730 * C137963 +
              C137730 * (C137963 + (C137801 + C137953 * C137802 * C137803) *
                                       C137737 * C137734))) /
        C137584;
    const double C1247 = (2 * ae * (C137851 + C137856 * C137734) +
                          C137845 * (C137958 + C137963 * C137734)) /
                         C137584;
    const double C2180 = (C137888 * (C137958 + C137963 * C137734)) / C137584;
    const double C2184 =
        (C137730 * C137958 + C137730 * C137963 * C138027) / C137584;
    const double C4614 =
        (2 * ae * C137888 * C137858 + C137845 * C137888 * C137730 * C137963) /
        C137584;
    const double C6648 = (2 * ae * (C137851 + C137856 * C138027) +
                          C137845 * (C137958 + C137963 * C138027)) /
                         C137584;
    const double C10847 =
        (2 * C137888 * C137958 + C137888 * (C137958 + C137963 * C138027)) /
        C137584;
    const double C20664 =
        (3 * (C137978 + ae * C138435 + C137845 * C138604) +
         ae * (2 * C138435 + C137845 * C138605) +
         C137845 * (2 * C138604 + ae * C138605 +
                    C137845 * (C137981 + ae * C137845 * C137906 +
                               C137845 * (C137913 + C137845 * C137984)))) /
        C137584;
    const double C27048 =
        (ae * (2 * C138525 +
               C137888 * (C137899 + C137888 * (C137888 * C137906 + C137775) +
                          C137888 * C137768 * ae) +
               (C137747 + C137768 * C138027) * ae) +
         C137845 * (2 * C138675 + ae * (C137856 + C137863 * C138027) +
                    C137888 * (C137981 + ae * C137888 * C137863 +
                               C137888 * (C137870 + C137888 * C137984)))) /
        C137584;
    const double C43695 =
        (3 * (C137978 + ae * C138748 + C137888 * C138675) +
         ae * (2 * C138748 + C137888 * C138750) +
         C137888 * (2 * C138675 + ae * C138750 +
                    C137888 * (C137981 + ae * C137888 * C137863 +
                               C137888 * (C137870 + C137888 * C137984)))) /
        C137584;
    const double C1378 = C1366 + C1367;
    const double C2311 = C2299 + C2300;
    const double C30642 = C30632 + C30633;
    const double C581 =
        (3 * (C137994 + ae * C137901 + C137730 * C137999) +
         ae * (2 * C137901 + C137730 * C137910) +
         C137730 * (2 * C137999 + ae * C137910 +
                    C137730 * (C137997 + C137916 +
                               C137730 * (C137913 + C137730 * C137803 *
                                                        C137802 * C137991)))) /
        C137584;
    const double C1459 =
        (C137845 * (C137994 + ae * C137901 + C137730 * C137999)) / C137584;
    const double C1463 =
        (ae * C137894 + C137730 * C137994 + C137999 * C137953) / C137584;
    const double C6138 =
        (2 * C137845 * C137999 + C137845 * (C137999 + C138005 * C137953)) /
        C137584;
    const double C20734 =
        (3 * (C137999 + C138005 * C137953) +
         C137845 * (2 * C137845 * C138005 +
                    C137845 * (C138005 +
                               (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991) *
                                   C137953))) /
        C137584;
    const double C43763 =
        (3 * (C137994 + ae * C138734 + C137888 * C138756) +
         ae * (2 * C138734 + C137888 * C138738) +
         C137888 * (2 * C138756 + ae * C138738 +
                    C137888 * (C137997 + C138276 +
                               C137888 * (C137800 + C137888 * C138003)))) /
        C137584;
    const double C20809 =
        (3 * (C138015 + ae * C138435 + C137845 * C138614) +
         ae * (2 * C138435 + C137845 * C138605) +
         C137845 * (2 * C138614 + ae * C138605 +
                    C137845 * (C138018 + ae * C137845 * C137906 +
                               C137845 * (C137913 + C137845 * C138021)))) /
        C137584;
    const double C43837 =
        (3 * (C138015 + ae * C138748 + C137888 * C138762) +
         ae * (2 * C138748 + C137888 * C138750) +
         C137888 * (2 * C138762 + ae * C138750 +
                    C137888 * (C138018 + ae * C137888 * C137863 +
                               C137888 * (C137870 + C137888 * C138021)))) /
        C137584;
    const double C1562 = C1550 + C1551;
    const double C13942 = C13932 + C13933;
    const double C2495 = C2483 + C2484;
    const double C138394 = C137730 * C138037;
    const double C138715 = C137845 * C138037;
    const double C138786 = C137888 * C138037;
    const double C716 =
        (3 * (C138032 + C138037 * C137734) +
         C137730 *
             (2 * C137730 * C138037 +
              C137730 * (C138037 + (C137801 + C138027 * C137802 * C137803) *
                                       C137737 * C137734))) /
        C137584;
    const double C1643 = (C137845 * (C138032 + C138037 * C137734)) / C137584;
    const double C1647 =
        (C137730 * C138032 + C137730 * C138037 * C137953) / C137584;
    const double C2576 = (2 * ae * (C137894 + C137899 * C137734) +
                          C137888 * (C138032 + C138037 * C137734)) /
                         C137584;
    const double C5056 =
        (2 * ae * C137845 * C137901 + C137888 * C137845 * C137730 * C138037) /
        C137584;
    const double C6245 =
        (2 * C137845 * C138032 + C137845 * (C138032 + C138037 * C137953)) /
        C137584;
    const double C9226 = (2 * ae * (C137894 + C137899 * C137953) +
                          C137888 * (C138032 + C138037 * C137953)) /
                         C137584;
    const double C20877 =
        (3 * (C138032 + C138037 * C137953) +
         C137845 * (2 * C137845 * C138037 +
                    C137845 * (C138037 + C138042 * C137953))) /
        C137584;
    const double C24853 =
        (2 * ae * (2 * C138435 + C137845 * C138605) +
         C137888 * (2 * C137845 * C138037 +
                    C137845 * (C138037 + C138042 * C137953))) /
        C137584;
    const double C40769 = C40764 + C40765;
    const double C113558 = C113553 + C113554;
    const double C21213 = C21208 + C21209;
    const double C37809 = C37804 + C37805;
    const double C80828 = C80820 + C80821;
    const double C110771 = C110759 + C110760;
    const double C212 = C186 * C110;
    const double C299 = C273 * C110;
    const double C434 = C416 * C110;
    const double C729 = C711 * C110;
    const double C966 = C186 * C832;
    const double C1080 = C273 * C832;
    const double C1267 = C416 * C832;
    const double C1663 = C711 * C832;
    const double C16360 = C13440 * C832;
    const double C16682 = C13676 * C832;
    const double C48088 = C46920 * C832;
    const double C49868 = C47004 * C832;
    const double C50190 = C47240 * C832;
    const double C2778 = C186 * C833;
    const double C2860 = C273 * C833;
    const double C3016 = C416 * C833;
    const double C3334 = C711 * C833;
    const double C13460 = C13440 * C833;
    const double C13695 = C13676 * C833;
    const double C47024 = C47004 * C833;
    const double C47259 = C47240 * C833;
    const double C50080 = C46920 * C833;
    const double C1899 = C186 * C1765;
    const double C2013 = C273 * C1765;
    const double C2200 = C416 * C1765;
    const double C2596 = C711 * C1765;
    const double C34236 = C30392 * C1765;
    const double C34866 = C30856 * C1765;
    const double C94667 = C46920 * C1765;
    const double C96491 = C92703 * C1765;
    const double C97121 = C93167 * C1765;
    const double C3499 = C186 * C1766;
    const double C3581 = C273 * C1766;
    const double C3737 = C416 * C1766;
    const double C4055 = C711 * C1766;
    const double C30412 = C30392 * C1766;
    const double C30875 = C30856 * C1766;
    const double C92723 = C92703 * C1766;
    const double C93186 = C93167 * C1766;
    const double C96601 = C46920 * C1766;
    const double C4288 = C186 * C4161;
    const double C4406 = C273 * C4161;
    const double C4622 = C416 * C4161;
    const double C5064 = C711 * C4161;
    const double C17304 = C13440 * C4161;
    const double C17610 = C13676 * C4161;
    const double C33304 = C30392 * C4161;
    const double C33914 = C30856 * C4161;
    const double C50812 = C47004 * C4161;
    const double C51118 = C47240 * C4161;
    const double C52106 = C46920 * C4161;
    const double C95559 = C92703 * C4161;
    const double C96169 = C93167 * C4161;
    const double C15380 = C13440 * C6324;
    const double C15492 = C273 * C6324;
    const double C15707 = C13676 * C6324;
    const double C16144 = C711 * C6324;
    const double C35142 = C186 * C6324;
    const double C35288 = C30392 * C6324;
    const double C35561 = C416 * C6324;
    const double C36113 = C30856 * C6324;
    const double C48902 = C47004 * C6324;
    const double C49223 = C47240 * C6324;
    const double C54734 = C46920 * C6324;
    const double C97531 = C92703 * C6324;
    const double C98340 = C93167 * C6324;
    const double C68669 = C273 * C20278;
    const double C69001 = C711 * C20278;
    const double C69251 = C273 * C20984;
    const double C69737 = C711 * C20984;
    const double C83379 = C47004 * C20984;
    const double C83707 = C47240 * C20984;
    const double C86502 = C30392 * C20984;
    const double C87134 = C30856 * C20984;
    const double C116243 = C13440 * C20984;
    const double C116565 = C13676 * C20984;
    const double C119357 = C92703 * C20984;
    const double C119989 = C93167 * C20984;
    const double C132984 = C186 * C20984;
    const double C133219 = C416 * C20984;
    const double C71528 = C273 * C23998;
    const double C72004 = C711 * C23998;
    const double C82744 = C30392 * C23998;
    const double C83164 = C30856 * C23998;
    const double C86392 = C47004 * C23998;
    const double C86714 = C47240 * C23998;
    const double C115613 = C92703 * C23998;
    const double C116033 = C93167 * C23998;
    const double C119247 = C13440 * C23998;
    const double C119569 = C13676 * C23998;
    const double C69500 = C139480 * C21530;
    const double C86825 = C139557 * C21530;
    const double C119680 = C139557 * C21530;
    const double C134972 = C186 * C43304;
    const double C135143 = C416 * C43304;
    const double C2313 = C2306 + C2307;
    const double C32637 = C32629 + C32630;
    const double C1564 = C1557 + C1558;
    const double C15037 = C15029 + C15030;
    const double C138816 = C138809 + C138814;
    const double C88974 = (3 * (C138408 + C138250 * C138027) +
                           C137888 * (2 * C138962 + C137888 * C138968)) /
                          C137581;
    const double C139020 = C139013 + C139018;
    const double C137885 = C137875 + C137883;
    const double C43387 = (3 * (C137858 + C137869 * C138027) +
                           C137888 * (2 * C138744 + C137888 * C138746)) /
                          C137581;
    const double C139026 = C139024 + C139025;
    const double C137928 = C137918 + C137926;
    const double C138426 = C137888 * C138425;
    const double C138641 = C137888 * C138600;
    const double C20431 = (3 * (C137901 + C137912 * C137953) +
                           C137845 * (2 * C138430 + C137845 * C138600)) /
                          C137581;
    const double C138871 = C138863 + C138869;
    const double C139545 = C139520 / C139331;
    const double C139547 = C139524 / C139319;
    const double C825 = -C139546;
    const double C139549 = C139532 / C139331;
    const double C139550 = C139534 / C139319;
    const double C5149 = -C139548;
    const double C139552 = C139536 / C139331;
    const double C139553 = C139538 / C139319;
    const double C9304 = -C139551;
    const double C137591 = C137590 / C137581;
    const double C13359 = C13356 * C113;
    const double C14542 = C13356 * C832;
    const double C14538 = C13356 * C937;
    const double C14534 = C13356 * C827;
    const double C14528 = C13356 * C831;
    const double C14522 = C13356 * C938;
    const double C14518 = C13356 * C828;
    const double C14917 = C13356 * C1051;
    const double C14911 = C13356 * C1055;
    const double C14909 = C13356 * C1052;
    const double C16572 = C13356 * C833;
    const double C18610 = C13356 * C4161;
    const double C18604 = C13356 * C4160;
    const double C19040 = C13356 * C4394;
    const double C20516 = C13356 * C5802;
    const double C20739 = C13356 * C5920;
    const double C21318 = C13356 * C6324;
    const double C24332 = C13356 * C8591;
    const double C24651 = C13356 * C8757;
    const double C32388 = C13356 * C1765;
    const double C32384 = C13356 * C1870;
    const double C32380 = C13356 * C1760;
    const double C32374 = C13356 * C1764;
    const double C32370 = C13356 * C1874;
    const double C32368 = C13356 * C1871;
    const double C32364 = C13356 * C1761;
    const double C32749 = C13356 * C1984;
    const double C32741 = C13356 * C1985;
    const double C34346 = C13356 * C1766;
    const double C43546 = C13356 * C10681;
    const double C43542 = C13356 * C10619;
    const double C63577 = C63570 * C113;
    const double C63574 = C63570 * C838;
    const double C63573 = C63570 * C837;
    const double C63572 = C63570 * C112;
    const double C64081 = C63570 * C5806;
    const double C64372 = C63570 * C5802;
    const double C64368 = C63570 * C831;
    const double C64366 = C63570 * C938;
    const double C64364 = C63570 * C828;
    const double C64362 = C63570 * C5803;
    const double C64356 = C63570 * C830;
    const double C64354 = C63570 * C939;
    const double C64352 = C63570 * C829;
    const double C64638 = C63570 * C5920;
    const double C64635 = C63570 * C1055;
    const double C64632 = C63570 * C1052;
    const double C64628 = C63570 * C5921;
    const double C64626 = C63570 * C1054;
    const double C64623 = C63570 * C1053;
    const double C64880 = C63570 * C6328;
    const double C64879 = C63570 * C1771;
    const double C64878 = C63570 * C1770;
    const double C64877 = C63570 * C4163;
    const double C64876 = C63570 * C8595;
    const double C65809 = C63570 * C832;
    const double C65807 = C63570 * C937;
    const double C65805 = C63570 * C827;
    const double C66043 = C63570 * C1051;
    const double C67310 = C63570 * C8591;
    const double C67306 = C63570 * C4160;
    const double C67304 = C63570 * C4159;
    const double C67300 = C63570 * C8592;
    const double C67632 = C63570 * C8757;
    const double C67629 = C63570 * C4394;
    const double C67625 = C63570 * C4393;
    const double C67622 = C63570 * C8758;
    const double C68728 = C63570 * C20278;
    const double C69338 = C63570 * C20984;
    const double C69334 = C63570 * C6325;
    const double C71611 = C63570 * C23998;
    const double C73397 = C63570 * C10623;
    const double C73396 = C63570 * C26694;
    const double C78049 = C63570 * C6324;
    const double C78047 = C63570 * C1874;
    const double C78045 = C63570 * C1764;
    const double C78041 = C63570 * C1871;
    const double C78039 = C63570 * C1761;
    const double C78037 = C63570 * C1763;
    const double C78035 = C63570 * C1873;
    const double C78029 = C63570 * C1872;
    const double C78027 = C63570 * C1762;
    const double C78391 = C63570 * C1985;
    const double C78387 = C63570 * C1986;
    const double C79009 = C63570 * C4161;
    const double C79913 = C63570 * C1870;
    const double C79911 = C63570 * C1760;
    const double C80215 = C63570 * C1984;
    const double C83597 = C63570 * C26692;
    const double C89201 = C63570 * C10682;
    const double C89199 = C63570 * C10620;
    const double C126805 = C63570 * C10681;
    const double C126803 = C63570 * C10619;
    const double C128181 = C63570 * C1765;
    const double C135084 = C63570 * C43304;
    const double C48461 = C48446 + C48447;
    const double C94676 = C94647 + C94648;
    const double C137685 = C137684 / C137581;
    const double C13704 = C13692 + C13693;
    const double C13703 = C13689 + C13690;
    const double C13700 = C13680 + C13681;
    const double C14683 = C14665 + C14666;
    const double C15715 = C15697 + C15698;
    const double C16686 = C16680 + C14678;
    const double C17614 = C17608 + C15710;
    const double C111096 = C111091 + C15702;
    const double C111093 = C111085 + C15701;
    const double C122115 = C122109 + C26981;
    const double C13702 = C13686 + C13687;
    const double C13701 = C13683 + C13684;
    const double C47038 = C47022 + C47023;
    const double C47037 = C47020 + C47021;
    const double C47032 = C47010 + C47011;
    const double C47030 = C47006 + C47007;
    const double C47508 = C47500 + C47501;
    const double C47507 = C47498 + C47499;
    const double C47504 = C47492 + C47493;
    const double C47845 = C47832 + C47833;
    const double C48576 = C48570 + C48571;
    const double C48575 = C48568 + C48569;
    const double C48911 = C48898 + C48899;
    const double C49553 = C49546 + C49547;
    const double C49874 = C49866 + C49867;
    const double C50508 = C50504 + C50505;
    const double C50818 = C50810 + C50811;
    const double C51430 = C51426 + C51427;
    const double C77830 = C77821 + C77822;
    const double C77828 = C77817 + C77818;
    const double C77825 = C77811 + C77812;
    const double C77823 = C77807 + C77808;
    const double C78508 = C78500 + C78501;
    const double C80688 = C80682 + C80683;
    const double C83387 = C83381 + C83382;
    const double C86400 = C86394 + C86395;
    const double C89062 = C89056 + C89057;
    const double C89060 = C89052 + C89053;
    const double C47036 = C47018 + C47019;
    const double C47031 = C47008 + C47009;
    const double C47506 = C47496 + C47497;
    const double C47505 = C47494 + C47495;
    const double C48574 = C48566 + C48567;
    const double C77827 = C77815 + C77816;
    const double C77826 = C77813 + C77814;
    const double C80689 = C80684 + C80685;
    const double C47268 = C47256 + C47257;
    const double C47267 = C47253 + C47254;
    const double C47264 = C47244 + C47245;
    const double C48229 = C48211 + C48212;
    const double C49231 = C49213 + C49214;
    const double C50194 = C50188 + C48224;
    const double C51122 = C51116 + C49226;
    const double C78182 = C78177 + C49218;
    const double C78179 = C78171 + C49217;
    const double C89282 = C89276 + C60317;
    const double C47266 = C47250 + C47251;
    const double C47265 = C47247 + C47248;
    const double C640 = C216 * C273;
    const double C30778 = C216 * C30391;
    const double C93089 = C216 * C92702;
    const double C656 = C652 * C139480;
    const double C30779 = C652 * C30255;
    const double C93090 = C652 * C92566;
    const double C32139 = C32133 * C13349;
    const double C94406 = C32133 * C46913;
    const double C126632 = C32133 * C139301;
    const double C126631 = C32132 * C63570;
    const double C442 = C438 + C426;
    const double C32523 = C32520 + C2195;
    const double C13474 = C13458 + C13459;
    const double C13473 = C13456 + C13457;
    const double C13468 = C13446 + C13447;
    const double C13466 = C13442 + C13443;
    const double C13944 = C13936 + C13937;
    const double C13943 = C13934 + C13935;
    const double C13940 = C13928 + C13929;
    const double C14281 = C14268 + C14269;
    const double C15039 = C15033 + C15034;
    const double C15038 = C15031 + C15032;
    const double C15389 = C15376 + C15377;
    const double C16040 = C16033 + C16034;
    const double C16366 = C16358 + C16359;
    const double C17000 = C16996 + C16997;
    const double C17310 = C17302 + C17303;
    const double C17922 = C17918 + C17919;
    const double C110774 = C110765 + C110766;
    const double C110772 = C110761 + C110762;
    const double C110769 = C110755 + C110756;
    const double C110767 = C110751 + C110752;
    const double C111407 = C111399 + C111400;
    const double C113557 = C113551 + C113552;
    const double C116251 = C116245 + C116246;
    const double C119255 = C119249 + C119250;
    const double C121905 = C121899 + C121900;
    const double C121903 = C121895 + C121896;
    const double C63801 = C63633 * C190;
    const double C63796 = C63633 * C189;
    const double C63795 = C63633 * C188;
    const double C63790 = C63633 * C187;
    const double C64468 = C63633 * C938;
    const double C64464 = C63633 * C939;
    const double C65195 = C63633 * C1874;
    const double C65190 = C63633 * C1871;
    const double C65187 = C63633 * C1873;
    const double C65186 = C63633 * C1872;
    const double C65893 = C63633 * C937;
    const double C66575 = C63633 * C1870;
    const double C73606 = C63633 * C10682;
    const double C137715 = C137714 / C137581;
    const double C30884 = C30872 + C30873;
    const double C30883 = C30869 + C30870;
    const double C30880 = C30860 + C30861;
    const double C31859 = C31841 + C31842;
    const double C32997 = C32979 + C32980;
    const double C33918 = C33912 + C31854;
    const double C34870 = C34864 + C32992;
    const double C77575 = C77570 + C31846;
    const double C77572 = C77564 + C31845;
    const double C81655 = C81652 + C36108;
    const double C83168 = C83162 + C37605;
    const double C87138 = C87132 + C41473;
    const double C30882 = C30866 + C30867;
    const double C30881 = C30863 + C30864;
    const double C77574 = C77568 + C31847;
    const double C77573 = C77566 + C31844;
    const double C92737 = C92721 + C92722;
    const double C92736 = C92719 + C92720;
    const double C92731 = C92709 + C92710;
    const double C92729 = C92705 + C92706;
    const double C92955 = C92947 + C92948;
    const double C92954 = C92945 + C92946;
    const double C92951 = C92939 + C92940;
    const double C93522 = C93509 + C93510;
    const double C93830 = C93823 + C93824;
    const double C94538 = C94525 + C94526;
    const double C94903 = C94897 + C94898;
    const double C94902 = C94895 + C94896;
    const double C95565 = C95557 + C95558;
    const double C95867 = C95863 + C95864;
    const double C96497 = C96489 + C96490;
    const double C96813 = C96809 + C96810;
    const double C109918 = C109909 + C109910;
    const double C109916 = C109905 + C109906;
    const double C109913 = C109899 + C109900;
    const double C109911 = C109895 + C109896;
    const double C110221 = C110213 + C110214;
    const double C113700 = C113695 + C113696;
    const double C113698 = C113691 + C113692;
    const double C115621 = C115615 + C115616;
    const double C115619 = C115611 + C115612;
    const double C116361 = C116355 + C116356;
    const double C119365 = C119359 + C119360;
    const double C119363 = C119355 + C119356;
    const double C92735 = C92717 + C92718;
    const double C92730 = C92707 + C92708;
    const double C92953 = C92943 + C92944;
    const double C92952 = C92941 + C92942;
    const double C94901 = C94893 + C94894;
    const double C109917 = C109907 + C109908;
    const double C109915 = C109903 + C109904;
    const double C109914 = C109901 + C109902;
    const double C109912 = C109897 + C109898;
    const double C113697 = C113689 + C113690;
    const double C93195 = C93183 + C93184;
    const double C93194 = C93180 + C93181;
    const double C93191 = C93171 + C93172;
    const double C94156 = C94138 + C94139;
    const double C95252 = C95234 + C95235;
    const double C96173 = C96167 + C94151;
    const double C97125 = C97119 + C95247;
    const double C110546 = C110541 + C94143;
    const double C110543 = C110535 + C94142;
    const double C114524 = C114521 + C98335;
    const double C116037 = C116031 + C99830;
    const double C119993 = C119987 + C103666;
    const double C93193 = C93177 + C93178;
    const double C93192 = C93174 + C93175;
    const double C110545 = C110539 + C94144;
    const double C110544 = C110537 + C94141;
    const double C506 = C303 * C186;
    const double C13784 = C303 * C13439;
    const double C47348 = C303 * C47003;
    const double C522 = C518 * C139465;
    const double C13785 = C518 * C13351;
    const double C47349 = C518 * C46915;
    const double C14415 = C14409 * C13349;
    const double C47949 = C14409 * C46913;
    const double C64265 = C14409 * C139301;
    const double C64264 = C14408 * C63570;
    const double C737 = C733 + C721;
    const double C15151 = C15148 + C1658;
    const double C30426 = C30410 + C30411;
    const double C30425 = C30408 + C30409;
    const double C30420 = C30398 + C30399;
    const double C30418 = C30394 + C30395;
    const double C30644 = C30636 + C30637;
    const double C30643 = C30634 + C30635;
    const double C30640 = C30628 + C30629;
    const double C31217 = C31204 + C31205;
    const double C31530 = C31523 + C31524;
    const double C32259 = C32246 + C32247;
    const double C32639 = C32633 + C32634;
    const double C32638 = C32631 + C32632;
    const double C33310 = C33302 + C33303;
    const double C33612 = C33608 + C33609;
    const double C34242 = C34234 + C34235;
    const double C34558 = C34554 + C34555;
    const double C76947 = C76938 + C76939;
    const double C76945 = C76934 + C76935;
    const double C76942 = C76928 + C76929;
    const double C76940 = C76924 + C76925;
    const double C77250 = C77242 + C77243;
    const double C80831 = C80826 + C80827;
    const double C80829 = C80822 + C80823;
    const double C82752 = C82746 + C82747;
    const double C82750 = C82742 + C82743;
    const double C83497 = C83491 + C83492;
    const double C86510 = C86504 + C86505;
    const double C86508 = C86500 + C86501;
    const double C125798 = C125480 * C277;
    const double C125793 = C125480 * C276;
    const double C125792 = C125480 * C275;
    const double C125787 = C125480 * C274;
    const double C126476 = C125480 * C1055;
    const double C126471 = C125480 * C1052;
    const double C126468 = C125480 * C1054;
    const double C126467 = C125480 * C1053;
    const double C127198 = C125480 * C1985;
    const double C127194 = C125480 * C1986;
    const double C127872 = C125480 * C1051;
    const double C128566 = C125480 * C1984;
    const double C129474 = C125480 * C4394;
    const double C129469 = C125480 * C4393;
    const double C130594 = C125480 * C5921;
    const double C133527 = C125480 * C8758;
    const double C120 =
        ((C137733 + C137734 * C137735 * C137739) * C137737 + C137745 + C137745 +
         C137730 *
             (2 * ae * C137742 +
              C137730 *
                  (C137735 * C137739 + C137734 * bs[4] * std::pow(C137728, 4)) *
                  C137737)) /
        C137584;
    const double C946 =
        (C137745 + C137845 * (ae * C137851 + C137730 * C137855)) / C137584;
    const double C1166 =
        (C137745 + C137845 * (ae * C137851 + C137730 * C137936)) / C137584;
    const double C1993 =
        (C137745 + C137888 * (ae * C137894 + C137730 * C137898)) / C137584;
    const double C2393 =
        (C137745 + C137888 * (ae * C137894 + C137730 * C137994)) / C137584;
    const double C127 = C105 * C114;
    const double C206 = C186 * C114;
    const double C293 = C273 * C114;
    const double C13364 = C13356 * C114;
    const double C13452 = C13439 * C114;
    const double C30404 = C30391 * C114;
    const double C46928 = C46920 * C114;
    const double C47016 = C47003 * C114;
    const double C63578 = C63570 * C114;
    const double C92715 = C92702 * C114;
    const double C958 = C186 * C836;
    const double C1072 = C273 * C836;
    const double C13361 = C13356 * C836;
    const double C13448 = C13440 * C836;
    const double C14264 = C13439 * C836;
    const double C14533 = C13349 * C836;
    const double C14519 = C139544 * C836;
    const double C31200 = C30391 * C836;
    const double C46925 = C46920 * C836;
    const double C47012 = C47004 * C836;
    const double C47828 = C47003 * C836;
    const double C48079 = C46913 * C836;
    const double C48065 = C139544 * C836;
    const double C63576 = C63570 * C836;
    const double C64365 = C139301 * C836;
    const double C93505 = C92702 * C836;
    const double C1891 = C186 * C1769;
    const double C2005 = C273 * C1769;
    const double C15258 = C13356 * C1769;
    const double C15372 = C13439 * C1769;
    const double C30400 = C30392 * C1769;
    const double C32242 = C30391 * C1769;
    const double C32379 = C13349 * C1769;
    const double C32365 = C139544 * C1769;
    const double C48780 = C46920 * C1769;
    const double C48894 = C47003 * C1769;
    const double C64882 = C63570 * C1769;
    const double C78040 = C139301 * C1769;
    const double C92711 = C92703 * C1769;
    const double C94521 = C92702 * C1769;
    const double C94658 = C46913 * C1769;
    const double C94644 = C139544 * C1769;
    const double C14416 = C14410 * C13349;
    const double C47954 = C14410 * C46913;
    const double C64267 = C14410 * C139301;
    const double C32140 = C32134 * C13349;
    const double C94411 = C32134 * C46913;
    const double C126634 = C32134 * C139301;
    const double C18468 = C18464 * C13349;
    const double C51960 = C18464 * C46913;
    const double C67194 = C18464 * C139301;
    const double C35155 = C35151 * C13349;
    const double C97392 = C35151 * C46913;
    const double C128764 = C35151 * C139301;
    const double C138105 = ae * C138104;
    const double C941 =
        (C137730 * C137851 + C137845 * C138104 + C137845 * C137753 * ae) /
        C137581;
    const double C4276 = (C137888 * C138104) / C137581;
    const double C138239 = ae * C138238;
    const double C1988 =
        (C137730 * C137894 + C137888 * C138238 + C137888 * C137753 * ae) /
        C137581;
    const double C1088 = C1076 + C1077;
    const double C1670 = C1660 + C1661;
    const double C31218 = C31206 + C31207;
    const double C31860 = C31848 + C31849;
    const double C93523 = C93511 + C93512;
    const double C94157 = C94145 + C94146;
    const double C1907 = C1895 + C1896;
    const double C2207 = C2197 + C2198;
    const double C15390 = C15378 + C15379;
    const double C15716 = C15704 + C15705;
    const double C48912 = C48900 + C48901;
    const double C49232 = C49220 + C49221;
    const double C4410 = C4402 + C4403;
    const double C5068 = C5061 + C5062;
    const double C31216 = C31202 + C31203;
    const double C31858 = C31838 + C31839;
    const double C35294 = C35286 + C35287;
    const double C36118 = C36110 + C36111;
    const double C93521 = C93507 + C93508;
    const double C94155 = C94135 + C94136;
    const double C97537 = C97529 + C97530;
    const double C98345 = C98337 + C98338;
    const double C4280 = (C137888 * (C137762 + C137845 * C137866)) / C137584;
    const double C137763 = C137742 + C137761;
    const double C138047 = ae * C138046;
    const double C4164 = (C137888 * C138046) / C137581;
    const double C138149 = ae * C138148;
    const double C964 = C186 * C839;
    const double C1078 = C273 * C839;
    const double C14121 = C13356 * C839;
    const double C14274 = C13439 * C839;
    const double C14262 = C13440 * C839;
    const double C14541 = C13349 * C839;
    const double C14529 = C139544 * C839;
    const double C31210 = C30391 * C839;
    const double C47685 = C46920 * C839;
    const double C47838 = C47003 * C839;
    const double C47826 = C47004 * C839;
    const double C48087 = C46913 * C839;
    const double C48075 = C139544 * C839;
    const double C63575 = C63570 * C839;
    const double C64369 = C139301 * C839;
    const double C93515 = C92702 * C839;
    const double C1897 = C186 * C1772;
    const double C2011 = C273 * C1772;
    const double C15261 = C13356 * C1772;
    const double C15382 = C13439 * C1772;
    const double C32252 = C30391 * C1772;
    const double C32240 = C30392 * C1772;
    const double C32387 = C13349 * C1772;
    const double C32375 = C139544 * C1772;
    const double C48783 = C46920 * C1772;
    const double C48904 = C47003 * C1772;
    const double C64887 = C63570 * C1772;
    const double C78046 = C139301 * C1772;
    const double C94531 = C92702 * C1772;
    const double C94519 = C92703 * C1772;
    const double C94666 = C46913 * C1772;
    const double C94654 = C139544 * C1772;
    const double C6882 =
        (ae * C137894 + C137845 * C138015 + ae * C137888 * C138374 +
         C137888 * (C138377 + C137888 * (C137902 + C137845 * C138018))) /
        C137584;
    const double C138378 = C137851 + C138376;
    const double C138461 = ae * C138460;
    const double C138529 = C137894 + C138527;
    const double C14129 = C13349 * C844;
    const double C14119 = C139544 * C844;
    const double C47693 = C46913 * C844;
    const double C47683 = C139544 * C844;
    const double C64085 = C139301 * C844;
    const double C14125 = C13349 * C846;
    const double C47689 = C46913 * C846;
    const double C64079 = C139301 * C846;
    const double C31977 = C13349 * C1777;
    const double C31971 = C139544 * C1777;
    const double C77687 = C139301 * C1777;
    const double C94274 = C46913 * C1777;
    const double C94268 = C139544 * C1777;
    const double C31975 = C13349 * C1779;
    const double C77685 = C139301 * C1779;
    const double C94272 = C46913 * C1779;
    const double C18157 = C13349 * C4167;
    const double C51665 = C46913 * C4167;
    const double C66973 = C139301 * C4167;
    const double C433 = C139465 * C420;
    const double C13694 = C13351 * C420;
    const double C47258 = C46915 * C420;
    const double C1261 = C139465 * C1248;
    const double C13685 = C139555 * C1248;
    const double C14667 = C13351 * C1248;
    const double C47249 = C139555 * C1248;
    const double C48213 = C46915 * C1248;
    const double C2194 = C139465 * C2181;
    const double C15699 = C13351 * C2181;
    const double C49215 = C46915 * C2181;
    const double C32513 = C139465 * C2183;
    const double C78178 = C46915 * C2183;
    const double C111092 = C13351 * C2183;
    const double C35559 = C139465 * C4613;
    const double C78174 = C139555 * C4613;
    const double C81101 = C46915 * C4613;
    const double C111088 = C139555 * C4613;
    const double C113970 = C13351 * C4613;
    const double C728 = C139480 * C715;
    const double C30874 = C30255 * C715;
    const double C93185 = C92566 * C715;
    const double C1657 = C139480 * C1644;
    const double C31843 = C30255 * C1644;
    const double C94140 = C92566 * C1644;
    const double C15144 = C139480 * C1646;
    const double C77571 = C30255 * C1646;
    const double C110542 = C92566 * C1646;
    const double C2590 = C139480 * C2577;
    const double C30865 = C139557 * C2577;
    const double C32981 = C30255 * C2577;
    const double C93176 = C139557 * C2577;
    const double C95236 = C92566 * C2577;
    const double C19319 = C139480 * C5055;
    const double C77567 = C139557 * C5055;
    const double C81653 = C30255 * C5055;
    const double C110538 = C139557 * C5055;
    const double C114522 = C92566 * C5055;
    const double C138438 = ae * C138437;
    const double C6491 =
        (C137845 * C137894 + C137888 * C138437 + C137888 * C138373 * ae) /
        C137581;
    const double C1250 =
        ((C137733 + C137953 * C137735 * C137739) * C137737 + C138101 + C138101 +
         C137845 * (2 * ae * C137851 + C137845 * C137958)) /
        C137584;
    const double C4943 =
        (C138101 + C137888 * (ae * C137894 + C137845 * C138015)) / C137584;
    const double C1263 = C186 * C940;
    const double C14670 = C13439 * C940;
    const double C14668 = C13440 * C940;
    const double C14798 = C273 * C940;
    const double C48216 = C47003 * C940;
    const double C48214 = C47004 * C940;
    const double C63792 = C63635 * C940;
    const double C64358 = C63570 * C940;
    const double C64465 = C63633 * C940;
    const double C64463 = C63634 * C940;
    const double C77248 = C30391 * C940;
    const double C110219 = C92702 * C940;
    const double C4618 = C186 * C4275;
    const double C15700 = C13440 * C4275;
    const double C18754 = C13439 * C4275;
    const double C18900 = C273 * C4275;
    const double C35137 = C139465 * C4275;
    const double C49216 = C47004 * C4275;
    const double C52250 = C47003 * C4275;
    const double C65185 = C63634 * C4275;
    const double C67302 = C63570 * C4275;
    const double C67420 = C63633 * C4275;
    const double C77244 = C30392 * C4275;
    const double C77810 = C139555 * C4275;
    const double C80679 = C46915 * C4275;
    const double C81242 = C30391 * C4275;
    const double C110215 = C92703 * C4275;
    const double C110754 = C139555 * C4275;
    const double C113548 = C13351 * C4275;
    const double C114111 = C92702 * C4275;
    const double C6652 = C186 * C6411;
    const double C15703 = C13440 * C6411;
    const double C21431 = C13439 * C6411;
    const double C21532 = C273 * C6411;
    const double C37803 = C139465 * C6411;
    const double C49219 = C47004 * C6411;
    const double C54845 = C47003 * C6411;
    const double C65188 = C63634 * C6411;
    const double C69336 = C63570 * C6411;
    const double C69423 = C63633 * C6411;
    const double C77820 = C139555 * C6411;
    const double C81240 = C30392 * C6411;
    const double C83378 = C46915 * C6411;
    const double C83815 = C30391 * C6411;
    const double C110764 = C139555 * C6411;
    const double C114109 = C92703 * C6411;
    const double C116242 = C13351 * C6411;
    const double C116673 = C92702 * C6411;
    const double C643 = C218 * C273;
    const double C30785 = C218 * C30391;
    const double C93096 = C218 * C92702;
    const double C443 = C439 + C429;
    const double C523 = C519 * C139465;
    const double C13790 = C519 * C13351;
    const double C47354 = C519 * C46915;
    const double C648 = C221 * C273;
    const double C30786 = C221 * C30391;
    const double C93097 = C221 * C92702;
    const double C444 = C440 + C432;
    const double C524 = C520 * C139465;
    const double C13793 = C520 * C13351;
    const double C47357 = C520 * C46915;
    const double C1552 = C971 * C273;
    const double C33810 = C971 * C30391;
    const double C96065 = C971 * C92702;
    const double C1276 = C1272 + C1257;
    const double C1555 = C973 * C273;
    const double C31732 = C973 * C30391;
    const double C94032 = C973 * C92702;
    const double C1277 = C1273 + C1260;
    const double C2485 = C1904 * C273;
    const double C30783 = C1904 * C30392;
    const double C32126 = C1904 * C13356;
    const double C34762 = C1904 * C30391;
    const double C93094 = C1904 * C92703;
    const double C94415 = C1904 * C46920;
    const double C97017 = C1904 * C92702;
    const double C128027 = C1904 * C63570;
    const double C2209 = C2205 + C2190;
    const double C2488 = C1906 * C273;
    const double C30780 = C1906 * C30392;
    const double C32112 = C1906 * C13356;
    const double C32866 = C1906 * C30391;
    const double C93091 = C1906 * C92703;
    const double C94407 = C1906 * C46920;
    const double C95128 = C1906 * C92702;
    const double C126637 = C1906 * C63570;
    const double C2210 = C2206 + C2193;
    const double C2316 = C2312 * C139465;
    const double C15826 = C2312 * C13351;
    const double C49342 = C2312 * C46915;
    const double C32524 = C32521 + C2196;
    const double C126633 = C32135 * C63570;
    const double C43626 = C43625 + C10851;
    const double C126636 = C43398 * C63570;
    const double C2579 =
        ((C137733 + C138027 * C137735 * C137739) * C137737 + C138235 + C138235 +
         C137888 * (2 * ae * C137894 + C137888 * C138032)) /
        C137584;
    const double C4729 =
        (C138235 + C137845 * (ae * C137851 + C137888 * C137978)) / C137584;
    const double C2592 = C273 * C1987;
    const double C32867 = C186 * C1987;
    const double C32984 = C30391 * C1987;
    const double C32982 = C30392 * C1987;
    const double C78389 = C63570 * C1987;
    const double C78506 = C47003 * C1987;
    const double C95239 = C92702 * C1987;
    const double C95237 = C92703 * C1987;
    const double C111405 = C13439 * C1987;
    const double C125789 = C125482 * C1987;
    const double C127195 = C125480 * C1987;
    const double C127193 = C125481 * C1987;
    const double C1383 = C1379 * C139465;
    const double C13787 = C1379 * C139555;
    const double C14796 = C1379 * C13351;
    const double C47351 = C1379 * C139555;
    const double C48340 = C1379 * C46915;
    const double C509 = C305 * C186;
    const double C13791 = C305 * C13439;
    const double C47355 = C305 * C47003;
    const double C657 = C653 * C139480;
    const double C30784 = C653 * C30255;
    const double C93095 = C653 * C92566;
    const double C738 = C734 + C724;
    const double C514 = C308 * C186;
    const double C13792 = C308 * C13439;
    const double C47356 = C308 * C47003;
    const double C658 = C654 * C139480;
    const double C30787 = C654 * C30255;
    const double C93098 = C654 * C92566;
    const double C739 = C735 + C727;
    const double C1368 = C1085 * C186;
    const double C13789 = C1085 * C13440;
    const double C14402 = C1085 * C13356;
    const double C16790 = C1085 * C13439;
    const double C47353 = C1085 * C47004;
    const double C47958 = C1085 * C46920;
    const double C50298 = C1085 * C47003;
    const double C65727 = C1085 * C63570;
    const double C1672 = C1668 + C1653;
    const double C1371 = C1087 * C186;
    const double C13786 = C1087 * C13440;
    const double C14388 = C1087 * C13356;
    const double C14797 = C1087 * C13439;
    const double C47350 = C1087 * C47004;
    const double C47950 = C1087 * C46920;
    const double C48341 = C1087 * C47003;
    const double C64270 = C1087 * C63570;
    const double C1567 = C1563 * C139480;
    const double C31731 = C1563 * C30255;
    const double C94031 = C1563 * C92566;
    const double C1673 = C1669 + C1656;
    const double C15152 = C15149 + C1659;
    const double C64266 = C14411 * C63570;
    const double C2301 = C2018 * C186;
    const double C17718 = C2018 * C13439;
    const double C51226 = C2018 * C47003;
    const double C2605 = C2601 + C2586;
    const double C2304 = C2020 * C186;
    const double C15827 = C2020 * C13439;
    const double C49343 = C2020 * C47003;
    const double C2500 = C2496 * C139480;
    const double C30781 = C2496 * C139557;
    const double C32865 = C2496 * C30255;
    const double C93092 = C2496 * C139557;
    const double C95127 = C2496 * C92566;
    const double C2606 = C2602 + C2589;
    const double C19325 = C19323 + C5060;
    const double C67195 = C18465 * C63570;
    const double C20884 = C20883 + C6249;
    const double C64269 = C20442 * C63570;
    const double C24860 = C24859 + C9230;
    const double C67193 = C24226 * C63570;
    const double C137799 = C137785 + C137789;
    const double C6413 = (C137762 + C137845 * C137866 +
                          (C137789 + C137845 * C137880) * C138027) /
                         C137584;
    const double C137791 = C137755 + C137788;
    const double C138054 = C137760 + C138053;
    const double C138061 = ae * C138059;
    const double C138294 = C137888 * C138059;
    const double C138335 = 2 * C138059;
    const double C6327 = (C138046 + C138059 * C138027) / C137581;
    const double C138156 = C137760 + C138155;
    const double C138163 = ae * C138161;
    const double C138475 = 2 * C138161;
    const double C138815 = C138807 + C138813;
    const double C138825 = C138821 + C138824;
    const double C89130 =
        (3 * (C138689 + ae * C138962 + C137888 * C138967) +
         ae * (2 * C138962 + C137888 * C138968) +
         C137888 *
             (2 * C138967 + ae * C138968 +
              C137888 * (C138963 + ae * C137888 * C138964 +
                         C137888 * (ae * C138964 + C137888 * C137845 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137892)))) /
        C137584;
    const double C89420 =
        (3 * (C138699 + ae * C138962 + C137888 * C138979) +
         ae * (2 * C138962 + C137888 * C138968) +
         C137888 *
             (2 * C138979 + ae * C138968 +
              C137888 * (C138977 + ae * C137888 * C138964 +
                         C137888 * (ae * C138964 + C137888 * C137845 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137991)))) /
        C137584;
    const double C83494 = C139557 * C26840;
    const double C116358 = C139557 * C26840;
    const double C83923 = C139301 * C27116;
    const double C139019 = C139011 + C139017;
    const double C139032 = C139028 + C139031;
    const double C69254 = C139480 * C21204;
    const double C86507 = C139557 * C21204;
    const double C119362 = C139557 * C21204;
    const double C69582 = C139301 * C21633;
    const double C71531 = C139480 * C24218;
    const double C82749 = C139557 * C24218;
    const double C115618 = C139557 * C24218;
    const double C71614 = C139301 * C24328;
    const double C71851 = C139301 * C24647;
    const double C64083 = C63570 * C20280;
    const double C68671 = C273 * C20280;
    const double C68729 = C139301 * C20280;
    const double C64881 = C63570 * C20986;
    const double C69253 = C273 * C20986;
    const double C69339 = C139301 * C20986;
    const double C83383 = C47004 * C20986;
    const double C86506 = C30392 * C20986;
    const double C116247 = C13440 * C20986;
    const double C119361 = C92703 * C20986;
    const double C132986 = C186 * C20986;
    const double C66974 = C63570 * C24000;
    const double C71530 = C273 * C24000;
    const double C71612 = C139301 * C24000;
    const double C82748 = C30392 * C24000;
    const double C86396 = C47004 * C24000;
    const double C115617 = C92703 * C24000;
    const double C119251 = C13440 * C24000;
    const double C73395 = C63570 * C73392;
    const double C88980 = C63570 * C43306;
    const double C134974 = C186 * C43306;
    const double C135085 = C139301 * C43306;
    const double C137790 = C137772 + C137787;
    const double C4168 =
        (2 * ae * C137888 * C137845 * C137755 + C137730 * C137888 * C138057) /
        C137584;
    const double C6331 = (C137845 * C137759 + C138057 * C138027) / C137584;
    const double C14134 = C13349 * C847;
    const double C14122 = C139544 * C847;
    const double C47698 = C46913 * C847;
    const double C47686 = C139544 * C847;
    const double C64087 = C139301 * C847;
    const double C31981 = C13349 * C1780;
    const double C31973 = C139544 * C1780;
    const double C77689 = C139301 * C1780;
    const double C94278 = C46913 * C1780;
    const double C94270 = C139544 * C1780;
    const double C20285 = C13349 * C5809;
    const double C53759 = C46913 * C5809;
    const double C64082 = C139301 * C5809;
    const double C24005 = C13349 * C8598;
    const double C57395 = C46913 * C8598;
    const double C66971 = C139301 * C8598;
    const double C43311 = C13349 * C10626;
    const double C88978 = C139301 * C10626;
    const double C105498 = C46913 * C10626;
    const double C137824 = C137806 + C137821;
    const double C138353 = C138351 + C137820;
    const double C138505 = C138503 + C137820;
    const double C6726 =
        (ae * (C137910 + C137888 * (C137888 * C137924 + C137820) +
               C137888 * C137817 * ae) +
         C137845 *
             (C137986 + ae * C137888 * C137881 +
              C137888 * (ae * C137881 +
                         C137888 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C138354 = C138352 * ae;
    const double C6323 = C137845 * C137781 + C138352 * C138027;
    const double C138506 = C138504 * ae;
    const double C138565 = ae * C138562;
    const double C138564 = C137845 * C138562;
    const double C138627 = C138562 * C138027;
    const double C138661 = C137888 * C138562;
    const double C138776 = ae * C138771;
    const double C138774 = C137888 * C138771;
    const double C138563 = C138560 * ae;
    const double C24215 = (C137888 * (2 * C138430 + C137845 * C138600) +
                           (2 * C138363 + C137845 * C138560) * ae) /
                          C137581;
    const double C20277 = 3 * (C137753 + C137776 * C137953) +
                          C137845 * (2 * C138363 + C137845 * C138560);
    const double C20983 = C137753 + C137776 * C137953 + C138560 * C138027;
    const double C23997 = C137888 * (2 * C138363 + C137845 * C138560);
    const double C138708 = C138706 + C138559;
    const double C21529 =
        (C138383 + ae * C137888 * C137869 +
         C137888 * (C137873 + C137888 * C138595) +
         ae * (C138430 + C137888 * (C137888 * C137845 * C138596 + C138559) +
               C137888 * C138555 * ae) +
         C137845 *
             (ae * (C137912 + C137888 * (C137888 * C138596 + C137816) +
                    C137888 * C137812 * ae) +
              C137845 * (C138595 + ae * C137888 * C138554 +
                         C137888 * (ae * C138554 + C137888 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137975)))) /
        C137584;
    const double C138707 = C138705 * ae;
    const double C138775 = C138773 * ae;
    const double C43303 = 3 * (C137753 + C137776 * C138027) +
                          C137888 * (2 * C138514 + C137888 * C138773);
    const double C137830 = C137779 + C137826;
    const double C138068 = C137786 + C138065;
    const double C138170 = C137786 + C138167;
    const double C138259 = ae * C138254;
    const double C138299 = C137888 * C138254;
    const double C138397 = C138254 * C138027;
    const double C138280 = ae * C138275;
    const double C138847 = C137863 + C138842;
    const double C138896 = C138581 + C138893;
    const double C138929 = ae * C138925;
    const double C139060 = C137906 + C139056;
    const double C137829 = C137808 + C137825;
    const double C138066 = C137785 + C138063;
    const double C138168 = C137785 + C138165;
    const double C138256 = C137730 * C138251;
    const double C138297 = C137888 * C138251;
    const double C6330 = (2 * ae * (C137845 * C137755 + C138250 * C138027) +
                          C137730 * (C138057 + C138251 * C138027)) /
                         C137584;
    const double C24001 =
        (2 * ae * C137888 *
             (2 * C138250 + C137845 * (C137779 + C137815 * C137953)) +
         C137730 * C137888 *
             (2 * C138251 +
              C137845 * (C137822 + (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137953))) /
        C137584;
    const double C26696 =
        (2 * C137888 * C138057 + C137888 * (C138057 + C138251 * C138027)) /
        C137584;
    const double C138277 = C137730 * C138272;
    const double C137970 = C137963 + C137969;
    const double C138557 = C137845 * C138552;
    const double C138659 = C137888 * C138552;
    const double C138837 = C138828 + C138829;
    const double C138894 = C137963 + C138891;
    const double C138926 = C137845 * C138922;
    const double C138044 = C138037 + C138043;
    const double C138703 = C137845 * C138616;
    const double C138765 = C137888 * C138616;
    const double C24852 =
        (2 * ae * (2 * C138430 + C137845 * C138600) +
         C137888 * (2 * C137845 * C138616 +
                    C137845 * (C138616 +
                               C137730 *
                                   (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C137953))) /
        C137584;
    const double C138883 = C138037 + C138882;
    const double C138990 = C137888 * C138985;
    const double C139051 = C139041 + C139042;
    const double C138848 = C138835 + C138844;
    const double C138952 = C138950 + C138843;
    const double C138953 = C138951 * ae;
    const double C138998 = ae * C138995;
    const double C138997 = C137888 * C138995;
    const double C138996 = C138993 * ae;
    const double C88973 = 3 * (C138373 + C138578 * C138027) +
                          C137888 * (2 * C138717 + C137888 * C138993);
    const double C139054 = C139048 + C139049;
    const double C138108 = C138107 + C137784;
    const double C2310 = C139480 * C2295;
    const double C34557 = C139557 * C2295;
    const double C96812 = C139557 * C2295;
    const double C3821 = C139480 * C2296;
    const double C30639 = C139557 * C2296;
    const double C92950 = C139557 * C2296;
    const double C2494 = C139465 * C2479;
    const double C3977 = C139465 * C2480;
    const double C213 = C139465 * C191;
    const double C435 = C186 * C191;
    const double C516 = C273 * C191;
    const double C13699 = C13439 * C191;
    const double C47263 = C47003 * C191;
    const double C1270 = C186 * C943;
    const double C2779 = C139465 * C943;
    const double C3099 = C273 * C943;
    const double C13461 = C139555 * C943;
    const double C13696 = C13440 * C943;
    const double C16576 = C13356 * C943;
    const double C16685 = C13439 * C943;
    const double C47025 = C139555 * C943;
    const double C47260 = C47004 * C943;
    const double C50084 = C46920 * C943;
    const double C50193 = C47003 * C943;
    const double C63800 = C63634 * C943;
    const double C1900 = C139465 * C1875;
    const double C2201 = C186 * C1875;
    const double C2309 = C273 * C1875;
    const double C15713 = C13439 * C1875;
    const double C32392 = C13356 * C1875;
    const double C34556 = C30392 * C1875;
    const double C49229 = C47003 * C1875;
    const double C94671 = C46920 * C1875;
    const double C96811 = C92703 * C1875;
    const double C128183 = C63570 * C1875;
    const double C2203 = C186 * C1876;
    const double C3500 = C139465 * C1876;
    const double C3820 = C273 * C1876;
    const double C17613 = C13439 * C1876;
    const double C30638 = C30392 * C1876;
    const double C34350 = C13356 * C1876;
    const double C51121 = C47003 * C1876;
    const double C92949 = C92703 * C1876;
    const double C96605 = C46920 * C1876;
    const double C10849 = C186 * C10680;
    const double C138536 = C137789 + C138535;
    const double C138546 = C137789 + C138545;
    const double C43537 =
        (3 * (C137941 + C137947 * C138027) +
         C137888 * (2 * C138655 +
                    C137888 * (C137947 +
                               (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933) *
                                   C138027))) /
        C137584;
    const double C137884 = C137877 + C137882;
    const double C137949 = C137943 + C137948;
    const double C43694 =
        (3 * (C138383 + ae * C138744 + C137888 * C138672) +
         ae * (2 * C138744 + C137888 * C138746) +
         C137888 *
             (2 * C138672 + ae * C138746 +
              C137888 * (C138595 + ae * C137888 * C138554 +
                         C137888 * (ae * C138554 + C137888 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137975)))) /
        C137584;
    const double C43836 =
        (3 * (C138390 + ae * C138744 + C137888 * C138759) +
         ae * (2 * C138744 + C137888 * C138746) +
         C137888 *
             (2 * C138759 + ae * C138746 +
              C137888 * (C138609 + ae * C137888 * C138554 +
                         C137888 * (ae * C138554 + C137888 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C138012)))) /
        C137584;
    const double C15832 = C139480 * C6727;
    const double C35705 = C139557 * C6727;
    const double C97938 = C139557 * C6727;
    const double C32636 = C139557 * C10902;
    const double C94900 = C139557 * C10902;
    const double C32873 = C139465 * C11008;
    const double C138367 = ae * C138364;
    const double C138366 = C137845 * C138364;
    const double C138457 = C137888 * C138364;
    const double C138553 = 2 * C138364;
    const double C6410 = (C138104 + C138364 * C138027) / C137581;
    const double C32522 = C32514 + C10850;
    const double C32136 = C32120 + C32121;
    const double C138827 = C137963 + C138586;
    const double C138587 = C137856 + C138584;
    const double C138632 = C138374 + C138631;
    const double C138669 = ae * C138667;
    const double C138942 = 2 * C138667;
    const double C43624 = C186 * C43388;
    const double C89281 = C47003 * C43388;
    const double C122114 = C13439 * C43388;
    const double C134973 = C139465 * C43388;
    const double C135086 = C63570 * C43388;
    const double C138906 = C138904 + C138905;
    const double C139038 = C139034 + C139037;
    const double C215 = C139465 * C197;
    const double C1888 = C139465 * C1878;
    const double C17307 = C13351 * C1878;
    const double C50815 = C46915 * C1878;
    const double C1898 = C139465 * C1882;
    const double C15383 = C13351 * C1882;
    const double C48905 = C46915 * C1882;
    const double C32123 = C139465 * C10684;
    const double C83384 = C139555 * C21102;
    const double C116248 = C139555 * C21102;
    const double C132987 = C139465 * C21102;
    const double C86397 = C139555 * C24116;
    const double C119252 = C139555 * C24116;
    const double C89059 = C139555 * C26770;
    const double C121902 = C139555 * C26770;
    const double C130746 = C139465 * C26770;
    const double C43401 = C43399 * C13349;
    const double C105576 = C43399 * C46913;
    const double C126635 = C43399 * C139301;
    const double C138242 = C138241 + C137784;
    const double C1377 = C139480 * C1362;
    const double C3100 = C139480 * C1363;
    const double C1561 = C139465 * C1546;
    const double C16999 = C139555 * C1546;
    const double C50507 = C139555 * C1546;
    const double C3256 = C139465 * C1547;
    const double C13939 = C139555 * C1547;
    const double C47503 = C139555 * C1547;
    const double C300 = C139480 * C278;
    const double C650 = C186 * C278;
    const double C730 = C273 * C278;
    const double C30879 = C30391 * C278;
    const double C93190 = C92702 * C278;
    const double C1081 = C139480 * C1056;
    const double C1560 = C186 * C1056;
    const double C1664 = C273 * C1056;
    const double C14921 = C13356 * C1056;
    const double C16998 = C13440 * C1056;
    const double C31857 = C30391 * C1056;
    const double C48458 = C46920 * C1056;
    const double C50506 = C47004 * C1056;
    const double C66046 = C63570 * C1056;
    const double C94154 = C92702 * C1056;
    const double C1666 = C273 * C1057;
    const double C2861 = C139480 * C1057;
    const double C3255 = C186 * C1057;
    const double C13938 = C13440 * C1057;
    const double C16894 = C13356 * C1057;
    const double C33917 = C30391 * C1057;
    const double C47502 = C47004 * C1057;
    const double C50402 = C46920 * C1057;
    const double C96172 = C92702 * C1057;
    const double C2599 = C273 * C1990;
    const double C3582 = C139480 * C1990;
    const double C3976 = C186 * C1990;
    const double C30413 = C139557 * C1990;
    const double C30876 = C30392 * C1990;
    const double C34660 = C13356 * C1990;
    const double C34869 = C30391 * C1990;
    const double C92724 = C139557 * C1990;
    const double C93187 = C92703 * C1990;
    const double C96915 = C46920 * C1990;
    const double C97124 = C92702 * C1990;
    const double C125797 = C125481 * C1990;
    const double C4407 = C139480 * C4395;
    const double C4952 = C186 * C4395;
    const double C5065 = C273 * C4395;
    const double C17920 = C13440 * C4395;
    const double C19046 = C13356 * C4395;
    const double C31855 = C30392 * C4395;
    const double C33305 = C139557 * C4395;
    const double C36117 = C30391 * C4395;
    const double C51428 = C47004 * C4395;
    const double C52536 = C46920 * C4395;
    const double C79312 = C63570 * C4395;
    const double C94152 = C92703 * C4395;
    const double C95560 = C139557 * C4395;
    const double C98344 = C92702 * C4395;
    const double C127871 = C125481 * C4395;
    const double C6247 = C273 * C5919;
    const double C9228 = C273 * C8756;
    const double C31856 = C30392 * C8756;
    const double C94153 = C92703 * C8756;
    const double C138732 = C137789 + C138731;
    const double C138753 = C137789 + C138752;
    const double C138982 = C138586 + C138981;
    const double C137927 = C137920 + C137925;
    const double C138007 = C138001 + C138006;
    const double C20663 =
        (3 * (C138383 + ae * C138430 + C137845 * C138599) +
         ae * (2 * C138430 + C137845 * C138600) +
         C137845 *
             (2 * C138599 + ae * C138600 +
              C137845 * (C138595 + ae * C137845 * C138596 +
                         C137845 * (ae * C138596 + C137845 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137975)))) /
        C137584;
    const double C20808 =
        (3 * (C138390 + ae * C138430 + C137845 * C138611) +
         ae * (2 * C138430 + C137845 * C138600) +
         C137845 *
             (2 * C138611 + ae * C138600 +
              C137845 * (C138609 + ae * C137845 * C138596 +
                         C137845 * (ae * C138596 + C137845 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C138012)))) /
        C137584;
    const double C14804 = C139480 * C6085;
    const double C15036 = C139555 * C6191;
    const double C48573 = C139555 * C6191;
    const double C138432 = C138431 + C138365;
    const double C138518 = ae * C138515;
    const double C138517 = C137888 * C138515;
    const double C138766 = 2 * C138515;
    const double C27047 =
        (ae * (2 * C138515 +
               C137888 * (C137912 + C137888 * (C137888 * C138596 + C137816) +
                          C137888 * C137812 * ae) +
               (C137776 + C137812 * C138027) * ae) +
         C137845 *
             (2 * C138672 + ae * (C137869 + C138554 * C138027) +
              C137888 * (C138595 + ae * C137888 * C138554 +
                         C137888 * (ae * C138554 + C137888 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137975)))) /
        C137584;
    const double C15150 = C15146 + C6248;
    const double C14412 = C14396 + C14397;
    const double C19324 = C19321 + C9229;
    const double C18466 = C18456 + C18457;
    const double C31219 = C31208 + C31209;
    const double C31861 = C31851 + C31852;
    const double C93524 = C93513 + C93514;
    const double C94158 = C94148 + C94149;
    const double C138646 = C138645 + C138585;
    const double C20882 = C273 * C20432;
    const double C68670 = C139480 * C20432;
    const double C68895 = C63570 * C20432;
    const double C83167 = C30391 * C20432;
    const double C116036 = C92702 * C20432;
    const double C24858 = C273 * C24216;
    const double C37604 = C30392 * C24216;
    const double C71529 = C139480 * C24216;
    const double C71850 = C63570 * C24216;
    const double C82745 = C139557 * C24216;
    const double C87030 = C47004 * C24216;
    const double C87137 = C30391 * C24216;
    const double C99829 = C92703 * C24216;
    const double C115614 = C139557 * C24216;
    const double C119885 = C13440 * C24216;
    const double C119992 = C92702 * C24216;
    const double C130593 = C125481 * C24216;
    const double C138722 = ae * C138720;
    const double C138721 = C137888 * C138720;
    const double C138986 = 2 * C138720;
    const double C138870 = C138865 + C138868;
    const double C138880 = C138876 + C138879;
    const double C138933 = C138797 + C138932;
    const double C139040 = C138037 + C138797;
    const double C138798 = C137899 + C138795;
    const double C302 = C139480 * C284;
    const double C1069 = C139480 * C1059;
    const double C33307 = C30255 * C1059;
    const double C95562 = C92566 * C1059;
    const double C1079 = C139480 * C1063;
    const double C31211 = C30255 * C1063;
    const double C93516 = C92566 * C1063;
    const double C14399 = C139480 * C5923;
    const double C20445 = C20443 * C13349;
    const double C53903 = C20443 * C46913;
    const double C64268 = C20443 * C139301;
    const double C24229 = C24227 * C13349;
    const double C57603 = C24227 * C46913;
    const double C67192 = C24227 * C139301;
    const double C32385 = C139544 * C2098;
    const double C34349 = C13349 * C2098;
    const double C79914 = C139301 * C2098;
    const double C94664 = C139544 * C2098;
    const double C96604 = C46913 * C2098;
    const double C32391 = C13349 * C2102;
    const double C32371 = C139544 * C2102;
    const double C78048 = C139301 * C2102;
    const double C94670 = C46913 * C2102;
    const double C94650 = C139544 * C2102;
    const double C43547 = C139544 * C10793;
    const double C105718 = C139544 * C10793;
    const double C126806 = C139301 * C10793;
    const double C68731 = C139301 * C20512;
    const double C6647 = (2 * ae * (C137858 + C137869 * C138027) +
                          C137845 * (C138361 + C137730 * C137968 * C138027)) /
                         C137584;
    const double C10846 = (2 * C137888 * C138361 +
                           C137888 * (C138361 + C137730 * C137968 * C138027)) /
                          C137584;
    const double C138580 = C138574 + C138575;
    const double C26976 =
        (2 * ae *
             (2 * C137888 * C137856 + C137888 * (C137856 + C137863 * C138027)) +
         C137845 * (2 * C138665 + C137888 * (C137963 + C137968 * C138027))) /
        C137584;
    const double C43618 =
        (3 * (C137958 + C137963 * C138027) +
         C137888 * (2 * C138665 + C137888 * (C137963 + C137968 * C138027))) /
        C137584;
    const double C436 = C139465 * C421;
    const double C1258 = C139465 * C1247;
    const double C13688 = C139555 * C1247;
    const double C16681 = C13351 * C1247;
    const double C47252 = C139555 * C1247;
    const double C50189 = C46915 * C1247;
    const double C2191 = C139465 * C2180;
    const double C17609 = C13351 * C2180;
    const double C51117 = C46915 * C2180;
    const double C2199 = C139465 * C2184;
    const double C15706 = C13351 * C2184;
    const double C49222 = C46915 * C2184;
    const double C4621 = C139465 * C4614;
    const double C15696 = C139555 * C4614;
    const double C18758 = C13351 * C4614;
    const double C49212 = C139555 * C4614;
    const double C52254 = C46915 * C4614;
    const double C38107 = C139465 * C6648;
    const double C78176 = C139555 * C6648;
    const double C83706 = C46915 * C6648;
    const double C111090 = C139555 * C6648;
    const double C116564 = C13351 * C6648;
    const double C43621 = C139465 * C10847;
    const double C89277 = C46915 * C10847;
    const double C122110 = C13351 * C10847;
    const double C68840 = C139480 * C20664;
    const double C83818 = C139557 * C27048;
    const double C116676 = C139557 * C27048;
    const double C1382 = C1378 * C139465;
    const double C13788 = C1378 * C139555;
    const double C16791 = C1378 * C13351;
    const double C47352 = C1378 * C139555;
    const double C50299 = C1378 * C46915;
    const double C2315 = C2311 * C139465;
    const double C17719 = C2311 * C13351;
    const double C51227 = C2311 * C46915;
    const double C14918 = C139544 * C1459;
    const double C16893 = C13349 * C1459;
    const double C48455 = C139544 * C1459;
    const double C50401 = C46913 * C1459;
    const double C66044 = C139301 * C1459;
    const double C14920 = C13349 * C1463;
    const double C14912 = C139544 * C1463;
    const double C48457 = C46913 * C1463;
    const double C48449 = C139544 * C1463;
    const double C64636 = C139301 * C1463;
    const double C20740 = C139544 * C6138;
    const double C54189 = C139544 * C6138;
    const double C64639 = C139301 * C6138;
    const double C135253 = C139301 * C43763;
    const double C135307 = C139465 * C43837;
    const double C1566 = C1562 * C139480;
    const double C33811 = C1562 * C30255;
    const double C96066 = C1562 * C92566;
    const double C2499 = C2495 * C139480;
    const double C30782 = C2495 * C139557;
    const double C34763 = C2495 * C30255;
    const double C93093 = C2495 * C139557;
    const double C97018 = C2495 * C92566;
    const double C6244 = (2 * C137845 * C138394 +
                          C137845 * (C138394 + C137730 * C138042 * C137953)) /
                         C137584;
    const double C9225 = (2 * ae * (C137901 + C137912 * C137953) +
                          C137888 * (C138394 + C137730 * C138042 * C137953)) /
                         C137584;
    const double C20876 =
        (3 * (C138394 + C138616 * C137953) +
         C137845 * (2 * C137845 * C138616 +
                    C137845 * (C138616 +
                               C137730 *
                                   (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C137953))) /
        C137584;
    const double C138791 = C138785 + C138786;
    const double C731 = C139480 * C716;
    const double C1654 = C139480 * C1643;
    const double C33913 = C30255 * C1643;
    const double C96168 = C92566 * C1643;
    const double C1662 = C139480 * C1647;
    const double C31850 = C30255 * C1647;
    const double C94147 = C92566 * C1647;
    const double C2587 = C139480 * C2576;
    const double C30868 = C139557 * C2576;
    const double C34865 = C30255 * C2576;
    const double C93179 = C139557 * C2576;
    const double C97120 = C92566 * C2576;
    const double C5063 = C139480 * C5056;
    const double C31840 = C139557 * C5056;
    const double C36112 = C30255 * C5056;
    const double C94137 = C139557 * C5056;
    const double C98339 = C92566 * C5056;
    const double C20880 = C139480 * C6245;
    const double C83163 = C30255 * C6245;
    const double C116032 = C92566 * C6245;
    const double C24856 = C139480 * C9226;
    const double C77569 = C139557 * C9226;
    const double C87133 = C30255 * C9226;
    const double C110540 = C139557 * C9226;
    const double C119988 = C92566 * C9226;
    const double C69002 = C139480 * C20877;
    const double C72005 = C139480 * C24853;
    const double C83165 = C139557 * C24853;
    const double C116034 = C139557 * C24853;
    const double C40771 = C40769 * C13349;
    const double C102972 = C40769 * C46913;
    const double C132983 = C40769 * C139301;
    const double C21215 = C21213 * C13349;
    const double C54631 = C21213 * C46913;
    const double C69250 = C21213 * C139301;
    const double C37811 = C37809 * C13349;
    const double C100028 = C37809 * C46913;
    const double C128766 = C37809 * C139301;
    const double C2317 = C2313 * C139465;
    const double C15829 = C2313 * C13351;
    const double C49345 = C2313 * C46915;
    const double C1568 = C1564 * C139480;
    const double C31734 = C1564 * C30255;
    const double C94034 = C1564 * C92566;
    const double C69247 =
        (2 * C138689 + C137845 * C138819 + ae * C137888 * C138816 +
         C137888 *
             (ae * C138816 +
              C137888 * (2 * C137845 * C137917 +
                         C137845 * (C137917 + std::pow(C137736, 7) * bs[7] *
                                                  C137892 * C137953)))) /
        C137584;
    const double C69575 =
        (2 * C138699 + C137845 * C138874 + ae * C137888 * C138816 +
         C137888 *
             (ae * C138816 +
              C137888 * (2 * C137845 * C138003 +
                         C137845 * (C138003 + std::pow(C137736, 7) * bs[7] *
                                                  C137991 * C137953)))) /
        C137584;
    const double C71525 =
        (ae * (3 * C138541 + C137845 * C138816) +
         C137888 *
             (3 * C138819 +
              C137845 * (2 * C137845 * C137917 +
                         C137845 * (C137917 + std::pow(C137736, 7) * bs[7] *
                                                  C137892 * C137953)))) /
        C137584;
    const double C71609 =
        (3 * (C138657 + ae * C137888 * C138250 + C137845 * C138919) +
         ae * C137888 * C138816 +
         C137845 *
             (2 * C138919 + ae * C137888 * C138812 +
              C137845 * (C138917 + ae * C137888 * C137845 * C137815 +
                         C137845 * (ae * C137888 * C137815 +
                                    C137845 * C137888 * std::pow(C137736, 7) *
                                        bs[7] * C137933)))) /
        C137584;
    const double C71846 =
        (ae * (3 * C138541 + C137845 * C138816) +
         C137888 *
             (3 * C138874 +
              C137845 * (2 * C137845 * C138003 +
                         C137845 * (C138003 + std::pow(C137736, 7) * bs[7] *
                                                  C137991 * C137953)))) /
        C137584;
    const double C68554 = (4 * (2 * C138408 + C137845 * C138541) +
                           C137845 * (3 * C138541 + C137845 * C138816)) /
                          C137581;
    const double C69081 =
        (2 * C138408 + C137845 * C138541 + C138816 * C138027) / C137581;
    const double C71365 =
        (C137888 * (3 * C138541 + C137845 * C138816)) / C137581;
    const double C88979 = C63570 * C88974;
    const double C134910 = (4 * (2 * C138734 + C137888 * C138738) +
                            C137888 * (3 * C138738 + C137888 * C139020)) /
                           C137581;
    const double C138112 = C137845 * C137885;
    const double C2297 =
        (2 * C137730 * C137981 + C137730 * C137986 + ae * C137888 * C137885 +
         C137888 *
             (ae * C137885 +
              C137888 * (2 * C137730 * C137984 +
                         C137730 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C2481 =
        (2 * C137730 * C138018 + C137730 * C138023 + ae * C137888 * C137885 +
         C137888 *
             (ae * C137885 +
              C137888 * (2 * C137730 * C138021 +
                         C137730 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C3816 =
        (ae * (3 * C137867 + C137730 * C137885) +
         C137888 *
             (3 * C137986 +
              C137730 * (2 * C137730 * C137984 +
                         C137730 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C3972 =
        (ae * (3 * C137867 + C137730 * C137885) +
         C137888 *
             (3 * C138023 +
              C137730 * (2 * C137730 * C138021 +
                         C137730 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C4616 =
        (2 * ae * C137888 * C137885 +
         C137845 * C137888 *
             (2 * C137730 * C137968 +
              C137730 * (C137968 + (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734))) /
        C137584;
    const double C192 = (4 * (2 * C137858 + C137730 * C137867) +
                         C137730 * (3 * C137867 + C137730 * C137885)) /
                        C137581;
    const double C1877 =
        (2 * C137858 + C137730 * C137867 + C137885 * C138027) / C137581;
    const double C3496 =
        (C137888 * (3 * C137867 + C137730 * C137885)) / C137581;
    const double C43623 = C186 * C43387;
    const double C134968 = (4 * (2 * C138748 + C137888 * C138750) +
                            C137888 * (3 * C138750 + C137888 * C139026)) /
                           C137581;
    const double C138246 = C137888 * C137928;
    const double C1364 =
        (2 * C137730 * C137981 + C137730 * C137986 + ae * C137845 * C137928 +
         C137845 *
             (ae * C137928 +
              C137845 * (2 * C137730 * C137984 +
                         C137730 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C1548 =
        (2 * C137730 * C138018 + C137730 * C138023 + ae * C137845 * C137928 +
         C137845 *
             (ae * C137928 +
              C137845 * (2 * C137730 * C138021 +
                         C137730 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C3095 =
        (ae * (3 * C137910 + C137730 * C137928) +
         C137845 *
             (3 * C137986 +
              C137730 * (2 * C137730 * C137984 +
                         C137730 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C3251 =
        (ae * (3 * C137910 + C137730 * C137928) +
         C137845 *
             (3 * C138023 +
              C137730 * (2 * C137730 * C138021 +
                         C137730 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C5058 =
        (2 * ae * C137845 * C137928 +
         C137888 * C137845 *
             (2 * C137730 * C138042 +
              C137730 * (C138042 + (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734))) /
        C137584;
    const double C279 = (4 * (2 * C137901 + C137730 * C137910) +
                         C137730 * (3 * C137910 + C137730 * C137928)) /
                        C137581;
    const double C1058 =
        (2 * C137901 + C137730 * C137910 + C137928 * C137953) / C137581;
    const double C2857 =
        (C137845 * (3 * C137910 + C137730 * C137928)) / C137581;
    const double C20881 = C273 * C20431;
    const double C138910 = C137888 * C138871;
    const double C68665 = (4 * (2 * C138435 + C137845 * C138605) +
                           C137845 * (3 * C138605 + C137845 * C138871)) /
                          C137581;
    const double C139558 = C139519 - C139545;
    const double C139559 = C139523 - C139547;
    const double C139560 = C139526 - C139549;
    const double C139561 = C139533 - C139550;
    const double C139562 = C139528 - C139552;
    const double C139563 = C139537 - C139553;
    const double C137592 = C139301 - C137591;
    const double C14924 = C14909 + C14910;
    const double C32397 = C32368 + C32369;
    const double C64381 = C64362 + C64363;
    const double C64378 = C64356 + C64357;
    const double C64377 = C64354 + C64355;
    const double C64376 = C64352 + C64353;
    const double C64643 = C64632 + C64633;
    const double C64642 = C64628 + C64629;
    const double C64641 = C64626 + C64627;
    const double C64640 = C64623 + C64624;
    const double C67317 = C67304 + C67305;
    const double C67315 = C67300 + C67301;
    const double C67635 = C67625 + C67626;
    const double C67634 = C67622 + C67623;
    const double C69342 = C69334 + C69335;
    const double C78058 = C78041 + C78042;
    const double C78056 = C78037 + C78038;
    const double C78055 = C78035 + C78036;
    const double C78054 = C78029 + C78030;
    const double C78053 = C78027 + C78028;
    const double C78397 = C78387 + C78388;
    const double C83605 = C83597 + C83598;
    const double C89206 = C89201 + C89202;
    const double C89205 = C89199 + C89200;
    const double C137686 = C139465 - C137685;
    const double C13710 = C13704 + C13693;
    const double C13709 = C13703 + C13690;
    const double C13706 = C13700 + C13681;
    const double C14687 = C14683 + C14666;
    const double C15719 = C15715 + C15698;
    const double C16688 = C16686 + C14678;
    const double C17616 = C17614 + C15710;
    const double C111100 = C111096 + C15702;
    const double C111097 = C111093 + C15701;
    const double C122117 = C122115 + C26981;
    const double C13708 = C13702 + C13687;
    const double C13707 = C13701 + C13684;
    const double C47274 = C47268 + C47257;
    const double C47273 = C47267 + C47254;
    const double C47270 = C47264 + C47245;
    const double C48233 = C48229 + C48212;
    const double C49235 = C49231 + C49214;
    const double C50196 = C50194 + C48224;
    const double C51124 = C51122 + C49226;
    const double C78186 = C78182 + C49218;
    const double C78183 = C78179 + C49217;
    const double C89284 = C89282 + C60317;
    const double C47272 = C47266 + C47251;
    const double C47271 = C47265 + C47248;
    const double C446 = C442 + C427;
    const double C32526 = C32523 + C32509;
    const double C137716 = C139480 - C137715;
    const double C30890 = C30884 + C30873;
    const double C30889 = C30883 + C30870;
    const double C30886 = C30880 + C30861;
    const double C31863 = C31859 + C31842;
    const double C33001 = C32997 + C32980;
    const double C33920 = C33918 + C31854;
    const double C34872 = C34870 + C32992;
    const double C77579 = C77575 + C31846;
    const double C77576 = C77572 + C31845;
    const double C81657 = C81655 + C36108;
    const double C83170 = C83168 + C37605;
    const double C87140 = C87138 + C41473;
    const double C30888 = C30882 + C30867;
    const double C30887 = C30881 + C30864;
    const double C77578 = C77574 + C31847;
    const double C77577 = C77573 + C31844;
    const double C93201 = C93195 + C93184;
    const double C93200 = C93194 + C93181;
    const double C93197 = C93191 + C93172;
    const double C94160 = C94156 + C94139;
    const double C95256 = C95252 + C95235;
    const double C96175 = C96173 + C94151;
    const double C97127 = C97125 + C95247;
    const double C110550 = C110546 + C94143;
    const double C110547 = C110543 + C94142;
    const double C114526 = C114524 + C98335;
    const double C116039 = C116037 + C99830;
    const double C119995 = C119993 + C103666;
    const double C93199 = C93193 + C93178;
    const double C93198 = C93192 + C93175;
    const double C110549 = C110545 + C94144;
    const double C110548 = C110544 + C94141;
    const double C741 = C737 + C722;
    const double C15154 = C15151 + C15140;
    const double C959 = C139465 * C946;
    const double C13449 = C139555 * C946;
    const double C14265 = C13351 * C946;
    const double C47013 = C139555 * C946;
    const double C47829 = C46915 * C946;
    const double C14537 = C13349 * C1166;
    const double C14523 = C139544 * C1166;
    const double C48083 = C46913 * C1166;
    const double C48069 = C139544 * C1166;
    const double C64367 = C139301 * C1166;
    const double C2006 = C139480 * C1993;
    const double C30401 = C139557 * C1993;
    const double C32243 = C30255 * C1993;
    const double C92712 = C139557 * C1993;
    const double C94522 = C92566 * C1993;
    const double C32748 = C13349 * C2393;
    const double C32742 = C139544 * C2393;
    const double C78392 = C139301 * C2393;
    const double C95012 = C46913 * C2393;
    const double C95006 = C139544 * C2393;
    const double C219 = C206 + C207;
    const double C306 = C293 + C294;
    const double C13471 = C13452 + C13453;
    const double C30423 = C30404 + C30405;
    const double C47035 = C47016 + C47017;
    const double C92734 = C92715 + C92716;
    const double C1086 = C1072 + C1073;
    const double C14549 = C14518 + C14519;
    const double C31215 = C31200 + C31201;
    const double C48095 = C48064 + C48065;
    const double C64382 = C64364 + C64365;
    const double C93520 = C93505 + C93506;
    const double C1905 = C1891 + C1892;
    const double C15387 = C15372 + C15373;
    const double C32395 = C32364 + C32365;
    const double C48909 = C48894 + C48895;
    const double C78057 = C78039 + C78040;
    const double C94674 = C94643 + C94644;
    const double C1251 =
        (C137730 * C137958 + C138105 + C138105 +
         C137845 * (2 * ae * C137858 + C137845 * C137730 * C137963)) /
        C137584;
    const double C4944 =
        (C138105 + C137888 * (ae * C137901 + C137845 * C137730 * C138018)) /
        C137584;
    const double C963 = C139465 * C941;
    const double C1265 = C186 * C941;
    const double C1373 = C273 * C941;
    const double C14271 = C13351 * C941;
    const double C14267 = C139555 * C941;
    const double C14524 = C13356 * C941;
    const double C14673 = C13439 * C941;
    const double C14663 = C13440 * C941;
    const double C31525 = C30391 * C941;
    const double C47835 = C46915 * C941;
    const double C47831 = C139555 * C941;
    const double C48070 = C46920 * C941;
    const double C48219 = C47003 * C941;
    const double C48209 = C47004 * C941;
    const double C63793 = C63635 * C941;
    const double C64370 = C63570 * C941;
    const double C64473 = C63633 * C941;
    const double C64469 = C63634 * C941;
    const double C93825 = C92702 * C941;
    const double C4285 = C139465 * C4276;
    const double C4620 = C186 * C4276;
    const double C4735 = C273 * C4276;
    const double C15375 = C139555 * C4276;
    const double C15695 = C13440 * C4276;
    const double C18309 = C13351 * C4276;
    const double C18600 = C13356 * C4276;
    const double C18757 = C13439 * C4276;
    const double C31521 = C30392 * C4276;
    const double C35702 = C30391 * C4276;
    const double C48897 = C139555 * C4276;
    const double C49211 = C47004 * C4276;
    const double C51817 = C46915 * C4276;
    const double C52096 = C46920 * C4276;
    const double C52253 = C47003 * C4276;
    const double C65191 = C63634 * C4276;
    const double C67308 = C63570 * C4276;
    const double C67425 = C63633 * C4276;
    const double C93821 = C92703 * C4276;
    const double C97935 = C92702 * C4276;
    const double C2580 =
        (C137730 * C138032 + C138239 + C138239 +
         C137888 * (2 * ae * C137901 + C137888 * C137730 * C138037)) /
        C137584;
    const double C4730 =
        (C138239 + C137845 * (ae * C137858 + C137888 * C137730 * C137981)) /
        C137584;
    const double C2010 = C139480 * C1988;
    const double C2490 = C186 * C1988;
    const double C2594 = C273 * C1988;
    const double C16035 = C13439 * C1988;
    const double C32249 = C30255 * C1988;
    const double C32245 = C139557 * C1988;
    const double C32743 = C13356 * C1988;
    const double C32987 = C30391 * C1988;
    const double C32977 = C30392 * C1988;
    const double C49548 = C47003 * C1988;
    const double C78393 = C63570 * C1988;
    const double C94528 = C92566 * C1988;
    const double C94524 = C139557 * C1988;
    const double C95007 = C46920 * C1988;
    const double C95242 = C92702 * C1988;
    const double C95232 = C92703 * C1988;
    const double C125790 = C125482 * C1988;
    const double C127203 = C125480 * C1988;
    const double C127199 = C125481 * C1988;
    const double C1372 = C1088 * C186;
    const double C14391 = C1088 * C13356;
    const double C14800 = C1088 * C13439;
    const double C14795 = C1088 * C13440;
    const double C47953 = C1088 * C46920;
    const double C48342 = C1088 * C47003;
    const double C48339 = C1088 * C47004;
    const double C64272 = C1088 * C63570;
    const double C1674 = C1670 + C1661;
    const double C31864 = C31860 + C31849;
    const double C94161 = C94157 + C94146;
    const double C2489 = C1907 * C273;
    const double C32115 = C1907 * C13356;
    const double C32869 = C1907 * C30391;
    const double C32864 = C1907 * C30392;
    const double C94410 = C1907 * C46920;
    const double C95129 = C1907 * C92702;
    const double C95126 = C1907 * C92703;
    const double C126639 = C1907 * C63570;
    const double C2211 = C2207 + C2198;
    const double C15720 = C15716 + C15705;
    const double C49236 = C49232 + C49221;
    const double C4734 = C4410 * C186;
    const double C15825 = C4410 * C13440;
    const double C18451 = C4410 * C13356;
    const double C18902 = C4410 * C13439;
    const double C49341 = C4410 * C47004;
    const double C51959 = C4410 * C46920;
    const double C52396 = C4410 * C47003;
    const double C67196 = C4410 * C63570;
    const double C5070 = C5068 + C5062;
    const double C31862 = C31858 + C31839;
    const double C36120 = C36118 + C36111;
    const double C94159 = C94155 + C94136;
    const double C98347 = C98345 + C98338;
    const double C4287 = C139465 * C4280;
    const double C15371 = C139555 * C4280;
    const double C18313 = C13351 * C4280;
    const double C48893 = C139555 * C4280;
    const double C51821 = C46915 * C4280;
    const double C137764 = C137763 + C137756;
    const double C843 =
        (C137845 * C137759 + C138047 + C138047 +
         C137730 * (2 * ae * C137845 * C137755 + C137730 * C137845 * C137785)) /
        C137584;
    const double C949 = (ae * C137851 + C137730 * C137855 + C138047 +
                         C137845 * (C137762 + C137845 * C137866)) /
                        C137584;
    const double C1169 = (ae * C137851 + C137730 * C137936 + C138047 +
                          C137845 * (C137762 + C137845 * C137941)) /
                         C137584;
    const double C4398 = (C138047 + C137888 * C137845 * C137909) / C137584;
    const double C4842 = (C138047 + C137888 * C137845 * C137999) / C137584;
    const double C4286 = C186 * C4164;
    const double C4404 = C273 * C4164;
    const double C15256 = C13356 * C4164;
    const double C15370 = C13440 * C4164;
    const double C18312 = C13439 * C4164;
    const double C18609 = C13349 * C4164;
    const double C18605 = C139544 * C4164;
    const double C31198 = C30392 * C4164;
    const double C35290 = C30391 * C4164;
    const double C48778 = C46920 * C4164;
    const double C48892 = C47004 * C4164;
    const double C51820 = C47003 * C4164;
    const double C52105 = C46913 * C4164;
    const double C52101 = C139544 * C4164;
    const double C64883 = C63570 * C4164;
    const double C67307 = C139301 * C4164;
    const double C93503 = C92703 * C4164;
    const double C97533 = C92702 * C4164;
    const double C1776 =
        (C137888 * C137759 + C138149 + C138149 +
         C137730 * (2 * ae * C137888 * C137755 + C137730 * C137888 * C137785)) /
        C137584;
    const double C1996 = (ae * C137894 + C137730 * C137898 + C138149 +
                          C137888 * (C137762 + C137888 * C137909)) /
                         C137584;
    const double C2396 = (ae * C137894 + C137730 * C137994 + C138149 +
                          C137888 * (C137762 + C137888 * C137999)) /
                         C137584;
    const double C4512 = (C138149 + C137845 * C137888 * C137941) / C137584;
    const double C14554 = C14528 + C14529;
    const double C48100 = C48074 + C48075;
    const double C64384 = C64368 + C64369;
    const double C32400 = C32374 + C32375;
    const double C78059 = C78045 + C78046;
    const double C94679 = C94653 + C94654;
    const double C38410 = C139465 * C6882;
    const double C78505 = C139555 * C6882;
    const double C84025 = C46915 * C6882;
    const double C111404 = C139555 * C6882;
    const double C116880 = C13351 * C6882;
    const double C138379 = C138378 + C138375;
    const double C8915 =
        (C137888 * C137958 + C138461 + C138461 +
         C137845 * (2 * ae * C137888 * C137856 + C137845 * C137888 * C137963)) /
        C137584;
    const double C138530 = C138529 + C138526;
    const double C6959 =
        (C137845 * C138032 + C138438 + C138438 +
         C137888 * (2 * ae * C138435 + C137888 * C137845 * C138037)) /
        C137584;
    const double C8995 = (ae * C137851 + C137888 * C137978 + C138438 +
                          C137845 * (ae * (C137888 * C137899 + C137752) +
                                     C137845 * (C137859 + C137888 * C137981))) /
                         C137584;
    const double C6963 = C273 * C6491;
    const double C21207 = C139480 * C6491;
    const double C36109 = C30392 * C6491;
    const double C38409 = C186 * C6491;
    const double C38513 = C30391 * C6491;
    const double C69578 = C63570 * C6491;
    const double C78504 = C47004 * C6491;
    const double C80825 = C139557 * C6491;
    const double C83488 = C30255 * C6491;
    const double C84024 = C47003 * C6491;
    const double C98336 = C92703 * C6491;
    const double C100722 = C92702 * C6491;
    const double C111403 = C13440 * C6491;
    const double C113694 = C139557 * C6491;
    const double C116352 = C92566 * C6491;
    const double C116879 = C13439 * C6491;
    const double C126465 = C125482 * C6491;
    const double C129470 = C125481 * C6491;
    const double C131285 = C125480 * C6491;
    const double C35969 = C139465 * C4943;
    const double C78503 = C139555 * C4943;
    const double C81515 = C46915 * C4943;
    const double C111402 = C139555 * C4943;
    const double C114384 = C13351 * C4943;
    const double C14806 = C14798 + C14799;
    const double C64379 = C64358 + C64359;
    const double C77253 = C77248 + C77249;
    const double C110224 = C110219 + C110220;
    const double C35565 = C35558 + C4618;
    const double C111094 = C111087 + C15700;
    const double C113973 = C113969 + C18754;
    const double C35150 = C35136 + C35137;
    const double C78180 = C78173 + C49216;
    const double C81104 = C81100 + C52250;
    const double C67316 = C67302 + C67303;
    const double C77824 = C77809 + C77810;
    const double C80686 = C80678 + C80679;
    const double C110768 = C110753 + C110754;
    const double C113555 = C113547 + C113548;
    const double C38111 = C38106 + C6652;
    const double C111095 = C111089 + C15703;
    const double C116569 = C116563 + C21431;
    const double C21534 = C21532 + C21533;
    const double C37808 = C37802 + C37803;
    const double C78181 = C78175 + C49219;
    const double C83711 = C83705 + C54845;
    const double C69343 = C69336 + C69337;
    const double C77829 = C77819 + C77820;
    const double C81244 = C81240 + C81241;
    const double C83385 = C83377 + C83378;
    const double C83819 = C83815 + C83816;
    const double C110773 = C110763 + C110764;
    const double C114113 = C114109 + C114110;
    const double C116249 = C116241 + C116242;
    const double C116677 = C116673 + C116674;
    const double C447 = C443 + C430;
    const double C448 = C444 + C433;
    const double C1281 = C1277 + C1261;
    const double C2214 = C2210 + C2194;
    const double C32527 = C32524 + C32513;
    const double C126643 = C126633 + C126634;
    const double C18901 = C139480 * C4729;
    const double C77245 = C139557 * C4729;
    const double C81243 = C30255 * C4729;
    const double C110216 = C139557 * C4729;
    const double C114112 = C92566 * C4729;
    const double C32875 = C32867 + C32868;
    const double C78398 = C78389 + C78390;
    const double C78511 = C78506 + C78507;
    const double C111410 = C111405 + C111406;
    const double C526 = C509 + C523;
    const double C660 = C643 + C657;
    const double C742 = C738 + C725;
    const double C527 = C524 + C514;
    const double C661 = C658 + C648;
    const double C743 = C739 + C728;
    const double C1677 = C1673 + C1657;
    const double C15155 = C15152 + C15144;
    const double C64276 = C64266 + C64267;
    const double C2610 = C2606 + C2590;
    const double C19327 = C19325 + C19319;
    const double C137807 = C137799 + C137789;
    const double C15385 = C139555 * C6413;
    const double C35145 = C139465 * C6413;
    const double C48907 = C139555 * C6413;
    const double C137792 = C137791 + C137780;
    const double C138055 = ae * C138054;
    const double C5805 = (2 * C138046 + C137845 * C138054) / C137581;
    const double C8594 = (C137888 * C138054) / C137581;
    const double C8680 = (C137888 * (C137866 + C138061 +
                                     C137845 * (C137789 + C137845 * C137880))) /
                         C137584;
    const double C138295 = ae * C138294;
    const double C15263 = C13356 * C6327;
    const double C15384 = C13440 * C6327;
    const double C15494 = C273 * C6327;
    const double C21319 = C139544 * C6327;
    const double C35144 = C186 * C6327;
    const double C35292 = C30392 * C6327;
    const double C48785 = C46920 * C6327;
    const double C48906 = C47004 * C6327;
    const double C54735 = C139544 * C6327;
    const double C64886 = C63570 * C6327;
    const double C78050 = C139301 * C6327;
    const double C97535 = C92703 * C6327;
    const double C138157 = ae * C138156;
    const double C10622 = (2 * C138148 + C137888 * C138156) / C137581;
    const double C68614 =
        (4 * (2 * C138540 + ae * C138541 + C137845 * C138815) +
         ae * (3 * C138541 + C137845 * C138816) +
         C137845 *
             (3 * C138815 + ae * C138816 +
              C137845 * (2 * C138811 + ae * C138812 +
                         C137845 * (C137874 + ae * C137845 * C137815 +
                                    C137845 * (ae * C137815 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C69171 =
        (2 * C138540 + ae * C138541 + C137845 * C138815 +
         (2 * C138811 + ae * C138812 +
          C137845 * (C137874 + ae * C137845 * C137815 +
                     C137845 * (ae * C137815 + C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))) *
             C138027) /
        C137584;
    const double C71449 =
        (C137888 *
         (3 * C138815 + ae * C138816 +
          C137845 * (2 * C138811 + ae * C138812 +
                     C137845 * (C137874 + ae * C137845 * C137815 +
                                C137845 * (ae * C137815 +
                                           C137845 * std::pow(C137736, 7) *
                                               bs[7] * C137849))))) /
        C137584;
    const double C73448 =
        (2 * C137888 * C138815 +
         C137888 * (C138815 +
                    (C137874 + ae * C137845 * C137815 +
                     C137845 * (ae * C137815 + C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C137849)) *
                        C138027)) /
        C137584;
    const double C68726 =
        (4 * (2 * C138549 + ae * C138541 + C137845 * C138825) +
         ae * (3 * C138541 + C137845 * C138816) +
         C137845 *
             (3 * C138825 + ae * C138816 +
              C137845 * (2 * C138823 + ae * C138812 +
                         C137845 * (C137945 + ae * C137845 * C137815 +
                                    C137845 * (ae * C137815 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))))) /
        C137584;
    const double C83498 = C83493 + C83494;
    const double C116362 = C116357 + C116358;
    const double C135030 =
        (4 * (2 * C138737 + ae * C138738 + C137888 * C139019) +
         ae * (3 * C138738 + C137888 * C139020) +
         C137888 *
             (3 * C139019 + ae * C139020 +
              C137888 * (2 * C139015 + ae * C139016 +
                         C137888 * (C137917 + ae * C137888 * C137815 +
                                    C137888 * (ae * C137815 +
                                               C137888 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))))) /
        C137584;
    const double C135250 =
        (4 * (2 * C138756 + ae * C138738 + C137888 * C139032) +
         ae * (3 * C138738 + C137888 * C139020) +
         C137888 *
             (3 * C139032 + ae * C139020 +
              C137888 * (2 * C139030 + ae * C139016 +
                         C137888 * (C138003 + ae * C137888 * C137815 +
                                    C137888 * (ae * C137815 +
                                               C137888 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))))) /
        C137584;
    const double C68674 = C68671 + C68672;
    const double C68732 = C68728 + C68729;
    const double C69256 = C69253 + C69254;
    const double C69344 = C69338 + C69339;
    const double C86511 = C86506 + C86507;
    const double C119366 = C119361 + C119362;
    const double C71533 = C71530 + C71531;
    const double C71615 = C71611 + C71612;
    const double C82753 = C82748 + C82749;
    const double C115622 = C115617 + C115618;
    const double C134977 = C134974 + C134975;
    const double C135088 = C135084 + C135085;
    const double C18161 = C13349 * C4168;
    const double C18155 = C139544 * C4168;
    const double C51669 = C46913 * C4168;
    const double C51663 = C139544 * C4168;
    const double C66976 = C139301 * C4168;
    const double C20991 = C13349 * C6331;
    const double C54423 = C46913 * C6331;
    const double C69085 = C139301 * C6331;
    const double C137827 = C137824 * ae;
    const double C2775 = (C137845 * (3 * C137867 + C137730 * C137885) +
                          (3 * C137781 + C137730 * C137824) * ae) /
                         C137581;
    const double C3578 = (C137888 * (3 * C137910 + C137730 * C137928) +
                          (3 * C137781 + C137730 * C137824) * ae) /
                         C137581;
    const double C4396 =
        (C137888 * C137845 * C137928 + C137845 * C137824 * ae) / C137581;
    const double C111 = 4 * (2 * C137753 + C137730 * C137781) +
                        C137730 * (3 * C137781 + C137730 * C137824);
    const double C834 = 2 * C137753 + C137730 * C137781 + C137824 * C137953;
    const double C1767 = 2 * C137753 + C137730 * C137781 + C137824 * C138027;
    const double C2695 = C137845 * (3 * C137781 + C137730 * C137824);
    const double C3416 = C137888 * (3 * C137781 + C137730 * C137824);
    const double C4162 = C137888 * C137845 * C137824;
    const double C138356 = ae * C138353;
    const double C138355 = C137845 * C138353;
    const double C138454 = C137888 * C138353;
    const double C138508 = ae * C138505;
    const double C138507 = C137888 * C138505;
    const double C138427 = C138426 + C138354;
    const double C138566 = C137869 + C138564;
    const double C138628 = C138364 + C138627;
    const double C138663 = ae * C138661;
    const double C138777 = C137912 + C138774;
    const double C138642 = C138641 + C138563;
    const double C24857 = C273 * C24215;
    const double C37602 = C30392 * C24215;
    const double C99827 = C92703 * C24215;
    const double C138710 = ae * C138708;
    const double C138709 = C137888 * C138708;
    const double C137832 = C137830 + C137816;
    const double C138070 = ae * C138068;
    const double C138336 = C137845 * C138068;
    const double C138440 = C137888 * C138068;
    const double C20985 = (C138054 + C138068 * C138027) / C137581;
    const double C138172 = ae * C138170;
    const double C138476 = C137888 * C138170;
    const double C138301 = ae * C138299;
    const double C138398 = C138059 + C138397;
    const double C138849 = C138847 + C138839;
    const double C138898 = ae * C138896;
    const double C138943 = C137888 * C138896;
    const double C139061 = C139060 + C139053;
    const double C137831 = C137730 * C137829;
    const double C5808 =
        (2 * ae *
             (2 * C137845 * C137755 + C137845 * (C137755 + C137779 * C137953)) +
         C137730 * (2 * C138057 + C137845 * C138066)) /
        C137584;
    const double C8597 = (2 * ae * C137888 * (C137755 + C137779 * C137953) +
                          C137730 * C137888 * C138066) /
                         C137584;
    const double C20281 =
        (2 * ae *
             (3 * (C137755 + C137779 * C137953) +
              C137845 *
                  (2 * C138250 + C137845 * (C137779 + C137815 * C137953))) +
         C137730 * (3 * C138066 +
                    C137845 * (2 * C138251 +
                               C137845 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C20282 = (3 * (C137759 + C137785 * C137953) +
                           C137845 * (2 * C138057 + C137845 * C138066)) /
                          C137584;
    const double C20987 =
        (2 * ae * (C138541 + (C137779 + C137815 * C137953) * C138027) +
         C137730 *
             (C138066 + (C137822 + (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137953) *
                            C138027)) /
        C137584;
    const double C20988 =
        (C137759 + C137785 * C137953 + C138066 * C138027) / C137584;
    const double C24002 =
        (C137888 * (2 * C138057 + C137845 * C138066)) / C137584;
    const double C68555 =
        (4 * (2 * C138057 + C137845 * C138066) +
         C137845 * (3 * C138066 +
                    C137845 * (2 * C138251 +
                               C137845 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C69082 =
        (2 * C138057 + C137845 * C138066 +
         (2 * C138251 +
          C137845 * (C137822 + (C137802 * C137803 +
                                C137734 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C137953)) *
             C138027) /
        C137584;
    const double C71366 =
        (C137888 * (3 * C138066 +
                    C137845 * (2 * C138251 +
                               C137845 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C73393 =
        (2 * C137888 * C138066 +
         C137888 *
             (C138066 + (C137822 + (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137953) *
                            C138027)) /
        C137584;
    const double C10625 =
        (2 * ae *
             (2 * C137888 * C137755 + C137888 * (C137755 + C137779 * C138027)) +
         C137730 * (2 * C138159 + C137888 * C138168)) /
        C137584;
    const double C43307 =
        (2 * ae *
             (3 * (C137755 + C137779 * C138027) +
              C137888 *
                  (2 * C138271 + C137888 * (C137779 + C137815 * C138027))) +
         C137730 * (3 * C138168 +
                    C137888 * (2 * C138272 +
                               C137888 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C138027)))) /
        C137584;
    const double C43308 = (3 * (C137759 + C137785 * C138027) +
                           C137888 * (2 * C138159 + C137888 * C138168)) /
                          C137584;
    const double C134911 =
        (4 * (2 * C138159 + C137888 * C138168) +
         C137888 * (3 * C138168 +
                    C137888 * (2 * C138272 +
                               C137888 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C138027)))) /
        C137584;
    const double C138261 = C138260 + C138256;
    const double C26695 =
        (2 * ae *
             (2 * C137888 * C138250 +
              C137888 * (C138250 + C137845 * C137815 * C138027)) +
         C137730 * (2 * C138297 +
                    C137888 * (C138251 +
                               C137845 *
                                   (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C138027))) /
        C137584;
    const double C88975 =
        (3 * (C138057 + C138251 * C138027) +
         C137888 * (2 * C138297 +
                    C137888 * (C138251 +
                               C137845 *
                                   (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C138027))) /
        C137584;
    const double C20993 = C139544 * C6330;
    const double C54425 = C139544 * C6330;
    const double C77691 = C139301 * C6330;
    const double C83274 = C139301 * C26696;
    const double C138282 = C138281 + C138277;
    const double C422 =
        (4 * (2 * C137730 * C137963 + C137730 * C137970) +
         C137730 * (3 * C137970 +
                    C137730 * (2 * C137730 * C137968 +
                               C137730 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C1253 =
        (2 * ae * (2 * C137858 + C137730 * C137867) +
         C137845 * (2 * C137730 * C137963 + C137730 * C137970)) /
        C137584;
    const double C2185 =
        (C137958 + C137963 * C137734 + C137970 * C138027) / C137584;
    const double C2186 =
        (C137888 * (2 * C137730 * C137963 + C137730 * C137970)) / C137584;
    const double C2187 =
        (2 * C137730 * C137963 + C137730 * C137970 +
         (2 * C137730 * C137968 +
          C137730 * (C137968 + (C137802 * C137803 +
                                C137953 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C137734)) *
             C138027) /
        C137584;
    const double C3014 =
        (2 * ae * (3 * C137867 + C137730 * C137885) +
         C137845 * (3 * C137970 +
                    C137730 * (2 * C137730 * C137968 +
                               C137730 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C3735 =
        (C137888 * (3 * C137970 +
                    C137730 * (2 * C137730 * C137968 +
                               C137730 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C4615 =
        (2 * ae * C137888 * C137867 + C137845 * C137888 * C137970) / C137584;
    const double C6646 =
        (2 * ae * (C137867 + C137881 * C138027) +
         C137845 *
             (C137970 + (C137968 + (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734) *
                            C138027)) /
        C137584;
    const double C10845 =
        (2 * C137888 * C137970 +
         C137888 *
             (C137970 + (C137968 + (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734) *
                            C138027)) /
        C137584;
    const double C138561 = C138551 + C138557;
    const double C26975 =
        (2 * ae *
             (2 * C137888 * C137869 + C137888 * (C137869 + C138554 * C138027)) +
         C137845 * (2 * C138659 +
                    C137888 * (C138552 +
                               C137730 *
                                   (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C138027))) /
        C137584;
    const double C43617 =
        (3 * (C138361 + C138552 * C138027) +
         C137888 * (2 * C138659 +
                    C137888 * (C138552 +
                               C137730 *
                                   (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C138027))) /
        C137584;
    const double C138841 = C137845 * C138837;
    const double C89274 =
        (2 * ae *
             (3 * C138750 +
              C137888 *
                  (2 * C138900 + C137888 * (C137863 + C137876 * C138027))) +
         C137845 * (3 * C138894 +
                    C137888 * (2 * C138922 +
                               C137888 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C138027)))) /
        C137584;
    const double C135141 =
        (4 * (2 * C138665 + C137888 * C138894) +
         C137888 * (3 * C138894 +
                    C137888 * (2 * C138922 +
                               C137888 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C138027)))) /
        C137584;
    const double C138930 = C138921 + C138926;
    const double C717 =
        (4 * (2 * C137730 * C138037 + C137730 * C138044) +
         C137730 * (3 * C138044 +
                    C137730 * (2 * C137730 * C138042 +
                               C137730 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C1648 =
        (C138032 + C138037 * C137734 + C138044 * C137953) / C137584;
    const double C1649 =
        (C137845 * (2 * C137730 * C138037 + C137730 * C138044)) / C137584;
    const double C1650 =
        (2 * C137730 * C138037 + C137730 * C138044 +
         (2 * C137730 * C138042 +
          C137730 * (C138042 + (C137802 * C137803 +
                                C138027 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C137734)) *
             C137953) /
        C137584;
    const double C2582 =
        (2 * ae * (2 * C137901 + C137730 * C137910) +
         C137888 * (2 * C137730 * C138037 + C137730 * C138044)) /
        C137584;
    const double C3332 =
        (C137845 * (3 * C138044 +
                    C137730 * (2 * C137730 * C138042 +
                               C137730 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C4053 =
        (2 * ae * (3 * C137910 + C137730 * C137928) +
         C137888 * (3 * C138044 +
                    C137730 * (2 * C137730 * C138042 +
                               C137730 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C5057 =
        (2 * ae * C137845 * C137910 + C137888 * C137845 * C138044) / C137584;
    const double C6243 =
        (2 * C137845 * C138044 +
         C137845 *
             (C138044 + (C138042 + (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734) *
                            C137953)) /
        C137584;
    const double C9224 =
        (2 * ae * (C137910 + C137924 * C137953) +
         C137888 *
             (C138044 + (C138042 + (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734) *
                            C137953)) /
        C137584;
    const double C138770 = C138764 + C138765;
    const double C68999 =
        (4 * (2 * C138715 + C137845 * C138883) +
         C137845 * (3 * C138883 +
                    C137845 * (2 * C137845 * C138042 +
                               C137845 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C72002 =
        (2 * ae * (3 * C138605 + C137845 * C138871) +
         C137888 * (3 * C138883 +
                    C137845 * (2 * C137845 * C138042 +
                               C137845 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C138994 = C138984 + C138990;
    const double C139055 = C137888 * C139051;
    const double C138850 = C138848 * ae;
    const double C71524 = (C137888 * (3 * C138605 + C137845 * C138871) +
                           (3 * C138583 + C137845 * C138848) * ae) /
                          C137581;
    const double C68553 = 4 * (2 * C138373 + C137845 * C138583) +
                          C137845 * (3 * C138583 + C137845 * C138848);
    const double C69080 = 2 * C138373 + C137845 * C138583 + C138848 * C138027;
    const double C71364 = C137888 * (3 * C138583 + C137845 * C138848);
    const double C138955 = ae * C138952;
    const double C138954 = C137888 * C138952;
    const double C138999 = C138716 + C138997;
    const double C139057 = C139054 * ae;
    const double C134909 = 4 * (2 * C138524 + C137888 * C138794) +
                           C137888 * (3 * C138794 + C137888 * C139054);
    const double C138109 = ae * C138108;
    const double C942 = (C137851 + C137856 * C137734 + C137845 * C138108 +
                         C137845 * C137781 * ae) /
                        C137581;
    const double C4277 = (C137888 * C138108) / C137581;
    const double C6409 = (C138108 + C138353 * C138027) / C137581;
    const double C222 = C212 + C213;
    const double C441 = C434 + C435;
    const double C521 = C516 + C517;
    const double C3019 = C3016 + C1270;
    const double C2782 = C2778 + C2779;
    const double C13475 = C13460 + C13461;
    const double C13705 = C13695 + C13696;
    const double C47039 = C47024 + C47025;
    const double C47269 = C47259 + C47260;
    const double C1909 = C1899 + C1900;
    const double C2208 = C2200 + C2201;
    const double C2314 = C2309 + C2310;
    const double C34559 = C34556 + C34557;
    const double C96814 = C96811 + C96812;
    const double C3740 = C3737 + C2203;
    const double C3503 = C3499 + C3500;
    const double C3822 = C3820 + C3821;
    const double C30645 = C30638 + C30639;
    const double C92956 = C92949 + C92950;
    const double C21101 =
        (C137866 + C138061 + C137845 * C138536 +
         (C137880 + C138259 +
          C137845 * (C137828 +
                     C137845 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))) *
             C138027) /
        C137584;
    const double C26769 =
        (2 * C137888 * C138536 +
         C137888 * (C138536 +
                    (C137828 +
                     C137845 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849)) *
                        C138027)) /
        C137584;
    const double C198 =
        (4 * (2 * C137866 + ae * C137867 + C137730 * C137884) +
         ae * (3 * C137867 + C137730 * C137885) +
         C137730 *
             (3 * C137884 + ae * C137885 +
              C137730 * (2 * C137880 + ae * C137881 +
                         C137730 * (C137874 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C1883 =
        (C137855 + ae * C137858 + C137730 * C137866 + C137884 * C138027) /
        C137584;
    const double C1884 =
        (C137888 * (2 * C137866 + ae * C137867 + C137730 * C137884)) / C137584;
    const double C1885 =
        (2 * C137866 + ae * C137867 + C137730 * C137884 +
         (2 * C137880 + ae * C137881 +
          C137730 * (C137874 + ae * C137730 * C137876 +
                     C137730 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))) *
             C138027) /
        C137584;
    const double C3497 =
        (C137888 *
         (3 * C137884 + ae * C137885 +
          C137730 * (2 * C137880 + ae * C137881 +
                     C137730 * (C137874 + ae * C137730 * C137876 +
                                C137730 * (ae * C137876 +
                                           C137730 * std::pow(C137736, 7) *
                                               bs[7] * C137849))))) /
        C137584;
    const double C10683 =
        (2 * C137888 * C137884 +
         C137888 * (C137884 +
                    (C137874 + ae * C137730 * C137876 +
                     C137730 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849)) *
                        C138027)) /
        C137584;
    const double C365 =
        (4 * (2 * C137941 + ae * C137867 + C137730 * C137949) +
         ae * (3 * C137867 + C137730 * C137885) +
         C137730 *
             (3 * C137949 + ae * C137885 +
              C137730 * (2 * C137947 + ae * C137881 +
                         C137730 * (C137945 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))))) /
        C137584;
    const double C2103 =
        (C137936 + ae * C137858 + C137730 * C137941 + C137949 * C138027) /
        C137584;
    const double C2104 =
        (C137888 * (2 * C137941 + ae * C137867 + C137730 * C137949)) / C137584;
    const double C2105 =
        (2 * C137941 + ae * C137867 + C137730 * C137949 +
         (2 * C137947 + ae * C137881 +
          C137730 * (C137945 + ae * C137730 * C137876 +
                     C137730 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))) *
             C138027) /
        C137584;
    const double C3660 =
        (C137888 *
         (3 * C137949 + ae * C137885 +
          C137730 * (2 * C137947 + ae * C137881 +
                     C137730 * (C137945 + ae * C137730 * C137876 +
                                C137730 * (ae * C137876 +
                                           C137730 * std::pow(C137736, 7) *
                                               bs[7] * C137933))))) /
        C137584;
    const double C10792 =
        (2 * C137888 * C137949 +
         C137888 * (C137949 +
                    (C137945 + ae * C137730 * C137876 +
                     C137730 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933)) *
                        C138027)) /
        C137584;
    const double C32640 = C32635 + C32636;
    const double C94904 = C94899 + C94900;
    const double C6881 =
        (ae * C137901 + C137845 * C138390 + ae * C137888 * C138364 +
         C137888 *
             (C138367 + C137888 * (C137916 + C137845 * C137730 * C138021))) /
        C137584;
    const double C138368 = C137858 + C138366;
    const double C138458 = ae * C138457;
    const double C6651 = C186 * C6410;
    const double C15381 = C139555 * C6410;
    const double C15708 = C13440 * C6410;
    const double C15831 = C273 * C6410;
    const double C21322 = C13356 * C6410;
    const double C21429 = C13439 * C6410;
    const double C35143 = C139465 * C6410;
    const double C35704 = C30392 * C6410;
    const double C48903 = C139555 * C6410;
    const double C49224 = C47004 * C6410;
    const double C54738 = C46920 * C6410;
    const double C54843 = C47003 * C6410;
    const double C65194 = C63634 * C6410;
    const double C78051 = C63570 * C6410;
    const double C97937 = C92703 * C6410;
    const double C32525 = C32522 + C10850;
    const double C32871 = C32136 * C30392;
    const double C43396 = C32136 * C13356;
    const double C95131 = C32136 * C92703;
    const double C105577 = C32136 * C46920;
    const double C126641 = C32136 * C63570;
    const double C138836 = C138827 + C138586;
    const double C138588 = C138587 + C138582;
    const double C138633 = ae * C138632;
    const double C26768 = (2 * C138460 + C137888 * C138632) / C137581;
    const double C135146 = C135143 + C43624;
    const double C134976 = C134972 + C134973;
    const double C135089 = C135086 + C135087;
    const double C73656 =
        (2 * C138675 + ae * C138750 + C137888 * C138906 +
         ae * (2 * C138720 +
               C137888 * (C138716 +
                          C137888 * (C137888 * C137845 * C137919 + C138839) +
                          C137888 * C138833 * ae) +
               (C138578 + C138833 * C138027) * ae) +
         C137845 *
             (ae * (2 * C138792 +
                    C137888 *
                        (C137906 + C137888 * (C137888 * C137919 + C137811) +
                         C137888 * C137801 * ae) +
                    (C137768 + C137801 * C138027) * ae) +
              C137845 * (2 * C138903 + ae * (C137863 + C137876 * C138027) +
                         C137888 * (C137984 + ae * C137888 * C137876 +
                                    C137888 * (ae * C137876 +
                                               C137888 * std::pow(C137736, 7) *
                                                   bs[7] * C137975))))) /
        C137584;
    const double C135199 =
        (4 * (2 * C138675 + ae * C138750 + C137888 * C138906) +
         ae * (3 * C138750 + C137888 * C139026) +
         C137888 *
             (3 * C138906 + ae * C139026 +
              C137888 * (2 * C138903 + ae * C138975 +
                         C137888 * (C137984 + ae * C137888 * C137876 +
                                    C137888 * (ae * C137876 +
                                               C137888 * std::pow(C137736, 7) *
                                                   bs[7] * C137975))))) /
        C137584;
    const double C135304 =
        (4 * (2 * C138762 + ae * C138750 + C137888 * C139038) +
         ae * (3 * C138750 + C137888 * C139026) +
         C137888 *
             (3 * C139038 + ae * C139026 +
              C137888 * (2 * C139036 + ae * C138975 +
                         C137888 * (C138021 + ae * C137888 * C137876 +
                                    C137888 * (ae * C137876 +
                                               C137888 * std::pow(C137736, 7) *
                                                   bs[7] * C138012))))) /
        C137584;
    const double C1908 = C1897 + C1898;
    const double C15392 = C15382 + C15383;
    const double C48914 = C48904 + C48905;
    const double C83388 = C83383 + C83384;
    const double C116252 = C116247 + C116248;
    const double C132989 = C132986 + C132987;
    const double C86401 = C86396 + C86397;
    const double C119256 = C119251 + C119252;
    const double C89063 = C89058 + C89059;
    const double C121906 = C121901 + C121902;
    const double C130749 = C130745 + C130746;
    const double C134971 = C126635 + C126636;
    const double C138243 = ae * C138242;
    const double C1989 = (C137894 + C137899 * C137734 + C137888 * C138242 +
                          C137888 * C137781 * ae) /
                         C137581;
    const double C3101 = C3099 + C3100;
    const double C309 = C299 + C300;
    const double C655 = C650 + C651;
    const double C736 = C729 + C730;
    const double C1090 = C1080 + C1081;
    const double C1565 = C1560 + C1561;
    const double C1671 = C1663 + C1664;
    const double C17001 = C16998 + C16999;
    const double C50509 = C50506 + C50507;
    const double C3337 = C3334 + C1666;
    const double C2864 = C2860 + C2861;
    const double C3257 = C3255 + C3256;
    const double C13945 = C13938 + C13939;
    const double C47509 = C47502 + C47503;
    const double C4058 = C4055 + C2599;
    const double C3585 = C3581 + C3582;
    const double C3978 = C3976 + C3977;
    const double C30427 = C30412 + C30413;
    const double C30885 = C30875 + C30876;
    const double C92738 = C92723 + C92724;
    const double C93196 = C93186 + C93187;
    const double C4412 = C4406 + C4407;
    const double C5069 = C5064 + C5065;
    const double C33919 = C33914 + C31855;
    const double C33311 = C33304 + C33305;
    const double C96174 = C96169 + C94152;
    const double C95566 = C95559 + C95560;
    const double C285 =
        (4 * (2 * C137909 + ae * C137910 + C137730 * C137927) +
         ae * (3 * C137910 + C137730 * C137928) +
         C137730 *
             (3 * C137927 + ae * C137928 +
              C137730 * (2 * C137923 + ae * C137924 +
                         C137730 * (C137917 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))))) /
        C137584;
    const double C1064 =
        (C137898 + ae * C137901 + C137730 * C137909 + C137927 * C137953) /
        C137584;
    const double C1065 =
        (C137845 * (2 * C137909 + ae * C137910 + C137730 * C137927)) / C137584;
    const double C1066 =
        (2 * C137909 + ae * C137910 + C137730 * C137927 +
         (2 * C137923 + ae * C137924 +
          C137730 * (C137917 + ae * C137730 * C137919 +
                     C137730 * (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))) *
             C137953) /
        C137584;
    const double C2858 =
        (C137845 *
         (3 * C137927 + ae * C137928 +
          C137730 * (2 * C137923 + ae * C137924 +
                     C137730 * (C137917 + ae * C137730 * C137919 +
                                C137730 * (ae * C137919 +
                                           C137730 * std::pow(C137736, 7) *
                                               bs[7] * C137892))))) /
        C137584;
    const double C5922 =
        (2 * C137845 * C137927 +
         C137845 * (C137927 +
                    (C137917 + ae * C137730 * C137919 +
                     C137730 * (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892)) *
                        C137953)) /
        C137584;
    const double C582 =
        (4 * (2 * C137999 + ae * C137910 + C137730 * C138007) +
         ae * (3 * C137910 + C137730 * C137928) +
         C137730 *
             (3 * C138007 + ae * C137928 +
              C137730 * (2 * C138005 + ae * C137924 +
                         C137730 * (C138003 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))))) /
        C137584;
    const double C1464 =
        (C137994 + ae * C137901 + C137730 * C137999 + C138007 * C137953) /
        C137584;
    const double C1465 =
        (C137845 * (2 * C137999 + ae * C137910 + C137730 * C138007)) / C137584;
    const double C1466 =
        (2 * C137999 + ae * C137910 + C137730 * C138007 +
         (2 * C138005 + ae * C137924 +
          C137730 * (C138003 + ae * C137730 * C137919 +
                     C137730 * (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))) *
             C137953) /
        C137584;
    const double C3176 =
        (C137845 *
         (3 * C138007 + ae * C137928 +
          C137730 * (2 * C138005 + ae * C137924 +
                     C137730 * (C138003 + ae * C137730 * C137919 +
                                C137730 * (ae * C137919 +
                                           C137730 * std::pow(C137736, 7) *
                                               bs[7] * C137991))))) /
        C137584;
    const double C6137 =
        (2 * C137845 * C138007 +
         C137845 * (C138007 +
                    (C138003 + ae * C137730 * C137919 +
                     C137730 * (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991)) *
                        C137953)) /
        C137584;
    const double C15040 = C15035 + C15036;
    const double C48577 = C48572 + C48573;
    const double C138433 = ae * C138432;
    const double C6490 =
        (C137845 * C137901 + C137888 * C138432 + C137888 * C138363 * ae) /
        C137581;
    const double C138519 = C137901 + C138517;
    const double C15153 = C15150 + C6248;
    const double C14802 = C14412 * C13440;
    const double C20440 = C14412 * C13356;
    const double C48344 = C14412 * C47004;
    const double C53904 = C14412 * C46920;
    const double C64274 = C14412 * C63570;
    const double C19326 = C19324 + C9229;
    const double C18904 = C18466 * C13440;
    const double C24224 = C18466 * C13356;
    const double C52398 = C18466 * C47004;
    const double C57604 = C18466 * C46920;
    const double C67198 = C18466 * C63570;
    const double C31865 = C31861 + C31852;
    const double C94162 = C94158 + C94149;
    const double C138647 = ae * C138646;
    const double C21202 = (C137894 + C137899 * C137953 + C137888 * C138646 +
                           C137888 * C138583 * ae) /
                          C137581;
    const double C69004 = C69001 + C20882;
    const double C68673 = C68669 + C68670;
    const double C68897 = C68895 + C68896;
    const double C72007 = C72004 + C24858;
    const double C83169 = C83164 + C37604;
    const double C71532 = C71528 + C71529;
    const double C71852 = C71850 + C71851;
    const double C82751 = C82744 + C82745;
    const double C116038 = C116033 + C99829;
    const double C115620 = C115613 + C115614;
    const double C138723 = C138435 + C138721;
    const double C68837 =
        (4 * (2 * C138604 + ae * C138605 + C137845 * C138870) +
         ae * (3 * C138605 + C137845 * C138871) +
         C137845 *
             (3 * C138870 + ae * C138871 +
              C137845 * (2 * C138866 + ae * C138867 +
                         C137845 * (C137984 + ae * C137845 * C137919 +
                                    C137845 * (ae * C137919 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C137975))))) /
        C137584;
    const double C68948 =
        (4 * (2 * C138614 + ae * C138605 + C137845 * C138880) +
         ae * (3 * C138605 + C137845 * C138871) +
         C137845 *
             (3 * C138880 + ae * C138871 +
              C137845 * (2 * C138878 + ae * C138867 +
                         C137845 * (C138021 + ae * C137845 * C137919 +
                                    C137845 * (ae * C137919 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C138012))))) /
        C137584;
    const double C139050 = C139040 + C138797;
    const double C138799 = C138798 + C138793;
    const double C1089 = C1078 + C1079;
    const double C31220 = C31210 + C31211;
    const double C93525 = C93515 + C93516;
    const double C68668 = C64268 + C64269;
    const double C71527 = C67192 + C67193;
    const double C32405 = C32384 + C32385;
    const double C79918 = C79913 + C79914;
    const double C94684 = C94663 + C94664;
    const double C32398 = C32370 + C32371;
    const double C78060 = C78047 + C78048;
    const double C94677 = C94649 + C94650;
    const double C43551 = C43546 + C43547;
    const double C105722 = C105717 + C105718;
    const double C126809 = C126805 + C126806;
    const double C15709 = C139555 * C6647;
    const double C35562 = C139465 * C6647;
    const double C49225 = C139555 * C6647;
    const double C32515 = C139465 * C10846;
    const double C89279 = C139555 * C26976;
    const double C122112 = C139555 * C26976;
    const double C130978 = C139465 * C26976;
    const double C135144 = C139465 * C43618;
    const double C1280 = C1276 + C1258;
    const double C2213 = C2209 + C2191;
    const double C43627 = C43626 + C43621;
    const double C3097 = C1382 + C1368;
    const double C3818 = C2315 + C2301;
    const double C14928 = C14917 + C14918;
    const double C48465 = C48454 + C48455;
    const double C66048 = C66043 + C66044;
    const double C14925 = C14911 + C14912;
    const double C48462 = C48448 + C48449;
    const double C64644 = C64635 + C64636;
    const double C20742 = C20739 + C20740;
    const double C54191 = C54188 + C54189;
    const double C64645 = C64638 + C64639;
    const double C3253 = C1566 + C1552;
    const double C3974 = C2499 + C2485;
    const double C15147 = C139480 * C6244;
    const double C19322 = C139480 * C9225;
    const double C31853 = C139557 * C9225;
    const double C94150 = C139557 * C9225;
    const double C1676 = C1672 + C1654;
    const double C2609 = C2605 + C2587;
    const double C20885 = C20884 + C20880;
    const double C24861 = C24860 + C24856;
    const double C68559 = C63570 * C68554;
    const double C69088 = C63570 * C69081;
    const double C71370 = C63570 * C71365;
    const double C134915 = C63570 * C134910;
    const double C437 = C186 * C192;
    const double C2204 = C186 * C1877;
    const double C3739 = C186 * C3496;
    const double C135145 = C186 * C134968;
    const double C732 = C273 * C279;
    const double C1667 = C273 * C1058;
    const double C3336 = C273 * C2857;
    const double C69003 = C273 * C68665;
    const double C96 =
        (C139558 * C139322) / C139319 + (C139521 - C139546) / C139321;
    const double C97 =
        (C139559 * C139322) / C139319 + (2 * C139333 + C139558) / C139321;
    const double C98 = (C139322 * C139333) / C139336 + C139559 / C139321;
    const double C5796 =
        (C139560 * C139393) / C139319 + (C139529 - C139548) / C139321;
    const double C5797 =
        (C139561 * C139393) / C139319 + (2 * C139398 + C139560) / C139321;
    const double C5798 = (C139393 * C139398) / C139336 + C139561 / C139321;
    const double C10614 =
        (C139562 * C139421) / C139319 + (C139530 - C139551) / C139321;
    const double C10615 =
        (C139563 * C139421) / C139319 + (2 * C139426 + C139562) / C139321;
    const double C10616 = (C139421 * C139426) / C139336 + C139563 / C139321;
    const double C137593 = C137592 * C137586;
    const double C101 =
        (((0 - (C137582 * C137580) / C137581) * ae) / C137581 -
         (0 * be) / C137588) /
            (2 * C137581) -
        ((C137582 * ((C137592 * ae) / C137581 - C137580 / C137588) + C46913) *
         be) /
            C137581 +
        (0 * ae) / C137581 - C137587 / C137584;
    const double C103 =
        ((C137592 * ae) / C137581 - C137580 / C137588) / (2 * C137581) -
        ((C137582 * ((0 * ae) / C137581 - C137587 / C137584) + C139544) * be) /
            C137581;
    const double C13354 =
        (-C137580 / C137581) / (2 * C137581) - (C137592 * be) / C137581;
    const double C46918 = (C137592 * ae) / C137581 - C137580 / C137588;
    const double C64630 = C64381 * C273;
    const double C83026 = C64381 * C30391;
    const double C115895 = C64381 * C92702;
    const double C64625 = C64378 * C273;
    const double C77359 = C64378 * C30391;
    const double C110330 = C64378 * C92702;
    const double C64622 = C64376 * C273;
    const double C77352 = C64376 * C30391;
    const double C110323 = C64376 * C92702;
    const double C64649 = C64643 * C139480;
    const double C77361 = C64643 * C30255;
    const double C110332 = C64643 * C92566;
    const double C64648 = C64642 * C139480;
    const double C83027 = C64642 * C30255;
    const double C115896 = C64642 * C92566;
    const double C64647 = C64641 * C139480;
    const double C77358 = C64641 * C30255;
    const double C110329 = C64641 * C92566;
    const double C64646 = C64640 * C139480;
    const double C77353 = C64640 * C30255;
    const double C110324 = C64640 * C92566;
    const double C67627 = C67317 * C273;
    const double C77354 = C67317 * C30392;
    const double C78031 = C67317 * C47004;
    const double C80962 = C67317 * C47003;
    const double C81379 = C67317 * C30391;
    const double C110325 = C67317 * C92703;
    const double C110973 = C67317 * C13440;
    const double C113831 = C67317 * C13439;
    const double C114248 = C67317 * C92702;
    const double C128967 = C67317 * C186;
    const double C67624 = C67315 * C273;
    const double C77357 = C67315 * C30392;
    const double C80964 = C67315 * C47004;
    const double C86610 = C67315 * C47003;
    const double C86926 = C67315 * C30391;
    const double C110328 = C67315 * C92703;
    const double C113833 = C67315 * C13440;
    const double C119465 = C67315 * C13439;
    const double C119781 = C67315 * C92702;
    const double C133140 = C67315 * C186;
    const double C67639 = C67635 * C139480;
    const double C77355 = C67635 * C139557;
    const double C81378 = C67635 * C30255;
    const double C110326 = C67635 * C139557;
    const double C114247 = C67635 * C92566;
    const double C67638 = C67634 * C139480;
    const double C77356 = C67634 * C139557;
    const double C86927 = C67634 * C30255;
    const double C110327 = C67634 * C139557;
    const double C119782 = C67634 * C92566;
    const double C69577 = C69342 * C273;
    const double C78034 = C69342 * C47004;
    const double C81377 = C69342 * C30392;
    const double C83601 = C69342 * C47003;
    const double C83919 = C69342 * C30391;
    const double C110976 = C69342 * C13440;
    const double C114246 = C69342 * C92703;
    const double C116461 = C69342 * C13439;
    const double C116777 = C69342 * C92702;
    const double C128969 = C69342 * C186;
    const double C78068 = C78058 * C46915;
    const double C110980 = C78058 * C13351;
    const double C126800 = C78058 * C139465;
    const double C78066 = C78056 * C47003;
    const double C110978 = C78056 * C13439;
    const double C126795 = C78056 * C186;
    const double C78065 = C78055 * C46915;
    const double C110977 = C78055 * C13351;
    const double C126796 = C78055 * C139465;
    const double C78064 = C78054 * C46915;
    const double C110972 = C78054 * C13351;
    const double C126794 = C78054 * C139465;
    const double C78063 = C78053 * C47003;
    const double C110971 = C78053 * C13439;
    const double C126793 = C78053 * C186;
    const double C83921 = C83605 * C30392;
    const double C89203 = C83605 * C47004;
    const double C116779 = C83605 * C92703;
    const double C122041 = C83605 * C13440;
    const double C130900 = C83605 * C186;
    const double C89208 = C89206 * C46915;
    const double C122040 = C89206 * C13351;
    const double C126797 = C89206 * C139465;
    const double C89207 = C89205 * C47003;
    const double C122039 = C89205 * C13439;
    const double C126798 = C89205 * C186;
    const double C137687 = C137686 * C137586;
    const double C13716 = C13710 + C13694;
    const double C13715 = C13709 + C13691;
    const double C13712 = C13706 + C13682;
    const double C14691 = C14687 + C14667;
    const double C15723 = C15719 + C15699;
    const double C16690 = C16688 + C16681;
    const double C17618 = C17616 + C17609;
    const double C111104 = C111100 + C111092;
    const double C111101 = C111097 + C111086;
    const double C122119 = C122117 + C122110;
    const double C13714 = C13708 + C13688;
    const double C13713 = C13707 + C13685;
    const double C47280 = C47274 + C47258;
    const double C47279 = C47273 + C47255;
    const double C47276 = C47270 + C47246;
    const double C48237 = C48233 + C48213;
    const double C49239 = C49235 + C49215;
    const double C50198 = C50196 + C50189;
    const double C51126 = C51124 + C51117;
    const double C78190 = C78186 + C78178;
    const double C78187 = C78183 + C78172;
    const double C89286 = C89284 + C89277;
    const double C47278 = C47272 + C47252;
    const double C47277 = C47271 + C47249;
    const double C32529 = C32526 * C13349;
    const double C94787 = C32526 * C46913;
    const double C126887 = C32526 * C139301;
    const double C137717 = C137716 * C137586;
    const double C30896 = C30890 + C30874;
    const double C30895 = C30889 + C30871;
    const double C30892 = C30886 + C30862;
    const double C31867 = C31863 + C31843;
    const double C33005 = C33001 + C32981;
    const double C33922 = C33920 + C33913;
    const double C34874 = C34872 + C34865;
    const double C77583 = C77579 + C77571;
    const double C77580 = C77576 + C77565;
    const double C81659 = C81657 + C81653;
    const double C83172 = C83170 + C83163;
    const double C87142 = C87140 + C87133;
    const double C30894 = C30888 + C30868;
    const double C30893 = C30887 + C30865;
    const double C77582 = C77578 + C77569;
    const double C77581 = C77577 + C77567;
    const double C93207 = C93201 + C93185;
    const double C93206 = C93200 + C93182;
    const double C93203 = C93197 + C93173;
    const double C94164 = C94160 + C94140;
    const double C95260 = C95256 + C95236;
    const double C96177 = C96175 + C96168;
    const double C97129 = C97127 + C97120;
    const double C110554 = C110550 + C110542;
    const double C110551 = C110547 + C110536;
    const double C114528 = C114526 + C114522;
    const double C116041 = C116039 + C116032;
    const double C119997 = C119995 + C119988;
    const double C93205 = C93199 + C93179;
    const double C93204 = C93198 + C93176;
    const double C110553 = C110549 + C110540;
    const double C110552 = C110548 + C110538;
    const double C745 = C741 * C139465;
    const double C14012 = C741 * C13351;
    const double C47576 = C741 * C46915;
    const double C972 = C958 + C959;
    const double C13469 = C13448 + C13449;
    const double C14279 = C14264 + C14265;
    const double C47033 = C47012 + C47013;
    const double C47843 = C47828 + C47829;
    const double C14551 = C14522 + C14523;
    const double C48097 = C48068 + C48069;
    const double C64383 = C64366 + C64367;
    const double C2019 = C2005 + C2006;
    const double C30421 = C30400 + C30401;
    const double C32257 = C32242 + C32243;
    const double C92732 = C92711 + C92712;
    const double C94536 = C94521 + C94522;
    const double C32756 = C32741 + C32742;
    const double C78399 = C78391 + C78392;
    const double C95020 = C95005 + C95006;
    const double C14401 = C1086 * C13349;
    const double C14389 = C1086 * C139544;
    const double C47957 = C1086 * C46913;
    const double C47951 = C1086 * C139544;
    const double C64271 = C1086 * C139301;
    const double C64631 = C64382 * C273;
    const double C77360 = C64382 * C30391;
    const double C110331 = C64382 * C92702;
    const double C32125 = C1905 * C13349;
    const double C32113 = C1905 * C139544;
    const double C94414 = C1905 * C46913;
    const double C94408 = C1905 * C139544;
    const double C126638 = C1905 * C139301;
    const double C78067 = C78057 * C47003;
    const double C110979 = C78057 * C13439;
    const double C126799 = C78057 * C186;
    const double C1266 = C139465 * C1251;
    const double C14674 = C13351 * C1251;
    const double C14664 = C139555 * C1251;
    const double C48220 = C46915 * C1251;
    const double C48210 = C139555 * C1251;
    const double C4950 = C139465 * C4944;
    const double C16032 = C139555 * C4944;
    const double C19183 = C13351 * C4944;
    const double C49545 = C139555 * C4944;
    const double C52673 = C46915 * C4944;
    const double C974 = C962 + C963;
    const double C1274 = C1264 + C1265;
    const double C1380 = C1373 + C1374;
    const double C14282 = C14270 + C14271;
    const double C14280 = C14266 + C14267;
    const double C14684 = C14672 + C14673;
    const double C14682 = C14662 + C14663;
    const double C31531 = C31525 + C31526;
    const double C47846 = C47834 + C47835;
    const double C47844 = C47830 + C47831;
    const double C48230 = C48218 + C48219;
    const double C48228 = C48208 + C48209;
    const double C93831 = C93825 + C93826;
    const double C4292 = C4284 + C4285;
    const double C4626 = C4619 + C4620;
    const double C15388 = C15374 + C15375;
    const double C15714 = C15694 + C15695;
    const double C18316 = C18308 + C18309;
    const double C18764 = C18756 + C18757;
    const double C48910 = C48896 + C48897;
    const double C49230 = C49210 + C49211;
    const double C51824 = C51816 + C51817;
    const double C52260 = C52252 + C52253;
    const double C2595 = C139480 * C2580;
    const double C32988 = C30255 * C2580;
    const double C32978 = C139557 * C2580;
    const double C95243 = C92566 * C2580;
    const double C95233 = C139557 * C2580;
    const double C4736 = C139480 * C4730;
    const double C31522 = C139557 * C4730;
    const double C35703 = C30255 * C4730;
    const double C93822 = C139557 * C4730;
    const double C97936 = C92566 * C4730;
    const double C2021 = C2009 + C2010;
    const double C2497 = C2490 + C2491;
    const double C2603 = C2593 + C2594;
    const double C16041 = C16035 + C16036;
    const double C32260 = C32248 + C32249;
    const double C32258 = C32244 + C32245;
    const double C32998 = C32986 + C32987;
    const double C32996 = C32976 + C32977;
    const double C49554 = C49548 + C49549;
    const double C94539 = C94527 + C94528;
    const double C94537 = C94523 + C94524;
    const double C95253 = C95241 + C95242;
    const double C95251 = C95231 + C95232;
    const double C1678 = C1674 + C1662;
    const double C31868 = C31864 + C31850;
    const double C94165 = C94161 + C94147;
    const double C2215 = C2211 + C2199;
    const double C15724 = C15720 + C15706;
    const double C49240 = C49236 + C49222;
    const double C5072 = C5070 + C5063;
    const double C31866 = C31862 + C31840;
    const double C36122 = C36120 + C36112;
    const double C94163 = C94159 + C94137;
    const double C98349 = C98347 + C98339;
    const double C137765 = ae * C137764;
    const double C115 =
        (2 * C137744 + C137730 * C137764 + (C137733 + C137747 * C137734) * ae) /
        C137581;
    const double C835 = (C137845 * C137764) / C137581;
    const double C1768 = (C137888 * C137764) / C137581;
    const double C14131 = C139544 * C843;
    const double C16249 = C13349 * C843;
    const double C47695 = C139544 * C843;
    const double C49757 = C46913 * C843;
    const double C65567 = C139301 * C843;
    const double C965 = C139465 * C949;
    const double C14275 = C13351 * C949;
    const double C14263 = C139555 * C949;
    const double C47839 = C46915 * C949;
    const double C47827 = C139555 * C949;
    const double C14545 = C13349 * C1169;
    const double C14525 = C139544 * C1169;
    const double C48091 = C46913 * C1169;
    const double C48071 = C139544 * C1169;
    const double C64371 = C139301 * C1169;
    const double C4405 = C139480 * C4398;
    const double C31199 = C139557 * C4398;
    const double C35291 = C30255 * C4398;
    const double C93504 = C139557 * C4398;
    const double C97534 = C92566 * C4398;
    const double C19045 = C13349 * C4842;
    const double C19041 = C139544 * C4842;
    const double C52535 = C46913 * C4842;
    const double C52531 = C139544 * C4842;
    const double C67630 = C139301 * C4842;
    const double C4293 = C4286 + C4287;
    const double C15386 = C15370 + C15371;
    const double C18318 = C18312 + C18313;
    const double C18618 = C18604 + C18605;
    const double C48908 = C48892 + C48893;
    const double C51826 = C51820 + C51821;
    const double C52114 = C52100 + C52101;
    const double C67318 = C67306 + C67307;
    const double C31979 = C139544 * C1776;
    const double C34023 = C13349 * C1776;
    const double C79611 = C139301 * C1776;
    const double C94276 = C139544 * C1776;
    const double C96278 = C46913 * C1776;
    const double C2012 = C139480 * C1996;
    const double C32253 = C30255 * C1996;
    const double C32241 = C139557 * C1996;
    const double C94532 = C92566 * C1996;
    const double C94520 = C139557 * C1996;
    const double C32752 = C13349 * C2396;
    const double C32744 = C139544 * C2396;
    const double C78394 = C139301 * C2396;
    const double C95016 = C46913 * C2396;
    const double C95008 = C139544 * C2396;
    const double C18613 = C13349 * C4512;
    const double C18601 = C139544 * C4512;
    const double C52109 = C46913 * C4512;
    const double C52097 = C139544 * C4512;
    const double C67309 = C139301 * C4512;
    const double C64634 = C64384 * C273;
    const double C77364 = C64384 * C30391;
    const double C110335 = C64384 * C92702;
    const double C78069 = C78059 * C47003;
    const double C110983 = C78059 * C13439;
    const double C126801 = C78059 * C186;
    const double C138380 = ae * C138379;
    const double C5865 =
        (2 * C138100 + C137845 * C138379 + (C137733 + C137747 * C137953) * ae) /
        C137581;
    const double C8678 = (C137888 * C138379) / C137581;
    const double C41067 = C139465 * C8915;
    const double C81103 = C139555 * C8915;
    const double C86713 = C46915 * C8915;
    const double C113972 = C139555 * C8915;
    const double C119568 = C13351 * C8915;
    const double C138531 = ae * C138530;
    const double C10738 =
        (2 * C138234 + C137888 * C138530 + (C137733 + C137747 * C138027) * ae) /
        C137581;
    const double C21842 = C139480 * C6959;
    const double C81651 = C139557 * C6959;
    const double C84129 = C30255 * C6959;
    const double C114520 = C139557 * C6959;
    const double C116984 = C92566 * C6959;
    const double C24547 = C139480 * C8995;
    const double C77247 = C139557 * C8995;
    const double C86823 = C30255 * C8995;
    const double C110218 = C139557 * C8995;
    const double C119678 = C92566 * C8995;
    const double C21845 = C21841 + C6963;
    const double C21212 = C21206 + C21207;
    const double C81654 = C81650 + C36109;
    const double C38411 = C38409 + C38410;
    const double C84134 = C84128 + C38513;
    const double C69583 = C69578 + C69579;
    const double C78510 = C78504 + C78505;
    const double C80830 = C80824 + C80825;
    const double C83495 = C83487 + C83488;
    const double C84028 = C84024 + C84025;
    const double C114523 = C114519 + C98336;
    const double C116989 = C116983 + C100722;
    const double C111409 = C111403 + C111404;
    const double C113699 = C113693 + C113694;
    const double C116359 = C116351 + C116352;
    const double C116883 = C116879 + C116880;
    const double C35975 = C35968 + C35969;
    const double C78509 = C78502 + C78503;
    const double C81518 = C81514 + C81515;
    const double C111408 = C111401 + C111402;
    const double C114387 = C114383 + C114384;
    const double C35567 = C35565 + C4618;
    const double C111098 = C111094 + C15700;
    const double C113975 = C113973 + C18754;
    const double C128763 = C35150 * C63570;
    const double C78184 = C78180 + C49216;
    const double C81106 = C81104 + C52250;
    const double C78032 = C67316 * C139555;
    const double C80963 = C67316 * C46915;
    const double C110974 = C67316 * C139555;
    const double C113832 = C67316 * C13351;
    const double C128968 = C67316 * C139465;
    const double C38112 = C38111 + C6652;
    const double C111099 = C111095 + C15703;
    const double C116571 = C116569 + C21431;
    const double C128765 = C37808 * C63570;
    const double C78185 = C78181 + C49219;
    const double C83713 = C83711 + C54845;
    const double C78033 = C69343 * C139555;
    const double C83602 = C69343 * C46915;
    const double C110975 = C69343 * C139555;
    const double C116462 = C69343 * C13351;
    const double C128970 = C69343 * C139465;
    const double C32516 = C2214 * C13349;
    const double C32510 = C2214 * C139544;
    const double C94791 = C2214 * C46913;
    const double C94788 = C2214 * C139544;
    const double C126890 = C2214 * C139301;
    const double C32530 = C32527 * C13349;
    const double C94790 = C32527 * C46913;
    const double C126888 = C32527 * C139301;
    const double C18907 = C18900 + C18901;
    const double C77251 = C77244 + C77245;
    const double C81245 = C81242 + C81243;
    const double C110222 = C110215 + C110216;
    const double C114114 = C114111 + C114112;
    const double C746 = C742 * C139465;
    const double C14015 = C742 * C13351;
    const double C47579 = C742 * C46915;
    const double C747 = C743 * C139465;
    const double C14016 = C743 * C13351;
    const double C47580 = C743 * C46915;
    const double C1681 = C1677 * C139465;
    const double C14013 = C1677 * C139555;
    const double C15142 = C1677 * C13351;
    const double C47577 = C1677 * C139555;
    const double C48677 = C1677 * C46915;
    const double C2614 = C2610 * C139465;
    const double C16142 = C2610 * C13351;
    const double C49655 = C2610 * C46915;
    const double C137794 = ae * C137792;
    const double C137793 = C137730 * C137792;
    const double C137804 = 3 * C137792;
    const double C138058 = C137845 * C137792;
    const double C138160 = C137888 * C137792;
    const double C840 = (C137764 + C137792 * C137953) / C137581;
    const double C1773 = (C137764 + C137792 * C138027) / C137581;
    const double C848 = (C137759 + C137785 * C137953 + C138055 + C138055 +
                         C137730 * (2 * ae * (C137755 + C137779 * C137953) +
                                    C137730 * (C137785 + C137822 * C137953))) /
                        C137584;
    const double C5867 = (2 * (C137762 + C137845 * C137866) + C138055 +
                          C137845 * (C137866 + C138061 +
                                     C137845 * (C137789 + C137845 * C137880))) /
                         C137584;
    const double C5976 = (2 * (C137762 + C137845 * C137941) + C138055 +
                          C137845 * (C137941 + C138061 +
                                     C137845 * (C137789 + C137845 * C137947))) /
                         C137584;
    const double C8760 =
        (C138055 + C137888 * (C137909 + C137923 * C137953)) / C137584;
    const double C9071 =
        (C138055 + C137888 * (C137999 + C138005 * C137953)) / C137584;
    const double C14127 = C13356 * C5805;
    const double C14276 = C13440 * C5805;
    const double C14398 = C273 * C5805;
    const double C20517 = C139544 * C5805;
    const double C47691 = C46920 * C5805;
    const double C47840 = C47004 * C5805;
    const double C53975 = C139544 * C5805;
    const double C64089 = C63570 * C5805;
    const double C64373 = C139301 * C5805;
    const double C18159 = C13356 * C8594;
    const double C18314 = C13440 * C8594;
    const double C18458 = C273 * C8594;
    const double C24333 = C139544 * C8594;
    const double C31096 = C186 * C8594;
    const double C31212 = C30392 * C8594;
    const double C51667 = C46920 * C8594;
    const double C51822 = C47004 * C8594;
    const double C57707 = C139544 * C8594;
    const double C64884 = C63570 * C8594;
    const double C67311 = C139301 * C8594;
    const double C93517 = C92703 * C8594;
    const double C18315 = C139555 * C8680;
    const double C31097 = C139465 * C8680;
    const double C51823 = C139555 * C8680;
    const double C4169 =
        (C137888 * C138057 + C138295 + C138295 +
         C137730 * (2 * ae * C137888 * C138250 + C137730 * C137888 * C138251)) /
        C137584;
    const double C6493 = (C137845 * C137909 + C138295 +
                          C137888 * (C138061 + C137888 * C137845 * C137923)) /
                         C137584;
    const double C6804 = (C137845 * C137999 + C138295 +
                          C137888 * (C138061 + C137888 * C137845 * C138005)) /
                         C137584;
    const double C8837 = (C137888 * C137941 + C138295 +
                          C137845 * (C138163 + C137845 * C137888 * C137947)) /
                         C137584;
    const double C15393 = C15384 + C15385;
    const double C21325 = C21318 + C21319;
    const double C35153 = C35144 + C35145;
    const double C48915 = C48906 + C48907;
    const double C54741 = C54734 + C54735;
    const double C78061 = C78049 + C78050;
    const double C1781 = (C137759 + C137785 * C138027 + C138157 + C138157 +
                          C137730 * (2 * ae * (C137755 + C137779 * C138027) +
                                     C137730 * (C137785 + C137822 * C138027))) /
                         C137584;
    const double C6570 =
        (C138157 + C137845 * (C137941 + C137947 * C138027)) / C137584;
    const double C10740 =
        (2 * (C137762 + C137888 * C137909) + C138157 +
         C137888 *
             (C137909 + C138163 + C137888 * (C137789 + C137888 * C137923))) /
        C137584;
    const double C10955 =
        (2 * (C137762 + C137888 * C137999) + C138157 +
         C137888 *
             (C137999 + C138163 + C137888 * (C137789 + C137888 * C138005))) /
        C137584;
    const double C26700 = C13356 * C10622;
    const double C32122 = C186 * C10622;
    const double C32254 = C30392 * C10622;
    const double C43543 = C139544 * C10622;
    const double C60048 = C46920 * C10622;
    const double C77693 = C63570 * C10622;
    const double C94533 = C92703 * C10622;
    const double C105714 = C139544 * C10622;
    const double C126804 = C139301 * C10622;
    const double C68676 = C68674 * C139301;
    const double C68894 = C68732 * C273;
    const double C69258 = C69256 * C139301;
    const double C69580 = C69344 * C273;
    const double C83603 = C69344 * C47004;
    const double C86928 = C69344 * C30392;
    const double C116463 = C69344 * C13440;
    const double C119783 = C69344 * C92703;
    const double C133142 = C69344 * C186;
    const double C71535 = C71533 * C139301;
    const double C71849 = C71615 * C273;
    const double C83028 = C71615 * C30392;
    const double C86612 = C71615 * C47004;
    const double C115897 = C71615 * C92703;
    const double C119467 = C71615 * C13440;
    const double C134979 = C134977 * C139301;
    const double C135090 = C135088 * C186;
    const double C138113 = C138112 + C137827;
    const double C138247 = C138246 + C137827;
    const double C3018 = C186 * C2775;
    const double C13698 = C13440 * C2775;
    const double C47262 = C47004 * C2775;
    const double C4057 = C273 * C3578;
    const double C30878 = C30392 * C3578;
    const double C93189 = C92703 * C3578;
    const double C5067 = C273 * C4396;
    const double C33916 = C30392 * C4396;
    const double C96171 = C92703 * C4396;
    const double C6880 =
        (ae * C137910 + C137845 * C138023 + ae * C137888 * C138353 +
         C137888 *
             (C138356 +
              C137888 * (ae * C137924 +
                         C137845 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C138357 = C137867 + C138355;
    const double C138455 = ae * C138454;
    const double C138509 = C137910 + C138507;
    const double C138428 = ae * C138427;
    const double C6489 =
        (C137845 * C137910 + C137888 * C138427 + C137888 * C138352 * ae) /
        C137581;
    const double C138567 = C138566 + C138559;
    const double C138629 = ae * C138628;
    const double C26767 = (2 * C138457 + C137888 * C138628) / C137581;
    const double C138778 = C138777 + C138772;
    const double C138643 = ae * C138642;
    const double C21201 = (C137901 + C137912 * C137953 + C137888 * C138642 +
                           C137888 * C138560 * ae) /
                          C137581;
    const double C138711 = C138430 + C138709;
    const double C137835 = ae * C137832;
    const double C137834 = C137730 * C137832;
    const double C138064 = C137832 * C137953;
    const double C138166 = C137832 * C138027;
    const double C138253 = C137845 * C137832;
    const double C138274 = C137888 * C137832;
    const double C24115 =
        (C137888 *
         (2 * C138536 + C138070 +
          C137845 *
              (C137880 + C138259 +
               C137845 * (C137828 + C137845 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C138337 = C138335 + C138336;
    const double C138441 = ae * C138440;
    const double C20994 = C13356 * C20985;
    const double C54426 = C46920 * C20985;
    const double C64885 = C63570 * C20985;
    const double C138477 = C138475 + C138476;
    const double C138399 = ae * C138398;
    const double C26693 = (2 * C138294 + C137888 * C138398) / C137581;
    const double C138852 = ae * C138849;
    const double C138851 = C137845 * C138849;
    const double C138892 = C138849 * C138027;
    const double C138924 = C137888 * C138849;
    const double C138944 = C138942 + C138943;
    const double C139063 = ae * C139061;
    const double C139062 = C137888 * C139061;
    const double C137833 = C137807 + C137831;
    const double C20287 = C139544 * C5808;
    const double C53761 = C139544 * C5808;
    const double C64090 = C139301 * C5808;
    const double C24007 = C139544 * C8597;
    const double C57397 = C139544 * C8597;
    const double C66978 = C139301 * C8597;
    const double C68558 = C139301 * C20282;
    const double C69087 = C139301 * C20988;
    const double C71369 = C139301 * C24002;
    const double C43313 = C139544 * C10625;
    const double C105500 = C139544 * C10625;
    const double C126552 = C139301 * C10625;
    const double C134914 = C139301 * C43308;
    const double C3017 = C139465 * C1253;
    const double C13697 = C139555 * C1253;
    const double C47261 = C139555 * C1253;
    const double C2202 = C139465 * C2185;
    const double C3738 = C139465 * C2186;
    const double C4624 = C139465 * C4615;
    const double C17611 = C139555 * C4615;
    const double C51119 = C139555 * C4615;
    const double C1665 = C139480 * C1648;
    const double C3335 = C139480 * C1649;
    const double C4056 = C139480 * C2582;
    const double C30877 = C139557 * C2582;
    const double C93188 = C139557 * C2582;
    const double C5066 = C139480 * C5057;
    const double C33915 = C139557 * C5057;
    const double C96170 = C139557 * C5057;
    const double C138911 = C138910 + C138850;
    const double C72006 = C273 * C71524;
    const double C83166 = C30392 * C71524;
    const double C116035 = C92703 * C71524;
    const double C138956 = C138605 + C138954;
    const double C139000 = C138999 + C138992;
    const double C1252 = (C137958 + C137963 * C137734 + C138109 + C138109 +
                          C137845 * (2 * ae * C137867 + C137845 * C137970)) /
                         C137584;
    const double C4945 =
        (C138109 + C137888 * (ae * C137910 + C137845 * C138023)) / C137584;
    const double C967 = C139465 * C942;
    const double C1268 = C186 * C942;
    const double C1376 = C273 * C942;
    const double C14546 = C13356 * C942;
    const double C14681 = C13439 * C942;
    const double C14679 = C13440 * C942;
    const double C16361 = C139555 * C942;
    const double C48092 = C46920 * C942;
    const double C48227 = C47003 * C942;
    const double C48225 = C47004 * C942;
    const double C49869 = C139555 * C942;
    const double C63798 = C63635 * C942;
    const double C65811 = C63570 * C942;
    const double C65892 = C63634 * C942;
    const double C4289 = C139465 * C4277;
    const double C4623 = C186 * C4277;
    const double C4738 = C273 * C4277;
    const double C15711 = C13440 * C4277;
    const double C17305 = C139555 * C4277;
    const double C18614 = C13356 * C4277;
    const double C18763 = C13439 * C4277;
    const double C33610 = C30392 * C4277;
    const double C49227 = C47004 * C4277;
    const double C50813 = C139555 * C4277;
    const double C52110 = C46920 * C4277;
    const double C52259 = C47003 * C4277;
    const double C66574 = C63634 * C4277;
    const double C79011 = C63570 * C4277;
    const double C95865 = C92703 * C4277;
    const double C6650 = C186 * C6409;
    const double C15712 = C13440 * C6409;
    const double C49228 = C47004 * C6409;
    const double C649 = C222 * C273;
    const double C445 = C441 + C435;
    const double C525 = C521 * C139465;
    const double C3020 = C3019 + C1270;
    const double C3254 = C2782 * C273;
    const double C13711 = C13705 + C13696;
    const double C47275 = C47269 + C47260;
    const double C2492 = C1909 * C273;
    const double C32130 = C1909 * C13356;
    const double C34764 = C1909 * C30392;
    const double C94419 = C1909 * C46920;
    const double C97019 = C1909 * C92703;
    const double C128029 = C1909 * C63570;
    const double C2212 = C2208 + C2201;
    const double C2318 = C2314 * C139465;
    const double C3741 = C3740 + C2203;
    const double C3975 = C3503 * C273;
    const double C30788 = C3503 * C30392;
    const double C34134 = C3503 * C13356;
    const double C93099 = C3503 * C92703;
    const double C96389 = C3503 * C46920;
    const double C3823 = C3822 * C139465;
    const double C1902 = C139465 * C1883;
    const double C3502 = C139465 * C1884;
    const double C32393 = C139544 * C2103;
    const double C94672 = C139544 * C2103;
    const double C128184 = C139301 * C2103;
    const double C34351 = C139544 * C2104;
    const double C96606 = C139544 * C2104;
    const double C16038 = C139555 * C6881;
    const double C35974 = C139465 * C6881;
    const double C49551 = C139555 * C6881;
    const double C138369 = C138368 + C138365;
    const double C8914 = (C137888 * C138361 + C138458 + C138458 +
                          C137845 * (2 * ae * C137888 * C137869 +
                                     C137845 * C137888 * C137730 * C137968)) /
                         C137584;
    const double C35566 = C35561 + C6651;
    const double C15391 = C15380 + C15381;
    const double C15717 = C15707 + C15708;
    const double C15833 = C15831 + C15832;
    const double C35152 = C35142 + C35143;
    const double C35707 = C35704 + C35705;
    const double C48913 = C48902 + C48903;
    const double C49233 = C49223 + C49224;
    const double C97940 = C97937 + C97938;
    const double C138846 = C138836 + C138841;
    const double C138590 = ae * C138588;
    const double C138589 = C137845 * C138588;
    const double C138666 = C137888 * C138588;
    const double C138830 = 3 * C138588;
    const double C21100 = (C138379 + C138588 * C138027) / C137581;
    const double C21426 =
        (C137958 + C137963 * C138027 + C138633 + C138633 +
         C137845 * (2 * ae * (C137856 + C137863 * C138027) +
                    C137845 * (C137963 + C137968 * C138027))) /
        C137584;
    const double C27184 =
        (2 * (C138377 + C137888 * C138614) + C138633 +
         C137888 *
             (C138614 + C138669 +
              C137888 * (C138586 + C137888 * (C137913 + C137845 * C138021)))) /
        C137584;
    const double C26980 = C13440 * C26768;
    const double C38110 = C186 * C26768;
    const double C60316 = C47004 * C26768;
    const double C73605 = C63634 * C26768;
    const double C83599 = C63570 * C26768;
    const double C83710 = C47003 * C26768;
    const double C83817 = C30392 * C26768;
    const double C89055 = C139555 * C26768;
    const double C116568 = C13439 * C26768;
    const double C116675 = C92703 * C26768;
    const double C121898 = C139555 * C26768;
    const double C130744 = C139465 * C26768;
    const double C135147 = C135146 + C43624;
    const double C134978 = C134976 * C63570;
    const double C135091 = C135089 * C139465;
    const double C32129 = C1908 * C13349;
    const double C32114 = C1908 * C139544;
    const double C94418 = C1908 * C46913;
    const double C94409 = C1908 * C139544;
    const double C126640 = C1908 * C139301;
    const double C132991 = C132989 * C139301;
    const double C130751 = C130749 * C139301;
    const double C2581 = (C138032 + C138037 * C137734 + C138243 + C138243 +
                          C137888 * (2 * ae * C137910 + C137888 * C138044)) /
                         C137584;
    const double C4731 =
        (C138243 + C137845 * (ae * C137867 + C137888 * C137986)) / C137584;
    const double C2014 = C139480 * C1989;
    const double C2493 = C186 * C1989;
    const double C2597 = C273 * C1989;
    const double C32753 = C13356 * C1989;
    const double C32995 = C30391 * C1989;
    const double C32993 = C30392 * C1989;
    const double C34237 = C139557 * C1989;
    const double C95017 = C46920 * C1989;
    const double C95250 = C92702 * C1989;
    const double C95248 = C92703 * C1989;
    const double C96492 = C139557 * C1989;
    const double C125795 = C125482 * C1989;
    const double C128413 = C63570 * C1989;
    const double C128565 = C125481 * C1989;
    const double C3102 = C3101 * C139465;
    const double C13795 = C3101 * C139555;
    const double C47359 = C3101 * C139555;
    const double C515 = C309 * C186;
    const double C659 = C655 * C139480;
    const double C740 = C736 + C730;
    const double C1375 = C1090 * C186;
    const double C14406 = C1090 * C13356;
    const double C16792 = C1090 * C13440;
    const double C47962 = C1090 * C46920;
    const double C50300 = C1090 * C47004;
    const double C65729 = C1090 * C63570;
    const double C1569 = C1565 * C139480;
    const double C1675 = C1671 + C1664;
    const double C3338 = C3337 + C1666;
    const double C3098 = C2864 * C186;
    const double C13794 = C2864 * C13440;
    const double C16470 = C2864 * C13356;
    const double C47358 = C2864 * C47004;
    const double C49978 = C2864 * C46920;
    const double C3258 = C3257 * C139480;
    const double C4059 = C4058 + C2599;
    const double C3819 = C3585 * C186;
    const double C3979 = C3978 * C139480;
    const double C30789 = C3978 * C139557;
    const double C93100 = C3978 * C139557;
    const double C30891 = C30885 + C30876;
    const double C93202 = C93196 + C93187;
    const double C4737 = C4412 * C186;
    const double C17720 = C4412 * C13440;
    const double C18462 = C4412 * C13356;
    const double C51228 = C4412 * C47004;
    const double C51964 = C4412 * C46920;
    const double C5071 = C5069 + C5065;
    const double C33921 = C33919 + C31855;
    const double C96176 = C96174 + C94152;
    const double C1083 = C139480 * C1064;
    const double C2863 = C139480 * C1065;
    const double C14922 = C139544 * C1464;
    const double C48459 = C139544 * C1464;
    const double C66047 = C139301 * C1464;
    const double C16895 = C139544 * C1465;
    const double C50403 = C139544 * C1465;
    const double C6958 =
        (C137845 * C138394 + C138433 + C138433 +
         C137888 * (2 * ae * C138430 + C137888 * C137845 * C137730 * C138042)) /
        C137584;
    const double C8994 =
        (ae * C137858 + C137888 * C138383 + C138433 +
         C137845 * (ae * (C137888 * C137912 + C137780) +
                    C137845 * (C137873 + C137888 * C137730 * C137984))) /
        C137584;
    const double C6962 = C273 * C6490;
    const double C15493 = C139480 * C6490;
    const double C16037 = C13440 * C6490;
    const double C21637 = C13356 * C6490;
    const double C35289 = C139557 * C6490;
    const double C35973 = C186 * C6490;
    const double C36114 = C30392 * C6490;
    const double C38511 = C30391 * C6490;
    const double C49550 = C47004 * C6490;
    const double C55044 = C46920 * C6490;
    const double C78395 = C63570 * C6490;
    const double C97532 = C139557 * C6490;
    const double C98341 = C92703 * C6490;
    const double C100720 = C92702 * C6490;
    const double C126473 = C125482 * C6490;
    const double C129473 = C125481 * C6490;
    const double C138520 = C138519 + C138516;
    const double C21839 =
        (C138032 + C138037 * C137953 + C138647 + C138647 +
         C137888 *
             (2 * ae * C138605 + C137888 * (C138037 + C138042 * C137953))) /
        C137584;
    const double C24544 =
        (2 * (C138528 + C137845 * C138675) + C138647 +
         C137845 * (C138675 + ae * (C137888 * C137845 * C137906 + C138582) +
                    C137845 * (ae * (C137888 * C137906 + C137775) +
                               C137845 * (C137870 + C137888 * C137984)))) /
        C137584;
    const double C21844 = C273 * C21202;
    const double C41472 = C30392 * C21202;
    const double C69252 = C139480 * C21202;
    const double C69581 = C63570 * C21202;
    const double C84026 = C47004 * C21202;
    const double C84133 = C30391 * C21202;
    const double C86503 = C139557 * C21202;
    const double C103665 = C92703 * C21202;
    const double C116881 = C13440 * C21202;
    const double C116988 = C92702 * C21202;
    const double C119358 = C139557 * C21202;
    const double C126470 = C125482 * C21202;
    const double C133448 = C186 * C21202;
    const double C133526 = C125481 * C21202;
    const double C69005 = C69004 + C20882;
    const double C68675 = C68673 * C63570;
    const double C68898 = C68897 * C139480;
    const double C72008 = C72007 + C24858;
    const double C83171 = C83169 + C37604;
    const double C71534 = C71532 * C63570;
    const double C71853 = C71852 * C139480;
    const double C83029 = C71852 * C139557;
    const double C115898 = C71852 * C139557;
    const double C116040 = C116038 + C99829;
    const double C138724 = C138723 + C138719;
    const double C139059 = C139050 + C139055;
    const double C138801 = ae * C138799;
    const double C138800 = C137888 * C138799;
    const double C139043 = 3 * C138799;
    const double C89353 =
        (ae * (3 * C138799 +
               C137888 * (2 * C138792 +
                          C137888 * (C137906 +
                                     C137888 * (C137888 * C137919 + C137811) +
                                     C137888 * C137801 * ae) +
                          C138974 * ae) +
               (2 * C138789 + C137888 * C138974) * ae) +
         C137845 *
             (3 * C138906 + ae * (2 * C138900 + C137888 * C138975) +
              C137888 * (2 * C138903 + ae * C138975 +
                         C137888 * (C137984 + ae * C137888 * C137876 +
                                    C137888 * (ae * C137876 +
                                               C137888 * std::pow(C137736, 7) *
                                                   bs[7] * C137975))))) /
        C137584;
    const double C14405 = C1089 * C13349;
    const double C14390 = C1089 * C139544;
    const double C47961 = C1089 * C46913;
    const double C47952 = C1089 * C139544;
    const double C64273 = C1089 * C139301;
    const double C79920 = C79918 * C46915;
    const double C112790 = C79918 * C13351;
    const double C128180 = C79918 * C139465;
    const double C78070 = C78060 * C46915;
    const double C110984 = C78060 * C13351;
    const double C126802 = C78060 * C139465;
    const double C126812 = C126809 * C139465;
    const double C32528 = C32525 + C32515;
    const double C32517 = C2213 * C139544;
    const double C34454 = C2213 * C13349;
    const double C94792 = C2213 * C139544;
    const double C96709 = C2213 * C46913;
    const double C128263 = C2213 * C139301;
    const double C43628 = C43627 * C13349;
    const double C105789 = C43627 * C46913;
    const double C126889 = C43627 * C139301;
    const double C66050 = C66048 * C139480;
    const double C79310 = C66048 * C30255;
    const double C112198 = C66048 * C92566;
    const double C64650 = C64644 * C139480;
    const double C77365 = C64644 * C30255;
    const double C110336 = C64644 * C92566;
    const double C64651 = C64645 * C139480;
    const double C15156 = C15153 + C15147;
    const double C19328 = C19326 + C19322;
    const double C31869 = C31865 + C31853;
    const double C94166 = C94162 + C94150;
    const double C1680 = C1676 * C139465;
    const double C14014 = C1676 * C139555;
    const double C17100 = C1676 * C13351;
    const double C47578 = C1676 * C139555;
    const double C50608 = C1676 * C46915;
    const double C2613 = C2609 * C139465;
    const double C18022 = C2609 * C13351;
    const double C51530 = C2609 * C46915;
    const double C137601 = C137582 * C137593;
    const double C100 =
        (ae * -2 * C137580) / (C137584 * 2 * C137581) -
        (((C137582 *
           ((-4 * C137587) / C137581 - (C137582 * C137593) / C137581) * ae) /
              C137581 +
          2 * ((C137592 * ae) / C137581 - C137580 / C137588)) *
         be) /
            C137581 -
        C137593 / C137588;
    const double C104 = (-C137593 / C137581) / (4 * C137584);
    const double C13355 = (-C137593 / C137581) / (2 * C137581);
    const double C46919 = (-C137593 / C137581) / (2 * C137581);
    const double C63569 = -C137593 / C137581;
    const double C131 = C101 * C114;
    const double C130 = C101 * C113;
    const double C125 = C101 * C112;
    const double C863 = C101 * C839;
    const double C858 = C101 * C836;
    const double C855 = C101 * C838;
    const double C854 = C101 * C837;
    const double C1796 = C101 * C1772;
    const double C1791 = C101 * C1769;
    const double C1788 = C101 * C1771;
    const double C1787 = C101 * C1770;
    const double C4177 = C101 * C4164;
    const double C4172 = C101 * C4163;
    const double C5813 = C101 * C5806;
    const double C6335 = C101 * C6328;
    const double C8602 = C101 * C8595;
    const double C10630 = C101 * C10623;
    const double C129 = C103 * C114;
    const double C126 = C103 * C113;
    const double C856 = C103 * C839;
    const double C853 = C103 * C836;
    const double C1789 = C103 * C1772;
    const double C1786 = C103 * C1769;
    const double C4173 = C103 * C4164;
    const double C5812 = C103 * C5805;
    const double C6334 = C103 * C6327;
    const double C8601 = C103 * C8594;
    const double C10629 = C103 * C10622;
    const double C13366 = C13354 * C114;
    const double C13365 = C13354 * C113;
    const double C13363 = C13354 * C836;
    const double C13360 = C13354 * C837;
    const double C13358 = C13354 * C112;
    const double C14139 = C13354 * C5805;
    const double C14133 = C13354 * C839;
    const double C14126 = C13354 * C5806;
    const double C14124 = C13354 * C838;
    const double C14404 = C1088 * C13354;
    const double C14400 = C1087 * C13354;
    const double C14417 = C14411 * C13354;
    const double C14414 = C14408 * C13354;
    const double C14544 = C13354 * C941;
    const double C14540 = C13354 * C831;
    const double C14536 = C13354 * C938;
    const double C14532 = C13354 * C828;
    const double C14530 = C13354 * C830;
    const double C14526 = C13354 * C940;
    const double C14520 = C13354 * C939;
    const double C14516 = C13354 * C829;
    const double C14919 = C13354 * C1055;
    const double C14915 = C13354 * C1052;
    const double C14913 = C13354 * C1054;
    const double C14907 = C13354 * C1053;
    const double C15271 = C13354 * C1772;
    const double C15269 = C13354 * C6327;
    const double C15266 = C13354 * C4164;
    const double C15264 = C13354 * C1769;
    const double C15262 = C13354 * C6328;
    const double C15260 = C13354 * C1771;
    const double C15259 = C13354 * C1770;
    const double C15257 = C13354 * C4163;
    const double C16468 = C1085 * C13354;
    const double C16574 = C13354 * C937;
    const double C16570 = C13354 * C827;
    const double C16892 = C13354 * C1051;
    const double C18165 = C13354 * C8594;
    const double C18158 = C13354 * C8595;
    const double C18460 = C4410 * C13354;
    const double C18469 = C18465 * C13354;
    const double C18612 = C13354 * C4276;
    const double C18608 = C13354 * C4160;
    const double C18606 = C13354 * C4159;
    const double C18602 = C13354 * C4275;
    const double C19044 = C13354 * C4394;
    const double C19042 = C13354 * C4393;
    const double C20289 = C13354 * C20280;
    const double C20444 = C20442 * C13354;
    const double C20514 = C13354 * C5803;
    const double C20737 = C13354 * C5921;
    const double C20995 = C13354 * C20986;
    const double C21320 = C13354 * C6411;
    const double C21316 = C13354 * C6325;
    const double C21635 = C13354 * C6491;
    const double C24009 = C13354 * C24000;
    const double C24228 = C24226 * C13354;
    const double C24330 = C13354 * C8592;
    const double C24649 = C13354 * C8758;
    const double C26701 = C13354 * C10623;
    const double C26699 = C13354 * C26694;
    const double C31985 = C13354 * C10622;
    const double C32128 = C1907 * C13354;
    const double C32124 = C1906 * C13354;
    const double C32141 = C32135 * C13354;
    const double C32138 = C32132 * C13354;
    const double C32390 = C13354 * C1874;
    const double C32386 = C13354 * C1764;
    const double C32382 = C13354 * C1871;
    const double C32378 = C13354 * C1761;
    const double C32376 = C13354 * C1763;
    const double C32372 = C13354 * C1873;
    const double C32366 = C13354 * C1872;
    const double C32362 = C13354 * C1762;
    const double C32751 = C13354 * C1988;
    const double C32747 = C13354 * C1985;
    const double C32745 = C13354 * C1987;
    const double C32739 = C13354 * C1986;
    const double C34132 = C1904 * C13354;
    const double C34348 = C13354 * C1870;
    const double C34344 = C13354 * C1760;
    const double C34658 = C13354 * C1984;
    const double C35154 = C35150 * C13354;
    const double C37810 = C37808 * C13354;
    const double C43315 = C13354 * C43306;
    const double C43400 = C43398 * C13354;
    const double C43544 = C13354 * C10682;
    const double C43540 = C13354 * C10620;
    const double C46930 = C46918 * C114;
    const double C46929 = C46918 * C113;
    const double C46927 = C46918 * C836;
    const double C46924 = C46918 * C837;
    const double C46922 = C46918 * C112;
    const double C47703 = C46918 * C5805;
    const double C47697 = C46918 * C839;
    const double C47690 = C46918 * C5806;
    const double C47688 = C46918 * C838;
    const double C47960 = C1088 * C46918;
    const double C47956 = C1087 * C46918;
    const double C47955 = C14411 * C46918;
    const double C47948 = C14408 * C46918;
    const double C48090 = C46918 * C941;
    const double C48086 = C46918 * C831;
    const double C48082 = C46918 * C938;
    const double C48078 = C46918 * C828;
    const double C48076 = C46918 * C830;
    const double C48072 = C46918 * C940;
    const double C48066 = C46918 * C939;
    const double C48062 = C46918 * C829;
    const double C48456 = C46918 * C1055;
    const double C48452 = C46918 * C1052;
    const double C48450 = C46918 * C1054;
    const double C48444 = C46918 * C1053;
    const double C48793 = C46918 * C1772;
    const double C48791 = C46918 * C6327;
    const double C48788 = C46918 * C4164;
    const double C48786 = C46918 * C1769;
    const double C48784 = C46918 * C6328;
    const double C48782 = C46918 * C1771;
    const double C48781 = C46918 * C1770;
    const double C48779 = C46918 * C4163;
    const double C49976 = C1085 * C46918;
    const double C50082 = C46918 * C937;
    const double C50078 = C46918 * C827;
    const double C50400 = C46918 * C1051;
    const double C51673 = C46918 * C8594;
    const double C51666 = C46918 * C8595;
    const double C51962 = C4410 * C46918;
    const double C51961 = C18465 * C46918;
    const double C52108 = C46918 * C4276;
    const double C52104 = C46918 * C4160;
    const double C52102 = C46918 * C4159;
    const double C52098 = C46918 * C4275;
    const double C52534 = C46918 * C4394;
    const double C52532 = C46918 * C4393;
    const double C53763 = C46918 * C20280;
    const double C53902 = C20442 * C46918;
    const double C53972 = C46918 * C5803;
    const double C54186 = C46918 * C5921;
    const double C54427 = C46918 * C20986;
    const double C54736 = C46918 * C6411;
    const double C54732 = C46918 * C6325;
    const double C55042 = C46918 * C6491;
    const double C57399 = C46918 * C24000;
    const double C57602 = C24226 * C46918;
    const double C57704 = C46918 * C8592;
    const double C58014 = C46918 * C8758;
    const double C60049 = C46918 * C10623;
    const double C60047 = C46918 * C26694;
    const double C94282 = C46918 * C10622;
    const double C94417 = C1907 * C46918;
    const double C94413 = C1906 * C46918;
    const double C94412 = C32135 * C46918;
    const double C94405 = C32132 * C46918;
    const double C94669 = C46918 * C1874;
    const double C94665 = C46918 * C1764;
    const double C94661 = C46918 * C1871;
    const double C94657 = C46918 * C1761;
    const double C94655 = C46918 * C1763;
    const double C94651 = C46918 * C1873;
    const double C94645 = C46918 * C1872;
    const double C94641 = C46918 * C1762;
    const double C95015 = C46918 * C1988;
    const double C95011 = C46918 * C1985;
    const double C95009 = C46918 * C1987;
    const double C95003 = C46918 * C1986;
    const double C96387 = C1904 * C46918;
    const double C96603 = C46918 * C1870;
    const double C96599 = C46918 * C1760;
    const double C96913 = C46918 * C1984;
    const double C97391 = C35150 * C46918;
    const double C100027 = C37808 * C46918;
    const double C105502 = C46918 * C43306;
    const double C105575 = C43398 * C46918;
    const double C105715 = C46918 * C10682;
    const double C105711 = C46918 * C10620;
    const double C68893 = C64648 + C64630;
    const double C64652 = C64625 + C64647;
    const double C71848 = C67638 + C67624;
    const double C126807 = C126795 + C126796;
    const double C135083 = C126797 + C126798;
    const double C137690 = C137615 * C137687;
    const double C63786 =
        (ae * -2 * C137675) / (C137584 * 2 * C137581) -
        (((C137615 *
           ((-4 * C137636) / C137581 - (C137615 * C137687) / C137581) * ae) /
              C137581 +
          2 * ((C137686 * ae) / C137581 - C137675 / C137588)) *
         be) /
            C137581 -
        C137687 / C137588;
    const double C63788 = (-C137687 / C137581) / (4 * C137584);
    const double C137720 = C137618 * C137717;
    const double C125783 =
        (ae * -2 * C137705) / (C137584 * 2 * C137581) -
        (((C137618 *
           ((-4 * C137648) / C137581 - (C137618 * C137717) / C137581) * ae) /
              C137581 +
          2 * ((C137716 * ae) / C137581 - C137705 / C137588)) *
         be) /
            C137581 -
        C137717 / C137588;
    const double C125785 = (-C137717 / C137581) / (4 * C137584);
    const double C4954 = C4949 + C4950;
    const double C16039 = C16031 + C16032;
    const double C19186 = C19182 + C19183;
    const double C49552 = C49544 + C49545;
    const double C52676 = C52672 + C52673;
    const double C1556 = C974 * C273;
    const double C31733 = C974 * C30391;
    const double C94033 = C974 * C92702;
    const double C1278 = C1274 + C1265;
    const double C1384 = C1380 * C139465;
    const double C14801 = C1380 * C13351;
    const double C14794 = C1380 * C139555;
    const double C48343 = C1380 * C46915;
    const double C48338 = C1380 * C139555;
    const double C14688 = C14684 + C14673;
    const double C14686 = C14682 + C14663;
    const double C48234 = C48230 + C48219;
    const double C48232 = C48228 + C48209;
    const double C4948 = C4292 * C273;
    const double C31730 = C4292 * C30392;
    const double C35146 = C4292 * C13354;
    const double C35140 = C4292 * C13356;
    const double C35970 = C4292 * C30391;
    const double C94030 = C4292 * C92703;
    const double C97395 = C4292 * C46918;
    const double C97393 = C4292 * C46920;
    const double C98201 = C4292 * C92702;
    const double C128767 = C4292 * C63570;
    const double C4628 = C4626 + C4620;
    const double C15718 = C15714 + C15695;
    const double C18766 = C18764 + C18757;
    const double C49234 = C49230 + C49211;
    const double C52262 = C52260 + C52253;
    const double C4740 = C4735 + C4736;
    const double C31529 = C31521 + C31522;
    const double C35706 = C35702 + C35703;
    const double C93829 = C93821 + C93822;
    const double C97939 = C97935 + C97936;
    const double C2305 = C2021 * C186;
    const double C15828 = C2021 * C13439;
    const double C49344 = C2021 * C47003;
    const double C2501 = C2497 * C139480;
    const double C32870 = C2497 * C30255;
    const double C32863 = C2497 * C139557;
    const double C95130 = C2497 * C92566;
    const double C95125 = C2497 * C139557;
    const double C2607 = C2603 + C2594;
    const double C33002 = C32998 + C32987;
    const double C33000 = C32996 + C32977;
    const double C95257 = C95253 + C95242;
    const double C95255 = C95251 + C95232;
    const double C1682 = C1678 * C139465;
    const double C15145 = C1678 * C13351;
    const double C15141 = C1678 * C139555;
    const double C48678 = C1678 * C46915;
    const double C48676 = C1678 * C139555;
    const double C32518 = C2215 * C13349;
    const double C32511 = C2215 * C139544;
    const double C94793 = C2215 * C46913;
    const double C94789 = C2215 * C139544;
    const double C126891 = C2215 * C139301;
    const double C5074 = C5072 * C139465;
    const double C16141 = C5072 * C139555;
    const double C19320 = C5072 * C13351;
    const double C49654 = C5072 * C139555;
    const double C52808 = C5072 * C46915;
    const double C121 =
        (2 * (2 * ae * C137742 + C137730 * C137759) + C137765 + C137765 +
         C137730 * (C137759 + C137762 + C137762 +
                    C137730 * (2 * ae * C137755 +
                               C137730 *
                                   (C137748 * C137749 +
                                    C137734 * bs[5] * std::pow(C137736, 5)) *
                                   C137737))) /
        C137584;
    const double C945 =
        (C137765 + C137845 * (C137855 + ae * C137858 + C137730 * C137866)) /
        C137584;
    const double C1165 =
        (C137765 + C137845 * (C137936 + ae * C137858 + C137730 * C137941)) /
        C137584;
    const double C1992 =
        (C137765 + C137888 * (C137898 + ae * C137901 + C137730 * C137909)) /
        C137584;
    const double C2392 =
        (C137765 + C137888 * (C137994 + ae * C137901 + C137730 * C137999)) /
        C137584;
    const double C136 = C101 * C115;
    const double C132 = C103 * C115;
    const double C128 = C105 * C115;
    const double C208 = C186 * C115;
    const double C295 = C273 * C115;
    const double C13373 = C13354 * C115;
    const double C13367 = C13356 * C115;
    const double C13462 = C13439 * C115;
    const double C30414 = C30391 * C115;
    const double C46937 = C46918 * C115;
    const double C46931 = C46920 * C115;
    const double C47026 = C47003 * C115;
    const double C63583 = C63570 * C115;
    const double C92725 = C92702 * C115;
    const double C859 = C103 * C835;
    const double C852 = C105 * C835;
    const double C954 = C186 * C835;
    const double C1068 = C273 * C835;
    const double C2701 = C101 * C835;
    const double C13368 = C13354 * C835;
    const double C13362 = C13356 * C835;
    const double C13450 = C13440 * C835;
    const double C14535 = C139544 * C835;
    const double C16362 = C13439 * C835;
    const double C16571 = C13349 * C835;
    const double C33306 = C30391 * C835;
    const double C46932 = C46918 * C835;
    const double C46926 = C46920 * C835;
    const double C47014 = C47004 * C835;
    const double C48081 = C139544 * C835;
    const double C49870 = C47003 * C835;
    const double C50079 = C46913 * C835;
    const double C63579 = C63570 * C835;
    const double C65806 = C139301 * C835;
    const double C95561 = C92702 * C835;
    const double C1792 = C103 * C1768;
    const double C1785 = C105 * C1768;
    const double C1887 = C186 * C1768;
    const double C2001 = C273 * C1768;
    const double C3422 = C101 * C1768;
    const double C15265 = C13356 * C1768;
    const double C17203 = C13354 * C1768;
    const double C17306 = C13439 * C1768;
    const double C30402 = C30392 * C1768;
    const double C32381 = C139544 * C1768;
    const double C34238 = C30391 * C1768;
    const double C34345 = C13349 * C1768;
    const double C48787 = C46920 * C1768;
    const double C50711 = C46918 * C1768;
    const double C50814 = C47003 * C1768;
    const double C66276 = C63570 * C1768;
    const double C79912 = C139301 * C1768;
    const double C92713 = C92703 * C1768;
    const double C94660 = C139544 * C1768;
    const double C96493 = C92702 * C1768;
    const double C96600 = C46913 * C1768;
    const double C975 = C964 + C965;
    const double C14284 = C14274 + C14275;
    const double C14278 = C14262 + C14263;
    const double C47848 = C47838 + C47839;
    const double C47842 = C47826 + C47827;
    const double C14552 = C14524 + C14525;
    const double C48098 = C48070 + C48071;
    const double C64385 = C64370 + C64371;
    const double C4411 = C4404 + C4405;
    const double C31214 = C31198 + C31199;
    const double C35296 = C35290 + C35291;
    const double C93519 = C93503 + C93504;
    const double C97539 = C97533 + C97534;
    const double C19048 = C19040 + C19041;
    const double C52538 = C52530 + C52531;
    const double C67636 = C67629 + C67630;
    const double C35147 = C4293 * C13349;
    const double C35141 = C4293 * C139544;
    const double C97396 = C4293 * C46913;
    const double C97394 = C4293 * C139544;
    const double C128768 = C4293 * C139301;
    const double C67628 = C67318 * C273;
    const double C77362 = C67318 * C30392;
    const double C78043 = C67318 * C47004;
    const double C80966 = C67318 * C47003;
    const double C81380 = C67318 * C30391;
    const double C110333 = C67318 * C92703;
    const double C110981 = C67318 * C13440;
    const double C113835 = C67318 * C13439;
    const double C114249 = C67318 * C92702;
    const double C128971 = C67318 * C186;
    const double C2022 = C2011 + C2012;
    const double C32262 = C32252 + C32253;
    const double C32256 = C32240 + C32241;
    const double C94541 = C94531 + C94532;
    const double C94535 = C94519 + C94520;
    const double C32757 = C32743 + C32744;
    const double C78400 = C78393 + C78394;
    const double C95021 = C95007 + C95008;
    const double C18616 = C18600 + C18601;
    const double C52112 = C52096 + C52097;
    const double C67319 = C67308 + C67309;
    const double C6030 =
        (2 * (2 * ae * C137851 + C137845 * C137958) + C138380 + C138380 +
         C137845 * (C137958 + C138377 + C138377 +
                    C137845 * (2 * C137859 + C137845 * C137963))) /
        C137584;
    const double C9149 =
        (C138380 + C137888 * (C138015 + ae * C138435 +
                              C137845 * (C137902 + C137845 * C138018))) /
        C137584;
    const double C6034 = C186 * C5865;
    const double C14671 = C13440 * C5865;
    const double C20518 = C13354 * C5865;
    const double C20597 = C13439 * C5865;
    const double C20666 = C273 * C5865;
    const double C48217 = C47004 * C5865;
    const double C53976 = C46918 * C5865;
    const double C54053 = C47003 * C5865;
    const double C64360 = C63570 * C5865;
    const double C64466 = C63634 * C5865;
    const double C64462 = C63635 * C5865;
    const double C68787 = C63633 * C5865;
    const double C82954 = C30391 * C5865;
    const double C115823 = C92702 * C5865;
    const double C8919 = C186 * C8678;
    const double C18755 = C13440 * C8678;
    const double C24334 = C13354 * C8678;
    const double C24445 = C13439 * C8678;
    const double C24546 = C273 * C8678;
    const double C40763 = C139465 * C8678;
    const double C52251 = C47004 * C8678;
    const double C57708 = C46918 * C8678;
    const double C57817 = C47003 * C8678;
    const double C65184 = C63635 * C8678;
    const double C67298 = C63570 * C8678;
    const double C67421 = C63634 * C8678;
    const double C71694 = C63633 * C8678;
    const double C77246 = C30392 * C8678;
    const double C80681 = C139555 * C8678;
    const double C86391 = C46915 * C8678;
    const double C86822 = C30391 * C8678;
    const double C110217 = C92703 * C8678;
    const double C113550 = C139555 * C8678;
    const double C119246 = C13351 * C8678;
    const double C119677 = C92702 * C8678;
    const double C11062 =
        (2 * (2 * ae * C137894 + C137888 * C138032) + C138531 + C138531 +
         C137888 * (C138032 + C138528 + C138528 +
                    C137888 * (2 * C137902 + C137888 * C138037))) /
        C137584;
    const double C11066 = C273 * C10738;
    const double C32985 = C30392 * C10738;
    const double C43765 = C13354 * C10738;
    const double C43839 = C186 * C10738;
    const double C43913 = C30391 * C10738;
    const double C89422 = C63570 * C10738;
    const double C89492 = C47003 * C10738;
    const double C95240 = C92703 * C10738;
    const double C105923 = C46918 * C10738;
    const double C106064 = C92702 * C10738;
    const double C122319 = C13439 * C10738;
    const double C127196 = C125481 * C10738;
    const double C127192 = C125482 * C10738;
    const double C135362 = C125480 * C10738;
    const double C21846 = C21845 + C6963;
    const double C21214 = C21212 * C13354;
    const double C54630 = C21212 * C46918;
    const double C69249 = C21212 * C63570;
    const double C81656 = C81654 + C36109;
    const double C84136 = C84134 + C38513;
    const double C69585 = C69583 * C139480;
    const double C81376 = C69583 * C139557;
    const double C83920 = C69583 * C30255;
    const double C114245 = C69583 * C139557;
    const double C116778 = C69583 * C92566;
    const double C114525 = C114523 + C98336;
    const double C116991 = C116989 + C100722;
    const double C35569 = C35567 + C35559;
    const double C111102 = C111098 + C111088;
    const double C113977 = C113975 + C113970;
    const double C78188 = C78184 + C78174;
    const double C81108 = C81106 + C81101;
    const double C38113 = C38112 + C38107;
    const double C111103 = C111099 + C111090;
    const double C116573 = C116571 + C116564;
    const double C130747 = C128766 + C128765;
    const double C78189 = C78185 + C78176;
    const double C83715 = C83713 + C83706;
    const double C130902 = C128970 + C128969;
    const double C4281 = (C137888 * (C137794 + C137845 * C137884)) / C137584;
    const double C137795 = C137771 + C137793;
    const double C138060 = ae * C138058;
    const double C4165 = (C137888 * C138058) / C137581;
    const double C138162 = ae * C138160;
    const double C862 = C103 * C840;
    const double C857 = C105 * C840;
    const double C968 = C186 * C840;
    const double C1082 = C273 * C840;
    const double C14136 = C13356 * C840;
    const double C14543 = C139544 * C840;
    const double C16253 = C13354 * C840;
    const double C16364 = C13440 * C840;
    const double C47700 = C46920 * C840;
    const double C48089 = C139544 * C840;
    const double C49761 = C46918 * C840;
    const double C49872 = C47004 * C840;
    const double C63580 = C63570 * C840;
    const double C65810 = C139301 * C840;
    const double C1795 = C103 * C1773;
    const double C1790 = C105 * C1773;
    const double C1901 = C186 * C1773;
    const double C2015 = C273 * C1773;
    const double C15270 = C13356 * C1773;
    const double C32389 = C139544 * C1773;
    const double C34027 = C13354 * C1773;
    const double C34240 = C30392 * C1773;
    const double C48792 = C46920 * C1773;
    const double C79613 = C63570 * C1773;
    const double C94668 = C139544 * C1773;
    const double C96282 = C46918 * C1773;
    const double C96495 = C92703 * C1773;
    const double C128182 = C139301 * C1773;
    const double C14137 = C139544 * C848;
    const double C47701 = C139544 * C848;
    const double C65569 = C139301 * C848;
    const double C14277 = C139555 * C5867;
    const double C47841 = C139555 * C5867;
    const double C20521 = C139544 * C5976;
    const double C53979 = C139544 * C5976;
    const double C64375 = C139301 * C5976;
    const double C18459 = C139480 * C8760;
    const double C31213 = C139557 * C8760;
    const double C93518 = C139557 * C8760;
    const double C24652 = C139544 * C9071;
    const double C58017 = C139544 * C9071;
    const double C67633 = C139301 * C9071;
    const double C14413 = C14398 + C14399;
    const double C20523 = C20516 + C20517;
    const double C53981 = C53974 + C53975;
    const double C64386 = C64372 + C64373;
    const double C24339 = C24332 + C24333;
    const double C57713 = C57706 + C57707;
    const double C67320 = C67310 + C67311;
    const double C18319 = C18314 + C18315;
    const double C31099 = C31096 + C31097;
    const double C51827 = C51822 + C51823;
    const double C18163 = C139544 * C4169;
    const double C51671 = C139544 * C4169;
    const double C78710 = C139301 * C4169;
    const double C15495 = C139480 * C6493;
    const double C35293 = C139557 * C6493;
    const double C97536 = C139557 * C6493;
    const double C21638 = C139544 * C6804;
    const double C55045 = C139544 * C6804;
    const double C78396 = C139301 * C6804;
    const double C24337 = C139544 * C8837;
    const double C57711 = C139544 * C8837;
    const double C67313 = C139301 * C8837;
    const double C37807 = C35153 * C139544;
    const double C100030 = C35153 * C139544;
    const double C128770 = C35153 * C139301;
    const double C78071 = C78061 * C47004;
    const double C81382 = C78061 * C30392;
    const double C110985 = C78061 * C13440;
    const double C114251 = C78061 * C92703;
    const double C128973 = C78061 * C186;
    const double C31983 = C139544 * C1781;
    const double C94280 = C139544 * C1781;
    const double C127948 = C139301 * C1781;
    const double C21323 = C139544 * C6570;
    const double C54739 = C139544 * C6570;
    const double C78052 = C139301 * C6570;
    const double C32255 = C139557 * C10740;
    const double C94534 = C139557 * C10740;
    const double C43768 = C139544 * C10955;
    const double C105926 = C139544 * C10955;
    const double C127042 = C139301 * C10955;
    const double C32137 = C32122 + C32123;
    const double C43549 = C43542 + C43543;
    const double C105720 = C105713 + C105714;
    const double C126808 = C126803 + C126804;
    const double C138114 = ae * C138113;
    const double C944 = (2 * C137858 + C137730 * C137867 + C137845 * C138113 +
                         C137845 * C137824 * ae) /
                        C137581;
    const double C4278 = (C137888 * C138113) / C137581;
    const double C138248 = ae * C138247;
    const double C1991 = (2 * C137901 + C137730 * C137910 + C137888 * C138247 +
                          C137888 * C137824 * ae) /
                         C137581;
    const double C138358 = C138357 + C138354;
    const double C8913 =
        (C137888 * C137970 + C138455 + C138455 +
         C137845 * (2 * ae * C137888 * C137881 +
                    C137845 * C137888 *
                        (C137968 + (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734))) /
        C137584;
    const double C138510 = C138509 + C138506;
    const double C6957 =
        (C137845 * C138044 + C138428 + C138428 +
         C137888 * (2 * ae * C138425 +
                    C137888 * C137845 *
                        (C138042 + (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137734))) /
        C137584;
    const double C8993 =
        (ae * C137867 + C137888 * C137986 + C138428 +
         C137845 *
             (ae * (C137888 * C137924 + C137820) +
              C137845 * (ae * C137881 +
                         C137888 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C6961 = C273 * C6489;
    const double C36116 = C30392 * C6489;
    const double C98343 = C92703 * C6489;
    const double C127870 = C125482 * C6489;
    const double C138569 = ae * C138567;
    const double C138568 = C137845 * C138567;
    const double C138660 = C137888 * C138567;
    const double C21425 =
        (C138361 + C138552 * C138027 + C138629 + C138629 +
         C137845 * (2 * ae * (C137869 + C138554 * C138027) +
                    C137845 * (C138552 +
                               C137730 *
                                   (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C138027))) /
        C137584;
    const double C27183 =
        (2 * (C138367 + C137888 * C138611) + C138629 +
         C137888 * (C138611 + C138663 +
                    C137888 * (C138565 + C137888 * (ae * C138596 +
                                                    C137845 * C137730 *
                                                        std::pow(C137736, 7) *
                                                        bs[7] * C138012)))) /
        C137584;
    const double C26978 = C13440 * C26767;
    const double C38109 = C186 * C26767;
    const double C60314 = C47004 * C26767;
    const double C138780 = ae * C138778;
    const double C138779 = C137888 * C138778;
    const double C21838 =
        (C138394 + C138616 * C137953 + C138643 + C138643 +
         C137888 * (2 * ae * C138600 +
                    C137888 * (C138616 +
                               C137730 *
                                   (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C137953))) /
        C137584;
    const double C24543 =
        (2 * (C138518 + C137845 * C138672) + C138643 +
         C137845 *
             (C138672 + ae * (C137888 * C137845 * C138596 + C138559) +
              C137845 * (ae * (C137888 * C138596 + C137816) +
                         C137845 * (ae * C138554 + C137888 * C137730 *
                                                       std::pow(C137736, 7) *
                                                       bs[7] * C137975)))) /
        C137584;
    const double C21843 = C273 * C21201;
    const double C41470 = C30392 * C21201;
    const double C103663 = C92703 * C21201;
    const double C126474 = C125482 * C21201;
    const double C138712 = C138711 + C138707;
    const double C6412 =
        (C137794 + C137845 * C137884 +
         (C137835 +
          C137845 * (C137874 + ae * C137730 * C137876 +
                     C137730 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))) *
             C138027) /
        C137584;
    const double C137836 = C137805 + C137834;
    const double C138067 = C137792 + C138064;
    const double C138169 = C137792 + C138166;
    const double C138258 = ae * C138253;
    const double C138298 = C137888 * C138253;
    const double C6326 = (C138058 + C138253 * C138027) / C137581;
    const double C138279 = ae * C138274;
    const double C138338 = ae * C138337;
    const double C20279 = (3 * C138054 + C137845 * C138337) / C137581;
    const double C23999 = (C137888 * C138337) / C137581;
    const double C8596 =
        (C137888 * C138066 + C138441 + C138441 +
         C137730 * (2 * ae * C137888 * (C137779 + C137815 * C137953) +
                    C137730 * C137888 *
                        (C137822 + (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                       C137737 * C137953))) /
        C137584;
    const double C21203 =
        (C137909 + C137923 * C137953 + C138441 +
         C137888 * (C138070 +
                    C137888 * (C137923 +
                               (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892) *
                                   C137953))) /
        C137584;
    const double C21632 =
        (C137999 + C138005 * C137953 + C138441 +
         C137888 * (C138070 +
                    C137888 * (C138005 +
                               (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991) *
                                   C137953))) /
        C137584;
    const double C24327 =
        (2 * (C138163 + C137845 * C138655) + C138441 +
         C137845 * (C138655 + C138301 +
                    C137845 * (C138280 + C137845 * C137888 *
                                             (ae * C137876 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137933)))) /
        C137584;
    const double C138478 = ae * C138477;
    const double C43305 = (3 * C138156 + C137888 * C138477) / C137581;
    const double C6329 =
        (C138057 + C138251 * C138027 + C138399 + C138399 +
         C137730 * (2 * ae * (C138250 + C137845 * C137815 * C138027) +
                    C137730 * (C138251 +
                               C137845 *
                                   (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                   C137737 * C138027))) /
        C137584;
    const double C21313 =
        (C137941 + C137947 * C138027 + C138399 +
         C137845 * (C138172 +
                    C137845 * (C137947 +
                               (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933) *
                                   C138027))) /
        C137584;
    const double C26839 =
        (2 * (C138061 + C137888 * C138687) + C138399 +
         C137888 * (C138687 + C138301 +
                    C137888 * (C138259 + C137888 * C137845 *
                                             (ae * C137919 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137892)))) /
        C137584;
    const double C27115 =
        (2 * (C138061 + C137888 * C138697) + C138399 +
         C137888 * (C138697 + C138301 +
                    C137888 * (C138259 + C137888 * C137845 *
                                             (ae * C137919 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137991)))) /
        C137584;
    const double C26698 = C13356 * C26693;
    const double C60046 = C46920 * C26693;
    const double C77692 = C63570 * C26693;
    const double C138853 = C138831 + C138851;
    const double C138895 = C138588 + C138892;
    const double C138928 = ae * C138924;
    const double C138945 = ae * C138944;
    const double C89049 = (3 * C138632 + C137888 * C138944) / C137581;
    const double C139064 = C139044 + C139062;
    const double C138912 = ae * C138911;
    const double C69246 = (2 * C138435 + C137845 * C138605 + C137888 * C138911 +
                           C137888 * C138848 * ae) /
                          C137581;
    const double C138957 = C138956 + C138953;
    const double C139002 = ae * C139000;
    const double C139001 = C137888 * C139000;
    const double C1269 = C139465 * C1252;
    const double C16683 = C139555 * C1252;
    const double C50191 = C139555 * C1252;
    const double C4953 = C139465 * C4945;
    const double C17921 = C139555 * C4945;
    const double C51429 = C139555 * C4945;
    const double C976 = C966 + C967;
    const double C1275 = C1267 + C1268;
    const double C1381 = C1376 + C1377;
    const double C16687 = C16682 + C14679;
    const double C16367 = C16360 + C16361;
    const double C50195 = C50190 + C48225;
    const double C49875 = C49868 + C49869;
    const double C4294 = C4288 + C4289;
    const double C4627 = C4622 + C4623;
    const double C17615 = C17610 + C15711;
    const double C17311 = C17304 + C17305;
    const double C51123 = C51118 + C49227;
    const double C50819 = C50812 + C50813;
    const double C449 = C445 + C436;
    const double C3021 = C3020 + C3017;
    const double C13717 = C13711 + C13697;
    const double C47281 = C47275 + C47261;
    const double C2216 = C2212 + C2202;
    const double C3742 = C3741 + C3738;
    const double C32409 = C32392 + C32393;
    const double C94688 = C94671 + C94672;
    const double C128186 = C128183 + C128184;
    const double C34355 = C34350 + C34351;
    const double C96610 = C96605 + C96606;
    const double C138370 = ae * C138369;
    const double C5864 =
        (2 * C138104 + C137845 * C138369 + (C137753 + C137776 * C137953) * ae) /
        C137581;
    const double C8677 = (C137888 * C138369) / C137581;
    const double C21099 = (C138369 + C138567 * C138027) / C137581;
    const double C18761 = C139555 * C8914;
    const double C31419 = C139465 * C8914;
    const double C52257 = C139555 * C8914;
    const double C35568 = C35566 + C6651;
    const double C15721 = C15717 + C15708;
    const double C15834 = C15833 * C139555;
    const double C49347 = C15833 * C139555;
    const double C35972 = C35152 * C30392;
    const double C37806 = C35152 * C13356;
    const double C98203 = C35152 * C92703;
    const double C100029 = C35152 * C46920;
    const double C128769 = C35152 * C63570;
    const double C49237 = C49233 + C49224;
    const double C21739 =
        (C138015 + ae * C138435 + C137845 * C138614 + ae * C137888 * C138588 +
         C137888 *
             (C138590 + C137888 * (C138018 + ae * C137845 * C137906 +
                                   C137845 * (C137913 + C137845 * C138021)))) /
        C137584;
    const double C138591 = C138576 + C138589;
    const double C138668 = ae * C138666;
    const double C21430 = C13440 * C21100;
    const double C41070 = C186 * C21100;
    const double C54844 = C47004 * C21100;
    const double C65189 = C63635 * C21100;
    const double C69340 = C63570 * C21100;
    const double C69422 = C63634 * C21100;
    const double C69499 = C273 * C21100;
    const double C83380 = C139555 * C21100;
    const double C86717 = C47003 * C21100;
    const double C86824 = C30392 * C21100;
    const double C116244 = C139555 * C21100;
    const double C119572 = C13439 * C21100;
    const double C119679 = C92703 * C21100;
    const double C132985 = C139465 * C21100;
    const double C83708 = C139555 * C21426;
    const double C116566 = C139555 * C21426;
    const double C133220 = C139465 * C21426;
    const double C89495 = C139555 * C27184;
    const double C122322 = C139555 * C27184;
    const double C131207 = C139465 * C27184;
    const double C122116 = C122111 + C26980;
    const double C130980 = C130977 + C38110;
    const double C89283 = C89278 + C60316;
    const double C83606 = C83599 + C83600;
    const double C83820 = C83817 + C83818;
    const double C89061 = C89054 + C89055;
    const double C116678 = C116675 + C116676;
    const double C121904 = C121897 + C121898;
    const double C130748 = C130743 + C130744;
    const double C135148 = C135147 + C135144;
    const double C126644 = C126640 + C126639;
    const double C2598 = C139480 * C2581;
    const double C34867 = C139557 * C2581;
    const double C97122 = C139557 * C2581;
    const double C4739 = C139480 * C4731;
    const double C33611 = C139557 * C4731;
    const double C95866 = C139557 * C4731;
    const double C2023 = C2013 + C2014;
    const double C2498 = C2493 + C2494;
    const double C2604 = C2596 + C2597;
    const double C34871 = C34866 + C32993;
    const double C34243 = C34236 + C34237;
    const double C97126 = C97121 + C95248;
    const double C96498 = C96491 + C96492;
    const double C744 = C740 + C731;
    const double C1679 = C1675 + C1665;
    const double C3339 = C3338 + C3335;
    const double C4060 = C4059 + C4056;
    const double C30897 = C30891 + C30877;
    const double C93208 = C93202 + C93188;
    const double C5073 = C5071 + C5066;
    const double C33923 = C33921 + C33915;
    const double C96178 = C96176 + C96170;
    const double C14930 = C14921 + C14922;
    const double C48467 = C48458 + C48459;
    const double C66049 = C66046 + C66047;
    const double C16897 = C16894 + C16895;
    const double C50405 = C50402 + C50403;
    const double C16145 = C139480 * C6958;
    const double C36115 = C139557 * C6958;
    const double C98342 = C139557 * C6958;
    const double C18906 = C139480 * C8994;
    const double C31528 = C139557 * C8994;
    const double C93828 = C139557 * C8994;
    const double C16146 = C16144 + C6962;
    const double C15496 = C15492 + C15493;
    const double C16042 = C16037 + C16038;
    const double C35295 = C35288 + C35289;
    const double C35976 = C35973 + C35974;
    const double C36119 = C36113 + C36114;
    const double C49555 = C49550 + C49551;
    const double C97538 = C97531 + C97532;
    const double C98346 = C98340 + C98341;
    const double C138521 = ae * C138520;
    const double C10737 =
        (2 * C138238 + C137888 * C138520 + (C137753 + C137776 * C138027) * ae) /
        C137581;
    const double C69738 = C139480 * C21839;
    const double C87135 = C139557 * C21839;
    const double C119990 = C139557 * C21839;
    const double C71771 = C139480 * C24544;
    const double C82957 = C139557 * C24544;
    const double C115826 = C139557 * C24544;
    const double C69740 = C69737 + C21844;
    const double C87139 = C87134 + C41472;
    const double C69255 = C69251 + C69252;
    const double C69584 = C69581 + C69582;
    const double C86509 = C86502 + C86503;
    const double C119994 = C119989 + C103665;
    const double C119364 = C119357 + C119358;
    const double C69006 = C69005 + C69002;
    const double C72009 = C72008 + C72005;
    const double C83173 = C83171 + C83165;
    const double C116042 = C116040 + C116034;
    const double C138725 = ae * C138724;
    const double C26838 =
        (2 * C138437 + C137888 * C138724 + (C138373 + C138578 * C138027) * ae) /
        C137581;
    const double C69497 =
        (2 * (C138801 + C137845 * C138906) +
         ae * (C138605 + C137888 * (C137888 * C138867 + C138843) +
               C137888 * C138840 * ae) +
         C137845 *
             (C138906 +
              ae *
                  (C138716 + C137888 * (C137888 * C137845 * C137919 + C138839) +
                   C137888 * C138833 * ae) +
              C137845 *
                  (ae * (C137906 + C137888 * (C137888 * C137919 + C137811) +
                         C137888 * C137801 * ae) +
                   C137845 * (C137984 + ae * C137888 * C137876 +
                              C137888 * (ae * C137876 +
                                         C137888 * std::pow(C137736, 7) *
                                             bs[7] * C137975))))) /
        C137584;
    const double C138802 = C138787 + C138800;
    const double C64277 = C64273 + C64272;
    const double C126810 = C126802 + C126801;
    const double C43622 = C32528 * C139544;
    const double C105790 = C32528 * C139544;
    const double C126892 = C32528 * C139301;
    const double C64653 = C64650 + C64634;
    const double C15157 = C15156 * C139555;
    const double C48679 = C15156 * C139555;
    const double C19329 = C19328 * C139555;
    const double C52809 = C19328 * C139555;
    const double C102 =
        (((-4 * C137587) / C137581 - C137601 / C137581) * ae) / C137588 -
        ((2 * ((0 * ae) / C137581 - C137587 / C137584) - C137601 / C137588) *
         be) /
            C137581;
    const double C13353 =
        -(((-4 * C137587) / C137581 - C137601 / C137581) * be) / C137581;
    const double C46917 =
        (((-4 * C137587) / C137581 - C137601 / C137581) * ae) / C137581;
    const double C14135 = C13355 * C832;
    const double C14130 = C13355 * C827;
    const double C14120 = C13355 * C831;
    const double C14118 = C13355 * C828;
    const double C16250 = C13355 * C833;
    const double C18162 = C13355 * C4161;
    const double C18154 = C13355 * C4160;
    const double C20286 = C13355 * C5802;
    const double C20992 = C13355 * C6324;
    const double C24006 = C13355 * C8591;
    const double C31982 = C13355 * C1765;
    const double C31978 = C13355 * C1760;
    const double C31972 = C13355 * C1764;
    const double C31970 = C13355 * C1761;
    const double C34024 = C13355 * C1766;
    const double C43312 = C13355 * C10619;
    const double C47699 = C46919 * C832;
    const double C47694 = C46919 * C827;
    const double C47684 = C46919 * C831;
    const double C47682 = C46919 * C828;
    const double C49758 = C46919 * C833;
    const double C51670 = C46919 * C4161;
    const double C51662 = C46919 * C4160;
    const double C53760 = C46919 * C5802;
    const double C54424 = C46919 * C6324;
    const double C57396 = C46919 * C8591;
    const double C94279 = C46919 * C1765;
    const double C94275 = C46919 * C1760;
    const double C94269 = C46919 * C1764;
    const double C94267 = C46919 * C1761;
    const double C96279 = C46919 * C1766;
    const double C105499 = C46919 * C10619;
    const double C64088 = C63569 * C5802;
    const double C64086 = C63569 * C831;
    const double C64084 = C63569 * C828;
    const double C64080 = C63569 * C5803;
    const double C64078 = C63569 * C830;
    const double C64076 = C63569 * C829;
    const double C65568 = C63569 * C832;
    const double C65566 = C63569 * C827;
    const double C66977 = C63569 * C8591;
    const double C66975 = C63569 * C4160;
    const double C66972 = C63569 * C4159;
    const double C66970 = C63569 * C8592;
    const double C68557 = C63569 * C20278;
    const double C69086 = C63569 * C20984;
    const double C69084 = C63569 * C6325;
    const double C71368 = C63569 * C23998;
    const double C77690 = C63569 * C6324;
    const double C77688 = C63569 * C1764;
    const double C77686 = C63569 * C1761;
    const double C77684 = C63569 * C1763;
    const double C77682 = C63569 * C1762;
    const double C78709 = C63569 * C4161;
    const double C79610 = C63569 * C1760;
    const double C83273 = C63569 * C26692;
    const double C88977 = C63569 * C10620;
    const double C126551 = C63569 * C10619;
    const double C127947 = C63569 * C1765;
    const double C134913 = C63569 * C43304;
    const double C14562 = C14544 + C14545;
    const double C14560 = C14540 + C14541;
    const double C14558 = C14536 + C14537;
    const double C14556 = C14532 + C14533;
    const double C14555 = C14530 + C14531;
    const double C14553 = C14526 + C14527;
    const double C14550 = C14520 + C14521;
    const double C14548 = C14516 + C14517;
    const double C14929 = C14919 + C14920;
    const double C14927 = C14915 + C14916;
    const double C14926 = C14913 + C14914;
    const double C14923 = C14907 + C14908;
    const double C16896 = C16892 + C16893;
    const double C18622 = C18612 + C18613;
    const double C18620 = C18608 + C18609;
    const double C18619 = C18606 + C18607;
    const double C18617 = C18602 + C18603;
    const double C19050 = C19044 + C19045;
    const double C19049 = C19042 + C19043;
    const double C20522 = C20514 + C20515;
    const double C20741 = C20737 + C20738;
    const double C21326 = C21320 + C21321;
    const double C21324 = C21316 + C21317;
    const double C21639 = C21635 + C21636;
    const double C24338 = C24330 + C24331;
    const double C24653 = C24649 + C24650;
    const double C32408 = C32390 + C32391;
    const double C32406 = C32386 + C32387;
    const double C32404 = C32382 + C32383;
    const double C32402 = C32378 + C32379;
    const double C32401 = C32376 + C32377;
    const double C32399 = C32372 + C32373;
    const double C32396 = C32366 + C32367;
    const double C32394 = C32362 + C32363;
    const double C32761 = C32751 + C32752;
    const double C32759 = C32747 + C32748;
    const double C32758 = C32745 + C32746;
    const double C32755 = C32739 + C32740;
    const double C34354 = C34348 + C34349;
    const double C43550 = C43544 + C43545;
    const double C43548 = C43540 + C43541;
    const double C48108 = C48090 + C48091;
    const double C48106 = C48086 + C48087;
    const double C48104 = C48082 + C48083;
    const double C48102 = C48078 + C48079;
    const double C48101 = C48076 + C48077;
    const double C48099 = C48072 + C48073;
    const double C48096 = C48066 + C48067;
    const double C48094 = C48062 + C48063;
    const double C48466 = C48456 + C48457;
    const double C48464 = C48452 + C48453;
    const double C48463 = C48450 + C48451;
    const double C48460 = C48444 + C48445;
    const double C50404 = C50400 + C50401;
    const double C52118 = C52108 + C52109;
    const double C52116 = C52104 + C52105;
    const double C52115 = C52102 + C52103;
    const double C52113 = C52098 + C52099;
    const double C52540 = C52534 + C52535;
    const double C52539 = C52532 + C52533;
    const double C53980 = C53972 + C53973;
    const double C54190 = C54186 + C54187;
    const double C54742 = C54736 + C54737;
    const double C54740 = C54732 + C54733;
    const double C55046 = C55042 + C55043;
    const double C57712 = C57704 + C57705;
    const double C58018 = C58014 + C58015;
    const double C94687 = C94669 + C94670;
    const double C94685 = C94665 + C94666;
    const double C94683 = C94661 + C94662;
    const double C94681 = C94657 + C94658;
    const double C94680 = C94655 + C94656;
    const double C94678 = C94651 + C94652;
    const double C94675 = C94645 + C94646;
    const double C94673 = C94641 + C94642;
    const double C95025 = C95015 + C95016;
    const double C95023 = C95011 + C95012;
    const double C95022 = C95009 + C95010;
    const double C95019 = C95003 + C95004;
    const double C96609 = C96603 + C96604;
    const double C105721 = C105715 + C105716;
    const double C105719 = C105711 + C105712;
    const double C63787 =
        (((-4 * C137636) / C137581 - C137690 / C137581) * ae) / C137588 -
        ((2 * ((0 * ae) / C137581 - C137636 / C137584) - C137690 / C137588) *
         be) /
            C137581;
    const double C125784 =
        (((-4 * C137648) / C137581 - C137720 / C137581) * ae) / C137588 -
        ((2 * ((0 * ae) / C137581 - C137648 / C137584) - C137720 / C137588) *
         be) /
            C137581;
    const double C4956 = C4954 * C139480;
    const double C31729 = C4954 * C139557;
    const double C35971 = C4954 * C30255;
    const double C94029 = C4954 * C139557;
    const double C98202 = C4954 * C92566;
    const double C1282 = C1278 + C1266;
    const double C14692 = C14688 + C14674;
    const double C14690 = C14686 + C14664;
    const double C48238 = C48234 + C48220;
    const double C48236 = C48232 + C48210;
    const double C4630 = C4628 + C4621;
    const double C15722 = C15718 + C15696;
    const double C18768 = C18766 + C18758;
    const double C49238 = C49234 + C49212;
    const double C52264 = C52262 + C52254;
    const double C4742 = C4740 * C139465;
    const double C15824 = C4740 * C139555;
    const double C18903 = C4740 * C13351;
    const double C49340 = C4740 * C139555;
    const double C52397 = C4740 * C46915;
    const double C2611 = C2607 + C2595;
    const double C33006 = C33002 + C32988;
    const double C33004 = C33000 + C32978;
    const double C95261 = C95257 + C95243;
    const double C95259 = C95255 + C95233;
    const double C955 = C139465 * C945;
    const double C13451 = C139555 * C945;
    const double C16363 = C13351 * C945;
    const double C47015 = C139555 * C945;
    const double C49871 = C46915 * C945;
    const double C14539 = C139544 * C1165;
    const double C16575 = C13349 * C1165;
    const double C48085 = C139544 * C1165;
    const double C50083 = C46913 * C1165;
    const double C65808 = C139301 * C1165;
    const double C2002 = C139480 * C1992;
    const double C30403 = C139557 * C1992;
    const double C34239 = C30255 * C1992;
    const double C92714 = C139557 * C1992;
    const double C96494 = C92566 * C1992;
    const double C32750 = C139544 * C2392;
    const double C34659 = C13349 * C2392;
    const double C80216 = C139301 * C2392;
    const double C95014 = C139544 * C2392;
    const double C96914 = C46913 * C2392;
    const double C220 = C208 + C209;
    const double C307 = C295 + C296;
    const double C13476 = C13462 + C13463;
    const double C30428 = C30414 + C30415;
    const double C47040 = C47026 + C47027;
    const double C92739 = C92725 + C92726;
    const double C1084 = C1068 + C1069;
    const double C14557 = C14534 + C14535;
    const double C16578 = C16570 + C16571;
    const double C33312 = C33306 + C33307;
    const double C48103 = C48080 + C48081;
    const double C50086 = C50078 + C50079;
    const double C65813 = C65805 + C65806;
    const double C95567 = C95561 + C95562;
    const double C1903 = C1887 + C1888;
    const double C17312 = C17306 + C17307;
    const double C32403 = C32380 + C32381;
    const double C34352 = C34344 + C34345;
    const double C50820 = C50814 + C50815;
    const double C79917 = C79911 + C79912;
    const double C94682 = C94659 + C94660;
    const double C96607 = C96599 + C96600;
    const double C18461 = C4411 * C13349;
    const double C18450 = C4411 * C139544;
    const double C51963 = C4411 * C46913;
    const double C51958 = C4411 * C139544;
    const double C67197 = C4411 * C139301;
    const double C67640 = C67636 * C139480;
    const double C77363 = C67636 * C139557;
    const double C81381 = C67636 * C30255;
    const double C110334 = C67636 * C139557;
    const double C114250 = C67636 * C92566;
    const double C78044 = C67319 * C139555;
    const double C80967 = C67319 * C46915;
    const double C110982 = C67319 * C139555;
    const double C113836 = C67319 * C13351;
    const double C128972 = C67319 * C139465;
    const double C41370 = C139465 * C9149;
    const double C81517 = C139555 * C9149;
    const double C87029 = C46915 * C9149;
    const double C114386 = C139555 * C9149;
    const double C119884 = C13351 * C9149;
    const double C20524 = C20518 + C20519;
    const double C20668 = C20666 + C20667;
    const double C53982 = C53976 + C53977;
    const double C64380 = C64360 + C64361;
    const double C82958 = C82954 + C82955;
    const double C115827 = C115823 + C115824;
    const double C41071 = C41066 + C8919;
    const double C113974 = C113971 + C18755;
    const double C24340 = C24334 + C24335;
    const double C119573 = C119567 + C24445;
    const double C24548 = C24546 + C24547;
    const double C40768 = C40762 + C40763;
    const double C81105 = C81102 + C52251;
    const double C57714 = C57708 + C57709;
    const double C86718 = C86712 + C57817;
    const double C67314 = C67298 + C67299;
    const double C77252 = C77246 + C77247;
    const double C80687 = C80680 + C80681;
    const double C86398 = C86390 + C86391;
    const double C86826 = C86822 + C86823;
    const double C110223 = C110217 + C110218;
    const double C113556 = C113549 + C113550;
    const double C119253 = C119245 + C119246;
    const double C119681 = C119677 + C119678;
    const double C43769 = C43765 + C43766;
    const double C43841 = C43839 + C43840;
    const double C89424 = C89422 + C89423;
    const double C89496 = C89492 + C89493;
    const double C105927 = C105923 + C105924;
    const double C122323 = C122319 + C122320;
    const double C21847 = C21846 + C21842;
    const double C81658 = C81656 + C81651;
    const double C84138 = C84136 + C84129;
    const double C114527 = C114525 + C114520;
    const double C116993 = C116991 + C116984;
    const double C35571 = C35569 * C13349;
    const double C97801 = C35569 * C46913;
    const double C129073 = C35569 * C139301;
    const double C38114 = C38113 * C13349;
    const double C100325 = C38113 * C46913;
    const double C129074 = C38113 * C139301;
    const double C4291 = C139465 * C4281;
    const double C17309 = C139555 * C4281;
    const double C50817 = C139555 * C4281;
    const double C137796 = C137795 + C137784;
    const double C849 = (2 * (2 * ae * C137845 * C137755 + C137730 * C138057) +
                         C138060 + C138060 +
                         C137730 * (C138057 + C138061 + C138061 +
                                    C137730 * (2 * ae * C137845 * C137779 +
                                               C137730 * C137845 * C137822))) /
                        C137584;
    const double C950 = (C137855 + ae * C137858 + C137730 * C137866 + C138060 +
                         C137845 * (C137794 + C137845 * C137884)) /
                        C137584;
    const double C1170 = (C137936 + ae * C137858 + C137730 * C137941 + C138060 +
                          C137845 * (C137794 + C137845 * C137949)) /
                         C137584;
    const double C4399 = (C138060 + C137888 * C137845 * C137927) / C137584;
    const double C4843 = (C138060 + C137888 * C137845 * C138007) / C137584;
    const double C4176 = C103 * C4165;
    const double C4174 = C105 * C4165;
    const double C4290 = C186 * C4165;
    const double C4408 = C273 * C4165;
    const double C15267 = C13356 * C4165;
    const double C17201 = C13354 * C4165;
    const double C17308 = C13440 * C4165;
    const double C18611 = C139544 * C4165;
    const double C33308 = C30392 * C4165;
    const double C48789 = C46920 * C4165;
    const double C50709 = C46918 * C4165;
    const double C50816 = C47004 * C4165;
    const double C52107 = C139544 * C4165;
    const double C66275 = C63570 * C4165;
    const double C79010 = C139301 * C4165;
    const double C95563 = C92703 * C4165;
    const double C1782 = (2 * (2 * ae * C137888 * C137755 + C137730 * C138159) +
                          C138162 + C138162 +
                          C137730 * (C138159 + C138163 + C138163 +
                                     C137730 * (2 * ae * C137888 * C137779 +
                                                C137730 * C137888 * C137822))) /
                         C137584;
    const double C1997 = (C137898 + ae * C137901 + C137730 * C137909 + C138162 +
                          C137888 * (C137794 + C137888 * C137927)) /
                         C137584;
    const double C2397 = (C137994 + ae * C137901 + C137730 * C137999 + C138162 +
                          C137888 * (C137794 + C137888 * C138007)) /
                         C137584;
    const double C4513 = (C138162 + C137845 * C137888 * C137949) / C137584;
    const double C1091 = C1082 + C1083;
    const double C14561 = C14542 + C14543;
    const double C48107 = C48088 + C48089;
    const double C65815 = C65809 + C65810;
    const double C1910 = C1901 + C1902;
    const double C32407 = C32388 + C32389;
    const double C94686 = C94667 + C94668;
    const double C128185 = C128181 + C128182;
    const double C14285 = C14276 + C14277;
    const double C47849 = C47840 + C47841;
    const double C18467 = C18458 + C18459;
    const double C31221 = C31212 + C31213;
    const double C93526 = C93517 + C93518;
    const double C24654 = C24651 + C24652;
    const double C58019 = C58016 + C58017;
    const double C67637 = C67632 + C67633;
    const double C20441 = C14413 * C139544;
    const double C53905 = C14413 * C139544;
    const double C64275 = C14413 * C139301;
    const double C64637 = C64386 * C273;
    const double C67631 = C67320 * C273;
    const double C77366 = C67320 * C30392;
    const double C80968 = C67320 * C47004;
    const double C110337 = C67320 * C92703;
    const double C113837 = C67320 * C13440;
    const double C40767 = C31099 * C139544;
    const double C102974 = C31099 * C139544;
    const double C15497 = C15494 + C15495;
    const double C35297 = C35292 + C35293;
    const double C97540 = C97535 + C97536;
    const double C21640 = C21637 + C21638;
    const double C55047 = C55044 + C55045;
    const double C78401 = C78395 + C78396;
    const double C21327 = C21322 + C21323;
    const double C54743 = C54738 + C54739;
    const double C78062 = C78051 + C78052;
    const double C32263 = C32254 + C32255;
    const double C94542 = C94533 + C94534;
    const double C43397 = C32137 * C139544;
    const double C105578 = C32137 * C139544;
    const double C126642 = C32137 * C139301;
    const double C126811 = C126808 * C186;
    const double C1254 =
        (2 * C137730 * C137963 + C137730 * C137970 + C138114 + C138114 +
         C137845 * (2 * ae * C137885 +
                    C137845 * (2 * C137730 * C137968 +
                               C137730 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C4946 =
        (C138114 +
         C137888 *
             (ae * C137928 +
              C137845 * (2 * C137730 * C138021 +
                         C137730 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C1271 = C186 * C944;
    const double C16684 = C13440 * C944;
    const double C50192 = C47004 * C944;
    const double C63799 = C63635 * C944;
    const double C4625 = C186 * C4278;
    const double C17612 = C13440 * C4278;
    const double C51120 = C47004 * C4278;
    const double C2583 =
        (2 * C137730 * C138037 + C137730 * C138044 + C138248 + C138248 +
         C137888 * (2 * ae * C137928 +
                    C137888 * (2 * C137730 * C138042 +
                               C137730 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C4732 =
        (C138248 +
         C137845 *
             (ae * C137885 +
              C137888 * (2 * C137730 * C137984 +
                         C137730 * (C137984 + std::pow(C137736, 7) * bs[7] *
                                                  C137975 * C137734)))) /
        C137584;
    const double C2600 = C273 * C1991;
    const double C34868 = C30392 * C1991;
    const double C97123 = C92703 * C1991;
    const double C125796 = C125482 * C1991;
    const double C138359 = ae * C138358;
    const double C5863 =
        (2 * C138108 + C137845 * C138358 + (C137781 + C137817 * C137953) * ae) /
        C137581;
    const double C8676 = (C137888 * C138358) / C137581;
    const double C138511 = ae * C138510;
    const double C10736 =
        (2 * C138242 + C137888 * C138510 + (C137781 + C137817 * C138027) * ae) /
        C137581;
    const double C21738 =
        (C138390 + ae * C138430 + C137845 * C138611 + ae * C137888 * C138567 +
         C137888 * (C138569 + C137888 * (C138609 + ae * C137845 * C138596 +
                                         C137845 * (ae * C138596 +
                                                    C137845 * C137730 *
                                                        std::pow(C137736, 7) *
                                                        bs[7] * C138012)))) /
        C137584;
    const double C138570 = C138553 + C138568;
    const double C138662 = ae * C138660;
    const double C138781 = C138766 + C138779;
    const double C138713 = ae * C138712;
    const double C26837 =
        (2 * C138432 + C137888 * C138712 + (C138363 + C138555 * C138027) * ae) /
        C137581;
    const double C137837 = C137836 + C137820;
    const double C138069 = ae * C138067;
    const double C5804 = (2 * C138058 + C137845 * C138067) / C137581;
    const double C8593 = (C137888 * C138067) / C137581;
    const double C138171 = ae * C138169;
    const double C10621 = (2 * C138160 + C137888 * C138169) / C137581;
    const double C8679 =
        (C137888 *
         (C137884 + C138258 +
          C137845 *
              (C137835 + C137845 * (C137874 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C138300 = ae * C138298;
    const double C6333 = C105 * C6326;
    const double C15268 = C13356 * C6326;
    const double C48790 = C46920 * C6326;
    const double C79612 = C63570 * C6326;
    const double C5807 =
        (2 * C138057 + C137845 * C138066 + C138338 + C138338 +
         C137730 *
             (2 * ae * (2 * C138250 + C137845 * (C137779 + C137815 * C137953)) +
              C137730 * (2 * C138251 +
                         C137845 * (C137822 +
                                    (C137802 * C137803 +
                                     C137734 * bs[7] * std::pow(C137736, 7)) *
                                        C137737 * C137953)))) /
        C137584;
    const double C20363 =
        (3 * (C137866 + C138061 + C137845 * C138536) + C138338 +
         C137845 *
             (2 * C138536 + C138070 +
              C137845 * (C137880 + C138259 +
                         C137845 * (C137828 +
                                    C137845 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C20511 =
        (3 * (C137941 + C138061 + C137845 * C138546) + C138338 +
         C137845 *
             (2 * C138546 + C138070 +
              C137845 * (C137947 + C138259 +
                         C137845 * (C137828 +
                                    C137845 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))))) /
        C137584;
    const double C24217 =
        (C138338 +
         C137888 * (2 * C137845 * C137923 +
                    C137845 * (C137923 +
                               (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892) *
                                   C137953))) /
        C137584;
    const double C24646 =
        (C138338 +
         C137888 * (2 * C137845 * C138005 +
                    C137845 * (C138005 +
                               (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991) *
                                   C137953))) /
        C137584;
    const double C20288 = C13356 * C20279;
    const double C53762 = C46920 * C20279;
    const double C64091 = C63570 * C20279;
    const double C24008 = C13356 * C23999;
    const double C57398 = C46920 * C23999;
    const double C66979 = C63570 * C23999;
    const double C10624 =
        (2 * C138159 + C137888 * C138168 + C138478 + C138478 +
         C137730 *
             (2 * ae * (2 * C138271 + C137888 * (C137779 + C137815 * C138027)) +
              C137730 * (2 * C138272 +
                         C137888 * (C137822 +
                                    (C137802 * C137803 +
                                     C137734 * bs[7] * std::pow(C137736, 7)) *
                                        C137737 * C138027)))) /
        C137584;
    const double C26907 =
        (C138478 +
         C137845 * (2 * C138655 +
                    C137888 * (C137947 +
                               (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933) *
                                   C138027))) /
        C137584;
    const double C43469 =
        (3 * (C137909 + C138163 + C137888 * C138732) + C138478 +
         C137888 *
             (2 * C138732 + C138172 +
              C137888 * (C137923 + C138280 +
                         C137888 * (C137828 +
                                    C137888 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))))) /
        C137584;
    const double C43762 =
        (3 * (C137999 + C138163 + C137888 * C138753) + C138478 +
         C137888 *
             (2 * C138753 + C138172 +
              C137888 * (C138005 + C138280 +
                         C137888 * (C137828 +
                                    C137888 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))))) /
        C137584;
    const double C43314 = C13356 * C43305;
    const double C105501 = C46920 * C43305;
    const double C126553 = C63570 * C43305;
    const double C138854 = C138853 + C138843;
    const double C138897 = ae * C138895;
    const double C73447 = (2 * C138666 + C137888 * C138895) / C137581;
    const double C73602 =
        (2 * C138665 + C137888 * C138894 + C138945 + C138945 +
         C137845 *
             (2 * ae * (2 * C138900 + C137888 * (C137863 + C137876 * C138027)) +
              C137845 * (2 * C138922 +
                         C137888 * (C137968 +
                                    (C137802 * C137803 +
                                     C137953 * bs[7] * std::pow(C137736, 7)) *
                                        C137737 * C138027)))) /
        C137584;
    const double C89490 =
        (3 * (C138614 + C138669 + C137888 * C138982) + C138945 +
         C137888 *
             (2 * C138982 + C138898 +
              C137888 * (C138878 + C138929 +
                         C137888 * (C138845 +
                                    C137888 * (ae * C137919 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C138012))))) /
        C137584;
    const double C89280 = C47004 * C89049;
    const double C122113 = C13440 * C89049;
    const double C130979 = C186 * C89049;
    const double C139065 = C139064 + C139047;
    const double C69735 =
        (2 * C138715 + C137845 * C138883 + C138912 + C138912 +
         C137888 * (2 * ae * C138871 +
                    C137888 * (2 * C137845 * C138042 +
                               C137845 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C71768 =
        (3 * (C138675 + C138722 + C137845 * C138933) + C138912 +
         C137845 *
             (2 * C138933 + ae * (C137888 * C138867 + C138843) +
              C137845 *
                  (C138903 + ae * (C137888 * C137845 * C137919 + C138839) +
                   C137845 * (ae * (C137888 * C137919 + C137811) +
                              C137845 * (ae * C137876 +
                                         C137888 * std::pow(C137736, 7) *
                                             bs[7] * C137975))))) /
        C137584;
    const double C69739 = C273 * C69246;
    const double C87136 = C30392 * C69246;
    const double C119991 = C92703 * C69246;
    const double C130592 = C125482 * C69246;
    const double C138958 = ae * C138957;
    const double C73499 =
        (2 * C138646 + C137888 * C138957 + (C138583 + C138840 * C138027) * ae) /
        C137581;
    const double C139003 = C138986 + C139001;
    const double C4955 = C4952 + C4953;
    const double C17923 = C17920 + C17921;
    const double C51431 = C51428 + C51429;
    const double C1559 = C976 * C273;
    const double C1279 = C1275 + C1268;
    const double C1385 = C1381 * C139465;
    const double C16793 = C1381 * C139555;
    const double C50301 = C1381 * C139555;
    const double C16689 = C16687 + C14679;
    const double C50197 = C50195 + C48225;
    const double C4951 = C4294 * C273;
    const double C33812 = C4294 * C30392;
    const double C35148 = C4294 * C13356;
    const double C96067 = C4294 * C92703;
    const double C97397 = C4294 * C46920;
    const double C4629 = C4627 + C4623;
    const double C17617 = C17615 + C15711;
    const double C51125 = C51123 + C49227;
    const double C32519 = C2216 * C139544;
    const double C94794 = C2216 * C139544;
    const double C128264 = C2216 * C139301;
    const double C34455 = C3742 * C139544;
    const double C96710 = C3742 * C139544;
    const double C128188 = C128186 * C139465;
    const double C6029 =
        (2 * (2 * ae * C137858 + C137845 * C138361) + C138370 + C138370 +
         C137845 * (C138361 + C138367 + C138367 +
                    C137845 * (2 * C137873 + C137845 * C137730 * C137968))) /
        C137584;
    const double C9148 =
        (C138370 +
         C137888 * (C138390 + ae * C138430 +
                    C137845 * (C137916 + C137845 * C137730 * C138021))) /
        C137584;
    const double C6033 = C186 * C5864;
    const double C14273 = C139555 * C5864;
    const double C14676 = C13440 * C5864;
    const double C14803 = C273 * C5864;
    const double C20520 = C13356 * C5864;
    const double C20595 = C13439 * C5864;
    const double C47837 = C139555 * C5864;
    const double C48222 = C47004 * C5864;
    const double C53978 = C46920 * C5864;
    const double C54051 = C47003 * C5864;
    const double C64374 = C63570 * C5864;
    const double C64472 = C63634 * C5864;
    const double C64470 = C63635 * C5864;
    const double C8918 = C186 * C8677;
    const double C18311 = C139555 * C8677;
    const double C18760 = C13440 * C8677;
    const double C18905 = C273 * C8677;
    const double C24336 = C13356 * C8677;
    const double C24443 = C13439 * C8677;
    const double C31095 = C139465 * C8677;
    const double C31527 = C30392 * C8677;
    const double C51819 = C139555 * C8677;
    const double C52256 = C47004 * C8677;
    const double C57710 = C46920 * C8677;
    const double C57815 = C47003 * C8677;
    const double C65192 = C63635 * C8677;
    const double C67312 = C63570 * C8677;
    const double C67424 = C63634 * C8677;
    const double C93827 = C92703 * C8677;
    const double C21428 = C13440 * C21099;
    const double C41069 = C186 * C21099;
    const double C54842 = C47004 * C21099;
    const double C65193 = C63635 * C21099;
    const double C35570 = C35568 + C35562;
    const double C15725 = C15721 + C15709;
    const double C49241 = C49237 + C49225;
    const double C84027 = C139555 * C21739;
    const double C116882 = C139555 * C21739;
    const double C133449 = C139465 * C21739;
    const double C138592 = C138591 + C138585;
    const double C24440 =
        (2 * (2 * ae * C137888 * C137856 + C137845 * C138665) + C138668 +
         C138668 +
         C137845 * (C138665 + C138669 + C138669 +
                    C137845 * (2 * ae * C137888 * C137863 +
                               C137845 * C137888 * C137968))) /
        C137584;
    const double C116570 = C116565 + C21430;
    const double C133222 = C133219 + C41070;
    const double C83712 = C83707 + C54844;
    const double C69345 = C69340 + C69341;
    const double C69501 = C69499 + C69500;
    const double C83386 = C83379 + C83380;
    const double C86827 = C86824 + C86825;
    const double C116250 = C116243 + C116244;
    const double C119682 = C119679 + C119680;
    const double C132988 = C132984 + C132985;
    const double C122118 = C122116 + C26980;
    const double C130981 = C130980 + C38110;
    const double C89285 = C89283 + C60316;
    const double C89204 = C83606 * C139555;
    const double C122042 = C83606 * C139555;
    const double C130901 = C83606 * C139465;
    const double C130750 = C130748 * C63570;
    const double C135149 = C135148 * C139301;
    const double C4741 = C4738 + C4739;
    const double C33613 = C33610 + C33611;
    const double C95868 = C95865 + C95866;
    const double C2308 = C2023 * C186;
    const double C2502 = C2498 * C139480;
    const double C34765 = C2498 * C139557;
    const double C97020 = C2498 * C139557;
    const double C2608 = C2604 + C2597;
    const double C34873 = C34871 + C32993;
    const double C97128 = C97126 + C95248;
    const double C748 = C744 * C139465;
    const double C1683 = C1679 * C139465;
    const double C17101 = C1679 * C139555;
    const double C50609 = C1679 * C139555;
    const double C3340 = C3339 * C139465;
    const double C14017 = C3339 * C139555;
    const double C47581 = C3339 * C139555;
    const double C4061 = C4060 * C139465;
    const double C5075 = C5073 * C139465;
    const double C18023 = C5073 * C139555;
    const double C51531 = C5073 * C139555;
    const double C66051 = C66049 * C139480;
    const double C16147 = C16146 + C6962;
    const double C15830 = C15496 * C13440;
    const double C21210 = C15496 * C13356;
    const double C49346 = C15496 * C47004;
    const double C54632 = C15496 * C46920;
    const double C35977 = C35976 * C139557;
    const double C98204 = C35976 * C139557;
    const double C36121 = C36119 + C36114;
    const double C98348 = C98346 + C98341;
    const double C11061 =
        (2 * (2 * ae * C137901 + C137888 * C138394) + C138521 + C138521 +
         C137888 * (C138394 + C138518 + C138518 +
                    C137888 * (2 * C137916 + C137888 * C137730 * C138042))) /
        C137584;
    const double C11065 = C273 * C10737;
    const double C32251 = C139557 * C10737;
    const double C32872 = C186 * C10737;
    const double C32990 = C30392 * C10737;
    const double C43767 = C13356 * C10737;
    const double C43911 = C30391 * C10737;
    const double C94530 = C139557 * C10737;
    const double C95245 = C92703 * C10737;
    const double C105925 = C46920 * C10737;
    const double C106062 = C92702 * C10737;
    const double C127041 = C63570 * C10737;
    const double C127202 = C125481 * C10737;
    const double C127200 = C125482 * C10737;
    const double C69741 = C69740 + C21844;
    const double C87141 = C87139 + C41472;
    const double C69257 = C69255 * C63570;
    const double C69586 = C69584 * C139480;
    const double C86929 = C69584 * C139557;
    const double C119784 = C69584 * C139557;
    const double C119996 = C119994 + C103665;
    const double C27252 =
        (2 * (2 * ae * C138435 + C137888 * C138715) + C138725 + C138725 +
         C137888 *
             (C138715 + C138722 + C138722 +
              C137888 * (2 * ae * C138716 + C137888 * C137845 * C138042))) /
        C137584;
    const double C27255 = C273 * C26838;
    const double C38512 = C30392 * C26838;
    const double C83490 = C139557 * C26838;
    const double C83922 = C63570 * C26838;
    const double C89494 = C47004 * C26838;
    const double C89566 = C30391 * C26838;
    const double C100721 = C92703 * C26838;
    const double C116354 = C139557 * C26838;
    const double C122321 = C13440 * C26838;
    const double C122392 = C92702 * C26838;
    const double C129471 = C125482 * C26838;
    const double C131206 = C186 * C26838;
    const double C131284 = C125481 * C26838;
    const double C138803 = C138802 + C138796;
    const double C14132 = C13353 * C831;
    const double C14128 = C13353 * C828;
    const double C14123 = C13353 * C830;
    const double C14116 = C13353 * C829;
    const double C16248 = C13353 * C827;
    const double C18160 = C13353 * C4160;
    const double C18156 = C13353 * C4159;
    const double C20284 = C13353 * C5803;
    const double C20990 = C13353 * C6325;
    const double C24004 = C13353 * C8592;
    const double C31980 = C13353 * C1764;
    const double C31976 = C13353 * C1761;
    const double C31974 = C13353 * C1763;
    const double C31968 = C13353 * C1762;
    const double C34022 = C13353 * C1760;
    const double C43310 = C13353 * C10620;
    const double C47696 = C46917 * C831;
    const double C47692 = C46917 * C828;
    const double C47687 = C46917 * C830;
    const double C47680 = C46917 * C829;
    const double C49756 = C46917 * C827;
    const double C51668 = C46917 * C4160;
    const double C51664 = C46917 * C4159;
    const double C53758 = C46917 * C5803;
    const double C54422 = C46917 * C6325;
    const double C57394 = C46917 * C8592;
    const double C94277 = C46917 * C1764;
    const double C94273 = C46917 * C1761;
    const double C94271 = C46917 * C1763;
    const double C94265 = C46917 * C1762;
    const double C96277 = C46917 * C1760;
    const double C105497 = C46917 * C10620;
    const double C14147 = C14135 + C14136;
    const double C14145 = C14130 + C13362;
    const double C14142 = C14120 + C14121;
    const double C14141 = C14118 + C13361;
    const double C18166 = C18154 + C15256;
    const double C20291 = C20286 + C14127;
    const double C20997 = C20992 + C15263;
    const double C24011 = C24006 + C18159;
    const double C31993 = C31982 + C15270;
    const double C31991 = C31978 + C15265;
    const double C31988 = C31972 + C15261;
    const double C31987 = C31970 + C15258;
    const double C43317 = C43312 + C26700;
    const double C47711 = C47699 + C47700;
    const double C47709 = C47694 + C46926;
    const double C47706 = C47684 + C47685;
    const double C47705 = C47682 + C46925;
    const double C51674 = C51662 + C48778;
    const double C53765 = C53760 + C47691;
    const double C54429 = C54424 + C48785;
    const double C57401 = C57396 + C51667;
    const double C94290 = C94279 + C48792;
    const double C94288 = C94275 + C48787;
    const double C94285 = C94269 + C48783;
    const double C94284 = C94267 + C48780;
    const double C105504 = C105499 + C60048;
    const double C64097 = C64088 + C64089;
    const double C64096 = C64086 + C63575;
    const double C64095 = C64084 + C63576;
    const double C64094 = C64080 + C64081;
    const double C64093 = C64078 + C63574;
    const double C64092 = C64076 + C63573;
    const double C65572 = C65568 + C63580;
    const double C65571 = C65566 + C63579;
    const double C66983 = C66977 + C64884;
    const double C66982 = C66975 + C64883;
    const double C66981 = C66972 + C64877;
    const double C66980 = C66970 + C64876;
    const double C68560 = C68557 + C64083;
    const double C69090 = C69086 + C64881;
    const double C69089 = C69084 + C64880;
    const double C71371 = C71368 + C66974;
    const double C77698 = C77690 + C64886;
    const double C77697 = C77688 + C64887;
    const double C77696 = C77686 + C64882;
    const double C77695 = C77684 + C64879;
    const double C77694 = C77682 + C64878;
    const double C79614 = C79610 + C66276;
    const double C83275 = C83273 + C73396;
    const double C88981 = C88977 + C73397;
    const double C126554 = C126551 + C77693;
    const double C127950 = C127947 + C79613;
    const double C134916 = C134913 + C88980;
    const double C35563 = C4630 * C13349;
    const double C35560 = C4630 * C139544;
    const double C97803 = C4630 * C46913;
    const double C97802 = C4630 * C139544;
    const double C129075 = C4630 * C139301;
    const double C2615 = C2611 * C139465;
    const double C16143 = C2611 * C13351;
    const double C49656 = C2611 * C46915;
    const double C970 = C954 + C955;
    const double C13470 = C13450 + C13451;
    const double C16368 = C16362 + C16363;
    const double C47034 = C47014 + C47015;
    const double C49876 = C49870 + C49871;
    const double C14559 = C14538 + C14539;
    const double C16580 = C16574 + C16575;
    const double C48105 = C48084 + C48085;
    const double C50088 = C50082 + C50083;
    const double C65814 = C65807 + C65808;
    const double C2017 = C2001 + C2002;
    const double C30422 = C30402 + C30403;
    const double C34244 = C34238 + C34239;
    const double C92733 = C92713 + C92714;
    const double C96499 = C96493 + C96494;
    const double C32760 = C32749 + C32750;
    const double C34662 = C34658 + C34659;
    const double C80217 = C80215 + C80216;
    const double C95024 = C95013 + C95014;
    const double C96917 = C96913 + C96914;
    const double C14403 = C1084 * C139544;
    const double C16469 = C1084 * C13349;
    const double C47959 = C1084 * C139544;
    const double C49977 = C1084 * C46913;
    const double C65728 = C1084 * C139301;
    const double C66042 = C65813 * C273;
    const double C79309 = C65813 * C30391;
    const double C112197 = C65813 * C92702;
    const double C32127 = C1903 * C139544;
    const double C34133 = C1903 * C13349;
    const double C94416 = C1903 * C139544;
    const double C96388 = C1903 * C46913;
    const double C128028 = C1903 * C139301;
    const double C79919 = C79917 * C47003;
    const double C112789 = C79917 * C13439;
    const double C128179 = C79917 * C186;
    const double C41371 = C41369 + C41370;
    const double C81519 = C81516 + C81517;
    const double C87032 = C87028 + C87029;
    const double C114388 = C114385 + C114386;
    const double C119887 = C119883 + C119884;
    const double C41072 = C41071 + C8919;
    const double C113976 = C113974 + C18755;
    const double C119575 = C119573 + C24445;
    const double C40770 = C40768 * C13354;
    const double C102971 = C40768 * C46918;
    const double C132982 = C40768 * C63570;
    const double C81107 = C81105 + C52251;
    const double C86720 = C86718 + C57817;
    const double C80965 = C67314 * C139555;
    const double C86611 = C67314 * C46915;
    const double C113834 = C67314 * C139555;
    const double C119466 = C67314 * C13351;
    const double C133141 = C67314 * C139465;
    const double C137797 = ae * C137796;
    const double C116 = (3 * C137764 + C137730 * C137796 +
                         (2 * C137753 + C137730 * C137781) * ae) /
                        C137581;
    const double C841 = (C137845 * C137796) / C137581;
    const double C1774 = (C137888 * C137796) / C137581;
    const double C16251 = C139544 * C849;
    const double C49759 = C139544 * C849;
    const double C969 = C139465 * C950;
    const double C16365 = C139555 * C950;
    const double C49873 = C139555 * C950;
    const double C14547 = C139544 * C1170;
    const double C48093 = C139544 * C1170;
    const double C65812 = C139301 * C1170;
    const double C4409 = C139480 * C4399;
    const double C33309 = C139557 * C4399;
    const double C95564 = C139557 * C4399;
    const double C19047 = C139544 * C4843;
    const double C52537 = C139544 * C4843;
    const double C79313 = C139301 * C4843;
    const double C4295 = C4290 + C4291;
    const double C18169 = C18162 + C15267;
    const double C17313 = C17308 + C17309;
    const double C18621 = C18610 + C18611;
    const double C51677 = C51670 + C48789;
    const double C50821 = C50816 + C50817;
    const double C52117 = C52106 + C52107;
    const double C78711 = C78709 + C66275;
    const double C79013 = C79009 + C79010;
    const double C34025 = C139544 * C1782;
    const double C96280 = C139544 * C1782;
    const double C2016 = C139480 * C1997;
    const double C34241 = C139557 * C1997;
    const double C96496 = C139557 * C1997;
    const double C32754 = C139544 * C2397;
    const double C95018 = C139544 * C2397;
    const double C128414 = C139301 * C2397;
    const double C18615 = C139544 * C4513;
    const double C52111 = C139544 * C4513;
    const double C79012 = C139301 * C4513;
    const double C14407 = C1091 * C139544;
    const double C47963 = C1091 * C139544;
    const double C65730 = C1091 * C139301;
    const double C66045 = C65815 * C273;
    const double C32131 = C1910 * C139544;
    const double C94420 = C1910 * C139544;
    const double C128030 = C1910 * C139301;
    const double C128187 = C128185 * C186;
    const double C24225 = C18467 * C139544;
    const double C57605 = C18467 * C139544;
    const double C67199 = C18467 * C139301;
    const double C67641 = C67637 * C139480;
    const double C77367 = C67637 * C139557;
    const double C110338 = C67637 * C139557;
    const double C21211 = C15497 * C139544;
    const double C54633 = C15497 * C139544;
    const double C81383 = C78401 * C139557;
    const double C114252 = C78401 * C139557;
    const double C78072 = C78062 * C139555;
    const double C110986 = C78062 * C139555;
    const double C128974 = C78062 * C139465;
    const double C6028 =
        (2 * (2 * ae * C137867 + C137845 * C137970) + C138359 + C138359 +
         C137845 * (C137970 + C138356 + C138356 +
                    C137845 * (2 * ae * C137881 +
                               C137845 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C9147 =
        (C138359 +
         C137888 *
             (C138023 + ae * C138425 +
              C137845 * (ae * C137924 +
                         C137845 * (C138021 + std::pow(C137736, 7) * bs[7] *
                                                  C138012 * C137734)))) /
        C137584;
    const double C6032 = C186 * C5863;
    const double C14680 = C13440 * C5863;
    const double C48226 = C47004 * C5863;
    const double C65891 = C63635 * C5863;
    const double C8917 = C186 * C8676;
    const double C18762 = C13440 * C8676;
    const double C52258 = C47004 * C8676;
    const double C66573 = C63635 * C8676;
    const double C11060 =
        (2 * (2 * ae * C137910 + C137888 * C138044) + C138511 + C138511 +
         C137888 * (C138044 + C138508 + C138508 +
                    C137888 * (2 * ae * C137924 +
                               C137888 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137734)))) /
        C137584;
    const double C11064 = C273 * C10736;
    const double C32994 = C30392 * C10736;
    const double C95249 = C92703 * C10736;
    const double C128564 = C125482 * C10736;
    const double C138571 = C138570 + C138563;
    const double C24439 =
        (2 * (2 * ae * C137888 * C137869 + C137845 * C138659) + C138662 +
         C138662 +
         C137845 * (C138659 + C138663 + C138663 +
                    C137845 * (2 * ae * C137888 * C138554 +
                               C137845 * C137888 * C137730 *
                                   (C137802 * C137803 +
                                    C137953 * bs[7] * std::pow(C137736, 7)) *
                                   C137737))) /
        C137584;
    const double C138782 = C138781 + C138775;
    const double C27251 =
        (2 * (2 * ae * C138430 + C137888 * C138703) + C138713 + C138713 +
         C137888 * (C138703 + C138710 + C138710 +
                    C137888 * (2 * ae * C138704 +
                               C137888 * C137845 * C137730 *
                                   (C137802 * C137803 +
                                    C138027 * bs[7] * std::pow(C137736, 7)) *
                                   C137737))) /
        C137584;
    const double C27254 = C273 * C26837;
    const double C38510 = C30392 * C26837;
    const double C100719 = C92703 * C26837;
    const double C129472 = C125482 * C26837;
    const double C137839 = ae * C137837;
    const double C137838 = C137730 * C137837;
    const double C138252 = C137845 * C137837;
    const double C138273 = C137888 * C137837;
    const double C842 = (C137796 + C137837 * C137953) / C137581;
    const double C1775 = (C137796 + C137837 * C138027) / C137581;
    const double C850 =
        (2 * (2 * ae * (C137755 + C137779 * C137953) + C137730 * C138066) +
         C138069 + C138069 +
         C137730 * (C138066 + C138070 + C138070 +
                    C137730 * (2 * ae * (C137779 + C137815 * C137953) +
                               C137730 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C5866 =
        (2 * (C137794 + C137845 * C137884) + C138069 +
         C137845 *
             (C137884 + C138258 +
              C137845 * (C137835 +
                         C137845 * (C137874 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C5975 =
        (2 * (C137794 + C137845 * C137949) + C138069 +
         C137845 *
             (C137949 + C138258 +
              C137845 * (C137835 +
                         C137845 * (C137945 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))))) /
        C137584;
    const double C8759 =
        (C138069 +
         C137888 * (C137927 +
                    (C137917 + ae * C137730 * C137919 +
                     C137730 * (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892)) *
                        C137953)) /
        C137584;
    const double C9070 =
        (C138069 +
         C137888 * (C138007 +
                    (C138003 + ae * C137730 * C137919 +
                     C137730 * (ae * C137919 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991)) *
                        C137953)) /
        C137584;
    const double C5811 = C105 * C5804;
    const double C14138 = C13356 * C5804;
    const double C47702 = C46920 * C5804;
    const double C65570 = C63570 * C5804;
    const double C8600 = C105 * C8593;
    const double C18164 = C13356 * C8593;
    const double C51672 = C46920 * C8593;
    const double C66274 = C63570 * C8593;
    const double C1783 =
        (2 * (2 * ae * (C137755 + C137779 * C138027) + C137730 * C138168) +
         C138171 + C138171 +
         C137730 * (C138168 + C138172 + C138172 +
                    C137730 * (2 * ae * (C137779 + C137815 * C138027) +
                               C137730 * (C137822 + (C137802 * C137803 +
                                                     C137734 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C138027)))) /
        C137584;
    const double C6569 =
        (C138171 +
         C137845 * (C137949 +
                    (C137945 + ae * C137730 * C137876 +
                     C137730 * (ae * C137876 + C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933)) *
                        C138027)) /
        C137584;
    const double C10739 =
        (2 * (C137794 + C137888 * C137927) + C138171 +
         C137888 *
             (C137927 + C138279 +
              C137888 * (C137835 +
                         C137888 * (C137917 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))))) /
        C137584;
    const double C10954 =
        (2 * (C137794 + C137888 * C138007) + C138171 +
         C137888 *
             (C138007 + C138279 +
              C137888 * (C137835 +
                         C137888 * (C138003 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))))) /
        C137584;
    const double C10628 = C105 * C10621;
    const double C31984 = C13356 * C10621;
    const double C94281 = C46920 * C10621;
    const double C127949 = C63570 * C10621;
    const double C4170 =
        (2 * (2 * ae * C137888 * C138250 + C137730 * C138297) + C138300 +
         C138300 +
         C137730 * (C138297 + C138301 + C138301 +
                    C137730 * (2 * ae * C137888 * C137845 * C137815 +
                               C137730 * C137888 * C137845 *
                                   (C137802 * C137803 +
                                    C137734 * bs[7] * std::pow(C137736, 7)) *
                                   C137737))) /
        C137584;
    const double C6492 =
        (C137845 * C137927 + C138300 +
         C137888 * (C138258 + C137888 * C137845 *
                                  (C137917 + ae * C137730 * C137919 +
                                   C137730 * (ae * C137919 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137892)))) /
        C137584;
    const double C6803 =
        (C137845 * C138007 + C138300 +
         C137888 * (C138258 + C137888 * C137845 *
                                  (C138003 + ae * C137730 * C137919 +
                                   C137730 * (ae * C137919 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137991)))) /
        C137584;
    const double C8836 =
        (C137888 * C137949 + C138300 +
         C137845 * (C138279 + C137845 * C137888 *
                                  (C137945 + ae * C137730 * C137876 +
                                   C137730 * (ae * C137876 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137933)))) /
        C137584;
    const double C138856 = ae * C138854;
    const double C138855 = C137845 * C138854;
    const double C138923 = C137888 * C138854;
    const double C69419 =
        (2 * (2 * ae * C138750 + C137845 * C138894) + C138897 + C138897 +
         C137845 * (C138894 + C138898 + C138898 +
                    C137845 * (2 * ae * (C137863 + C137876 * C138027) +
                               C137845 * (C137968 + (C137802 * C137803 +
                                                     C137953 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C138027)))) /
        C137584;
    const double C73758 =
        (2 * (C138590 + C137888 * C138880) + C138897 +
         C137888 *
             (C138880 + C138928 +
              C137888 * (C138852 +
                         C137888 * (C138021 + ae * C137845 * C137919 +
                                    C137845 * (ae * C137919 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C138012))))) /
        C137584;
    const double C73604 = C63635 * C73447;
    const double C83709 = C47004 * C73447;
    const double C116567 = C13440 * C73447;
    const double C133221 = C186 * C73447;
    const double C139067 = ae * C139065;
    const double C139066 = C137888 * C139065;
    const double C73809 =
        (2 * (2 * ae * C138605 + C137888 * C138883) + C138958 + C138958 +
         C137888 * (C138883 + C138955 + C138955 +
                    C137888 * (2 * ae * C138867 +
                               C137888 * (C138042 + (C137802 * C137803 +
                                                     C138027 * bs[7] *
                                                         std::pow(C137736, 7)) *
                                                        C137737 * C137953)))) /
        C137584;
    const double C73811 = C273 * C73499;
    const double C84132 = C30392 * C73499;
    const double C116987 = C92703 * C73499;
    const double C133525 = C125482 * C73499;
    const double C139004 = C139003 + C138996;
    const double C4957 = C4955 * C139480;
    const double C33813 = C4955 * C139557;
    const double C96068 = C4955 * C139557;
    const double C1283 = C1279 + C1269;
    const double C16691 = C16689 + C16683;
    const double C50199 = C50197 + C50191;
    const double C4631 = C4629 + C4624;
    const double C17619 = C17617 + C17611;
    const double C51127 = C51125 + C51119;
    const double C14677 = C139555 * C6029;
    const double C48223 = C139555 * C6029;
    const double C19185 = C139555 * C9148;
    const double C31737 = C139465 * C9148;
    const double C52675 = C139555 * C9148;
    const double C14283 = C14272 + C14273;
    const double C14685 = C14675 + C14676;
    const double C14807 = C14803 + C14804;
    const double C20525 = C20520 + C20521;
    const double C47847 = C47836 + C47837;
    const double C48231 = C48221 + C48222;
    const double C53983 = C53978 + C53979;
    const double C64387 = C64374 + C64375;
    const double C31420 = C31418 + C8918;
    const double C18317 = C18310 + C18311;
    const double C18765 = C18759 + C18760;
    const double C18908 = C18905 + C18906;
    const double C24341 = C24336 + C24337;
    const double C31098 = C31094 + C31095;
    const double C31532 = C31527 + C31528;
    const double C51825 = C51818 + C51819;
    const double C52261 = C52255 + C52256;
    const double C57715 = C57710 + C57711;
    const double C67321 = C67312 + C67313;
    const double C93832 = C93827 + C93828;
    const double C38108 = C35570 * C139544;
    const double C100326 = C35570 * C139544;
    const double C129076 = C35570 * C139301;
    const double C84029 = C84026 + C84027;
    const double C116884 = C116881 + C116882;
    const double C133450 = C133448 + C133449;
    const double C138593 = ae * C138592;
    const double C20362 = (3 * C138379 + C137845 * C138592 +
                           (2 * C138373 + C137845 * C138583) * ae) /
                          C137581;
    const double C24114 = (C137888 * C138592) / C137581;
    const double C69170 = (C138592 + C138854 * C138027) / C137581;
    const double C86715 = C139555 * C24440;
    const double C119570 = C139555 * C24440;
    const double C116572 = C116570 + C21430;
    const double C133223 = C133222 + C41070;
    const double C83714 = C83712 + C54844;
    const double C83604 = C69345 * C139555;
    const double C116464 = C69345 * C139555;
    const double C133143 = C69345 * C139465;
    const double C132990 = C132988 * C63570;
    const double C122120 = C122118 + C122112;
    const double C130982 = C130981 + C130978;
    const double C89287 = C89285 + C89279;
    const double C4743 = C4741 * C139465;
    const double C17721 = C4741 * C139555;
    const double C51229 = C4741 * C139555;
    const double C2612 = C2608 + C2598;
    const double C34875 = C34873 + C34867;
    const double C97130 = C97128 + C97122;
    const double C16148 = C16147 + C16145;
    const double C36123 = C36121 + C36115;
    const double C98350 = C98348 + C98342;
    const double C32991 = C139557 * C11061;
    const double C95246 = C139557 * C11061;
    const double C32261 = C32250 + C32251;
    const double C32876 = C32872 + C32873;
    const double C32999 = C32989 + C32990;
    const double C43770 = C43767 + C43768;
    const double C94540 = C94529 + C94530;
    const double C95254 = C95244 + C95245;
    const double C105928 = C105925 + C105926;
    const double C127043 = C127041 + C127042;
    const double C69742 = C69741 + C69738;
    const double C87143 = C87141 + C87135;
    const double C119998 = C119996 + C119990;
    const double C84131 = C139557 * C27252;
    const double C116986 = C139557 * C27252;
    const double C84135 = C84130 + C38512;
    const double C83496 = C83489 + C83490;
    const double C83924 = C83922 + C83923;
    const double C89497 = C89494 + C89495;
    const double C116990 = C116985 + C100721;
    const double C116360 = C116353 + C116354;
    const double C122324 = C122321 + C122322;
    const double C131208 = C131206 + C131207;
    const double C138804 = ae * C138803;
    const double C43468 = (3 * C138530 + C137888 * C138803 +
                           (2 * C138524 + C137888 * C138794) * ae) /
                          C137581;
    const double C14146 = C14132 + C14133;
    const double C14144 = C14128 + C13363;
    const double C14143 = C14123 + C14124;
    const double C14140 = C14116 + C13360;
    const double C16254 = C16248 + C13368;
    const double C18168 = C18160 + C15266;
    const double C18167 = C18156 + C15257;
    const double C20290 = C20284 + C14126;
    const double C20996 = C20990 + C15262;
    const double C24010 = C24004 + C18158;
    const double C31992 = C31980 + C15271;
    const double C31990 = C31976 + C15264;
    const double C31989 = C31974 + C15260;
    const double C31986 = C31968 + C15259;
    const double C34028 = C34022 + C17203;
    const double C43316 = C43310 + C26701;
    const double C47710 = C47696 + C47697;
    const double C47708 = C47692 + C46927;
    const double C47707 = C47687 + C47688;
    const double C47704 = C47680 + C46924;
    const double C49762 = C49756 + C46932;
    const double C51676 = C51668 + C48788;
    const double C51675 = C51664 + C48779;
    const double C53764 = C53758 + C47690;
    const double C54428 = C54422 + C48784;
    const double C57400 = C57394 + C51666;
    const double C94289 = C94277 + C48793;
    const double C94287 = C94273 + C48786;
    const double C94286 = C94271 + C48782;
    const double C94283 = C94265 + C48781;
    const double C96283 = C96277 + C50711;
    const double C105503 = C105497 + C60049;
    const double C14155 = C14147 + C14136;
    const double C14153 = C14145 + C13362;
    const double C14150 = C14142 + C14121;
    const double C14149 = C14141 + C13361;
    const double C18170 = C18166 + C15256;
    const double C20293 = C20291 + C14127;
    const double C20999 = C20997 + C15263;
    const double C24013 = C24011 + C18159;
    const double C32001 = C31993 + C15270;
    const double C31999 = C31991 + C15265;
    const double C31996 = C31988 + C15261;
    const double C31995 = C31987 + C15258;
    const double C43319 = C43317 + C26700;
    const double C47719 = C47711 + C47700;
    const double C47717 = C47709 + C46926;
    const double C47714 = C47706 + C47685;
    const double C47713 = C47705 + C46925;
    const double C51678 = C51674 + C48778;
    const double C53767 = C53765 + C47691;
    const double C54431 = C54429 + C48785;
    const double C57403 = C57401 + C51667;
    const double C94298 = C94290 + C48792;
    const double C94296 = C94288 + C48787;
    const double C94293 = C94285 + C48783;
    const double C94292 = C94284 + C48780;
    const double C105506 = C105504 + C60048;
    const double C64103 = C64097 + C64089;
    const double C64102 = C64096 + C63575;
    const double C64101 = C64095 + C63576;
    const double C64100 = C64094 + C64081;
    const double C64099 = C64093 + C63574;
    const double C64098 = C64092 + C63573;
    const double C65574 = C65572 + C63580;
    const double C65573 = C65571 + C63579;
    const double C66987 = C66983 + C64884;
    const double C66986 = C66982 + C64883;
    const double C66985 = C66981 + C64877;
    const double C66984 = C66980 + C64876;
    const double C68561 = C68560 + C64083;
    const double C69092 = C69090 + C64881;
    const double C69091 = C69089 + C64880;
    const double C71372 = C71371 + C66974;
    const double C77703 = C77698 + C64886;
    const double C77702 = C77697 + C64887;
    const double C77701 = C77696 + C64882;
    const double C77700 = C77695 + C64879;
    const double C77699 = C77694 + C64878;
    const double C79615 = C79614 + C66276;
    const double C83276 = C83275 + C73396;
    const double C88982 = C88981 + C73397;
    const double C126555 = C126554 + C77693;
    const double C127951 = C127950 + C79613;
    const double C134917 = C134916 + C88980;
    const double C41073 = C41072 + C41067;
    const double C113978 = C113976 + C113972;
    const double C119577 = C119575 + C119568;
    const double C81109 = C81107 + C81103;
    const double C86722 = C86720 + C86713;
    const double C122 =
        (3 * (C137759 + C137762 + C137762 + C137730 * C137790) + C137797 +
         C137797 +
         C137730 * (2 * C137790 + C137794 + C137794 +
                    C137730 * (C137785 + C137789 + C137789 +
                               C137730 * (2 * ae * C137779 +
                                          C137730 *
                                              (C137769 * C137770 +
                                               C137734 * bs[6] *
                                                   std::pow(C137728, 6)) *
                                              C137737)))) /
        C137584;
    const double C951 =
        (C137797 + C137845 * (2 * C137866 + ae * C137867 + C137730 * C137884)) /
        C137584;
    const double C1171 =
        (C137797 + C137845 * (2 * C137941 + ae * C137867 + C137730 * C137949)) /
        C137584;
    const double C1998 =
        (C137797 + C137888 * (2 * C137909 + ae * C137910 + C137730 * C137927)) /
        C137584;
    const double C2398 =
        (C137797 + C137888 * (2 * C137999 + ae * C137910 + C137730 * C138007)) /
        C137584;
    const double C135 = C103 * C116;
    const double C133 = C105 * C116;
    const double C214 = C186 * C116;
    const double C301 = C273 * C116;
    const double C13372 = C13356 * C116;
    const double C46936 = C46920 * C116;
    const double C860 = C105 * C841;
    const double C2700 = C103 * C841;
    const double C2780 = C186 * C841;
    const double C2862 = C273 * C841;
    const double C13371 = C13354 * C841;
    const double C13369 = C13356 * C841;
    const double C13464 = C13440 * C841;
    const double C16573 = C139544 * C841;
    const double C46935 = C46918 * C841;
    const double C46933 = C46920 * C841;
    const double C47028 = C47004 * C841;
    const double C50081 = C139544 * C841;
    const double C63582 = C63570 * C841;
    const double C1793 = C105 * C1774;
    const double C3421 = C103 * C1774;
    const double C3501 = C186 * C1774;
    const double C3583 = C273 * C1774;
    const double C17202 = C13356 * C1774;
    const double C30259 = C13354 * C1774;
    const double C30416 = C30392 * C1774;
    const double C34347 = C139544 * C1774;
    const double C50710 = C46920 * C1774;
    const double C76093 = C63570 * C1774;
    const double C92570 = C46918 * C1774;
    const double C92727 = C92703 * C1774;
    const double C96602 = C139544 * C1774;
    const double C977 = C968 + C969;
    const double C16369 = C16364 + C16365;
    const double C49877 = C49872 + C49873;
    const double C14563 = C14546 + C14547;
    const double C48109 = C48092 + C48093;
    const double C65816 = C65811 + C65812;
    const double C4413 = C4408 + C4409;
    const double C33313 = C33308 + C33309;
    const double C95568 = C95563 + C95564;
    const double C19051 = C19046 + C19047;
    const double C52541 = C52536 + C52537;
    const double C79314 = C79312 + C79313;
    const double C35149 = C4295 * C139544;
    const double C97398 = C4295 * C139544;
    const double C18173 = C18169 + C15267;
    const double C51681 = C51677 + C48789;
    const double C78712 = C78711 + C66275;
    const double C79311 = C79013 * C30392;
    const double C79915 = C79013 * C47004;
    const double C112199 = C79013 * C92703;
    const double C112791 = C79013 * C13440;
    const double C2024 = C2015 + C2016;
    const double C34245 = C34240 + C34241;
    const double C96500 = C96495 + C96496;
    const double C32762 = C32753 + C32754;
    const double C95026 = C95017 + C95018;
    const double C128415 = C128413 + C128414;
    const double C18623 = C18614 + C18615;
    const double C52119 = C52110 + C52111;
    const double C79014 = C79011 + C79012;
    const double C138572 = ae * C138571;
    const double C20361 = (3 * C138369 + C137845 * C138571 +
                           (2 * C138363 + C137845 * C138560) * ae) /
                          C137581;
    const double C24113 = (C137888 * C138571) / C137581;
    const double C138783 = ae * C138782;
    const double C43467 = (3 * C138520 + C137888 * C138782 +
                           (2 * C138514 + C137888 * C138773) * ae) /
                          C137581;
    const double C952 =
        (2 * C137866 + ae * C137867 + C137730 * C137884 +
         ae * C137845 * C137837 +
         C137845 *
             (C137839 +
              C137845 * (2 * C137880 + ae * C137881 +
                         C137730 * (C137874 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C1172 =
        (2 * C137941 + ae * C137867 + C137730 * C137949 +
         ae * C137845 * C137837 +
         C137845 *
             (C137839 +
              C137845 * (2 * C137947 + ae * C137881 +
                         C137730 * (C137945 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))))) /
        C137584;
    const double C1999 =
        (2 * C137909 + ae * C137910 + C137730 * C137927 +
         ae * C137888 * C137837 +
         C137888 *
             (C137839 +
              C137888 * (2 * C137923 + ae * C137924 +
                         C137730 * (C137917 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))))) /
        C137584;
    const double C2399 =
        (2 * C137999 + ae * C137910 + C137730 * C138007 +
         ae * C137888 * C137837 +
         C137888 *
             (C137839 +
              C137888 * (2 * C138005 + ae * C137924 +
                         C137730 * (C138003 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))))) /
        C137584;
    const double C4282 =
        (C137888 *
         (C137839 +
          C137845 * (2 * C137880 + ae * C137881 +
                     C137730 * (C137874 + ae * C137730 * C137876 +
                                C137730 * (ae * C137876 +
                                           C137730 * std::pow(C137736, 7) *
                                               bs[7] * C137849))))) /
        C137584;
    const double C137840 = C137804 + C137838;
    const double C138257 = ae * C138252;
    const double C4166 = (C137888 * C138252) / C137581;
    const double C138278 = ae * C138273;
    const double C861 = C105 * C842;
    const double C16252 = C13356 * C842;
    const double C49760 = C46920 * C842;
    const double C63581 = C63570 * C842;
    const double C1794 = C105 * C1775;
    const double C34026 = C13356 * C1775;
    const double C96281 = C46920 * C1775;
    const double C125380 = C63570 * C1775;
    const double C69660 =
        (2 * C138614 + ae * C138605 + C137845 * C138880 +
         ae * C137888 * C138854 +
         C137888 *
             (C138856 +
              C137888 * (2 * C138878 + ae * C138867 +
                         C137845 * (C138021 + ae * C137845 * C137919 +
                                    C137845 * (ae * C137919 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C138012))))) /
        C137584;
    const double C138857 = C138830 + C138855;
    const double C138927 = ae * C138923;
    const double C139068 = C139043 + C139066;
    const double C139005 = ae * C139004;
    const double C89129 = (3 * C138724 + C137888 * C139004 +
                           (2 * C138717 + C137888 * C138993) * ae) /
                          C137581;
    const double C35564 = C4631 * C139544;
    const double C97804 = C4631 * C139544;
    const double C19187 = C19184 + C19185;
    const double C31738 = C31736 + C31737;
    const double C52677 = C52674 + C52675;
    const double C14689 = C14685 + C14676;
    const double C14808 = C14807 * C139555;
    const double C48345 = C14807 * C139555;
    const double C48235 = C48231 + C48222;
    const double C31421 = C31420 + C8918;
    const double C18767 = C18765 + C18760;
    const double C18909 = C18908 * C139555;
    const double C52399 = C18908 * C139555;
    const double C31735 = C31098 * C30392;
    const double C40766 = C31098 * C13356;
    const double C94035 = C31098 * C92703;
    const double C102973 = C31098 * C46920;
    const double C52263 = C52261 + C52256;
    const double C80969 = C67321 * C139555;
    const double C113838 = C67321 * C139555;
    const double C20592 =
        (3 * (C137958 + C138377 + C138377 + C137845 * C138580) + C138593 +
         C138593 +
         C137845 * (2 * C138580 + C138590 + C138590 +
                    C137845 * (C137963 + C138586 + C138586 +
                               C137845 * (2 * C137870 + C137845 * C137968)))) /
        C137584;
    const double C24753 =
        (C138593 +
         C137888 * (2 * C138614 + ae * C138605 +
                    C137845 * (C138018 + ae * C137845 * C137906 +
                               C137845 * (C137913 + C137845 * C138021)))) /
        C137584;
    const double C20596 = C13440 * C20362;
    const double C54052 = C47004 * C20362;
    const double C64467 = C63635 * C20362;
    const double C68730 = C63570 * C20362;
    const double C68786 = C63634 * C20362;
    const double C68839 = C273 * C20362;
    const double C24444 = C13440 * C24114;
    const double C37337 = C186 * C24114;
    const double C57816 = C47004 * C24114;
    const double C67422 = C63635 * C24114;
    const double C71613 = C63570 * C24114;
    const double C71693 = C63634 * C24114;
    const double C71770 = C273 * C24114;
    const double C82887 = C47003 * C24114;
    const double C82956 = C30392 * C24114;
    const double C86393 = C139555 * C24114;
    const double C115756 = C13439 * C24114;
    const double C115825 = C92703 * C24114;
    const double C119248 = C139555 * C24114;
    const double C69421 = C63635 * C69170;
    const double C86716 = C47004 * C69170;
    const double C119571 = C13440 * C69170;
    const double C130391 = C186 * C69170;
    const double C116574 = C116572 + C116566;
    const double C133224 = C133223 + C133220;
    const double C83716 = C83714 + C83708;
    const double C130983 = C130982 * C139301;
    const double C2616 = C2612 * C139465;
    const double C16149 = C16148 * C139555;
    const double C49657 = C16148 * C139555;
    const double C32877 = C32876 * C139557;
    const double C95132 = C32876 * C139557;
    const double C33003 = C32999 + C32990;
    const double C95258 = C95254 + C95245;
    const double C84137 = C84135 + C38512;
    const double C83925 = C83924 * C139557;
    const double C116780 = C83924 * C139557;
    const double C116992 = C116990 + C100721;
    const double C43908 =
        (3 * (C138032 + C138528 + C138528 + C137888 * C138791) + C138804 +
         C138804 +
         C137888 * (2 * C138791 + C138801 + C138801 +
                    C137888 * (C138037 + C138797 + C138797 +
                               C137888 * (2 * C137913 + C137888 * C138042)))) /
        C137584;
    const double C43912 = C30392 * C43468;
    const double C106063 = C92703 * C43468;
    const double C127197 = C125482 * C43468;
    const double C135252 = C63570 * C43468;
    const double C135306 = C186 * C43468;
    const double C135361 = C125481 * C43468;
    const double C14154 = C14146 + C14133;
    const double C14152 = C14144 + C13363;
    const double C14151 = C14143 + C14124;
    const double C14148 = C14140 + C13360;
    const double C16256 = C16254 + C13368;
    const double C18172 = C18168 + C15266;
    const double C18171 = C18167 + C15257;
    const double C20292 = C20290 + C14126;
    const double C20998 = C20996 + C15262;
    const double C24012 = C24010 + C18158;
    const double C32000 = C31992 + C15271;
    const double C31998 = C31990 + C15264;
    const double C31997 = C31989 + C15260;
    const double C31994 = C31986 + C15259;
    const double C34030 = C34028 + C17203;
    const double C43318 = C43316 + C26701;
    const double C47718 = C47710 + C47697;
    const double C47716 = C47708 + C46927;
    const double C47715 = C47707 + C47688;
    const double C47712 = C47704 + C46924;
    const double C49764 = C49762 + C46932;
    const double C51680 = C51676 + C48788;
    const double C51679 = C51675 + C48779;
    const double C53766 = C53764 + C47690;
    const double C54430 = C54428 + C48784;
    const double C57402 = C57400 + C51666;
    const double C94297 = C94289 + C48793;
    const double C94295 = C94287 + C48786;
    const double C94294 = C94286 + C48782;
    const double C94291 = C94283 + C48781;
    const double C96285 = C96283 + C50711;
    const double C105505 = C105503 + C60049;
    const double C14163 = C14155 + C14137;
    const double C14161 = C14153 + C14131;
    const double C14158 = C14150 + C14122;
    const double C14157 = C14149 + C14119;
    const double C18174 = C18170 + C18155;
    const double C20295 = C20293 + C20287;
    const double C21001 = C20999 + C20993;
    const double C24015 = C24013 + C24007;
    const double C32009 = C32001 + C31983;
    const double C32007 = C31999 + C31979;
    const double C32004 = C31996 + C31973;
    const double C32003 = C31995 + C31971;
    const double C43321 = C43319 + C43313;
    const double C47727 = C47719 + C47701;
    const double C47725 = C47717 + C47695;
    const double C47722 = C47714 + C47686;
    const double C47721 = C47713 + C47683;
    const double C51682 = C51678 + C51663;
    const double C53769 = C53767 + C53761;
    const double C54433 = C54431 + C54425;
    const double C57405 = C57403 + C57397;
    const double C94306 = C94298 + C94280;
    const double C94304 = C94296 + C94276;
    const double C94301 = C94293 + C94270;
    const double C94300 = C94292 + C94268;
    const double C105508 = C105506 + C105500;
    const double C64109 = C64103 + C64090;
    const double C64108 = C64102 + C64087;
    const double C64107 = C64101 + C64085;
    const double C64106 = C64100 + C64082;
    const double C64105 = C64099 + C64079;
    const double C64104 = C64098 + C64077;
    const double C65576 = C65574 + C65569;
    const double C65575 = C65573 + C65567;
    const double C66991 = C66987 + C66978;
    const double C66990 = C66986 + C66976;
    const double C66989 = C66985 + C66973;
    const double C66988 = C66984 + C66971;
    const double C68562 = C68561 + C68558;
    const double C69094 = C69092 + C69087;
    const double C69093 = C69091 + C69085;
    const double C71373 = C71372 + C71369;
    const double C77708 = C77703 + C77691;
    const double C77707 = C77702 + C77689;
    const double C77706 = C77701 + C77687;
    const double C77705 = C77700 + C77685;
    const double C77704 = C77699 + C77683;
    const double C79616 = C79615 + C79611;
    const double C83277 = C83276 + C83274;
    const double C88983 = C88982 + C88978;
    const double C126556 = C126555 + C126552;
    const double C127952 = C127951 + C127948;
    const double C134918 = C134917 + C134914;
    const double C41074 = C41073 * C13349;
    const double C103269 = C41073 * C46913;
    const double C133218 = C41073 * C139301;
    const double C2781 = C139465 * C951;
    const double C13465 = C139555 * C951;
    const double C47029 = C139555 * C951;
    const double C16577 = C139544 * C1171;
    const double C50085 = C139544 * C1171;
    const double C3584 = C139480 * C1998;
    const double C30417 = C139557 * C1998;
    const double C92728 = C139557 * C1998;
    const double C34661 = C139544 * C2398;
    const double C96916 = C139544 * C2398;
    const double C223 = C214 + C215;
    const double C310 = C301 + C302;
    const double C2865 = C2862 + C2863;
    const double C16255 = C16250 + C13369;
    const double C16579 = C16572 + C16573;
    const double C49763 = C49758 + C46933;
    const double C50087 = C50080 + C50081;
    const double C3504 = C3501 + C3502;
    const double C34029 = C34024 + C17202;
    const double C34353 = C34346 + C34347;
    const double C96284 = C96279 + C50710;
    const double C96608 = C96601 + C96602;
    const double C18463 = C4413 * C139544;
    const double C51965 = C4413 * C139544;
    const double C79315 = C79314 * C139557;
    const double C112200 = C79314 * C139557;
    const double C18177 = C18173 + C18163;
    const double C51685 = C51681 + C51671;
    const double C78713 = C78712 + C78710;
    const double C79916 = C79014 * C139555;
    const double C112792 = C79014 * C139555;
    const double C20591 =
        (3 * (C138361 + C138367 + C138367 + C137845 * C138561) + C138572 +
         C138572 +
         C137845 * (2 * C138561 + C138569 + C138569 +
                    C137845 * (C138552 + C138565 + C138565 +
                               C137845 * (2 * ae * C138554 +
                                          C137845 * C137730 *
                                              (C137802 * C137803 +
                                               C137953 * bs[7] *
                                                   std::pow(C137736, 7)) *
                                              C137737)))) /
        C137584;
    const double C24752 =
        (C138572 + C137888 * (2 * C138611 + ae * C138600 +
                              C137845 * (C138609 + ae * C137845 * C138596 +
                                         C137845 * (ae * C138596 +
                                                    C137845 * C137730 *
                                                        std::pow(C137736, 7) *
                                                        bs[7] * C138012)))) /
        C137584;
    const double C20594 = C13440 * C20361;
    const double C54050 = C47004 * C20361;
    const double C64471 = C63635 * C20361;
    const double C24442 = C13440 * C24113;
    const double C37336 = C186 * C24113;
    const double C57814 = C47004 * C24113;
    const double C67423 = C63635 * C24113;
    const double C43907 =
        (3 * (C138394 + C138518 + C138518 + C137888 * C138770) + C138783 +
         C138783 +
         C137888 * (2 * C138770 + C138780 + C138780 +
                    C137888 * (C138616 + C138776 + C138776 +
                               C137888 * (2 * ae * C138596 +
                                          C137888 * C137730 *
                                              (C137802 * C137803 +
                                               C138027 * bs[7] *
                                                   std::pow(C137736, 7)) *
                                              C137737)))) /
        C137584;
    const double C43910 = C30392 * C43467;
    const double C106061 = C92703 * C43467;
    const double C127201 = C125482 * C43467;
    const double C137841 = C137840 + C137827;
    const double C2697 =
        (3 * (C138057 + C138061 + C138061 + C137730 * C138261) + C138257 +
         C138257 +
         C137730 * (2 * C138261 + C138258 + C138258 +
                    C137730 * (C138251 + C138259 + C138259 +
                               C137730 * (2 * ae * C137845 * C137815 +
                                          C137730 * C137845 *
                                              (C137802 * C137803 +
                                               C137734 * bs[7] *
                                                   std::pow(C137736, 7)) *
                                              C137737)))) /
        C137584;
    const double C4400 =
        (C138257 + C137888 * C137845 *
                       (2 * C137923 + ae * C137924 +
                        C137730 * (C137917 + ae * C137730 * C137919 +
                                   C137730 * (ae * C137919 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137892)))) /
        C137584;
    const double C4844 =
        (C138257 + C137888 * C137845 *
                       (2 * C138005 + ae * C137924 +
                        C137730 * (C138003 + ae * C137730 * C137919 +
                                   C137730 * (ae * C137919 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137991)))) /
        C137584;
    const double C4175 = C105 * C4166;
    const double C17200 = C13356 * C4166;
    const double C50708 = C46920 * C4166;
    const double C76092 = C63570 * C4166;
    const double C3418 =
        (3 * (C138159 + C138163 + C138163 + C137730 * C138282) + C138278 +
         C138278 +
         C137730 * (2 * C138282 + C138279 + C138279 +
                    C137730 * (C138272 + C138280 + C138280 +
                               C137730 * (2 * ae * C137888 * C137815 +
                                          C137730 * C137888 *
                                              (C137802 * C137803 +
                                               C137734 * bs[7] *
                                                   std::pow(C137736, 7)) *
                                              C137737)))) /
        C137584;
    const double C4514 =
        (C138278 + C137845 * C137888 *
                       (2 * C137947 + ae * C137881 +
                        C137730 * (C137945 + ae * C137730 * C137876 +
                                   C137730 * (ae * C137876 +
                                              C137730 * std::pow(C137736, 7) *
                                                  bs[7] * C137933)))) /
        C137584;
    const double C138858 = C138857 + C138850;
    const double C71690 =
        (3 * (C138665 + C138669 + C138669 + C137845 * C138930) + C138927 +
         C138927 +
         C137845 * (2 * C138930 + C138928 + C138928 +
                    C137845 * (C138922 + C138929 + C138929 +
                               C137845 * (2 * ae * C137888 * C137876 +
                                          C137845 * C137888 *
                                              (C137802 * C137803 +
                                               C137953 * bs[7] *
                                                   std::pow(C137736, 7)) *
                                              C137737)))) /
        C137584;
    const double C139069 = C139068 + C139057;
    const double C89563 =
        (3 * (C138715 + C138722 + C138722 + C137888 * C138994) + C139005 +
         C139005 +
         C137888 * (2 * C138994 + C139002 + C139002 +
                    C137888 * (C138985 + C138998 + C138998 +
                               C137888 * (2 * ae * C138987 +
                                          C137888 * C137845 *
                                              (C137802 * C137803 +
                                               C138027 * bs[7] *
                                                   std::pow(C137736, 7)) *
                                              C137737)))) /
        C137584;
    const double C89565 = C30392 * C89129;
    const double C122391 = C92703 * C89129;
    const double C131283 = C125482 * C89129;
    const double C31739 = C31738 * C139557;
    const double C94036 = C31738 * C139557;
    const double C14693 = C14689 + C14677;
    const double C48239 = C48235 + C48223;
    const double C31422 = C31421 + C31419;
    const double C18769 = C18767 + C18761;
    const double C52265 = C52263 + C52257;
    const double C87031 = C139555 * C24753;
    const double C119886 = C139555 * C24753;
    const double C68733 = C68730 + C68731;
    const double C68841 = C68839 + C68840;
    const double C119574 = C119569 + C24444;
    const double C86719 = C86714 + C57816;
    const double C71616 = C71613 + C71614;
    const double C71772 = C71770 + C71771;
    const double C82959 = C82956 + C82957;
    const double C86399 = C86392 + C86393;
    const double C115828 = C115825 + C115826;
    const double C119254 = C119247 + C119248;
    const double C133225 = C133224 * C139301;
    const double C33007 = C33003 + C32991;
    const double C95262 = C95258 + C95246;
    const double C84139 = C84137 + C84131;
    const double C116994 = C116992 + C116986;
    const double C135254 = C135252 + C135253;
    const double C135308 = C135306 + C135307;
    const double C14162 = C14154 + C14134;
    const double C14160 = C14152 + C14129;
    const double C14159 = C14151 + C14125;
    const double C14156 = C14148 + C14117;
    const double C16258 = C16256 + C16249;
    const double C18176 = C18172 + C18161;
    const double C18175 = C18171 + C18157;
    const double C20294 = C20292 + C20285;
    const double C21000 = C20998 + C20991;
    const double C24014 = C24012 + C24005;
    const double C32008 = C32000 + C31981;
    const double C32006 = C31998 + C31977;
    const double C32005 = C31997 + C31975;
    const double C32002 = C31994 + C31969;
    const double C34032 = C34030 + C34023;
    const double C43320 = C43318 + C43311;
    const double C47726 = C47718 + C47698;
    const double C47724 = C47716 + C47693;
    const double C47723 = C47715 + C47689;
    const double C47720 = C47712 + C47681;
    const double C49766 = C49764 + C49757;
    const double C51684 = C51680 + C51669;
    const double C51683 = C51679 + C51665;
    const double C53768 = C53766 + C53759;
    const double C54432 = C54430 + C54423;
    const double C57404 = C57402 + C57395;
    const double C94305 = C94297 + C94278;
    const double C94303 = C94295 + C94274;
    const double C94302 = C94294 + C94272;
    const double C94299 = C94291 + C94266;
    const double C96287 = C96285 + C96278;
    const double C105507 = C105505 + C105498;
    const double C64115 = C64109 * C139480;
    const double C64114 = C64108 * C139480;
    const double C76726 = C64108 * C30255;
    const double C109697 = C64108 * C92566;
    const double C64113 = C64107 * C139480;
    const double C76724 = C64107 * C30255;
    const double C109695 = C64107 * C92566;
    const double C64112 = C64106 * C139480;
    const double C82608 = C64106 * C30255;
    const double C115477 = C64106 * C92566;
    const double C64111 = C64105 * C139480;
    const double C76723 = C64105 * C30255;
    const double C109694 = C64105 * C92566;
    const double C64110 = C64104 * C139480;
    const double C76720 = C64104 * C30255;
    const double C109691 = C64104 * C92566;
    const double C65578 = C65576 * C139480;
    const double C65577 = C65575 * C139480;
    const double C78708 = C65575 * C30255;
    const double C111607 = C65575 * C92566;
    const double C66995 = C66991 * C139480;
    const double C76727 = C66991 * C139557;
    const double C109698 = C66991 * C139557;
    const double C66994 = C66990 * C139480;
    const double C76725 = C66990 * C139557;
    const double C80546 = C66990 * C30255;
    const double C109696 = C66990 * C139557;
    const double C113415 = C66990 * C92566;
    const double C66993 = C66989 * C139480;
    const double C76721 = C66989 * C139557;
    const double C80545 = C66989 * C30255;
    const double C109692 = C66989 * C139557;
    const double C113414 = C66989 * C92566;
    const double C66992 = C66988 * C139480;
    const double C76722 = C66988 * C139557;
    const double C86290 = C66988 * C30255;
    const double C109693 = C66988 * C139557;
    const double C119145 = C66988 * C92566;
    const double C68563 = C68562 * C139480;
    const double C69096 = C69094 * C139480;
    const double C86291 = C69094 * C139557;
    const double C119146 = C69094 * C139557;
    const double C69095 = C69093 * C139480;
    const double C80544 = C69093 * C139557;
    const double C83272 = C69093 * C30255;
    const double C113413 = C69093 * C139557;
    const double C116141 = C69093 * C92566;
    const double C71374 = C71373 * C139480;
    const double C82609 = C71373 * C139557;
    const double C115478 = C71373 * C139557;
    const double C80547 = C77708 * C139557;
    const double C113416 = C77708 * C139557;
    const double C83278 = C83277 * C139557;
    const double C116142 = C83277 * C139557;
    const double C2783 = C2780 + C2781;
    const double C13477 = C13464 + C13465;
    const double C47041 = C47028 + C47029;
    const double C16581 = C16576 + C16577;
    const double C50089 = C50084 + C50085;
    const double C3586 = C3583 + C3584;
    const double C30429 = C30416 + C30417;
    const double C92740 = C92727 + C92728;
    const double C34663 = C34660 + C34661;
    const double C96918 = C96915 + C96916;
    const double C16471 = C2865 * C139544;
    const double C49979 = C2865 * C139544;
    const double C16257 = C16255 + C13369;
    const double C49765 = C49763 + C46933;
    const double C34135 = C3504 * C139544;
    const double C96390 = C3504 * C139544;
    const double C34031 = C34029 + C17202;
    const double C96286 = C96284 + C50710;
    const double C78714 = C78713 * C139557;
    const double C111608 = C78713 * C139557;
    const double C137842 = ae * C137841;
    const double C117 = (4 * C137796 + C137730 * C137841 +
                         (3 * C137781 + C137730 * C137824) * ae) /
                        C137581;
    const double C2696 = (C137845 * C137841) / C137581;
    const double C3417 = (C137888 * C137841) / C137581;
    const double C138859 = ae * C138858;
    const double C68613 = (4 * C138592 + C137845 * C138858 +
                           (3 * C138583 + C137845 * C138848) * ae) /
                          C137581;
    const double C71448 = (C137888 * C138858) / C137581;
    const double C139070 = ae * C139069;
    const double C135029 = (4 * C138803 + C137888 * C139069 +
                            (3 * C138794 + C137888 * C139054) * ae) /
                           C137581;
    const double C41068 = C31422 * C139544;
    const double C103270 = C31422 * C139544;
    const double C87033 = C87030 + C87031;
    const double C119888 = C119885 + C119886;
    const double C119576 = C119574 + C24444;
    const double C86721 = C86719 + C57816;
    const double C86613 = C71616 * C139555;
    const double C119468 = C71616 * C139555;
    const double C16259 = C16257 + C16251;
    const double C49767 = C49765 + C49759;
    const double C34033 = C34031 + C34025;
    const double C96288 = C96286 + C96280;
    const double C123 =
        (4 * (2 * C137790 + C137794 + C137794 + C137730 * C137833) + C137842 +
         C137842 +
         C137730 *
             (3 * C137833 + C137839 + C137839 +
              C137730 * (2 * C137829 + C137835 + C137835 +
                         C137730 * (C137822 + C137828 + C137828 +
                                    C137730 * (2 * ae * C137815 +
                                               C137730 *
                                                   (C137802 * C137803 +
                                                    C137734 * bs[7] *
                                                        std::pow(C137736, 7)) *
                                                   C137737))))) /
        C137584;
    const double C2776 =
        (C137842 +
         C137845 *
             (3 * C137884 + ae * C137885 +
              C137730 * (2 * C137880 + ae * C137881 +
                         C137730 * (C137874 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137849))))) /
        C137584;
    const double C2939 =
        (C137842 +
         C137845 *
             (3 * C137949 + ae * C137885 +
              C137730 * (2 * C137947 + ae * C137881 +
                         C137730 * (C137945 + ae * C137730 * C137876 +
                                    C137730 * (ae * C137876 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137933))))) /
        C137584;
    const double C3579 =
        (C137842 +
         C137888 *
             (3 * C137927 + ae * C137928 +
              C137730 * (2 * C137923 + ae * C137924 +
                         C137730 * (C137917 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137892))))) /
        C137584;
    const double C3897 =
        (C137842 +
         C137888 *
             (3 * C138007 + ae * C137928 +
              C137730 * (2 * C138005 + ae * C137924 +
                         C137730 * (C138003 + ae * C137730 * C137919 +
                                    C137730 * (ae * C137919 +
                                               C137730 * std::pow(C137736, 7) *
                                                   bs[7] * C137991))))) /
        C137584;
    const double C134 = C105 * C117;
    const double C2699 = C105 * C2696;
    const double C13370 = C13356 * C2696;
    const double C46934 = C46920 * C2696;
    const double C3420 = C105 * C3417;
    const double C30258 = C13356 * C3417;
    const double C92569 = C46920 * C3417;
    const double C68783 =
        (4 * (2 * C138580 + C138590 + C138590 + C137845 * C138846) + C138859 +
         C138859 +
         C137845 *
             (3 * C138846 + C138856 + C138856 +
              C137845 * (2 * C138837 + C138852 + C138852 +
                         C137845 * (C137968 + C138845 + C138845 +
                                    C137845 * (2 * ae * C137876 +
                                               C137845 *
                                                   (C137802 * C137803 +
                                                    C137953 * bs[7] *
                                                        std::pow(C137736, 7)) *
                                                   C137737))))) /
        C137584;
    const double C71927 =
        (C138859 +
         C137888 *
             (3 * C138880 + ae * C138871 +
              C137845 * (2 * C138878 + ae * C138867 +
                         C137845 * (C138021 + ae * C137845 * C137919 +
                                    C137845 * (ae * C137919 +
                                               C137845 * std::pow(C137736, 7) *
                                                   bs[7] * C138012))))) /
        C137584;
    const double C68785 = C63635 * C68613;
    const double C71692 = C63635 * C71448;
    const double C82886 = C47004 * C71448;
    const double C115755 = C13440 * C71448;
    const double C135358 =
        (4 * (2 * C138791 + C138801 + C138801 + C137888 * C139059) + C139070 +
         C139070 +
         C137888 *
             (3 * C139059 + C139067 + C139067 +
              C137888 * (2 * C139051 + C139063 + C139063 +
                         C137888 * (C138042 + C139058 + C139058 +
                                    C137888 * (2 * ae * C137919 +
                                               C137888 *
                                                   (C137802 * C137803 +
                                                    C138027 * bs[7] *
                                                        std::pow(C137736, 7)) *
                                                   C137737))))) /
        C137584;
    const double C135360 = C125482 * C135029;
    const double C119578 = C119576 + C119570;
    const double C86723 = C86721 + C86715;
    d2eexx[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139362 * C139529 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139362 * C139398) *
              C139558 +
          ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 + C859 +
            C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
               C139480 * C139465 * C139362 * C139398 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139362 * C139529) *
              C139559 +
          ((C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
            C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
               C139480 * C139465 * C139362 * C139529 -
           (C104 * C2695 + C2699 + C2699 + C91 * C2697 + C102 * C833 + C2700 +
            C2700 + C90 * C849 + C100 * C827 + C2701 + C2701 + C89 * C843) *
               C139480 * C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139362 * C139529 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139362 * C139398) *
                       C139558 +
                   ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                     C2782 * C105 + C2783 * C91) *
                        C139480 * C139362 * C139398 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139362 * C139529) *
                       C139559 +
                   ((C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                     C222 * C105 + C223 * C91) *
                        C139480 * C139362 * C139529 -
                    ((C186 * C2696 + C139465 * C2776) * C91 +
                     (C186 * C2695 + C139465 * C2775) * C105 + C2783 * C90 +
                     C2782 * C103 + C970 * C89 + C971 * C101) *
                        C139480 * C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139362 * C139529 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139362 * C139398) *
                       C139558 +
                   ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                     C2864 * C105 + C2865 * C91) *
                        C139465 * C139362 * C139398 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139362 * C139529) *
                       C139559 +
                   ((C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                     C309 * C105 + C310 * C91) *
                        C139465 * C139362 * C139529 -
                    ((C273 * C2696 + C139480 * C2858) * C91 +
                     (C273 * C2695 + C139480 * C2857) * C105 + C2865 * C90 +
                     C2864 * C103 + C1084 * C89 + C1085 * C101) *
                        C139465 * C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C186 +
                     (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                      C105 * C189 + C91 * C362) *
                         C139465) *
                        C139480 * C139362 * C139529 -
                    ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                      C101 * C939 + C89 * C1167) *
                         C139465 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C186) *
                        C139480 * C139362 * C139398) *
                       C139558 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C186 +
                     (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                      C105 * C943 + C91 * C1171) *
                         C139465) *
                        C139480 * C139362 * C139398 -
                    ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                      C101 * C188 + C89 * C361) *
                         C139465 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C186) *
                        C139480 * C139362 * C139529) *
                       C139559 +
                   (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                      C105 * C110 + C91 * C116) *
                         C186 +
                     (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                      C105 * C191 + C91 * C364) *
                         C139465) *
                        C139480 * C139362 * C139529 -
                    ((C105 * C2775 + C91 * C2939 + C103 * C943 + C90 * C1171 +
                      C101 * C937 + C89 * C1165) *
                         C139465 +
                     (C105 * C2695 + C91 * C2696 + C103 * C833 + C90 * C841 +
                      C101 * C827 + C89 * C835) *
                         C186) *
                        C139480 * C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 +
                     C446 * C90 + C447 * C91) *
                        C139480 * C139362 * C139529 -
                    (C1280 * C91 + C1281 * C90 +
                     (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                        C139480 * C139362 * C139398) *
                       C139558 +
                   ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 *
                        C139362 * C139398 -
                    (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 *
                        C139529) *
                       C139559 +
                   ((C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C139362 *
                        C139529 -
                    ((C416 * C2695 + C3018 + C3018 + C139465 * C3014) * C91 +
                     C3021 * C90 + C1280 * C89) *
                        C139480 * C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C139362 * C139529 -
                    (C3097 * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C139362 * C139398) *
                       C139558 +
                   (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                     (C3098 + C3102) * C91) *
                        C139362 * C139398 -
                    (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                        C139362 * C139529) *
                       C139559 +
                   ((C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) *
                        C139362 * C139529 -
                    (((C273 * C2775 + C139480 * C3095) * C139465 +
                      (C273 * C2695 + C139480 * C2857) * C186) *
                         C91 +
                     (C3102 + C3098) * C90 + C3097 * C89) *
                        C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C273 +
                     (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                      C105 * C276 + C91 * C579) *
                         C139480) *
                        C139465 * C139362 * C139529 -
                    ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                      C101 * C1053 + C89 * C1461) *
                         C139480 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C273) *
                        C139465 * C139362 * C139398) *
                       C139558 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C273 +
                     (C101 * C1052 + C89 * C1460 + C103 * C1051 + C90 * C1459 +
                      C105 * C1057 + C91 * C1465) *
                         C139480) *
                        C139465 * C139362 * C139398 -
                    ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                      C101 * C275 + C89 * C578) *
                         C139480 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C273) *
                        C139465 * C139362 * C139529) *
                       C139559 +
                   (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                      C105 * C110 + C91 * C116) *
                         C273 +
                     (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                      C105 * C278 + C91 * C581) *
                         C139480) *
                        C139465 * C139362 * C139529 -
                    ((C105 * C2857 + C91 * C3176 + C103 * C1057 + C90 * C1465 +
                      C101 * C1051 + C89 * C1459) *
                         C139480 +
                     (C105 * C2695 + C91 * C2696 + C103 * C833 + C90 * C841 +
                      C101 * C827 + C89 * C835) *
                         C273) *
                        C139465 * C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C139362 * C139529 -
                    (C3253 * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C139362 * C139398) *
                       C139558 +
                   (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                     (C3254 + C3258) * C91) *
                        C139362 * C139398 -
                    (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                        C139362 * C139529) *
                       C139559 +
                   ((C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) *
                        C139362 * C139529 -
                    (((C186 * C2857 + C139465 * C3251) * C139480 +
                      (C186 * C2695 + C139465 * C2775) * C273) *
                         C91 +
                     (C3258 + C3254) * C90 + C3253 * C89) *
                        C139362 * C139398) *
                       C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139362 * C139529 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139362 * C139398) *
              C139558 +
          ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C139362 * C139398 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C139529) *
              C139559 +
          ((C746 * C89 + C747 * C90 + C748 * C91) * C139362 * C139529 -
           ((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139465 * C91 +
            C3340 * C90 + C1680 * C89) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 +
             C126 + C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
                C139480 * C139465 * C139530 -
            (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
             C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
                C139480 * C139465 * C139426) *
               C139529 +
           ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
             C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
                C139480 * C139465 * C139426 -
            (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 +
             C853 + C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
                C139480 * C139465 * C139530) *
               C139398) *
              C825 +
          (((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
             C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
                C139480 * C139465 * C139426 -
            (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 +
             C129 + C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
                C139480 * C139465 * C139530) *
               C139529 +
           ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 +
             C859 + C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
                C139480 * C139465 * C139530 -
            (C104 * C4162 + C4175 + C4175 + C91 * C4170 + C102 * C4161 + C4176 +
             C4176 + C90 * C4169 + C100 * C4160 + C4177 + C4177 + C89 * C4168) *
                C139480 * C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C139530 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139426) *
                        C139529 +
                    (((C186 * C4159 + C139465 * C4275) * C101 +
                      (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                      C4293 * C90 + C4294 * C105 + C4295 * C91) *
                         C139480 * C139426 -
                     (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                      (C186 * C837 + C139465 * C947) * C89 +
                      (C186 * C829 + C139465 * C939) * C101) *
                         C139480 * C139530) *
                        C139398) *
                       C825 +
                   (((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                      C3503 * C105 + C3504 * C91) *
                         C139480 * C139426 -
                     (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                      C217 * C89 + C216 * C101) *
                         C139480 * C139530) *
                        C139529 +
                    ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                      C2782 * C105 + C2783 * C91) *
                         C139480 * C139530 -
                     ((C186 * C4166 + C139465 * C4282) * C91 +
                      (C186 * C4162 + C139465 * C4278) * C105 + C4295 * C90 +
                      C4294 * C103 + C4293 * C89 + C4292 * C101) *
                         C139480 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C139530 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139426) *
                        C139529 +
                    (((C273 * C4159 + C139480 * C4393) * C101 +
                      (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                      C4411 * C90 + C4412 * C105 + C4413 * C91) *
                         C139465 * C139426 -
                     (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                      (C273 * C837 + C139480 * C1061) * C89 +
                      (C273 * C829 + C139480 * C1053) * C101) *
                         C139465 * C139530) *
                        C139398) *
                       C825 +
                   (((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                      C3585 * C105 + C3586 * C91) *
                         C139465 * C139426 -
                     (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                      C304 * C89 + C303 * C101) *
                         C139465 * C139530) *
                        C139529 +
                    ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                      C2864 * C105 + C2865 * C91) *
                         C139465 * C139530 -
                     ((C273 * C4166 + C139480 * C4400) * C91 +
                      (C273 * C4162 + C139480 * C4396) * C105 + C4413 * C90 +
                      C4412 * C103 + C4411 * C89 + C4410 * C101) *
                         C139465 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C186 +
                      (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                       C105 * C189 + C91 * C362) *
                          C139465) *
                         C139480 * C139530 -
                     ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                       C101 * C1872 + C89 * C2100) *
                          C139465 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C186) *
                         C139480 * C139426) *
                        C139529 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C186 +
                      (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
                       C105 * C4277 + C91 * C4513) *
                          C139465) *
                         C139480 * C139426 -
                     ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                       C101 * C939 + C89 * C1167) *
                          C139465 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C186) *
                         C139480 * C139530) *
                        C139398) *
                       C825 +
                   ((((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C186 +
                      (C101 * C1871 + C89 * C2099 + C103 * C1870 + C90 * C2098 +
                       C105 * C1876 + C91 * C2104) *
                          C139465) *
                         C139480 * C139426 -
                     ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                       C101 * C188 + C89 * C361) *
                          C139465 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C186) *
                         C139480 * C139530) *
                        C139529 +
                    (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                       C105 * C833 + C91 * C841) *
                          C186 +
                      (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                       C105 * C943 + C91 * C1171) *
                          C139465) *
                         C139480 * C139530 -
                     ((C105 * C4278 + C91 * C4514 + C103 * C4277 + C90 * C4513 +
                       C101 * C4276 + C89 * C4512) *
                          C139465 +
                      (C105 * C4162 + C91 * C4166 + C103 * C4161 + C90 * C4165 +
                       C101 * C4160 + C89 * C4164) *
                          C186) *
                         C139480 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
             C447 * C91) *
                C139480 * C139530 -
            (C2213 * C91 + C2214 * C90 +
             (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
                C139480 * C139426) *
               C139529 +
           (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
             C4630 * C90 + C4631 * C91) *
                C139480 * C139426 -
            (C1280 * C91 + C1281 * C90 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                C139480 * C139530) *
               C139398) *
              C825 +
          (((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139426 -
            (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139530) *
               C139529 +
           ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 * C139530 -
            ((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C91 +
             C4631 * C90 + C4630 * C89) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C273 * C106 + C139480 * C274) * C186 +
                       (C273 * C187 + C139480 * C499) * C139465) *
                          C89 +
                      (C506 + C522) * C90 + C526 * C91) *
                         C139530 -
                     (C3818 * C91 + (C2316 + C2304) * C90 +
                      ((C273 * C1872 + C139480 * C2292) * C139465 +
                       (C273 * C1762 + C139480 * C1986) * C186) *
                          C89) *
                         C139426) *
                        C139529 +
                    ((((C273 * C4159 + C139480 * C4393) * C186 +
                       (C273 * C4275 + C139480 * C4729) * C139465) *
                          C89 +
                      (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
                         C139426 -
                     (C3097 * C91 + (C1383 + C1371) * C90 +
                      ((C273 * C939 + C139480 * C1359) * C139465 +
                       (C273 * C829 + C139480 * C1053) * C186) *
                          C89) *
                         C139530) *
                        C139398) *
                       C825 +
                   ((((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
                      (C3819 + C3823) * C91) *
                         C139426 -
                     (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                         C139530) *
                        C139529 +
                    (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                      (C3098 + C3102) * C91) *
                         C139530 -
                     (((C273 * C4278 + C139480 * C4732) * C139465 +
                       (C273 * C4162 + C139480 * C4396) * C186) *
                          C91 +
                      (C4743 + C4737) * C90 + (C4742 + C4734) * C89) *
                         C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C273 +
                      (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                       C105 * C276 + C91 * C579) *
                          C139480) *
                         C139465 * C139530 -
                     ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                       C101 * C1986 + C89 * C2394) *
                          C139480 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C273) *
                         C139465 * C139426) *
                        C139529 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C273 +
                      (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
                       C105 * C4395 + C91 * C4843) *
                          C139480) *
                         C139465 * C139426 -
                     ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                       C101 * C1053 + C89 * C1461) *
                          C139480 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C273) *
                         C139465 * C139530) *
                        C139398) *
                       C825 +
                   ((((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C273 +
                      (C101 * C1985 + C89 * C2393 + C103 * C1984 + C90 * C2392 +
                       C105 * C1990 + C91 * C2398) *
                          C139480) *
                         C139465 * C139426 -
                     ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                       C101 * C275 + C89 * C578) *
                          C139480 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C273) *
                         C139465 * C139530) *
                        C139529 +
                    (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                       C105 * C833 + C91 * C841) *
                          C273 +
                      (C101 * C1052 + C89 * C1460 + C103 * C1051 + C90 * C1459 +
                       C105 * C1057 + C91 * C1465) *
                          C139480) *
                         C139465 * C139530 -
                     ((C105 * C4396 + C91 * C4844 + C103 * C4395 + C90 * C4843 +
                       C101 * C4394 + C89 * C4842) *
                          C139480 +
                      (C105 * C4162 + C91 * C4166 + C103 * C4161 + C90 * C4165 +
                       C101 * C4160 + C89 * C4164) *
                          C273) *
                         C139465 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C186 * C106 + C139465 * C187) * C273 +
                       (C186 * C274 + C139465 * C633) * C139480) *
                          C89 +
                      (C640 + C656) * C90 + C660 * C91) *
                         C139530 -
                     (C3974 * C91 + (C2500 + C2488) * C90 +
                      ((C186 * C1986 + C139465 * C2476) * C139480 +
                       (C186 * C1762 + C139465 * C1872) * C273) *
                          C89) *
                         C139426) *
                        C139529 +
                    ((((C186 * C4159 + C139465 * C4275) * C273 +
                       (C186 * C4393 + C139465 * C4943) * C139480) *
                          C89 +
                      (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
                         C139426 -
                     (C3253 * C91 + (C1567 + C1555) * C90 +
                      ((C186 * C1053 + C139465 * C1543) * C139480 +
                       (C186 * C829 + C139465 * C939) * C273) *
                          C89) *
                         C139530) *
                        C139398) *
                       C825 +
                   ((((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
                      (C3975 + C3979) * C91) *
                         C139426 -
                     (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                         C139530) *
                        C139529 +
                    (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                      (C3254 + C3258) * C91) *
                         C139530 -
                     (((C186 * C4396 + C139465 * C4946) * C139480 +
                       (C186 * C4162 + C139465 * C4278) * C273) *
                          C91 +
                      (C4957 + C4951) * C90 + (C4956 + C4948) * C89) *
                         C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
             C745 * C90 + C746 * C91) *
                C139530 -
            (C2613 * C91 + C2614 * C90 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
                C139426) *
               C139529 +
           (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
             C5074 * C90 + C5075 * C91) *
                C139426 -
            (C1680 * C91 + C1681 * C90 +
             (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
                C139530) *
               C139398) *
              C825 +
          (((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139426 -
            (C747 * C91 + C746 * C90 + C745 * C89) * C139530) *
               C139529 +
           ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C139530 -
            ((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139465 * C91 +
             C5075 * C90 + C5074 * C89) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (-std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139362 * C822 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139362 * C823 +
           (C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
            C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
               C139480 * C139465 * C139362 * C824) *
              C825 +
          ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 + C859 +
            C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
               C139480 * C139465 * C139362 * C823 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139362 * C822 -
           (C104 * C834 + C861 + C861 + C91 * C850 + C102 * C832 + C862 + C862 +
            C90 * C848 + C100 * C831 + C863 + C863 + C89 * C847) *
               C139480 * C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
           C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
              C139480 * C139465 * C139362 * C139346 * C96 -
          (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
           C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
              C139480 * C139465 * C139362 * C139346 * C97 +
          (C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
           C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
              C139480 * C139465 * C139362 * C139346 * C98 -
          (C104 * C111 + C134 + C134 + C91 * C123 + C102 * C110 + C135 + C135 +
           C90 * C122 + C100 * C109 + C136 + C136 + C89 * C121) *
              C139480 * C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C1757 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C1758 +
           (C100 * C1763 + C1788 + C1788 + C89 * C1779 + C102 * C1764 + C1789 +
            C1789 + C90 * C1780 + C104 * C1765 + C1790 + C1790 + C91 * C1781) *
               C139480 * C139465 * C1759) *
              C139346 * C825 +
          ((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
            C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
               C139480 * C139465 * C1758 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C1757 -
           (C104 * C1767 + C1794 + C1794 + C91 * C1783 + C102 * C1765 + C1795 +
            C1795 + C90 * C1781 + C100 * C1764 + C1796 + C1796 + C89 * C1780) *
               C139480 * C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[2] += (-std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139362 * C822 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139362 * C823 +
                    ((C186 * C830 + C139465 * C940) * C101 +
                     (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                     C975 * C90 + C976 * C105 + C977 * C91) *
                        C139480 * C139362 * C824) *
                       C825 +
                   ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                     (C186 * C833 + C139465 * C943) * C105 +
                     (C186 * C841 + C139465 * C951) * C91) *
                        C139480 * C139362 * C823 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139362 * C822 -
                    ((C186 * C842 + C139465 * C952) * C91 +
                     (C186 * C834 + C139465 * C944) * C105 + C977 * C90 +
                     C976 * C103 + C975 * C89 + C974 * C101) *
                        C139480 * C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C186 * C106 + C139465 * C187) * C101 +
                    (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                    C217 * C90 + C218 * C105 + C219 * C91) *
                       C139480 * C139362 * C139346 * C96 -
                   (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                    C217 * C89 + C216 * C101) *
                       C139480 * C139362 * C139346 * C97 +
                   (C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                    C222 * C105 + C223 * C91) *
                       C139480 * C139362 * C139346 * C98 -
                   ((C186 * C117 + C139465 * C198) * C91 +
                    (C186 * C111 + C139465 * C192) * C105 + C223 * C90 +
                    C222 * C103 + C220 * C89 + C221 * C101) *
                       C139480 * C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C1757 -
                    (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                     (C186 * C1770 + C139465 * C1880) * C89 +
                     (C186 * C1762 + C139465 * C1872) * C101) *
                        C139480 * C1758 +
                    ((C186 * C1763 + C139465 * C1873) * C101 +
                     (C186 * C1771 + C139465 * C1881) * C89 + C1907 * C103 +
                     C1908 * C90 + C1909 * C105 + C1910 * C91) *
                        C139480 * C1759) *
                       C139346 * C825 +
                   ((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                     (C186 * C1766 + C139465 * C1876) * C105 +
                     (C186 * C1774 + C139465 * C1884) * C91) *
                        C139480 * C1758 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C1757 -
                    ((C186 * C1775 + C139465 * C1885) * C91 +
                     (C186 * C1767 + C139465 * C1877) * C105 + C1910 * C90 +
                     C1909 * C103 + C1908 * C89 + C1907 * C101) *
                        C139480 * C1759) *
                       C139346 * C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[2] += (-std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139362 * C822 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139362 * C823 +
                    ((C273 * C830 + C139480 * C1054) * C101 +
                     (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                     C1089 * C90 + C1090 * C105 + C1091 * C91) *
                        C139465 * C139362 * C824) *
                       C825 +
                   ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                     (C273 * C833 + C139480 * C1057) * C105 +
                     (C273 * C841 + C139480 * C1065) * C91) *
                        C139465 * C139362 * C823 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139362 * C822 -
                    ((C273 * C842 + C139480 * C1066) * C91 +
                     (C273 * C834 + C139480 * C1058) * C105 + C1091 * C90 +
                     C1090 * C103 + C1089 * C89 + C1088 * C101) *
                        C139465 * C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C273 * C106 + C139480 * C274) * C101 +
                    (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                    C304 * C90 + C305 * C105 + C306 * C91) *
                       C139465 * C139362 * C139346 * C96 -
                   (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                    C304 * C89 + C303 * C101) *
                       C139465 * C139362 * C139346 * C97 +
                   (C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                    C309 * C105 + C310 * C91) *
                       C139465 * C139362 * C139346 * C98 -
                   ((C273 * C117 + C139480 * C285) * C91 +
                    (C273 * C111 + C139480 * C279) * C105 + C310 * C90 +
                    C309 * C103 + C307 * C89 + C308 * C101) *
                       C139465 * C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C1757 -
                    (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                     (C273 * C1770 + C139480 * C1994) * C89 +
                     (C273 * C1762 + C139480 * C1986) * C101) *
                        C139465 * C1758 +
                    ((C273 * C1763 + C139480 * C1987) * C101 +
                     (C273 * C1771 + C139480 * C1995) * C89 + C2021 * C103 +
                     C2022 * C90 + C2023 * C105 + C2024 * C91) *
                        C139465 * C1759) *
                       C139346 * C825 +
                   ((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                     (C273 * C1766 + C139480 * C1990) * C105 +
                     (C273 * C1774 + C139480 * C1998) * C91) *
                        C139465 * C1758 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C1757 -
                    ((C273 * C1775 + C139480 * C1999) * C91 +
                     (C273 * C1767 + C139480 * C1991) * C105 + C2024 * C90 +
                     C2023 * C103 + C2022 * C89 + C2021 * C101) *
                        C139465 * C1759) *
                       C139346 * C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::pow(Pi, 2.5) * ((((C101 * C106 + C89 * C112 + C103 * C107 +
                                  C90 * C113 + C105 * C108 + C91 * C114) *
                                     C186 +
                                 (C101 * C187 + C89 * C360 + C103 * C188 +
                                  C90 * C361 + C105 * C189 + C91 * C362) *
                                     C139465) *
                                    C139480 * C139362 * C822 -
                                ((C105 * C937 + C91 * C1165 + C103 * C938 +
                                  C90 * C1166 + C101 * C939 + C89 * C1167) *
                                     C139465 +
                                 (C105 * C827 + C91 * C835 + C103 * C828 +
                                  C90 * C836 + C101 * C829 + C89 * C837) *
                                     C186) *
                                    C139480 * C139362 * C823 +
                                ((C101 * C830 + C89 * C838 + C103 * C831 +
                                  C90 * C839 + C105 * C832 + C91 * C840) *
                                     C186 +
                                 (C101 * C940 + C89 * C1168 + C103 * C941 +
                                  C90 * C1169 + C105 * C942 + C91 * C1170) *
                                     C139465) *
                                    C139480 * C139362 * C824) *
                                   C825 +
                               (((C101 * C828 + C89 * C836 + C103 * C827 +
                                  C90 * C835 + C105 * C833 + C91 * C841) *
                                     C186 +
                                 (C101 * C938 + C89 * C1166 + C103 * C937 +
                                  C90 * C1165 + C105 * C943 + C91 * C1171) *
                                     C139465) *
                                    C139480 * C139362 * C823 -
                                ((C105 * C190 + C91 * C363 + C103 * C189 +
                                  C90 * C362 + C101 * C188 + C89 * C361) *
                                     C139465 +
                                 (C105 * C109 + C91 * C115 + C103 * C108 +
                                  C90 * C114 + C101 * C107 + C89 * C113) *
                                     C186) *
                                    C139480 * C139362 * C822 -
                                ((C105 * C944 + C91 * C1172 + C103 * C942 +
                                  C90 * C1170 + C101 * C941 + C89 * C1169) *
                                     C139465 +
                                 (C105 * C834 + C91 * C842 + C103 * C832 +
                                  C90 * C840 + C101 * C831 + C89 * C839) *
                                     C186) *
                                    C139480 * C139362 * C824) *
                                   C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C101 * C106 + C89 * C112 + C103 * C107 +
                                C90 * C113 + C105 * C108 + C91 * C114) *
                                   C186 +
                               (C101 * C187 + C89 * C360 + C103 * C188 +
                                C90 * C361 + C105 * C189 + C91 * C362) *
                                   C139465) *
                                  C139480 * C139362 * C139346 * C96 -
                              ((C105 * C190 + C91 * C363 + C103 * C189 +
                                C90 * C362 + C101 * C188 + C89 * C361) *
                                   C139465 +
                               (C105 * C109 + C91 * C115 + C103 * C108 +
                                C90 * C114 + C101 * C107 + C89 * C113) *
                                   C186) *
                                  C139480 * C139362 * C139346 * C97 +
                              ((C101 * C108 + C89 * C114 + C103 * C109 +
                                C90 * C115 + C105 * C110 + C91 * C116) *
                                   C186 +
                               (C101 * C189 + C89 * C362 + C103 * C190 +
                                C90 * C363 + C105 * C191 + C91 * C364) *
                                   C139465) *
                                  C139480 * C139362 * C139346 * C98 -
                              ((C105 * C192 + C91 * C365 + C103 * C191 +
                                C90 * C364 + C101 * C190 + C89 * C363) *
                                   C139465 +
                               (C105 * C111 + C91 * C117 + C103 * C110 +
                                C90 * C116 + C101 * C109 + C89 * C115) *
                                   C186) *
                                  C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
             C91 * C114) *
                C186 +
            (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 + C105 * C189 +
             C91 * C362) *
                C139465) *
               C139480 * C1757 -
           ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
             C101 * C1872 + C89 * C2100) *
                C139465 +
            (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
             C101 * C1762 + C89 * C1770) *
                C186) *
               C139480 * C1758 +
           ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
             C105 * C1765 + C91 * C1773) *
                C186 +
            (C101 * C1873 + C89 * C2101 + C103 * C1874 + C90 * C2102 +
             C105 * C1875 + C91 * C2103) *
                C139465) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
             C105 * C1766 + C91 * C1774) *
                C186 +
            (C101 * C1871 + C89 * C2099 + C103 * C1870 + C90 * C2098 +
             C105 * C1876 + C91 * C2104) *
                C139465) *
               C139480 * C1758 -
           ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 + C101 * C188 +
             C89 * C361) *
                C139465 +
            (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 + C101 * C107 +
             C89 * C113) *
                C186) *
               C139480 * C1757 -
           ((C105 * C1877 + C91 * C2105 + C103 * C1875 + C90 * C2103 +
             C101 * C1874 + C89 * C2102) *
                C139465 +
            (C105 * C1767 + C91 * C1775 + C103 * C1765 + C90 * C1773 +
             C101 * C1764 + C89 * C1772) *
                C186) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C139362 * C822 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C139362 * C823 +
           ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 +
            C1282 * C90 + C1283 * C91) *
               C139480 * C139362 * C824) *
              C825 +
          ((C1281 * C89 + C1280 * C90 +
            (C416 * C833 + C1270 + C1270 + C139465 * C1253) * C91) *
               C139480 * C139362 * C823 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 * C822 -
           ((C416 * C834 + C1271 + C1271 + C139465 * C1254) * C91 +
            C1283 * C90 + C1282 * C89) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
           C447 * C91) *
              C139480 * C139362 * C139346 * C96 -
          (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 * C139346 *
              C97 +
          (C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C139362 * C139346 *
              C98 -
          ((C416 * C111 + C437 + C437 + C139465 * C422) * C91 + C449 * C90 +
           C448 * C89) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C1757 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C1758 +
           ((C416 * C1763 + C2196 + C2196 + C139465 * C2183) * C89 +
            C2215 * C90 + C2216 * C91) *
               C139480 * C1759) *
              C139346 * C825 +
          ((C2214 * C89 + C2213 * C90 +
            (C416 * C1766 + C2203 + C2203 + C139465 * C2186) * C91) *
               C139480 * C1758 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C1757 -
           ((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C91 +
            C2216 * C90 + C2215 * C89) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C139362 * C822 -
           ((C1382 + C1368) * C91 + (C1383 + C1371) * C90 +
            ((C273 * C939 + C139480 * C1359) * C139465 +
             (C273 * C829 + C139480 * C1053) * C186) *
                C89) *
               C139362 * C823 +
           (((C273 * C830 + C139480 * C1054) * C186 +
             (C273 * C940 + C139480 * C1360) * C139465) *
                C89 +
            (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
               C139362 * C824) *
              C825 +
          (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
            ((C273 * C833 + C139480 * C1057) * C186 +
             (C273 * C943 + C139480 * C1363) * C139465) *
                C91) *
               C139362 * C823 -
           (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C139362 *
               C822 -
           (((C273 * C944 + C139480 * C1364) * C139465 +
             (C273 * C834 + C139480 * C1058) * C186) *
                C91 +
            (C1385 + C1375) * C90 + (C1384 + C1372) * C89) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C186 +
            (C273 * C187 + C139480 * C499) * C139465) *
               C89 +
           (C506 + C522) * C90 + C526 * C91) *
              C139362 * C139346 * C96 -
          (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C139362 *
              C139346 * C97 +
          (C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) * C139362 *
              C139346 * C98 -
          (((C273 * C192 + C139480 * C504) * C139465 +
            (C273 * C111 + C139480 * C279) * C186) *
               C91 +
           (C525 + C515) * C90 + C527 * C89) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C1757 -
           ((C2315 + C2301) * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C186 +
             (C273 * C1873 + C139480 * C2293) * C139465) *
                C89 +
            (C2305 + C2317) * C90 + (C2308 + C2318) * C91) *
               C1759) *
              C139346 * C825 +
          (((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
            ((C273 * C1766 + C139480 * C1990) * C186 +
             (C273 * C1876 + C139480 * C2296) * C139465) *
                C91) *
               C1758 -
           (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C1757 -
           (((C273 * C1877 + C139480 * C2297) * C139465 +
             (C273 * C1767 + C139480 * C1991) * C186) *
                C91 +
            (C2318 + C2308) * C90 + (C2317 + C2305) * C89) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::pow(Pi, 2.5) * ((((C101 * C106 + C89 * C112 + C103 * C107 +
                                  C90 * C113 + C105 * C108 + C91 * C114) *
                                     C273 +
                                 (C101 * C274 + C89 * C577 + C103 * C275 +
                                  C90 * C578 + C105 * C276 + C91 * C579) *
                                     C139480) *
                                    C139465 * C139362 * C822 -
                                ((C105 * C1051 + C91 * C1459 + C103 * C1052 +
                                  C90 * C1460 + C101 * C1053 + C89 * C1461) *
                                     C139480 +
                                 (C105 * C827 + C91 * C835 + C103 * C828 +
                                  C90 * C836 + C101 * C829 + C89 * C837) *
                                     C273) *
                                    C139465 * C139362 * C823 +
                                ((C101 * C830 + C89 * C838 + C103 * C831 +
                                  C90 * C839 + C105 * C832 + C91 * C840) *
                                     C273 +
                                 (C101 * C1054 + C89 * C1462 + C103 * C1055 +
                                  C90 * C1463 + C105 * C1056 + C91 * C1464) *
                                     C139480) *
                                    C139465 * C139362 * C824) *
                                   C825 +
                               (((C101 * C828 + C89 * C836 + C103 * C827 +
                                  C90 * C835 + C105 * C833 + C91 * C841) *
                                     C273 +
                                 (C101 * C1052 + C89 * C1460 + C103 * C1051 +
                                  C90 * C1459 + C105 * C1057 + C91 * C1465) *
                                     C139480) *
                                    C139465 * C139362 * C823 -
                                ((C105 * C277 + C91 * C580 + C103 * C276 +
                                  C90 * C579 + C101 * C275 + C89 * C578) *
                                     C139480 +
                                 (C105 * C109 + C91 * C115 + C103 * C108 +
                                  C90 * C114 + C101 * C107 + C89 * C113) *
                                     C273) *
                                    C139465 * C139362 * C822 -
                                ((C105 * C1058 + C91 * C1466 + C103 * C1056 +
                                  C90 * C1464 + C101 * C1055 + C89 * C1463) *
                                     C139480 +
                                 (C105 * C834 + C91 * C842 + C103 * C832 +
                                  C90 * C840 + C101 * C831 + C89 * C839) *
                                     C273) *
                                    C139465 * C139362 * C824) *
                                   C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C101 * C106 + C89 * C112 + C103 * C107 +
                                C90 * C113 + C105 * C108 + C91 * C114) *
                                   C273 +
                               (C101 * C274 + C89 * C577 + C103 * C275 +
                                C90 * C578 + C105 * C276 + C91 * C579) *
                                   C139480) *
                                  C139465 * C139362 * C139346 * C96 -
                              ((C105 * C277 + C91 * C580 + C103 * C276 +
                                C90 * C579 + C101 * C275 + C89 * C578) *
                                   C139480 +
                               (C105 * C109 + C91 * C115 + C103 * C108 +
                                C90 * C114 + C101 * C107 + C89 * C113) *
                                   C273) *
                                  C139465 * C139362 * C139346 * C97 +
                              ((C101 * C108 + C89 * C114 + C103 * C109 +
                                C90 * C115 + C105 * C110 + C91 * C116) *
                                   C273 +
                               (C101 * C276 + C89 * C579 + C103 * C277 +
                                C90 * C580 + C105 * C278 + C91 * C581) *
                                   C139480) *
                                  C139465 * C139362 * C139346 * C98 -
                              ((C105 * C279 + C91 * C582 + C103 * C278 +
                                C90 * C581 + C101 * C277 + C89 * C580) *
                                   C139480 +
                               (C105 * C111 + C91 * C117 + C103 * C110 +
                                C90 * C116 + C101 * C109 + C89 * C115) *
                                   C273) *
                                  C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
             C91 * C114) *
                C273 +
            (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 + C105 * C276 +
             C91 * C579) *
                C139480) *
               C139465 * C1757 -
           ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
             C101 * C1986 + C89 * C2394) *
                C139480 +
            (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
             C101 * C1762 + C89 * C1770) *
                C273) *
               C139465 * C1758 +
           ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
             C105 * C1765 + C91 * C1773) *
                C273 +
            (C101 * C1987 + C89 * C2395 + C103 * C1988 + C90 * C2396 +
             C105 * C1989 + C91 * C2397) *
                C139480) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
             C105 * C1766 + C91 * C1774) *
                C273 +
            (C101 * C1985 + C89 * C2393 + C103 * C1984 + C90 * C2392 +
             C105 * C1990 + C91 * C2398) *
                C139480) *
               C139465 * C1758 -
           ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 + C101 * C275 +
             C89 * C578) *
                C139480 +
            (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 + C101 * C107 +
             C89 * C113) *
                C273) *
               C139465 * C1757 -
           ((C105 * C1991 + C91 * C2399 + C103 * C1989 + C90 * C2397 +
             C101 * C1988 + C89 * C2396) *
                C139480 +
            (C105 * C1767 + C91 * C1775 + C103 * C1765 + C90 * C1773 +
             C101 * C1764 + C89 * C1772) *
                C273) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C139362 * C822 -
           ((C1566 + C1552) * C91 + (C1567 + C1555) * C90 +
            ((C186 * C1053 + C139465 * C1543) * C139480 +
             (C186 * C829 + C139465 * C939) * C273) *
                C89) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C273 +
             (C186 * C1054 + C139465 * C1544) * C139480) *
                C89 +
            (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
               C139362 * C824) *
              C825 +
          (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
            ((C186 * C833 + C139465 * C943) * C273 +
             (C186 * C1057 + C139465 * C1547) * C139480) *
                C91) *
               C139362 * C823 -
           (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C139362 *
               C822 -
           (((C186 * C1058 + C139465 * C1548) * C139480 +
             (C186 * C834 + C139465 * C944) * C273) *
                C91 +
            (C1569 + C1559) * C90 + (C1568 + C1556) * C89) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C273 +
            (C186 * C274 + C139465 * C633) * C139480) *
               C89 +
           (C640 + C656) * C90 + C660 * C91) *
              C139362 * C139346 * C96 -
          (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C139362 *
              C139346 * C97 +
          (C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) * C139362 *
              C139346 * C98 -
          (((C186 * C279 + C139465 * C638) * C139480 +
            (C186 * C111 + C139465 * C192) * C273) *
               C91 +
           (C659 + C649) * C90 + C661 * C89) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C1757 -
           ((C2499 + C2485) * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C1758 +
           (((C186 * C1763 + C139465 * C1873) * C273 +
             (C186 * C1987 + C139465 * C2477) * C139480) *
                C89 +
            (C2489 + C2501) * C90 + (C2492 + C2502) * C91) *
               C1759) *
              C139346 * C825 +
          (((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
            ((C186 * C1766 + C139465 * C1876) * C273 +
             (C186 * C1990 + C139465 * C2480) * C139480) *
                C91) *
               C1758 -
           (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C1757 -
           (((C186 * C1991 + C139465 * C2481) * C139480 +
             (C186 * C1767 + C139465 * C1877) * C273) *
                C91 +
            (C2502 + C2492) * C90 + (C2501 + C2489) * C89) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139362 * C822 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139362 * C823 +
           ((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
            C1682 * C90 + C1683 * C91) *
               C139362 * C824) *
              C825 +
          ((C1681 * C89 + C1680 * C90 +
            (C711 * C833 + C1666 + C1666 + C139480 * C1649) * C139465 * C91) *
               C139362 * C823 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C822 -
           ((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139465 * C91 +
            C1683 * C90 + C1682 * C89) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
           C745 * C90 + C746 * C91) *
              C139362 * C139346 * C96 -
          (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C139346 * C97 +
          (C746 * C89 + C747 * C90 + C748 * C91) * C139362 * C139346 * C98 -
          ((C711 * C111 + C732 + C732 + C139480 * C717) * C139465 * C91 +
           C748 * C90 + C747 * C89) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C1757 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C1758 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C139465 * C89 +
            C2615 * C90 + C2616 * C91) *
               C1759) *
              C139346 * C825 +
          ((C2614 * C89 + C2613 * C90 +
            (C711 * C1766 + C2599 + C2599 + C139480 * C2582) * C139465 * C91) *
               C1758 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C1757 -
           ((C711 * C1767 + C2600 + C2600 + C139480 * C2583) * C139465 * C91 +
            C2616 * C90 + C2615 * C89) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139530 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139426) *
              C139346 * C139558 +
          ((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
            C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
               C139480 * C139465 * C139426 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139530) *
              C139346 * C139559 +
          ((C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
            C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
               C139480 * C139465 * C139530 -
           (C104 * C3416 + C3420 + C3420 + C91 * C3418 + C102 * C1766 + C3421 +
            C3421 + C90 * C1782 + C100 * C1760 + C3422 + C3422 + C89 * C1776) *
               C139480 * C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139530 -
                    (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                     (C186 * C1770 + C139465 * C1880) * C89 +
                     (C186 * C1762 + C139465 * C1872) * C101) *
                        C139480 * C139426) *
                       C139346 * C139558 +
                   ((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                     C3503 * C105 + C3504 * C91) *
                        C139480 * C139426 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139530) *
                       C139346 * C139559 +
                   ((C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                     C222 * C105 + C223 * C91) *
                        C139480 * C139530 -
                    ((C186 * C3417 + C139465 * C3497) * C91 +
                     (C186 * C3416 + C139465 * C3496) * C105 + C3504 * C90 +
                     C3503 * C103 + C1903 * C89 + C1904 * C101) *
                        C139480 * C139426) *
                       C139346 * C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139530 -
                    (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                     (C273 * C1770 + C139480 * C1994) * C89 +
                     (C273 * C1762 + C139480 * C1986) * C101) *
                        C139465 * C139426) *
                       C139346 * C139558 +
                   ((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                     C3585 * C105 + C3586 * C91) *
                        C139465 * C139426 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139530) *
                       C139346 * C139559 +
                   ((C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                     C309 * C105 + C310 * C91) *
                        C139465 * C139530 -
                    ((C273 * C3417 + C139480 * C3579) * C91 +
                     (C273 * C3416 + C139480 * C3578) * C105 + C3586 * C90 +
                     C3585 * C103 + C2017 * C89 + C2018 * C101) *
                        C139465 * C139426) *
                       C139346 * C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C186 +
                     (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                      C105 * C189 + C91 * C362) *
                         C139465) *
                        C139480 * C139530 -
                    ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                      C101 * C1872 + C89 * C2100) *
                         C139465 +
                     (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                      C101 * C1762 + C89 * C1770) *
                         C186) *
                        C139480 * C139426) *
                       C139346 * C139558 +
                   (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                      C105 * C1766 + C91 * C1774) *
                         C186 +
                     (C101 * C1871 + C89 * C2099 + C103 * C1870 + C90 * C2098 +
                      C105 * C1876 + C91 * C2104) *
                         C139465) *
                        C139480 * C139426 -
                    ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                      C101 * C188 + C89 * C361) *
                         C139465 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C186) *
                        C139480 * C139530) *
                       C139346 * C139559 +
                   (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                      C105 * C110 + C91 * C116) *
                         C186 +
                     (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                      C105 * C191 + C91 * C364) *
                         C139465) *
                        C139480 * C139530 -
                    ((C105 * C3496 + C91 * C3660 + C103 * C1876 + C90 * C2104 +
                      C101 * C1870 + C89 * C2098) *
                         C139465 +
                     (C105 * C3416 + C91 * C3417 + C103 * C1766 + C90 * C1774 +
                      C101 * C1760 + C89 * C1768) *
                         C186) *
                        C139480 * C139426) *
                       C139346 * C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C139530 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C139426) *
              C139346 * C139558 +
          ((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139426 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139530) *
              C139346 * C139559 +
          ((C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C139530 -
           ((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C91 +
            C3742 * C90 + C2213 * C89) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C139530 -
           (C3818 * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C139426) *
              C139346 * C139558 +
          (((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
            (C3819 + C3823) * C91) *
               C139426 -
           (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C139530) *
              C139346 * C139559 +
          ((C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) * C139530 -
           (((C273 * C3496 + C139480 * C3816) * C139465 +
             (C273 * C3416 + C139480 * C3578) * C186) *
                C91 +
            (C3823 + C3819) * C90 + C3818 * C89) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C273 +
                     (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                      C105 * C276 + C91 * C579) *
                         C139480) *
                        C139465 * C139530 -
                    ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                      C101 * C1986 + C89 * C2394) *
                         C139480 +
                     (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                      C101 * C1762 + C89 * C1770) *
                         C273) *
                        C139465 * C139426) *
                       C139346 * C139558 +
                   (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                      C105 * C1766 + C91 * C1774) *
                         C273 +
                     (C101 * C1985 + C89 * C2393 + C103 * C1984 + C90 * C2392 +
                      C105 * C1990 + C91 * C2398) *
                         C139480) *
                        C139465 * C139426 -
                    ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                      C101 * C275 + C89 * C578) *
                         C139480 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C273) *
                        C139465 * C139530) *
                       C139346 * C139559 +
                   (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                      C105 * C110 + C91 * C116) *
                         C273 +
                     (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                      C105 * C278 + C91 * C581) *
                         C139480) *
                        C139465 * C139530 -
                    ((C105 * C3578 + C91 * C3897 + C103 * C1990 + C90 * C2398 +
                      C101 * C1984 + C89 * C2392) *
                         C139480 +
                     (C105 * C3416 + C91 * C3417 + C103 * C1766 + C90 * C1774 +
                      C101 * C1760 + C89 * C1768) *
                         C273) *
                        C139465 * C139426) *
                       C139346 * C2694)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C139530 -
           (C3974 * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C139426) *
              C139346 * C139558 +
          (((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
            (C3975 + C3979) * C91) *
               C139426 -
           (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C139530) *
              C139346 * C139559 +
          ((C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) * C139530 -
           (((C186 * C3578 + C139465 * C3972) * C139480 +
             (C186 * C3416 + C139465 * C3496) * C273) *
                C91 +
            (C3979 + C3975) * C90 + C3974 * C89) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139530 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139426) *
              C139346 * C139558 +
          ((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139426 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139530) *
              C139346 * C139559 +
          ((C746 * C89 + C747 * C90 + C748 * C91) * C139530 -
           ((C711 * C3416 + C4057 + C4057 + C139480 * C4053) * C139465 * C91 +
            C4061 * C90 + C2613 * C89) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
           C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
              C139480 * C139465 * C139362 * C139346 * C96 -
          (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
           C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
              C139480 * C139465 * C139362 * C139346 * C97 +
          (C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
           C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
              C139480 * C139465 * C139362 * C139346 * C98 -
          (C104 * C111 + C134 + C134 + C91 * C123 + C102 * C110 + C135 + C135 +
           C90 * C122 + C100 * C109 + C136 + C136 + C89 * C121) *
              C139480 * C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139362 * C822 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139362 * C823 +
           (C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
            C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
               C139480 * C139465 * C139362 * C824) *
              C825 +
          ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 + C859 +
            C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
               C139480 * C139465 * C139362 * C823 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139362 * C822 -
           (C104 * C834 + C861 + C861 + C91 * C850 + C102 * C832 + C862 + C862 +
            C90 * C848 + C100 * C831 + C863 + C863 + C89 * C847) *
               C139480 * C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C186 * C106 + C139465 * C187) * C101 +
                    (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                    C217 * C90 + C218 * C105 + C219 * C91) *
                       C139480 * C139362 * C139346 * C96 -
                   (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                    C217 * C89 + C216 * C101) *
                       C139480 * C139362 * C139346 * C97 +
                   (C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                    C222 * C105 + C223 * C91) *
                       C139480 * C139362 * C139346 * C98 -
                   ((C186 * C117 + C139465 * C198) * C91 +
                    (C186 * C111 + C139465 * C192) * C105 + C223 * C90 +
                    C222 * C103 + C220 * C89 + C221 * C101) *
                       C139480 * C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139362 * C822 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139362 * C823 +
                    ((C186 * C830 + C139465 * C940) * C101 +
                     (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                     C975 * C90 + C976 * C105 + C977 * C91) *
                        C139480 * C139362 * C824) *
                       C825 +
                   ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                     (C186 * C833 + C139465 * C943) * C105 +
                     (C186 * C841 + C139465 * C951) * C91) *
                        C139480 * C139362 * C823 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139362 * C822 -
                    ((C186 * C842 + C139465 * C952) * C91 +
                     (C186 * C834 + C139465 * C944) * C105 + C977 * C90 +
                     C976 * C103 + C975 * C89 + C974 * C101) *
                        C139480 * C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C273 * C106 + C139480 * C274) * C101 +
                    (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                    C304 * C90 + C305 * C105 + C306 * C91) *
                       C139465 * C139362 * C139346 * C96 -
                   (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                    C304 * C89 + C303 * C101) *
                       C139465 * C139362 * C139346 * C97 +
                   (C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                    C309 * C105 + C310 * C91) *
                       C139465 * C139362 * C139346 * C98 -
                   ((C273 * C117 + C139480 * C285) * C91 +
                    (C273 * C111 + C139480 * C279) * C105 + C310 * C90 +
                    C309 * C103 + C307 * C89 + C308 * C101) *
                       C139465 * C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139362 * C822 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139362 * C823 +
                    ((C273 * C830 + C139480 * C1054) * C101 +
                     (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                     C1089 * C90 + C1090 * C105 + C1091 * C91) *
                        C139465 * C139362 * C824) *
                       C825 +
                   ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                     (C273 * C833 + C139480 * C1057) * C105 +
                     (C273 * C841 + C139480 * C1065) * C91) *
                        C139465 * C139362 * C823 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139362 * C822 -
                    ((C273 * C842 + C139480 * C1066) * C91 +
                     (C273 * C834 + C139480 * C1058) * C105 + C1091 * C90 +
                     C1090 * C103 + C1089 * C89 + C1088 * C101) *
                        C139465 * C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                     C105 * C108 + C91 * C114) *
                        C186 +
                    (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                     C105 * C189 + C91 * C362) *
                        C139465) *
                       C139480 * C139362 * C139346 * C96 -
                   ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                     C101 * C188 + C89 * C361) *
                        C139465 +
                    (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                     C101 * C107 + C89 * C113) *
                        C186) *
                       C139480 * C139362 * C139346 * C97 +
                   ((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                     C105 * C110 + C91 * C116) *
                        C186 +
                    (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                     C105 * C191 + C91 * C364) *
                        C139465) *
                       C139480 * C139362 * C139346 * C98 -
                   ((C105 * C192 + C91 * C365 + C103 * C191 + C90 * C364 +
                     C101 * C190 + C89 * C363) *
                        C139465 +
                    (C105 * C111 + C91 * C117 + C103 * C110 + C90 * C116 +
                     C101 * C109 + C89 * C115) *
                        C186) *
                       C139480 * C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C186 +
                     (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                      C105 * C189 + C91 * C362) *
                         C139465) *
                        C139480 * C139362 * C822 -
                    ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                      C101 * C939 + C89 * C1167) *
                         C139465 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C186) *
                        C139480 * C139362 * C823 +
                    ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                      C105 * C832 + C91 * C840) *
                         C186 +
                     (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
                      C105 * C942 + C91 * C1170) *
                         C139465) *
                        C139480 * C139362 * C824) *
                       C825 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C186 +
                     (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                      C105 * C943 + C91 * C1171) *
                         C139465) *
                        C139480 * C139362 * C823 -
                    ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                      C101 * C188 + C89 * C361) *
                         C139465 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C186) *
                        C139480 * C139362 * C822 -
                    ((C105 * C944 + C91 * C1172 + C103 * C942 + C90 * C1170 +
                      C101 * C941 + C89 * C1169) *
                         C139465 +
                     (C105 * C834 + C91 * C842 + C103 * C832 + C90 * C840 +
                      C101 * C831 + C89 * C839) *
                         C186) *
                        C139480 * C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
           C447 * C91) *
              C139480 * C139362 * C139346 * C96 -
          (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 * C139346 *
              C97 +
          (C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C139362 * C139346 *
              C98 -
          ((C416 * C111 + C437 + C437 + C139465 * C422) * C91 + C449 * C90 +
           C448 * C89) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C139362 * C822 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C139362 * C823 +
           ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 +
            C1282 * C90 + C1283 * C91) *
               C139480 * C139362 * C824) *
              C825 +
          ((C1281 * C89 + C1280 * C90 +
            (C416 * C833 + C1270 + C1270 + C139465 * C1253) * C91) *
               C139480 * C139362 * C823 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 * C822 -
           ((C416 * C834 + C1271 + C1271 + C139465 * C1254) * C91 +
            C1283 * C90 + C1282 * C89) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C186 +
                     (C273 * C187 + C139480 * C499) * C139465) *
                        C89 +
                    (C506 + C522) * C90 + C526 * C91) *
                       C139362 * C139346 * C96 -
                   (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                       C139362 * C139346 * C97 +
                   (C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) *
                       C139362 * C139346 * C98 -
                   (((C273 * C192 + C139480 * C504) * C139465 +
                     (C273 * C111 + C139480 * C279) * C186) *
                        C91 +
                    (C525 + C515) * C90 + C527 * C89) *
                       C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C139362 * C822 -
                    ((C1382 + C1368) * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C139362 * C823 +
                    (((C273 * C830 + C139480 * C1054) * C186 +
                      (C273 * C940 + C139480 * C1360) * C139465) *
                         C89 +
                     (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
                        C139362 * C824) *
                       C825 +
                   (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                     ((C273 * C833 + C139480 * C1057) * C186 +
                      (C273 * C943 + C139480 * C1363) * C139465) *
                         C91) *
                        C139362 * C823 -
                    (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                        C139362 * C822 -
                    (((C273 * C944 + C139480 * C1364) * C139465 +
                      (C273 * C834 + C139480 * C1058) * C186) *
                         C91 +
                     (C1385 + C1375) * C90 + (C1384 + C1372) * C89) *
                        C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eezx[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                     C105 * C108 + C91 * C114) *
                        C273 +
                    (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                     C105 * C276 + C91 * C579) *
                        C139480) *
                       C139465 * C139362 * C139346 * C96 -
                   ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                     C101 * C275 + C89 * C578) *
                        C139480 +
                    (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                     C101 * C107 + C89 * C113) *
                        C273) *
                       C139465 * C139362 * C139346 * C97 +
                   ((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                     C105 * C110 + C91 * C116) *
                        C273 +
                    (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                     C105 * C278 + C91 * C581) *
                        C139480) *
                       C139465 * C139362 * C139346 * C98 -
                   ((C105 * C279 + C91 * C582 + C103 * C278 + C90 * C581 +
                     C101 * C277 + C89 * C580) *
                        C139480 +
                    (C105 * C111 + C91 * C117 + C103 * C110 + C90 * C116 +
                     C101 * C109 + C89 * C115) *
                        C273) *
                       C139465 * C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C273 +
                     (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                      C105 * C276 + C91 * C579) *
                         C139480) *
                        C139465 * C139362 * C822 -
                    ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                      C101 * C1053 + C89 * C1461) *
                         C139480 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C273) *
                        C139465 * C139362 * C823 +
                    ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                      C105 * C832 + C91 * C840) *
                         C273 +
                     (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
                      C105 * C1056 + C91 * C1464) *
                         C139480) *
                        C139465 * C139362 * C824) *
                       C825 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C273 +
                     (C101 * C1052 + C89 * C1460 + C103 * C1051 + C90 * C1459 +
                      C105 * C1057 + C91 * C1465) *
                         C139480) *
                        C139465 * C139362 * C823 -
                    ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                      C101 * C275 + C89 * C578) *
                         C139480 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C273) *
                        C139465 * C139362 * C822 -
                    ((C105 * C1058 + C91 * C1466 + C103 * C1056 + C90 * C1464 +
                      C101 * C1055 + C89 * C1463) *
                         C139480 +
                     (C105 * C834 + C91 * C842 + C103 * C832 + C90 * C840 +
                      C101 * C831 + C89 * C839) *
                         C273) *
                        C139465 * C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eezy[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C273 +
                     (C186 * C274 + C139465 * C633) * C139480) *
                        C89 +
                    (C640 + C656) * C90 + C660 * C91) *
                       C139362 * C139346 * C96 -
                   (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                       C139362 * C139346 * C97 +
                   (C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) *
                       C139362 * C139346 * C98 -
                   (((C186 * C279 + C139465 * C638) * C139480 +
                     (C186 * C111 + C139465 * C192) * C273) *
                        C91 +
                    (C659 + C649) * C90 + C661 * C89) *
                       C139362 * C139346 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C139362 * C822 -
                    ((C1566 + C1552) * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C139362 * C823 +
                    (((C186 * C830 + C139465 * C940) * C273 +
                      (C186 * C1054 + C139465 * C1544) * C139480) *
                         C89 +
                     (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
                        C139362 * C824) *
                       C825 +
                   (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                     ((C186 * C833 + C139465 * C943) * C273 +
                      (C186 * C1057 + C139465 * C1547) * C139480) *
                         C91) *
                        C139362 * C823 -
                    (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                        C139362 * C822 -
                    (((C186 * C1058 + C139465 * C1548) * C139480 +
                      (C186 * C834 + C139465 * C944) * C273) *
                         C91 +
                     (C1569 + C1559) * C90 + (C1568 + C1556) * C89) *
                        C139362 * C824) *
                       C139333)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
           C745 * C90 + C746 * C91) *
              C139362 * C139346 * C96 -
          (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C139346 * C97 +
          (C746 * C89 + C747 * C90 + C748 * C91) * C139362 * C139346 * C98 -
          ((C711 * C111 + C732 + C732 + C139480 * C717) * C139465 * C91 +
           C748 * C90 + C747 * C89) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139362 * C822 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139362 * C823 +
           ((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
            C1682 * C90 + C1683 * C91) *
               C139362 * C824) *
              C825 +
          ((C1681 * C89 + C1680 * C90 +
            (C711 * C833 + C1666 + C1666 + C139480 * C1649) * C139465 * C91) *
               C139362 * C823 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C822 -
           ((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139465 * C91 +
            C1683 * C90 + C1682 * C89) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139362 * C139560 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139362 * C139561 +
           (C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
            C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
               C139480 * C139465 * C139362 * C7039) *
              C139521 +
          ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 + C859 +
            C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
               C139480 * C139465 * C139362 * C139561 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139362 * C139560 -
           (C104 * C834 + C861 + C861 + C91 * C850 + C102 * C832 + C862 + C862 +
            C90 * C848 + C100 * C831 + C863 + C863 + C89 * C847) *
               C139480 * C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139362 * C139560 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139362 * C139561 +
                    ((C186 * C830 + C139465 * C940) * C101 +
                     (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                     C975 * C90 + C976 * C105 + C977 * C91) *
                        C139480 * C139362 * C7039) *
                       C139521 +
                   ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                     C2782 * C105 + C2783 * C91) *
                        C139480 * C139362 * C139561 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139362 * C139560 -
                    ((C186 * C842 + C139465 * C952) * C91 +
                     (C186 * C834 + C139465 * C944) * C105 + C977 * C90 +
                     C976 * C103 + C975 * C89 + C974 * C101) *
                        C139480 * C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139362 * C139560 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139362 * C139561 +
                    ((C273 * C830 + C139480 * C1054) * C101 +
                     (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                     C1089 * C90 + C1090 * C105 + C1091 * C91) *
                        C139465 * C139362 * C7039) *
                       C139521 +
                   ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                     C2864 * C105 + C2865 * C91) *
                        C139465 * C139362 * C139561 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139362 * C139560 -
                    ((C273 * C842 + C139480 * C1066) * C91 +
                     (C273 * C834 + C139480 * C1058) * C105 + C1091 * C90 +
                     C1090 * C103 + C1089 * C89 + C1088 * C101) *
                        C139465 * C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C186 +
                     (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                      C105 * C189 + C91 * C362) *
                         C139465) *
                        C139480 * C139362 * C139560 -
                    ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                      C101 * C939 + C89 * C1167) *
                         C139465 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C186) *
                        C139480 * C139362 * C139561 +
                    ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                      C105 * C832 + C91 * C840) *
                         C186 +
                     (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
                      C105 * C942 + C91 * C1170) *
                         C139465) *
                        C139480 * C139362 * C7039) *
                       C139521 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C186 +
                     (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                      C105 * C943 + C91 * C1171) *
                         C139465) *
                        C139480 * C139362 * C139561 -
                    ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                      C101 * C188 + C89 * C361) *
                         C139465 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C186) *
                        C139480 * C139362 * C139560 -
                    ((C105 * C944 + C91 * C1172 + C103 * C942 + C90 * C1170 +
                      C101 * C941 + C89 * C1169) *
                         C139465 +
                     (C105 * C834 + C91 * C842 + C103 * C832 + C90 * C840 +
                      C101 * C831 + C89 * C839) *
                         C186) *
                        C139480 * C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 +
                     C446 * C90 + C447 * C91) *
                        C139480 * C139362 * C139560 -
                    (C1280 * C91 + C1281 * C90 +
                     (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                        C139480 * C139362 * C139561 +
                    ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 +
                     C1282 * C90 + C1283 * C91) *
                        C139480 * C139362 * C7039) *
                       C139521 +
                   ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 *
                        C139362 * C139561 -
                    (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 *
                        C139560 -
                    ((C416 * C834 + C1271 + C1271 + C139465 * C1254) * C91 +
                     C1283 * C90 + C1282 * C89) *
                        C139480 * C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C139362 * C139560 -
                    (C3097 * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C139362 * C139561 +
                    (((C273 * C830 + C139480 * C1054) * C186 +
                      (C273 * C940 + C139480 * C1360) * C139465) *
                         C89 +
                     (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
                        C139362 * C7039) *
                       C139521 +
                   (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                     (C3098 + C3102) * C91) *
                        C139362 * C139561 -
                    (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                        C139362 * C139560 -
                    (((C273 * C944 + C139480 * C1364) * C139465 +
                      (C273 * C834 + C139480 * C1058) * C186) *
                         C91 +
                     (C1385 + C1375) * C90 + (C1384 + C1372) * C89) *
                        C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C273 +
                     (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                      C105 * C276 + C91 * C579) *
                         C139480) *
                        C139465 * C139362 * C139560 -
                    ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                      C101 * C1053 + C89 * C1461) *
                         C139480 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C273) *
                        C139465 * C139362 * C139561 +
                    ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                      C105 * C832 + C91 * C840) *
                         C273 +
                     (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
                      C105 * C1056 + C91 * C1464) *
                         C139480) *
                        C139465 * C139362 * C7039) *
                       C139521 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C273 +
                     (C101 * C1052 + C89 * C1460 + C103 * C1051 + C90 * C1459 +
                      C105 * C1057 + C91 * C1465) *
                         C139480) *
                        C139465 * C139362 * C139561 -
                    ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                      C101 * C275 + C89 * C578) *
                         C139480 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C273) *
                        C139465 * C139362 * C139560 -
                    ((C105 * C1058 + C91 * C1466 + C103 * C1056 + C90 * C1464 +
                      C101 * C1055 + C89 * C1463) *
                         C139480 +
                     (C105 * C834 + C91 * C842 + C103 * C832 + C90 * C840 +
                      C101 * C831 + C89 * C839) *
                         C273) *
                        C139465 * C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C139362 * C139560 -
                    (C3253 * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C139362 * C139561 +
                    (((C186 * C830 + C139465 * C940) * C273 +
                      (C186 * C1054 + C139465 * C1544) * C139480) *
                         C89 +
                     (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
                        C139362 * C7039) *
                       C139521 +
                   (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                     (C3254 + C3258) * C91) *
                        C139362 * C139561 -
                    (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                        C139362 * C139560 -
                    (((C186 * C1058 + C139465 * C1548) * C139480 +
                      (C186 * C834 + C139465 * C944) * C273) *
                         C91 +
                     (C1569 + C1559) * C90 + (C1568 + C1556) * C89) *
                        C139362 * C7039) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139362 * C139560 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139362 * C139561 +
           ((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
            C1682 * C90 + C1683 * C91) *
               C139362 * C7039) *
              C139521 +
          ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C139362 * C139561 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C139560 -
           ((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139465 * C91 +
            C1683 * C90 + C1682 * C89) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139530 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139426) *
              C139560 +
          ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
            C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
               C139480 * C139465 * C139426 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139530) *
              C139561 +
          ((C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
            C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
               C139480 * C139465 * C139530 -
           (C104 * C8590 + C8600 + C8600 + C91 * C8596 + C102 * C8591 + C8601 +
            C8601 + C90 * C8597 + C100 * C8592 + C8602 + C8602 + C89 * C8598) *
               C139480 * C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139530 -
                    (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                     (C186 * C1770 + C139465 * C1880) * C89 +
                     (C186 * C1762 + C139465 * C1872) * C101) *
                        C139480 * C139426) *
                       C139560 +
                   (((C186 * C4159 + C139465 * C4275) * C101 +
                     (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                     C4293 * C90 + C4294 * C105 + C4295 * C91) *
                        C139480 * C139426 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139530) *
                       C139561 +
                   (((C186 * C830 + C139465 * C940) * C101 +
                     (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                     C975 * C90 + C976 * C105 + C977 * C91) *
                        C139480 * C139530 -
                    ((C186 * C8593 + C139465 * C8679) * C91 +
                     (C186 * C8590 + C139465 * C8676) * C105 +
                     (C186 * C8594 + C139465 * C8680) * C90 +
                     (C186 * C8591 + C139465 * C8677) * C103 +
                     (C186 * C8595 + C139465 * C8681) * C89 +
                     (C186 * C8592 + C139465 * C8678) * C101) *
                        C139480 * C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139530 -
                    (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                     (C273 * C1770 + C139480 * C1994) * C89 +
                     (C273 * C1762 + C139480 * C1986) * C101) *
                        C139465 * C139426) *
                       C139560 +
                   (((C273 * C4159 + C139480 * C4393) * C101 +
                     (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                     C4411 * C90 + C4412 * C105 + C4413 * C91) *
                        C139465 * C139426 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139530) *
                       C139561 +
                   (((C273 * C830 + C139480 * C1054) * C101 +
                     (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                     C1089 * C90 + C1090 * C105 + C1091 * C91) *
                        C139465 * C139530 -
                    ((C273 * C8593 + C139480 * C8759) * C91 +
                     (C273 * C8590 + C139480 * C8756) * C105 +
                     (C273 * C8594 + C139480 * C8760) * C90 +
                     (C273 * C8591 + C139480 * C8757) * C103 +
                     (C273 * C8595 + C139480 * C8761) * C89 +
                     (C273 * C8592 + C139480 * C8758) * C101) *
                        C139465 * C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C186 +
                     (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                      C105 * C189 + C91 * C362) *
                         C139465) *
                        C139480 * C139530 -
                    ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                      C101 * C1872 + C89 * C2100) *
                         C139465 +
                     (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                      C101 * C1762 + C89 * C1770) *
                         C186) *
                        C139480 * C139426) *
                       C139560 +
                   (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                      C105 * C4161 + C91 * C4165) *
                         C186 +
                     (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
                      C105 * C4277 + C91 * C4513) *
                         C139465) *
                        C139480 * C139426 -
                    ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                      C101 * C939 + C89 * C1167) *
                         C139465 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C186) *
                        C139480 * C139530) *
                       C139561 +
                   (((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                      C105 * C832 + C91 * C840) *
                         C186 +
                     (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
                      C105 * C942 + C91 * C1170) *
                         C139465) *
                        C139480 * C139530 -
                    ((C105 * C8676 + C91 * C8836 + C103 * C8677 + C90 * C8837 +
                      C101 * C8678 + C89 * C8838) *
                         C139465 +
                     (C105 * C8590 + C91 * C8593 + C103 * C8591 + C90 * C8594 +
                      C101 * C8592 + C89 * C8595) *
                         C186) *
                        C139480 * C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 +
                     C446 * C90 + C447 * C91) *
                        C139480 * C139530 -
                    (C2213 * C91 + C2214 * C90 +
                     (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
                        C139480 * C139426) *
                       C139560 +
                   (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
                     C4630 * C90 + C4631 * C91) *
                        C139480 * C139426 -
                    (C1280 * C91 + C1281 * C90 +
                     (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                        C139480 * C139530) *
                       C139561 +
                   (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 +
                     C1282 * C90 + C1283 * C91) *
                        C139480 * C139530 -
                    ((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C91 +
                     (C416 * C8591 + C8918 + C8918 + C139465 * C8914) * C90 +
                     (C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C89) *
                        C139480 * C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C139530 -
                    (C3818 * C91 + (C2316 + C2304) * C90 +
                     ((C273 * C1872 + C139480 * C2292) * C139465 +
                      (C273 * C1762 + C139480 * C1986) * C186) *
                         C89) *
                        C139426) *
                       C139560 +
                   ((((C273 * C4159 + C139480 * C4393) * C186 +
                      (C273 * C4275 + C139480 * C4729) * C139465) *
                         C89 +
                     (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
                        C139426 -
                    (C3097 * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C139530) *
                       C139561 +
                   ((((C273 * C830 + C139480 * C1054) * C186 +
                      (C273 * C940 + C139480 * C1360) * C139465) *
                         C89 +
                     (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
                        C139530 -
                    (((C273 * C8676 + C139480 * C8993) * C139465 +
                      (C273 * C8590 + C139480 * C8756) * C186) *
                         C91 +
                     ((C273 * C8677 + C139480 * C8994) * C139465 +
                      (C273 * C8591 + C139480 * C8757) * C186) *
                         C90 +
                     ((C273 * C8678 + C139480 * C8995) * C139465 +
                      (C273 * C8592 + C139480 * C8758) * C186) *
                         C89) *
                        C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eezx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C273 +
                     (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                      C105 * C276 + C91 * C579) *
                         C139480) *
                        C139465 * C139530 -
                    ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                      C101 * C1986 + C89 * C2394) *
                         C139480 +
                     (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                      C101 * C1762 + C89 * C1770) *
                         C273) *
                        C139465 * C139426) *
                       C139560 +
                   (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                      C105 * C4161 + C91 * C4165) *
                         C273 +
                     (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
                      C105 * C4395 + C91 * C4843) *
                         C139480) *
                        C139465 * C139426 -
                    ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                      C101 * C1053 + C89 * C1461) *
                         C139480 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C273) *
                        C139465 * C139530) *
                       C139561 +
                   (((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                      C105 * C832 + C91 * C840) *
                         C273 +
                     (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
                      C105 * C1056 + C91 * C1464) *
                         C139480) *
                        C139465 * C139530 -
                    ((C105 * C8756 + C91 * C9070 + C103 * C8757 + C90 * C9071 +
                      C101 * C8758 + C89 * C9072) *
                         C139480 +
                     (C105 * C8590 + C91 * C8593 + C103 * C8591 + C90 * C8594 +
                      C101 * C8592 + C89 * C8595) *
                         C273) *
                        C139465 * C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eezy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C139530 -
                    (C3974 * C91 + (C2500 + C2488) * C90 +
                     ((C186 * C1986 + C139465 * C2476) * C139480 +
                      (C186 * C1762 + C139465 * C1872) * C273) *
                         C89) *
                        C139426) *
                       C139560 +
                   ((((C186 * C4159 + C139465 * C4275) * C273 +
                      (C186 * C4393 + C139465 * C4943) * C139480) *
                         C89 +
                     (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
                        C139426 -
                    (C3253 * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C139530) *
                       C139561 +
                   ((((C186 * C830 + C139465 * C940) * C273 +
                      (C186 * C1054 + C139465 * C1544) * C139480) *
                         C89 +
                     (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
                        C139530 -
                    (((C186 * C8756 + C139465 * C9147) * C139480 +
                      (C186 * C8590 + C139465 * C8676) * C273) *
                         C91 +
                     ((C186 * C8757 + C139465 * C9148) * C139480 +
                      (C186 * C8591 + C139465 * C8677) * C273) *
                         C90 +
                     ((C186 * C8758 + C139465 * C9149) * C139480 +
                      (C186 * C8592 + C139465 * C8678) * C273) *
                         C89) *
                        C139426) *
                       C7039) *
                  C139327) /
                 (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139530 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139426) *
              C139560 +
          (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
            C5074 * C90 + C5075 * C91) *
               C139426 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139530) *
              C139561 +
          (((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
            C1682 * C90 + C1683 * C91) *
               C139530 -
           ((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139465 * C91 +
            (C711 * C8591 + C9229 + C9229 + C139480 * C9225) * C139465 * C90 +
            (C711 * C8592 + C9230 + C9230 + C139480 * C9226) * C139465 * C89) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::pow(Pi, 2.5) *
         ((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
           C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
              C139480 * C139465 * C139362 * C5796 -
          (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
           C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
              C139480 * C139465 * C139362 * C5797 +
          (C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
           C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
              C139480 * C139465 * C139362 * C5798 -
          (C104 * C5801 + C5811 + C5811 + C91 * C5807 + C102 * C5802 + C5812 +
           C5812 + C90 * C5808 + C100 * C5803 + C5813 + C5813 + C89 * C5809) *
              C139480 * C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139362 * C5149 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139362 * C139398) *
              C5151 +
          ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 + C859 +
            C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
               C139480 * C139465 * C139362 * C139398 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139362 * C5149) *
              C5152 +
          ((C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
            C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
               C139480 * C139465 * C139362 * C5149 -
           (C104 * C2695 + C2699 + C2699 + C91 * C2697 + C102 * C833 + C2700 +
            C2700 + C90 * C849 + C100 * C827 + C2701 + C2701 + C89 * C843) *
               C139480 * C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C1757 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C1758 +
           (C100 * C1763 + C1788 + C1788 + C89 * C1779 + C102 * C1764 + C1789 +
            C1789 + C90 * C1780 + C104 * C1765 + C1790 + C1790 + C91 * C1781) *
               C139480 * C139465 * C1759) *
              C5149 +
          ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
            C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
               C139480 * C139465 * C1758 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C1757 -
           (C104 * C6323 + C6333 + C6333 + C91 * C6329 + C102 * C6324 + C6334 +
            C6334 + C90 * C6330 + C100 * C6325 + C6335 + C6335 + C89 * C6331) *
               C139480 * C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] += (-std::pow(Pi, 2.5) *
                  (((C186 * C106 + C139465 * C187) * C101 +
                    (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                    C217 * C90 + C218 * C105 + C219 * C91) *
                       C139480 * C139362 * C5796 -
                   (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                    (C186 * C837 + C139465 * C947) * C89 +
                    (C186 * C829 + C139465 * C939) * C101) *
                       C139480 * C139362 * C5797 +
                   ((C186 * C830 + C139465 * C940) * C101 +
                    (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                    C975 * C90 + C976 * C105 + C977 * C91) *
                       C139480 * C139362 * C5798 -
                   ((C186 * C5804 + C139465 * C5866) * C91 +
                    (C186 * C5801 + C139465 * C5863) * C105 +
                    (C186 * C5805 + C139465 * C5867) * C90 +
                    (C186 * C5802 + C139465 * C5864) * C103 +
                    (C186 * C5806 + C139465 * C5868) * C89 +
                    (C186 * C5803 + C139465 * C5865) * C101) *
                       C139480 * C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139362 * C5149 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139362 * C139398) *
                       C5151 +
                   ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                     C2782 * C105 + C2783 * C91) *
                        C139480 * C139362 * C139398 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139362 * C5149) *
                       C5152 +
                   ((C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                     C222 * C105 + C223 * C91) *
                        C139480 * C139362 * C5149 -
                    ((C186 * C2696 + C139465 * C2776) * C91 +
                     (C186 * C2695 + C139465 * C2775) * C105 + C2783 * C90 +
                     C2782 * C103 + C970 * C89 + C971 * C101) *
                        C139480 * C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C1757 -
                    (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                     (C186 * C1770 + C139465 * C1880) * C89 +
                     (C186 * C1762 + C139465 * C1872) * C101) *
                        C139480 * C1758 +
                    ((C186 * C1763 + C139465 * C1873) * C101 +
                     (C186 * C1771 + C139465 * C1881) * C89 + C1907 * C103 +
                     C1908 * C90 + C1909 * C105 + C1910 * C91) *
                        C139480 * C1759) *
                       C5149 +
                   (((C186 * C4159 + C139465 * C4275) * C101 +
                     (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                     C4293 * C90 + C4294 * C105 + C4295 * C91) *
                        C139480 * C1758 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C1757 -
                    ((C186 * C6326 + C139465 * C6412) * C91 +
                     (C186 * C6323 + C139465 * C6409) * C105 +
                     (C186 * C6327 + C139465 * C6413) * C90 +
                     (C186 * C6324 + C139465 * C6410) * C103 +
                     (C186 * C6328 + C139465 * C6414) * C89 +
                     (C186 * C6325 + C139465 * C6411) * C101) *
                        C139480 * C1759) *
                       C139398) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eexz[7] += (-std::pow(Pi, 2.5) *
                  (((C273 * C106 + C139480 * C274) * C101 +
                    (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                    C304 * C90 + C305 * C105 + C306 * C91) *
                       C139465 * C139362 * C5796 -
                   (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                    (C273 * C837 + C139480 * C1061) * C89 +
                    (C273 * C829 + C139480 * C1053) * C101) *
                       C139465 * C139362 * C5797 +
                   ((C273 * C830 + C139480 * C1054) * C101 +
                    (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                    C1089 * C90 + C1090 * C105 + C1091 * C91) *
                       C139465 * C139362 * C5798 -
                   ((C273 * C5804 + C139480 * C5922) * C91 +
                    (C273 * C5801 + C139480 * C5919) * C105 +
                    (C273 * C5805 + C139480 * C5923) * C90 +
                    (C273 * C5802 + C139480 * C5920) * C103 +
                    (C273 * C5806 + C139480 * C5924) * C89 +
                    (C273 * C5803 + C139480 * C5921) * C101) *
                       C139465 * C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139362 * C5149 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139362 * C139398) *
                       C5151 +
                   ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                     C2864 * C105 + C2865 * C91) *
                        C139465 * C139362 * C139398 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139362 * C5149) *
                       C5152 +
                   ((C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                     C309 * C105 + C310 * C91) *
                        C139465 * C139362 * C5149 -
                    ((C273 * C2696 + C139480 * C2858) * C91 +
                     (C273 * C2695 + C139480 * C2857) * C105 + C2865 * C90 +
                     C2864 * C103 + C1084 * C89 + C1085 * C101) *
                        C139465 * C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C1757 -
                    (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                     (C273 * C1770 + C139480 * C1994) * C89 +
                     (C273 * C1762 + C139480 * C1986) * C101) *
                        C139465 * C1758 +
                    ((C273 * C1763 + C139480 * C1987) * C101 +
                     (C273 * C1771 + C139480 * C1995) * C89 + C2021 * C103 +
                     C2022 * C90 + C2023 * C105 + C2024 * C91) *
                        C139465 * C1759) *
                       C5149 +
                   (((C273 * C4159 + C139480 * C4393) * C101 +
                     (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                     C4411 * C90 + C4412 * C105 + C4413 * C91) *
                        C139465 * C1758 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C1757 -
                    ((C273 * C6326 + C139480 * C6492) * C91 +
                     (C273 * C6323 + C139480 * C6489) * C105 +
                     (C273 * C6327 + C139480 * C6493) * C90 +
                     (C273 * C6324 + C139480 * C6490) * C103 +
                     (C273 * C6328 + C139480 * C6494) * C89 +
                     (C273 * C6325 + C139480 * C6491) * C101) *
                        C139465 * C1759) *
                       C139398) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::pow(Pi, 2.5) *
         (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
            C91 * C114) *
               C186 +
           (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 + C105 * C189 +
            C91 * C362) *
               C139465) *
              C139480 * C139362 * C5796 -
          ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
            C101 * C939 + C89 * C1167) *
               C139465 +
           (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 + C101 * C829 +
            C89 * C837) *
               C186) *
              C139480 * C139362 * C5797 +
          ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 + C105 * C832 +
            C91 * C840) *
               C186 +
           (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
            C105 * C942 + C91 * C1170) *
               C139465) *
              C139480 * C139362 * C5798 -
          ((C105 * C5863 + C91 * C5975 + C103 * C5864 + C90 * C5976 +
            C101 * C5865 + C89 * C5977) *
               C139465 +
           (C105 * C5801 + C91 * C5804 + C103 * C5802 + C90 * C5805 +
            C101 * C5803 + C89 * C5806) *
               C186) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C106 + C89 * C112 + C103 * C107 +
                                 C90 * C113 + C105 * C108 + C91 * C114) *
                                    C186 +
                                (C101 * C187 + C89 * C360 + C103 * C188 +
                                 C90 * C361 + C105 * C189 + C91 * C362) *
                                    C139465) *
                                   C139480 * C139362 * C5149 -
                               ((C105 * C937 + C91 * C1165 + C103 * C938 +
                                 C90 * C1166 + C101 * C939 + C89 * C1167) *
                                    C139465 +
                                (C105 * C827 + C91 * C835 + C103 * C828 +
                                 C90 * C836 + C101 * C829 + C89 * C837) *
                                    C186) *
                                   C139480 * C139362 * C139398) *
                                  C5151 +
                              (((C101 * C828 + C89 * C836 + C103 * C827 +
                                 C90 * C835 + C105 * C833 + C91 * C841) *
                                    C186 +
                                (C101 * C938 + C89 * C1166 + C103 * C937 +
                                 C90 * C1165 + C105 * C943 + C91 * C1171) *
                                    C139465) *
                                   C139480 * C139362 * C139398 -
                               ((C105 * C190 + C91 * C363 + C103 * C189 +
                                 C90 * C362 + C101 * C188 + C89 * C361) *
                                    C139465 +
                                (C105 * C109 + C91 * C115 + C103 * C108 +
                                 C90 * C114 + C101 * C107 + C89 * C113) *
                                    C186) *
                                   C139480 * C139362 * C5149) *
                                  C5152 +
                              (((C101 * C108 + C89 * C114 + C103 * C109 +
                                 C90 * C115 + C105 * C110 + C91 * C116) *
                                    C186 +
                                (C101 * C189 + C89 * C362 + C103 * C190 +
                                 C90 * C363 + C105 * C191 + C91 * C364) *
                                    C139465) *
                                   C139480 * C139362 * C5149 -
                               ((C105 * C2775 + C91 * C2939 + C103 * C943 +
                                 C90 * C1171 + C101 * C937 + C89 * C1165) *
                                    C139465 +
                                (C105 * C2695 + C91 * C2696 + C103 * C833 +
                                 C90 * C841 + C101 * C827 + C89 * C835) *
                                    C186) *
                                   C139480 * C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
             C91 * C114) *
                C186 +
            (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 + C105 * C189 +
             C91 * C362) *
                C139465) *
               C139480 * C1757 -
           ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
             C101 * C1872 + C89 * C2100) *
                C139465 +
            (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
             C101 * C1762 + C89 * C1770) *
                C186) *
               C139480 * C1758 +
           ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
             C105 * C1765 + C91 * C1773) *
                C186 +
            (C101 * C1873 + C89 * C2101 + C103 * C1874 + C90 * C2102 +
             C105 * C1875 + C91 * C2103) *
                C139465) *
               C139480 * C1759) *
              C5149 +
          (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
             C105 * C4161 + C91 * C4165) *
                C186 +
            (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
             C105 * C4277 + C91 * C4513) *
                C139465) *
               C139480 * C1758 -
           ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
             C101 * C939 + C89 * C1167) *
                C139465 +
            (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 + C101 * C829 +
             C89 * C837) *
                C186) *
               C139480 * C1757 -
           ((C105 * C6409 + C91 * C6569 + C103 * C6410 + C90 * C6570 +
             C101 * C6411 + C89 * C6571) *
                C139465 +
            (C105 * C6323 + C91 * C6326 + C103 * C6324 + C90 * C6327 +
             C101 * C6325 + C89 * C6328) *
                C186) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
           C447 * C91) *
              C139480 * C139362 * C5796 -
          (C1280 * C91 + C1281 * C90 +
           (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
              C139480 * C139362 * C5797 +
          ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 + C1282 * C90 +
           C1283 * C91) *
              C139480 * C139362 * C5798 -
          ((C416 * C5801 + C6032 + C6032 + C139465 * C6028) * C91 +
           (C416 * C5802 + C6033 + C6033 + C139465 * C6029) * C90 +
           (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C89) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C139362 * C5149 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C139362 * C139398) *
              C5151 +
          ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 * C139362 *
               C139398 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 * C5149) *
              C5152 +
          ((C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C139362 * C5149 -
           ((C416 * C2695 + C3018 + C3018 + C139465 * C3014) * C91 +
            C3021 * C90 + C1280 * C89) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C1757 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C1758 +
           ((C416 * C1763 + C2196 + C2196 + C139465 * C2183) * C89 +
            C2215 * C90 + C2216 * C91) *
               C139480 * C1759) *
              C5149 +
          (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
            C4630 * C90 + C4631 * C91) *
               C139480 * C1758 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C1757 -
           ((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C91 +
            (C416 * C6324 + C6651 + C6651 + C139465 * C6647) * C90 +
            (C416 * C6325 + C6652 + C6652 + C139465 * C6648) * C89) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] += (-std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C186 +
                     (C273 * C187 + C139480 * C499) * C139465) *
                        C89 +
                    (C506 + C522) * C90 + C526 * C91) *
                       C139362 * C5796 -
                   (C3097 * C91 + (C1383 + C1371) * C90 +
                    ((C273 * C939 + C139480 * C1359) * C139465 +
                     (C273 * C829 + C139480 * C1053) * C186) *
                        C89) *
                       C139362 * C5797 +
                   (((C273 * C830 + C139480 * C1054) * C186 +
                     (C273 * C940 + C139480 * C1360) * C139465) *
                        C89 +
                    (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
                       C139362 * C5798 -
                   (((C273 * C5863 + C139480 * C6084) * C139465 +
                     (C273 * C5801 + C139480 * C5919) * C186) *
                        C91 +
                    ((C273 * C5864 + C139480 * C6085) * C139465 +
                     (C273 * C5802 + C139480 * C5920) * C186) *
                        C90 +
                    ((C273 * C5865 + C139480 * C6086) * C139465 +
                     (C273 * C5803 + C139480 * C5921) * C186) *
                        C89) *
                       C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C139362 * C5149 -
                    (C3097 * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C139362 * C139398) *
                       C5151 +
                   (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                     (C3098 + C3102) * C91) *
                        C139362 * C139398 -
                    (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                        C139362 * C5149) *
                       C5152 +
                   ((C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) *
                        C139362 * C5149 -
                    (((C273 * C2775 + C139480 * C3095) * C139465 +
                      (C273 * C2695 + C139480 * C2857) * C186) *
                         C91 +
                     (C3102 + C3098) * C90 + C3097 * C89) *
                        C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C1757 -
                    (C3818 * C91 + (C2316 + C2304) * C90 +
                     ((C273 * C1872 + C139480 * C2292) * C139465 +
                      (C273 * C1762 + C139480 * C1986) * C186) *
                         C89) *
                        C1758 +
                    (((C273 * C1763 + C139480 * C1987) * C186 +
                      (C273 * C1873 + C139480 * C2293) * C139465) *
                         C89 +
                     (C2305 + C2317) * C90 + (C2308 + C2318) * C91) *
                        C1759) *
                       C5149 +
                   ((((C273 * C4159 + C139480 * C4393) * C186 +
                      (C273 * C4275 + C139480 * C4729) * C139465) *
                         C89 +
                     (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
                        C1758 -
                    (C3097 * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C1757 -
                    (((C273 * C6409 + C139480 * C6726) * C139465 +
                      (C273 * C6323 + C139480 * C6489) * C186) *
                         C91 +
                     ((C273 * C6410 + C139480 * C6727) * C139465 +
                      (C273 * C6324 + C139480 * C6490) * C186) *
                         C90 +
                     ((C273 * C6411 + C139480 * C6728) * C139465 +
                      (C273 * C6325 + C139480 * C6491) * C186) *
                         C89) *
                        C1759) *
                       C139398) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::pow(Pi, 2.5) *
         (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
            C91 * C114) *
               C273 +
           (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 + C105 * C276 +
            C91 * C579) *
               C139480) *
              C139465 * C139362 * C5796 -
          ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
            C101 * C1053 + C89 * C1461) *
               C139480 +
           (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 + C101 * C829 +
            C89 * C837) *
               C273) *
              C139465 * C139362 * C5797 +
          ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 + C105 * C832 +
            C91 * C840) *
               C273 +
           (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
            C105 * C1056 + C91 * C1464) *
               C139480) *
              C139465 * C139362 * C5798 -
          ((C105 * C5919 + C91 * C6137 + C103 * C5920 + C90 * C6138 +
            C101 * C5921 + C89 * C6139) *
               C139480 +
           (C105 * C5801 + C91 * C5804 + C103 * C5802 + C90 * C5805 +
            C101 * C5803 + C89 * C5806) *
               C273) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C106 + C89 * C112 + C103 * C107 +
                                 C90 * C113 + C105 * C108 + C91 * C114) *
                                    C273 +
                                (C101 * C274 + C89 * C577 + C103 * C275 +
                                 C90 * C578 + C105 * C276 + C91 * C579) *
                                    C139480) *
                                   C139465 * C139362 * C5149 -
                               ((C105 * C1051 + C91 * C1459 + C103 * C1052 +
                                 C90 * C1460 + C101 * C1053 + C89 * C1461) *
                                    C139480 +
                                (C105 * C827 + C91 * C835 + C103 * C828 +
                                 C90 * C836 + C101 * C829 + C89 * C837) *
                                    C273) *
                                   C139465 * C139362 * C139398) *
                                  C5151 +
                              (((C101 * C828 + C89 * C836 + C103 * C827 +
                                 C90 * C835 + C105 * C833 + C91 * C841) *
                                    C273 +
                                (C101 * C1052 + C89 * C1460 + C103 * C1051 +
                                 C90 * C1459 + C105 * C1057 + C91 * C1465) *
                                    C139480) *
                                   C139465 * C139362 * C139398 -
                               ((C105 * C277 + C91 * C580 + C103 * C276 +
                                 C90 * C579 + C101 * C275 + C89 * C578) *
                                    C139480 +
                                (C105 * C109 + C91 * C115 + C103 * C108 +
                                 C90 * C114 + C101 * C107 + C89 * C113) *
                                    C273) *
                                   C139465 * C139362 * C5149) *
                                  C5152 +
                              (((C101 * C108 + C89 * C114 + C103 * C109 +
                                 C90 * C115 + C105 * C110 + C91 * C116) *
                                    C273 +
                                (C101 * C276 + C89 * C579 + C103 * C277 +
                                 C90 * C580 + C105 * C278 + C91 * C581) *
                                    C139480) *
                                   C139465 * C139362 * C5149 -
                               ((C105 * C2857 + C91 * C3176 + C103 * C1057 +
                                 C90 * C1465 + C101 * C1051 + C89 * C1459) *
                                    C139480 +
                                (C105 * C2695 + C91 * C2696 + C103 * C833 +
                                 C90 * C841 + C101 * C827 + C89 * C835) *
                                    C273) *
                                   C139465 * C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
             C91 * C114) *
                C273 +
            (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 + C105 * C276 +
             C91 * C579) *
                C139480) *
               C139465 * C1757 -
           ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
             C101 * C1986 + C89 * C2394) *
                C139480 +
            (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
             C101 * C1762 + C89 * C1770) *
                C273) *
               C139465 * C1758 +
           ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
             C105 * C1765 + C91 * C1773) *
                C273 +
            (C101 * C1987 + C89 * C2395 + C103 * C1988 + C90 * C2396 +
             C105 * C1989 + C91 * C2397) *
                C139480) *
               C139465 * C1759) *
              C5149 +
          (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
             C105 * C4161 + C91 * C4165) *
                C273 +
            (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
             C105 * C4395 + C91 * C4843) *
                C139480) *
               C139465 * C1758 -
           ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
             C101 * C1053 + C89 * C1461) *
                C139480 +
            (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 + C101 * C829 +
             C89 * C837) *
                C273) *
               C139465 * C1757 -
           ((C105 * C6489 + C91 * C6803 + C103 * C6490 + C90 * C6804 +
             C101 * C6491 + C89 * C6805) *
                C139480 +
            (C105 * C6323 + C91 * C6326 + C103 * C6324 + C90 * C6327 +
             C101 * C6325 + C89 * C6328) *
                C273) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] += (-std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C273 +
                     (C186 * C274 + C139465 * C633) * C139480) *
                        C89 +
                    (C640 + C656) * C90 + C660 * C91) *
                       C139362 * C5796 -
                   (C3253 * C91 + (C1567 + C1555) * C90 +
                    ((C186 * C1053 + C139465 * C1543) * C139480 +
                     (C186 * C829 + C139465 * C939) * C273) *
                        C89) *
                       C139362 * C5797 +
                   (((C186 * C830 + C139465 * C940) * C273 +
                     (C186 * C1054 + C139465 * C1544) * C139480) *
                        C89 +
                    (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
                       C139362 * C5798 -
                   (((C186 * C5919 + C139465 * C6190) * C139480 +
                     (C186 * C5801 + C139465 * C5863) * C273) *
                        C91 +
                    ((C186 * C5920 + C139465 * C6191) * C139480 +
                     (C186 * C5802 + C139465 * C5864) * C273) *
                        C90 +
                    ((C186 * C5921 + C139465 * C6192) * C139480 +
                     (C186 * C5803 + C139465 * C5865) * C273) *
                        C89) *
                       C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C139362 * C5149 -
                    (C3253 * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C139362 * C139398) *
                       C5151 +
                   (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                     (C3254 + C3258) * C91) *
                        C139362 * C139398 -
                    (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                        C139362 * C5149) *
                       C5152 +
                   ((C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) *
                        C139362 * C5149 -
                    (((C186 * C2857 + C139465 * C3251) * C139480 +
                      (C186 * C2695 + C139465 * C2775) * C273) *
                         C91 +
                     (C3258 + C3254) * C90 + C3253 * C89) *
                        C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C1757 -
                    (C3974 * C91 + (C2500 + C2488) * C90 +
                     ((C186 * C1986 + C139465 * C2476) * C139480 +
                      (C186 * C1762 + C139465 * C1872) * C273) *
                         C89) *
                        C1758 +
                    (((C186 * C1763 + C139465 * C1873) * C273 +
                      (C186 * C1987 + C139465 * C2477) * C139480) *
                         C89 +
                     (C2489 + C2501) * C90 + (C2492 + C2502) * C91) *
                        C1759) *
                       C5149 +
                   ((((C186 * C4159 + C139465 * C4275) * C273 +
                      (C186 * C4393 + C139465 * C4943) * C139480) *
                         C89 +
                     (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
                        C1758 -
                    (C3253 * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C1757 -
                    (((C186 * C6489 + C139465 * C6880) * C139480 +
                      (C186 * C6323 + C139465 * C6409) * C273) *
                         C91 +
                     ((C186 * C6490 + C139465 * C6881) * C139480 +
                      (C186 * C6324 + C139465 * C6410) * C273) *
                         C90 +
                     ((C186 * C6491 + C139465 * C6882) * C139480 +
                      (C186 * C6325 + C139465 * C6411) * C273) *
                         C89) *
                        C1759) *
                       C139398) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
           C745 * C90 + C746 * C91) *
              C139362 * C5796 -
          (C1680 * C91 + C1681 * C90 +
           (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
              C139362 * C5797 +
          ((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
           C1682 * C90 + C1683 * C91) *
              C139362 * C5798 -
          ((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139465 * C91 +
           (C711 * C5802 + C6248 + C6248 + C139480 * C6244) * C139465 * C90 +
           (C711 * C5803 + C6249 + C6249 + C139480 * C6245) * C139465 * C89) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139362 * C5149 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139362 * C139398) *
              C5151 +
          ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C139362 * C139398 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C5149) *
              C5152 +
          ((C746 * C89 + C747 * C90 + C748 * C91) * C139362 * C5149 -
           ((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139465 * C91 +
            C3340 * C90 + C1680 * C89) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C1757 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C1758 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C139465 * C89 +
            C2615 * C90 + C2616 * C91) *
               C1759) *
              C5149 +
          (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
            C5074 * C90 + C5075 * C91) *
               C1758 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C1757 -
           ((C711 * C6323 + C6961 + C6961 + C139480 * C6957) * C139465 * C91 +
            (C711 * C6324 + C6962 + C6962 + C139480 * C6958) * C139465 * C90 +
            (C711 * C6325 + C6963 + C6963 + C139480 * C6959) * C139465 * C89) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 +
             C126 + C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
                C139480 * C139465 * C139530 -
            (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
             C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
                C139480 * C139465 * C139426) *
               C5149 +
           ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
             C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
                C139480 * C139465 * C139426 -
            (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 +
             C853 + C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
                C139480 * C139465 * C139530) *
               C139398) *
              C139521 +
          (((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
             C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
                C139480 * C139465 * C139426 -
            (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 +
             C129 + C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
                C139480 * C139465 * C139530) *
               C5149 +
           ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 +
             C859 + C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
                C139480 * C139465 * C139530 -
            (C104 * C4162 + C4175 + C4175 + C91 * C4170 + C102 * C4161 + C4176 +
             C4176 + C90 * C4169 + C100 * C4160 + C4177 + C4177 + C89 * C4168) *
                C139480 * C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C139530 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139426) *
                        C5149 +
                    (((C186 * C4159 + C139465 * C4275) * C101 +
                      (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                      C4293 * C90 + C4294 * C105 + C4295 * C91) *
                         C139480 * C139426 -
                     (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                      (C186 * C837 + C139465 * C947) * C89 +
                      (C186 * C829 + C139465 * C939) * C101) *
                         C139480 * C139530) *
                        C139398) *
                       C139521 +
                   (((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                      C3503 * C105 + C3504 * C91) *
                         C139480 * C139426 -
                     (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                      C217 * C89 + C216 * C101) *
                         C139480 * C139530) *
                        C5149 +
                    ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                      C2782 * C105 + C2783 * C91) *
                         C139480 * C139530 -
                     ((C186 * C4166 + C139465 * C4282) * C91 +
                      (C186 * C4162 + C139465 * C4278) * C105 + C4295 * C90 +
                      C4294 * C103 + C4293 * C89 + C4292 * C101) *
                         C139480 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C139530 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139426) *
                        C5149 +
                    (((C273 * C4159 + C139480 * C4393) * C101 +
                      (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                      C4411 * C90 + C4412 * C105 + C4413 * C91) *
                         C139465 * C139426 -
                     (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                      (C273 * C837 + C139480 * C1061) * C89 +
                      (C273 * C829 + C139480 * C1053) * C101) *
                         C139465 * C139530) *
                        C139398) *
                       C139521 +
                   (((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                      C3585 * C105 + C3586 * C91) *
                         C139465 * C139426 -
                     (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                      C304 * C89 + C303 * C101) *
                         C139465 * C139530) *
                        C5149 +
                    ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                      C2864 * C105 + C2865 * C91) *
                         C139465 * C139530 -
                     ((C273 * C4166 + C139480 * C4400) * C91 +
                      (C273 * C4162 + C139480 * C4396) * C105 + C4413 * C90 +
                      C4412 * C103 + C4411 * C89 + C4410 * C101) *
                         C139465 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C186 +
                      (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                       C105 * C189 + C91 * C362) *
                          C139465) *
                         C139480 * C139530 -
                     ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                       C101 * C1872 + C89 * C2100) *
                          C139465 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C186) *
                         C139480 * C139426) *
                        C5149 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C186 +
                      (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
                       C105 * C4277 + C91 * C4513) *
                          C139465) *
                         C139480 * C139426 -
                     ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                       C101 * C939 + C89 * C1167) *
                          C139465 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C186) *
                         C139480 * C139530) *
                        C139398) *
                       C139521 +
                   ((((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C186 +
                      (C101 * C1871 + C89 * C2099 + C103 * C1870 + C90 * C2098 +
                       C105 * C1876 + C91 * C2104) *
                          C139465) *
                         C139480 * C139426 -
                     ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                       C101 * C188 + C89 * C361) *
                          C139465 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C186) *
                         C139480 * C139530) *
                        C5149 +
                    (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                       C105 * C833 + C91 * C841) *
                          C186 +
                      (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                       C105 * C943 + C91 * C1171) *
                          C139465) *
                         C139480 * C139530 -
                     ((C105 * C4278 + C91 * C4514 + C103 * C4277 + C90 * C4513 +
                       C101 * C4276 + C89 * C4512) *
                          C139465 +
                      (C105 * C4162 + C91 * C4166 + C103 * C4161 + C90 * C4165 +
                       C101 * C4160 + C89 * C4164) *
                          C186) *
                         C139480 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
             C447 * C91) *
                C139480 * C139530 -
            (C2213 * C91 + C2214 * C90 +
             (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
                C139480 * C139426) *
               C5149 +
           (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
             C4630 * C90 + C4631 * C91) *
                C139480 * C139426 -
            (C1280 * C91 + C1281 * C90 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          (((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139426 -
            (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139530) *
               C5149 +
           ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 * C139530 -
            ((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C91 +
             C4631 * C90 + C4630 * C89) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C273 * C106 + C139480 * C274) * C186 +
                       (C273 * C187 + C139480 * C499) * C139465) *
                          C89 +
                      (C506 + C522) * C90 + C526 * C91) *
                         C139530 -
                     (C3818 * C91 + (C2316 + C2304) * C90 +
                      ((C273 * C1872 + C139480 * C2292) * C139465 +
                       (C273 * C1762 + C139480 * C1986) * C186) *
                          C89) *
                         C139426) *
                        C5149 +
                    ((((C273 * C4159 + C139480 * C4393) * C186 +
                       (C273 * C4275 + C139480 * C4729) * C139465) *
                          C89 +
                      (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
                         C139426 -
                     (C3097 * C91 + (C1383 + C1371) * C90 +
                      ((C273 * C939 + C139480 * C1359) * C139465 +
                       (C273 * C829 + C139480 * C1053) * C186) *
                          C89) *
                         C139530) *
                        C139398) *
                       C139521 +
                   ((((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
                      (C3819 + C3823) * C91) *
                         C139426 -
                     (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                         C139530) *
                        C5149 +
                    (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                      (C3098 + C3102) * C91) *
                         C139530 -
                     (((C273 * C4278 + C139480 * C4732) * C139465 +
                       (C273 * C4162 + C139480 * C4396) * C186) *
                          C91 +
                      (C4743 + C4737) * C90 + (C4742 + C4734) * C89) *
                         C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C273 +
                      (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                       C105 * C276 + C91 * C579) *
                          C139480) *
                         C139465 * C139530 -
                     ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                       C101 * C1986 + C89 * C2394) *
                          C139480 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C273) *
                         C139465 * C139426) *
                        C5149 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C273 +
                      (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
                       C105 * C4395 + C91 * C4843) *
                          C139480) *
                         C139465 * C139426 -
                     ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                       C101 * C1053 + C89 * C1461) *
                          C139480 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C273) *
                         C139465 * C139530) *
                        C139398) *
                       C139521 +
                   ((((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C273 +
                      (C101 * C1985 + C89 * C2393 + C103 * C1984 + C90 * C2392 +
                       C105 * C1990 + C91 * C2398) *
                          C139480) *
                         C139465 * C139426 -
                     ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                       C101 * C275 + C89 * C578) *
                          C139480 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C273) *
                         C139465 * C139530) *
                        C5149 +
                    (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                       C105 * C833 + C91 * C841) *
                          C273 +
                      (C101 * C1052 + C89 * C1460 + C103 * C1051 + C90 * C1459 +
                       C105 * C1057 + C91 * C1465) *
                          C139480) *
                         C139465 * C139530 -
                     ((C105 * C4396 + C91 * C4844 + C103 * C4395 + C90 * C4843 +
                       C101 * C4394 + C89 * C4842) *
                          C139480 +
                      (C105 * C4162 + C91 * C4166 + C103 * C4161 + C90 * C4165 +
                       C101 * C4160 + C89 * C4164) *
                          C273) *
                         C139465 * C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C186 * C106 + C139465 * C187) * C273 +
                       (C186 * C274 + C139465 * C633) * C139480) *
                          C89 +
                      (C640 + C656) * C90 + C660 * C91) *
                         C139530 -
                     (C3974 * C91 + (C2500 + C2488) * C90 +
                      ((C186 * C1986 + C139465 * C2476) * C139480 +
                       (C186 * C1762 + C139465 * C1872) * C273) *
                          C89) *
                         C139426) *
                        C5149 +
                    ((((C186 * C4159 + C139465 * C4275) * C273 +
                       (C186 * C4393 + C139465 * C4943) * C139480) *
                          C89 +
                      (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
                         C139426 -
                     (C3253 * C91 + (C1567 + C1555) * C90 +
                      ((C186 * C1053 + C139465 * C1543) * C139480 +
                       (C186 * C829 + C139465 * C939) * C273) *
                          C89) *
                         C139530) *
                        C139398) *
                       C139521 +
                   ((((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
                      (C3975 + C3979) * C91) *
                         C139426 -
                     (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                         C139530) *
                        C5149 +
                    (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                      (C3254 + C3258) * C91) *
                         C139530 -
                     (((C186 * C4396 + C139465 * C4946) * C139480 +
                       (C186 * C4162 + C139465 * C4278) * C273) *
                          C91 +
                      (C4957 + C4951) * C90 + (C4956 + C4948) * C89) *
                         C139426) *
                        C139398) *
                       C139333)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
             C745 * C90 + C746 * C91) *
                C139530 -
            (C2613 * C91 + C2614 * C90 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
                C139426) *
               C5149 +
           (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
             C5074 * C90 + C5075 * C91) *
                C139426 -
            (C1680 * C91 + C1681 * C90 +
             (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
                C139530) *
               C139398) *
              C139521 +
          (((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139426 -
            (C747 * C91 + C746 * C90 + C745 * C89) * C139530) *
               C5149 +
           ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C139530 -
            ((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139465 * C91 +
             C5075 * C90 + C5074 * C89) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139362 * C5149 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139362 * C139398) *
              C5151 +
          ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 + C859 +
            C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
               C139480 * C139465 * C139362 * C139398 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139362 * C5149) *
              C5152 +
          ((C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
            C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
               C139480 * C139465 * C139362 * C5149 -
           (C104 * C2695 + C2699 + C2699 + C91 * C2697 + C102 * C833 + C2700 +
            C2700 + C90 * C849 + C100 * C827 + C2701 + C2701 + C89 * C843) *
               C139480 * C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
           C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
              C139480 * C139465 * C139362 * C5796 -
          (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
           C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
              C139480 * C139465 * C139362 * C5797 +
          (C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
           C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
              C139480 * C139465 * C139362 * C5798 -
          (C104 * C5801 + C5811 + C5811 + C91 * C5807 + C102 * C5802 + C5812 +
           C5812 + C90 * C5808 + C100 * C5803 + C5813 + C5813 + C89 * C5809) *
              C139480 * C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C139362 * C5149 -
                    (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                     (C186 * C837 + C139465 * C947) * C89 +
                     (C186 * C829 + C139465 * C939) * C101) *
                        C139480 * C139362 * C139398) *
                       C5151 +
                   ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                     C2782 * C105 + C2783 * C91) *
                        C139480 * C139362 * C139398 -
                    (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                     C217 * C89 + C216 * C101) *
                        C139480 * C139362 * C5149) *
                       C5152 +
                   ((C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                     C222 * C105 + C223 * C91) *
                        C139480 * C139362 * C5149 -
                    ((C186 * C2696 + C139465 * C2776) * C91 +
                     (C186 * C2695 + C139465 * C2775) * C105 + C2783 * C90 +
                     C2782 * C103 + C970 * C89 + C971 * C101) *
                        C139480 * C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C186 * C106 + C139465 * C187) * C101 +
                    (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                    C217 * C90 + C218 * C105 + C219 * C91) *
                       C139480 * C139362 * C5796 -
                   (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                    (C186 * C837 + C139465 * C947) * C89 +
                    (C186 * C829 + C139465 * C939) * C101) *
                       C139480 * C139362 * C5797 +
                   ((C186 * C830 + C139465 * C940) * C101 +
                    (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                    C975 * C90 + C976 * C105 + C977 * C91) *
                       C139480 * C139362 * C5798 -
                   ((C186 * C5804 + C139465 * C5866) * C91 +
                    (C186 * C5801 + C139465 * C5863) * C105 +
                    (C186 * C5805 + C139465 * C5867) * C90 +
                    (C186 * C5802 + C139465 * C5864) * C103 +
                    (C186 * C5806 + C139465 * C5868) * C89 +
                    (C186 * C5803 + C139465 * C5865) * C101) *
                       C139480 * C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C139362 * C5149 -
                    (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                     (C273 * C837 + C139480 * C1061) * C89 +
                     (C273 * C829 + C139480 * C1053) * C101) *
                        C139465 * C139362 * C139398) *
                       C5151 +
                   ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                     C2864 * C105 + C2865 * C91) *
                        C139465 * C139362 * C139398 -
                    (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                     C304 * C89 + C303 * C101) *
                        C139465 * C139362 * C5149) *
                       C5152 +
                   ((C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                     C309 * C105 + C310 * C91) *
                        C139465 * C139362 * C5149 -
                    ((C273 * C2696 + C139480 * C2858) * C91 +
                     (C273 * C2695 + C139480 * C2857) * C105 + C2865 * C90 +
                     C2864 * C103 + C1084 * C89 + C1085 * C101) *
                        C139465 * C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C273 * C106 + C139480 * C274) * C101 +
                    (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                    C304 * C90 + C305 * C105 + C306 * C91) *
                       C139465 * C139362 * C5796 -
                   (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                    (C273 * C837 + C139480 * C1061) * C89 +
                    (C273 * C829 + C139480 * C1053) * C101) *
                       C139465 * C139362 * C5797 +
                   ((C273 * C830 + C139480 * C1054) * C101 +
                    (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                    C1089 * C90 + C1090 * C105 + C1091 * C91) *
                       C139465 * C139362 * C5798 -
                   ((C273 * C5804 + C139480 * C5922) * C91 +
                    (C273 * C5801 + C139480 * C5919) * C105 +
                    (C273 * C5805 + C139480 * C5923) * C90 +
                    (C273 * C5802 + C139480 * C5920) * C103 +
                    (C273 * C5806 + C139480 * C5924) * C89 +
                    (C273 * C5803 + C139480 * C5921) * C101) *
                       C139465 * C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C186 +
                     (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                      C105 * C189 + C91 * C362) *
                         C139465) *
                        C139480 * C139362 * C5149 -
                    ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                      C101 * C939 + C89 * C1167) *
                         C139465 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C186) *
                        C139480 * C139362 * C139398) *
                       C5151 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C186 +
                     (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                      C105 * C943 + C91 * C1171) *
                         C139465) *
                        C139480 * C139362 * C139398 -
                    ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                      C101 * C188 + C89 * C361) *
                         C139465 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C186) *
                        C139480 * C139362 * C5149) *
                       C5152 +
                   (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                      C105 * C110 + C91 * C116) *
                         C186 +
                     (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                      C105 * C191 + C91 * C364) *
                         C139465) *
                        C139480 * C139362 * C5149 -
                    ((C105 * C2775 + C91 * C2939 + C103 * C943 + C90 * C1171 +
                      C101 * C937 + C89 * C1165) *
                         C139465 +
                     (C105 * C2695 + C91 * C2696 + C103 * C833 + C90 * C841 +
                      C101 * C827 + C89 * C835) *
                         C186) *
                        C139480 * C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                     C105 * C108 + C91 * C114) *
                        C186 +
                    (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                     C105 * C189 + C91 * C362) *
                        C139465) *
                       C139480 * C139362 * C5796 -
                   ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                     C101 * C939 + C89 * C1167) *
                        C139465 +
                    (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                     C101 * C829 + C89 * C837) *
                        C186) *
                       C139480 * C139362 * C5797 +
                   ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                     C105 * C832 + C91 * C840) *
                        C186 +
                    (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
                     C105 * C942 + C91 * C1170) *
                        C139465) *
                       C139480 * C139362 * C5798 -
                   ((C105 * C5863 + C91 * C5975 + C103 * C5864 + C90 * C5976 +
                     C101 * C5865 + C89 * C5977) *
                        C139465 +
                    (C105 * C5801 + C91 * C5804 + C103 * C5802 + C90 * C5805 +
                     C101 * C5803 + C89 * C5806) *
                        C186) *
                       C139480 * C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C139362 * C5149 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C139362 * C139398) *
              C5151 +
          ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 * C139362 *
               C139398 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139362 * C5149) *
              C5152 +
          ((C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C139362 * C5149 -
           ((C416 * C2695 + C3018 + C3018 + C139465 * C3014) * C91 +
            C3021 * C90 + C1280 * C89) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
           C447 * C91) *
              C139480 * C139362 * C5796 -
          (C1280 * C91 + C1281 * C90 +
           (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
              C139480 * C139362 * C5797 +
          ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 + C1282 * C90 +
           C1283 * C91) *
              C139480 * C139362 * C5798 -
          ((C416 * C5801 + C6032 + C6032 + C139465 * C6028) * C91 +
           (C416 * C5802 + C6033 + C6033 + C139465 * C6029) * C90 +
           (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C89) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C273 * C106 + C139480 * C274) * C186 +
                      (C273 * C187 + C139480 * C499) * C139465) *
                         C89 +
                     (C506 + C522) * C90 + C526 * C91) *
                        C139362 * C5149 -
                    (C3097 * C91 + (C1383 + C1371) * C90 +
                     ((C273 * C939 + C139480 * C1359) * C139465 +
                      (C273 * C829 + C139480 * C1053) * C186) *
                         C89) *
                        C139362 * C139398) *
                       C5151 +
                   (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
                     (C3098 + C3102) * C91) *
                        C139362 * C139398 -
                    (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) *
                        C139362 * C5149) *
                       C5152 +
                   ((C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) *
                        C139362 * C5149 -
                    (((C273 * C2775 + C139480 * C3095) * C139465 +
                      (C273 * C2695 + C139480 * C2857) * C186) *
                         C91 +
                     (C3102 + C3098) * C90 + C3097 * C89) *
                        C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C273 * C106 + C139480 * C274) * C186 +
                     (C273 * C187 + C139480 * C499) * C139465) *
                        C89 +
                    (C506 + C522) * C90 + C526 * C91) *
                       C139362 * C5796 -
                   (C3097 * C91 + (C1383 + C1371) * C90 +
                    ((C273 * C939 + C139480 * C1359) * C139465 +
                     (C273 * C829 + C139480 * C1053) * C186) *
                        C89) *
                       C139362 * C5797 +
                   (((C273 * C830 + C139480 * C1054) * C186 +
                     (C273 * C940 + C139480 * C1360) * C139465) *
                        C89 +
                    (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
                       C139362 * C5798 -
                   (((C273 * C5863 + C139480 * C6084) * C139465 +
                     (C273 * C5801 + C139480 * C5919) * C186) *
                        C91 +
                    ((C273 * C5864 + C139480 * C6085) * C139465 +
                     (C273 * C5802 + C139480 * C5920) * C186) *
                        C90 +
                    ((C273 * C5865 + C139480 * C6086) * C139465 +
                     (C273 * C5803 + C139480 * C5921) * C186) *
                        C89) *
                       C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eezx[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                      C105 * C108 + C91 * C114) *
                         C273 +
                     (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                      C105 * C276 + C91 * C579) *
                         C139480) *
                        C139465 * C139362 * C5149 -
                    ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                      C101 * C1053 + C89 * C1461) *
                         C139480 +
                     (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                      C101 * C829 + C89 * C837) *
                         C273) *
                        C139465 * C139362 * C139398) *
                       C5151 +
                   (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                      C105 * C833 + C91 * C841) *
                         C273 +
                     (C101 * C1052 + C89 * C1460 + C103 * C1051 + C90 * C1459 +
                      C105 * C1057 + C91 * C1465) *
                         C139480) *
                        C139465 * C139362 * C139398 -
                    ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                      C101 * C275 + C89 * C578) *
                         C139480 +
                     (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                      C101 * C107 + C89 * C113) *
                         C273) *
                        C139465 * C139362 * C5149) *
                       C5152 +
                   (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                      C105 * C110 + C91 * C116) *
                         C273 +
                     (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                      C105 * C278 + C91 * C581) *
                         C139480) *
                        C139465 * C139362 * C5149 -
                    ((C105 * C2857 + C91 * C3176 + C103 * C1057 + C90 * C1465 +
                      C101 * C1051 + C89 * C1459) *
                         C139480 +
                     (C105 * C2695 + C91 * C2696 + C103 * C833 + C90 * C841 +
                      C101 * C827 + C89 * C835) *
                         C273) *
                        C139465 * C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                     C105 * C108 + C91 * C114) *
                        C273 +
                    (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                     C105 * C276 + C91 * C579) *
                        C139480) *
                       C139465 * C139362 * C5796 -
                   ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                     C101 * C1053 + C89 * C1461) *
                        C139480 +
                    (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                     C101 * C829 + C89 * C837) *
                        C273) *
                       C139465 * C139362 * C5797 +
                   ((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                     C105 * C832 + C91 * C840) *
                        C273 +
                    (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
                     C105 * C1056 + C91 * C1464) *
                        C139480) *
                       C139465 * C139362 * C5798 -
                   ((C105 * C5919 + C91 * C6137 + C103 * C5920 + C90 * C6138 +
                     C101 * C5921 + C89 * C6139) *
                        C139480 +
                    (C105 * C5801 + C91 * C5804 + C103 * C5802 + C90 * C5805 +
                     C101 * C5803 + C89 * C5806) *
                        C273) *
                       C139465 * C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eezy[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C186 * C106 + C139465 * C187) * C273 +
                      (C186 * C274 + C139465 * C633) * C139480) *
                         C89 +
                     (C640 + C656) * C90 + C660 * C91) *
                        C139362 * C5149 -
                    (C3253 * C91 + (C1567 + C1555) * C90 +
                     ((C186 * C1053 + C139465 * C1543) * C139480 +
                      (C186 * C829 + C139465 * C939) * C273) *
                         C89) *
                        C139362 * C139398) *
                       C5151 +
                   (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
                     (C3254 + C3258) * C91) *
                        C139362 * C139398 -
                    (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) *
                        C139362 * C5149) *
                       C5152 +
                   ((C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) *
                        C139362 * C5149 -
                    (((C186 * C2857 + C139465 * C3251) * C139480 +
                      (C186 * C2695 + C139465 * C2775) * C273) *
                         C91 +
                     (C3258 + C3254) * C90 + C3253 * C89) *
                        C139362 * C139398) *
                       C5153)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C186 * C106 + C139465 * C187) * C273 +
                     (C186 * C274 + C139465 * C633) * C139480) *
                        C89 +
                    (C640 + C656) * C90 + C660 * C91) *
                       C139362 * C5796 -
                   (C3253 * C91 + (C1567 + C1555) * C90 +
                    ((C186 * C1053 + C139465 * C1543) * C139480 +
                     (C186 * C829 + C139465 * C939) * C273) *
                        C89) *
                       C139362 * C5797 +
                   (((C186 * C830 + C139465 * C940) * C273 +
                     (C186 * C1054 + C139465 * C1544) * C139480) *
                        C89 +
                    (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
                       C139362 * C5798 -
                   (((C186 * C5919 + C139465 * C6190) * C139480 +
                     (C186 * C5801 + C139465 * C5863) * C273) *
                        C91 +
                    ((C186 * C5920 + C139465 * C6191) * C139480 +
                     (C186 * C5802 + C139465 * C5864) * C273) *
                        C90 +
                    ((C186 * C5921 + C139465 * C6192) * C139480 +
                     (C186 * C5803 + C139465 * C5865) * C273) *
                        C89) *
                       C139362 * C5799) *
                  C139327) /
                     (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139362 * C5149 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139362 * C139398) *
              C5151 +
          ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C139362 * C139398 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139362 * C5149) *
              C5152 +
          ((C746 * C89 + C747 * C90 + C748 * C91) * C139362 * C5149 -
           ((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139465 * C91 +
            C3340 * C90 + C1680 * C89) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
           C745 * C90 + C746 * C91) *
              C139362 * C5796 -
          (C1680 * C91 + C1681 * C90 +
           (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
              C139362 * C5797 +
          ((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
           C1682 * C90 + C1683 * C91) *
              C139362 * C5798 -
          ((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139465 * C91 +
           (C711 * C5802 + C6248 + C6248 + C139480 * C6244) * C139465 * C90 +
           (C711 * C5803 + C6249 + C6249 + C139480 * C6245) * C139465 * C89) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 +
             C126 + C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
                C139480 * C139465 * C9304 -
            (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
             C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
                C139480 * C139465 * C139426) *
               C139529 +
           ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
             C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
                C139480 * C139465 * C139426 -
            (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 +
             C853 + C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
                C139480 * C139465 * C9304) *
               C139398) *
              C139521 +
          (((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
             C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
                C139480 * C139465 * C139426 -
            (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 +
             C129 + C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
                C139480 * C139465 * C9304) *
               C139529 +
           ((C100 * C828 + C858 + C858 + C89 * C844 + C102 * C827 + C859 +
             C859 + C90 * C843 + C104 * C833 + C860 + C860 + C91 * C849) *
                C139480 * C139465 * C9304 -
            (C104 * C4162 + C4175 + C4175 + C91 * C4170 + C102 * C4161 + C4176 +
             C4176 + C90 * C4169 + C100 * C4160 + C4177 + C4177 + C89 * C4168) *
                C139480 * C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C101 +
                       (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                       C217 * C90 + C218 * C105 + C219 * C91) *
                          C139480 * C9304 -
                      (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                       (C186 * C1770 + C139465 * C1880) * C89 +
                       (C186 * C1762 + C139465 * C1872) * C101) *
                          C139480 * C139426) *
                         C139529 +
                     (((C186 * C4159 + C139465 * C4275) * C101 +
                       (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                       C4293 * C90 + C4294 * C105 + C4295 * C91) *
                          C139480 * C139426 -
                      (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                       (C186 * C837 + C139465 * C947) * C89 +
                       (C186 * C829 + C139465 * C939) * C101) *
                          C139480 * C9304) *
                         C139398) *
                        C139521 +
                    (((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                       C3503 * C105 + C3504 * C91) *
                          C139480 * C139426 -
                      (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                       C217 * C89 + C216 * C101) *
                          C139480 * C9304) *
                         C139529 +
                     ((C973 * C101 + C972 * C89 + C971 * C103 + C970 * C90 +
                       C2782 * C105 + C2783 * C91) *
                          C139480 * C9304 -
                      ((C186 * C4166 + C139465 * C4282) * C91 +
                       (C186 * C4162 + C139465 * C4278) * C105 + C4295 * C90 +
                       C4294 * C103 + C4293 * C89 + C4292 * C101) *
                          C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C101 +
                       (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                       C304 * C90 + C305 * C105 + C306 * C91) *
                          C139465 * C9304 -
                      (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                       (C273 * C1770 + C139480 * C1994) * C89 +
                       (C273 * C1762 + C139480 * C1986) * C101) *
                          C139465 * C139426) *
                         C139529 +
                     (((C273 * C4159 + C139480 * C4393) * C101 +
                       (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                       C4411 * C90 + C4412 * C105 + C4413 * C91) *
                          C139465 * C139426 -
                      (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                       (C273 * C837 + C139480 * C1061) * C89 +
                       (C273 * C829 + C139480 * C1053) * C101) *
                          C139465 * C9304) *
                         C139398) *
                        C139521 +
                    (((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                       C3585 * C105 + C3586 * C91) *
                          C139465 * C139426 -
                      (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                       C304 * C89 + C303 * C101) *
                          C139465 * C9304) *
                         C139529 +
                     ((C1087 * C101 + C1086 * C89 + C1085 * C103 + C1084 * C90 +
                       C2864 * C105 + C2865 * C91) *
                          C139465 * C9304 -
                      ((C273 * C4166 + C139480 * C4400) * C91 +
                       (C273 * C4162 + C139480 * C4396) * C105 + C4413 * C90 +
                       C4412 * C103 + C4411 * C89 + C4410 * C101) *
                          C139465 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                        C105 * C108 + C91 * C114) *
                           C186 +
                       (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                        C105 * C189 + C91 * C362) *
                           C139465) *
                          C139480 * C9304 -
                      ((C105 * C1870 + C91 * C2098 + C103 * C1871 +
                        C90 * C2099 + C101 * C1872 + C89 * C2100) *
                           C139465 +
                       (C105 * C1760 + C91 * C1768 + C103 * C1761 +
                        C90 * C1769 + C101 * C1762 + C89 * C1770) *
                           C186) *
                          C139480 * C139426) *
                         C139529 +
                     (((C101 * C4159 + C89 * C4163 + C103 * C4160 +
                        C90 * C4164 + C105 * C4161 + C91 * C4165) *
                           C186 +
                       (C101 * C4275 + C89 * C4511 + C103 * C4276 +
                        C90 * C4512 + C105 * C4277 + C91 * C4513) *
                           C139465) *
                          C139480 * C139426 -
                      ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                        C101 * C939 + C89 * C1167) *
                           C139465 +
                       (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                        C101 * C829 + C89 * C837) *
                           C186) *
                          C139480 * C9304) *
                         C139398) *
                        C139521 +
                    ((((C101 * C1761 + C89 * C1769 + C103 * C1760 +
                        C90 * C1768 + C105 * C1766 + C91 * C1774) *
                           C186 +
                       (C101 * C1871 + C89 * C2099 + C103 * C1870 +
                        C90 * C2098 + C105 * C1876 + C91 * C2104) *
                           C139465) *
                          C139480 * C139426 -
                      ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                        C101 * C188 + C89 * C361) *
                           C139465 +
                       (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                        C101 * C107 + C89 * C113) *
                           C186) *
                          C139480 * C9304) *
                         C139529 +
                     (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                        C105 * C833 + C91 * C841) *
                           C186 +
                       (C101 * C938 + C89 * C1166 + C103 * C937 + C90 * C1165 +
                        C105 * C943 + C91 * C1171) *
                           C139465) *
                          C139480 * C9304 -
                      ((C105 * C4278 + C91 * C4514 + C103 * C4277 +
                        C90 * C4513 + C101 * C4276 + C89 * C4512) *
                           C139465 +
                       (C105 * C4162 + C91 * C4166 + C103 * C4161 +
                        C90 * C4165 + C101 * C4160 + C89 * C4164) *
                           C186) *
                          C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
             C447 * C91) *
                C139480 * C9304 -
            (C2213 * C91 + C2214 * C90 +
             (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
                C139480 * C139426) *
               C139529 +
           (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
             C4630 * C90 + C4631 * C91) *
                C139480 * C139426 -
            (C1280 * C91 + C1281 * C90 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          (((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139426 -
            (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C9304) *
               C139529 +
           ((C1281 * C89 + C1280 * C90 + C3021 * C91) * C139480 * C9304 -
            ((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C91 +
             C4631 * C90 + C4630 * C89) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C186 +
              (C273 * C187 + C139480 * C499) * C139465) *
                 C89 +
             (C506 + C522) * C90 + C526 * C91) *
                C9304 -
            (C3818 * C91 + (C2316 + C2304) * C90 +
             ((C273 * C1872 + C139480 * C2292) * C139465 +
              (C273 * C1762 + C139480 * C1986) * C186) *
                 C89) *
                C139426) *
               C139529 +
           ((((C273 * C4159 + C139480 * C4393) * C186 +
              (C273 * C4275 + C139480 * C4729) * C139465) *
                 C89 +
             (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
                C139426 -
            (C3097 * C91 + (C1383 + C1371) * C90 +
             ((C273 * C939 + C139480 * C1359) * C139465 +
              (C273 * C829 + C139480 * C1053) * C186) *
                 C89) *
                C9304) *
               C139398) *
              C139521 +
          ((((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
             (C3819 + C3823) * C91) *
                C139426 -
            (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C9304) *
               C139529 +
           (((C1371 + C1383) * C89 + (C1368 + C1382) * C90 +
             (C3098 + C3102) * C91) *
                C9304 -
            (((C273 * C4278 + C139480 * C4732) * C139465 +
              (C273 * C4162 + C139480 * C4396) * C186) *
                 C91 +
             (C4743 + C4737) * C90 + (C4742 + C4734) * C89) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                        C105 * C108 + C91 * C114) *
                           C273 +
                       (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                        C105 * C276 + C91 * C579) *
                           C139480) *
                          C139465 * C9304 -
                      ((C105 * C1984 + C91 * C2392 + C103 * C1985 +
                        C90 * C2393 + C101 * C1986 + C89 * C2394) *
                           C139480 +
                       (C105 * C1760 + C91 * C1768 + C103 * C1761 +
                        C90 * C1769 + C101 * C1762 + C89 * C1770) *
                           C273) *
                          C139465 * C139426) *
                         C139529 +
                     (((C101 * C4159 + C89 * C4163 + C103 * C4160 +
                        C90 * C4164 + C105 * C4161 + C91 * C4165) *
                           C273 +
                       (C101 * C4393 + C89 * C4841 + C103 * C4394 +
                        C90 * C4842 + C105 * C4395 + C91 * C4843) *
                           C139480) *
                          C139465 * C139426 -
                      ((C105 * C1051 + C91 * C1459 + C103 * C1052 +
                        C90 * C1460 + C101 * C1053 + C89 * C1461) *
                           C139480 +
                       (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                        C101 * C829 + C89 * C837) *
                           C273) *
                          C139465 * C9304) *
                         C139398) *
                        C139521 +
                    ((((C101 * C1761 + C89 * C1769 + C103 * C1760 +
                        C90 * C1768 + C105 * C1766 + C91 * C1774) *
                           C273 +
                       (C101 * C1985 + C89 * C2393 + C103 * C1984 +
                        C90 * C2392 + C105 * C1990 + C91 * C2398) *
                           C139480) *
                          C139465 * C139426 -
                      ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                        C101 * C275 + C89 * C578) *
                           C139480 +
                       (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                        C101 * C107 + C89 * C113) *
                           C273) *
                          C139465 * C9304) *
                         C139529 +
                     (((C101 * C828 + C89 * C836 + C103 * C827 + C90 * C835 +
                        C105 * C833 + C91 * C841) *
                           C273 +
                       (C101 * C1052 + C89 * C1460 + C103 * C1051 +
                        C90 * C1459 + C105 * C1057 + C91 * C1465) *
                           C139480) *
                          C139465 * C9304 -
                      ((C105 * C4396 + C91 * C4844 + C103 * C4395 +
                        C90 * C4843 + C101 * C4394 + C89 * C4842) *
                           C139480 +
                       (C105 * C4162 + C91 * C4166 + C103 * C4161 +
                        C90 * C4165 + C101 * C4160 + C89 * C4164) *
                           C273) *
                          C139465 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C273 +
              (C186 * C274 + C139465 * C633) * C139480) *
                 C89 +
             (C640 + C656) * C90 + C660 * C91) *
                C9304 -
            (C3974 * C91 + (C2500 + C2488) * C90 +
             ((C186 * C1986 + C139465 * C2476) * C139480 +
              (C186 * C1762 + C139465 * C1872) * C273) *
                 C89) *
                C139426) *
               C139529 +
           ((((C186 * C4159 + C139465 * C4275) * C273 +
              (C186 * C4393 + C139465 * C4943) * C139480) *
                 C89 +
             (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
                C139426 -
            (C3253 * C91 + (C1567 + C1555) * C90 +
             ((C186 * C1053 + C139465 * C1543) * C139480 +
              (C186 * C829 + C139465 * C939) * C273) *
                 C89) *
                C9304) *
               C139398) *
              C139521 +
          ((((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
             (C3975 + C3979) * C91) *
                C139426 -
            (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C9304) *
               C139529 +
           (((C1555 + C1567) * C89 + (C1552 + C1566) * C90 +
             (C3254 + C3258) * C91) *
                C9304 -
            (((C186 * C4396 + C139465 * C4946) * C139480 +
              (C186 * C4162 + C139465 * C4278) * C273) *
                 C91 +
             (C4957 + C4951) * C90 + (C4956 + C4948) * C89) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
             C745 * C90 + C746 * C91) *
                C9304 -
            (C2613 * C91 + C2614 * C90 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
                C139426) *
               C139529 +
           (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
             C5074 * C90 + C5075 * C91) *
                C139426 -
            (C1680 * C91 + C1681 * C90 +
             (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
                C9304) *
               C139398) *
              C139521 +
          (((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139426 -
            (C747 * C91 + C746 * C90 + C745 * C89) * C9304) *
               C139529 +
           ((C1681 * C89 + C1680 * C90 + C3340 * C91) * C9304 -
            ((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139465 * C91 +
             C5075 * C90 + C5074 * C89) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139562 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139563 +
           (C100 * C1763 + C1788 + C1788 + C89 * C1779 + C102 * C1764 + C1789 +
            C1789 + C90 * C1780 + C104 * C1765 + C1790 + C1790 + C91 * C1781) *
               C139480 * C139465 * C12024) *
              C139529 +
          ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
            C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
               C139480 * C139465 * C139563 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C139562 -
           (C104 * C6323 + C6333 + C6333 + C91 * C6329 + C102 * C6324 + C6334 +
            C6334 + C90 * C6330 + C100 * C6325 + C6335 + C6335 + C89 * C6331) *
               C139480 * C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C139562 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139563 +
                     ((C186 * C1763 + C139465 * C1873) * C101 +
                      (C186 * C1771 + C139465 * C1881) * C89 + C1907 * C103 +
                      C1908 * C90 + C1909 * C105 + C1910 * C91) *
                         C139480 * C12024) *
                        C139529 +
                    (((C186 * C4159 + C139465 * C4275) * C101 +
                      (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                      C4293 * C90 + C4294 * C105 + C4295 * C91) *
                         C139480 * C139563 -
                     (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                      (C186 * C837 + C139465 * C947) * C89 +
                      (C186 * C829 + C139465 * C939) * C101) *
                         C139480 * C139562 -
                     ((C186 * C6326 + C139465 * C6412) * C91 +
                      (C186 * C6323 + C139465 * C6409) * C105 +
                      (C186 * C6327 + C139465 * C6413) * C90 +
                      (C186 * C6324 + C139465 * C6410) * C103 +
                      (C186 * C6328 + C139465 * C6414) * C89 +
                      (C186 * C6325 + C139465 * C6411) * C101) *
                         C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C139562 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139563 +
                     ((C273 * C1763 + C139480 * C1987) * C101 +
                      (C273 * C1771 + C139480 * C1995) * C89 + C2021 * C103 +
                      C2022 * C90 + C2023 * C105 + C2024 * C91) *
                         C139465 * C12024) *
                        C139529 +
                    (((C273 * C4159 + C139480 * C4393) * C101 +
                      (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                      C4411 * C90 + C4412 * C105 + C4413 * C91) *
                         C139465 * C139563 -
                     (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                      (C273 * C837 + C139480 * C1061) * C89 +
                      (C273 * C829 + C139480 * C1053) * C101) *
                         C139465 * C139562 -
                     ((C273 * C6326 + C139480 * C6492) * C91 +
                      (C273 * C6323 + C139480 * C6489) * C105 +
                      (C273 * C6327 + C139480 * C6493) * C90 +
                      (C273 * C6324 + C139480 * C6490) * C103 +
                      (C273 * C6328 + C139480 * C6494) * C89 +
                      (C273 * C6325 + C139480 * C6491) * C101) *
                         C139465 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C186 +
                      (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                       C105 * C189 + C91 * C362) *
                          C139465) *
                         C139480 * C139562 -
                     ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                       C101 * C1872 + C89 * C2100) *
                          C139465 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C186) *
                         C139480 * C139563 +
                     ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
                       C105 * C1765 + C91 * C1773) *
                          C186 +
                      (C101 * C1873 + C89 * C2101 + C103 * C1874 + C90 * C2102 +
                       C105 * C1875 + C91 * C2103) *
                          C139465) *
                         C139480 * C12024) *
                        C139529 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C186 +
                      (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
                       C105 * C4277 + C91 * C4513) *
                          C139465) *
                         C139480 * C139563 -
                     ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                       C101 * C939 + C89 * C1167) *
                          C139465 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C186) *
                         C139480 * C139562 -
                     ((C105 * C6409 + C91 * C6569 + C103 * C6410 + C90 * C6570 +
                       C101 * C6411 + C89 * C6571) *
                          C139465 +
                      (C105 * C6323 + C91 * C6326 + C103 * C6324 + C90 * C6327 +
                       C101 * C6325 + C89 * C6328) *
                          C186) *
                         C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 +
                      C446 * C90 + C447 * C91) *
                         C139480 * C139562 -
                     (C2213 * C91 + C2214 * C90 +
                      (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
                         C139480 * C139563 +
                     ((C416 * C1763 + C2196 + C2196 + C139465 * C2183) * C89 +
                      C2215 * C90 + C2216 * C91) *
                         C139480 * C12024) *
                        C139529 +
                    (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
                      C4630 * C90 + C4631 * C91) *
                         C139480 * C139563 -
                     (C1280 * C91 + C1281 * C90 +
                      (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
                         C139480 * C139562 -
                     ((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C91 +
                      (C416 * C6324 + C6651 + C6651 + C139465 * C6647) * C90 +
                      (C416 * C6325 + C6652 + C6652 + C139465 * C6648) * C89) *
                         C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C186 +
                       (C273 * C187 + C139480 * C499) * C139465) *
                          C89 +
                      (C506 + C522) * C90 + C526 * C91) *
                         C139562 -
                     (C3818 * C91 + (C2316 + C2304) * C90 +
                      ((C273 * C1872 + C139480 * C2292) * C139465 +
                       (C273 * C1762 + C139480 * C1986) * C186) *
                          C89) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C186 +
                       (C273 * C1873 + C139480 * C2293) * C139465) *
                          C89 +
                      (C2305 + C2317) * C90 + (C2308 + C2318) * C91) *
                         C12024) *
                        C139529 +
                    ((((C273 * C4159 + C139480 * C4393) * C186 +
                       (C273 * C4275 + C139480 * C4729) * C139465) *
                          C89 +
                      (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
                         C139563 -
                     (C3097 * C91 + (C1383 + C1371) * C90 +
                      ((C273 * C939 + C139480 * C1359) * C139465 +
                       (C273 * C829 + C139480 * C1053) * C186) *
                          C89) *
                         C139562 -
                     (((C273 * C6409 + C139480 * C6726) * C139465 +
                       (C273 * C6323 + C139480 * C6489) * C186) *
                          C91 +
                      ((C273 * C6410 + C139480 * C6727) * C139465 +
                       (C273 * C6324 + C139480 * C6490) * C186) *
                          C90 +
                      ((C273 * C6411 + C139480 * C6728) * C139465 +
                       (C273 * C6325 + C139480 * C6491) * C186) *
                          C89) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C273 +
                      (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                       C105 * C276 + C91 * C579) *
                          C139480) *
                         C139465 * C139562 -
                     ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                       C101 * C1986 + C89 * C2394) *
                          C139480 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C273) *
                         C139465 * C139563 +
                     ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
                       C105 * C1765 + C91 * C1773) *
                          C273 +
                      (C101 * C1987 + C89 * C2395 + C103 * C1988 + C90 * C2396 +
                       C105 * C1989 + C91 * C2397) *
                          C139480) *
                         C139465 * C12024) *
                        C139529 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C273 +
                      (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
                       C105 * C4395 + C91 * C4843) *
                          C139480) *
                         C139465 * C139563 -
                     ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                       C101 * C1053 + C89 * C1461) *
                          C139480 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C273) *
                         C139465 * C139562 -
                     ((C105 * C6489 + C91 * C6803 + C103 * C6490 + C90 * C6804 +
                       C101 * C6491 + C89 * C6805) *
                          C139480 +
                      (C105 * C6323 + C91 * C6326 + C103 * C6324 + C90 * C6327 +
                       C101 * C6325 + C89 * C6328) *
                          C273) *
                         C139465 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C273 +
                       (C186 * C274 + C139465 * C633) * C139480) *
                          C89 +
                      (C640 + C656) * C90 + C660 * C91) *
                         C139562 -
                     (C3974 * C91 + (C2500 + C2488) * C90 +
                      ((C186 * C1986 + C139465 * C2476) * C139480 +
                       (C186 * C1762 + C139465 * C1872) * C273) *
                          C89) *
                         C139563 +
                     (((C186 * C1763 + C139465 * C1873) * C273 +
                       (C186 * C1987 + C139465 * C2477) * C139480) *
                          C89 +
                      (C2489 + C2501) * C90 + (C2492 + C2502) * C91) *
                         C12024) *
                        C139529 +
                    ((((C186 * C4159 + C139465 * C4275) * C273 +
                       (C186 * C4393 + C139465 * C4943) * C139480) *
                          C89 +
                      (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
                         C139563 -
                     (C3253 * C91 + (C1567 + C1555) * C90 +
                      ((C186 * C1053 + C139465 * C1543) * C139480 +
                       (C186 * C829 + C139465 * C939) * C273) *
                          C89) *
                         C139562 -
                     (((C186 * C6489 + C139465 * C6880) * C139480 +
                       (C186 * C6323 + C139465 * C6409) * C273) *
                          C91 +
                      ((C186 * C6490 + C139465 * C6881) * C139480 +
                       (C186 * C6324 + C139465 * C6410) * C273) *
                          C90 +
                      ((C186 * C6491 + C139465 * C6882) * C139480 +
                       (C186 * C6325 + C139465 * C6411) * C273) *
                          C89) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139562 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139563 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C139465 * C89 +
            C2615 * C90 + C2616 * C91) *
               C12024) *
              C139529 +
          (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
            C5074 * C90 + C5075 * C91) *
               C139563 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C139562 -
           ((C711 * C6323 + C6961 + C6961 + C139480 * C6957) * C139465 * C91 +
            (C711 * C6324 + C6962 + C6962 + C139480 * C6958) * C139465 * C90 +
            (C711 * C6325 + C6963 + C6963 + C139480 * C6959) * C139465 * C89) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (-std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C9304 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139426) *
              C822 +
          ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
            C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
               C139480 * C139465 * C139426 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C9304) *
              C823 +
          ((C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
            C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
               C139480 * C139465 * C9304 -
           (C104 * C8590 + C8600 + C8600 + C91 * C8596 + C102 * C8591 + C8601 +
            C8601 + C90 * C8597 + C100 * C8592 + C8602 + C8602 + C89 * C8598) *
               C139480 * C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C9304 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139426) *
              C139346 * C5151 +
          ((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
            C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
               C139480 * C139465 * C139426 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C9304) *
              C139346 * C5152 +
          ((C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
            C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
               C139480 * C139465 * C9304 -
           (C104 * C3416 + C3420 + C3420 + C91 * C3418 + C102 * C1766 + C3421 +
            C3421 + C90 * C1782 + C100 * C1760 + C3422 + C3422 + C89 * C1776) *
               C139480 * C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
           C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
              C139480 * C139465 * C10614 -
          (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
           C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
              C139480 * C139465 * C10615 +
          (C100 * C1763 + C1788 + C1788 + C89 * C1779 + C102 * C1764 + C1789 +
           C1789 + C90 * C1780 + C104 * C1765 + C1790 + C1790 + C91 * C1781) *
              C139480 * C139465 * C10616 -
          (C104 * C10618 + C10628 + C10628 + C91 * C10624 + C102 * C10619 +
           C10629 + C10629 + C90 * C10625 + C100 * C10620 + C10630 + C10630 +
           C89 * C10626) *
              C139480 * C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] += (-std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C9304 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139426) *
                        C822 +
                    (((C186 * C4159 + C139465 * C4275) * C101 +
                      (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                      C4293 * C90 + C4294 * C105 + C4295 * C91) *
                         C139480 * C139426 -
                     (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                      (C186 * C837 + C139465 * C947) * C89 +
                      (C186 * C829 + C139465 * C939) * C101) *
                         C139480 * C9304) *
                        C823 +
                    (((C186 * C830 + C139465 * C940) * C101 +
                      (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                      C975 * C90 + C976 * C105 + C977 * C91) *
                         C139480 * C9304 -
                     ((C186 * C8593 + C139465 * C8679) * C91 +
                      (C186 * C8590 + C139465 * C8676) * C105 +
                      (C186 * C8594 + C139465 * C8680) * C90 +
                      (C186 * C8591 + C139465 * C8677) * C103 +
                      (C186 * C8595 + C139465 * C8681) * C89 +
                      (C186 * C8592 + C139465 * C8678) * C101) *
                         C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C9304 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139426) *
                        C139346 * C5151 +
                    ((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                      C3503 * C105 + C3504 * C91) *
                         C139480 * C139426 -
                     (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                      C217 * C89 + C216 * C101) *
                         C139480 * C9304) *
                        C139346 * C5152 +
                    ((C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                      C222 * C105 + C223 * C91) *
                         C139480 * C9304 -
                     ((C186 * C3417 + C139465 * C3497) * C91 +
                      (C186 * C3416 + C139465 * C3496) * C105 + C3504 * C90 +
                      C3503 * C103 + C1903 * C89 + C1904 * C101) *
                         C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C186 * C106 + C139465 * C187) * C101 +
                     (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                     C217 * C90 + C218 * C105 + C219 * C91) *
                        C139480 * C10614 -
                    (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                     (C186 * C1770 + C139465 * C1880) * C89 +
                     (C186 * C1762 + C139465 * C1872) * C101) *
                        C139480 * C10615 +
                    ((C186 * C1763 + C139465 * C1873) * C101 +
                     (C186 * C1771 + C139465 * C1881) * C89 + C1907 * C103 +
                     C1908 * C90 + C1909 * C105 + C1910 * C91) *
                        C139480 * C10616 -
                    ((C186 * C10621 + C139465 * C10683) * C91 +
                     (C186 * C10618 + C139465 * C10680) * C105 +
                     (C186 * C10622 + C139465 * C10684) * C90 +
                     (C186 * C10619 + C139465 * C10681) * C103 +
                     (C186 * C10623 + C139465 * C10685) * C89 +
                     (C186 * C10620 + C139465 * C10682) * C101) *
                        C139480 * C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexz[12] += (-std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C9304 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139426) *
                        C822 +
                    (((C273 * C4159 + C139480 * C4393) * C101 +
                      (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                      C4411 * C90 + C4412 * C105 + C4413 * C91) *
                         C139465 * C139426 -
                     (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                      (C273 * C837 + C139480 * C1061) * C89 +
                      (C273 * C829 + C139480 * C1053) * C101) *
                         C139465 * C9304) *
                        C823 +
                    (((C273 * C830 + C139480 * C1054) * C101 +
                      (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                      C1089 * C90 + C1090 * C105 + C1091 * C91) *
                         C139465 * C9304 -
                     ((C273 * C8593 + C139480 * C8759) * C91 +
                      (C273 * C8590 + C139480 * C8756) * C105 +
                      (C273 * C8594 + C139480 * C8760) * C90 +
                      (C273 * C8591 + C139480 * C8757) * C103 +
                      (C273 * C8595 + C139480 * C8761) * C89 +
                      (C273 * C8592 + C139480 * C8758) * C101) *
                         C139465 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C9304 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139426) *
                        C139346 * C5151 +
                    ((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                      C3585 * C105 + C3586 * C91) *
                         C139465 * C139426 -
                     (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                      C304 * C89 + C303 * C101) *
                         C139465 * C9304) *
                        C139346 * C5152 +
                    ((C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                      C309 * C105 + C310 * C91) *
                         C139465 * C9304 -
                     ((C273 * C3417 + C139480 * C3579) * C91 +
                      (C273 * C3416 + C139480 * C3578) * C105 + C3586 * C90 +
                      C3585 * C103 + C2017 * C89 + C2018 * C101) *
                         C139465 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C273 * C106 + C139480 * C274) * C101 +
                     (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                     C304 * C90 + C305 * C105 + C306 * C91) *
                        C139465 * C10614 -
                    (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                     (C273 * C1770 + C139480 * C1994) * C89 +
                     (C273 * C1762 + C139480 * C1986) * C101) *
                        C139465 * C10615 +
                    ((C273 * C1763 + C139480 * C1987) * C101 +
                     (C273 * C1771 + C139480 * C1995) * C89 + C2021 * C103 +
                     C2022 * C90 + C2023 * C105 + C2024 * C91) *
                        C139465 * C10616 -
                    ((C273 * C10621 + C139480 * C10739) * C91 +
                     (C273 * C10618 + C139480 * C10736) * C105 +
                     (C273 * C10622 + C139480 * C10740) * C90 +
                     (C273 * C10619 + C139480 * C10737) * C103 +
                     (C273 * C10623 + C139480 * C10741) * C89 +
                     (C273 * C10620 + C139480 * C10738) * C101) *
                        C139465 * C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
             C91 * C114) *
                C186 +
            (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 + C105 * C189 +
             C91 * C362) *
                C139465) *
               C139480 * C9304 -
           ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
             C101 * C1872 + C89 * C2100) *
                C139465 +
            (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
             C101 * C1762 + C89 * C1770) *
                C186) *
               C139480 * C139426) *
              C822 +
          (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
             C105 * C4161 + C91 * C4165) *
                C186 +
            (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
             C105 * C4277 + C91 * C4513) *
                C139465) *
               C139480 * C139426 -
           ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
             C101 * C939 + C89 * C1167) *
                C139465 +
            (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 + C101 * C829 +
             C89 * C837) *
                C186) *
               C139480 * C9304) *
              C823 +
          (((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 + C105 * C832 +
             C91 * C840) *
                C186 +
            (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
             C105 * C942 + C91 * C1170) *
                C139465) *
               C139480 * C9304 -
           ((C105 * C8676 + C91 * C8836 + C103 * C8677 + C90 * C8837 +
             C101 * C8678 + C89 * C8838) *
                C139465 +
            (C105 * C8590 + C91 * C8593 + C103 * C8591 + C90 * C8594 +
             C101 * C8592 + C89 * C8595) *
                C186) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C106 + C89 * C112 + C103 * C107 +
                                 C90 * C113 + C105 * C108 + C91 * C114) *
                                    C186 +
                                (C101 * C187 + C89 * C360 + C103 * C188 +
                                 C90 * C361 + C105 * C189 + C91 * C362) *
                                    C139465) *
                                   C139480 * C9304 -
                               ((C105 * C1870 + C91 * C2098 + C103 * C1871 +
                                 C90 * C2099 + C101 * C1872 + C89 * C2100) *
                                    C139465 +
                                (C105 * C1760 + C91 * C1768 + C103 * C1761 +
                                 C90 * C1769 + C101 * C1762 + C89 * C1770) *
                                    C186) *
                                   C139480 * C139426) *
                                  C139346 * C5151 +
                              (((C101 * C1761 + C89 * C1769 + C103 * C1760 +
                                 C90 * C1768 + C105 * C1766 + C91 * C1774) *
                                    C186 +
                                (C101 * C1871 + C89 * C2099 + C103 * C1870 +
                                 C90 * C2098 + C105 * C1876 + C91 * C2104) *
                                    C139465) *
                                   C139480 * C139426 -
                               ((C105 * C190 + C91 * C363 + C103 * C189 +
                                 C90 * C362 + C101 * C188 + C89 * C361) *
                                    C139465 +
                                (C105 * C109 + C91 * C115 + C103 * C108 +
                                 C90 * C114 + C101 * C107 + C89 * C113) *
                                    C186) *
                                   C139480 * C9304) *
                                  C139346 * C5152 +
                              (((C101 * C108 + C89 * C114 + C103 * C109 +
                                 C90 * C115 + C105 * C110 + C91 * C116) *
                                    C186 +
                                (C101 * C189 + C89 * C362 + C103 * C190 +
                                 C90 * C363 + C105 * C191 + C91 * C364) *
                                    C139465) *
                                   C139480 * C9304 -
                               ((C105 * C3496 + C91 * C3660 + C103 * C1876 +
                                 C90 * C2104 + C101 * C1870 + C89 * C2098) *
                                    C139465 +
                                (C105 * C3416 + C91 * C3417 + C103 * C1766 +
                                 C90 * C1774 + C101 * C1760 + C89 * C1768) *
                                    C186) *
                                   C139480 * C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
            C91 * C114) *
               C186 +
           (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 + C105 * C189 +
            C91 * C362) *
               C139465) *
              C139480 * C10614 -
          ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
            C101 * C1872 + C89 * C2100) *
               C139465 +
           (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
            C101 * C1762 + C89 * C1770) *
               C186) *
              C139480 * C10615 +
          ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
            C105 * C1765 + C91 * C1773) *
               C186 +
           (C101 * C1873 + C89 * C2101 + C103 * C1874 + C90 * C2102 +
            C105 * C1875 + C91 * C2103) *
               C139465) *
              C139480 * C10616 -
          ((C105 * C10680 + C91 * C10792 + C103 * C10681 + C90 * C10793 +
            C101 * C10682 + C89 * C10794) *
               C139465 +
           (C105 * C10618 + C91 * C10621 + C103 * C10619 + C90 * C10622 +
            C101 * C10620 + C89 * C10623) *
               C186) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C9304 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C139426) *
              C822 +
          (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
            C4630 * C90 + C4631 * C91) *
               C139480 * C139426 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C9304) *
              C823 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 +
            C1282 * C90 + C1283 * C91) *
               C139480 * C9304 -
           ((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C91 +
            (C416 * C8591 + C8918 + C8918 + C139465 * C8914) * C90 +
            (C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C89) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C9304 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C139426) *
              C139346 * C5151 +
          ((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139426 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C9304) *
              C139346 * C5152 +
          ((C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C9304 -
           ((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C91 +
            C3742 * C90 + C2213 * C89) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
           C447 * C91) *
              C139480 * C10614 -
          (C2213 * C91 + C2214 * C90 +
           (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
              C139480 * C10615 +
          ((C416 * C1763 + C2196 + C2196 + C139465 * C2183) * C89 +
           C2215 * C90 + C2216 * C91) *
              C139480 * C10616 -
          ((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C91 +
           (C416 * C10619 + C10850 + C10850 + C139465 * C10846) * C90 +
           (C416 * C10620 + C10851 + C10851 + C139465 * C10847) * C89) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C9304 -
           (C3818 * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C139426) *
              C822 +
          ((((C273 * C4159 + C139480 * C4393) * C186 +
             (C273 * C4275 + C139480 * C4729) * C139465) *
                C89 +
            (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
               C139426 -
           (C3097 * C91 + (C1383 + C1371) * C90 +
            ((C273 * C939 + C139480 * C1359) * C139465 +
             (C273 * C829 + C139480 * C1053) * C186) *
                C89) *
               C9304) *
              C823 +
          ((((C273 * C830 + C139480 * C1054) * C186 +
             (C273 * C940 + C139480 * C1360) * C139465) *
                C89 +
            (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
               C9304 -
           (((C273 * C8676 + C139480 * C8993) * C139465 +
             (C273 * C8590 + C139480 * C8756) * C186) *
                C91 +
            ((C273 * C8677 + C139480 * C8994) * C139465 +
             (C273 * C8591 + C139480 * C8757) * C186) *
                C90 +
            ((C273 * C8678 + C139480 * C8995) * C139465 +
             (C273 * C8592 + C139480 * C8758) * C186) *
                C89) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C9304 -
           (C3818 * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C139426) *
              C139346 * C5151 +
          (((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
            (C3819 + C3823) * C91) *
               C139426 -
           (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C9304) *
              C139346 * C5152 +
          ((C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) * C9304 -
           (((C273 * C3496 + C139480 * C3816) * C139465 +
             (C273 * C3416 + C139480 * C3578) * C186) *
                C91 +
            (C3823 + C3819) * C90 + C3818 * C89) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C186 +
            (C273 * C187 + C139480 * C499) * C139465) *
               C89 +
           (C506 + C522) * C90 + C526 * C91) *
              C10614 -
          (C3818 * C91 + (C2316 + C2304) * C90 +
           ((C273 * C1872 + C139480 * C2292) * C139465 +
            (C273 * C1762 + C139480 * C1986) * C186) *
               C89) *
              C10615 +
          (((C273 * C1763 + C139480 * C1987) * C186 +
            (C273 * C1873 + C139480 * C2293) * C139465) *
               C89 +
           (C2305 + C2317) * C90 + (C2308 + C2318) * C91) *
              C10616 -
          (((C273 * C10680 + C139480 * C10901) * C139465 +
            (C273 * C10618 + C139480 * C10736) * C186) *
               C91 +
           ((C273 * C10681 + C139480 * C10902) * C139465 +
            (C273 * C10619 + C139480 * C10737) * C186) *
               C90 +
           ((C273 * C10682 + C139480 * C10903) * C139465 +
            (C273 * C10620 + C139480 * C10738) * C186) *
               C89) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
             C91 * C114) *
                C273 +
            (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 + C105 * C276 +
             C91 * C579) *
                C139480) *
               C139465 * C9304 -
           ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
             C101 * C1986 + C89 * C2394) *
                C139480 +
            (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
             C101 * C1762 + C89 * C1770) *
                C273) *
               C139465 * C139426) *
              C822 +
          (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
             C105 * C4161 + C91 * C4165) *
                C273 +
            (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
             C105 * C4395 + C91 * C4843) *
                C139480) *
               C139465 * C139426 -
           ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
             C101 * C1053 + C89 * C1461) *
                C139480 +
            (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 + C101 * C829 +
             C89 * C837) *
                C273) *
               C139465 * C9304) *
              C823 +
          (((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 + C105 * C832 +
             C91 * C840) *
                C273 +
            (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
             C105 * C1056 + C91 * C1464) *
                C139480) *
               C139465 * C9304 -
           ((C105 * C8756 + C91 * C9070 + C103 * C8757 + C90 * C9071 +
             C101 * C8758 + C89 * C9072) *
                C139480 +
            (C105 * C8590 + C91 * C8593 + C103 * C8591 + C90 * C8594 +
             C101 * C8592 + C89 * C8595) *
                C273) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C106 + C89 * C112 + C103 * C107 +
                                 C90 * C113 + C105 * C108 + C91 * C114) *
                                    C273 +
                                (C101 * C274 + C89 * C577 + C103 * C275 +
                                 C90 * C578 + C105 * C276 + C91 * C579) *
                                    C139480) *
                                   C139465 * C9304 -
                               ((C105 * C1984 + C91 * C2392 + C103 * C1985 +
                                 C90 * C2393 + C101 * C1986 + C89 * C2394) *
                                    C139480 +
                                (C105 * C1760 + C91 * C1768 + C103 * C1761 +
                                 C90 * C1769 + C101 * C1762 + C89 * C1770) *
                                    C273) *
                                   C139465 * C139426) *
                                  C139346 * C5151 +
                              (((C101 * C1761 + C89 * C1769 + C103 * C1760 +
                                 C90 * C1768 + C105 * C1766 + C91 * C1774) *
                                    C273 +
                                (C101 * C1985 + C89 * C2393 + C103 * C1984 +
                                 C90 * C2392 + C105 * C1990 + C91 * C2398) *
                                    C139480) *
                                   C139465 * C139426 -
                               ((C105 * C277 + C91 * C580 + C103 * C276 +
                                 C90 * C579 + C101 * C275 + C89 * C578) *
                                    C139480 +
                                (C105 * C109 + C91 * C115 + C103 * C108 +
                                 C90 * C114 + C101 * C107 + C89 * C113) *
                                    C273) *
                                   C139465 * C9304) *
                                  C139346 * C5152 +
                              (((C101 * C108 + C89 * C114 + C103 * C109 +
                                 C90 * C115 + C105 * C110 + C91 * C116) *
                                    C273 +
                                (C101 * C276 + C89 * C579 + C103 * C277 +
                                 C90 * C580 + C105 * C278 + C91 * C581) *
                                    C139480) *
                                   C139465 * C9304 -
                               ((C105 * C3578 + C91 * C3897 + C103 * C1990 +
                                 C90 * C2398 + C101 * C1984 + C89 * C2392) *
                                    C139480 +
                                (C105 * C3416 + C91 * C3417 + C103 * C1766 +
                                 C90 * C1774 + C101 * C1760 + C89 * C1768) *
                                    C273) *
                                   C139465 * C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 + C105 * C108 +
            C91 * C114) *
               C273 +
           (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 + C105 * C276 +
            C91 * C579) *
               C139480) *
              C139465 * C10614 -
          ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
            C101 * C1986 + C89 * C2394) *
               C139480 +
           (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
            C101 * C1762 + C89 * C1770) *
               C273) *
              C139465 * C10615 +
          ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
            C105 * C1765 + C91 * C1773) *
               C273 +
           (C101 * C1987 + C89 * C2395 + C103 * C1988 + C90 * C2396 +
            C105 * C1989 + C91 * C2397) *
               C139480) *
              C139465 * C10616 -
          ((C105 * C10736 + C91 * C10954 + C103 * C10737 + C90 * C10955 +
            C101 * C10738 + C89 * C10956) *
               C139480 +
           (C105 * C10618 + C91 * C10621 + C103 * C10619 + C90 * C10622 +
            C101 * C10620 + C89 * C10623) *
               C273) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C9304 -
           (C3974 * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C139426) *
              C822 +
          ((((C186 * C4159 + C139465 * C4275) * C273 +
             (C186 * C4393 + C139465 * C4943) * C139480) *
                C89 +
            (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
               C139426 -
           (C3253 * C91 + (C1567 + C1555) * C90 +
            ((C186 * C1053 + C139465 * C1543) * C139480 +
             (C186 * C829 + C139465 * C939) * C273) *
                C89) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C273 +
             (C186 * C1054 + C139465 * C1544) * C139480) *
                C89 +
            (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
               C9304 -
           (((C186 * C8756 + C139465 * C9147) * C139480 +
             (C186 * C8590 + C139465 * C8676) * C273) *
                C91 +
            ((C186 * C8757 + C139465 * C9148) * C139480 +
             (C186 * C8591 + C139465 * C8677) * C273) *
                C90 +
            ((C186 * C8758 + C139465 * C9149) * C139480 +
             (C186 * C8592 + C139465 * C8678) * C273) *
                C89) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C9304 -
           (C3974 * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C139426) *
              C139346 * C5151 +
          (((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
            (C3975 + C3979) * C91) *
               C139426 -
           (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C9304) *
              C139346 * C5152 +
          ((C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) * C9304 -
           (((C186 * C3578 + C139465 * C3972) * C139480 +
             (C186 * C3416 + C139465 * C3496) * C273) *
                C91 +
            (C3979 + C3975) * C90 + C3974 * C89) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C273 +
            (C186 * C274 + C139465 * C633) * C139480) *
               C89 +
           (C640 + C656) * C90 + C660 * C91) *
              C10614 -
          (C3974 * C91 + (C2500 + C2488) * C90 +
           ((C186 * C1986 + C139465 * C2476) * C139480 +
            (C186 * C1762 + C139465 * C1872) * C273) *
               C89) *
              C10615 +
          (((C186 * C1763 + C139465 * C1873) * C273 +
            (C186 * C1987 + C139465 * C2477) * C139480) *
               C89 +
           (C2489 + C2501) * C90 + (C2492 + C2502) * C91) *
              C10616 -
          (((C186 * C10736 + C139465 * C11007) * C139480 +
            (C186 * C10618 + C139465 * C10680) * C273) *
               C91 +
           ((C186 * C10737 + C139465 * C11008) * C139480 +
            (C186 * C10619 + C139465 * C10681) * C273) *
               C90 +
           ((C186 * C10738 + C139465 * C11009) * C139480 +
            (C186 * C10620 + C139465 * C10682) * C273) *
               C89) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C9304 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139426) *
              C822 +
          (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
            C5074 * C90 + C5075 * C91) *
               C139426 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C9304) *
              C823 +
          (((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
            C1682 * C90 + C1683 * C91) *
               C9304 -
           ((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139465 * C91 +
            (C711 * C8591 + C9229 + C9229 + C139480 * C9225) * C139465 * C90 +
            (C711 * C8592 + C9230 + C9230 + C139480 * C9226) * C139465 * C89) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C9304 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139426) *
              C139346 * C5151 +
          ((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139426 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C9304) *
              C139346 * C5152 +
          ((C746 * C89 + C747 * C90 + C748 * C91) * C9304 -
           ((C711 * C3416 + C4057 + C4057 + C139480 * C4053) * C139465 * C91 +
            C4061 * C90 + C2613 * C89) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
           C745 * C90 + C746 * C91) *
              C10614 -
          (C2613 * C91 + C2614 * C90 +
           (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
              C10615 +
          ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C139465 * C89 +
           C2615 * C90 + C2616 * C91) *
              C10616 -
          ((C711 * C10618 + C11064 + C11064 + C139480 * C11060) * C139465 *
               C91 +
           (C711 * C10619 + C11065 + C11065 + C139480 * C11061) * C139465 *
               C90 +
           (C711 * C10620 + C11066 + C11066 + C139480 * C11062) * C139465 *
               C89) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C139562 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139563 +
           (C100 * C1763 + C1788 + C1788 + C89 * C1779 + C102 * C1764 + C1789 +
            C1789 + C90 * C1780 + C104 * C1765 + C1790 + C1790 + C91 * C1781) *
               C139480 * C139465 * C12024) *
              C139346 * C139521 +
          ((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
            C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
               C139480 * C139465 * C139563 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C139562 -
           (C104 * C1767 + C1794 + C1794 + C91 * C1783 + C102 * C1765 + C1795 +
            C1795 + C90 * C1781 + C100 * C1764 + C1796 + C1796 + C89 * C1780) *
               C139480 * C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C139562 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139563 +
                     ((C186 * C1763 + C139465 * C1873) * C101 +
                      (C186 * C1771 + C139465 * C1881) * C89 + C1907 * C103 +
                      C1908 * C90 + C1909 * C105 + C1910 * C91) *
                         C139480 * C12024) *
                        C139346 * C139521 +
                    ((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                      C3503 * C105 + C3504 * C91) *
                         C139480 * C139563 -
                     (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                      C217 * C89 + C216 * C101) *
                         C139480 * C139562 -
                     ((C186 * C1775 + C139465 * C1885) * C91 +
                      (C186 * C1767 + C139465 * C1877) * C105 + C1910 * C90 +
                      C1909 * C103 + C1908 * C89 + C1907 * C101) *
                         C139480 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C139562 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139563 +
                     ((C273 * C1763 + C139480 * C1987) * C101 +
                      (C273 * C1771 + C139480 * C1995) * C89 + C2021 * C103 +
                      C2022 * C90 + C2023 * C105 + C2024 * C91) *
                         C139465 * C12024) *
                        C139346 * C139521 +
                    ((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                      C3585 * C105 + C3586 * C91) *
                         C139465 * C139563 -
                     (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                      C304 * C89 + C303 * C101) *
                         C139465 * C139562 -
                     ((C273 * C1775 + C139480 * C1999) * C91 +
                      (C273 * C1767 + C139480 * C1991) * C105 + C2024 * C90 +
                      C2023 * C103 + C2022 * C89 + C2021 * C101) *
                         C139465 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C186 +
                      (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                       C105 * C189 + C91 * C362) *
                          C139465) *
                         C139480 * C139562 -
                     ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                       C101 * C1872 + C89 * C2100) *
                          C139465 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C186) *
                         C139480 * C139563 +
                     ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
                       C105 * C1765 + C91 * C1773) *
                          C186 +
                      (C101 * C1873 + C89 * C2101 + C103 * C1874 + C90 * C2102 +
                       C105 * C1875 + C91 * C2103) *
                          C139465) *
                         C139480 * C12024) *
                        C139346 * C139521 +
                    (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C186 +
                      (C101 * C1871 + C89 * C2099 + C103 * C1870 + C90 * C2098 +
                       C105 * C1876 + C91 * C2104) *
                          C139465) *
                         C139480 * C139563 -
                     ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                       C101 * C188 + C89 * C361) *
                          C139465 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C186) *
                         C139480 * C139562 -
                     ((C105 * C1877 + C91 * C2105 + C103 * C1875 + C90 * C2103 +
                       C101 * C1874 + C89 * C2102) *
                          C139465 +
                      (C105 * C1767 + C91 * C1775 + C103 * C1765 + C90 * C1773 +
                       C101 * C1764 + C89 * C1772) *
                          C186) *
                         C139480 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C139562 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C139563 +
           ((C416 * C1763 + C2196 + C2196 + C139465 * C2183) * C89 +
            C2215 * C90 + C2216 * C91) *
               C139480 * C12024) *
              C139346 * C139521 +
          ((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139563 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C139562 -
           ((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C91 +
            C2216 * C90 + C2215 * C89) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C139562 -
           (C3818 * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C139563 +
           (((C273 * C1763 + C139480 * C1987) * C186 +
             (C273 * C1873 + C139480 * C2293) * C139465) *
                C89 +
            (C2305 + C2317) * C90 + (C2308 + C2318) * C91) *
               C12024) *
              C139346 * C139521 +
          (((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
            (C3819 + C3823) * C91) *
               C139563 -
           (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C139562 -
           (((C273 * C1877 + C139480 * C2297) * C139465 +
             (C273 * C1767 + C139480 * C1991) * C186) *
                C91 +
            (C2318 + C2308) * C90 + (C2317 + C2305) * C89) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C273 +
                      (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                       C105 * C276 + C91 * C579) *
                          C139480) *
                         C139465 * C139562 -
                     ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                       C101 * C1986 + C89 * C2394) *
                          C139480 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C273) *
                         C139465 * C139563 +
                     ((C101 * C1763 + C89 * C1771 + C103 * C1764 + C90 * C1772 +
                       C105 * C1765 + C91 * C1773) *
                          C273 +
                      (C101 * C1987 + C89 * C2395 + C103 * C1988 + C90 * C2396 +
                       C105 * C1989 + C91 * C2397) *
                          C139480) *
                         C139465 * C12024) *
                        C139346 * C139521 +
                    (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C273 +
                      (C101 * C1985 + C89 * C2393 + C103 * C1984 + C90 * C2392 +
                       C105 * C1990 + C91 * C2398) *
                          C139480) *
                         C139465 * C139563 -
                     ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                       C101 * C275 + C89 * C578) *
                          C139480 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C273) *
                         C139465 * C139562 -
                     ((C105 * C1991 + C91 * C2399 + C103 * C1989 + C90 * C2397 +
                       C101 * C1988 + C89 * C2396) *
                          C139480 +
                      (C105 * C1767 + C91 * C1775 + C103 * C1765 + C90 * C1773 +
                       C101 * C1764 + C89 * C1772) *
                          C273) *
                         C139465 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C139562 -
           (C3974 * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C139563 +
           (((C186 * C1763 + C139465 * C1873) * C273 +
             (C186 * C1987 + C139465 * C2477) * C139480) *
                C89 +
            (C2489 + C2501) * C90 + (C2492 + C2502) * C91) *
               C12024) *
              C139346 * C139521 +
          (((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
            (C3975 + C3979) * C91) *
               C139563 -
           (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C139562 -
           (((C186 * C1991 + C139465 * C2481) * C139480 +
             (C186 * C1767 + C139465 * C1877) * C273) *
                C91 +
            (C2502 + C2492) * C90 + (C2501 + C2489) * C89) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C139562 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139563 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C139465 * C89 +
            C2615 * C90 + C2616 * C91) *
               C12024) *
              C139346 * C139521 +
          ((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139563 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C139562 -
           ((C711 * C1767 + C2600 + C2600 + C139480 * C2583) * C139465 * C91 +
            C2616 * C90 + C2615 * C89) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C9304 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139426) *
              C139346 * C5151 +
          ((C100 * C1761 + C1791 + C1791 + C89 * C1777 + C102 * C1760 + C1792 +
            C1792 + C90 * C1776 + C104 * C1766 + C1793 + C1793 + C91 * C1782) *
               C139480 * C139465 * C139426 -
           (C104 * C109 + C128 + C128 + C91 * C121 + C102 * C108 + C129 + C129 +
            C90 * C120 + C100 * C107 + C130 + C130 + C89 * C119) *
               C139480 * C139465 * C9304) *
              C139346 * C5152 +
          ((C100 * C108 + C131 + C131 + C89 * C120 + C102 * C109 + C132 + C132 +
            C90 * C121 + C104 * C110 + C133 + C133 + C91 * C122) *
               C139480 * C139465 * C9304 -
           (C104 * C3416 + C3420 + C3420 + C91 * C3418 + C102 * C1766 + C3421 +
            C3421 + C90 * C1782 + C100 * C1760 + C3422 + C3422 + C89 * C1776) *
               C139480 * C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C106 + C125 + C125 + C89 * C118 + C102 * C107 + C126 + C126 +
            C90 * C119 + C104 * C108 + C127 + C127 + C91 * C120) *
               C139480 * C139465 * C9304 -
           (C104 * C1760 + C1785 + C1785 + C91 * C1776 + C102 * C1761 + C1786 +
            C1786 + C90 * C1777 + C100 * C1762 + C1787 + C1787 + C89 * C1778) *
               C139480 * C139465 * C139426) *
              C822 +
          ((C100 * C4159 + C4172 + C4172 + C89 * C4167 + C102 * C4160 + C4173 +
            C4173 + C90 * C4168 + C104 * C4161 + C4174 + C4174 + C91 * C4169) *
               C139480 * C139465 * C139426 -
           (C104 * C827 + C852 + C852 + C91 * C843 + C102 * C828 + C853 + C853 +
            C90 * C844 + C100 * C829 + C854 + C854 + C89 * C845) *
               C139480 * C139465 * C9304) *
              C823 +
          ((C100 * C830 + C855 + C855 + C89 * C846 + C102 * C831 + C856 + C856 +
            C90 * C847 + C104 * C832 + C857 + C857 + C91 * C848) *
               C139480 * C139465 * C9304 -
           (C104 * C8590 + C8600 + C8600 + C91 * C8596 + C102 * C8591 + C8601 +
            C8601 + C90 * C8597 + C100 * C8592 + C8602 + C8602 + C89 * C8598) *
               C139480 * C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C9304 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139426) *
                        C139346 * C5151 +
                    ((C1906 * C101 + C1905 * C89 + C1904 * C103 + C1903 * C90 +
                      C3503 * C105 + C3504 * C91) *
                         C139480 * C139426 -
                     (C220 * C91 + C221 * C105 + C219 * C90 + C218 * C103 +
                      C217 * C89 + C216 * C101) *
                         C139480 * C9304) *
                        C139346 * C5152 +
                    ((C218 * C101 + C219 * C89 + C221 * C103 + C220 * C90 +
                      C222 * C105 + C223 * C91) *
                         C139480 * C9304 -
                     ((C186 * C3417 + C139465 * C3497) * C91 +
                      (C186 * C3416 + C139465 * C3496) * C105 + C3504 * C90 +
                      C3503 * C103 + C1903 * C89 + C1904 * C101) *
                         C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C101 +
                      (C186 * C112 + C139465 * C193) * C89 + C216 * C103 +
                      C217 * C90 + C218 * C105 + C219 * C91) *
                         C139480 * C9304 -
                     (C1903 * C91 + C1904 * C105 + C1905 * C90 + C1906 * C103 +
                      (C186 * C1770 + C139465 * C1880) * C89 +
                      (C186 * C1762 + C139465 * C1872) * C101) *
                         C139480 * C139426) *
                        C822 +
                    (((C186 * C4159 + C139465 * C4275) * C101 +
                      (C186 * C4163 + C139465 * C4279) * C89 + C4292 * C103 +
                      C4293 * C90 + C4294 * C105 + C4295 * C91) *
                         C139480 * C139426 -
                     (C970 * C91 + C971 * C105 + C972 * C90 + C973 * C103 +
                      (C186 * C837 + C139465 * C947) * C89 +
                      (C186 * C829 + C139465 * C939) * C101) *
                         C139480 * C9304) *
                        C823 +
                    (((C186 * C830 + C139465 * C940) * C101 +
                      (C186 * C838 + C139465 * C948) * C89 + C974 * C103 +
                      C975 * C90 + C976 * C105 + C977 * C91) *
                         C139480 * C9304 -
                     ((C186 * C8593 + C139465 * C8679) * C91 +
                      (C186 * C8590 + C139465 * C8676) * C105 +
                      (C186 * C8594 + C139465 * C8680) * C90 +
                      (C186 * C8591 + C139465 * C8677) * C103 +
                      (C186 * C8595 + C139465 * C8681) * C89 +
                      (C186 * C8592 + C139465 * C8678) * C101) *
                         C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C9304 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139426) *
                        C139346 * C5151 +
                    ((C2020 * C101 + C2019 * C89 + C2018 * C103 + C2017 * C90 +
                      C3585 * C105 + C3586 * C91) *
                         C139465 * C139426 -
                     (C307 * C91 + C308 * C105 + C306 * C90 + C305 * C103 +
                      C304 * C89 + C303 * C101) *
                         C139465 * C9304) *
                        C139346 * C5152 +
                    ((C305 * C101 + C306 * C89 + C308 * C103 + C307 * C90 +
                      C309 * C105 + C310 * C91) *
                         C139465 * C9304 -
                     ((C273 * C3417 + C139480 * C3579) * C91 +
                      (C273 * C3416 + C139480 * C3578) * C105 + C3586 * C90 +
                      C3585 * C103 + C2017 * C89 + C2018 * C101) *
                         C139465 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C101 +
                      (C273 * C112 + C139480 * C280) * C89 + C303 * C103 +
                      C304 * C90 + C305 * C105 + C306 * C91) *
                         C139465 * C9304 -
                     (C2017 * C91 + C2018 * C105 + C2019 * C90 + C2020 * C103 +
                      (C273 * C1770 + C139480 * C1994) * C89 +
                      (C273 * C1762 + C139480 * C1986) * C101) *
                         C139465 * C139426) *
                        C822 +
                    (((C273 * C4159 + C139480 * C4393) * C101 +
                      (C273 * C4163 + C139480 * C4397) * C89 + C4410 * C103 +
                      C4411 * C90 + C4412 * C105 + C4413 * C91) *
                         C139465 * C139426 -
                     (C1084 * C91 + C1085 * C105 + C1086 * C90 + C1087 * C103 +
                      (C273 * C837 + C139480 * C1061) * C89 +
                      (C273 * C829 + C139480 * C1053) * C101) *
                         C139465 * C9304) *
                        C823 +
                    (((C273 * C830 + C139480 * C1054) * C101 +
                      (C273 * C838 + C139480 * C1062) * C89 + C1088 * C103 +
                      C1089 * C90 + C1090 * C105 + C1091 * C91) *
                         C139465 * C9304 -
                     ((C273 * C8593 + C139480 * C8759) * C91 +
                      (C273 * C8590 + C139480 * C8756) * C105 +
                      (C273 * C8594 + C139480 * C8760) * C90 +
                      (C273 * C8591 + C139480 * C8757) * C103 +
                      (C273 * C8595 + C139480 * C8761) * C89 +
                      (C273 * C8592 + C139480 * C8758) * C101) *
                         C139465 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C186 +
                      (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                       C105 * C189 + C91 * C362) *
                          C139465) *
                         C139480 * C9304 -
                     ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                       C101 * C1872 + C89 * C2100) *
                          C139465 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C186) *
                         C139480 * C139426) *
                        C139346 * C5151 +
                    (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C186 +
                      (C101 * C1871 + C89 * C2099 + C103 * C1870 + C90 * C2098 +
                       C105 * C1876 + C91 * C2104) *
                          C139465) *
                         C139480 * C139426 -
                     ((C105 * C190 + C91 * C363 + C103 * C189 + C90 * C362 +
                       C101 * C188 + C89 * C361) *
                          C139465 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C186) *
                         C139480 * C9304) *
                        C139346 * C5152 +
                    (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                       C105 * C110 + C91 * C116) *
                          C186 +
                      (C101 * C189 + C89 * C362 + C103 * C190 + C90 * C363 +
                       C105 * C191 + C91 * C364) *
                          C139465) *
                         C139480 * C9304 -
                     ((C105 * C3496 + C91 * C3660 + C103 * C1876 + C90 * C2104 +
                       C101 * C1870 + C89 * C2098) *
                          C139465 +
                      (C105 * C3416 + C91 * C3417 + C103 * C1766 + C90 * C1774 +
                       C101 * C1760 + C89 * C1768) *
                          C186) *
                         C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C186 +
                      (C101 * C187 + C89 * C360 + C103 * C188 + C90 * C361 +
                       C105 * C189 + C91 * C362) *
                          C139465) *
                         C139480 * C9304 -
                     ((C105 * C1870 + C91 * C2098 + C103 * C1871 + C90 * C2099 +
                       C101 * C1872 + C89 * C2100) *
                          C139465 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C186) *
                         C139480 * C139426) *
                        C822 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C186 +
                      (C101 * C4275 + C89 * C4511 + C103 * C4276 + C90 * C4512 +
                       C105 * C4277 + C91 * C4513) *
                          C139465) *
                         C139480 * C139426 -
                     ((C105 * C937 + C91 * C1165 + C103 * C938 + C90 * C1166 +
                       C101 * C939 + C89 * C1167) *
                          C139465 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C186) *
                         C139480 * C9304) *
                        C823 +
                    (((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                       C105 * C832 + C91 * C840) *
                          C186 +
                      (C101 * C940 + C89 * C1168 + C103 * C941 + C90 * C1169 +
                       C105 * C942 + C91 * C1170) *
                          C139465) *
                         C139480 * C9304 -
                     ((C105 * C8676 + C91 * C8836 + C103 * C8677 + C90 * C8837 +
                       C101 * C8678 + C89 * C8838) *
                          C139465 +
                      (C105 * C8590 + C91 * C8593 + C103 * C8591 + C90 * C8594 +
                       C101 * C8592 + C89 * C8595) *
                          C186) *
                         C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C9304 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C139426) *
              C139346 * C5151 +
          ((C2214 * C89 + C2213 * C90 + C3742 * C91) * C139480 * C139426 -
           (C448 * C91 + C447 * C90 + C446 * C89) * C139480 * C9304) *
              C139346 * C5152 +
          ((C447 * C89 + C448 * C90 + C449 * C91) * C139480 * C9304 -
           ((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C91 +
            C3742 * C90 + C2213 * C89) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C89 + C446 * C90 +
            C447 * C91) *
               C139480 * C9304 -
           (C2213 * C91 + C2214 * C90 +
            (C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C89) *
               C139480 * C139426) *
              C822 +
          (((C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C89 +
            C4630 * C90 + C4631 * C91) *
               C139480 * C139426 -
           (C1280 * C91 + C1281 * C90 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C89) *
               C139480 * C9304) *
              C823 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C89 +
            C1282 * C90 + C1283 * C91) *
               C139480 * C9304 -
           ((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C91 +
            (C416 * C8591 + C8918 + C8918 + C139465 * C8914) * C90 +
            (C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C89) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C9304 -
           (C3818 * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C139426) *
              C139346 * C5151 +
          (((C2304 + C2316) * C89 + (C2301 + C2315) * C90 +
            (C3819 + C3823) * C91) *
               C139426 -
           (C527 * C91 + (C523 + C509) * C90 + (C522 + C506) * C89) * C9304) *
              C139346 * C5152 +
          ((C526 * C89 + (C514 + C524) * C90 + (C515 + C525) * C91) * C9304 -
           (((C273 * C3496 + C139480 * C3816) * C139465 +
             (C273 * C3416 + C139480 * C3578) * C186) *
                C91 +
            (C3823 + C3819) * C90 + C3818 * C89) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C186 +
             (C273 * C187 + C139480 * C499) * C139465) *
                C89 +
            (C506 + C522) * C90 + C526 * C91) *
               C9304 -
           (C3818 * C91 + (C2316 + C2304) * C90 +
            ((C273 * C1872 + C139480 * C2292) * C139465 +
             (C273 * C1762 + C139480 * C1986) * C186) *
                C89) *
               C139426) *
              C822 +
          ((((C273 * C4159 + C139480 * C4393) * C186 +
             (C273 * C4275 + C139480 * C4729) * C139465) *
                C89 +
            (C4734 + C4742) * C90 + (C4737 + C4743) * C91) *
               C139426 -
           (C3097 * C91 + (C1383 + C1371) * C90 +
            ((C273 * C939 + C139480 * C1359) * C139465 +
             (C273 * C829 + C139480 * C1053) * C186) *
                C89) *
               C9304) *
              C823 +
          ((((C273 * C830 + C139480 * C1054) * C186 +
             (C273 * C940 + C139480 * C1360) * C139465) *
                C89 +
            (C1372 + C1384) * C90 + (C1375 + C1385) * C91) *
               C9304 -
           (((C273 * C8676 + C139480 * C8993) * C139465 +
             (C273 * C8590 + C139480 * C8756) * C186) *
                C91 +
            ((C273 * C8677 + C139480 * C8994) * C139465 +
             (C273 * C8591 + C139480 * C8757) * C186) *
                C90 +
            ((C273 * C8678 + C139480 * C8995) * C139465 +
             (C273 * C8592 + C139480 * C8758) * C186) *
                C89) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C273 +
                      (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                       C105 * C276 + C91 * C579) *
                          C139480) *
                         C139465 * C9304 -
                     ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                       C101 * C1986 + C89 * C2394) *
                          C139480 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C273) *
                         C139465 * C139426) *
                        C139346 * C5151 +
                    (((C101 * C1761 + C89 * C1769 + C103 * C1760 + C90 * C1768 +
                       C105 * C1766 + C91 * C1774) *
                          C273 +
                      (C101 * C1985 + C89 * C2393 + C103 * C1984 + C90 * C2392 +
                       C105 * C1990 + C91 * C2398) *
                          C139480) *
                         C139465 * C139426 -
                     ((C105 * C277 + C91 * C580 + C103 * C276 + C90 * C579 +
                       C101 * C275 + C89 * C578) *
                          C139480 +
                      (C105 * C109 + C91 * C115 + C103 * C108 + C90 * C114 +
                       C101 * C107 + C89 * C113) *
                          C273) *
                         C139465 * C9304) *
                        C139346 * C5152 +
                    (((C101 * C108 + C89 * C114 + C103 * C109 + C90 * C115 +
                       C105 * C110 + C91 * C116) *
                          C273 +
                      (C101 * C276 + C89 * C579 + C103 * C277 + C90 * C580 +
                       C105 * C278 + C91 * C581) *
                          C139480) *
                         C139465 * C9304 -
                     ((C105 * C3578 + C91 * C3897 + C103 * C1990 + C90 * C2398 +
                       C101 * C1984 + C89 * C2392) *
                          C139480 +
                      (C105 * C3416 + C91 * C3417 + C103 * C1766 + C90 * C1774 +
                       C101 * C1760 + C89 * C1768) *
                          C273) *
                         C139465 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C101 * C106 + C89 * C112 + C103 * C107 + C90 * C113 +
                       C105 * C108 + C91 * C114) *
                          C273 +
                      (C101 * C274 + C89 * C577 + C103 * C275 + C90 * C578 +
                       C105 * C276 + C91 * C579) *
                          C139480) *
                         C139465 * C9304 -
                     ((C105 * C1984 + C91 * C2392 + C103 * C1985 + C90 * C2393 +
                       C101 * C1986 + C89 * C2394) *
                          C139480 +
                      (C105 * C1760 + C91 * C1768 + C103 * C1761 + C90 * C1769 +
                       C101 * C1762 + C89 * C1770) *
                          C273) *
                         C139465 * C139426) *
                        C822 +
                    (((C101 * C4159 + C89 * C4163 + C103 * C4160 + C90 * C4164 +
                       C105 * C4161 + C91 * C4165) *
                          C273 +
                      (C101 * C4393 + C89 * C4841 + C103 * C4394 + C90 * C4842 +
                       C105 * C4395 + C91 * C4843) *
                          C139480) *
                         C139465 * C139426 -
                     ((C105 * C1051 + C91 * C1459 + C103 * C1052 + C90 * C1460 +
                       C101 * C1053 + C89 * C1461) *
                          C139480 +
                      (C105 * C827 + C91 * C835 + C103 * C828 + C90 * C836 +
                       C101 * C829 + C89 * C837) *
                          C273) *
                         C139465 * C9304) *
                        C823 +
                    (((C101 * C830 + C89 * C838 + C103 * C831 + C90 * C839 +
                       C105 * C832 + C91 * C840) *
                          C273 +
                      (C101 * C1054 + C89 * C1462 + C103 * C1055 + C90 * C1463 +
                       C105 * C1056 + C91 * C1464) *
                          C139480) *
                         C139465 * C9304 -
                     ((C105 * C8756 + C91 * C9070 + C103 * C8757 + C90 * C9071 +
                       C101 * C8758 + C89 * C9072) *
                          C139480 +
                      (C105 * C8590 + C91 * C8593 + C103 * C8591 + C90 * C8594 +
                       C101 * C8592 + C89 * C8595) *
                          C273) *
                         C139465 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C9304 -
           (C3974 * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C139426) *
              C139346 * C5151 +
          (((C2488 + C2500) * C89 + (C2485 + C2499) * C90 +
            (C3975 + C3979) * C91) *
               C139426 -
           (C661 * C91 + (C657 + C643) * C90 + (C656 + C640) * C89) * C9304) *
              C139346 * C5152 +
          ((C660 * C89 + (C648 + C658) * C90 + (C649 + C659) * C91) * C9304 -
           (((C186 * C3578 + C139465 * C3972) * C139480 +
             (C186 * C3416 + C139465 * C3496) * C273) *
                C91 +
            (C3979 + C3975) * C90 + C3974 * C89) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C273 +
             (C186 * C274 + C139465 * C633) * C139480) *
                C89 +
            (C640 + C656) * C90 + C660 * C91) *
               C9304 -
           (C3974 * C91 + (C2500 + C2488) * C90 +
            ((C186 * C1986 + C139465 * C2476) * C139480 +
             (C186 * C1762 + C139465 * C1872) * C273) *
                C89) *
               C139426) *
              C822 +
          ((((C186 * C4159 + C139465 * C4275) * C273 +
             (C186 * C4393 + C139465 * C4943) * C139480) *
                C89 +
            (C4948 + C4956) * C90 + (C4951 + C4957) * C91) *
               C139426 -
           (C3253 * C91 + (C1567 + C1555) * C90 +
            ((C186 * C1053 + C139465 * C1543) * C139480 +
             (C186 * C829 + C139465 * C939) * C273) *
                C89) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C273 +
             (C186 * C1054 + C139465 * C1544) * C139480) *
                C89 +
            (C1556 + C1568) * C90 + (C1559 + C1569) * C91) *
               C9304 -
           (((C186 * C8756 + C139465 * C9147) * C139480 +
             (C186 * C8590 + C139465 * C8676) * C273) *
                C91 +
            ((C186 * C8757 + C139465 * C9148) * C139480 +
             (C186 * C8591 + C139465 * C8677) * C273) *
                C90 +
            ((C186 * C8758 + C139465 * C9149) * C139480 +
             (C186 * C8592 + C139465 * C8678) * C273) *
                C89) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C9304 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139426) *
              C139346 * C5151 +
          ((C2614 * C89 + C2613 * C90 + C4061 * C91) * C139426 -
           (C747 * C91 + C746 * C90 + C745 * C89) * C9304) *
              C139346 * C5152 +
          ((C746 * C89 + C747 * C90 + C748 * C91) * C9304 -
           ((C711 * C3416 + C4057 + C4057 + C139480 * C4053) * C139465 * C91 +
            C4061 * C90 + C2613 * C89) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C139465 * C89 +
            C745 * C90 + C746 * C91) *
               C9304 -
           (C2613 * C91 + C2614 * C90 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C139465 * C89) *
               C139426) *
              C822 +
          (((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139465 * C89 +
            C5074 * C90 + C5075 * C91) *
               C139426 -
           (C1680 * C91 + C1681 * C90 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139465 * C89) *
               C9304) *
              C823 +
          (((C711 * C830 + C1659 + C1659 + C139480 * C1646) * C139465 * C89 +
            C1682 * C90 + C1683 * C91) *
               C9304 -
           ((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139465 * C91 +
            (C711 * C8591 + C9229 + C9229 + C139480 * C9225) * C139465 * C90 +
            (C711 * C8592 + C9230 + C9230 + C139480 * C9226) * C139465 * C89) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139362 * C139529 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139362 * C139398) *
                        C139558 +
                    (((C14160 + C14161) * C139480 * C13351 +
                      (C14162 + C14163) * C139480 * C139555) *
                         C139362 * C139398 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139362 * C139529) *
                        C139559 +
                    (((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                       C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                          C139480 * C13351 +
                      (C16258 + C16259) * C139480 * C139555) *
                         C139362 * C139529 -
                     ((C13355 * C834 + C16252 + C16252 + C139544 * C850 +
                       C13353 * C832 + C16253 + C16253 + C13349 * C848) *
                          C139480 * C139555 +
                      (C16259 + C16258) * C139480 * C13351) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139362 * C139529 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139362 * C139398) *
              C139558 +
          (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
            (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
               C139480 * C139362 * C139398 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
            (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
               C139480 * C139362 * C139529 -
           ((C13440 * C842 + C139555 * C952 + C13439 * C841 + C13351 * C951) *
                C139544 +
            (C13440 * C834 + C139555 * C944 + C13439 * C833 + C13351 * C943) *
                C13356 +
            (C16369 + C16368) * C13349 + (C16367 + C16366) * C13354) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139362 * C139529 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C139362 * C139398) *
              C139558 +
          (((C14400 + C14401 + C14402 + C14403) * C13351 +
            (C14404 + C14405 + C14406 + C14407) * C139555) *
               C139362 * C139398 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139362 * C139529) *
              C139559 +
          (((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
                C13351 +
            (C16468 + C16469 + C16470 + C16471) * C139555) *
               C139362 * C139529 -
           (((C273 * C842 + C139480 * C1066) * C139544 +
             (C273 * C834 + C139480 * C1058) * C13356 + C1091 * C13349 +
             C1090 * C13354) *
                C139555 +
            (C16471 + C16470 + C16469 + C16468) * C13351) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139362 * C139529 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139362 * C139398) *
              C139558 +
          (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
            (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
               C139480 * C139362 * C139398 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C13439 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C13351 +
            (C16578 + C16579) * C13440 + (C16580 + C16581) * C139555) *
               C139480 * C139362 * C139529 -
           ((C13356 * C944 + C139544 * C1172 + C13354 * C942 + C13349 * C1170) *
                C139555 +
            (C13356 * C834 + C139544 * C842 + C13354 * C832 + C13349 * C840) *
                C13440 +
            (C16581 + C16580) * C13351 + (C16579 + C16578) * C13439) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139362 * C139529 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C139362 * C139398) *
              C139558 +
          (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
               C139480 * C139362 * C139398 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) *
               C139480 * C139362 * C139529 -
           ((C13676 * C834 + C16684 + C16684 + C139555 * C1254 + C13675 * C833 +
             C16685 + C16685 + C13351 * C1253) *
                C139544 +
            (C16691 + C16690) * C13349) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139362 * C139529 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C139362 * C139398) *
                        C139558 +
                    (((C14797 + C14796 + C14795 + C14794) * C13349 +
                      (C16790 + C16791 + C16792 + C16793) * C139544) *
                         C139362 * C139398 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C139362 * C139529) *
                        C139559 +
                    (((C13791 + C13790 + C13789 + C13788) * C13349 +
                      (C13792 + C13793 + C13794 + C13795) * C139544) *
                         C139362 * C139529 -
                     (((C273 * C944 + C139480 * C1364) * C139555 +
                       (C273 * C834 + C139480 * C1058) * C13440 +
                       C3101 * C13351 + C2864 * C13439) *
                          C139544 +
                      (C16793 + C16792 + C16791 + C16790) * C13349) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139362 * C139529 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139362 * C139398) *
              C139558 +
          ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
            ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                C139555) *
               C139362 * C139398 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139362 * C139529) *
              C139559 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C273 +
             (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                 C139480) *
                C13351 +
            ((C16578 + C16579) * C273 + (C16896 + C16897) * C139480) *
                C139555) *
               C139362 * C139529 -
           (((C13356 * C1058 + C139544 * C1466 + C13354 * C1056 +
              C13349 * C1464) *
                 C139480 +
             (C13356 * C834 + C139544 * C842 + C13354 * C832 + C13349 * C840) *
                 C273) *
                C139555 +
            ((C16897 + C16896) * C139480 + (C16579 + C16578) * C273) * C13351) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139362 * C139529 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139362 * C139398) *
              C139558 +
          ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
            ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                C139544) *
               C139362 * C139398 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139362 * C139529) *
              C139559 +
          ((((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
            ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) *
                C139544) *
               C139362 * C139529 -
           (((C13440 * C1058 + C139555 * C1548 + C13439 * C1057 +
              C13351 * C1547) *
                 C139480 +
             (C13440 * C834 + C139555 * C944 + C13439 * C833 + C13351 * C943) *
                 C273) *
                C139544 +
            ((C17001 + C17000) * C139480 + (C16367 + C16366) * C273) * C13349) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139362 * C139529 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139362 * C139398) *
              C139558 +
          (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) *
               C139362 * C139398 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139362 * C139529) *
              C139559 +
          (((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) *
               C139362 * C139529 -
           (((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139555 +
             C3339 * C13351) *
                C139544 +
            (C17101 + C17100) * C13349) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                        C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                           C139480 * C13351 +
                       (C14156 + C14157) * C139480 * C139555) *
                          C139530 -
                      ((C18174 + C18175) * C139480 * C139555 +
                       (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                        C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                           C139480 * C13351) *
                          C139426) *
                         C139529 +
                     (((C18175 + C18174) * C139480 * C13351 +
                       (C13353 * C8592 + C18158 + C18158 + C13349 * C8598 +
                        C13355 * C8591 + C18159 + C18159 + C139544 * C8597) *
                           C139480 * C139555) *
                          C139426 -
                      ((C14158 + C14159) * C139480 * C139555 +
                       (C14157 + C14156) * C139480 * C13351) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                        C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                           C139480 * C13351 +
                       (C18176 + C18177) * C139480 * C139555) *
                          C139426 -
                      ((C14161 + C14160) * C139480 * C139555 +
                       (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                        C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                           C139480 * C13351) *
                          C139530) *
                         C139529 +
                     (((C14160 + C14161) * C139480 * C13351 +
                       (C14162 + C14163) * C139480 * C139555) *
                          C139530 -
                      ((C13355 * C8590 + C18164 + C18164 + C139544 * C8596 +
                        C13353 * C8591 + C18165 + C18165 + C13349 * C8597) *
                           C139480 * C139555 +
                       (C18177 + C18176) * C139480 * C13351) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C13354 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C13349 +
             (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
                C139480 * C139530 -
            ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
             (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
              C13351 * C1880) *
                 C13349 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C13354) *
                C139480 * C139426) *
               C139529 +
           (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C13354 +
             (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
              C139555 * C8681) *
                 C13349 +
             (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
                C139480 * C139426 -
            ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
             (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C13349 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C13354) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
             (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
                C139480 * C139426 -
            ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
             (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
                C139480 * C139530) *
               C139529 +
           (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
             (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
                C139480 * C139530 -
            ((C13440 * C8593 + C139555 * C8679 + C13439 * C4165 +
              C13351 * C4281) *
                 C139544 +
             (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
              C13351 * C4277) *
                 C13356 +
             (C18319 + C18318) * C13349 + (C18317 + C18316) * C13354) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C13354 +
              (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
              C304 * C139544) *
                 C13351 +
             (C14414 + C14415 + C14388 + C14389) * C139555) *
                C139530 -
            ((C18450 + C18451 + C18468 + C18469) * C139555 +
             (C2019 * C139544 + C2020 * C13356 +
              (C273 * C1770 + C139480 * C1994) * C13349 +
              (C273 * C1762 + C139480 * C1986) * C13354) *
                 C13351) *
                C139426) *
               C139529 +
           (((C18469 + C18468 + C18451 + C18450) * C13351 +
             ((C273 * C8592 + C139480 * C8758) * C13354 +
              (C273 * C8595 + C139480 * C8761) * C13349 + C18466 * C13356 +
              C18467 * C139544) *
                 C139555) *
                C139426 -
            ((C14390 + C14391 + C14416 + C14417) * C139555 +
             (C14389 + C14388 + C14415 + C14414) * C13351) *
                C139530) *
               C139398) *
              C825 +
          ((((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
              C2017 * C139544) *
                 C13351 +
             (C18460 + C18461 + C18462 + C18463) * C139555) *
                C139426 -
            ((C14403 + C14402 + C14401 + C14400) * C139555 +
             (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                 C13351) *
                C139530) *
               C139529 +
           (((C14400 + C14401 + C14402 + C14403) * C13351 +
             (C14404 + C14405 + C14406 + C14407) * C139555) *
                C139530 -
            (((C273 * C8593 + C139480 * C8759) * C139544 +
              (C273 * C8590 + C139480 * C8756) * C13356 + C18467 * C13349 +
              C18466 * C13354) *
                 C139555 +
             (C18463 + C18462 + C18461 + C18460) * C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C13439 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C13351 +
             (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
                C139480 * C139530 -
            ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
             (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
              C13349 * C2100) *
                 C13351 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C13439) *
                C139480 * C139426) *
               C139529 +
           (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
             (C13354 * C8592 + C13349 * C8595 + C13356 * C8591 +
              C139544 * C8594) *
                 C13440 +
             (C13354 * C8678 + C13349 * C8838 + C13356 * C8677 +
              C139544 * C8837) *
                 C139555) *
                C139480 * C139426 -
            ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
             (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C13439 +
             (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
              C139544 * C2098) *
                 C13351 +
             (C18620 + C18621) * C13440 + (C18622 + C18623) * C139555) *
                C139480 * C139426 -
            ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
             (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C13351 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C13439) *
                C139480 * C139530) *
               C139529 +
           (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
             (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
                C139480 * C139530 -
            ((C13356 * C8676 + C139544 * C8836 + C13354 * C8677 +
              C13349 * C8837) *
                 C139555 +
             (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
              C13349 * C8594) *
                 C13440 +
             (C18623 + C18622) * C13351 + (C18621 + C18620) * C13439) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
              C13679 + C13679 + C139555 * C1249) *
                 C13349 +
             (C13712 + C13713) * C139544) *
                C139480 * C139530 -
            ((C15722 + C15723) * C139544 +
             (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
              C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                 C13349) *
                C139480 * C139426) *
               C139529 +
           (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
              C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                 C13349 +
             (C18768 + C18769) * C139544) *
                C139480 * C139426 -
            ((C14690 + C14691) * C139544 +
             (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
              C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                 C13349) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
                C139480 * C139426 -
            ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
                C139480 * C139530) *
               C139529 +
           (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
                C139480 * C139530 -
            ((C13676 * C8590 + C18762 + C18762 + C139555 * C8913 +
              C13675 * C4161 + C18763 + C18763 + C13351 * C4615) *
                 C139544 +
             (C18769 + C18768) * C13349) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C273 * C106 + C139480 * C274) * C13439 +
                        (C273 * C187 + C139480 * C499) * C13351 +
                        C14408 * C13440 + C14805 * C139555) *
                           C13349 +
                       (C13784 + C13785 + C13786 + C13787) * C139544) *
                          C139530 -
                      ((C15824 + C15825 + C15826 + C15827) * C139544 +
                       (C18907 * C139555 + C18465 * C13440 +
                        (C273 * C1872 + C139480 * C2292) * C13351 +
                        (C273 * C1762 + C139480 * C1986) * C13439) *
                           C13349) *
                          C139426) *
                         C139529 +
                     (((C18465 * C13439 + C18907 * C13351 +
                        (C273 * C8592 + C139480 * C8758) * C13440 +
                        (C273 * C8678 + C139480 * C8995) * C139555) *
                           C13349 +
                       (C18902 + C18903 + C18904 + C18909) * C139544) *
                          C139426 -
                      ((C14794 + C14795 + C14796 + C14797) * C139544 +
                       (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                        C14408 * C13439) *
                           C13349) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C15827 + C15826 + C15825 + C15824) * C13349 +
                       (C17718 + C17719 + C17720 + C17721) * C139544) *
                          C139426 -
                      ((C13788 + C13789 + C13790 + C13791) * C139544 +
                       (C13787 + C13786 + C13785 + C13784) * C13349) *
                          C139530) *
                         C139529 +
                     (((C14797 + C14796 + C14795 + C14794) * C13349 +
                       (C16790 + C16791 + C16792 + C16793) * C139544) *
                          C139530 -
                      (((C273 * C8676 + C139480 * C8993) * C139555 +
                        (C273 * C8590 + C139480 * C8756) * C13440 +
                        C4741 * C13351 + C4412 * C13439) *
                           C139544 +
                       (C18909 + C18904 + C18903 + C18902) * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                  C273 +
              (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                  C139480) *
                 C13351 +
             ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                 C139555) *
                C139530 -
            (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) *
                 C139555 +
             ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
               C13349 * C2394) *
                  C139480 +
              (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
               C13349 * C1770) *
                  C273) *
                 C13351) *
                C139426) *
               C139529 +
           ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
             ((C13354 * C8592 + C13349 * C8595 + C13356 * C8591 +
               C139544 * C8594) *
                  C273 +
              (C13354 * C8758 + C13349 * C9072 + C13356 * C8757 +
               C139544 * C9071) *
                  C139480) *
                 C139555) *
                C139426 -
            (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) *
                 C139555 +
             ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) *
                 C13351) *
                C139530) *
               C139398) *
              C825 +
          (((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
               C139544 * C1768) *
                  C273 +
              (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
               C139544 * C2392) *
                  C139480) *
                 C13351 +
             ((C18620 + C18621) * C273 + (C19050 + C19051) * C139480) *
                 C139555) *
                C139426 -
            (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) *
                 C139555 +
             ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                  C139480 +
              (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                  C273) *
                 C13351) *
                C139530) *
               C139529 +
           ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
             ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                 C139555) *
                C139530 -
            (((C13356 * C8756 + C139544 * C9070 + C13354 * C8757 +
               C13349 * C9071) *
                  C139480 +
              (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
               C13349 * C8594) *
                  C273) *
                 C139555 +
             ((C19051 + C19050) * C139480 + (C18621 + C18620) * C273) *
                 C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                  C273 +
              (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
               C139555 * C1543) *
                  C139480) *
                 C13349 +
             ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                 C139544) *
                C139530 -
            (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) *
                 C139544 +
             ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
               C13351 * C2476) *
                  C139480 +
              (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
               C13351 * C1872) *
                  C273) *
                 C13349) *
                C139426) *
               C139529 +
           ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
               C139555 * C8678) *
                  C273 +
              (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
               C139555 * C9149) *
                  C139480) *
                 C13349 +
             ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                 C139544) *
                C139426 -
            (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) *
                 C139544 +
             ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
               C13351 * C1543) *
                  C139480 +
              (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                  C273) *
                 C13349) *
                C139530) *
               C139398) *
              C825 +
          (((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
             ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                 C139544) *
                C139426 -
            (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) *
                 C139544 +
             ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) *
                 C13349) *
                C139530) *
               C139529 +
           ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
             ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                 C139544) *
                C139530 -
            (((C13440 * C8756 + C139555 * C9147 + C13439 * C4395 +
               C13351 * C4945) *
                  C139480 +
              (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
               C13351 * C4277) *
                  C273) *
                 C139544 +
             ((C19187 + C19186) * C139480 + (C18317 + C18316) * C273) *
                 C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
              C15154 * C139555) *
                 C13349 +
             (C14012 + C14013) * C139544) *
                C139530 -
            ((C16141 + C16142) * C139544 +
             (C19327 * C139555 +
              (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                 C13349) *
                C139426) *
               C139529 +
           (((C19327 * C13351 +
              (C711 * C8592 + C9230 + C9230 + C139480 * C9226) * C139555) *
                 C13349 +
             (C19320 + C19329) * C139544) *
                C139426 -
            ((C15141 + C15142) * C139544 +
             (C15155 * C139555 + C15154 * C13351) * C13349) *
                C139530) *
               C139398) *
              C825 +
          ((((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
                C139426 -
            ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
                C139530) *
               C139529 +
           (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) *
                C139530 -
            (((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139555 +
              C5073 * C13351) *
                 C139544 +
             (C19329 + C19320) * C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] += (-std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139362 * C822 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139362 * C823 +
                     ((C14159 + C14158) * C139480 * C13351 +
                      (C13353 * C5803 + C14126 + C14126 + C13349 * C5809 +
                       C13355 * C5802 + C14127 + C14127 + C139544 * C5808) *
                          C139480 * C139555) *
                         C139362 * C824) *
                        C825 +
                    (((C14160 + C14161) * C139480 * C13351 +
                      (C14162 + C14163) * C139480 * C139555) *
                         C139362 * C823 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139362 * C822 -
                     ((C13355 * C5801 + C14138 + C14138 + C139544 * C5807 +
                       C13353 * C5802 + C14139 + C14139 + C13349 * C5808) *
                          C139480 * C139555 +
                      (C14163 + C14162) * C139480 * C13351) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                      C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                         C139480 * C13351 +
                     (C13353 * C829 + C13360 + C13360 + C13349 * C845 +
                      C13355 * C828 + C13361 + C13361 + C139544 * C844) *
                         C139480 * C139555) *
                        C139362 * C139346 * C96 -
                    ((C13355 * C827 + C13362 + C13362 + C139544 * C843 +
                      C13353 * C828 + C13363 + C13363 + C13349 * C844) *
                         C139480 * C139555 +
                     (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                      C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                         C139480 * C13351) *
                        C139362 * C139346 * C97 +
                    ((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                      C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                         C139480 * C13351 +
                     (C13353 * C827 + C13368 + C13368 + C13349 * C843 +
                      C13355 * C833 + C13369 + C13369 + C139544 * C849) *
                         C139480 * C139555) *
                        C139362 * C139346 * C98 -
                    ((C13355 * C2695 + C13370 + C13370 + C139544 * C2697 +
                      C13353 * C833 + C13371 + C13371 + C13349 * C849) *
                         C139480 * C139555 +
                     (C13355 * C110 + C13372 + C13372 + C139544 * C122 +
                      C13353 * C109 + C13373 + C13373 + C13349 * C121) *
                         C139480 * C13351) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C1757 -
                     ((C13355 * C4160 + C15256 + C15256 + C139544 * C4168 +
                       C13353 * C4159 + C15257 + C15257 + C13349 * C4167) *
                          C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C1758 +
                     ((C13353 * C1763 + C15260 + C15260 + C13349 * C1779 +
                       C13355 * C1764 + C15261 + C15261 + C139544 * C1780) *
                          C139480 * C13351 +
                      (C13353 * C6325 + C15262 + C15262 + C13349 * C6331 +
                       C13355 * C6324 + C15263 + C15263 + C139544 * C6330) *
                          C139480 * C139555) *
                         C1759) *
                        C139346 * C825 +
                    (((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                       C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                          C139480 * C13351 +
                      (C13353 * C4160 + C15266 + C15266 + C13349 * C4168 +
                       C13355 * C4161 + C15267 + C15267 + C139544 * C4169) *
                          C139480 * C139555) *
                         C1758 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C1757 -
                     ((C13355 * C6323 + C15268 + C15268 + C139544 * C6329 +
                       C13353 * C6324 + C15269 + C15269 + C13349 * C6330) *
                          C139480 * C139555 +
                      (C13355 * C1765 + C15270 + C15270 + C139544 * C1781 +
                       C13353 * C1764 + C15271 + C15271 + C13349 * C1780) *
                          C139480 * C13351) *
                         C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139362 * C822 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139362 * C823 +
           ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C13354 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C13349 +
            (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
            (C13439 * C827 + C13351 * C937 + C13440 * C832 + C139555 * C942) *
                C13356 +
            (C13439 * C835 + C13351 * C945 + C13440 * C840 + C139555 * C950) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139362 * C822 -
           ((C13440 * C5804 + C139555 * C5866 + C13439 * C840 + C13351 * C950) *
                C139544 +
            (C13440 * C5801 + C139555 * C5863 + C13439 * C832 + C13351 * C942) *
                C13356 +
            (C14285 + C14284) * C13349 + (C14283 + C14282) * C13354) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C13354 +
           (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
               C13349 +
           (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
           (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
              C139480 * C139362 * C139346 * C97 +
          ((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
           (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
              C139480 * C139362 * C139346 * C98 -
          ((C13440 * C2696 + C139555 * C2776 + C13439 * C116 + C13351 * C197) *
               C139544 +
           (C13440 * C2695 + C139555 * C2775 + C13439 * C110 + C13351 * C191) *
               C13356 +
           (C13477 + C13476) * C13349 + (C13475 + C13474) * C13354) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C1757 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C1758 +
           ((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
             C139555 * C6411) *
                C13354 +
            (C13439 * C1771 + C13351 * C1881 + C13440 * C6328 +
             C139555 * C6414) *
                C13349 +
            (C15390 + C15391) * C13356 + (C15392 + C15393) * C139544) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
            (C13439 * C1760 + C13351 * C1870 + C13440 * C4161 +
             C139555 * C4277) *
                C13356 +
            (C13439 * C1768 + C13351 * C1878 + C13440 * C4165 +
             C139555 * C4281) *
                C139544) *
               C139480 * C1758 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C1757 -
           ((C13440 * C6326 + C139555 * C6412 + C13439 * C1773 +
             C13351 * C1883) *
                C139544 +
            (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
             C13351 * C1875) *
                C13356 +
            (C15393 + C15392) * C13349 + (C15391 + C15390) * C13354) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139362 * C822 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C139362 * C823 +
           ((C14417 + C14416 + C14391 + C14390) * C13351 +
            ((C273 * C5803 + C139480 * C5921) * C13354 +
             (C273 * C5806 + C139480 * C5924) * C13349 + C14412 * C13356 +
             C14413 * C139544) *
                C139555) *
               C139362 * C824) *
              C825 +
          (((C14400 + C14401 + C14402 + C14403) * C13351 +
            (C14404 + C14405 + C14406 + C14407) * C139555) *
               C139362 * C823 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139362 * C822 -
           (((C273 * C5804 + C139480 * C5922) * C139544 +
             (C273 * C5801 + C139480 * C5919) * C13356 + C14413 * C13349 +
             C14412 * C13354) *
                C139555 +
            (C14407 + C14406 + C14405 + C14404) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13354 +
            (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
            C304 * C139544) *
               C13351 +
           ((C273 * C829 + C139480 * C1053) * C13354 +
            (C273 * C837 + C139480 * C1061) * C13349 + C1087 * C13356 +
            C1086 * C139544) *
               C139555) *
              C139362 * C139346 * C96 -
          ((C1084 * C139544 + C1085 * C13356 + C1086 * C13349 +
            C1087 * C13354) *
               C139555 +
           (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
               C13351) *
              C139362 * C139346 * C97 +
          ((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
               C13351 +
           (C1085 * C13354 + C1084 * C13349 + C2864 * C13356 +
            C2865 * C139544) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C273 * C2696 + C139480 * C2858) * C139544 +
            (C273 * C2695 + C139480 * C2857) * C13356 + C2865 * C13349 +
            C2864 * C13354) *
               C139555 +
           (C310 * C139544 + C309 * C13356 + C307 * C13349 + C308 * C13354) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C1757 -
           ((C4411 * C139544 + C4410 * C13356 +
             (C273 * C4163 + C139480 * C4397) * C13349 +
             (C273 * C4159 + C139480 * C4393) * C13354) *
                C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C13354 +
             (C273 * C1771 + C139480 * C1995) * C13349 + C2021 * C13356 +
             C2022 * C139544) *
                C13351 +
            ((C273 * C6325 + C139480 * C6491) * C13354 +
             (C273 * C6328 + C139480 * C6494) * C13349 + C15496 * C13356 +
             C15497 * C139544) *
                C139555) *
               C1759) *
              C139346 * C825 +
          (((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
             C2017 * C139544) *
                C13351 +
            (C4410 * C13354 + C4411 * C13349 + C4412 * C13356 +
             C4413 * C139544) *
                C139555) *
               C1758 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C1757 -
           (((C273 * C6326 + C139480 * C6492) * C139544 +
             (C273 * C6323 + C139480 * C6489) * C13356 + C15497 * C13349 +
             C15496 * C13354) *
                C139555 +
            (C2024 * C139544 + C2023 * C13356 + C2022 * C13349 +
             C2021 * C13354) *
                C13351) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139362 * C822 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139362 * C823 +
           ((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
            (C13354 * C5803 + C13349 * C5806 + C13356 * C5802 +
             C139544 * C5805) *
                C13440 +
            (C13354 * C5865 + C13349 * C5977 + C13356 * C5864 +
             C139544 * C5976) *
                C139555) *
               C139480 * C139362 * C824) *
              C825 +
          (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
            (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
               C139480 * C139362 * C823 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139362 * C822 -
           ((C13356 * C5863 + C139544 * C5975 + C13354 * C5864 +
             C13349 * C5976) *
                C139555 +
            (C13356 * C5801 + C139544 * C5804 + C13354 * C5802 +
             C13349 * C5805) *
                C13440 +
            (C14563 + C14562) * C13351 + (C14561 + C14560) * C13439) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C13439 +
           (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
               C13351 +
           (C13354 * C829 + C13349 * C837 + C13356 * C828 + C139544 * C836) *
               C13440 +
           (C13354 * C939 + C13349 * C1167 + C13356 * C938 + C139544 * C1166) *
               C139555) *
              C139480 * C139362 * C139346 * C96 -
          ((C13356 * C937 + C139544 * C1165 + C13354 * C938 + C13349 * C1166) *
               C139555 +
           (C13356 * C827 + C139544 * C835 + C13354 * C828 + C13349 * C836) *
               C13440 +
           (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
               C13351 +
           (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
               C13439) *
              C139480 * C139362 * C139346 * C97 +
          ((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
               C13439 +
           (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
               C13351 +
           (C13354 * C827 + C13349 * C835 + C13356 * C833 + C139544 * C841) *
               C13440 +
           (C13354 * C937 + C13349 * C1165 + C13356 * C943 + C139544 * C1171) *
               C139555) *
              C139480 * C139362 * C139346 * C98 -
          ((C13356 * C2775 + C139544 * C2939 + C13354 * C943 + C13349 * C1171) *
               C139555 +
           (C13356 * C2695 + C139544 * C2696 + C13354 * C833 + C13349 * C841) *
               C13440 +
           (C13356 * C191 + C139544 * C364 + C13354 * C190 + C13349 * C363) *
               C13351 +
           (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
               C13439) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C1757 -
           ((C13356 * C4276 + C139544 * C4512 + C13354 * C4275 +
             C13349 * C4511) *
                C139555 +
            (C13356 * C4160 + C139544 * C4164 + C13354 * C4159 +
             C13349 * C4163) *
                C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C1758 +
           ((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
             C139544 * C1772) *
                C13439 +
            (C13354 * C1873 + C13349 * C2101 + C13356 * C1874 +
             C139544 * C2102) *
                C13351 +
            (C13354 * C6325 + C13349 * C6328 + C13356 * C6324 +
             C139544 * C6327) *
                C13440 +
            (C13354 * C6411 + C13349 * C6571 + C13356 * C6410 +
             C139544 * C6570) *
                C139555) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
             C139544 * C1768) *
                C13439 +
            (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
             C139544 * C2098) *
                C13351 +
            (C13354 * C4160 + C13349 * C4164 + C13356 * C4161 +
             C139544 * C4165) *
                C13440 +
            (C13354 * C4276 + C13349 * C4512 + C13356 * C4277 +
             C139544 * C4513) *
                C139555) *
               C139480 * C1758 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C1757 -
           ((C13356 * C6409 + C139544 * C6569 + C13354 * C6410 +
             C13349 * C6570) *
                C139555 +
            (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
             C13349 * C6327) *
                C13440 +
            (C13356 * C1875 + C139544 * C2103 + C13354 * C1874 +
             C13349 * C2102) *
                C13351 +
            (C13356 * C1765 + C139544 * C1773 + C13354 * C1764 +
             C13349 * C1772) *
                C13439) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139362 * C822 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C139362 * C823 +
           ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
             C14671 + C14671 + C139555 * C6030) *
                C13349 +
            (C14692 + C14693) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C14691 + C14690) * C13349 +
            (C13675 * C827 + C14678 + C14678 + C13351 * C1247 + C13676 * C832 +
             C14679 + C14679 + C139555 * C1252) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139362 * C822 -
           ((C13676 * C5801 + C14680 + C14680 + C139555 * C6028 +
             C13675 * C832 + C14681 + C14681 + C13351 * C1252) *
                C139544 +
            (C14693 + C14692) * C13349) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
            C13679 + C13679 + C139555 * C1249) *
               C13349 +
           (C13712 + C13713) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) * C139480 *
              C139362 * C139346 * C97 +
          ((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) * C139480 *
              C139362 * C139346 * C98 -
          ((C13676 * C2695 + C13698 + C13698 + C139555 * C3014 + C13675 * C110 +
            C13699 + C13699 + C13351 * C421) *
               C139544 +
           (C13717 + C13716) * C13349) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C1757 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C1758 +
           ((C13675 * C1763 + C15702 + C15702 + C13351 * C2183 +
             C13676 * C6325 + C15703 + C15703 + C139555 * C6648) *
                C13349 +
            (C15724 + C15725) * C139544) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C15723 + C15722) * C13349 +
            (C13675 * C1760 + C15710 + C15710 + C13351 * C2180 +
             C13676 * C4161 + C15711 + C15711 + C139555 * C4615) *
                C139544) *
               C139480 * C1758 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C1757 -
           ((C13676 * C6323 + C15712 + C15712 + C139555 * C6646 +
             C13675 * C1765 + C15713 + C15713 + C13351 * C2185) *
                C139544 +
            (C15725 + C15724) * C13349) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13439 +
             (C273 * C187 + C139480 * C499) * C13351 + C14408 * C13440 +
             C14805 * C139555) *
                C13349 +
            (C13784 + C13785 + C13786 + C13787) * C139544) *
               C139362 * C822 -
           ((C14794 + C14795 + C14796 + C14797) * C139544 +
            (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
             C14408 * C13439) *
                C13349) *
               C139362 * C823 +
           ((C14411 * C13439 + C14806 * C13351 +
             (C273 * C5803 + C139480 * C5921) * C13440 +
             (C273 * C5865 + C139480 * C6086) * C139555) *
                C13349 +
            (C14800 + C14801 + C14802 + C14808) * C139544) *
               C139362 * C824) *
              C825 +
          (((C14797 + C14796 + C14795 + C14794) * C13349 +
            (C1085 * C13439 + C1378 * C13351 + C1090 * C13440 +
             C1381 * C139555) *
                C139544) *
               C139362 * C823 -
           ((C13788 + C13789 + C13790 + C13791) * C139544 +
            (C13787 + C13786 + C13785 + C13784) * C13349) *
               C139362 * C822 -
           (((C273 * C5863 + C139480 * C6084) * C139555 +
             (C273 * C5801 + C139480 * C5919) * C13440 + C1381 * C13351 +
             C1090 * C13439) *
                C139544 +
            (C14808 + C14802 + C14801 + C14800) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C273 * C106 + C139480 * C274) * C13439 +
                                (C273 * C187 + C139480 * C499) * C13351 +
                                (C273 * C829 + C139480 * C1053) * C13440 +
                                (C273 * C939 + C139480 * C1359) * C139555) *
                                   C13349 +
                               (C13784 + C13785 + C13786 + C13787) * C139544) *
                                  C139362 * C139346 * C96 -
                              ((C13788 + C13789 + C13790 + C13791) * C139544 +
                               (C13787 + C13786 + C13785 + C13784) * C13349) *
                                  C139362 * C139346 * C97 +
                              ((C13791 + C13790 + C13789 + C13788) * C13349 +
                               (C13792 + C13793 + C13794 + C13795) * C139544) *
                                  C139362 * C139346 * C98 -
                              (((C273 * C2775 + C139480 * C3095) * C139555 +
                                (C273 * C2695 + C139480 * C2857) * C13440 +
                                C521 * C13351 + C309 * C13439) *
                                   C139544 +
                               (C13795 + C13794 + C13793 + C13792) * C13349) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13439 +
             (C273 * C187 + C139480 * C499) * C13351 + C14408 * C13440 +
             C14805 * C139555) *
                C13349 +
            (C13784 + C13785 + C13786 + C13787) * C139544) *
               C1757 -
           ((C15824 + C15825 + C15826 + C15827) * C139544 +
            ((C273 * C4275 + C139480 * C4729) * C139555 +
             (C273 * C4159 + C139480 * C4393) * C13440 +
             (C273 * C1872 + C139480 * C2292) * C13351 +
             (C273 * C1762 + C139480 * C1986) * C13439) *
                C13349) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C13439 +
             (C273 * C1873 + C139480 * C2293) * C13351 +
             (C273 * C6325 + C139480 * C6491) * C13440 +
             (C273 * C6411 + C139480 * C6728) * C139555) *
                C13349 +
            (C15828 + C15829 + C15830 + C15834) * C139544) *
               C1759) *
              C139346 * C825 +
          (((C15827 + C15826 + C15825 + C15824) * C13349 +
            (C2018 * C13439 + C2311 * C13351 + C4412 * C13440 +
             C4741 * C139555) *
                C139544) *
               C1758 -
           ((C13788 + C13789 + C13790 + C13791) * C139544 +
            (C13787 + C13786 + C13785 + C13784) * C13349) *
               C1757 -
           (((C273 * C6409 + C139480 * C6726) * C139555 +
             (C273 * C6323 + C139480 * C6489) * C13440 + C2314 * C13351 +
             C2023 * C13439) *
                C139544 +
            (C15834 + C15830 + C15829 + C15828) * C13349) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139362 * C822 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139362 * C823 +
           (((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
            ((C13354 * C5803 + C13349 * C5806 + C13356 * C5802 +
              C139544 * C5805) *
                 C273 +
             (C13354 * C5921 + C13349 * C6139 + C13356 * C5920 +
              C139544 * C6138) *
                 C139480) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
            ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                C139555) *
               C139362 * C823 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139362 * C822 -
           (((C13356 * C5919 + C139544 * C6137 + C13354 * C5920 +
              C13349 * C6138) *
                 C139480 +
             (C13356 * C5801 + C139544 * C5804 + C13354 * C5802 +
              C13349 * C5805) *
                 C273) *
                C139555 +
            ((C14930 + C14929) * C139480 + (C14561 + C14560) * C273) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C273 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C139480) *
               C13351 +
           ((C13354 * C829 + C13349 * C837 + C13356 * C828 + C139544 * C836) *
                C273 +
            (C13354 * C1053 + C13349 * C1461 + C13356 * C1052 +
             C139544 * C1460) *
                C139480) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C13356 * C1051 + C139544 * C1459 + C13354 * C1052 +
             C13349 * C1460) *
                C139480 +
            (C13356 * C827 + C139544 * C835 + C13354 * C828 + C13349 * C836) *
                C273) *
               C139555 +
           ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C139480 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C273) *
               C13351) *
              C139362 * C139346 * C97 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C273 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C139480) *
               C13351 +
           ((C13354 * C827 + C13349 * C835 + C13356 * C833 + C139544 * C841) *
                C273 +
            (C13354 * C1051 + C13349 * C1459 + C13356 * C1057 +
             C139544 * C1465) *
                C139480) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C13356 * C2857 + C139544 * C3176 + C13354 * C1057 +
             C13349 * C1465) *
                C139480 +
            (C13356 * C2695 + C139544 * C2696 + C13354 * C833 + C13349 * C841) *
                C273) *
               C139555 +
           ((C13356 * C278 + C139544 * C581 + C13354 * C277 + C13349 * C580) *
                C139480 +
            (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
                C273) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C1757 -
           (((C13356 * C4394 + C139544 * C4842 + C13354 * C4393 +
              C13349 * C4841) *
                 C139480 +
             (C13356 * C4160 + C139544 * C4164 + C13354 * C4159 +
              C13349 * C4163) *
                 C273) *
                C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C1758 +
           (((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C13354 * C1987 + C13349 * C2395 + C13356 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C13351 +
            ((C13354 * C6325 + C13349 * C6328 + C13356 * C6324 +
              C139544 * C6327) *
                 C273 +
             (C13354 * C6491 + C13349 * C6805 + C13356 * C6490 +
              C139544 * C6804) *
                 C139480) *
                C139555) *
               C1759) *
              C139346 * C825 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C13351 +
            ((C13354 * C4160 + C13349 * C4164 + C13356 * C4161 +
              C139544 * C4165) *
                 C273 +
             (C13354 * C4394 + C13349 * C4842 + C13356 * C4395 +
              C139544 * C4843) *
                 C139480) *
                C139555) *
               C1758 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C1757 -
           (((C13356 * C6489 + C139544 * C6803 + C13354 * C6490 +
              C13349 * C6804) *
                 C139480 +
             (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
              C13349 * C6327) *
                 C273) *
                C139555 +
            ((C13356 * C1989 + C139544 * C2397 + C13354 * C1988 +
              C13349 * C2396) *
                 C139480 +
             (C13356 * C1765 + C139544 * C1773 + C13354 * C1764 +
              C13349 * C1772) *
                 C273) *
                C13351) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139362 * C822 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139362 * C823 +
           (((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C13349 +
            ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
            ((C13439 * C827 + C13351 * C937 + C13440 * C832 + C139555 * C942) *
                 C273 +
             (C13439 * C1051 + C13351 * C1541 + C13440 * C1056 +
              C139555 * C1546) *
                 C139480) *
                C139544) *
               C139362 * C823 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139362 * C822 -
           (((C13440 * C5919 + C139555 * C6190 + C13439 * C1056 +
              C13351 * C1546) *
                 C139480 +
             (C13440 * C5801 + C139555 * C5863 + C13439 * C832 +
              C13351 * C942) *
                 C273) *
                C139544 +
            ((C15040 + C15039) * C139480 + (C14283 + C14282) * C273) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C273 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C139480) *
               C13349 +
           ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) * C139544) *
              C139362 * C139346 * C96 -
          (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
           ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
              C139362 * C139346 * C97 +
          (((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
           ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) * C139544) *
              C139362 * C139346 * C98 -
          (((C13440 * C2857 + C139555 * C3251 + C13439 * C278 + C13351 * C637) *
                C139480 +
            (C13440 * C2695 + C139555 * C2775 + C13439 * C110 + C13351 * C191) *
                C273) *
               C139544 +
           ((C13945 + C13944) * C139480 + (C13475 + C13474) * C273) * C13349) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C1757 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C1758 +
           (((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C13439 * C1987 + C13351 * C2477 + C13440 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C13349 +
            ((C15390 + C15391) * C273 + (C16041 + C16042) * C139480) *
                C139544) *
               C1759) *
              C139346 * C825 +
          ((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
            ((C13439 * C1760 + C13351 * C1870 + C13440 * C4161 +
              C139555 * C4277) *
                 C273 +
             (C13439 * C1984 + C13351 * C2474 + C13440 * C4395 +
              C139555 * C4945) *
                 C139480) *
                C139544) *
               C1758 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C1757 -
           (((C13440 * C6489 + C139555 * C6880 + C13439 * C1989 +
              C13351 * C2479) *
                 C139480 +
             (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
              C13351 * C1875) *
                 C273) *
                C139544 +
            ((C16042 + C16041) * C139480 + (C15391 + C15390) * C273) * C13349) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139362 * C822 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139362 * C823 +
           ((C15155 * C13351 +
             (C711 * C5803 + C6249 + C6249 + C139480 * C6245) * C139555) *
                C13349 +
            (C15145 + C15157) * C139544) *
               C139362 * C824) *
              C825 +
          (((C15142 + C15141) * C13349 +
            (C1676 * C13351 + C1679 * C139555) * C139544) *
               C139362 * C823 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139362 * C822 -
           (((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139555 +
             C1679 * C13351) *
                C139544 +
            (C15157 + C15145) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139555) *
               C13349 +
           (C14012 + C14013) * C139544) *
              C139362 * C139346 * C96 -
          ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) * C139362 *
              C139346 * C97 +
          ((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) * C139362 *
              C139346 * C98 -
          (((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139555 +
            C744 * C13351) *
               C139544 +
           (C14017 + C14016) * C13349) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C1757 -
           ((C16141 + C16142) * C139544 +
            ((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C1758 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C13351 +
             (C711 * C6325 + C6963 + C6963 + C139480 * C6959) * C139555) *
                C13349 +
            (C16143 + C16149) * C139544) *
               C1759) *
              C139346 * C825 +
          (((C16142 + C16141) * C13349 +
            (C2609 * C13351 + C5073 * C139555) * C139544) *
               C1758 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) * C1757 -
           (((C711 * C6323 + C6961 + C6961 + C139480 * C6957) * C139555 +
             C2612 * C13351) *
                C139544 +
            (C16149 + C16143) * C13349) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139530 -
                     ((C13355 * C4160 + C15256 + C15256 + C139544 * C4168 +
                       C13353 * C4159 + C15257 + C15257 + C13349 * C4167) *
                          C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139426) *
                        C139346 * C139558 +
                    (((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                       C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                          C139480 * C13351 +
                      (C13353 * C4160 + C15266 + C15266 + C13349 * C4168 +
                       C13355 * C4161 + C15267 + C15267 + C139544 * C4169) *
                          C139480 * C139555) *
                         C139426 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139530) *
                        C139346 * C139559 +
                    (((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                       C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                          C139480 * C13351 +
                      (C16258 + C16259) * C139480 * C139555) *
                         C139530 -
                     ((C13355 * C4162 + C17200 + C17200 + C139544 * C4170 +
                       C13353 * C4161 + C17201 + C17201 + C13349 * C4169) *
                          C139480 * C139555 +
                      (C13355 * C1766 + C17202 + C17202 + C139544 * C1782 +
                       C13353 * C1760 + C17203 + C17203 + C13349 * C1776) *
                          C139480 * C13351) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139530 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
            (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
               C139480 * C139426 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
            (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
               C139480 * C139530 -
           ((C13440 * C4166 + C139555 * C4282 + C13439 * C1774 +
             C13351 * C1884) *
                C139544 +
            (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
             C13351 * C1876) *
                C13356 +
            (C17313 + C17312) * C13349 + (C17311 + C17310) * C13354) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139530 -
           ((C4411 * C139544 + C4410 * C13356 +
             (C273 * C4163 + C139480 * C4397) * C13349 +
             (C273 * C4159 + C139480 * C4393) * C13354) *
                C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C139426) *
              C139346 * C139558 +
          (((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
             C2017 * C139544) *
                C13351 +
            (C4410 * C13354 + C4411 * C13349 + C4412 * C13356 +
             C4413 * C139544) *
                C139555) *
               C139426 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139530) *
              C139346 * C139559 +
          (((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
                C13351 +
            (C16468 + C16469 + C16470 + C16471) * C139555) *
               C139530 -
           (((C273 * C4166 + C139480 * C4400) * C139544 +
             (C273 * C4162 + C139480 * C4396) * C13356 + C4413 * C13349 +
             C4412 * C13354) *
                C139555 +
            (C3586 * C139544 + C3585 * C13356 + C2017 * C13349 +
             C2018 * C13354) *
                C13351) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139530 -
           ((C13356 * C4276 + C139544 * C4512 + C13354 * C4275 +
             C13349 * C4511) *
                C139555 +
            (C13356 * C4160 + C139544 * C4164 + C13354 * C4159 +
             C13349 * C4163) *
                C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
             C139544 * C1768) *
                C13439 +
            (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
             C139544 * C2098) *
                C13351 +
            (C13354 * C4160 + C13349 * C4164 + C13356 * C4161 +
             C139544 * C4165) *
                C13440 +
            (C13354 * C4276 + C13349 * C4512 + C13356 * C4277 +
             C139544 * C4513) *
                C139555) *
               C139480 * C139426 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C13439 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C13351 +
            (C16578 + C16579) * C13440 + (C16580 + C16581) * C139555) *
               C139480 * C139530 -
           ((C13356 * C4278 + C139544 * C4514 + C13354 * C4277 +
             C13349 * C4513) *
                C139555 +
            (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
             C13349 * C4165) *
                C13440 +
            (C13356 * C1876 + C139544 * C2104 + C13354 * C1870 +
             C13349 * C2098) *
                C13351 +
            (C13356 * C1766 + C139544 * C1774 + C13354 * C1760 +
             C13349 * C1768) *
                C13439) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139530 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
               C139480 * C139426 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) *
               C139480 * C139530 -
           ((C13676 * C4162 + C17612 + C17612 + C139555 * C4616 +
             C13675 * C1766 + C17613 + C17613 + C13351 * C2186) *
                C139544 +
            (C17619 + C17618) * C13349) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139530 -
                     ((C15824 + C15825 + C15826 + C15827) * C139544 +
                      ((C273 * C4275 + C139480 * C4729) * C139555 +
                       (C273 * C4159 + C139480 * C4393) * C13440 +
                       (C273 * C1872 + C139480 * C2292) * C13351 +
                       (C273 * C1762 + C139480 * C1986) * C13439) *
                          C13349) *
                         C139426) *
                        C139346 * C139558 +
                    (((C15827 + C15826 + C15825 + C15824) * C13349 +
                      (C17718 + C17719 + C17720 + C17721) * C139544) *
                         C139426 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C139530) *
                        C139346 * C139559 +
                    (((C13791 + C13790 + C13789 + C13788) * C13349 +
                      (C13792 + C13793 + C13794 + C13795) * C139544) *
                         C139530 -
                     (((C273 * C4278 + C139480 * C4732) * C139555 +
                       (C273 * C4162 + C139480 * C4396) * C13440 +
                       C3822 * C13351 + C3585 * C13439) *
                          C139544 +
                      (C17721 + C17720 + C17719 + C17718) * C13349) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139530 -
           (((C13356 * C4394 + C139544 * C4842 + C13354 * C4393 +
              C13349 * C4841) *
                 C139480 +
             (C13356 * C4160 + C139544 * C4164 + C13354 * C4159 +
              C13349 * C4163) *
                 C273) *
                C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139426) *
              C139346 * C139558 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C13351 +
            ((C13354 * C4160 + C13349 * C4164 + C13356 * C4161 +
              C139544 * C4165) *
                 C273 +
             (C13354 * C4394 + C13349 * C4842 + C13356 * C4395 +
              C139544 * C4843) *
                 C139480) *
                C139555) *
               C139426 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139530) *
              C139346 * C139559 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C273 +
             (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                 C139480) *
                C13351 +
            ((C16578 + C16579) * C273 + (C16896 + C16897) * C139480) *
                C139555) *
               C139530 -
           (((C13356 * C4396 + C139544 * C4844 + C13354 * C4395 +
              C13349 * C4843) *
                 C139480 +
             (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
              C13349 * C4165) *
                 C273) *
                C139555 +
            ((C13356 * C1990 + C139544 * C2398 + C13354 * C1984 +
              C13349 * C2392) *
                 C139480 +
             (C13356 * C1766 + C139544 * C1774 + C13354 * C1760 +
              C13349 * C1768) *
                 C273) *
                C13351) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139530 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139426) *
              C139346 * C139558 +
          ((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
            ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                C139544) *
               C139426 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139530) *
              C139346 * C139559 +
          ((((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
            ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) *
                C139544) *
               C139530 -
           (((C13440 * C4396 + C139555 * C4946 + C13439 * C1990 +
              C13351 * C2480) *
                 C139480 +
             (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
              C13351 * C1876) *
                 C273) *
                C139544 +
            ((C17923 + C17922) * C139480 + (C17311 + C17310) * C273) * C13349) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139530 -
           ((C16141 + C16142) * C139544 +
            ((C711 * C4159 + C5060 + C5060 + C139480 * C5055) * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139426) *
              C139346 * C139558 +
          (((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
               C139426 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139530) *
              C139346 * C139559 +
          (((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) *
               C139530 -
           (((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139555 +
             C4060 * C13351) *
                C139544 +
            (C18023 + C18022) * C13349) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                      C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                         C139480 * C13351 +
                     (C13353 * C829 + C13360 + C13360 + C13349 * C845 +
                      C13355 * C828 + C13361 + C13361 + C139544 * C844) *
                         C139480 * C139555) *
                        C139362 * C139346 * C96 -
                    ((C13355 * C827 + C13362 + C13362 + C139544 * C843 +
                      C13353 * C828 + C13363 + C13363 + C13349 * C844) *
                         C139480 * C139555 +
                     (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                      C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                         C139480 * C13351) *
                        C139362 * C139346 * C97 +
                    ((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                      C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                         C139480 * C13351 +
                     (C13353 * C827 + C13368 + C13368 + C13349 * C843 +
                      C13355 * C833 + C13369 + C13369 + C139544 * C849) *
                         C139480 * C139555) *
                        C139362 * C139346 * C98 -
                    ((C13355 * C2695 + C13370 + C13370 + C139544 * C2697 +
                      C13353 * C833 + C13371 + C13371 + C13349 * C849) *
                         C139480 * C139555 +
                     (C13355 * C110 + C13372 + C13372 + C139544 * C122 +
                      C13353 * C109 + C13373 + C13373 + C13349 * C121) *
                         C139480 * C13351) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139362 * C822 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139362 * C823 +
                     ((C14159 + C14158) * C139480 * C13351 +
                      (C13353 * C5803 + C14126 + C14126 + C13349 * C5809 +
                       C13355 * C5802 + C14127 + C14127 + C139544 * C5808) *
                          C139480 * C139555) *
                         C139362 * C824) *
                        C825 +
                    (((C14160 + C14161) * C139480 * C13351 +
                      (C14162 + C14163) * C139480 * C139555) *
                         C139362 * C823 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139362 * C822 -
                     ((C13355 * C5801 + C14138 + C14138 + C139544 * C5807 +
                       C13353 * C5802 + C14139 + C14139 + C13349 * C5808) *
                          C139480 * C139555 +
                      (C14163 + C14162) * C139480 * C13351) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C13354 +
           (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
               C13349 +
           (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
           (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
              C139480 * C139362 * C139346 * C97 +
          ((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
           (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
              C139480 * C139362 * C139346 * C98 -
          ((C13440 * C2696 + C139555 * C2776 + C13439 * C116 + C13351 * C197) *
               C139544 +
           (C13440 * C2695 + C139555 * C2775 + C13439 * C110 + C13351 * C191) *
               C13356 +
           (C13477 + C13476) * C13349 + (C13475 + C13474) * C13354) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139362 * C822 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139362 * C823 +
           ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C13354 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C13349 +
            (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
            (C13439 * C827 + C13351 * C937 + C13440 * C832 + C139555 * C942) *
                C13356 +
            (C13439 * C835 + C13351 * C945 + C13440 * C840 + C139555 * C950) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139362 * C822 -
           ((C13440 * C5804 + C139555 * C5866 + C13439 * C840 + C13351 * C950) *
                C139544 +
            (C13440 * C5801 + C139555 * C5863 + C13439 * C832 + C13351 * C942) *
                C13356 +
            (C14285 + C14284) * C13349 + (C14283 + C14282) * C13354) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13354 +
            (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
            C304 * C139544) *
               C13351 +
           ((C273 * C829 + C139480 * C1053) * C13354 +
            (C273 * C837 + C139480 * C1061) * C13349 + C1087 * C13356 +
            C1086 * C139544) *
               C139555) *
              C139362 * C139346 * C96 -
          ((C1084 * C139544 + C1085 * C13356 + C1086 * C13349 +
            C1087 * C13354) *
               C139555 +
           (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
               C13351) *
              C139362 * C139346 * C97 +
          ((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
               C13351 +
           (C1085 * C13354 + C1084 * C13349 + C2864 * C13356 +
            C2865 * C139544) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C273 * C2696 + C139480 * C2858) * C139544 +
            (C273 * C2695 + C139480 * C2857) * C13356 + C2865 * C13349 +
            C2864 * C13354) *
               C139555 +
           (C310 * C139544 + C309 * C13356 + C307 * C13349 + C308 * C13354) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139362 * C822 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C139362 * C823 +
           ((C14417 + C14416 + C14391 + C14390) * C13351 +
            ((C273 * C5803 + C139480 * C5921) * C13354 +
             (C273 * C5806 + C139480 * C5924) * C13349 + C14412 * C13356 +
             C14413 * C139544) *
                C139555) *
               C139362 * C824) *
              C825 +
          (((C14400 + C14401 + C14402 + C14403) * C13351 +
            (C14404 + C14405 + C14406 + C14407) * C139555) *
               C139362 * C823 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139362 * C822 -
           (((C273 * C5804 + C139480 * C5922) * C139544 +
             (C273 * C5801 + C139480 * C5919) * C13356 + C14413 * C13349 +
             C14412 * C13354) *
                C139555 +
            (C14407 + C14406 + C14405 + C14404) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C13439 +
           (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
               C13351 +
           (C13354 * C829 + C13349 * C837 + C13356 * C828 + C139544 * C836) *
               C13440 +
           (C13354 * C939 + C13349 * C1167 + C13356 * C938 + C139544 * C1166) *
               C139555) *
              C139480 * C139362 * C139346 * C96 -
          ((C13356 * C937 + C139544 * C1165 + C13354 * C938 + C13349 * C1166) *
               C139555 +
           (C13356 * C827 + C139544 * C835 + C13354 * C828 + C13349 * C836) *
               C13440 +
           (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
               C13351 +
           (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
               C13439) *
              C139480 * C139362 * C139346 * C97 +
          ((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
               C13439 +
           (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
               C13351 +
           (C13354 * C827 + C13349 * C835 + C13356 * C833 + C139544 * C841) *
               C13440 +
           (C13354 * C937 + C13349 * C1165 + C13356 * C943 + C139544 * C1171) *
               C139555) *
              C139480 * C139362 * C139346 * C98 -
          ((C13356 * C2775 + C139544 * C2939 + C13354 * C943 + C13349 * C1171) *
               C139555 +
           (C13356 * C2695 + C139544 * C2696 + C13354 * C833 + C13349 * C841) *
               C13440 +
           (C13356 * C191 + C139544 * C364 + C13354 * C190 + C13349 * C363) *
               C13351 +
           (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
               C13439) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139362 * C822 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139362 * C823 +
           ((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
            (C13354 * C5803 + C13349 * C5806 + C13356 * C5802 +
             C139544 * C5805) *
                C13440 +
            (C13354 * C5865 + C13349 * C5977 + C13356 * C5864 +
             C139544 * C5976) *
                C139555) *
               C139480 * C139362 * C824) *
              C825 +
          (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
            (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
               C139480 * C139362 * C823 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139362 * C822 -
           ((C13356 * C5863 + C139544 * C5975 + C13354 * C5864 +
             C13349 * C5976) *
                C139555 +
            (C13356 * C5801 + C139544 * C5804 + C13354 * C5802 +
             C13349 * C5805) *
                C13440 +
            (C14563 + C14562) * C13351 + (C14561 + C14560) * C13439) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
            C13679 + C13679 + C139555 * C1249) *
               C13349 +
           (C13712 + C13713) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) * C139480 *
              C139362 * C139346 * C97 +
          ((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) * C139480 *
              C139362 * C139346 * C98 -
          ((C13676 * C2695 + C13698 + C13698 + C139555 * C3014 + C13675 * C110 +
            C13699 + C13699 + C13351 * C421) *
               C139544 +
           (C13717 + C13716) * C13349) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139362 * C822 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C139362 * C823 +
           ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
             C14671 + C14671 + C139555 * C6030) *
                C13349 +
            (C14692 + C14693) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C14691 + C14690) * C13349 +
            (C13675 * C827 + C14678 + C14678 + C13351 * C1247 + C13676 * C832 +
             C14679 + C14679 + C139555 * C1252) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139362 * C822 -
           ((C13676 * C5801 + C14680 + C14680 + C139555 * C6028 +
             C13675 * C832 + C14681 + C14681 + C13351 * C1252) *
                C139544 +
            (C14693 + C14692) * C13349) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C13439 +
                      (C273 * C187 + C139480 * C499) * C13351 +
                      (C273 * C829 + C139480 * C1053) * C13440 +
                      (C273 * C939 + C139480 * C1359) * C139555) *
                         C13349 +
                     (C13784 + C13785 + C13786 + C13787) * C139544) *
                        C139362 * C139346 * C96 -
                    ((C13788 + C13789 + C13790 + C13791) * C139544 +
                     (C13787 + C13786 + C13785 + C13784) * C13349) *
                        C139362 * C139346 * C97 +
                    ((C13791 + C13790 + C13789 + C13788) * C13349 +
                     (C13792 + C13793 + C13794 + C13795) * C139544) *
                        C139362 * C139346 * C98 -
                    (((C273 * C2775 + C139480 * C3095) * C139555 +
                      (C273 * C2695 + C139480 * C2857) * C13440 +
                      C521 * C13351 + C309 * C13439) *
                         C139544 +
                     (C13795 + C13794 + C13793 + C13792) * C13349) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139362 * C822 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C139362 * C823 +
                     ((C14411 * C13439 + C14806 * C13351 +
                       (C273 * C5803 + C139480 * C5921) * C13440 +
                       (C273 * C5865 + C139480 * C6086) * C139555) *
                          C13349 +
                      (C14800 + C14801 + C14802 + C14808) * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C14797 + C14796 + C14795 + C14794) * C13349 +
                      (C1085 * C13439 + C1378 * C13351 + C1090 * C13440 +
                       C1381 * C139555) *
                          C139544) *
                         C139362 * C823 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C139362 * C822 -
                     (((C273 * C5863 + C139480 * C6084) * C139555 +
                       (C273 * C5801 + C139480 * C5919) * C13440 +
                       C1381 * C13351 + C1090 * C13439) *
                          C139544 +
                      (C14808 + C14802 + C14801 + C14800) * C13349) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C273 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C139480) *
               C13351 +
           ((C13354 * C829 + C13349 * C837 + C13356 * C828 + C139544 * C836) *
                C273 +
            (C13354 * C1053 + C13349 * C1461 + C13356 * C1052 +
             C139544 * C1460) *
                C139480) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C13356 * C1051 + C139544 * C1459 + C13354 * C1052 +
             C13349 * C1460) *
                C139480 +
            (C13356 * C827 + C139544 * C835 + C13354 * C828 + C13349 * C836) *
                C273) *
               C139555 +
           ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C139480 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C273) *
               C13351) *
              C139362 * C139346 * C97 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C273 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C139480) *
               C13351 +
           ((C13354 * C827 + C13349 * C835 + C13356 * C833 + C139544 * C841) *
                C273 +
            (C13354 * C1051 + C13349 * C1459 + C13356 * C1057 +
             C139544 * C1465) *
                C139480) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C13356 * C2857 + C139544 * C3176 + C13354 * C1057 +
             C13349 * C1465) *
                C139480 +
            (C13356 * C2695 + C139544 * C2696 + C13354 * C833 + C13349 * C841) *
                C273) *
               C139555 +
           ((C13356 * C278 + C139544 * C581 + C13354 * C277 + C13349 * C580) *
                C139480 +
            (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
                C273) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139362 * C822 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139362 * C823 +
           (((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
            ((C13354 * C5803 + C13349 * C5806 + C13356 * C5802 +
              C139544 * C5805) *
                 C273 +
             (C13354 * C5921 + C13349 * C6139 + C13356 * C5920 +
              C139544 * C6138) *
                 C139480) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
            ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                C139555) *
               C139362 * C823 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139362 * C822 -
           (((C13356 * C5919 + C139544 * C6137 + C13354 * C5920 +
              C13349 * C6138) *
                 C139480 +
             (C13356 * C5801 + C139544 * C5804 + C13354 * C5802 +
              C13349 * C5805) *
                 C273) *
                C139555 +
            ((C14930 + C14929) * C139480 + (C14561 + C14560) * C273) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C273 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C139480) *
               C13349 +
           ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) * C139544) *
              C139362 * C139346 * C96 -
          (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
           ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
              C139362 * C139346 * C97 +
          (((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
           ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) * C139544) *
              C139362 * C139346 * C98 -
          (((C13440 * C2857 + C139555 * C3251 + C13439 * C278 + C13351 * C637) *
                C139480 +
            (C13440 * C2695 + C139555 * C2775 + C13439 * C110 + C13351 * C191) *
                C273) *
               C139544 +
           ((C13945 + C13944) * C139480 + (C13475 + C13474) * C273) * C13349) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139362 * C822 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139362 * C823 +
           (((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C13349 +
            ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
            ((C13439 * C827 + C13351 * C937 + C13440 * C832 + C139555 * C942) *
                 C273 +
             (C13439 * C1051 + C13351 * C1541 + C13440 * C1056 +
              C139555 * C1546) *
                 C139480) *
                C139544) *
               C139362 * C823 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139362 * C822 -
           (((C13440 * C5919 + C139555 * C6190 + C13439 * C1056 +
              C13351 * C1546) *
                 C139480 +
             (C13440 * C5801 + C139555 * C5863 + C13439 * C832 +
              C13351 * C942) *
                 C273) *
                C139544 +
            ((C15040 + C15039) * C139480 + (C14283 + C14282) * C273) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
            (C711 * C829 + C1658 + C1658 + C139480 * C1645) * C139555) *
               C13349 +
           (C14012 + C14013) * C139544) *
              C139362 * C139346 * C96 -
          ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) * C139362 *
              C139346 * C97 +
          ((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) * C139362 *
              C139346 * C98 -
          (((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139555 +
            C744 * C13351) *
               C139544 +
           (C14017 + C14016) * C13349) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139362 * C822 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139362 * C823 +
           ((C15155 * C13351 +
             (C711 * C5803 + C6249 + C6249 + C139480 * C6245) * C139555) *
                C13349 +
            (C15145 + C15157) * C139544) *
               C139362 * C824) *
              C825 +
          (((C15142 + C15141) * C13349 +
            (C1676 * C13351 + C1679 * C139555) * C139544) *
               C139362 * C823 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139362 * C822 -
           (((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139555 +
             C1679 * C13351) *
                C139544 +
            (C15157 + C15145) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139362 * C139560 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139362 * C139561 +
                     ((C14159 + C14158) * C139480 * C13351 +
                      (C20294 + C20295) * C139480 * C139555) *
                         C139362 * C7039) *
                        C139521 +
                    (((C14160 + C14161) * C139480 * C13351 +
                      (C14162 + C14163) * C139480 * C139555) *
                         C139362 * C139561 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139362 * C139560 -
                     ((C13355 * C5801 + C14138 + C14138 + C139544 * C5807 +
                       C13353 * C5802 + C14139 + C14139 + C13349 * C5808) *
                          C139480 * C139555 +
                      (C14163 + C14162) * C139480 * C13351) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139362 * C139560 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139362 * C139561 +
           ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C13354 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C13349 +
            (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
               C139480 * C139362 * C7039) *
              C139521 +
          (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
            (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
               C139480 * C139362 * C139561 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139362 * C139560 -
           ((C13440 * C5804 + C139555 * C5866 + C13439 * C840 + C13351 * C950) *
                C139544 +
            (C13440 * C5801 + C139555 * C5863 + C13439 * C832 + C13351 * C942) *
                C13356 +
            (C14285 + C14284) * C13349 + (C14283 + C14282) * C13354) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139362 * C139560 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C139362 * C139561 +
           ((C14417 + C14416 + C14391 + C14390) * C13351 +
            (C20444 + C20445 + C20440 + C20441) * C139555) *
               C139362 * C7039) *
              C139521 +
          (((C14400 + C14401 + C14402 + C14403) * C13351 +
            (C14404 + C14405 + C14406 + C14407) * C139555) *
               C139362 * C139561 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139362 * C139560 -
           (((C273 * C5804 + C139480 * C5922) * C139544 +
             (C273 * C5801 + C139480 * C5919) * C13356 + C14413 * C13349 +
             C14412 * C13354) *
                C139555 +
            (C14407 + C14406 + C14405 + C14404) * C13351) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139362 * C139560 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139362 * C139561 +
           ((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
            (C20522 + C20523) * C13440 + (C20524 + C20525) * C139555) *
               C139480 * C139362 * C7039) *
              C139521 +
          (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
            (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
               C139480 * C139362 * C139561 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139362 * C139560 -
           ((C13356 * C5863 + C139544 * C5975 + C13354 * C5864 +
             C13349 * C5976) *
                C139555 +
            (C13356 * C5801 + C139544 * C5804 + C13354 * C5802 +
             C13349 * C5805) *
                C13440 +
            (C14563 + C14562) * C13351 + (C14561 + C14560) * C13439) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139362 * C139560 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C139362 * C139561 +
           ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
             C14671 + C14671 + C139555 * C6030) *
                C13349 +
            (C14692 + C14693) * C139544) *
               C139480 * C139362 * C7039) *
              C139521 +
          (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
               C139480 * C139362 * C139561 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139362 * C139560 -
           ((C13676 * C5801 + C14680 + C14680 + C139555 * C6028 +
             C13675 * C832 + C14681 + C14681 + C13351 * C1252) *
                C139544 +
            (C14693 + C14692) * C13349) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139362 * C139560 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C139362 * C139561 +
                     ((C14411 * C13439 + C14806 * C13351 + C20442 * C13440 +
                       C20668 * C139555) *
                          C13349 +
                      (C14800 + C14801 + C14802 + C14808) * C139544) *
                         C139362 * C7039) *
                        C139521 +
                    (((C14797 + C14796 + C14795 + C14794) * C13349 +
                      (C16790 + C16791 + C16792 + C16793) * C139544) *
                         C139362 * C139561 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C139362 * C139560 -
                     (((C273 * C5863 + C139480 * C6084) * C139555 +
                       (C273 * C5801 + C139480 * C5919) * C13440 +
                       C1381 * C13351 + C1090 * C13439) *
                          C139544 +
                      (C14808 + C14802 + C14801 + C14800) * C13349) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139362 * C139560 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139362 * C139561 +
           (((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
            ((C20522 + C20523) * C273 + (C20741 + C20742) * C139480) *
                C139555) *
               C139362 * C7039) *
              C139521 +
          ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
            ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                C139555) *
               C139362 * C139561 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139362 * C139560 -
           (((C13356 * C5919 + C139544 * C6137 + C13354 * C5920 +
              C13349 * C6138) *
                 C139480 +
             (C13356 * C5801 + C139544 * C5804 + C13354 * C5802 +
              C13349 * C5805) *
                 C273) *
                C139555 +
            ((C14930 + C14929) * C139480 + (C14561 + C14560) * C273) * C13351) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139362 * C139560 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139362 * C139561 +
           (((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C13349 +
            ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) *
                C139544) *
               C139362 * C7039) *
              C139521 +
          ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
            ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                C139544) *
               C139362 * C139561 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139362 * C139560 -
           (((C13440 * C5919 + C139555 * C6190 + C13439 * C1056 +
              C13351 * C1546) *
                 C139480 +
             (C13440 * C5801 + C139555 * C5863 + C13439 * C832 +
              C13351 * C942) *
                 C273) *
                C139544 +
            ((C15040 + C15039) * C139480 + (C14283 + C14282) * C273) * C13349) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139362 * C139560 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139362 * C139561 +
           ((C15155 * C13351 + C20885 * C139555) * C13349 +
            (C15145 + C15157) * C139544) *
               C139362 * C7039) *
              C139521 +
          (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) *
               C139362 * C139561 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139362 * C139560 -
           (((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139555 +
             C1679 * C13351) *
                C139544 +
            (C15157 + C15145) * C13349) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139530 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139426) *
                        C139560 +
                    (((C18175 + C18174) * C139480 * C13351 +
                      (C24014 + C24015) * C139480 * C139555) *
                         C139426 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139530) *
                        C139561 +
                    (((C14159 + C14158) * C139480 * C13351 +
                      (C20294 + C20295) * C139480 * C139555) *
                         C139530 -
                     ((C13355 * C23997 + C24008 + C24008 + C139544 * C24001 +
                       C13353 * C23998 + C24009 + C24009 + C13349 * C24002) *
                          C139480 * C139555 +
                      (C24015 + C24014) * C139480 * C13351) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139530 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139426) *
              C139560 +
          (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
             C139555 * C8678) *
                C13354 +
            (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
             C139555 * C8681) *
                C13349 +
            (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
               C139480 * C139426 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139530) *
              C139561 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C13354 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C13349 +
            (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
               C139480 * C139530 -
           ((C13440 * C23999 + C139555 * C24115 + C13439 * C8594 +
             C13351 * C8680) *
                C139544 +
            (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
             C13351 * C8677) *
                C13356 +
            (C13440 * C24000 + C139555 * C24116 + C13439 * C8595 +
             C13351 * C8681) *
                C13349 +
            (C13440 * C23998 + C139555 * C24114 + C13439 * C8592 +
             C13351 * C8678) *
                C13354) *
               C139480 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13354 +
                       (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
                       C304 * C139544) *
                          C13351 +
                      (C14414 + C14415 + C14388 + C14389) * C139555) *
                         C139530 -
                     ((C18450 + C18451 + C18468 + C18469) * C139555 +
                      (C2019 * C139544 + C2020 * C13356 +
                       (C273 * C1770 + C139480 * C1994) * C13349 +
                       (C273 * C1762 + C139480 * C1986) * C13354) *
                          C13351) *
                         C139426) *
                        C139560 +
                    (((C18469 + C18468 + C18451 + C18450) * C13351 +
                      (C24228 + C24229 + C24224 + C24225) * C139555) *
                         C139426 -
                     ((C14390 + C14391 + C14416 + C14417) * C139555 +
                      (C14389 + C14388 + C14415 + C14414) * C13351) *
                         C139530) *
                        C139561 +
                    (((C14417 + C14416 + C14391 + C14390) * C13351 +
                      (C20444 + C20445 + C20440 + C20441) * C139555) *
                         C139530 -
                     (((C273 * C23999 + C139480 * C24217) * C139544 +
                       (C273 * C23997 + C139480 * C24215) * C13356 +
                       (C273 * C24000 + C139480 * C24218) * C13349 +
                       (C273 * C23998 + C139480 * C24216) * C13354) *
                          C139555 +
                      (C24225 + C24224 + C24229 + C24228) * C13351) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139530 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139426) *
              C139560 +
          (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
            (C24338 + C24339) * C13440 + (C24340 + C24341) * C139555) *
               C139480 * C139426 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139530) *
              C139561 +
          (((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
            (C20522 + C20523) * C13440 + (C20524 + C20525) * C139555) *
               C139480 * C139530 -
           ((C13356 * C24113 + C139544 * C24327 + C13354 * C24114 +
             C13349 * C24328) *
                C139555 +
            (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
             C13349 * C24000) *
                C13440 +
            (C24341 + C24340) * C13351 + (C24339 + C24338) * C13439) *
               C139480 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C13349 +
                      (C13712 + C13713) * C139544) *
                         C139480 * C139530 -
                     ((C15722 + C15723) * C139544 +
                      (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
                       C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                          C13349) *
                         C139480 * C139426) *
                        C139560 +
                    (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
                       C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                          C13349 +
                      (C18768 + C18769) * C139544) *
                         C139480 * C139426 -
                     ((C14690 + C14691) * C139544 +
                      (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                       C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                          C13349) *
                         C139480 * C139530) *
                        C139561 +
                    (((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                       C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                          C13349 +
                      (C14692 + C14693) * C139544) *
                         C139480 * C139530 -
                     ((C13676 * C23997 + C24442 + C24442 + C139555 * C24439 +
                       C13675 * C8591 + C24443 + C24443 + C13351 * C8914) *
                          C139544 +
                      (C13676 * C23998 + C24444 + C24444 + C139555 * C24440 +
                       C13675 * C8592 + C24445 + C24445 + C13351 * C8915) *
                          C13349) *
                         C139480 * C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[21] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139530 -
                     ((C15824 + C15825 + C15826 + C15827) * C139544 +
                      (C18907 * C139555 + C18465 * C13440 +
                       (C273 * C1872 + C139480 * C2292) * C13351 +
                       (C273 * C1762 + C139480 * C1986) * C13439) *
                          C13349) *
                         C139426) *
                        C139560 +
                    (((C18465 * C13439 + C18907 * C13351 + C24226 * C13440 +
                       C24548 * C139555) *
                          C13349 +
                      (C18902 + C18903 + C18904 + C18909) * C139544) *
                         C139426 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C139530) *
                        C139561 +
                    (((C14411 * C13439 + C14806 * C13351 + C20442 * C13440 +
                       C20668 * C139555) *
                          C13349 +
                      (C14800 + C14801 + C14802 + C14808) * C139544) *
                         C139530 -
                     (((C273 * C24113 + C139480 * C24543) * C139555 +
                       (C273 * C23997 + C139480 * C24215) * C13440 +
                       C18908 * C13351 + C18466 * C13439) *
                          C139544 +
                      ((C273 * C24114 + C139480 * C24544) * C139555 +
                       (C273 * C23998 + C139480 * C24216) * C13440 +
                       C24548 * C13351 + C24226 * C13439) *
                          C13349) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139530 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139426) *
              C139560 +
          ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
            ((C24338 + C24339) * C273 + (C24653 + C24654) * C139480) *
                C139555) *
               C139426 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139530) *
              C139561 +
          ((((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
            ((C20522 + C20523) * C273 + (C20741 + C20742) * C139480) *
                C139555) *
               C139530 -
           (((C13356 * C24215 + C139544 * C24646 + C13354 * C24216 +
              C13349 * C24647) *
                 C139480 +
             (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
              C13349 * C24000) *
                 C273) *
                C139555 +
            ((C24654 + C24653) * C139480 + (C24339 + C24338) * C273) * C13351) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139530 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139426) *
              C139560 +
          ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C13349 +
            ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                C139544) *
               C139426 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139530) *
              C139561 +
          ((((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C13349 +
            ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) *
                C139544) *
               C139530 -
           (((C13440 * C24215 + C139555 * C24752 + C13439 * C8757 +
              C13351 * C9148) *
                 C139480 +
             (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
              C13351 * C8677) *
                 C273) *
                C139544 +
            ((C13440 * C24216 + C139555 * C24753 + C13439 * C8758 +
              C13351 * C9149) *
                 C139480 +
             (C13440 * C23998 + C139555 * C24114 + C13439 * C8592 +
              C13351 * C8678) *
                 C273) *
                C13349) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139530 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139426) *
              C139560 +
          (((C19327 * C13351 + C24861 * C139555) * C13349 +
            (C19320 + C19329) * C139544) *
               C139426 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139530) *
              C139561 +
          (((C15155 * C13351 + C20885 * C139555) * C13349 +
            (C15145 + C15157) * C139544) *
               C139530 -
           (((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C139555 +
             C19328 * C13351) *
                C139544 +
            ((C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C139555 +
             C24861 * C13351) *
                C13349) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[22] += (-std::pow(Pi, 2.5) *
                   (((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                      C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                         C139480 * C13351 +
                     (C14156 + C14157) * C139480 * C139555) *
                        C139362 * C5796 -
                    ((C14158 + C14159) * C139480 * C139555 +
                     (C14157 + C14156) * C139480 * C13351) *
                        C139362 * C5797 +
                    ((C14159 + C14158) * C139480 * C13351 +
                     (C20294 + C20295) * C139480 * C139555) *
                        C139362 * C5798 -
                    ((C13355 * C20277 + C20288 + C20288 + C139544 * C20281 +
                      C13353 * C20278 + C20289 + C20289 + C13349 * C20282) *
                         C139480 * C139555 +
                     (C20295 + C20294) * C139480 * C13351) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139362 * C139398) *
                        C5151 +
                    (((C14160 + C14161) * C139480 * C13351 +
                      (C14162 + C14163) * C139480 * C139555) *
                         C139362 * C139398 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139362 * C5149) *
                        C5152 +
                    (((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                       C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                          C139480 * C13351 +
                      (C16258 + C16259) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C13355 * C834 + C16252 + C16252 + C139544 * C850 +
                       C13353 * C832 + C16253 + C16253 + C13349 * C848) *
                          C139480 * C139555 +
                      (C16259 + C16258) * C139480 * C13351) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C1757 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C1758 +
                     ((C13353 * C1763 + C15260 + C15260 + C13349 * C1779 +
                       C13355 * C1764 + C15261 + C15261 + C139544 * C1780) *
                          C139480 * C13351 +
                      (C21000 + C21001) * C139480 * C139555) *
                         C1759) *
                        C5149 +
                    (((C18175 + C18174) * C139480 * C13351 +
                      (C13353 * C8592 + C18158 + C18158 + C13349 * C8598 +
                       C13355 * C8591 + C18159 + C18159 + C139544 * C8597) *
                          C139480 * C139555) *
                         C1758 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C1757 -
                     ((C13355 * C20983 + C20994 + C20994 + C139544 * C20987 +
                       C13353 * C20984 + C20995 + C20995 + C13349 * C20988) *
                          C139480 * C139555 +
                      (C21001 + C21000) * C139480 * C13351) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C13354 +
           (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
               C13349 +
           (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
              C139480 * C139362 * C5796 -
          ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
           (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
               C13349 +
           (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
               C13354) *
              C139480 * C139362 * C5797 +
          ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
               C13354 +
           (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
               C13349 +
           (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
              C139480 * C139362 * C5798 -
          ((C13440 * C20279 + C139555 * C20363 + C13439 * C5805 +
            C13351 * C5867) *
               C139544 +
           (C13440 * C20277 + C139555 * C20361 + C13439 * C5802 +
            C13351 * C5864) *
               C13356 +
           (C13440 * C20280 + C139555 * C20364 + C13439 * C5806 +
            C13351 * C5868) *
               C13349 +
           (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
            C13351 * C5865) *
               C13354) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139362 * C5149 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
            (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
               C139480 * C139362 * C139398 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
            (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
               C139480 * C139362 * C5149 -
           ((C13440 * C842 + C139555 * C952 + C13439 * C841 + C13351 * C951) *
                C139544 +
            (C13440 * C834 + C139555 * C944 + C13439 * C833 + C13351 * C943) *
                C13356 +
            (C16369 + C16368) * C13349 + (C16367 + C16366) * C13354) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C1757 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C1758 +
           ((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
             C139555 * C6411) *
                C13354 +
            (C13439 * C1771 + C13351 * C1881 + C13440 * C6328 +
             C139555 * C6414) *
                C13349 +
            (C15390 + C15391) * C13356 + (C15392 + C15393) * C139544) *
               C139480 * C1759) *
              C5149 +
          (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
             C139555 * C8678) *
                C13354 +
            (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
             C139555 * C8681) *
                C13349 +
            (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
               C139480 * C1758 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C1757 -
           ((C13440 * C20985 + C139555 * C21101 + C13439 * C6327 +
             C13351 * C6413) *
                C139544 +
            (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
             C13351 * C6410) *
                C13356 +
            (C13440 * C20986 + C139555 * C21102 + C13439 * C6328 +
             C13351 * C6414) *
                C13349 +
            (C13440 * C20984 + C139555 * C21100 + C13439 * C6325 +
             C13351 * C6411) *
                C13354) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13354 +
            (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
            C304 * C139544) *
               C13351 +
           (C14414 + C14415 + C14388 + C14389) * C139555) *
              C139362 * C5796 -
          ((C14390 + C14391 + C14416 + C14417) * C139555 +
           (C14389 + C14388 + C14415 + C14414) * C13351) *
              C139362 * C5797 +
          ((C14417 + C14416 + C14391 + C14390) * C13351 +
           (C20444 + C20445 + C20440 + C20441) * C139555) *
              C139362 * C5798 -
          (((C273 * C20279 + C139480 * C20433) * C139544 +
            (C273 * C20277 + C139480 * C20431) * C13356 +
            (C273 * C20280 + C139480 * C20434) * C13349 +
            (C273 * C20278 + C139480 * C20432) * C13354) *
               C139555 +
           (C20441 + C20440 + C20445 + C20444) * C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139362 * C5149 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C139362 * C139398) *
              C5151 +
          (((C14400 + C14401 + C14402 + C14403) * C13351 +
            (C14404 + C14405 + C14406 + C14407) * C139555) *
               C139362 * C139398 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          (((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
                C13351 +
            (C16468 + C16469 + C16470 + C16471) * C139555) *
               C139362 * C5149 -
           (((C273 * C842 + C139480 * C1066) * C139544 +
             (C273 * C834 + C139480 * C1058) * C13356 + C1091 * C13349 +
             C1090 * C13354) *
                C139555 +
            (C16471 + C16470 + C16469 + C16468) * C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C1757 -
           ((C18450 + C18451 + C18468 + C18469) * C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C13354 +
             (C273 * C1771 + C139480 * C1995) * C13349 + C2021 * C13356 +
             C2022 * C139544) *
                C13351 +
            (C21214 + C21215 + C21210 + C21211) * C139555) *
               C1759) *
              C5149 +
          (((C18469 + C18468 + C18451 + C18450) * C13351 +
            ((C273 * C8592 + C139480 * C8758) * C13354 +
             (C273 * C8595 + C139480 * C8761) * C13349 + C18466 * C13356 +
             C18467 * C139544) *
                C139555) *
               C1758 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C1757 -
           (((C273 * C20985 + C139480 * C21203) * C139544 +
             (C273 * C20983 + C139480 * C21201) * C13356 +
             (C273 * C20986 + C139480 * C21204) * C13349 +
             (C273 * C20984 + C139480 * C21202) * C13354) *
                C139555 +
            (C21211 + C21210 + C21215 + C21214) * C13351) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C13439 +
           (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
               C13351 +
           (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
              C139480 * C139362 * C5796 -
          ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
           (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
              C139480 * C139362 * C5797 +
          ((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
           (C20522 + C20523) * C13440 + (C20524 + C20525) * C139555) *
              C139480 * C139362 * C5798 -
          ((C13356 * C20361 + C139544 * C20511 + C13354 * C20362 +
            C13349 * C20512) *
               C139555 +
           (C13356 * C20277 + C139544 * C20279 + C13354 * C20278 +
            C13349 * C20280) *
               C13440 +
           (C20525 + C20524) * C13351 + (C20523 + C20522) * C13439) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139362 * C5149 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
            (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
               C139480 * C139362 * C139398 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C13439 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C13351 +
            (C16578 + C16579) * C13440 + (C16580 + C16581) * C139555) *
               C139480 * C139362 * C5149 -
           ((C13356 * C944 + C139544 * C1172 + C13354 * C942 + C13349 * C1170) *
                C139555 +
            (C13356 * C834 + C139544 * C842 + C13354 * C832 + C13349 * C840) *
                C13440 +
            (C16581 + C16580) * C13351 + (C16579 + C16578) * C13439) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C1757 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C1758 +
           ((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
             C139544 * C1772) *
                C13439 +
            (C13354 * C1873 + C13349 * C2101 + C13356 * C1874 +
             C139544 * C2102) *
                C13351 +
            (C21324 + C21325) * C13440 + (C21326 + C21327) * C139555) *
               C139480 * C1759) *
              C5149 +
          (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
            (C13354 * C8592 + C13349 * C8595 + C13356 * C8591 +
             C139544 * C8594) *
                C13440 +
            (C13354 * C8678 + C13349 * C8838 + C13356 * C8677 +
             C139544 * C8837) *
                C139555) *
               C139480 * C1758 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C1757 -
           ((C13356 * C21099 + C139544 * C21313 + C13354 * C21100 +
             C13349 * C21314) *
                C139555 +
            (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
             C13349 * C20986) *
                C13440 +
            (C21327 + C21326) * C13351 + (C21325 + C21324) * C13439) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
            C13679 + C13679 + C139555 * C1249) *
               C13349 +
           (C13712 + C13713) * C139544) *
              C139480 * C139362 * C5796 -
          ((C14690 + C14691) * C139544 +
           (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
            C14669 + C14669 + C13351 * C1249) *
               C13349) *
              C139480 * C139362 * C5797 +
          ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
            C14671 + C14671 + C139555 * C6030) *
               C13349 +
           (C14692 + C14693) * C139544) *
              C139480 * C139362 * C5798 -
          ((C13676 * C20277 + C20594 + C20594 + C139555 * C20591 +
            C13675 * C5802 + C20595 + C20595 + C13351 * C6029) *
               C139544 +
           (C13676 * C20278 + C20596 + C20596 + C139555 * C20592 +
            C13675 * C5803 + C20597 + C20597 + C13351 * C6030) *
               C13349) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139362 * C5149 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
               C139480 * C139362 * C139398 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) *
               C139480 * C139362 * C5149 -
           ((C13676 * C834 + C16684 + C16684 + C139555 * C1254 + C13675 * C833 +
             C16685 + C16685 + C13351 * C1253) *
                C139544 +
            (C16691 + C16690) * C13349) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C1757 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C1758 +
           ((C13675 * C1763 + C15702 + C15702 + C13351 * C2183 +
             C13676 * C6325 + C15703 + C15703 + C139555 * C6648) *
                C13349 +
            (C15724 + C15725) * C139544) *
               C139480 * C1759) *
              C5149 +
          (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
             C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                C13349 +
            (C18768 + C18769) * C139544) *
               C139480 * C1758 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C1757 -
           ((C13676 * C20983 + C21428 + C21428 + C139555 * C21425 +
             C13675 * C6324 + C21429 + C21429 + C13351 * C6647) *
                C139544 +
            (C13676 * C20984 + C21430 + C21430 + C139555 * C21426 +
             C13675 * C6325 + C21431 + C21431 + C13351 * C6648) *
                C13349) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13439 +
            (C273 * C187 + C139480 * C499) * C13351 + C14408 * C13440 +
            C14805 * C139555) *
               C13349 +
           (C13784 + C13785 + C13786 + C13787) * C139544) *
              C139362 * C5796 -
          ((C14794 + C14795 + C14796 + C14797) * C139544 +
           (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
            C14408 * C13439) *
               C13349) *
              C139362 * C5797 +
          ((C14411 * C13439 + C14806 * C13351 + C20442 * C13440 +
            C20668 * C139555) *
               C13349 +
           (C14800 + C14801 + C14802 + C14808) * C139544) *
              C139362 * C5798 -
          (((C273 * C20361 + C139480 * C20663) * C139555 +
            (C273 * C20277 + C139480 * C20431) * C13440 + C14807 * C13351 +
            C14412 * C13439) *
               C139544 +
           ((C273 * C20362 + C139480 * C20664) * C139555 +
            (C273 * C20278 + C139480 * C20432) * C13440 + C20668 * C13351 +
            C20442 * C13439) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C273 * C106 + C139480 * C274) * C13439 +
                                 (C273 * C187 + C139480 * C499) * C13351 +
                                 C14408 * C13440 + C14805 * C139555) *
                                    C13349 +
                                (C13784 + C13785 + C13786 + C13787) * C139544) *
                                   C139362 * C5149 -
                               ((C14794 + C14795 + C14796 + C14797) * C139544 +
                                (C14806 * C139555 + C14411 * C13440 +
                                 C14805 * C13351 + C14408 * C13439) *
                                    C13349) *
                                   C139362 * C139398) *
                                  C5151 +
                              (((C14797 + C14796 + C14795 + C14794) * C13349 +
                                (C16790 + C16791 + C16792 + C16793) * C139544) *
                                   C139362 * C139398 -
                               ((C13788 + C13789 + C13790 + C13791) * C139544 +
                                (C13787 + C13786 + C13785 + C13784) * C13349) *
                                   C139362 * C5149) *
                                  C5152 +
                              (((C13791 + C13790 + C13789 + C13788) * C13349 +
                                (C13792 + C13793 + C13794 + C13795) * C139544) *
                                   C139362 * C5149 -
                               (((C273 * C944 + C139480 * C1364) * C139555 +
                                 (C273 * C834 + C139480 * C1058) * C13440 +
                                 C3101 * C13351 + C2864 * C13439) *
                                    C139544 +
                                (C16793 + C16792 + C16791 + C16790) * C13349) *
                                   C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13439 +
             (C273 * C187 + C139480 * C499) * C13351 + C14408 * C13440 +
             C14805 * C139555) *
                C13349 +
            (C13784 + C13785 + C13786 + C13787) * C139544) *
               C1757 -
           ((C15824 + C15825 + C15826 + C15827) * C139544 +
            (C18907 * C139555 + C18465 * C13440 +
             (C273 * C1872 + C139480 * C2292) * C13351 +
             (C273 * C1762 + C139480 * C1986) * C13439) *
                C13349) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C13439 +
             (C273 * C1873 + C139480 * C2293) * C13351 + C21212 * C13440 +
             C21534 * C139555) *
                C13349 +
            (C15828 + C15829 + C15830 + C15834) * C139544) *
               C1759) *
              C5149 +
          (((C18465 * C13439 + C18907 * C13351 +
             (C273 * C8592 + C139480 * C8758) * C13440 +
             (C273 * C8678 + C139480 * C8995) * C139555) *
                C13349 +
            (C18902 + C18903 + C18904 + C18909) * C139544) *
               C1758 -
           ((C14794 + C14795 + C14796 + C14797) * C139544 +
            (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
             C14408 * C13439) *
                C13349) *
               C1757 -
           (((C273 * C21099 + C139480 * C21529) * C139555 +
             (C273 * C20983 + C139480 * C21201) * C13440 + C15833 * C13351 +
             C15496 * C13439) *
                C139544 +
            ((C273 * C21100 + C139480 * C21530) * C139555 +
             (C273 * C20984 + C139480 * C21202) * C13440 + C21534 * C13351 +
             C21212 * C13439) *
                C13349) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C273 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C139480) *
               C13351 +
           ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) * C139555) *
              C139362 * C5796 -
          (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
           ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
              C139362 * C5797 +
          (((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
           ((C20522 + C20523) * C273 + (C20741 + C20742) * C139480) * C139555) *
              C139362 * C5798 -
          (((C13356 * C20431 + C139544 * C20734 + C13354 * C20432 +
             C13349 * C20735) *
                C139480 +
            (C13356 * C20277 + C139544 * C20279 + C13354 * C20278 +
             C13349 * C20280) *
                C273) *
               C139555 +
           ((C20742 + C20741) * C139480 + (C20523 + C20522) * C273) * C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139362 * C139398) *
              C5151 +
          ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
            ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                C139555) *
               C139362 * C139398 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C273 +
             (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                 C139480) *
                C13351 +
            ((C16578 + C16579) * C273 + (C16896 + C16897) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C13356 * C1058 + C139544 * C1466 + C13354 * C1056 +
              C13349 * C1464) *
                 C139480 +
             (C13356 * C834 + C139544 * C842 + C13354 * C832 + C13349 * C840) *
                 C273) *
                C139555 +
            ((C16897 + C16896) * C139480 + (C16579 + C16578) * C273) * C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C1757 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C1758 +
           (((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C13354 * C1987 + C13349 * C2395 + C13356 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C13351 +
            ((C21324 + C21325) * C273 + (C21639 + C21640) * C139480) *
                C139555) *
               C1759) *
              C5149 +
          ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
            ((C13354 * C8592 + C13349 * C8595 + C13356 * C8591 +
              C139544 * C8594) *
                 C273 +
             (C13354 * C8758 + C13349 * C9072 + C13356 * C8757 +
              C139544 * C9071) *
                 C139480) *
                C139555) *
               C1758 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C1757 -
           (((C13356 * C21201 + C139544 * C21632 + C13354 * C21202 +
              C13349 * C21633) *
                 C139480 +
             (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
              C13349 * C20986) *
                 C273) *
                C139555 +
            ((C21640 + C21639) * C139480 + (C21325 + C21324) * C273) * C13351) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C273 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C139480) *
               C13349 +
           ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) * C139544) *
              C139362 * C5796 -
          (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
           ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C139480 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C273) *
               C13349) *
              C139362 * C5797 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C273 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C139480) *
               C13349 +
           ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) * C139544) *
              C139362 * C5798 -
          (((C13440 * C20431 + C139555 * C20808 + C13439 * C5920 +
             C13351 * C6191) *
                C139480 +
            (C13440 * C20277 + C139555 * C20361 + C13439 * C5802 +
             C13351 * C5864) *
                C273) *
               C139544 +
           ((C13440 * C20432 + C139555 * C20809 + C13439 * C5921 +
             C13351 * C6192) *
                C139480 +
            (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
             C13351 * C5865) *
                C273) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139362 * C139398) *
              C5151 +
          ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
            ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                C139544) *
               C139362 * C139398 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139362 * C5149) *
              C5152 +
          ((((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
            ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C13440 * C1058 + C139555 * C1548 + C13439 * C1057 +
              C13351 * C1547) *
                 C139480 +
             (C13440 * C834 + C139555 * C944 + C13439 * C833 + C13351 * C943) *
                 C273) *
                C139544 +
            ((C17001 + C17000) * C139480 + (C16367 + C16366) * C273) * C13349) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C1757 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C1758 +
           (((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C13439 * C1987 + C13351 * C2477 + C13440 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C13349 +
            ((C15390 + C15391) * C273 + (C16041 + C16042) * C139480) *
                C139544) *
               C1759) *
              C5149 +
          ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C13349 +
            ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                C139544) *
               C1758 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C1757 -
           (((C13440 * C21201 + C139555 * C21738 + C13439 * C6490 +
              C13351 * C6881) *
                 C139480 +
             (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
              C13351 * C6410) *
                 C273) *
                C139544 +
            ((C13440 * C21202 + C139555 * C21739 + C13439 * C6491 +
              C13351 * C6882) *
                 C139480 +
             (C13440 * C20984 + C139555 * C21100 + C13439 * C6325 +
              C13351 * C6411) *
                 C273) *
                C13349) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
            C15154 * C139555) *
               C13349 +
           (C14012 + C14013) * C139544) *
              C139362 * C5796 -
          ((C15141 + C15142) * C139544 +
           (C15155 * C139555 + C15154 * C13351) * C13349) *
              C139362 * C5797 +
          ((C15155 * C13351 + C20885 * C139555) * C13349 +
           (C15145 + C15157) * C139544) *
              C139362 * C5798 -
          (((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C139555 +
            C15156 * C13351) *
               C139544 +
           ((C711 * C20278 + C20882 + C20882 + C139480 * C20877) * C139555 +
            C20885 * C13351) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139362 * C5149 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139362 * C139398) *
              C5151 +
          (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) *
               C139362 * C139398 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139362 * C5149) *
              C5152 +
          (((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) *
               C139362 * C5149 -
           (((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139555 +
             C3339 * C13351) *
                C139544 +
            (C17101 + C17100) * C13349) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C1757 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C1758 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C13351 +
             C21847 * C139555) *
                C13349 +
            (C16143 + C16149) * C139544) *
               C1759) *
              C5149 +
          (((C19327 * C13351 +
             (C711 * C8592 + C9230 + C9230 + C139480 * C9226) * C139555) *
                C13349 +
            (C19320 + C19329) * C139544) *
               C1758 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C1757 -
           (((C711 * C20983 + C21843 + C21843 + C139480 * C21838) * C139555 +
             C16148 * C13351) *
                C139544 +
            ((C711 * C20984 + C21844 + C21844 + C139480 * C21839) * C139555 +
             C21847 * C13351) *
                C13349) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                        C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                           C139480 * C13351 +
                       (C14156 + C14157) * C139480 * C139555) *
                          C139530 -
                      ((C18174 + C18175) * C139480 * C139555 +
                       (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                        C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                           C139480 * C13351) *
                          C139426) *
                         C5149 +
                     (((C18175 + C18174) * C139480 * C13351 +
                       (C13353 * C8592 + C18158 + C18158 + C13349 * C8598 +
                        C13355 * C8591 + C18159 + C18159 + C139544 * C8597) *
                           C139480 * C139555) *
                          C139426 -
                      ((C14158 + C14159) * C139480 * C139555 +
                       (C14157 + C14156) * C139480 * C13351) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                        C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                           C139480 * C13351 +
                       (C18176 + C18177) * C139480 * C139555) *
                          C139426 -
                      ((C14161 + C14160) * C139480 * C139555 +
                       (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                        C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                           C139480 * C13351) *
                          C139530) *
                         C5149 +
                     (((C14160 + C14161) * C139480 * C13351 +
                       (C14162 + C14163) * C139480 * C139555) *
                          C139530 -
                      ((C13355 * C8590 + C18164 + C18164 + C139544 * C8596 +
                        C13353 * C8591 + C18165 + C18165 + C13349 * C8597) *
                           C139480 * C139555 +
                       (C18177 + C18176) * C139480 * C13351) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C13354 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C13349 +
             (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
                C139480 * C139530 -
            ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
             (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
              C13351 * C1880) *
                 C13349 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C13354) *
                C139480 * C139426) *
               C5149 +
           (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C13354 +
             (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
              C139555 * C8681) *
                 C13349 +
             (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
                C139480 * C139426 -
            ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
             (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C13349 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C13354) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
             (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
                C139480 * C139426 -
            ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
             (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
                C139480 * C139530) *
               C5149 +
           (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
             (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
                C139480 * C139530 -
            ((C13440 * C8593 + C139555 * C8679 + C13439 * C4165 +
              C13351 * C4281) *
                 C139544 +
             (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
              C13351 * C4277) *
                 C13356 +
             (C18319 + C18318) * C13349 + (C18317 + C18316) * C13354) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C13354 +
              (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
              C304 * C139544) *
                 C13351 +
             (C14414 + C14415 + C14388 + C14389) * C139555) *
                C139530 -
            ((C18450 + C18451 + C18468 + C18469) * C139555 +
             (C2019 * C139544 + C2020 * C13356 +
              (C273 * C1770 + C139480 * C1994) * C13349 +
              (C273 * C1762 + C139480 * C1986) * C13354) *
                 C13351) *
                C139426) *
               C5149 +
           (((C18469 + C18468 + C18451 + C18450) * C13351 +
             ((C273 * C8592 + C139480 * C8758) * C13354 +
              (C273 * C8595 + C139480 * C8761) * C13349 + C18466 * C13356 +
              C18467 * C139544) *
                 C139555) *
                C139426 -
            ((C14390 + C14391 + C14416 + C14417) * C139555 +
             (C14389 + C14388 + C14415 + C14414) * C13351) *
                C139530) *
               C139398) *
              C139521 +
          ((((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
              C2017 * C139544) *
                 C13351 +
             (C18460 + C18461 + C18462 + C18463) * C139555) *
                C139426 -
            ((C14403 + C14402 + C14401 + C14400) * C139555 +
             (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                 C13351) *
                C139530) *
               C5149 +
           (((C14400 + C14401 + C14402 + C14403) * C13351 +
             (C14404 + C14405 + C14406 + C14407) * C139555) *
                C139530 -
            (((C273 * C8593 + C139480 * C8759) * C139544 +
              (C273 * C8590 + C139480 * C8756) * C13356 + C18467 * C13349 +
              C18466 * C13354) *
                 C139555 +
             (C18463 + C18462 + C18461 + C18460) * C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C13439 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C13351 +
             (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
                C139480 * C139530 -
            ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
             (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
              C13349 * C2100) *
                 C13351 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C13439) *
                C139480 * C139426) *
               C5149 +
           (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
             (C13354 * C8592 + C13349 * C8595 + C13356 * C8591 +
              C139544 * C8594) *
                 C13440 +
             (C13354 * C8678 + C13349 * C8838 + C13356 * C8677 +
              C139544 * C8837) *
                 C139555) *
                C139480 * C139426 -
            ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
             (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C13439 +
             (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
              C139544 * C2098) *
                 C13351 +
             (C18620 + C18621) * C13440 + (C18622 + C18623) * C139555) *
                C139480 * C139426 -
            ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
             (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C13351 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C13439) *
                C139480 * C139530) *
               C5149 +
           (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
             (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
                C139480 * C139530 -
            ((C13356 * C8676 + C139544 * C8836 + C13354 * C8677 +
              C13349 * C8837) *
                 C139555 +
             (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
              C13349 * C8594) *
                 C13440 +
             (C18623 + C18622) * C13351 + (C18621 + C18620) * C13439) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
              C13679 + C13679 + C139555 * C1249) *
                 C13349 +
             (C13712 + C13713) * C139544) *
                C139480 * C139530 -
            ((C15722 + C15723) * C139544 +
             (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
              C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                 C13349) *
                C139480 * C139426) *
               C5149 +
           (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
              C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                 C13349 +
             (C18768 + C18769) * C139544) *
                C139480 * C139426 -
            ((C14690 + C14691) * C139544 +
             (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
              C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                 C13349) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
                C139480 * C139426 -
            ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
                C139480 * C139530) *
               C5149 +
           (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
                C139480 * C139530 -
            ((C13676 * C8590 + C18762 + C18762 + C139555 * C8913 +
              C13675 * C4161 + C18763 + C18763 + C13351 * C4615) *
                 C139544 +
             (C18769 + C18768) * C13349) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C273 * C106 + C139480 * C274) * C13439 +
                        (C273 * C187 + C139480 * C499) * C13351 +
                        C14408 * C13440 + C14805 * C139555) *
                           C13349 +
                       (C13784 + C13785 + C13786 + C13787) * C139544) *
                          C139530 -
                      ((C15824 + C15825 + C15826 + C15827) * C139544 +
                       (C18907 * C139555 + C18465 * C13440 +
                        (C273 * C1872 + C139480 * C2292) * C13351 +
                        (C273 * C1762 + C139480 * C1986) * C13439) *
                           C13349) *
                          C139426) *
                         C5149 +
                     (((C18465 * C13439 + C18907 * C13351 +
                        (C273 * C8592 + C139480 * C8758) * C13440 +
                        (C273 * C8678 + C139480 * C8995) * C139555) *
                           C13349 +
                       (C18902 + C18903 + C18904 + C18909) * C139544) *
                          C139426 -
                      ((C14794 + C14795 + C14796 + C14797) * C139544 +
                       (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                        C14408 * C13439) *
                           C13349) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C15827 + C15826 + C15825 + C15824) * C13349 +
                       (C17718 + C17719 + C17720 + C17721) * C139544) *
                          C139426 -
                      ((C13788 + C13789 + C13790 + C13791) * C139544 +
                       (C13787 + C13786 + C13785 + C13784) * C13349) *
                          C139530) *
                         C5149 +
                     (((C14797 + C14796 + C14795 + C14794) * C13349 +
                       (C16790 + C16791 + C16792 + C16793) * C139544) *
                          C139530 -
                      (((C273 * C8676 + C139480 * C8993) * C139555 +
                        (C273 * C8590 + C139480 * C8756) * C13440 +
                        C4741 * C13351 + C4412 * C13439) *
                           C139544 +
                       (C18909 + C18904 + C18903 + C18902) * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                  C273 +
              (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                  C139480) *
                 C13351 +
             ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                 C139555) *
                C139530 -
            (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) *
                 C139555 +
             ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
               C13349 * C2394) *
                  C139480 +
              (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
               C13349 * C1770) *
                  C273) *
                 C13351) *
                C139426) *
               C5149 +
           ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
             ((C13354 * C8592 + C13349 * C8595 + C13356 * C8591 +
               C139544 * C8594) *
                  C273 +
              (C13354 * C8758 + C13349 * C9072 + C13356 * C8757 +
               C139544 * C9071) *
                  C139480) *
                 C139555) *
                C139426 -
            (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) *
                 C139555 +
             ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) *
                 C13351) *
                C139530) *
               C139398) *
              C139521 +
          (((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
               C139544 * C1768) *
                  C273 +
              (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
               C139544 * C2392) *
                  C139480) *
                 C13351 +
             ((C18620 + C18621) * C273 + (C19050 + C19051) * C139480) *
                 C139555) *
                C139426 -
            (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) *
                 C139555 +
             ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                  C139480 +
              (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                  C273) *
                 C13351) *
                C139530) *
               C5149 +
           ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
             ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                 C139555) *
                C139530 -
            (((C13356 * C8756 + C139544 * C9070 + C13354 * C8757 +
               C13349 * C9071) *
                  C139480 +
              (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
               C13349 * C8594) *
                  C273) *
                 C139555 +
             ((C19051 + C19050) * C139480 + (C18621 + C18620) * C273) *
                 C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                  C273 +
              (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
               C139555 * C1543) *
                  C139480) *
                 C13349 +
             ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                 C139544) *
                C139530 -
            (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) *
                 C139544 +
             ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
               C13351 * C2476) *
                  C139480 +
              (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
               C13351 * C1872) *
                  C273) *
                 C13349) *
                C139426) *
               C5149 +
           ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
               C139555 * C8678) *
                  C273 +
              (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
               C139555 * C9149) *
                  C139480) *
                 C13349 +
             ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                 C139544) *
                C139426 -
            (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) *
                 C139544 +
             ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
               C13351 * C1543) *
                  C139480 +
              (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                  C273) *
                 C13349) *
                C139530) *
               C139398) *
              C139521 +
          (((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
             ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                 C139544) *
                C139426 -
            (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) *
                 C139544 +
             ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) *
                 C13349) *
                C139530) *
               C5149 +
           ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
             ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                 C139544) *
                C139530 -
            (((C13440 * C8756 + C139555 * C9147 + C13439 * C4395 +
               C13351 * C4945) *
                  C139480 +
              (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
               C13351 * C4277) *
                  C273) *
                 C139544 +
             ((C19187 + C19186) * C139480 + (C18317 + C18316) * C273) *
                 C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
              C15154 * C139555) *
                 C13349 +
             (C14012 + C14013) * C139544) *
                C139530 -
            ((C16141 + C16142) * C139544 +
             (C19327 * C139555 +
              (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                 C13349) *
                C139426) *
               C5149 +
           (((C19327 * C13351 +
              (C711 * C8592 + C9230 + C9230 + C139480 * C9226) * C139555) *
                 C13349 +
             (C19320 + C19329) * C139544) *
                C139426 -
            ((C15141 + C15142) * C139544 +
             (C15155 * C139555 + C15154 * C13351) * C13349) *
                C139530) *
               C139398) *
              C139521 +
          ((((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
                C139426 -
            ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
                C139530) *
               C5149 +
           (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) *
                C139530 -
            (((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139555 +
              C5073 * C13351) *
                 C139544 +
             (C19329 + C19320) * C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139362 * C139398) *
                        C5151 +
                    (((C14160 + C14161) * C139480 * C13351 +
                      (C14162 + C14163) * C139480 * C139555) *
                         C139362 * C139398 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139362 * C5149) *
                        C5152 +
                    (((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                       C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                          C139480 * C13351 +
                      (C16258 + C16259) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C13355 * C834 + C16252 + C16252 + C139544 * C850 +
                       C13353 * C832 + C16253 + C16253 + C13349 * C848) *
                          C139480 * C139555 +
                      (C16259 + C16258) * C139480 * C13351) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                      C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                         C139480 * C13351 +
                     (C14156 + C14157) * C139480 * C139555) *
                        C139362 * C5796 -
                    ((C14158 + C14159) * C139480 * C139555 +
                     (C14157 + C14156) * C139480 * C13351) *
                        C139362 * C5797 +
                    ((C14159 + C14158) * C139480 * C13351 +
                     (C20294 + C20295) * C139480 * C139555) *
                        C139362 * C5798 -
                    ((C13355 * C20277 + C20288 + C20288 + C139544 * C20281 +
                      C13353 * C20278 + C20289 + C20289 + C13349 * C20282) *
                         C139480 * C139555 +
                     (C20295 + C20294) * C139480 * C13351) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139362 * C5149 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
            (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
               C139480 * C139362 * C139398 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
            (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
               C139480 * C139362 * C5149 -
           ((C13440 * C842 + C139555 * C952 + C13439 * C841 + C13351 * C951) *
                C139544 +
            (C13440 * C834 + C139555 * C944 + C13439 * C833 + C13351 * C943) *
                C13356 +
            (C16369 + C16368) * C13349 + (C16367 + C16366) * C13354) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C13354 +
           (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
               C13349 +
           (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
              C139480 * C139362 * C5796 -
          ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
           (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
               C13349 +
           (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
               C13354) *
              C139480 * C139362 * C5797 +
          ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
               C13354 +
           (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
               C13349 +
           (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
              C139480 * C139362 * C5798 -
          ((C13440 * C20279 + C139555 * C20363 + C13439 * C5805 +
            C13351 * C5867) *
               C139544 +
           (C13440 * C20277 + C139555 * C20361 + C13439 * C5802 +
            C13351 * C5864) *
               C13356 +
           (C13440 * C20280 + C139555 * C20364 + C13439 * C5806 +
            C13351 * C5868) *
               C13349 +
           (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
            C13351 * C5865) *
               C13354) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139362 * C5149 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C139362 * C139398) *
              C5151 +
          (((C14400 + C14401 + C14402 + C14403) * C13351 +
            (C14404 + C14405 + C14406 + C14407) * C139555) *
               C139362 * C139398 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          (((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
                C13351 +
            (C16468 + C16469 + C16470 + C16471) * C139555) *
               C139362 * C5149 -
           (((C273 * C842 + C139480 * C1066) * C139544 +
             (C273 * C834 + C139480 * C1058) * C13356 + C1091 * C13349 +
             C1090 * C13354) *
                C139555 +
            (C16471 + C16470 + C16469 + C16468) * C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13354 +
            (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
            C304 * C139544) *
               C13351 +
           (C14414 + C14415 + C14388 + C14389) * C139555) *
              C139362 * C5796 -
          ((C14390 + C14391 + C14416 + C14417) * C139555 +
           (C14389 + C14388 + C14415 + C14414) * C13351) *
              C139362 * C5797 +
          ((C14417 + C14416 + C14391 + C14390) * C13351 +
           (C20444 + C20445 + C20440 + C20441) * C139555) *
              C139362 * C5798 -
          (((C273 * C20279 + C139480 * C20433) * C139544 +
            (C273 * C20277 + C139480 * C20431) * C13356 +
            (C273 * C20280 + C139480 * C20434) * C13349 +
            (C273 * C20278 + C139480 * C20432) * C13354) *
               C139555 +
           (C20441 + C20440 + C20445 + C20444) * C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139362 * C5149 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
            (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
               C139480 * C139362 * C139398 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C13439 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C13351 +
            (C16578 + C16579) * C13440 + (C16580 + C16581) * C139555) *
               C139480 * C139362 * C5149 -
           ((C13356 * C944 + C139544 * C1172 + C13354 * C942 + C13349 * C1170) *
                C139555 +
            (C13356 * C834 + C139544 * C842 + C13354 * C832 + C13349 * C840) *
                C13440 +
            (C16581 + C16580) * C13351 + (C16579 + C16578) * C13439) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C13439 +
           (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
               C13351 +
           (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
              C139480 * C139362 * C5796 -
          ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
           (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
              C139480 * C139362 * C5797 +
          ((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
           (C20522 + C20523) * C13440 + (C20524 + C20525) * C139555) *
              C139480 * C139362 * C5798 -
          ((C13356 * C20361 + C139544 * C20511 + C13354 * C20362 +
            C13349 * C20512) *
               C139555 +
           (C13356 * C20277 + C139544 * C20279 + C13354 * C20278 +
            C13349 * C20280) *
               C13440 +
           (C20525 + C20524) * C13351 + (C20523 + C20522) * C13439) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139362 * C5149 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
               C139480 * C139362 * C139398 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) *
               C139480 * C139362 * C5149 -
           ((C13676 * C834 + C16684 + C16684 + C139555 * C1254 + C13675 * C833 +
             C16685 + C16685 + C13351 * C1253) *
                C139544 +
            (C16691 + C16690) * C13349) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
            C13679 + C13679 + C139555 * C1249) *
               C13349 +
           (C13712 + C13713) * C139544) *
              C139480 * C139362 * C5796 -
          ((C14690 + C14691) * C139544 +
           (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
            C14669 + C14669 + C13351 * C1249) *
               C13349) *
              C139480 * C139362 * C5797 +
          ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
            C14671 + C14671 + C139555 * C6030) *
               C13349 +
           (C14692 + C14693) * C139544) *
              C139480 * C139362 * C5798 -
          ((C13676 * C20277 + C20594 + C20594 + C139555 * C20591 +
            C13675 * C5802 + C20595 + C20595 + C13351 * C6029) *
               C139544 +
           (C13676 * C20278 + C20596 + C20596 + C139555 * C20592 +
            C13675 * C5803 + C20597 + C20597 + C13351 * C6030) *
               C13349) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139362 * C5149 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C139362 * C139398) *
                        C5151 +
                    (((C14797 + C14796 + C14795 + C14794) * C13349 +
                      (C16790 + C16791 + C16792 + C16793) * C139544) *
                         C139362 * C139398 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C139362 * C5149) *
                        C5152 +
                    (((C13791 + C13790 + C13789 + C13788) * C13349 +
                      (C13792 + C13793 + C13794 + C13795) * C139544) *
                         C139362 * C5149 -
                     (((C273 * C944 + C139480 * C1364) * C139555 +
                       (C273 * C834 + C139480 * C1058) * C13440 +
                       C3101 * C13351 + C2864 * C13439) *
                          C139544 +
                      (C16793 + C16792 + C16791 + C16790) * C13349) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C13439 +
                      (C273 * C187 + C139480 * C499) * C13351 +
                      C14408 * C13440 + C14805 * C139555) *
                         C13349 +
                     (C13784 + C13785 + C13786 + C13787) * C139544) *
                        C139362 * C5796 -
                    ((C14794 + C14795 + C14796 + C14797) * C139544 +
                     (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                      C14408 * C13439) *
                         C13349) *
                        C139362 * C5797 +
                    ((C14411 * C13439 + C14806 * C13351 + C20442 * C13440 +
                      C20668 * C139555) *
                         C13349 +
                     (C14800 + C14801 + C14802 + C14808) * C139544) *
                        C139362 * C5798 -
                    (((C273 * C20361 + C139480 * C20663) * C139555 +
                      (C273 * C20277 + C139480 * C20431) * C13440 +
                      C14807 * C13351 + C14412 * C13439) *
                         C139544 +
                     ((C273 * C20362 + C139480 * C20664) * C139555 +
                      (C273 * C20278 + C139480 * C20432) * C13440 +
                      C20668 * C13351 + C20442 * C13439) *
                         C13349) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139362 * C139398) *
              C5151 +
          ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
            ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                C139555) *
               C139362 * C139398 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C273 +
             (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                 C139480) *
                C13351 +
            ((C16578 + C16579) * C273 + (C16896 + C16897) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C13356 * C1058 + C139544 * C1466 + C13354 * C1056 +
              C13349 * C1464) *
                 C139480 +
             (C13356 * C834 + C139544 * C842 + C13354 * C832 + C13349 * C840) *
                 C273) *
                C139555 +
            ((C16897 + C16896) * C139480 + (C16579 + C16578) * C273) * C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C273 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C139480) *
               C13351 +
           ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) * C139555) *
              C139362 * C5796 -
          (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
           ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
              C139362 * C5797 +
          (((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
           ((C20522 + C20523) * C273 + (C20741 + C20742) * C139480) * C139555) *
              C139362 * C5798 -
          (((C13356 * C20431 + C139544 * C20734 + C13354 * C20432 +
             C13349 * C20735) *
                C139480 +
            (C13356 * C20277 + C139544 * C20279 + C13354 * C20278 +
             C13349 * C20280) *
                C273) *
               C139555 +
           ((C20742 + C20741) * C139480 + (C20523 + C20522) * C273) * C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139362 * C139398) *
              C5151 +
          ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
            ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                C139544) *
               C139362 * C139398 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139362 * C5149) *
              C5152 +
          ((((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
            ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C13440 * C1058 + C139555 * C1548 + C13439 * C1057 +
              C13351 * C1547) *
                 C139480 +
             (C13440 * C834 + C139555 * C944 + C13439 * C833 + C13351 * C943) *
                 C273) *
                C139544 +
            ((C17001 + C17000) * C139480 + (C16367 + C16366) * C273) * C13349) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C273 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C139480) *
               C13349 +
           ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) * C139544) *
              C139362 * C5796 -
          (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
           ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C139480 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C273) *
               C13349) *
              C139362 * C5797 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C273 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C139480) *
               C13349 +
           ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) * C139544) *
              C139362 * C5798 -
          (((C13440 * C20431 + C139555 * C20808 + C13439 * C5920 +
             C13351 * C6191) *
                C139480 +
            (C13440 * C20277 + C139555 * C20361 + C13439 * C5802 +
             C13351 * C5864) *
                C273) *
               C139544 +
           ((C13440 * C20432 + C139555 * C20809 + C13439 * C5921 +
             C13351 * C6192) *
                C139480 +
            (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
             C13351 * C5865) *
                C273) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139362 * C5149 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139362 * C139398) *
              C5151 +
          (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) *
               C139362 * C139398 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139362 * C5149) *
              C5152 +
          (((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) *
               C139362 * C5149 -
           (((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139555 +
             C3339 * C13351) *
                C139544 +
            (C17101 + C17100) * C13349) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
            C15154 * C139555) *
               C13349 +
           (C14012 + C14013) * C139544) *
              C139362 * C5796 -
          ((C15141 + C15142) * C139544 +
           (C15155 * C139555 + C15154 * C13351) * C13349) *
              C139362 * C5797 +
          ((C15155 * C13351 + C20885 * C139555) * C13349 +
           (C15145 + C15157) * C139544) *
              C139362 * C5798 -
          (((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C139555 +
            C15156 * C13351) *
               C139544 +
           ((C711 * C20278 + C20882 + C20882 + C139480 * C20877) * C139555 +
            C20885 * C13351) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                        C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                           C139480 * C13351 +
                       (C14156 + C14157) * C139480 * C139555) *
                          C9304 -
                      ((C18174 + C18175) * C139480 * C139555 +
                       (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                        C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                           C139480 * C13351) *
                          C139426) *
                         C139529 +
                     (((C18175 + C18174) * C139480 * C13351 +
                       (C24014 + C24015) * C139480 * C139555) *
                          C139426 -
                      ((C14158 + C14159) * C139480 * C139555 +
                       (C14157 + C14156) * C139480 * C13351) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                        C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                           C139480 * C13351 +
                       (C18176 + C18177) * C139480 * C139555) *
                          C139426 -
                      ((C14161 + C14160) * C139480 * C139555 +
                       (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                        C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                           C139480 * C13351) *
                          C9304) *
                         C139529 +
                     (((C14160 + C14161) * C139480 * C13351 +
                       (C14162 + C14163) * C139480 * C139555) *
                          C9304 -
                      ((C13355 * C8590 + C18164 + C18164 + C139544 * C8596 +
                        C13353 * C8591 + C18165 + C18165 + C13349 * C8597) *
                           C139480 * C139555 +
                       (C18177 + C18176) * C139480 * C13351) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C13354 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C13349 +
             (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
                C139480 * C9304 -
            ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
             (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
              C13351 * C1880) *
                 C13349 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C13354) *
                C139480 * C139426) *
               C139529 +
           (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C13354 +
             (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
              C139555 * C8681) *
                 C13349 +
             (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
                C139480 * C139426 -
            ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
             (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C13349 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C13354) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
             (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
                C139480 * C139426 -
            ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
             (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
                C139480 * C9304) *
               C139529 +
           (((C14281 + C14280) * C13354 + (C14279 + C14278) * C13349 +
             (C16366 + C16367) * C13356 + (C16368 + C16369) * C139544) *
                C139480 * C9304 -
            ((C13440 * C8593 + C139555 * C8679 + C13439 * C4165 +
              C13351 * C4281) *
                 C139544 +
             (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
              C13351 * C4277) *
                 C13356 +
             (C18319 + C18318) * C13349 + (C18317 + C18316) * C13354) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C13354 +
              (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
              C304 * C139544) *
                 C13351 +
             (C14414 + C14415 + C14388 + C14389) * C139555) *
                C9304 -
            ((C18450 + C18451 + C18468 + C18469) * C139555 +
             (C2019 * C139544 + C2020 * C13356 +
              (C273 * C1770 + C139480 * C1994) * C13349 +
              (C273 * C1762 + C139480 * C1986) * C13354) *
                 C13351) *
                C139426) *
               C139529 +
           (((C18469 + C18468 + C18451 + C18450) * C13351 +
             (C24228 + C24229 + C24224 + C24225) * C139555) *
                C139426 -
            ((C14390 + C14391 + C14416 + C14417) * C139555 +
             (C14389 + C14388 + C14415 + C14414) * C13351) *
                C9304) *
               C139398) *
              C139521 +
          ((((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
              C2017 * C139544) *
                 C13351 +
             (C18460 + C18461 + C18462 + C18463) * C139555) *
                C139426 -
            ((C14403 + C14402 + C14401 + C14400) * C139555 +
             (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                 C13351) *
                C9304) *
               C139529 +
           (((C14400 + C14401 + C14402 + C14403) * C13351 +
             (C14404 + C14405 + C14406 + C14407) * C139555) *
                C9304 -
            (((C273 * C8593 + C139480 * C8759) * C139544 +
              (C273 * C8590 + C139480 * C8756) * C13356 + C18467 * C13349 +
              C18466 * C13354) *
                 C139555 +
             (C18463 + C18462 + C18461 + C18460) * C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C13439 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C13351 +
             (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
                C139480 * C9304 -
            ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
             (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
              C13349 * C2100) *
                 C13351 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C13439) *
                C139480 * C139426) *
               C139529 +
           (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
             (C24338 + C24339) * C13440 + (C24340 + C24341) * C139555) *
                C139480 * C139426 -
            ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
             (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C13439 +
             (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
              C139544 * C2098) *
                 C13351 +
             (C18620 + C18621) * C13440 + (C18622 + C18623) * C139555) *
                C139480 * C139426 -
            ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
             (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C13351 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C13439) *
                C139480 * C9304) *
               C139529 +
           (((C14556 + C14557) * C13439 + (C14558 + C14559) * C13351 +
             (C14560 + C14561) * C13440 + (C14562 + C14563) * C139555) *
                C139480 * C9304 -
            ((C13356 * C8676 + C139544 * C8836 + C13354 * C8677 +
              C13349 * C8837) *
                 C139555 +
             (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
              C13349 * C8594) *
                 C13440 +
             (C18623 + C18622) * C13351 + (C18621 + C18620) * C13439) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
              C13679 + C13679 + C139555 * C1249) *
                 C13349 +
             (C13712 + C13713) * C139544) *
                C139480 * C9304 -
            ((C15722 + C15723) * C139544 +
             (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
              C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                 C13349) *
                C139480 * C139426) *
               C139529 +
           (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
              C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                 C13349 +
             (C18768 + C18769) * C139544) *
                C139480 * C139426 -
            ((C14690 + C14691) * C139544 +
             (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
              C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                 C13349) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
                C139480 * C139426 -
            ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
                C139480 * C9304) *
               C139529 +
           (((C14691 + C14690) * C13349 + (C16690 + C16691) * C139544) *
                C139480 * C9304 -
            ((C13676 * C8590 + C18762 + C18762 + C139555 * C8913 +
              C13675 * C4161 + C18763 + C18763 + C13351 * C4615) *
                 C139544 +
             (C18769 + C18768) * C13349) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C273 * C106 + C139480 * C274) * C13439 +
                        (C273 * C187 + C139480 * C499) * C13351 +
                        C14408 * C13440 + C14805 * C139555) *
                           C13349 +
                       (C13784 + C13785 + C13786 + C13787) * C139544) *
                          C9304 -
                      ((C15824 + C15825 + C15826 + C15827) * C139544 +
                       (C18907 * C139555 + C18465 * C13440 +
                        (C273 * C1872 + C139480 * C2292) * C13351 +
                        (C273 * C1762 + C139480 * C1986) * C13439) *
                           C13349) *
                          C139426) *
                         C139529 +
                     (((C18465 * C13439 + C18907 * C13351 + C24226 * C13440 +
                        C24548 * C139555) *
                           C13349 +
                       (C18902 + C18903 + C18904 + C18909) * C139544) *
                          C139426 -
                      ((C14794 + C14795 + C14796 + C14797) * C139544 +
                       (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                        C14408 * C13439) *
                           C13349) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C15827 + C15826 + C15825 + C15824) * C13349 +
                       (C17718 + C17719 + C17720 + C17721) * C139544) *
                          C139426 -
                      ((C13788 + C13789 + C13790 + C13791) * C139544 +
                       (C13787 + C13786 + C13785 + C13784) * C13349) *
                          C9304) *
                         C139529 +
                     (((C14797 + C14796 + C14795 + C14794) * C13349 +
                       (C16790 + C16791 + C16792 + C16793) * C139544) *
                          C9304 -
                      (((C273 * C8676 + C139480 * C8993) * C139555 +
                        (C273 * C8590 + C139480 * C8756) * C13440 +
                        C4741 * C13351 + C4412 * C13439) *
                           C139544 +
                       (C18909 + C18904 + C18903 + C18902) * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                  C273 +
              (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                  C139480) *
                 C13351 +
             ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                 C139555) *
                C9304 -
            (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) *
                 C139555 +
             ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
               C13349 * C2394) *
                  C139480 +
              (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
               C13349 * C1770) *
                  C273) *
                 C13351) *
                C139426) *
               C139529 +
           ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
             ((C24338 + C24339) * C273 + (C24653 + C24654) * C139480) *
                 C139555) *
                C139426 -
            (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) *
                 C139555 +
             ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) *
                 C13351) *
                C9304) *
               C139398) *
              C139521 +
          (((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
               C139544 * C1768) *
                  C273 +
              (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
               C139544 * C2392) *
                  C139480) *
                 C13351 +
             ((C18620 + C18621) * C273 + (C19050 + C19051) * C139480) *
                 C139555) *
                C139426 -
            (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) *
                 C139555 +
             ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                  C139480 +
              (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                  C273) *
                 C13351) *
                C9304) *
               C139529 +
           ((((C14556 + C14557) * C273 + (C14927 + C14928) * C139480) * C13351 +
             ((C14560 + C14561) * C273 + (C14929 + C14930) * C139480) *
                 C139555) *
                C9304 -
            (((C13356 * C8756 + C139544 * C9070 + C13354 * C8757 +
               C13349 * C9071) *
                  C139480 +
              (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
               C13349 * C8594) *
                  C273) *
                 C139555 +
             ((C19051 + C19050) * C139480 + (C18621 + C18620) * C273) *
                 C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                  C273 +
              (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
               C139555 * C1543) *
                  C139480) *
                 C13349 +
             ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                 C139544) *
                C9304 -
            (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) *
                 C139544 +
             ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
               C13351 * C2476) *
                  C139480 +
              (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
               C13351 * C1872) *
                  C273) *
                 C13349) *
                C139426) *
               C139529 +
           ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
               C139555 * C8678) *
                  C273 +
              (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
               C139555 * C9149) *
                  C139480) *
                 C13349 +
             ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                 C139544) *
                C139426 -
            (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) *
                 C139544 +
             ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
               C13351 * C1543) *
                  C139480 +
              (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                  C273) *
                 C13349) *
                C9304) *
               C139398) *
              C139521 +
          (((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
             ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                 C139544) *
                C139426 -
            (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) *
                 C139544 +
             ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) *
                 C13349) *
                C9304) *
               C139529 +
           ((((C14281 + C14280) * C273 + (C15038 + C15037) * C139480) * C13349 +
             ((C16366 + C16367) * C273 + (C17000 + C17001) * C139480) *
                 C139544) *
                C9304 -
            (((C13440 * C8756 + C139555 * C9147 + C13439 * C4395 +
               C13351 * C4945) *
                  C139480 +
              (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
               C13351 * C4277) *
                  C273) *
                 C139544 +
             ((C19187 + C19186) * C139480 + (C18317 + C18316) * C273) *
                 C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
              C15154 * C139555) *
                 C13349 +
             (C14012 + C14013) * C139544) *
                C9304 -
            ((C16141 + C16142) * C139544 +
             (C19327 * C139555 +
              (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                 C13349) *
                C139426) *
               C139529 +
           (((C19327 * C13351 + C24861 * C139555) * C13349 +
             (C19320 + C19329) * C139544) *
                C139426 -
            ((C15141 + C15142) * C139544 +
             (C15155 * C139555 + C15154 * C13351) * C13349) *
                C9304) *
               C139398) *
              C139521 +
          ((((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
                C139426 -
            ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
                C9304) *
               C139529 +
           (((C15142 + C15141) * C13349 + (C17100 + C17101) * C139544) * C9304 -
            (((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139555 +
              C5073 * C13351) *
                 C139544 +
             (C19329 + C19320) * C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139562 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139563 +
                     ((C13353 * C1763 + C15260 + C15260 + C13349 * C1779 +
                       C13355 * C1764 + C15261 + C15261 + C139544 * C1780) *
                          C139480 * C13351 +
                      (C21000 + C21001) * C139480 * C139555) *
                         C12024) *
                        C139529 +
                    (((C18175 + C18174) * C139480 * C13351 +
                      (C24014 + C24015) * C139480 * C139555) *
                         C139563 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C139562 -
                     ((C13355 * C20983 + C20994 + C20994 + C139544 * C20987 +
                       C13353 * C20984 + C20995 + C20995 + C13349 * C20988) *
                          C139480 * C139555 +
                      (C21001 + C21000) * C139480 * C13351) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139562 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139563 +
           ((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
             C139555 * C6411) *
                C13354 +
            (C13439 * C1771 + C13351 * C1881 + C13440 * C6328 +
             C139555 * C6414) *
                C13349 +
            (C15390 + C15391) * C13356 + (C15392 + C15393) * C139544) *
               C139480 * C12024) *
              C139529 +
          (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
             C139555 * C8678) *
                C13354 +
            (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
             C139555 * C8681) *
                C13349 +
            (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
               C139480 * C139563 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C139562 -
           ((C13440 * C20985 + C139555 * C21101 + C13439 * C6327 +
             C13351 * C6413) *
                C139544 +
            (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
             C13351 * C6410) *
                C13356 +
            (C13440 * C20986 + C139555 * C21102 + C13439 * C6328 +
             C13351 * C6414) *
                C13349 +
            (C13440 * C20984 + C139555 * C21100 + C13439 * C6325 +
             C13351 * C6411) *
                C13354) *
               C139480 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13354 +
                       (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
                       C304 * C139544) *
                          C13351 +
                      (C14414 + C14415 + C14388 + C14389) * C139555) *
                         C139562 -
                     ((C18450 + C18451 + C18468 + C18469) * C139555 +
                      (C2019 * C139544 + C2020 * C13356 +
                       (C273 * C1770 + C139480 * C1994) * C13349 +
                       (C273 * C1762 + C139480 * C1986) * C13354) *
                          C13351) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C13354 +
                       (C273 * C1771 + C139480 * C1995) * C13349 +
                       C2021 * C13356 + C2022 * C139544) *
                          C13351 +
                      (C21214 + C21215 + C21210 + C21211) * C139555) *
                         C12024) *
                        C139529 +
                    (((C18469 + C18468 + C18451 + C18450) * C13351 +
                      (C24228 + C24229 + C24224 + C24225) * C139555) *
                         C139563 -
                     ((C14390 + C14391 + C14416 + C14417) * C139555 +
                      (C14389 + C14388 + C14415 + C14414) * C13351) *
                         C139562 -
                     (((C273 * C20985 + C139480 * C21203) * C139544 +
                       (C273 * C20983 + C139480 * C21201) * C13356 +
                       (C273 * C20986 + C139480 * C21204) * C13349 +
                       (C273 * C20984 + C139480 * C21202) * C13354) *
                          C139555 +
                      (C21211 + C21210 + C21215 + C21214) * C13351) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139562 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139563 +
           ((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
             C139544 * C1772) *
                C13439 +
            (C13354 * C1873 + C13349 * C2101 + C13356 * C1874 +
             C139544 * C2102) *
                C13351 +
            (C21324 + C21325) * C13440 + (C21326 + C21327) * C139555) *
               C139480 * C12024) *
              C139529 +
          (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
            (C24338 + C24339) * C13440 + (C24340 + C24341) * C139555) *
               C139480 * C139563 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C139562 -
           ((C13356 * C21099 + C139544 * C21313 + C13354 * C21100 +
             C13349 * C21314) *
                C139555 +
            (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
             C13349 * C20986) *
                C13440 +
            (C21327 + C21326) * C13351 + (C21325 + C21324) * C13439) *
               C139480 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C13349 +
                      (C13712 + C13713) * C139544) *
                         C139480 * C139562 -
                     ((C15722 + C15723) * C139544 +
                      (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
                       C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                          C13349) *
                         C139480 * C139563 +
                     ((C13675 * C1763 + C15702 + C15702 + C13351 * C2183 +
                       C13676 * C6325 + C15703 + C15703 + C139555 * C6648) *
                          C13349 +
                      (C15724 + C15725) * C139544) *
                         C139480 * C12024) *
                        C139529 +
                    (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
                       C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                          C13349 +
                      (C18768 + C18769) * C139544) *
                         C139480 * C139563 -
                     ((C14690 + C14691) * C139544 +
                      (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                       C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                          C13349) *
                         C139480 * C139562 -
                     ((C13676 * C20983 + C21428 + C21428 + C139555 * C21425 +
                       C13675 * C6324 + C21429 + C21429 + C13351 * C6647) *
                          C139544 +
                      (C13676 * C20984 + C21430 + C21430 + C139555 * C21426 +
                       C13675 * C6325 + C21431 + C21431 + C13351 * C6648) *
                          C13349) *
                         C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139562 -
                     ((C15824 + C15825 + C15826 + C15827) * C139544 +
                      (C18907 * C139555 + C18465 * C13440 +
                       (C273 * C1872 + C139480 * C2292) * C13351 +
                       (C273 * C1762 + C139480 * C1986) * C13439) *
                          C13349) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C13439 +
                       (C273 * C1873 + C139480 * C2293) * C13351 +
                       C21212 * C13440 + C21534 * C139555) *
                          C13349 +
                      (C15828 + C15829 + C15830 + C15834) * C139544) *
                         C12024) *
                        C139529 +
                    (((C18465 * C13439 + C18907 * C13351 + C24226 * C13440 +
                       C24548 * C139555) *
                          C13349 +
                      (C18902 + C18903 + C18904 + C18909) * C139544) *
                         C139563 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C139562 -
                     (((C273 * C21099 + C139480 * C21529) * C139555 +
                       (C273 * C20983 + C139480 * C21201) * C13440 +
                       C15833 * C13351 + C15496 * C13439) *
                          C139544 +
                      ((C273 * C21100 + C139480 * C21530) * C139555 +
                       (C273 * C20984 + C139480 * C21202) * C13440 +
                       C21534 * C13351 + C21212 * C13439) *
                          C13349) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139562 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139563 +
           (((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C13354 * C1987 + C13349 * C2395 + C13356 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C13351 +
            ((C21324 + C21325) * C273 + (C21639 + C21640) * C139480) *
                C139555) *
               C12024) *
              C139529 +
          ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
            ((C24338 + C24339) * C273 + (C24653 + C24654) * C139480) *
                C139555) *
               C139563 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C139562 -
           (((C13356 * C21201 + C139544 * C21632 + C13354 * C21202 +
              C13349 * C21633) *
                 C139480 +
             (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
              C13349 * C20986) *
                 C273) *
                C139555 +
            ((C21640 + C21639) * C139480 + (C21325 + C21324) * C273) * C13351) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139562 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139563 +
           (((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C13439 * C1987 + C13351 * C2477 + C13440 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C13349 +
            ((C15390 + C15391) * C273 + (C16041 + C16042) * C139480) *
                C139544) *
               C12024) *
              C139529 +
          ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C13349 +
            ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                C139544) *
               C139563 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C139562 -
           (((C13440 * C21201 + C139555 * C21738 + C13439 * C6490 +
              C13351 * C6881) *
                 C139480 +
             (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
              C13351 * C6410) *
                 C273) *
                C139544 +
            ((C13440 * C21202 + C139555 * C21739 + C13439 * C6491 +
              C13351 * C6882) *
                 C139480 +
             (C13440 * C20984 + C139555 * C21100 + C13439 * C6325 +
              C13351 * C6411) *
                 C273) *
                C13349) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139562 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139563 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C13351 +
             C21847 * C139555) *
                C13349 +
            (C16143 + C16149) * C139544) *
               C12024) *
              C139529 +
          (((C19327 * C13351 + C24861 * C139555) * C13349 +
            (C19320 + C19329) * C139544) *
               C139563 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C139562 -
           (((C711 * C20983 + C21843 + C21843 + C139480 * C21838) * C139555 +
             C16148 * C13351) *
                C139544 +
            ((C711 * C20984 + C21844 + C21844 + C139480 * C21839) * C139555 +
             C21847 * C13351) *
                C13349) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] += (-std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C9304 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139426) *
                        C822 +
                    (((C18175 + C18174) * C139480 * C13351 +
                      (C24014 + C24015) * C139480 * C139555) *
                         C139426 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C9304) *
                        C823 +
                    (((C14159 + C14158) * C139480 * C13351 +
                      (C20294 + C20295) * C139480 * C139555) *
                         C9304 -
                     ((C13355 * C23997 + C24008 + C24008 + C139544 * C24001 +
                       C13353 * C23998 + C24009 + C24009 + C13349 * C24002) *
                          C139480 * C139555 +
                      (C24015 + C24014) * C139480 * C13351) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C9304 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139426) *
                        C139346 * C5151 +
                    (((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                       C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                          C139480 * C13351 +
                      (C18176 + C18177) * C139480 * C139555) *
                         C139426 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C9304) *
                        C139346 * C5152 +
                    (((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                       C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                          C139480 * C13351 +
                      (C16258 + C16259) * C139480 * C139555) *
                         C9304 -
                     ((C13355 * C4162 + C17200 + C17200 + C139544 * C4170 +
                       C13353 * C4161 + C17201 + C17201 + C13349 * C4169) *
                          C139480 * C139555 +
                      (C13355 * C1766 + C17202 + C17202 + C139544 * C1782 +
                       C13353 * C1760 + C17203 + C17203 + C13349 * C1776) *
                          C139480 * C13351) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                      C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                         C139480 * C13351 +
                     (C14156 + C14157) * C139480 * C139555) *
                        C10614 -
                    ((C18174 + C18175) * C139480 * C139555 +
                     (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                      C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                         C139480 * C13351) *
                        C10615 +
                    ((C13353 * C1763 + C15260 + C15260 + C13349 * C1779 +
                      C13355 * C1764 + C15261 + C15261 + C139544 * C1780) *
                         C139480 * C13351 +
                     (C21000 + C21001) * C139480 * C139555) *
                        C10616 -
                    ((C13355 * C26691 + C26698 + C26698 + C139544 * C26695 +
                      C13353 * C26692 + C26699 + C26699 + C13349 * C26696) *
                         C139480 * C139555 +
                     (C13355 * C10619 + C26700 + C26700 + C139544 * C10625 +
                      C13353 * C10620 + C26701 + C26701 + C13349 * C10626) *
                         C139480 * C13351) *
                        C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C9304 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139426) *
              C822 +
          (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
             C139555 * C8678) *
                C13354 +
            (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
             C139555 * C8681) *
                C13349 +
            (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
               C139480 * C139426 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C9304) *
              C823 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C13354 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C13349 +
            (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
               C139480 * C9304 -
           ((C13440 * C23999 + C139555 * C24115 + C13439 * C8594 +
             C13351 * C8680) *
                C139544 +
            (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
             C13351 * C8677) *
                C13356 +
            (C13440 * C24000 + C139555 * C24116 + C13439 * C8595 +
             C13351 * C8681) *
                C13349 +
            (C13440 * C23998 + C139555 * C24114 + C13439 * C8592 +
             C13351 * C8678) *
                C13354) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C9304 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
            (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
               C139480 * C139426 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
            (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
               C139480 * C9304 -
           ((C13440 * C4166 + C139555 * C4282 + C13439 * C1774 +
             C13351 * C1884) *
                C139544 +
            (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
             C13351 * C1876) *
                C13356 +
            (C17313 + C17312) * C13349 + (C17311 + C17310) * C13354) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C13354 +
           (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
               C13349 +
           (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
              C139480 * C10614 -
          ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
           (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
            C13351 * C1880) *
               C13349 +
           (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
            C13351 * C1872) *
               C13354) *
              C139480 * C10615 +
          ((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
            C139555 * C6411) *
               C13354 +
           (C13439 * C1771 + C13351 * C1881 + C13440 * C6328 +
            C139555 * C6414) *
               C13349 +
           (C15390 + C15391) * C13356 + (C15392 + C15393) * C139544) *
              C139480 * C10616 -
          ((C13440 * C26693 + C139555 * C26769 + C13439 * C10622 +
            C13351 * C10684) *
               C139544 +
           (C13440 * C26691 + C139555 * C26767 + C13439 * C10619 +
            C13351 * C10681) *
               C13356 +
           (C13440 * C26694 + C139555 * C26770 + C13439 * C10623 +
            C13351 * C10685) *
               C13349 +
           (C13440 * C26692 + C139555 * C26768 + C13439 * C10620 +
            C13351 * C10682) *
               C13354) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C9304 -
           ((C18450 + C18451 + C18468 + C18469) * C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C139426) *
              C822 +
          (((C18469 + C18468 + C18451 + C18450) * C13351 +
            (C24228 + C24229 + C24224 + C24225) * C139555) *
               C139426 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C9304) *
              C823 +
          (((C14417 + C14416 + C14391 + C14390) * C13351 +
            (C20444 + C20445 + C20440 + C20441) * C139555) *
               C9304 -
           (((C273 * C23999 + C139480 * C24217) * C139544 +
             (C273 * C23997 + C139480 * C24215) * C13356 +
             (C273 * C24000 + C139480 * C24218) * C13349 +
             (C273 * C23998 + C139480 * C24216) * C13354) *
                C139555 +
            (C24225 + C24224 + C24229 + C24228) * C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C9304 -
           ((C18450 + C18451 + C18468 + C18469) * C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C139426) *
              C139346 * C5151 +
          (((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
             C2017 * C139544) *
                C13351 +
            (C18460 + C18461 + C18462 + C18463) * C139555) *
               C139426 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          (((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
                C13351 +
            (C16468 + C16469 + C16470 + C16471) * C139555) *
               C9304 -
           (((C273 * C4166 + C139480 * C4400) * C139544 +
             (C273 * C4162 + C139480 * C4396) * C13356 + C4413 * C13349 +
             C4412 * C13354) *
                C139555 +
            (C3586 * C139544 + C3585 * C13356 + C2017 * C13349 +
             C2018 * C13354) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13354 +
            (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
            C304 * C139544) *
               C13351 +
           (C14414 + C14415 + C14388 + C14389) * C139555) *
              C10614 -
          ((C18450 + C18451 + C18468 + C18469) * C139555 +
           (C2019 * C139544 + C2020 * C13356 +
            (C273 * C1770 + C139480 * C1994) * C13349 +
            (C273 * C1762 + C139480 * C1986) * C13354) *
               C13351) *
              C10615 +
          (((C273 * C1763 + C139480 * C1987) * C13354 +
            (C273 * C1771 + C139480 * C1995) * C13349 + C2021 * C13356 +
            C2022 * C139544) *
               C13351 +
           (C21214 + C21215 + C21210 + C21211) * C139555) *
              C10616 -
          (((C273 * C26693 + C139480 * C26839) * C139544 +
            (C273 * C26691 + C139480 * C26837) * C13356 +
            (C273 * C26694 + C139480 * C26840) * C13349 +
            (C273 * C26692 + C139480 * C26838) * C13354) *
               C139555 +
           ((C273 * C10622 + C139480 * C10740) * C139544 +
            (C273 * C10619 + C139480 * C10737) * C13356 +
            (C273 * C10623 + C139480 * C10741) * C13349 +
            (C273 * C10620 + C139480 * C10738) * C13354) *
               C13351) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C9304 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139426) *
              C822 +
          (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
            (C24338 + C24339) * C13440 + (C24340 + C24341) * C139555) *
               C139480 * C139426 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C9304) *
              C823 +
          (((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
            (C20522 + C20523) * C13440 + (C20524 + C20525) * C139555) *
               C139480 * C9304 -
           ((C13356 * C24113 + C139544 * C24327 + C13354 * C24114 +
             C13349 * C24328) *
                C139555 +
            (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
             C13349 * C24000) *
                C13440 +
            (C24341 + C24340) * C13351 + (C24339 + C24338) * C13439) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C9304 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
             C139544 * C1768) *
                C13439 +
            (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
             C139544 * C2098) *
                C13351 +
            (C18620 + C18621) * C13440 + (C18622 + C18623) * C139555) *
               C139480 * C139426 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C13439 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C13351 +
            (C16578 + C16579) * C13440 + (C16580 + C16581) * C139555) *
               C139480 * C9304 -
           ((C13356 * C4278 + C139544 * C4514 + C13354 * C4277 +
             C13349 * C4513) *
                C139555 +
            (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
             C13349 * C4165) *
                C13440 +
            (C13356 * C1876 + C139544 * C2104 + C13354 * C1870 +
             C13349 * C2098) *
                C13351 +
            (C13356 * C1766 + C139544 * C1774 + C13354 * C1760 +
             C13349 * C1768) *
                C13439) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C13439 +
           (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
               C13351 +
           (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
              C139480 * C10614 -
          ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
           (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
            C13349 * C2100) *
               C13351 +
           (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
            C13349 * C1770) *
               C13439) *
              C139480 * C10615 +
          ((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
            C139544 * C1772) *
               C13439 +
           (C13354 * C1873 + C13349 * C2101 + C13356 * C1874 +
            C139544 * C2102) *
               C13351 +
           (C21324 + C21325) * C13440 + (C21326 + C21327) * C139555) *
              C139480 * C10616 -
          ((C13356 * C26767 + C139544 * C26907 + C13354 * C26768 +
            C13349 * C26908) *
               C139555 +
           (C13356 * C26691 + C139544 * C26693 + C13354 * C26692 +
            C13349 * C26694) *
               C13440 +
           (C13356 * C10681 + C139544 * C10793 + C13354 * C10682 +
            C13349 * C10794) *
               C13351 +
           (C13356 * C10619 + C139544 * C10622 + C13354 * C10620 +
            C13349 * C10623) *
               C13439) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C9304 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C139426) *
              C822 +
          (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
             C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                C13349 +
            (C18768 + C18769) * C139544) *
               C139480 * C139426 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C9304) *
              C823 +
          (((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
             C14671 + C14671 + C139555 * C6030) *
                C13349 +
            (C14692 + C14693) * C139544) *
               C139480 * C9304 -
           ((C13676 * C23997 + C24442 + C24442 + C139555 * C24439 +
             C13675 * C8591 + C24443 + C24443 + C13351 * C8914) *
                C139544 +
            (C13676 * C23998 + C24444 + C24444 + C139555 * C24440 +
             C13675 * C8592 + C24445 + C24445 + C13351 * C8915) *
                C13349) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C9304 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
               C139480 * C139426 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) *
               C139480 * C9304 -
           ((C13676 * C4162 + C17612 + C17612 + C139555 * C4616 +
             C13675 * C1766 + C17613 + C17613 + C13351 * C2186) *
                C139544 +
            (C17619 + C17618) * C13349) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
            C13679 + C13679 + C139555 * C1249) *
               C13349 +
           (C13712 + C13713) * C139544) *
              C139480 * C10614 -
          ((C15722 + C15723) * C139544 +
           (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
            C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
               C13349) *
              C139480 * C10615 +
          ((C13675 * C1763 + C15702 + C15702 + C13351 * C2183 + C13676 * C6325 +
            C15703 + C15703 + C139555 * C6648) *
               C13349 +
           (C15724 + C15725) * C139544) *
              C139480 * C10616 -
          ((C13676 * C26691 + C26978 + C26978 + C139555 * C26975 +
            C13675 * C10619 + C26979 + C26979 + C13351 * C10846) *
               C139544 +
           (C13676 * C26692 + C26980 + C26980 + C139555 * C26976 +
            C13675 * C10620 + C26981 + C26981 + C13351 * C10847) *
               C13349) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13439 +
             (C273 * C187 + C139480 * C499) * C13351 + C14408 * C13440 +
             C14805 * C139555) *
                C13349 +
            (C13784 + C13785 + C13786 + C13787) * C139544) *
               C9304 -
           ((C15824 + C15825 + C15826 + C15827) * C139544 +
            (C18907 * C139555 + C18465 * C13440 +
             (C273 * C1872 + C139480 * C2292) * C13351 +
             (C273 * C1762 + C139480 * C1986) * C13439) *
                C13349) *
               C139426) *
              C822 +
          (((C18465 * C13439 + C18907 * C13351 + C24226 * C13440 +
             C24548 * C139555) *
                C13349 +
            (C18902 + C18903 + C18904 + C18909) * C139544) *
               C139426 -
           ((C14794 + C14795 + C14796 + C14797) * C139544 +
            (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
             C14408 * C13439) *
                C13349) *
               C9304) *
              C823 +
          (((C14411 * C13439 + C14806 * C13351 + C20442 * C13440 +
             C20668 * C139555) *
                C13349 +
            (C14800 + C14801 + C14802 + C14808) * C139544) *
               C9304 -
           (((C273 * C24113 + C139480 * C24543) * C139555 +
             (C273 * C23997 + C139480 * C24215) * C13440 + C18908 * C13351 +
             C18466 * C13439) *
                C139544 +
            ((C273 * C24114 + C139480 * C24544) * C139555 +
             (C273 * C23998 + C139480 * C24216) * C13440 + C24548 * C13351 +
             C24226 * C13439) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C273 * C106 + C139480 * C274) * C13439 +
                                 (C273 * C187 + C139480 * C499) * C13351 +
                                 C14408 * C13440 + C14805 * C139555) *
                                    C13349 +
                                (C13784 + C13785 + C13786 + C13787) * C139544) *
                                   C9304 -
                               ((C15824 + C15825 + C15826 + C15827) * C139544 +
                                (C18907 * C139555 + C18465 * C13440 +
                                 (C273 * C1872 + C139480 * C2292) * C13351 +
                                 (C273 * C1762 + C139480 * C1986) * C13439) *
                                    C13349) *
                                   C139426) *
                                  C139346 * C5151 +
                              (((C15827 + C15826 + C15825 + C15824) * C13349 +
                                (C17718 + C17719 + C17720 + C17721) * C139544) *
                                   C139426 -
                               ((C13788 + C13789 + C13790 + C13791) * C139544 +
                                (C13787 + C13786 + C13785 + C13784) * C13349) *
                                   C9304) *
                                  C139346 * C5152 +
                              (((C13791 + C13790 + C13789 + C13788) * C13349 +
                                (C13792 + C13793 + C13794 + C13795) * C139544) *
                                   C9304 -
                               (((C273 * C4278 + C139480 * C4732) * C139555 +
                                 (C273 * C4162 + C139480 * C4396) * C13440 +
                                 C3822 * C13351 + C3585 * C13439) *
                                    C139544 +
                                (C17721 + C17720 + C17719 + C17718) * C13349) *
                                   C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C13439 +
            (C273 * C187 + C139480 * C499) * C13351 + C14408 * C13440 +
            C14805 * C139555) *
               C13349 +
           (C13784 + C13785 + C13786 + C13787) * C139544) *
              C10614 -
          ((C15824 + C15825 + C15826 + C15827) * C139544 +
           (C18907 * C139555 + C18465 * C13440 +
            (C273 * C1872 + C139480 * C2292) * C13351 +
            (C273 * C1762 + C139480 * C1986) * C13439) *
               C13349) *
              C10615 +
          (((C273 * C1763 + C139480 * C1987) * C13439 +
            (C273 * C1873 + C139480 * C2293) * C13351 + C21212 * C13440 +
            C21534 * C139555) *
               C13349 +
           (C15828 + C15829 + C15830 + C15834) * C139544) *
              C10616 -
          (((C273 * C26767 + C139480 * C27047) * C139555 +
            (C273 * C26691 + C139480 * C26837) * C13440 +
            (C273 * C10681 + C139480 * C10902) * C13351 +
            (C273 * C10619 + C139480 * C10737) * C13439) *
               C139544 +
           ((C273 * C26768 + C139480 * C27048) * C139555 +
            (C273 * C26692 + C139480 * C26838) * C13440 +
            (C273 * C10682 + C139480 * C10903) * C13351 +
            (C273 * C10620 + C139480 * C10738) * C13439) *
               C13349) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C9304 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139426) *
              C822 +
          ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
            ((C24338 + C24339) * C273 + (C24653 + C24654) * C139480) *
                C139555) *
               C139426 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C9304) *
              C823 +
          ((((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
            ((C20522 + C20523) * C273 + (C20741 + C20742) * C139480) *
                C139555) *
               C9304 -
           (((C13356 * C24215 + C139544 * C24646 + C13354 * C24216 +
              C13349 * C24647) *
                 C139480 +
             (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
              C13349 * C24000) *
                 C273) *
                C139555 +
            ((C24654 + C24653) * C139480 + (C24339 + C24338) * C273) * C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C9304 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139426) *
              C139346 * C5151 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C13351 +
            ((C18620 + C18621) * C273 + (C19050 + C19051) * C139480) *
                C139555) *
               C139426 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C273 +
             (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                 C139480) *
                C13351 +
            ((C16578 + C16579) * C273 + (C16896 + C16897) * C139480) *
                C139555) *
               C9304 -
           (((C13356 * C4396 + C139544 * C4844 + C13354 * C4395 +
              C13349 * C4843) *
                 C139480 +
             (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
              C13349 * C4165) *
                 C273) *
                C139555 +
            ((C13356 * C1990 + C139544 * C2398 + C13354 * C1984 +
              C13349 * C2392) *
                 C139480 +
             (C13356 * C1766 + C139544 * C1774 + C13354 * C1760 +
              C13349 * C1768) *
                 C273) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C273 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C139480) *
               C13351 +
           ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) * C139555) *
              C10614 -
          (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
           ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
             C13349 * C2394) *
                C139480 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C273) *
               C13351) *
              C10615 +
          (((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
             C139544 * C1772) *
                C273 +
            (C13354 * C1987 + C13349 * C2395 + C13356 * C1988 +
             C139544 * C2396) *
                C139480) *
               C13351 +
           ((C21324 + C21325) * C273 + (C21639 + C21640) * C139480) * C139555) *
              C10616 -
          (((C13356 * C26837 + C139544 * C27115 + C13354 * C26838 +
             C13349 * C27116) *
                C139480 +
            (C13356 * C26691 + C139544 * C26693 + C13354 * C26692 +
             C13349 * C26694) *
                C273) *
               C139555 +
           ((C13356 * C10737 + C139544 * C10955 + C13354 * C10738 +
             C13349 * C10956) *
                C139480 +
            (C13356 * C10619 + C139544 * C10622 + C13354 * C10620 +
             C13349 * C10623) *
                C273) *
               C13351) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C9304 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139426) *
              C822 +
          ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C13349 +
            ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                C139544) *
               C139426 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C9304) *
              C823 +
          ((((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C13349 +
            ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) *
                C139544) *
               C9304 -
           (((C13440 * C24215 + C139555 * C24752 + C13439 * C8757 +
              C13351 * C9148) *
                 C139480 +
             (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
              C13351 * C8677) *
                 C273) *
                C139544 +
            ((C13440 * C24216 + C139555 * C24753 + C13439 * C8758 +
              C13351 * C9149) *
                 C139480 +
             (C13440 * C23998 + C139555 * C24114 + C13439 * C8592 +
              C13351 * C8678) *
                 C273) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C9304 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139426) *
              C139346 * C5151 +
          ((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
            ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                C139544) *
               C139426 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C9304) *
              C139346 * C5152 +
          ((((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
            ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) *
                C139544) *
               C9304 -
           (((C13440 * C4396 + C139555 * C4946 + C13439 * C1990 +
              C13351 * C2480) *
                 C139480 +
             (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
              C13351 * C1876) *
                 C273) *
                C139544 +
            ((C17923 + C17922) * C139480 + (C17311 + C17310) * C273) * C13349) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C273 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C139480) *
               C13349 +
           ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) * C139544) *
              C10614 -
          (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
           ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
             C13351 * C2476) *
                C139480 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C273) *
               C13349) *
              C10615 +
          (((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
             C139555 * C6411) *
                C273 +
            (C13439 * C1987 + C13351 * C2477 + C13440 * C6491 +
             C139555 * C6882) *
                C139480) *
               C13349 +
           ((C15390 + C15391) * C273 + (C16041 + C16042) * C139480) * C139544) *
              C10616 -
          (((C13440 * C26837 + C139555 * C27183 + C13439 * C10737 +
             C13351 * C11008) *
                C139480 +
            (C13440 * C26691 + C139555 * C26767 + C13439 * C10619 +
             C13351 * C10681) *
                C273) *
               C139544 +
           ((C13440 * C26838 + C139555 * C27184 + C13439 * C10738 +
             C13351 * C11009) *
                C139480 +
            (C13440 * C26692 + C139555 * C26768 + C13439 * C10620 +
             C13351 * C10682) *
                C273) *
               C13349) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C9304 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139426) *
              C822 +
          (((C19327 * C13351 + C24861 * C139555) * C13349 +
            (C19320 + C19329) * C139544) *
               C139426 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C9304) *
              C823 +
          (((C15155 * C13351 + C20885 * C139555) * C13349 +
            (C15145 + C15157) * C139544) *
               C9304 -
           (((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C139555 +
             C19328 * C13351) *
                C139544 +
            ((C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C139555 +
             C24861 * C13351) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C9304 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139426) *
              C139346 * C5151 +
          (((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
               C139426 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) * C9304) *
              C139346 * C5152 +
          (((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) * C9304 -
           (((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139555 +
             C4060 * C13351) *
                C139544 +
            (C18023 + C18022) * C13349) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
            C15154 * C139555) *
               C13349 +
           (C14012 + C14013) * C139544) *
              C10614 -
          ((C16141 + C16142) * C139544 +
           (C19327 * C139555 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
               C13349) *
              C10615 +
          (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C13351 +
            C21847 * C139555) *
               C13349 +
           (C16143 + C16149) * C139544) *
              C10616 -
          (((C711 * C26691 + C27254 + C27254 + C139480 * C27251) * C139555 +
            (C711 * C10619 + C11065 + C11065 + C139480 * C11061) * C13351) *
               C139544 +
           ((C711 * C26692 + C27255 + C27255 + C139480 * C27252) * C139555 +
            (C711 * C10620 + C11066 + C11066 + C139480 * C11062) * C13351) *
               C13349) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C139562 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139563 +
                     ((C13353 * C1763 + C15260 + C15260 + C13349 * C1779 +
                       C13355 * C1764 + C15261 + C15261 + C139544 * C1780) *
                          C139480 * C13351 +
                      (C21000 + C21001) * C139480 * C139555) *
                         C12024) *
                        C139346 * C139521 +
                    (((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                       C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                          C139480 * C13351 +
                      (C18176 + C18177) * C139480 * C139555) *
                         C139563 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C139562 -
                     ((C13355 * C6323 + C15268 + C15268 + C139544 * C6329 +
                       C13353 * C6324 + C15269 + C15269 + C13349 * C6330) *
                          C139480 * C139555 +
                      (C13355 * C1765 + C15270 + C15270 + C139544 * C1781 +
                       C13353 * C1764 + C15271 + C15271 + C13349 * C1780) *
                          C139480 * C13351) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C139562 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139563 +
           ((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
             C139555 * C6411) *
                C13354 +
            (C13439 * C1771 + C13351 * C1881 + C13440 * C6328 +
             C139555 * C6414) *
                C13349 +
            (C15390 + C15391) * C13356 + (C15392 + C15393) * C139544) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
            (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
               C139480 * C139563 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C139562 -
           ((C13440 * C6326 + C139555 * C6412 + C13439 * C1773 +
             C13351 * C1883) *
                C139544 +
            (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
             C13351 * C1875) *
                C13356 +
            (C15393 + C15392) * C13349 + (C15391 + C15390) * C13354) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C139562 -
           ((C18450 + C18451 + C18468 + C18469) * C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C139563 +
           (((C273 * C1763 + C139480 * C1987) * C13354 +
             (C273 * C1771 + C139480 * C1995) * C13349 + C2021 * C13356 +
             C2022 * C139544) *
                C13351 +
            (C21214 + C21215 + C21210 + C21211) * C139555) *
               C12024) *
              C139346 * C139521 +
          (((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
             C2017 * C139544) *
                C13351 +
            (C18460 + C18461 + C18462 + C18463) * C139555) *
               C139563 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C139562 -
           (((C273 * C6326 + C139480 * C6492) * C139544 +
             (C273 * C6323 + C139480 * C6489) * C13356 + C15497 * C13349 +
             C15496 * C13354) *
                C139555 +
            (C2024 * C139544 + C2023 * C13356 + C2022 * C13349 +
             C2021 * C13354) *
                C13351) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C139562 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139563 +
           ((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
             C139544 * C1772) *
                C13439 +
            (C13354 * C1873 + C13349 * C2101 + C13356 * C1874 +
             C139544 * C2102) *
                C13351 +
            (C21324 + C21325) * C13440 + (C21326 + C21327) * C139555) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
             C139544 * C1768) *
                C13439 +
            (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
             C139544 * C2098) *
                C13351 +
            (C18620 + C18621) * C13440 + (C18622 + C18623) * C139555) *
               C139480 * C139563 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C139562 -
           ((C13356 * C6409 + C139544 * C6569 + C13354 * C6410 +
             C13349 * C6570) *
                C139555 +
            (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
             C13349 * C6327) *
                C13440 +
            (C13356 * C1875 + C139544 * C2103 + C13354 * C1874 +
             C13349 * C2102) *
                C13351 +
            (C13356 * C1765 + C139544 * C1773 + C13354 * C1764 +
             C13349 * C1772) *
                C13439) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C139562 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C139563 +
           ((C13675 * C1763 + C15702 + C15702 + C13351 * C2183 +
             C13676 * C6325 + C15703 + C15703 + C139555 * C6648) *
                C13349 +
            (C15724 + C15725) * C139544) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
               C139480 * C139563 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C139562 -
           ((C13676 * C6323 + C15712 + C15712 + C139555 * C6646 +
             C13675 * C1765 + C15713 + C15713 + C13351 * C2185) *
                C139544 +
            (C15725 + C15724) * C13349) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C139562 -
                     ((C15824 + C15825 + C15826 + C15827) * C139544 +
                      (C18907 * C139555 + C18465 * C13440 +
                       (C273 * C1872 + C139480 * C2292) * C13351 +
                       (C273 * C1762 + C139480 * C1986) * C13439) *
                          C13349) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C13439 +
                       (C273 * C1873 + C139480 * C2293) * C13351 +
                       C21212 * C13440 + C21534 * C139555) *
                          C13349 +
                      (C15828 + C15829 + C15830 + C15834) * C139544) *
                         C12024) *
                        C139346 * C139521 +
                    (((C15827 + C15826 + C15825 + C15824) * C13349 +
                      (C17718 + C17719 + C17720 + C17721) * C139544) *
                         C139563 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C139562 -
                     (((C273 * C6409 + C139480 * C6726) * C139555 +
                       (C273 * C6323 + C139480 * C6489) * C13440 +
                       C2314 * C13351 + C2023 * C13439) *
                          C139544 +
                      (C15834 + C15830 + C15829 + C15828) * C13349) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C139562 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139563 +
           (((C13354 * C1763 + C13349 * C1771 + C13356 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C13354 * C1987 + C13349 * C2395 + C13356 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C13351 +
            ((C21324 + C21325) * C273 + (C21639 + C21640) * C139480) *
                C139555) *
               C12024) *
              C139346 * C139521 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C13351 +
            ((C18620 + C18621) * C273 + (C19050 + C19051) * C139480) *
                C139555) *
               C139563 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C139562 -
           (((C13356 * C6489 + C139544 * C6803 + C13354 * C6490 +
              C13349 * C6804) *
                 C139480 +
             (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
              C13349 * C6327) *
                 C273) *
                C139555 +
            ((C13356 * C1989 + C139544 * C2397 + C13354 * C1988 +
              C13349 * C2396) *
                 C139480 +
             (C13356 * C1765 + C139544 * C1773 + C13354 * C1764 +
              C13349 * C1772) *
                 C273) *
                C13351) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C139562 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139563 +
           (((C13439 * C1763 + C13351 * C1873 + C13440 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C13439 * C1987 + C13351 * C2477 + C13440 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C13349 +
            ((C15390 + C15391) * C273 + (C16041 + C16042) * C139480) *
                C139544) *
               C12024) *
              C139346 * C139521 +
          ((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
            ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                C139544) *
               C139563 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C139562 -
           (((C13440 * C6489 + C139555 * C6880 + C13439 * C1989 +
              C13351 * C2479) *
                 C139480 +
             (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
              C13351 * C1875) *
                 C273) *
                C139544 +
            ((C16042 + C16041) * C139480 + (C15391 + C15390) * C273) * C13349) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C139562 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139563 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C13351 +
             C21847 * C139555) *
                C13349 +
            (C16143 + C16149) * C139544) *
               C12024) *
              C139346 * C139521 +
          (((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
               C139563 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) *
               C139562 -
           (((C711 * C6323 + C6961 + C6961 + C139480 * C6957) * C139555 +
             C2612 * C13351) *
                C139544 +
            (C16149 + C16143) * C13349) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C9304 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139426) *
                        C139346 * C5151 +
                    (((C13353 * C1761 + C15264 + C15264 + C13349 * C1777 +
                       C13355 * C1760 + C15265 + C15265 + C139544 * C1776) *
                          C139480 * C13351 +
                      (C18176 + C18177) * C139480 * C139555) *
                         C139426 -
                     ((C14161 + C14160) * C139480 * C139555 +
                      (C13355 * C108 + C13364 + C13364 + C139544 * C120 +
                       C13353 * C107 + C13365 + C13365 + C13349 * C119) *
                          C139480 * C13351) *
                         C9304) *
                        C139346 * C5152 +
                    (((C13353 * C108 + C13366 + C13366 + C13349 * C120 +
                       C13355 * C109 + C13367 + C13367 + C139544 * C121) *
                          C139480 * C13351 +
                      (C16258 + C16259) * C139480 * C139555) *
                         C9304 -
                     ((C13355 * C4162 + C17200 + C17200 + C139544 * C4170 +
                       C13353 * C4161 + C17201 + C17201 + C13349 * C4169) *
                          C139480 * C139555 +
                      (C13355 * C1766 + C17202 + C17202 + C139544 * C1782 +
                       C13353 * C1760 + C17203 + C17203 + C13349 * C1776) *
                          C139480 * C13351) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 +
                       C13355 * C107 + C13359 + C13359 + C139544 * C119) *
                          C139480 * C13351 +
                      (C14156 + C14157) * C139480 * C139555) *
                         C9304 -
                     ((C18174 + C18175) * C139480 * C139555 +
                      (C13355 * C1761 + C15258 + C15258 + C139544 * C1777 +
                       C13353 * C1762 + C15259 + C15259 + C13349 * C1778) *
                          C139480 * C13351) *
                         C139426) *
                        C822 +
                    (((C18175 + C18174) * C139480 * C13351 +
                      (C24014 + C24015) * C139480 * C139555) *
                         C139426 -
                     ((C14158 + C14159) * C139480 * C139555 +
                      (C14157 + C14156) * C139480 * C13351) *
                         C9304) *
                        C823 +
                    (((C14159 + C14158) * C139480 * C13351 +
                      (C20294 + C20295) * C139480 * C139555) *
                         C9304 -
                     ((C13355 * C23997 + C24008 + C24008 + C139544 * C24001 +
                       C13353 * C23998 + C24009 + C24009 + C13349 * C24002) *
                          C139480 * C139555 +
                      (C24015 + C24014) * C139480 * C13351) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C9304 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C15389 + C15388) * C13354 + (C15387 + C15386) * C13349 +
            (C17310 + C17311) * C13356 + (C17312 + C17313) * C139544) *
               C139480 * C139426 -
           ((C13470 + C13471) * C139544 + (C13472 + C13473) * C13356 +
            (C13469 + C13468) * C13349 + (C13467 + C13466) * C13354) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C13473 + C13472) * C13354 + (C13471 + C13470) * C13349 +
            (C13474 + C13475) * C13356 + (C13476 + C13477) * C139544) *
               C139480 * C9304 -
           ((C13440 * C4166 + C139555 * C4282 + C13439 * C1774 +
             C13351 * C1884) *
                C139544 +
            (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
             C13351 * C1876) *
                C13356 +
            (C17313 + C17312) * C13349 + (C17311 + C17310) * C13354) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C13354 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C13349 +
            (C13466 + C13467) * C13356 + (C13468 + C13469) * C139544) *
               C139480 * C9304 -
           ((C15386 + C15387) * C139544 + (C15388 + C15389) * C13356 +
            (C13440 * C4163 + C139555 * C4279 + C13439 * C1770 +
             C13351 * C1880) *
                C13349 +
            (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
             C13351 * C1872) *
                C13354) *
               C139480 * C139426) *
              C822 +
          (((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
             C139555 * C8678) *
                C13354 +
            (C13439 * C4163 + C13351 * C4279 + C13440 * C8595 +
             C139555 * C8681) *
                C13349 +
            (C18316 + C18317) * C13356 + (C18318 + C18319) * C139544) *
               C139480 * C139426 -
           ((C14278 + C14279) * C139544 + (C14280 + C14281) * C13356 +
            (C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C13349 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C13354) *
               C139480 * C9304) *
              C823 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C13354 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C13349 +
            (C14282 + C14283) * C13356 + (C14284 + C14285) * C139544) *
               C139480 * C9304 -
           ((C13440 * C23999 + C139555 * C24115 + C13439 * C8594 +
             C13351 * C8680) *
                C139544 +
            (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
             C13351 * C8677) *
                C13356 +
            (C13440 * C24000 + C139555 * C24116 + C13439 * C8595 +
             C13351 * C8681) *
                C13349 +
            (C13440 * C23998 + C139555 * C24114 + C13439 * C8592 +
             C13351 * C8678) *
                C13354) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C9304 -
           ((C18450 + C18451 + C18468 + C18469) * C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C139426) *
              C139346 * C5151 +
          (((C2020 * C13354 + C2019 * C13349 + C2018 * C13356 +
             C2017 * C139544) *
                C13351 +
            (C18460 + C18461 + C18462 + C18463) * C139555) *
               C139426 -
           ((C14403 + C14402 + C14401 + C14400) * C139555 +
            (C306 * C139544 + C305 * C13356 + C304 * C13349 + C303 * C13354) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          (((C305 * C13354 + C306 * C13349 + C308 * C13356 + C307 * C139544) *
                C13351 +
            (C16468 + C16469 + C16470 + C16471) * C139555) *
               C9304 -
           (((C273 * C4166 + C139480 * C4400) * C139544 +
             (C273 * C4162 + C139480 * C4396) * C13356 + C4413 * C13349 +
             C4412 * C13354) *
                C139555 +
            (C3586 * C139544 + C3585 * C13356 + C2017 * C13349 +
             C2018 * C13354) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C13354 +
             (C273 * C112 + C139480 * C280) * C13349 + C303 * C13356 +
             C304 * C139544) *
                C13351 +
            (C14414 + C14415 + C14388 + C14389) * C139555) *
               C9304 -
           ((C18450 + C18451 + C18468 + C18469) * C139555 +
            (C2019 * C139544 + C2020 * C13356 +
             (C273 * C1770 + C139480 * C1994) * C13349 +
             (C273 * C1762 + C139480 * C1986) * C13354) *
                C13351) *
               C139426) *
              C822 +
          (((C18469 + C18468 + C18451 + C18450) * C13351 +
            (C24228 + C24229 + C24224 + C24225) * C139555) *
               C139426 -
           ((C14390 + C14391 + C14416 + C14417) * C139555 +
            (C14389 + C14388 + C14415 + C14414) * C13351) *
               C9304) *
              C823 +
          (((C14417 + C14416 + C14391 + C14390) * C13351 +
            (C20444 + C20445 + C20440 + C20441) * C139555) *
               C9304 -
           (((C273 * C23999 + C139480 * C24217) * C139544 +
             (C273 * C23997 + C139480 * C24215) * C13356 +
             (C273 * C24000 + C139480 * C24218) * C13349 +
             (C273 * C23998 + C139480 * C24216) * C13354) *
                C139555 +
            (C24225 + C24224 + C24229 + C24228) * C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C9304 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
             C139544 * C1768) *
                C13439 +
            (C13354 * C1871 + C13349 * C2099 + C13356 * C1870 +
             C139544 * C2098) *
                C13351 +
            (C18620 + C18621) * C13440 + (C18622 + C18623) * C139555) *
               C139480 * C139426 -
           ((C14559 + C14558) * C139555 + (C14557 + C14556) * C13440 +
            (C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C13351 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C13439) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C13439 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C13351 +
            (C16578 + C16579) * C13440 + (C16580 + C16581) * C139555) *
               C139480 * C9304 -
           ((C13356 * C4278 + C139544 * C4514 + C13354 * C4277 +
             C13349 * C4513) *
                C139555 +
            (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
             C13349 * C4165) *
                C13440 +
            (C13356 * C1876 + C139544 * C2104 + C13354 * C1870 +
             C13349 * C2098) *
                C13351 +
            (C13356 * C1766 + C139544 * C1774 + C13354 * C1760 +
             C13349 * C1768) *
                C13439) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C13439 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C13351 +
            (C14548 + C14549) * C13440 + (C14550 + C14551) * C139555) *
               C139480 * C9304 -
           ((C18616 + C18617) * C139555 + (C18618 + C18619) * C13440 +
            (C13356 * C1871 + C139544 * C2099 + C13354 * C1872 +
             C13349 * C2100) *
                C13351 +
            (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
             C13349 * C1770) *
                C13439) *
               C139480 * C139426) *
              C822 +
          (((C18619 + C18618) * C13439 + (C18617 + C18616) * C13351 +
            (C24338 + C24339) * C13440 + (C24340 + C24341) * C139555) *
               C139480 * C139426 -
           ((C14552 + C14553) * C139555 + (C14554 + C14555) * C13440 +
            (C14551 + C14550) * C13351 + (C14549 + C14548) * C13439) *
               C139480 * C9304) *
              C823 +
          (((C14555 + C14554) * C13439 + (C14553 + C14552) * C13351 +
            (C20522 + C20523) * C13440 + (C20524 + C20525) * C139555) *
               C139480 * C9304 -
           ((C13356 * C24113 + C139544 * C24327 + C13354 * C24114 +
             C13349 * C24328) *
                C139555 +
            (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
             C13349 * C24000) *
                C13440 +
            (C24341 + C24340) * C13351 + (C24339 + C24338) * C13439) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C9304 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C15723 + C15722) * C13349 + (C17618 + C17619) * C139544) *
               C139480 * C139426 -
           ((C13714 + C13715) * C139544 + (C13713 + C13712) * C13349) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C13715 + C13714) * C13349 + (C13716 + C13717) * C139544) *
               C139480 * C9304 -
           ((C13676 * C4162 + C17612 + C17612 + C139555 * C4616 +
             C13675 * C1766 + C17613 + C17613 + C13351 * C2186) *
                C139544 +
            (C17619 + C17618) * C13349) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 + C13676 * C829 +
             C13679 + C13679 + C139555 * C1249) *
                C13349 +
            (C13712 + C13713) * C139544) *
               C139480 * C9304 -
           ((C15722 + C15723) * C139544 +
            (C13676 * C4159 + C15700 + C15700 + C139555 * C4613 +
             C13675 * C1762 + C15701 + C15701 + C13351 * C2182) *
                C13349) *
               C139480 * C139426) *
              C822 +
          (((C13675 * C4159 + C18754 + C18754 + C13351 * C4613 +
             C13676 * C8592 + C18755 + C18755 + C139555 * C8915) *
                C13349 +
            (C18768 + C18769) * C139544) *
               C139480 * C139426 -
           ((C14690 + C14691) * C139544 +
            (C13676 * C830 + C14668 + C14668 + C139555 * C1250 + C13675 * C829 +
             C14669 + C14669 + C13351 * C1249) *
                C13349) *
               C139480 * C9304) *
              C823 +
          (((C13675 * C830 + C14670 + C14670 + C13351 * C1250 + C13676 * C5803 +
             C14671 + C14671 + C139555 * C6030) *
                C13349 +
            (C14692 + C14693) * C139544) *
               C139480 * C9304 -
           ((C13676 * C23997 + C24442 + C24442 + C139555 * C24439 +
             C13675 * C8591 + C24443 + C24443 + C13351 * C8914) *
                C139544 +
            (C13676 * C23998 + C24444 + C24444 + C139555 * C24440 +
             C13675 * C8592 + C24445 + C24445 + C13351 * C8915) *
                C13349) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C9304 -
                     ((C15824 + C15825 + C15826 + C15827) * C139544 +
                      (C18907 * C139555 + C18465 * C13440 +
                       (C273 * C1872 + C139480 * C2292) * C13351 +
                       (C273 * C1762 + C139480 * C1986) * C13439) *
                          C13349) *
                         C139426) *
                        C139346 * C5151 +
                    (((C15827 + C15826 + C15825 + C15824) * C13349 +
                      (C17718 + C17719 + C17720 + C17721) * C139544) *
                         C139426 -
                     ((C13788 + C13789 + C13790 + C13791) * C139544 +
                      (C13787 + C13786 + C13785 + C13784) * C13349) *
                         C9304) *
                        C139346 * C5152 +
                    (((C13791 + C13790 + C13789 + C13788) * C13349 +
                      (C13792 + C13793 + C13794 + C13795) * C139544) *
                         C9304 -
                     (((C273 * C4278 + C139480 * C4732) * C139555 +
                       (C273 * C4162 + C139480 * C4396) * C13440 +
                       C3822 * C13351 + C3585 * C13439) *
                          C139544 +
                      (C17721 + C17720 + C17719 + C17718) * C13349) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C13439 +
                       (C273 * C187 + C139480 * C499) * C13351 +
                       C14408 * C13440 + C14805 * C139555) *
                          C13349 +
                      (C13784 + C13785 + C13786 + C13787) * C139544) *
                         C9304 -
                     ((C15824 + C15825 + C15826 + C15827) * C139544 +
                      (C18907 * C139555 + C18465 * C13440 +
                       (C273 * C1872 + C139480 * C2292) * C13351 +
                       (C273 * C1762 + C139480 * C1986) * C13439) *
                          C13349) *
                         C139426) *
                        C822 +
                    (((C18465 * C13439 + C18907 * C13351 + C24226 * C13440 +
                       C24548 * C139555) *
                          C13349 +
                      (C18902 + C18903 + C18904 + C18909) * C139544) *
                         C139426 -
                     ((C14794 + C14795 + C14796 + C14797) * C139544 +
                      (C14806 * C139555 + C14411 * C13440 + C14805 * C13351 +
                       C14408 * C13439) *
                          C13349) *
                         C9304) *
                        C823 +
                    (((C14411 * C13439 + C14806 * C13351 + C20442 * C13440 +
                       C20668 * C139555) *
                          C13349 +
                      (C14800 + C14801 + C14802 + C14808) * C139544) *
                         C9304 -
                     (((C273 * C24113 + C139480 * C24543) * C139555 +
                       (C273 * C23997 + C139480 * C24215) * C13440 +
                       C18908 * C13351 + C18466 * C13439) *
                          C139544 +
                      ((C273 * C24114 + C139480 * C24544) * C139555 +
                       (C273 * C23998 + C139480 * C24216) * C13440 +
                       C24548 * C13351 + C24226 * C13439) *
                          C13349) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C9304 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139426) *
              C139346 * C5151 +
          ((((C13354 * C1761 + C13349 * C1769 + C13356 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C13354 * C1985 + C13349 * C2393 + C13356 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C13351 +
            ((C18620 + C18621) * C273 + (C19050 + C19051) * C139480) *
                C139555) *
               C139426 -
           (((C14928 + C14927) * C139480 + (C14557 + C14556) * C273) * C139555 +
            ((C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C139480 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C273) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C273 +
             (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                 C139480) *
                C13351 +
            ((C16578 + C16579) * C273 + (C16896 + C16897) * C139480) *
                C139555) *
               C9304 -
           (((C13356 * C4396 + C139544 * C4844 + C13354 * C4395 +
              C13349 * C4843) *
                 C139480 +
             (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
              C13349 * C4165) *
                 C273) *
                C139555 +
            ((C13356 * C1990 + C139544 * C2398 + C13354 * C1984 +
              C13349 * C2392) *
                 C139480 +
             (C13356 * C1766 + C139544 * C1774 + C13354 * C1760 +
              C13349 * C1768) *
                 C273) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C273 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C139480) *
                C13351 +
            ((C14548 + C14549) * C273 + (C14923 + C14924) * C139480) *
                C139555) *
               C9304 -
           (((C19048 + C19049) * C139480 + (C18618 + C18619) * C273) * C139555 +
            ((C13356 * C1985 + C139544 * C2393 + C13354 * C1986 +
              C13349 * C2394) *
                 C139480 +
             (C13356 * C1761 + C139544 * C1769 + C13354 * C1762 +
              C13349 * C1770) *
                 C273) *
                C13351) *
               C139426) *
              C822 +
          ((((C18619 + C18618) * C273 + (C19049 + C19048) * C139480) * C13351 +
            ((C24338 + C24339) * C273 + (C24653 + C24654) * C139480) *
                C139555) *
               C139426 -
           (((C14925 + C14926) * C139480 + (C14554 + C14555) * C273) * C139555 +
            ((C14924 + C14923) * C139480 + (C14549 + C14548) * C273) * C13351) *
               C9304) *
              C823 +
          ((((C14555 + C14554) * C273 + (C14926 + C14925) * C139480) * C13351 +
            ((C20522 + C20523) * C273 + (C20741 + C20742) * C139480) *
                C139555) *
               C9304 -
           (((C13356 * C24215 + C139544 * C24646 + C13354 * C24216 +
              C13349 * C24647) *
                 C139480 +
             (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
              C13349 * C24000) *
                 C273) *
                C139555 +
            ((C24654 + C24653) * C139480 + (C24339 + C24338) * C273) * C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C9304 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139426) *
              C139346 * C5151 +
          ((((C15389 + C15388) * C273 + (C16040 + C16039) * C139480) * C13349 +
            ((C17310 + C17311) * C273 + (C17922 + C17923) * C139480) *
                C139544) *
               C139426 -
           (((C13942 + C13943) * C139480 + (C13472 + C13473) * C273) * C139544 +
            ((C13941 + C13940) * C139480 + (C13467 + C13466) * C273) * C13349) *
               C9304) *
              C139346 * C5152 +
          ((((C13473 + C13472) * C273 + (C13943 + C13942) * C139480) * C13349 +
            ((C13474 + C13475) * C273 + (C13944 + C13945) * C139480) *
                C139544) *
               C9304 -
           (((C13440 * C4396 + C139555 * C4946 + C13439 * C1990 +
              C13351 * C2480) *
                 C139480 +
             (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
              C13351 * C1876) *
                 C273) *
                C139544 +
            ((C17923 + C17922) * C139480 + (C17311 + C17310) * C273) * C13349) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C273 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C13349 +
            ((C13466 + C13467) * C273 + (C13940 + C13941) * C139480) *
                C139544) *
               C9304 -
           (((C16039 + C16040) * C139480 + (C15388 + C15389) * C273) * C139544 +
            ((C13440 * C4393 + C139555 * C4943 + C13439 * C1986 +
              C13351 * C2476) *
                 C139480 +
             (C13440 * C4159 + C139555 * C4275 + C13439 * C1762 +
              C13351 * C1872) *
                 C273) *
                C13349) *
               C139426) *
              C822 +
          ((((C13439 * C4159 + C13351 * C4275 + C13440 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C13439 * C4393 + C13351 * C4943 + C13440 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C13349 +
            ((C18316 + C18317) * C273 + (C19186 + C19187) * C139480) *
                C139544) *
               C139426 -
           (((C15037 + C15038) * C139480 + (C14280 + C14281) * C273) * C139544 +
            ((C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C139480 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C273) *
                C13349) *
               C9304) *
              C823 +
          ((((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C13349 +
            ((C14282 + C14283) * C273 + (C15039 + C15040) * C139480) *
                C139544) *
               C9304 -
           (((C13440 * C24215 + C139555 * C24752 + C13439 * C8757 +
              C13351 * C9148) *
                 C139480 +
             (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
              C13351 * C8677) *
                 C273) *
                C139544 +
            ((C13440 * C24216 + C139555 * C24753 + C13439 * C8758 +
              C13351 * C9149) *
                 C139480 +
             (C13440 * C23998 + C139555 * C24114 + C13439 * C8592 +
              C13351 * C8678) *
                 C273) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C9304 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139426) *
              C139346 * C5151 +
          (((C16142 + C16141) * C13349 + (C18022 + C18023) * C139544) *
               C139426 -
           ((C14014 + C14015) * C139544 + (C14013 + C14012) * C13349) * C9304) *
              C139346 * C5152 +
          (((C14015 + C14014) * C13349 + (C14016 + C14017) * C139544) * C9304 -
           (((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139555 +
             C4060 * C13351) *
                C139544 +
            (C18023 + C18022) * C13349) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C13351 +
             C15154 * C139555) *
                C13349 +
            (C14012 + C14013) * C139544) *
               C9304 -
           ((C16141 + C16142) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C13351) *
                C13349) *
               C139426) *
              C822 +
          (((C19327 * C13351 + C24861 * C139555) * C13349 +
            (C19320 + C19329) * C139544) *
               C139426 -
           ((C15141 + C15142) * C139544 +
            (C15155 * C139555 + C15154 * C13351) * C13349) *
               C9304) *
              C823 +
          (((C15155 * C13351 + C20885 * C139555) * C13349 +
            (C15145 + C15157) * C139544) *
               C9304 -
           (((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C139555 +
             C19328 * C13351) *
                C139544 +
            ((C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C139555 +
             C24861 * C13351) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139362 * C139529 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139362 * C139398) *
              C139558 +
          (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
               C139465 * C139362 * C139398 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
             C13367 + C13367 + C139544 * C121) *
                C30255 +
            (C13353 * C1760 + C17203 + C17203 + C13349 * C1776 +
             C13355 * C1766 + C17202 + C17202 + C139544 * C1782) *
                C139557) *
               C139465 * C139362 * C139529 -
           ((C13355 * C4162 + C17200 + C17200 + C139544 * C4170 +
             C13353 * C4161 + C17201 + C17201 + C13349 * C4169) *
                C139557 +
            (C16259 + C16258) * C30255) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C139362 * C139529 -
           ((C4293 * C139544 + C4292 * C13356 +
             (C186 * C4163 + C139465 * C4279) * C13349 +
             (C186 * C4159 + C139465 * C4275) * C13354) *
                C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C139362 * C139398) *
              C139558 +
          (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                C30255 +
            (C4292 * C13354 + C4293 * C13349 + C4294 * C13356 +
             C4295 * C139544) *
                C139557) *
               C139362 * C139398 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139362 * C139529) *
              C139559 +
          (((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
                C30255 +
            (C1904 * C13354 + C1903 * C13349 + C3503 * C13356 +
             C3504 * C139544) *
                C139557) *
               C139362 * C139529 -
           (((C186 * C4166 + C139465 * C4282) * C139544 +
             (C186 * C4162 + C139465 * C4278) * C13356 + C4295 * C13349 +
             C4294 * C13354) *
                C139557 +
            (C2783 * C139544 + C2782 * C13356 + C970 * C13349 + C971 * C13354) *
                C30255) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139362 * C139529 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139362 * C139398) *
              C139558 +
          (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
            (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
               C139465 * C139362 * C139398 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
            (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
               C139465 * C139362 * C139529 -
           ((C30392 * C4166 + C139557 * C4400 + C30391 * C841 +
             C30255 * C1065) *
                C139544 +
            (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
             C30255 * C1057) *
                C13356 +
            (C33313 + C33312) * C13349 + (C33311 + C33310) * C13354) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139362 * C139529 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139362 * C139398) *
              C139558 +
          ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
            ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                C139557) *
               C139362 * C139398 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139362 * C139529) *
              C139559 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C186 +
             (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                 C139465) *
                C30255 +
            ((C13354 * C1760 + C13349 * C1768 + C13356 * C1766 +
              C139544 * C1774) *
                 C186 +
             (C13354 * C1870 + C13349 * C2098 + C13356 * C1876 +
              C139544 * C2104) *
                 C139465) *
                C139557) *
               C139362 * C139529 -
           (((C13356 * C4278 + C139544 * C4514 + C13354 * C4277 +
              C13349 * C4513) *
                 C139465 +
             (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
              C13349 * C4165) *
                 C186) *
                C139557 +
            ((C16581 + C16580) * C139465 + (C16579 + C16578) * C186) * C30255) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139362 * C139529 -
           ((C4630 * C139544 +
             (C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C13349) *
                C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139362 * C139398) *
              C139558 +
          (((C1281 * C13349 + C1280 * C139544) * C30255 +
            (C4630 * C13349 + C4631 * C139544) * C139557) *
               C139362 * C139398 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139362 * C139529) *
              C139559 +
          (((C447 * C13349 + C448 * C139544) * C30255 +
            (C2213 * C13349 + C3742 * C139544) * C139557) *
               C139362 * C139529 -
           (((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C139544 +
             C4631 * C13349) *
                C139557 +
            (C3021 * C139544 + C1280 * C13349) * C30255) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139362 * C139529 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139362 * C139398) *
              C139558 +
          ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
            ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                C139544) *
               C139362 * C139398 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139362 * C139529) *
              C139559 +
          ((((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
            ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) *
                C139544) *
               C139362 * C139529 -
           (((C30392 * C4278 + C139557 * C4732 + C30391 * C943 +
              C30255 * C1363) *
                 C139465 +
             (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
              C30255 * C1057) *
                 C186) *
                C139544 +
            ((C33613 + C33612) * C139465 + (C33311 + C33310) * C186) * C13349) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139362 * C139529 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139362 * C139398) *
              C139558 +
          (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
            (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
               C139465 * C139362 * C139398 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C30391 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C30255 +
            (C13354 * C1760 + C13349 * C1768 + C13356 * C1766 +
             C139544 * C1774) *
                C30392 +
            (C13354 * C1984 + C13349 * C2392 + C13356 * C1990 +
             C139544 * C2398) *
                C139557) *
               C139465 * C139362 * C139529 -
           ((C13356 * C4396 + C139544 * C4844 + C13354 * C4395 +
             C13349 * C4843) *
                C139557 +
            (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
             C13349 * C4165) *
                C30392 +
            (C16897 + C16896) * C30255 + (C16579 + C16578) * C30391) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139362 * C139529 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      ((C186 * C4393 + C139465 * C4943) * C139557 +
                       (C186 * C4159 + C139465 * C4275) * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C139362 * C139398) *
                        C139558 +
                    (((C31732 + C31731 + C31730 + C31729) * C13349 +
                      (C33810 + C33811 + C33812 + C33813) * C139544) *
                         C139362 * C139398 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C139362 * C139529) *
                        C139559 +
                    (((C30785 + C30784 + C30783 + C30782) * C13349 +
                      (C30786 + C30787 + C30788 + C30789) * C139544) *
                         C139362 * C139529 -
                     (((C186 * C4396 + C139465 * C4946) * C139557 +
                       (C186 * C4162 + C139465 * C4278) * C30392 +
                       C3257 * C30255 + C2782 * C30391) *
                          C139544 +
                      (C33813 + C33812 + C33811 + C33810) * C13349) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139362 * C139529 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139362 * C139398) *
                        C139558 +
                    (((C31867 + C31866) * C139465 * C13349 +
                      (C33922 + C33923) * C139465 * C139544) *
                         C139362 * C139398 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139362 * C139529) *
                        C139559 +
                    (((C30895 + C30894) * C139465 * C13349 +
                      (C30896 + C30897) * C139465 * C139544) *
                         C139362 * C139529 -
                     ((C30856 * C4162 + C33916 + C33916 + C139557 * C5058 +
                       C30855 * C833 + C33917 + C33917 + C30255 * C1649) *
                          C139465 * C139544 +
                      (C33923 + C33922) * C139465 * C13349) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
              C13359 + C13359 + C139544 * C119) *
                 C30255 +
             (C32002 + C32003) * C139557) *
                C139465 * C139530 -
            ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
                C139465 * C139426) *
               C139529 +
           (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
                C139465 * C139426 -
            ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
                C139465 * C139426 -
            ((C32007 + C32006) * C139557 +
             (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
              C13365 + C13365 + C13349 * C119) *
                 C30255) *
                C139465 * C139530) *
               C139529 +
           (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
                C139465 * C139530 -
            ((C13355 * C6323 + C15268 + C15268 + C139544 * C6329 +
              C13353 * C6324 + C15269 + C15269 + C13349 * C6330) *
                 C139557 +
             (C18177 + C18176) * C30255) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C13354 +
              (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
              C217 * C139544) *
                 C30255 +
             (C32138 + C32139 + C32112 + C32113) * C139557) *
                C139530 -
            ((C32114 + C32115 + C32140 + C32141) * C139557 +
             (C32113 + C32112 + C32139 + C32138) * C30255) *
                C139426) *
               C139529 +
           (((C35154 + C35155 + C35140 + C35141) * C30255 +
             ((C186 * C6325 + C139465 * C6411) * C13354 +
              (C186 * C6328 + C139465 * C6414) * C13349 + C35152 * C13356 +
              C35153 * C139544) *
                 C139557) *
                C139426 -
            ((C35141 + C35140 + C35155 + C35154) * C139557 +
             (C972 * C139544 + C973 * C13356 +
              (C186 * C837 + C139465 * C947) * C13349 +
              (C186 * C829 + C139465 * C939) * C13354) *
                 C30255) *
                C139530) *
               C139398) *
              C825 +
          ((((C32124 + C32125 + C32126 + C32127) * C30255 +
             (C32128 + C32129 + C32130 + C32131) * C139557) *
                C139426 -
            ((C32127 + C32126 + C32125 + C32124) * C139557 +
             (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                 C30255) *
                C139530) *
               C139529 +
           (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                 C30255 +
             (C35146 + C35147 + C35148 + C35149) * C139557) *
                C139530 -
            (((C186 * C6326 + C139465 * C6412) * C139544 +
              (C186 * C6323 + C139465 * C6409) * C13356 + C35153 * C13349 +
              C35152 * C13354) *
                 C139557 +
             (C35149 + C35148 + C35147 + C35146) * C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C13354 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C13349 +
             (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
                C139465 * C139530 -
            ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
             (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C13349 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C13354) *
                C139465 * C139426) *
               C139529 +
           (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C13354 +
             (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
              C139557 * C6494) *
                 C13349 +
             (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
                C139465 * C139426 -
            ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
             (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
              C30255 * C1061) *
                 C13349 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C13354) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
             (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
                C139465 * C139426 -
            ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
             (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
                C139465 * C139530) *
               C139529 +
           (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
             (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
                C139465 * C139530 -
            ((C30392 * C6326 + C139557 * C6492 + C30391 * C4165 +
              C30255 * C4399) *
                 C139544 +
             (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
              C30255 * C4395) *
                 C13356 +
             (C35297 + C35296) * C13349 + (C35295 + C35294) * C13354) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                  C186 +
              (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                  C139465) *
                 C30255 +
             ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                 C139557) *
                C139530 -
            (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) *
                 C139557 +
             ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) *
                 C30255) *
                C139426) *
               C139529 +
           ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
             ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                 C139557) *
                C139426 -
            (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) *
                 C139557 +
             ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) *
                 C30255) *
                C139530) *
               C139398) *
              C825 +
          (((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
             ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                 C139557) *
                C139426 -
            (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) *
                 C139557 +
             ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                  C139465 +
              (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                  C186) *
                 C30255) *
                C139530) *
               C139529 +
           ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
             ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                 C139557) *
                C139530 -
            (((C13356 * C6409 + C139544 * C6569 + C13354 * C6410 +
               C13349 * C6570) *
                  C139465 +
              (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
               C13349 * C6327) *
                  C186) *
                 C139557 +
             ((C18623 + C18622) * C139465 + (C18621 + C18620) * C186) *
                 C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
              C446 * C139544) *
                 C30255 +
             (C32529 + C32510) * C139557) *
                C139530 -
            ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
                C139426) *
               C139529 +
           (((C35571 + C35560) * C30255 +
             ((C416 * C6325 + C6652 + C6652 + C139465 * C6648) * C13349 +
              C35570 * C139544) *
                 C139557) *
                C139426 -
            ((C35560 + C35571) * C139557 +
             (C1281 * C139544 +
              (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                 C30255) *
                C139530) *
               C139398) *
              C825 +
          ((((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
                C139426 -
            ((C32517 + C32516) * C139557 +
             (C447 * C139544 + C446 * C13349) * C30255) *
                C139530) *
               C139529 +
           (((C1281 * C13349 + C1280 * C139544) * C30255 +
             (C35563 + C35564) * C139557) *
                C139530 -
            (((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139544 +
              C35570 * C13349) *
                 C139557 +
             (C35564 + C35563) * C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
               C139557 * C1986) *
                  C186 +
              (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
               C139557 * C2292) *
                  C139465) *
                 C13349 +
             ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                 C139544) *
                C139530 -
            (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) *
                 C139544 +
             ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
               C30255 * C2292) *
                  C139465 +
              (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
               C30255 * C1986) *
                  C186) *
                 C13349) *
                C139426) *
               C139529 +
           ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
               C139557 * C6491) *
                  C186 +
              (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
               C139557 * C6728) *
                  C139465) *
                 C13349 +
             ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                 C139544) *
                C139426 -
            (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) *
                 C139544 +
             ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
               C30255 * C1359) *
                  C139465 +
              (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
               C30255 * C1053) *
                  C186) *
                 C13349) *
                C139530) *
               C139398) *
              C825 +
          (((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
             ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                 C139544) *
                C139426 -
            (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) *
                 C139544 +
             ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) *
                 C13349) *
                C139530) *
               C139529 +
           ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
             ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                 C139544) *
                C139530 -
            (((C30392 * C6409 + C139557 * C6726 + C30391 * C4277 +
               C30255 * C4731) *
                  C139465 +
              (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
               C30255 * C4395) *
                  C186) *
                 C139544 +
             ((C35707 + C35706) * C139465 + (C35295 + C35294) * C186) *
                 C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C30391 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C30255 +
             (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
                C139465 * C139530 -
            ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
             (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
                C139465 * C139426) *
               C139529 +
           (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
             (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
                C139465 * C139426 -
            ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
             (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
             (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
                C139465 * C139426 -
            ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
             (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C30255 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C30391) *
                C139465 * C139530) *
               C139529 +
           (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
             (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
                C139465 * C139530 -
            ((C13356 * C6489 + C139544 * C6803 + C13354 * C6490 +
              C13349 * C6804) *
                 C139557 +
             (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
              C13349 * C6327) *
                 C30392 +
             (C19051 + C19050) * C30255 + (C18621 + C18620) * C30391) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C186 * C106 + C139465 * C187) * C30391 +
                        (C186 * C274 + C139465 * C633) * C30255 +
                        C32132 * C30392 + C32874 * C139557) *
                           C13349 +
                       (C30778 + C30779 + C30780 + C30781) * C139544) *
                          C139530 -
                      ((C32863 + C32864 + C32865 + C32866) * C139544 +
                       (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                        C32132 * C30391) *
                           C13349) *
                          C139426) *
                         C139529 +
                     (((C35150 * C30391 + C35975 * C30255 +
                        (C186 * C6325 + C139465 * C6411) * C30392 +
                        (C186 * C6491 + C139465 * C6882) * C139557) *
                           C13349 +
                       (C35970 + C35971 + C35972 + C35977) * C139544) *
                          C139426 -
                      ((C31729 + C31730 + C31731 + C31732) * C139544 +
                       (C35975 * C139557 + C35150 * C30392 +
                        (C186 * C1053 + C139465 * C1543) * C30255 +
                        (C186 * C829 + C139465 * C939) * C30391) *
                           C13349) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C32866 + C32865 + C32864 + C32863) * C13349 +
                       (C34762 + C34763 + C34764 + C34765) * C139544) *
                          C139426 -
                      ((C30782 + C30783 + C30784 + C30785) * C139544 +
                       (C30781 + C30780 + C30779 + C30778) * C13349) *
                          C139530) *
                         C139529 +
                     (((C31732 + C31731 + C31730 + C31729) * C13349 +
                       (C33810 + C33811 + C33812 + C33813) * C139544) *
                          C139530 -
                      (((C186 * C6489 + C139465 * C6880) * C139557 +
                        (C186 * C6323 + C139465 * C6409) * C30392 +
                        C4955 * C30255 + C4294 * C30391) *
                           C139544 +
                       (C35977 + C35972 + C35971 + C35970) * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[31] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                        C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                           C139465 * C13349 +
                       (C30892 + C30893) * C139465 * C139544) *
                          C139530 -
                      ((C33004 + C33005) * C139465 * C139544 +
                       (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                        C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                           C139465 * C13349) *
                          C139426) *
                         C139529 +
                     (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                        C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                           C139465 * C13349 +
                       (C36122 + C36123) * C139465 * C139544) *
                          C139426 -
                      ((C31866 + C31867) * C139465 * C139544 +
                       (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                        C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                           C139465 * C13349) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C33005 + C33004) * C139465 * C13349 +
                       (C34874 + C34875) * C139465 * C139544) *
                          C139426 -
                      ((C30894 + C30895) * C139465 * C139544 +
                       (C30893 + C30892) * C139465 * C13349) *
                          C139530) *
                         C139529 +
                     (((C31867 + C31866) * C139465 * C13349 +
                       (C33922 + C33923) * C139465 * C139544) *
                          C139530 -
                      ((C30856 * C6323 + C36116 + C36116 + C139557 * C6957 +
                        C30855 * C4161 + C36117 + C36117 + C30255 * C5057) *
                           C139465 * C139544 +
                       (C36123 + C36122) * C139465 * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C13353 * C1762 + C15259 + C15259 + C13349 * C1778 +
             C13355 * C1761 + C15258 + C15258 + C139544 * C1777) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139362 * C823 +
           ((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
               C139465 * C139362 * C823 -
           ((C13355 * C1760 + C15265 + C15265 + C139544 * C1776 +
             C13353 * C1761 + C15264 + C15264 + C13349 * C1777) *
                C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139362 * C822 -
           ((C13355 * C8590 + C18164 + C18164 + C139544 * C8596 +
             C13353 * C8591 + C18165 + C18165 + C13349 * C8597) *
                C139557 +
            (C14163 + C14162) * C30255) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
            C13359 + C13359 + C139544 * C119) *
               C30255 +
           (C13353 * C1762 + C15259 + C15259 + C13349 * C1778 + C13355 * C1761 +
            C15258 + C15258 + C139544 * C1777) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C13355 * C1760 + C15265 + C15265 + C139544 * C1776 +
            C13353 * C1761 + C15264 + C15264 + C13349 * C1777) *
               C139557 +
           (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
            C13365 + C13365 + C13349 * C119) *
               C30255) *
              C139465 * C139362 * C139346 * C97 +
          ((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
            C13367 + C13367 + C139544 * C121) *
               C30255 +
           (C13353 * C1760 + C17203 + C17203 + C13349 * C1776 + C13355 * C1766 +
            C17202 + C17202 + C139544 * C1782) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C13355 * C3416 + C30258 + C30258 + C139544 * C3418 +
            C13353 * C1766 + C30259 + C30259 + C13349 * C1782) *
               C139557 +
           (C13355 * C110 + C13372 + C13372 + C139544 * C122 + C13353 * C109 +
            C13373 + C13373 + C13349 * C121) *
               C30255) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C1757 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C1758 +
           ((C32005 + C32004) * C30255 +
            (C13353 * C10620 + C26701 + C26701 + C13349 * C10626 +
             C13355 * C10619 + C26700 + C26700 + C139544 * C10625) *
                C139557) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
               C139465 * C1758 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C1757 -
           ((C13355 * C10618 + C31984 + C31984 + C139544 * C10624 +
             C13353 * C10619 + C31985 + C31985 + C13349 * C10625) *
                C139557 +
            (C32009 + C32008) * C30255) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            ((C186 * C1762 + C139465 * C1872) * C13354 +
             (C186 * C1770 + C139465 * C1880) * C13349 + C1906 * C13356 +
             C1905 * C139544) *
                C139557) *
               C139362 * C822 -
           ((C4293 * C139544 + C4292 * C13356 +
             (C186 * C4163 + C139465 * C4279) * C13349 +
             (C186 * C4159 + C139465 * C4275) * C13354) *
                C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C13354 +
             (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
             C975 * C139544) *
                C30255 +
            ((C186 * C8592 + C139465 * C8678) * C13354 +
             (C186 * C8595 + C139465 * C8681) * C13349 + C31098 * C13356 +
             C31099 * C139544) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                C30255 +
            (C4292 * C13354 + C4293 * C13349 + C4294 * C13356 +
             C4295 * C139544) *
                C139557) *
               C139362 * C823 -
           ((C1903 * C139544 + C1904 * C13356 + C1905 * C13349 +
             C1906 * C13354) *
                C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139362 * C822 -
           (((C186 * C8593 + C139465 * C8679) * C139544 +
             (C186 * C8590 + C139465 * C8676) * C13356 + C31099 * C13349 +
             C31098 * C13354) *
                C139557 +
            (C977 * C139544 + C976 * C13356 + C975 * C13349 + C974 * C13354) *
                C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C13354 +
            (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
            C217 * C139544) *
               C30255 +
           ((C186 * C1762 + C139465 * C1872) * C13354 +
            (C186 * C1770 + C139465 * C1880) * C13349 + C1906 * C13356 +
            C1905 * C139544) *
               C139557) *
              C139362 * C139346 * C96 -
          ((C1903 * C139544 + C1904 * C13356 + C1905 * C13349 +
            C1906 * C13354) *
               C139557 +
           (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
               C30255) *
              C139362 * C139346 * C97 +
          ((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
               C30255 +
           (C1904 * C13354 + C1903 * C13349 + C3503 * C13356 +
            C3504 * C139544) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C186 * C3417 + C139465 * C3497) * C139544 +
            (C186 * C3416 + C139465 * C3496) * C13356 + C3504 * C13349 +
            C3503 * C13354) *
               C139557 +
           (C223 * C139544 + C222 * C13356 + C220 * C13349 + C221 * C13354) *
               C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C1757 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C1758 +
           ((C32141 + C32140 + C32115 + C32114) * C30255 +
            ((C186 * C10620 + C139465 * C10682) * C13354 +
             (C186 * C10623 + C139465 * C10685) * C13349 + C32136 * C13356 +
             C32137 * C139544) *
                C139557) *
               C1759) *
              C139346 * C825 +
          (((C32124 + C32125 + C32126 + C32127) * C30255 +
            (C32128 + C32129 + C32130 + C32131) * C139557) *
               C1758 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C1757 -
           (((C186 * C10621 + C139465 * C10683) * C139544 +
             (C186 * C10618 + C139465 * C10680) * C13356 + C32137 * C13349 +
             C32136 * C13354) *
                C139557 +
            (C32131 + C32130 + C32129 + C32128) * C30255) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139362 * C822 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139362 * C823 +
           ((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C13354 +
            (C30391 * C838 + C30255 * C1062 + C30392 * C8595 +
             C139557 * C8761) *
                C13349 +
            (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
               C139465 * C139362 * C824) *
              C825 +
          (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
            (C30391 * C827 + C30255 * C1051 + C30392 * C4161 +
             C139557 * C4395) *
                C13356 +
            (C30391 * C835 + C30255 * C1059 + C30392 * C4165 +
             C139557 * C4399) *
                C139544) *
               C139465 * C139362 * C823 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139362 * C822 -
           ((C30392 * C8593 + C139557 * C8759 + C30391 * C840 +
             C30255 * C1064) *
                C139544 +
            (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
             C30255 * C1056) *
                C13356 +
            (C31221 + C31220) * C13349 + (C31219 + C31218) * C13354) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C13354 +
           (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
               C13349 +
           (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
              C139465 * C139362 * C139346 * C96 -
          ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
           (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
              C139465 * C139362 * C139346 * C97 +
          ((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
           (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
              C139465 * C139362 * C139346 * C98 -
          ((C30392 * C3417 + C139557 * C3579 + C30391 * C116 + C30255 * C284) *
               C139544 +
           (C30392 * C3416 + C139557 * C3578 + C30391 * C110 + C30255 * C278) *
               C13356 +
           (C30429 + C30428) * C13349 + (C30427 + C30426) * C13354) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C1757 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C1758 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C13354 +
            (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
             C139557 * C10741) *
                C13349 +
            (C32260 + C32261) * C13356 + (C32262 + C32263) * C139544) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
            (C30391 * C1760 + C30255 * C1984 + C30392 * C1765 +
             C139557 * C1989) *
                C13356 +
            (C30391 * C1768 + C30255 * C1992 + C30392 * C1773 +
             C139557 * C1997) *
                C139544) *
               C139465 * C1758 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C1757 -
           ((C30392 * C10621 + C139557 * C10739 + C30391 * C1773 +
             C30255 * C1997) *
                C139544 +
            (C30392 * C10618 + C139557 * C10736 + C30391 * C1765 +
             C30255 * C1989) *
                C13356 +
            (C32263 + C32262) * C13349 + (C32261 + C32260) * C13354) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
              C139544 * C1769) *
                 C186 +
             (C13354 * C1872 + C13349 * C2100 + C13356 * C1871 +
              C139544 * C2099) *
                 C139465) *
                C139557) *
               C139362 * C822 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139362 * C823 +
           (((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
            ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
            ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                C139557) *
               C139362 * C823 -
           (((C13356 * C1870 + C139544 * C2098 + C13354 * C1871 +
              C13349 * C2099) *
                 C139465 +
             (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
              C13349 * C1769) *
                 C186) *
                C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139362 * C822 -
           (((C13356 * C8676 + C139544 * C8836 + C13354 * C8677 +
              C13349 * C8837) *
                 C139465 +
             (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
              C13349 * C8594) *
                 C186) *
                C139557 +
            ((C14563 + C14562) * C139465 + (C14561 + C14560) * C186) * C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C186 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C139465) *
               C30255 +
           ((C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
             C139544 * C1769) *
                C186 +
            (C13354 * C1872 + C13349 * C2100 + C13356 * C1871 +
             C139544 * C2099) *
                C139465) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C13356 * C1870 + C139544 * C2098 + C13354 * C1871 +
             C13349 * C2099) *
                C139465 +
            (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
             C13349 * C1769) *
                C186) *
               C139557 +
           ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C139465 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C186) *
               C30255) *
              C139362 * C139346 * C97 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C186 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C139465) *
               C30255 +
           ((C13354 * C1760 + C13349 * C1768 + C13356 * C1766 +
             C139544 * C1774) *
                C186 +
            (C13354 * C1870 + C13349 * C2098 + C13356 * C1876 +
             C139544 * C2104) *
                C139465) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C13356 * C3496 + C139544 * C3660 + C13354 * C1876 +
             C13349 * C2104) *
                C139465 +
            (C13356 * C3416 + C139544 * C3417 + C13354 * C1766 +
             C13349 * C1774) *
                C186) *
               C139557 +
           ((C13356 * C191 + C139544 * C364 + C13354 * C190 + C13349 * C363) *
                C139465 +
            (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
                C186) *
               C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C1757 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C1758 +
           (((C32401 + C32400) * C186 + (C32399 + C32398) * C139465) * C30255 +
            ((C13354 * C10620 + C13349 * C10623 + C13356 * C10619 +
              C139544 * C10622) *
                 C186 +
             (C13354 * C10682 + C13349 * C10794 + C13356 * C10681 +
              C139544 * C10793) *
                 C139465) *
                C139557) *
               C1759) *
              C139346 * C825 +
          ((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
            ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                C139557) *
               C1758 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C1757 -
           (((C13356 * C10680 + C139544 * C10792 + C13354 * C10681 +
              C13349 * C10793) *
                 C139465 +
             (C13356 * C10618 + C139544 * C10621 + C13354 * C10619 +
              C13349 * C10622) *
                 C186) *
                C139557 +
            ((C32409 + C32408) * C139465 + (C32407 + C32406) * C186) * C30255) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            ((C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C13349 +
             C2214 * C139544) *
                C139557) *
               C139362 * C822 -
           ((C4630 * C139544 +
             (C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C13349) *
                C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139362 * C823 +
           (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
             C1282 * C139544) *
                C30255 +
            ((C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C13349 +
             C31422 * C139544) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C1281 * C13349 + C1280 * C139544) * C30255 +
            (C4630 * C13349 + C4631 * C139544) * C139557) *
               C139362 * C823 -
           ((C2213 * C139544 + C2214 * C13349) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139362 * C822 -
           (((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C139544 +
             C31422 * C13349) *
                C139557 +
            (C1283 * C139544 + C1282 * C13349) * C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
            C446 * C139544) *
               C30255 +
           ((C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C13349 +
            C2214 * C139544) *
               C139557) *
              C139362 * C139346 * C96 -
          ((C2213 * C139544 + C2214 * C13349) * C139557 +
           (C447 * C139544 + C446 * C13349) * C30255) *
              C139362 * C139346 * C97 +
          ((C447 * C13349 + C448 * C139544) * C30255 +
           (C2213 * C13349 + C3742 * C139544) * C139557) *
              C139362 * C139346 * C98 -
          (((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C139544 +
            C3742 * C13349) *
               C139557 +
           (C449 * C139544 + C448 * C13349) * C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C1757 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) * C1758 +
           ((C32530 + C32511) * C30255 +
            ((C416 * C10620 + C10851 + C10851 + C139465 * C10847) * C13349 +
             C32528 * C139544) *
                C139557) *
               C1759) *
              C139346 * C825 +
          (((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) * C1758 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C1757 -
           (((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139544 +
             C32528 * C13349) *
                C139557 +
            (C32519 + C32518) * C30255) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139362 * C822 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139362 * C823 +
           (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C13349 +
            ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
            ((C30391 * C827 + C30255 * C1051 + C30392 * C4161 +
              C139557 * C4395) *
                 C186 +
             (C30391 * C937 + C30255 * C1357 + C30392 * C4277 +
              C139557 * C4731) *
                 C139465) *
                C139544) *
               C139362 * C823 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139362 * C822 -
           (((C30392 * C8676 + C139557 * C8993 + C30391 * C942 +
              C30255 * C1362) *
                 C139465 +
             (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
              C30255 * C1056) *
                 C186) *
                C139544 +
            ((C31532 + C31531) * C139465 + (C31219 + C31218) * C186) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C186 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C139465) *
               C13349 +
           ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) * C139544) *
              C139362 * C139346 * C96 -
          (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
           ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
              C139362 * C139346 * C97 +
          (((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
           ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) * C139544) *
              C139362 * C139346 * C98 -
          (((C30392 * C3496 + C139557 * C3816 + C30391 * C191 + C30255 * C503) *
                C139465 +
            (C30392 * C3416 + C139557 * C3578 + C30391 * C110 + C30255 * C278) *
                C186) *
               C139544 +
           ((C30645 + C30644) * C139465 + (C30427 + C30426) * C186) * C13349) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C1757 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C1758 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C13349 +
            ((C32260 + C32261) * C186 + (C32639 + C32640) * C139465) *
                C139544) *
               C1759) *
              C139346 * C825 +
          ((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
            ((C30391 * C1760 + C30255 * C1984 + C30392 * C1765 +
              C139557 * C1989) *
                 C186 +
             (C30391 * C1870 + C30255 * C2290 + C30392 * C1875 +
              C139557 * C2295) *
                 C139465) *
                C139544) *
               C1758 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C1757 -
           (((C30392 * C10680 + C139557 * C10901 + C30391 * C1875 +
              C30255 * C2295) *
                 C139465 +
             (C30392 * C10618 + C139557 * C10736 + C30391 * C1765 +
              C30255 * C1989) *
                 C186) *
                C139544 +
            ((C32640 + C32639) * C139465 + (C32261 + C32260) * C186) * C13349) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
             C139544 * C1769) *
                C30392 +
            (C13354 * C1986 + C13349 * C2394 + C13356 * C1985 +
             C139544 * C2393) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139362 * C823 +
           ((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
            (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
            (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
               C139465 * C139362 * C823 -
           ((C13356 * C1984 + C139544 * C2392 + C13354 * C1985 +
             C13349 * C2393) *
                C139557 +
            (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
             C13349 * C1769) *
                C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139362 * C822 -
           ((C13356 * C8756 + C139544 * C9070 + C13354 * C8757 +
             C13349 * C9071) *
                C139557 +
            (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
             C13349 * C8594) *
                C30392 +
            (C14930 + C14929) * C30255 + (C14561 + C14560) * C30391) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C30391 +
           (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
               C30255 +
           (C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
            C139544 * C1769) *
               C30392 +
           (C13354 * C1986 + C13349 * C2394 + C13356 * C1985 +
            C139544 * C2393) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C13356 * C1984 + C139544 * C2392 + C13354 * C1985 +
            C13349 * C2393) *
               C139557 +
           (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
            C13349 * C1769) *
               C30392 +
           (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
               C30255 +
           (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
               C30391) *
              C139465 * C139362 * C139346 * C97 +
          ((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
               C30391 +
           (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
               C30255 +
           (C13354 * C1760 + C13349 * C1768 + C13356 * C1766 +
            C139544 * C1774) *
               C30392 +
           (C13354 * C1984 + C13349 * C2392 + C13356 * C1990 +
            C139544 * C2398) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C13356 * C3578 + C139544 * C3897 + C13354 * C1990 +
            C13349 * C2398) *
               C139557 +
           (C13356 * C3416 + C139544 * C3417 + C13354 * C1766 +
            C13349 * C1774) *
               C30392 +
           (C13356 * C278 + C139544 * C581 + C13354 * C277 + C13349 * C580) *
               C30255 +
           (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
               C30391) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C1757 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C1758 +
           ((C32401 + C32400) * C30391 + (C32758 + C32757) * C30255 +
            (C13354 * C10620 + C13349 * C10623 + C13356 * C10619 +
             C139544 * C10622) *
                C30392 +
            (C13354 * C10738 + C13349 * C10956 + C13356 * C10737 +
             C139544 * C10955) *
                C139557) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
            (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
               C139465 * C1758 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C1757 -
           ((C13356 * C10736 + C139544 * C10954 + C13354 * C10737 +
             C13349 * C10955) *
                C139557 +
            (C13356 * C10618 + C139544 * C10621 + C13354 * C10619 +
             C13349 * C10622) *
                C30392 +
            (C32762 + C32761) * C30255 + (C32407 + C32406) * C30391) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C30391 +
             (C186 * C274 + C139465 * C633) * C30255 +
             (C186 * C1762 + C139465 * C1872) * C30392 +
             (C186 * C1986 + C139465 * C2476) * C139557) *
                C13349 +
            (C30778 + C30779 + C30780 + C30781) * C139544) *
               C139362 * C822 -
           ((C31729 + C31730 + C31731 + C31732) * C139544 +
            ((C186 * C4393 + C139465 * C4943) * C139557 +
             (C186 * C4159 + C139465 * C4275) * C30392 +
             (C186 * C1053 + C139465 * C1543) * C30255 +
             (C186 * C829 + C139465 * C939) * C30391) *
                C13349) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C30391 +
             (C186 * C1054 + C139465 * C1544) * C30255 +
             (C186 * C8592 + C139465 * C8678) * C30392 +
             (C186 * C8758 + C139465 * C9149) * C139557) *
                C13349 +
            (C31733 + C31734 + C31735 + C31739) * C139544) *
               C139362 * C824) *
              C825 +
          (((C31732 + C31731 + C31730 + C31729) * C13349 +
            (C971 * C30391 + C1562 * C30255 + C4294 * C30392 +
             C4955 * C139557) *
                C139544) *
               C139362 * C823 -
           ((C30782 + C30783 + C30784 + C30785) * C139544 +
            (C30781 + C30780 + C30779 + C30778) * C13349) *
               C139362 * C822 -
           (((C186 * C8756 + C139465 * C9147) * C139557 +
             (C186 * C8590 + C139465 * C8676) * C30392 + C1565 * C30255 +
             C976 * C30391) *
                C139544 +
            (C31739 + C31735 + C31734 + C31733) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C186 * C106 + C139465 * C187) * C30391 +
                                (C186 * C274 + C139465 * C633) * C30255 +
                                (C186 * C1762 + C139465 * C1872) * C30392 +
                                (C186 * C1986 + C139465 * C2476) * C139557) *
                                   C13349 +
                               (C30778 + C30779 + C30780 + C30781) * C139544) *
                                  C139362 * C139346 * C96 -
                              ((C30782 + C30783 + C30784 + C30785) * C139544 +
                               (C30781 + C30780 + C30779 + C30778) * C13349) *
                                  C139362 * C139346 * C97 +
                              ((C30785 + C30784 + C30783 + C30782) * C13349 +
                               (C30786 + C30787 + C30788 + C30789) * C139544) *
                                  C139362 * C139346 * C98 -
                              (((C186 * C3578 + C139465 * C3972) * C139557 +
                                (C186 * C3416 + C139465 * C3496) * C30392 +
                                C655 * C30255 + C222 * C30391) *
                                   C139544 +
                               (C30789 + C30788 + C30787 + C30786) * C13349) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C30391 +
             (C186 * C274 + C139465 * C633) * C30255 + C32132 * C30392 +
             C32874 * C139557) *
                C13349 +
            (C30778 + C30779 + C30780 + C30781) * C139544) *
               C1757 -
           ((C32863 + C32864 + C32865 + C32866) * C139544 +
            (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
             C32132 * C30391) *
                C13349) *
               C1758 +
           ((C32135 * C30391 + C32875 * C30255 +
             (C186 * C10620 + C139465 * C10682) * C30392 +
             (C186 * C10738 + C139465 * C11009) * C139557) *
                C13349 +
            (C32869 + C32870 + C32871 + C32877) * C139544) *
               C1759) *
              C139346 * C825 +
          (((C32866 + C32865 + C32864 + C32863) * C13349 +
            (C1904 * C30391 + C2495 * C30255 + C1909 * C30392 +
             C2498 * C139557) *
                C139544) *
               C1758 -
           ((C30782 + C30783 + C30784 + C30785) * C139544 +
            (C30781 + C30780 + C30779 + C30778) * C13349) *
               C1757 -
           (((C186 * C10736 + C139465 * C11007) * C139557 +
             (C186 * C10618 + C139465 * C10680) * C30392 + C2498 * C30255 +
             C1909 * C30391) *
                C139544 +
            (C32877 + C32871 + C32870 + C32869) * C13349) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] += (-std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139362 * C822 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139362 * C823 +
                     ((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                       C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                          C139465 * C13349 +
                      (C31868 + C31869) * C139465 * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C31867 + C31866) * C139465 * C13349 +
                      (C30855 * C827 + C31854 + C31854 + C30255 * C1643 +
                       C30856 * C4161 + C31855 + C31855 + C139557 * C5057) *
                          C139465 * C139544) *
                         C139362 * C823 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139362 * C822 -
                     ((C30856 * C8590 + C31856 + C31856 + C139557 * C9224 +
                       C30855 * C832 + C31857 + C31857 + C30255 * C1648) *
                          C139465 * C139544 +
                      (C31869 + C31868) * C139465 * C13349) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                      C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                         C139465 * C13349 +
                     (C30892 + C30893) * C139465 * C139544) *
                        C139362 * C139346 * C96 -
                    ((C30894 + C30895) * C139465 * C139544 +
                     (C30893 + C30892) * C139465 * C13349) *
                        C139362 * C139346 * C97 +
                    ((C30895 + C30894) * C139465 * C13349 +
                     (C30896 + C30897) * C139465 * C139544) *
                        C139362 * C139346 * C98 -
                    ((C30856 * C3416 + C30878 + C30878 + C139557 * C4053 +
                      C30855 * C110 + C30879 + C30879 + C30255 * C716) *
                         C139465 * C139544 +
                     (C30897 + C30896) * C139465 * C13349) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C1757 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C1758 +
                     ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
                       C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                          C139465 * C13349 +
                      (C33006 + C33007) * C139465 * C139544) *
                         C1759) *
                        C139346 * C825 +
                    (((C33005 + C33004) * C139465 * C13349 +
                      (C30855 * C1760 + C32992 + C32992 + C30255 * C2576 +
                       C30856 * C1765 + C32993 + C32993 + C139557 * C2581) *
                          C139465 * C139544) *
                         C1758 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C1757 -
                     ((C30856 * C10618 + C32994 + C32994 + C139557 * C11060 +
                       C30855 * C1765 + C32995 + C32995 + C30255 * C2581) *
                          C139465 * C139544 +
                      (C33007 + C33006) * C139465 * C13349) *
                         C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139530 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139426) *
              C139346 * C139558 +
          (((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
               C139465 * C139426 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
             C13367 + C13367 + C139544 * C121) *
                C30255 +
            (C34032 + C34033) * C139557) *
               C139465 * C139530 -
           ((C13355 * C1767 + C34026 + C34026 + C139544 * C1783 +
             C13353 * C1765 + C34027 + C34027 + C13349 * C1781) *
                C139557 +
            (C34033 + C34032) * C30255) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C139530 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C139426) *
              C139346 * C139558 +
          (((C32124 + C32125 + C32126 + C32127) * C30255 +
            (C32128 + C32129 + C32130 + C32131) * C139557) *
               C139426 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139530) *
              C139346 * C139559 +
          (((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
                C30255 +
            (C34132 + C34133 + C34134 + C34135) * C139557) *
               C139530 -
           (((C186 * C1775 + C139465 * C1885) * C139544 +
             (C186 * C1767 + C139465 * C1877) * C13356 + C1910 * C13349 +
             C1909 * C13354) *
                C139557 +
            (C34135 + C34134 + C34133 + C34132) * C30255) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139530 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139426) *
              C139346 * C139558 +
          (((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
            (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
               C139465 * C139426 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
            (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
               C139465 * C139530 -
           ((C30392 * C1775 + C139557 * C1999 + C30391 * C1774 +
             C30255 * C1998) *
                C139544 +
            (C30392 * C1767 + C139557 * C1991 + C30391 * C1766 +
             C30255 * C1990) *
                C13356 +
            (C34245 + C34244) * C13349 + (C34243 + C34242) * C13354) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139530 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139426) *
              C139346 * C139558 +
          ((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
            ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                C139557) *
               C139426 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139530) *
              C139346 * C139559 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C186 +
             (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                 C139465) *
                C30255 +
            ((C34352 + C34353) * C186 + (C34354 + C34355) * C139465) *
                C139557) *
               C139530 -
           (((C13356 * C1877 + C139544 * C2105 + C13354 * C1875 +
              C13349 * C2103) *
                 C139465 +
             (C13356 * C1767 + C139544 * C1775 + C13354 * C1765 +
              C13349 * C1773) *
                 C186) *
                C139557 +
            ((C34355 + C34354) * C139465 + (C34353 + C34352) * C186) * C30255) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139530 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139426) *
              C139346 * C139558 +
          (((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
               C139426 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139530) *
              C139346 * C139559 +
          (((C447 * C13349 + C448 * C139544) * C30255 +
            (C34454 + C34455) * C139557) *
               C139530 -
           (((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139544 +
             C2216 * C13349) *
                C139557 +
            (C34455 + C34454) * C30255) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139530 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139426) *
              C139346 * C139558 +
          ((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
            ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                C139544) *
               C139426 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139530) *
              C139346 * C139559 +
          ((((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
            ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) *
                C139544) *
               C139530 -
           (((C30392 * C1877 + C139557 * C2297 + C30391 * C1876 +
              C30255 * C2296) *
                 C139465 +
             (C30392 * C1767 + C139557 * C1991 + C30391 * C1766 +
              C30255 * C1990) *
                 C186) *
                C139544 +
            ((C34559 + C34558) * C139465 + (C34243 + C34242) * C186) * C13349) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139530 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139426) *
              C139346 * C139558 +
          (((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
            (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
               C139465 * C139426 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C30391 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C30255 +
            (C34352 + C34353) * C30392 + (C34662 + C34663) * C139557) *
               C139465 * C139530 -
           ((C13356 * C1991 + C139544 * C2399 + C13354 * C1989 +
             C13349 * C2397) *
                C139557 +
            (C13356 * C1767 + C139544 * C1775 + C13354 * C1765 +
             C13349 * C1773) *
                C30392 +
            (C34663 + C34662) * C30255 + (C34353 + C34352) * C30391) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139530 -
                     ((C32863 + C32864 + C32865 + C32866) * C139544 +
                      (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                       C32132 * C30391) *
                          C13349) *
                         C139426) *
                        C139346 * C139558 +
                    (((C32866 + C32865 + C32864 + C32863) * C13349 +
                      (C34762 + C34763 + C34764 + C34765) * C139544) *
                         C139426 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C139530) *
                        C139346 * C139559 +
                    (((C30785 + C30784 + C30783 + C30782) * C13349 +
                      (C30786 + C30787 + C30788 + C30789) * C139544) *
                         C139530 -
                     (((C186 * C1991 + C139465 * C2481) * C139557 +
                       (C186 * C1767 + C139465 * C1877) * C30392 +
                       C3978 * C30255 + C3503 * C30391) *
                          C139544 +
                      (C34765 + C34764 + C34763 + C34762) * C13349) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139530 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139426) *
                        C139346 * C139558 +
                    (((C33005 + C33004) * C139465 * C13349 +
                      (C34874 + C34875) * C139465 * C139544) *
                         C139426 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139530) *
                        C139346 * C139559 +
                    (((C30895 + C30894) * C139465 * C13349 +
                      (C30896 + C30897) * C139465 * C139544) *
                         C139530 -
                     ((C30856 * C1767 + C34868 + C34868 + C139557 * C2583 +
                       C30855 * C1766 + C34869 + C34869 + C30255 * C2582) *
                          C139465 * C139544 +
                      (C34875 + C34874) * C139465 * C13349) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
            C13359 + C13359 + C139544 * C119) *
               C30255 +
           (C13353 * C1762 + C15259 + C15259 + C13349 * C1778 + C13355 * C1761 +
            C15258 + C15258 + C139544 * C1777) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C13355 * C1760 + C15265 + C15265 + C139544 * C1776 +
            C13353 * C1761 + C15264 + C15264 + C13349 * C1777) *
               C139557 +
           (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
            C13365 + C13365 + C13349 * C119) *
               C30255) *
              C139465 * C139362 * C139346 * C97 +
          ((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
            C13367 + C13367 + C139544 * C121) *
               C30255 +
           (C13353 * C1760 + C17203 + C17203 + C13349 * C1776 + C13355 * C1766 +
            C17202 + C17202 + C139544 * C1782) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C13355 * C3416 + C30258 + C30258 + C139544 * C3418 +
            C13353 * C1766 + C30259 + C30259 + C13349 * C1782) *
               C139557 +
           (C13355 * C110 + C13372 + C13372 + C139544 * C122 + C13353 * C109 +
            C13373 + C13373 + C13349 * C121) *
               C30255) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C13353 * C1762 + C15259 + C15259 + C13349 * C1778 +
             C13355 * C1761 + C15258 + C15258 + C139544 * C1777) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139362 * C823 +
           ((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
               C139465 * C139362 * C823 -
           ((C13355 * C1760 + C15265 + C15265 + C139544 * C1776 +
             C13353 * C1761 + C15264 + C15264 + C13349 * C1777) *
                C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139362 * C822 -
           ((C13355 * C8590 + C18164 + C18164 + C139544 * C8596 +
             C13353 * C8591 + C18165 + C18165 + C13349 * C8597) *
                C139557 +
            (C14163 + C14162) * C30255) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C13354 +
            (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
            C217 * C139544) *
               C30255 +
           ((C186 * C1762 + C139465 * C1872) * C13354 +
            (C186 * C1770 + C139465 * C1880) * C13349 + C1906 * C13356 +
            C1905 * C139544) *
               C139557) *
              C139362 * C139346 * C96 -
          ((C1903 * C139544 + C1904 * C13356 + C1905 * C13349 +
            C1906 * C13354) *
               C139557 +
           (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
               C30255) *
              C139362 * C139346 * C97 +
          ((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
               C30255 +
           (C1904 * C13354 + C1903 * C13349 + C3503 * C13356 +
            C3504 * C139544) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C186 * C3417 + C139465 * C3497) * C139544 +
            (C186 * C3416 + C139465 * C3496) * C13356 + C3504 * C13349 +
            C3503 * C13354) *
               C139557 +
           (C223 * C139544 + C222 * C13356 + C220 * C13349 + C221 * C13354) *
               C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            ((C186 * C1762 + C139465 * C1872) * C13354 +
             (C186 * C1770 + C139465 * C1880) * C13349 + C1906 * C13356 +
             C1905 * C139544) *
                C139557) *
               C139362 * C822 -
           ((C4293 * C139544 + C4292 * C13356 +
             (C186 * C4163 + C139465 * C4279) * C13349 +
             (C186 * C4159 + C139465 * C4275) * C13354) *
                C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C13354 +
             (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
             C975 * C139544) *
                C30255 +
            ((C186 * C8592 + C139465 * C8678) * C13354 +
             (C186 * C8595 + C139465 * C8681) * C13349 + C31098 * C13356 +
             C31099 * C139544) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                C30255 +
            (C4292 * C13354 + C4293 * C13349 + C4294 * C13356 +
             C4295 * C139544) *
                C139557) *
               C139362 * C823 -
           ((C1903 * C139544 + C1904 * C13356 + C1905 * C13349 +
             C1906 * C13354) *
                C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139362 * C822 -
           (((C186 * C8593 + C139465 * C8679) * C139544 +
             (C186 * C8590 + C139465 * C8676) * C13356 + C31099 * C13349 +
             C31098 * C13354) *
                C139557 +
            (C977 * C139544 + C976 * C13356 + C975 * C13349 + C974 * C13354) *
                C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C13354 +
           (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
               C13349 +
           (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
              C139465 * C139362 * C139346 * C96 -
          ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
           (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
              C139465 * C139362 * C139346 * C97 +
          ((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
           (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
              C139465 * C139362 * C139346 * C98 -
          ((C30392 * C3417 + C139557 * C3579 + C30391 * C116 + C30255 * C284) *
               C139544 +
           (C30392 * C3416 + C139557 * C3578 + C30391 * C110 + C30255 * C278) *
               C13356 +
           (C30429 + C30428) * C13349 + (C30427 + C30426) * C13354) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139362 * C822 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139362 * C823 +
           ((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C13354 +
            (C30391 * C838 + C30255 * C1062 + C30392 * C8595 +
             C139557 * C8761) *
                C13349 +
            (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
               C139465 * C139362 * C824) *
              C825 +
          (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
            (C30391 * C827 + C30255 * C1051 + C30392 * C4161 +
             C139557 * C4395) *
                C13356 +
            (C30391 * C835 + C30255 * C1059 + C30392 * C4165 +
             C139557 * C4399) *
                C139544) *
               C139465 * C139362 * C823 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139362 * C822 -
           ((C30392 * C8593 + C139557 * C8759 + C30391 * C840 +
             C30255 * C1064) *
                C139544 +
            (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
             C30255 * C1056) *
                C13356 +
            (C31221 + C31220) * C13349 + (C31219 + C31218) * C13354) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C186 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C139465) *
               C30255 +
           ((C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
             C139544 * C1769) *
                C186 +
            (C13354 * C1872 + C13349 * C2100 + C13356 * C1871 +
             C139544 * C2099) *
                C139465) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C13356 * C1870 + C139544 * C2098 + C13354 * C1871 +
             C13349 * C2099) *
                C139465 +
            (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
             C13349 * C1769) *
                C186) *
               C139557 +
           ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                C139465 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C186) *
               C30255) *
              C139362 * C139346 * C97 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C186 +
            (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                C139465) *
               C30255 +
           ((C13354 * C1760 + C13349 * C1768 + C13356 * C1766 +
             C139544 * C1774) *
                C186 +
            (C13354 * C1870 + C13349 * C2098 + C13356 * C1876 +
             C139544 * C2104) *
                C139465) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C13356 * C3496 + C139544 * C3660 + C13354 * C1876 +
             C13349 * C2104) *
                C139465 +
            (C13356 * C3416 + C139544 * C3417 + C13354 * C1766 +
             C13349 * C1774) *
                C186) *
               C139557 +
           ((C13356 * C191 + C139544 * C364 + C13354 * C190 + C13349 * C363) *
                C139465 +
            (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
                C186) *
               C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
              C139544 * C1769) *
                 C186 +
             (C13354 * C1872 + C13349 * C2100 + C13356 * C1871 +
              C139544 * C2099) *
                 C139465) *
                C139557) *
               C139362 * C822 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139362 * C823 +
           (((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
            ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
            ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                C139557) *
               C139362 * C823 -
           (((C13356 * C1870 + C139544 * C2098 + C13354 * C1871 +
              C13349 * C2099) *
                 C139465 +
             (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
              C13349 * C1769) *
                 C186) *
                C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139362 * C822 -
           (((C13356 * C8676 + C139544 * C8836 + C13354 * C8677 +
              C13349 * C8837) *
                 C139465 +
             (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
              C13349 * C8594) *
                 C186) *
                C139557 +
            ((C14563 + C14562) * C139465 + (C14561 + C14560) * C186) * C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
            C446 * C139544) *
               C30255 +
           ((C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C13349 +
            C2214 * C139544) *
               C139557) *
              C139362 * C139346 * C96 -
          ((C2213 * C139544 + C2214 * C13349) * C139557 +
           (C447 * C139544 + C446 * C13349) * C30255) *
              C139362 * C139346 * C97 +
          ((C447 * C13349 + C448 * C139544) * C30255 +
           (C2213 * C13349 + C3742 * C139544) * C139557) *
              C139362 * C139346 * C98 -
          (((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C139544 +
            C3742 * C13349) *
               C139557 +
           (C449 * C139544 + C448 * C13349) * C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            ((C416 * C1762 + C2195 + C2195 + C139465 * C2182) * C13349 +
             C2214 * C139544) *
                C139557) *
               C139362 * C822 -
           ((C4630 * C139544 +
             (C416 * C4159 + C4618 + C4618 + C139465 * C4613) * C13349) *
                C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139362 * C823 +
           (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
             C1282 * C139544) *
                C30255 +
            ((C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C13349 +
             C31422 * C139544) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C1281 * C13349 + C1280 * C139544) * C30255 +
            (C4630 * C13349 + C4631 * C139544) * C139557) *
               C139362 * C823 -
           ((C2213 * C139544 + C2214 * C13349) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139362 * C822 -
           (((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C139544 +
             C31422 * C13349) *
                C139557 +
            (C1283 * C139544 + C1282 * C13349) * C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C186 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C139465) *
               C13349 +
           ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) * C139544) *
              C139362 * C139346 * C96 -
          (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
           ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
              C139362 * C139346 * C97 +
          (((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
           ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) * C139544) *
              C139362 * C139346 * C98 -
          (((C30392 * C3496 + C139557 * C3816 + C30391 * C191 + C30255 * C503) *
                C139465 +
            (C30392 * C3416 + C139557 * C3578 + C30391 * C110 + C30255 * C278) *
                C186) *
               C139544 +
           ((C30645 + C30644) * C139465 + (C30427 + C30426) * C186) * C13349) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139362 * C822 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139362 * C823 +
           (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C13349 +
            ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
            ((C30391 * C827 + C30255 * C1051 + C30392 * C4161 +
              C139557 * C4395) *
                 C186 +
             (C30391 * C937 + C30255 * C1357 + C30392 * C4277 +
              C139557 * C4731) *
                 C139465) *
                C139544) *
               C139362 * C823 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139362 * C822 -
           (((C30392 * C8676 + C139557 * C8993 + C30391 * C942 +
              C30255 * C1362) *
                 C139465 +
             (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
              C30255 * C1056) *
                 C186) *
                C139544 +
            ((C31532 + C31531) * C139465 + (C31219 + C31218) * C186) * C13349) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C30391 +
           (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
               C30255 +
           (C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
            C139544 * C1769) *
               C30392 +
           (C13354 * C1986 + C13349 * C2394 + C13356 * C1985 +
            C139544 * C2393) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C13356 * C1984 + C139544 * C2392 + C13354 * C1985 +
            C13349 * C2393) *
               C139557 +
           (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
            C13349 * C1769) *
               C30392 +
           (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
               C30255 +
           (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
               C30391) *
              C139465 * C139362 * C139346 * C97 +
          ((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
               C30391 +
           (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
               C30255 +
           (C13354 * C1760 + C13349 * C1768 + C13356 * C1766 +
            C139544 * C1774) *
               C30392 +
           (C13354 * C1984 + C13349 * C2392 + C13356 * C1990 +
            C139544 * C2398) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C13356 * C3578 + C139544 * C3897 + C13354 * C1990 +
            C13349 * C2398) *
               C139557 +
           (C13356 * C3416 + C139544 * C3417 + C13354 * C1766 +
            C13349 * C1774) *
               C30392 +
           (C13356 * C278 + C139544 * C581 + C13354 * C277 + C13349 * C580) *
               C30255 +
           (C13356 * C110 + C139544 * C116 + C13354 * C109 + C13349 * C115) *
               C30391) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C13354 * C1762 + C13349 * C1770 + C13356 * C1761 +
             C139544 * C1769) *
                C30392 +
            (C13354 * C1986 + C13349 * C2394 + C13356 * C1985 +
             C139544 * C2393) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139362 * C823 +
           ((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
            (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
            (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
               C139465 * C139362 * C823 -
           ((C13356 * C1984 + C139544 * C2392 + C13354 * C1985 +
             C13349 * C2393) *
                C139557 +
            (C13356 * C1760 + C139544 * C1768 + C13354 * C1761 +
             C13349 * C1769) *
                C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139362 * C822 -
           ((C13356 * C8756 + C139544 * C9070 + C13354 * C8757 +
             C13349 * C9071) *
                C139557 +
            (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
             C13349 * C8594) *
                C30392 +
            (C14930 + C14929) * C30255 + (C14561 + C14560) * C30391) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C30391 +
                      (C186 * C274 + C139465 * C633) * C30255 +
                      (C186 * C1762 + C139465 * C1872) * C30392 +
                      (C186 * C1986 + C139465 * C2476) * C139557) *
                         C13349 +
                     (C30778 + C30779 + C30780 + C30781) * C139544) *
                        C139362 * C139346 * C96 -
                    ((C30782 + C30783 + C30784 + C30785) * C139544 +
                     (C30781 + C30780 + C30779 + C30778) * C13349) *
                        C139362 * C139346 * C97 +
                    ((C30785 + C30784 + C30783 + C30782) * C13349 +
                     (C30786 + C30787 + C30788 + C30789) * C139544) *
                        C139362 * C139346 * C98 -
                    (((C186 * C3578 + C139465 * C3972) * C139557 +
                      (C186 * C3416 + C139465 * C3496) * C30392 +
                      C655 * C30255 + C222 * C30391) *
                         C139544 +
                     (C30789 + C30788 + C30787 + C30786) * C13349) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       (C186 * C1762 + C139465 * C1872) * C30392 +
                       (C186 * C1986 + C139465 * C2476) * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139362 * C822 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      ((C186 * C4393 + C139465 * C4943) * C139557 +
                       (C186 * C4159 + C139465 * C4275) * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C139362 * C823 +
                     (((C186 * C830 + C139465 * C940) * C30391 +
                       (C186 * C1054 + C139465 * C1544) * C30255 +
                       (C186 * C8592 + C139465 * C8678) * C30392 +
                       (C186 * C8758 + C139465 * C9149) * C139557) *
                          C13349 +
                      (C31733 + C31734 + C31735 + C31739) * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C31732 + C31731 + C31730 + C31729) * C13349 +
                      (C971 * C30391 + C1562 * C30255 + C4294 * C30392 +
                       C4955 * C139557) *
                          C139544) *
                         C139362 * C823 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C139362 * C822 -
                     (((C186 * C8756 + C139465 * C9147) * C139557 +
                       (C186 * C8590 + C139465 * C8676) * C30392 +
                       C1565 * C30255 + C976 * C30391) *
                          C139544 +
                      (C31739 + C31735 + C31734 + C31733) * C13349) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[34] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                      C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                         C139465 * C13349 +
                     (C30892 + C30893) * C139465 * C139544) *
                        C139362 * C139346 * C96 -
                    ((C30894 + C30895) * C139465 * C139544 +
                     (C30893 + C30892) * C139465 * C13349) *
                        C139362 * C139346 * C97 +
                    ((C30895 + C30894) * C139465 * C13349 +
                     (C30896 + C30897) * C139465 * C139544) *
                        C139362 * C139346 * C98 -
                    ((C30856 * C3416 + C30878 + C30878 + C139557 * C4053 +
                      C30855 * C110 + C30879 + C30879 + C30255 * C716) *
                         C139465 * C139544 +
                     (C30897 + C30896) * C139465 * C13349) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139362 * C822 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139362 * C823 +
                     ((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                       C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                          C139465 * C13349 +
                      (C31868 + C31869) * C139465 * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C31867 + C31866) * C139465 * C13349 +
                      (C30855 * C827 + C31854 + C31854 + C30255 * C1643 +
                       C30856 * C4161 + C31855 + C31855 + C139557 * C5057) *
                          C139465 * C139544) *
                         C139362 * C823 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139362 * C822 -
                     ((C30856 * C8590 + C31856 + C31856 + C139557 * C9224 +
                       C30855 * C832 + C31857 + C31857 + C30255 * C1648) *
                          C139465 * C139544 +
                      (C31869 + C31868) * C139465 * C13349) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139362 * C139560 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139362 * C139561 +
           ((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) *
               C139465 * C139362 * C7039) *
              C139521 +
          (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
               C139465 * C139362 * C139561 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139362 * C139560 -
           ((C13355 * C8590 + C18164 + C18164 + C139544 * C8596 +
             C13353 * C8591 + C18165 + C18165 + C13349 * C8597) *
                C139557 +
            (C14163 + C14162) * C30255) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C139362 * C139560 -
           ((C35141 + C35140 + C35155 + C35154) * C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C139362 * C139561 +
           (((C186 * C830 + C139465 * C940) * C13354 +
             (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
             C975 * C139544) *
                C30255 +
            ((C186 * C8592 + C139465 * C8678) * C13354 +
             (C186 * C8595 + C139465 * C8681) * C13349 + C31098 * C13356 +
             C31099 * C139544) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                C30255 +
            (C35146 + C35147 + C35148 + C35149) * C139557) *
               C139362 * C139561 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139362 * C139560 -
           (((C186 * C8593 + C139465 * C8679) * C139544 +
             (C186 * C8590 + C139465 * C8676) * C13356 + C31099 * C13349 +
             C31098 * C13354) *
                C139557 +
            (C977 * C139544 + C976 * C13356 + C975 * C13349 + C974 * C13354) *
                C30255) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139362 * C139560 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139362 * C139561 +
           ((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C13354 +
            (C30391 * C838 + C30255 * C1062 + C30392 * C8595 +
             C139557 * C8761) *
                C13349 +
            (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
               C139465 * C139362 * C7039) *
              C139521 +
          (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
            (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
               C139465 * C139362 * C139561 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139362 * C139560 -
           ((C30392 * C8593 + C139557 * C8759 + C30391 * C840 +
             C30255 * C1064) *
                C139544 +
            (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
             C30255 * C1056) *
                C13356 +
            (C31221 + C31220) * C13349 + (C31219 + C31218) * C13354) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139362 * C139560 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139362 * C139561 +
           (((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
            ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
            ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                C139557) *
               C139362 * C139561 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139362 * C139560 -
           (((C13356 * C8676 + C139544 * C8836 + C13354 * C8677 +
              C13349 * C8837) *
                 C139465 +
             (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
              C13349 * C8594) *
                 C186) *
                C139557 +
            ((C14563 + C14562) * C139465 + (C14561 + C14560) * C186) * C30255) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139362 * C139560 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139362 * C139561 +
           (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
             C1282 * C139544) *
                C30255 +
            ((C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C13349 +
             C31422 * C139544) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          (((C1281 * C13349 + C1280 * C139544) * C30255 +
            (C35563 + C35564) * C139557) *
               C139362 * C139561 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139362 * C139560 -
           (((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C139544 +
             C31422 * C13349) *
                C139557 +
            (C1283 * C139544 + C1282 * C13349) * C30255) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139362 * C139560 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139362 * C139561 +
           (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C13349 +
            ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) *
                C139544) *
               C139362 * C7039) *
              C139521 +
          ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
            ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                C139544) *
               C139362 * C139561 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139362 * C139560 -
           (((C30392 * C8676 + C139557 * C8993 + C30391 * C942 +
              C30255 * C1362) *
                 C139465 +
             (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
              C30255 * C1056) *
                 C186) *
                C139544 +
            ((C31532 + C31531) * C139465 + (C31219 + C31218) * C186) * C13349) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139362 * C139560 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139362 * C139561 +
           ((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
            (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
               C139465 * C139362 * C7039) *
              C139521 +
          (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
            (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
               C139465 * C139362 * C139561 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139362 * C139560 -
           ((C13356 * C8756 + C139544 * C9070 + C13354 * C8757 +
             C13349 * C9071) *
                C139557 +
            (C13356 * C8590 + C139544 * C8593 + C13354 * C8591 +
             C13349 * C8594) *
                C30392 +
            (C14930 + C14929) * C30255 + (C14561 + C14560) * C30391) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139362 * C139560 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      (C35975 * C139557 + C35150 * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C139362 * C139561 +
                     (((C186 * C830 + C139465 * C940) * C30391 +
                       (C186 * C1054 + C139465 * C1544) * C30255 +
                       (C186 * C8592 + C139465 * C8678) * C30392 +
                       (C186 * C8758 + C139465 * C9149) * C139557) *
                          C13349 +
                      (C31733 + C31734 + C31735 + C31739) * C139544) *
                         C139362 * C7039) *
                        C139521 +
                    (((C31732 + C31731 + C31730 + C31729) * C13349 +
                      (C33810 + C33811 + C33812 + C33813) * C139544) *
                         C139362 * C139561 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C139362 * C139560 -
                     (((C186 * C8756 + C139465 * C9147) * C139557 +
                       (C186 * C8590 + C139465 * C8676) * C30392 +
                       C1565 * C30255 + C976 * C30391) *
                          C139544 +
                      (C31739 + C31735 + C31734 + C31733) * C13349) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139362 * C139560 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139362 * C139561 +
                     ((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                       C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                          C139465 * C13349 +
                      (C31868 + C31869) * C139465 * C139544) *
                         C139362 * C7039) *
                        C139521 +
                    (((C31867 + C31866) * C139465 * C13349 +
                      (C33922 + C33923) * C139465 * C139544) *
                         C139362 * C139561 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139362 * C139560 -
                     ((C30856 * C8590 + C31856 + C31856 + C139557 * C9224 +
                       C30855 * C832 + C31857 + C31857 + C30255 * C1648) *
                          C139465 * C139544 +
                      (C31869 + C31868) * C139465 * C13349) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139530 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139426) *
              C139560 +
          (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
               C139465 * C139426 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139530) *
              C139561 +
          (((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) *
               C139465 * C139530 -
           ((C13355 * C20983 + C20994 + C20994 + C139544 * C20987 +
             C13353 * C20984 + C20995 + C20995 + C13349 * C20988) *
                C139557 +
            (C24015 + C24014) * C30255) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C13354 +
                       (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
                       C217 * C139544) *
                          C30255 +
                      (C32138 + C32139 + C32112 + C32113) * C139557) *
                         C139530 -
                     ((C32114 + C32115 + C32140 + C32141) * C139557 +
                      (C32113 + C32112 + C32139 + C32138) * C30255) *
                         C139426) *
                        C139560 +
                    (((C35154 + C35155 + C35140 + C35141) * C30255 +
                      (C37810 + C37811 + C37806 + C37807) * C139557) *
                         C139426 -
                     ((C35141 + C35140 + C35155 + C35154) * C139557 +
                      (C972 * C139544 + C973 * C13356 +
                       (C186 * C837 + C139465 * C947) * C13349 +
                       (C186 * C829 + C139465 * C939) * C13354) *
                          C30255) *
                         C139530) *
                        C139561 +
                    ((((C186 * C830 + C139465 * C940) * C13354 +
                       (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
                       C975 * C139544) *
                          C30255 +
                      (C40770 + C40771 + C40766 + C40767) * C139557) *
                         C139530 -
                     (((C186 * C20985 + C139465 * C21101) * C139544 +
                       (C186 * C20983 + C139465 * C21099) * C13356 +
                       (C186 * C20986 + C139465 * C21102) * C13349 +
                       (C186 * C20984 + C139465 * C21100) * C13354) *
                          C139557 +
                      (C40767 + C40766 + C40771 + C40770) * C30255) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139530 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139426) *
              C139560 +
          (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
             C139557 * C6491) *
                C13354 +
            (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
             C139557 * C6494) *
                C13349 +
            (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
               C139465 * C139426 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139530) *
              C139561 +
          (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C13354 +
            (C30391 * C838 + C30255 * C1062 + C30392 * C8595 +
             C139557 * C8761) *
                C13349 +
            (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
               C139465 * C139530 -
           ((C30392 * C20985 + C139557 * C21203 + C30391 * C8594 +
             C30255 * C8760) *
                C139544 +
            (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
             C30255 * C8757) *
                C13356 +
            (C30392 * C20986 + C139557 * C21204 + C30391 * C8595 +
             C30255 * C8761) *
                C13349 +
            (C30392 * C20984 + C139557 * C21202 + C30391 * C8592 +
             C30255 * C8758) *
                C13354) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139530 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139426) *
              C139560 +
          ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
            ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                C139557) *
               C139426 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139530) *
              C139561 +
          ((((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
            ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) *
                C139557) *
               C139530 -
           (((C13356 * C21099 + C139544 * C21313 + C13354 * C21100 +
              C13349 * C21314) *
                 C139465 +
             (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
              C13349 * C20986) *
                 C186) *
                C139557 +
            ((C24341 + C24340) * C139465 + (C24339 + C24338) * C186) * C30255) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139530 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139426) *
              C139560 +
          (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) *
               C139426 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139530) *
              C139561 +
          ((((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
             C1282 * C139544) *
                C30255 +
            (C41074 + C41068) * C139557) *
               C139530 -
           (((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139544 +
             (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C13349) *
                C139557 +
            (C41068 + C41074) * C30255) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139530 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139426) *
              C139560 +
          ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C13349 +
            ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                C139544) *
               C139426 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139530) *
              C139561 +
          ((((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C13349 +
            ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) *
                C139544) *
               C139530 -
           (((C30392 * C21099 + C139557 * C21529 + C30391 * C8677 +
              C30255 * C8994) *
                 C139465 +
             (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
              C30255 * C8757) *
                 C186) *
                C139544 +
            ((C30392 * C21100 + C139557 * C21530 + C30391 * C8678 +
              C30255 * C8995) *
                 C139465 +
             (C30392 * C20984 + C139557 * C21202 + C30391 * C8592 +
              C30255 * C8758) *
                 C186) *
                C13349) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139530 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139426) *
              C139560 +
          (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
            (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
               C139465 * C139426 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139530) *
              C139561 +
          (((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
            (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
               C139465 * C139530 -
           ((C13356 * C21201 + C139544 * C21632 + C13354 * C21202 +
             C13349 * C21633) *
                C139557 +
            (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
             C13349 * C20986) *
                C30392 +
            (C24654 + C24653) * C30255 + (C24339 + C24338) * C30391) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139530 -
                     ((C32863 + C32864 + C32865 + C32866) * C139544 +
                      (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                       C32132 * C30391) *
                          C13349) *
                         C139426) *
                        C139560 +
                    (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
                       C38411 * C139557) *
                          C13349 +
                      (C35970 + C35971 + C35972 + C35977) * C139544) *
                         C139426 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      (C35975 * C139557 + C35150 * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C139530) *
                        C139561 +
                    ((((C186 * C830 + C139465 * C940) * C30391 +
                       (C186 * C1054 + C139465 * C1544) * C30255 +
                       C40768 * C30392 + C41371 * C139557) *
                          C13349 +
                      (C31733 + C31734 + C31735 + C31739) * C139544) *
                         C139530 -
                     (((C186 * C21201 + C139465 * C21738) * C139557 +
                       (C186 * C20983 + C139465 * C21099) * C30392 +
                       C31738 * C30255 + C31098 * C30391) *
                          C139544 +
                      ((C186 * C21202 + C139465 * C21739) * C139557 +
                       (C186 * C20984 + C139465 * C21100) * C30392 +
                       C41371 * C30255 + C40768 * C30391) *
                          C13349) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezz[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139530 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139426) *
                        C139560 +
                    (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                       C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                          C139465 * C13349 +
                      (C36122 + C36123) * C139465 * C139544) *
                         C139426 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139530) *
                        C139561 +
                    (((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                       C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                          C139465 * C13349 +
                      (C31868 + C31869) * C139465 * C139544) *
                         C139530 -
                     ((C30856 * C20983 + C41470 + C41470 + C139557 * C21838 +
                       C30855 * C8591 + C41471 + C41471 + C30255 * C9225) *
                          C139465 * C139544 +
                      (C30856 * C20984 + C41472 + C41472 + C139557 * C21839 +
                       C30855 * C8592 + C41473 + C41473 + C30255 * C9226) *
                          C139465 * C13349) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (-std::pow(Pi, 2.5) *
         (((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
            C13359 + C13359 + C139544 * C119) *
               C30255 +
           (C32002 + C32003) * C139557) *
              C139465 * C139362 * C5796 -
          ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) * C139465 *
              C139362 * C5797 +
          ((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) * C139465 *
              C139362 * C5798 -
          ((C13355 * C23997 + C24008 + C24008 + C139544 * C24001 +
            C13353 * C23998 + C24009 + C24009 + C13349 * C24002) *
               C139557 +
           (C20295 + C20294) * C30255) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139362 * C5149 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
               C139465 * C139362 * C139398 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
             C13367 + C13367 + C139544 * C121) *
                C30255 +
            (C34032 + C34033) * C139557) *
               C139465 * C139362 * C5149 -
           ((C13355 * C4162 + C17200 + C17200 + C139544 * C4170 +
             C13353 * C4161 + C17201 + C17201 + C13349 * C4169) *
                C139557 +
            (C16259 + C16258) * C30255) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C1757 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C1758 +
           ((C32005 + C32004) * C30255 +
            (C13353 * C10620 + C26701 + C26701 + C13349 * C10626 +
             C13355 * C10619 + C26700 + C26700 + C139544 * C10625) *
                C139557) *
               C139465 * C1759) *
              C5149 +
          (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
               C139465 * C1758 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C1757 -
           ((C13355 * C26691 + C26698 + C26698 + C139544 * C26695 +
             C13353 * C26692 + C26699 + C26699 + C13349 * C26696) *
                C139557 +
            (C21001 + C21000) * C30255) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C13354 +
            (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
            C217 * C139544) *
               C30255 +
           (C32138 + C32139 + C32112 + C32113) * C139557) *
              C139362 * C5796 -
          ((C35141 + C35140 + C35155 + C35154) * C139557 +
           (C972 * C139544 + C973 * C13356 +
            (C186 * C837 + C139465 * C947) * C13349 +
            (C186 * C829 + C139465 * C939) * C13354) *
               C30255) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C13354 +
            (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
            C975 * C139544) *
               C30255 +
           ((C186 * C8592 + C139465 * C8678) * C13354 +
            (C186 * C8595 + C139465 * C8681) * C13349 + C31098 * C13356 +
            C31099 * C139544) *
               C139557) *
              C139362 * C5798 -
          (((C186 * C23999 + C139465 * C24115) * C139544 +
            (C186 * C23997 + C139465 * C24113) * C13356 +
            (C186 * C24000 + C139465 * C24116) * C13349 +
            (C186 * C23998 + C139465 * C24114) * C13354) *
               C139557 +
           ((C186 * C5805 + C139465 * C5867) * C139544 +
            (C186 * C5802 + C139465 * C5864) * C13356 +
            (C186 * C5806 + C139465 * C5868) * C13349 +
            (C186 * C5803 + C139465 * C5865) * C13354) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C139362 * C5149 -
           ((C35141 + C35140 + C35155 + C35154) * C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C139362 * C139398) *
              C5151 +
          (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                C30255 +
            (C35146 + C35147 + C35148 + C35149) * C139557) *
               C139362 * C139398 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139362 * C5149) *
              C5152 +
          (((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
                C30255 +
            (C34132 + C34133 + C34134 + C34135) * C139557) *
               C139362 * C5149 -
           (((C186 * C4166 + C139465 * C4282) * C139544 +
             (C186 * C4162 + C139465 * C4278) * C13356 + C4295 * C13349 +
             C4294 * C13354) *
                C139557 +
            (C2783 * C139544 + C2782 * C13356 + C970 * C13349 + C971 * C13354) *
                C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C1757 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C1758 +
           ((C32141 + C32140 + C32115 + C32114) * C30255 +
            ((C186 * C10620 + C139465 * C10682) * C13354 +
             (C186 * C10623 + C139465 * C10685) * C13349 + C32136 * C13356 +
             C32137 * C139544) *
                C139557) *
               C1759) *
              C5149 +
          (((C35154 + C35155 + C35140 + C35141) * C30255 +
            (C37810 + C37811 + C37806 + C37807) * C139557) *
               C1758 -
           ((C35141 + C35140 + C35155 + C35154) * C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C1757 -
           (((C186 * C26693 + C139465 * C26769) * C139544 +
             (C186 * C26691 + C139465 * C26767) * C13356 +
             (C186 * C26694 + C139465 * C26770) * C13349 +
             (C186 * C26692 + C139465 * C26768) * C13354) *
                C139557 +
            (C37807 + C37806 + C37811 + C37810) * C30255) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (-std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C13354 +
           (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
               C13349 +
           (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
              C139465 * C139362 * C5796 -
          ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
           (C30392 * C4163 + C139557 * C4397 + C30391 * C837 + C30255 * C1061) *
               C13349 +
           (C30392 * C4159 + C139557 * C4393 + C30391 * C829 + C30255 * C1053) *
               C13354) *
              C139465 * C139362 * C5797 +
          ((C30391 * C830 + C30255 * C1054 + C30392 * C8592 + C139557 * C8758) *
               C13354 +
           (C30391 * C838 + C30255 * C1062 + C30392 * C8595 + C139557 * C8761) *
               C13349 +
           (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
              C139465 * C139362 * C5798 -
          ((C30392 * C23999 + C139557 * C24217 + C30391 * C5805 +
            C30255 * C5923) *
               C139544 +
           (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
            C30255 * C5920) *
               C13356 +
           (C30392 * C24000 + C139557 * C24218 + C30391 * C5806 +
            C30255 * C5924) *
               C13349 +
           (C30392 * C23998 + C139557 * C24216 + C30391 * C5803 +
            C30255 * C5921) *
               C13354) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139362 * C5149 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
            (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
               C139465 * C139362 * C139398 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
            (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
               C139465 * C139362 * C5149 -
           ((C30392 * C4166 + C139557 * C4400 + C30391 * C841 +
             C30255 * C1065) *
                C139544 +
            (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
             C30255 * C1057) *
                C13356 +
            (C33313 + C33312) * C13349 + (C33311 + C33310) * C13354) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C1757 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C1758 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C13354 +
            (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
             C139557 * C10741) *
                C13349 +
            (C32260 + C32261) * C13356 + (C32262 + C32263) * C139544) *
               C139465 * C1759) *
              C5149 +
          (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
             C139557 * C6491) *
                C13354 +
            (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
             C139557 * C6494) *
                C13349 +
            (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
               C139465 * C1758 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C1757 -
           ((C30392 * C26693 + C139557 * C26839 + C30391 * C6327 +
             C30255 * C6493) *
                C139544 +
            (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
             C30255 * C6490) *
                C13356 +
            (C30392 * C26694 + C139557 * C26840 + C30391 * C6328 +
             C30255 * C6494) *
                C13349 +
            (C30392 * C26692 + C139557 * C26838 + C30391 * C6325 +
             C30255 * C6491) *
                C13354) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C186 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C139465) *
               C30255 +
           ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) * C139557) *
              C139362 * C5796 -
          (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
           ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
              C139362 * C5797 +
          (((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
           ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) * C139557) *
              C139362 * C5798 -
          (((C13356 * C24113 + C139544 * C24327 + C13354 * C24114 +
             C13349 * C24328) *
                C139465 +
            (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
             C13349 * C24000) *
                C186) *
               C139557 +
           ((C20525 + C20524) * C139465 + (C20523 + C20522) * C186) * C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139362 * C139398) *
              C5151 +
          ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
            ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                C139557) *
               C139362 * C139398 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139362 * C5149) *
              C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C186 +
             (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                 C139465) *
                C30255 +
            ((C34352 + C34353) * C186 + (C34354 + C34355) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C13356 * C4278 + C139544 * C4514 + C13354 * C4277 +
              C13349 * C4513) *
                 C139465 +
             (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
              C13349 * C4165) *
                 C186) *
                C139557 +
            ((C16581 + C16580) * C139465 + (C16579 + C16578) * C186) * C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C1757 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C1758 +
           (((C32401 + C32400) * C186 + (C32399 + C32398) * C139465) * C30255 +
            ((C13354 * C10620 + C13349 * C10623 + C13356 * C10619 +
              C139544 * C10622) *
                 C186 +
             (C13354 * C10682 + C13349 * C10794 + C13356 * C10681 +
              C139544 * C10793) *
                 C139465) *
                C139557) *
               C1759) *
              C5149 +
          ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
            ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                C139557) *
               C1758 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C1757 -
           (((C13356 * C26767 + C139544 * C26907 + C13354 * C26768 +
              C13349 * C26908) *
                 C139465 +
             (C13356 * C26691 + C139544 * C26693 + C13354 * C26692 +
              C13349 * C26694) *
                 C186) *
                C139557 +
            ((C21327 + C21326) * C139465 + (C21325 + C21324) * C186) * C30255) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
            C446 * C139544) *
               C30255 +
           (C32529 + C32510) * C139557) *
              C139362 * C5796 -
          ((C35560 + C35571) * C139557 +
           (C1281 * C139544 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
               C30255) *
              C139362 * C5797 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
            C1282 * C139544) *
               C30255 +
           ((C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C13349 +
            C31422 * C139544) *
               C139557) *
              C139362 * C5798 -
          (((C416 * C23997 + C37336 + C37336 + C139465 * C24439) * C139544 +
            (C416 * C23998 + C37337 + C37337 + C139465 * C24440) * C13349) *
               C139557 +
           ((C416 * C5802 + C6033 + C6033 + C139465 * C6029) * C139544 +
            (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C13349) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139362 * C5149 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139362 * C139398) *
              C5151 +
          (((C1281 * C13349 + C1280 * C139544) * C30255 +
            (C35563 + C35564) * C139557) *
               C139362 * C139398 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139362 * C5149) *
              C5152 +
          (((C447 * C13349 + C448 * C139544) * C30255 +
            (C34454 + C34455) * C139557) *
               C139362 * C5149 -
           (((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C139544 +
             C4631 * C13349) *
                C139557 +
            (C3021 * C139544 + C1280 * C13349) * C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C1757 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) * C1758 +
           ((C32530 + C32511) * C30255 +
            ((C416 * C10620 + C10851 + C10851 + C139465 * C10847) * C13349 +
             C32528 * C139544) *
                C139557) *
               C1759) *
              C5149 +
          (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) * C1758 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C1757 -
           (((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139544 +
             (C416 * C26692 + C38110 + C38110 + C139465 * C26976) * C13349) *
                C139557 +
            (C38108 + C38114) * C30255) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C186 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C139465) *
               C13349 +
           ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) * C139544) *
              C139362 * C5796 -
          (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
           ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
             C30255 * C1359) *
                C139465 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C186) *
               C13349) *
              C139362 * C5797 +
          (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C186 +
            (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
             C139557 * C8995) *
                C139465) *
               C13349 +
           ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) * C139544) *
              C139362 * C5798 -
          (((C30392 * C24113 + C139557 * C24543 + C30391 * C5864 +
             C30255 * C6085) *
                C139465 +
            (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
             C30255 * C5920) *
                C186) *
               C139544 +
           ((C30392 * C24114 + C139557 * C24544 + C30391 * C5865 +
             C30255 * C6086) *
                C139465 +
            (C30392 * C23998 + C139557 * C24216 + C30391 * C5803 +
             C30255 * C5921) *
                C186) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139362 * C139398) *
              C5151 +
          ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
            ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                C139544) *
               C139362 * C139398 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139362 * C5149) *
              C5152 +
          ((((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
            ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C30392 * C4278 + C139557 * C4732 + C30391 * C943 +
              C30255 * C1363) *
                 C139465 +
             (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
              C30255 * C1057) *
                 C186) *
                C139544 +
            ((C33613 + C33612) * C139465 + (C33311 + C33310) * C186) * C13349) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C1757 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C1758 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C13349 +
            ((C32260 + C32261) * C186 + (C32639 + C32640) * C139465) *
                C139544) *
               C1759) *
              C5149 +
          ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C13349 +
            ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                C139544) *
               C1758 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C1757 -
           (((C30392 * C26767 + C139557 * C27047 + C30391 * C6410 +
              C30255 * C6727) *
                 C139465 +
             (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
              C30255 * C6490) *
                 C186) *
                C139544 +
            ((C30392 * C26768 + C139557 * C27048 + C30391 * C6411 +
              C30255 * C6728) *
                 C139465 +
             (C30392 * C26692 + C139557 * C26838 + C30391 * C6325 +
              C30255 * C6491) *
                 C186) *
                C13349) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (-std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C30391 +
           (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
               C30255 +
           (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
              C139465 * C139362 * C5796 -
          ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
           (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
              C139465 * C139362 * C5797 +
          ((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
           (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
              C139465 * C139362 * C5798 -
          ((C13356 * C24215 + C139544 * C24646 + C13354 * C24216 +
            C13349 * C24647) *
               C139557 +
           (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
            C13349 * C24000) *
               C30392 +
           (C20742 + C20741) * C30255 + (C20523 + C20522) * C30391) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139362 * C5149 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
            (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
               C139465 * C139362 * C139398 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C30391 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C30255 +
            (C34352 + C34353) * C30392 + (C34662 + C34663) * C139557) *
               C139465 * C139362 * C5149 -
           ((C13356 * C4396 + C139544 * C4844 + C13354 * C4395 +
             C13349 * C4843) *
                C139557 +
            (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
             C13349 * C4165) *
                C30392 +
            (C16897 + C16896) * C30255 + (C16579 + C16578) * C30391) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C1757 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C1758 +
           ((C32401 + C32400) * C30391 + (C32758 + C32757) * C30255 +
            (C13354 * C10620 + C13349 * C10623 + C13356 * C10619 +
             C139544 * C10622) *
                C30392 +
            (C13354 * C10738 + C13349 * C10956 + C13356 * C10737 +
             C139544 * C10955) *
                C139557) *
               C139465 * C1759) *
              C5149 +
          (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
            (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
               C139465 * C1758 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C1757 -
           ((C13356 * C26837 + C139544 * C27115 + C13354 * C26838 +
             C13349 * C27116) *
                C139557 +
            (C13356 * C26691 + C139544 * C26693 + C13354 * C26692 +
             C13349 * C26694) *
                C30392 +
            (C21640 + C21639) * C30255 + (C21325 + C21324) * C30391) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C30391 +
            (C186 * C274 + C139465 * C633) * C30255 + C32132 * C30392 +
            C32874 * C139557) *
               C13349 +
           (C30778 + C30779 + C30780 + C30781) * C139544) *
              C139362 * C5796 -
          ((C31729 + C31730 + C31731 + C31732) * C139544 +
           (C35975 * C139557 + C35150 * C30392 +
            (C186 * C1053 + C139465 * C1543) * C30255 +
            (C186 * C829 + C139465 * C939) * C30391) *
               C13349) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C30391 +
            (C186 * C1054 + C139465 * C1544) * C30255 +
            (C186 * C8592 + C139465 * C8678) * C30392 +
            (C186 * C8758 + C139465 * C9149) * C139557) *
               C13349 +
           (C31733 + C31734 + C31735 + C31739) * C139544) *
              C139362 * C5798 -
          (((C186 * C24215 + C139465 * C24752) * C139557 +
            (C186 * C23997 + C139465 * C24113) * C30392 +
            (C186 * C5920 + C139465 * C6191) * C30255 +
            (C186 * C5802 + C139465 * C5864) * C30391) *
               C139544 +
           ((C186 * C24216 + C139465 * C24753) * C139557 +
            (C186 * C23998 + C139465 * C24114) * C30392 +
            (C186 * C5921 + C139465 * C6192) * C30255 +
            (C186 * C5803 + C139465 * C5865) * C30391) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C186 * C106 + C139465 * C187) * C30391 +
                                 (C186 * C274 + C139465 * C633) * C30255 +
                                 C32132 * C30392 + C32874 * C139557) *
                                    C13349 +
                                (C30778 + C30779 + C30780 + C30781) * C139544) *
                                   C139362 * C5149 -
                               ((C31729 + C31730 + C31731 + C31732) * C139544 +
                                (C35975 * C139557 + C35150 * C30392 +
                                 (C186 * C1053 + C139465 * C1543) * C30255 +
                                 (C186 * C829 + C139465 * C939) * C30391) *
                                    C13349) *
                                   C139362 * C139398) *
                                  C5151 +
                              (((C31732 + C31731 + C31730 + C31729) * C13349 +
                                (C33810 + C33811 + C33812 + C33813) * C139544) *
                                   C139362 * C139398 -
                               ((C30782 + C30783 + C30784 + C30785) * C139544 +
                                (C30781 + C30780 + C30779 + C30778) * C13349) *
                                   C139362 * C5149) *
                                  C5152 +
                              (((C30785 + C30784 + C30783 + C30782) * C13349 +
                                (C30786 + C30787 + C30788 + C30789) * C139544) *
                                   C139362 * C5149 -
                               (((C186 * C4396 + C139465 * C4946) * C139557 +
                                 (C186 * C4162 + C139465 * C4278) * C30392 +
                                 C3257 * C30255 + C2782 * C30391) *
                                    C139544 +
                                (C33813 + C33812 + C33811 + C33810) * C13349) *
                                   C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C30391 +
             (C186 * C274 + C139465 * C633) * C30255 + C32132 * C30392 +
             C32874 * C139557) *
                C13349 +
            (C30778 + C30779 + C30780 + C30781) * C139544) *
               C1757 -
           ((C32863 + C32864 + C32865 + C32866) * C139544 +
            (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
             C32132 * C30391) *
                C13349) *
               C1758 +
           ((C32135 * C30391 + C32875 * C30255 +
             (C186 * C10620 + C139465 * C10682) * C30392 +
             (C186 * C10738 + C139465 * C11009) * C139557) *
                C13349 +
            (C32869 + C32870 + C32871 + C32877) * C139544) *
               C1759) *
              C5149 +
          (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
             C38411 * C139557) *
                C13349 +
            (C35970 + C35971 + C35972 + C35977) * C139544) *
               C1758 -
           ((C31729 + C31730 + C31731 + C31732) * C139544 +
            (C35975 * C139557 + C35150 * C30392 +
             (C186 * C1053 + C139465 * C1543) * C30255 +
             (C186 * C829 + C139465 * C939) * C30391) *
                C13349) *
               C1757 -
           (((C186 * C26837 + C139465 * C27183) * C139557 +
             (C186 * C26691 + C139465 * C26767) * C30392 + C35976 * C30255 +
             C35152 * C30391) *
                C139544 +
            ((C186 * C26838 + C139465 * C27184) * C139557 +
             (C186 * C26692 + C139465 * C26768) * C30392 + C38411 * C30255 +
             C37808 * C30391) *
                C13349) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] += (-std::pow(Pi, 2.5) *
                   (((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                      C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                         C139465 * C13349 +
                     (C30892 + C30893) * C139465 * C139544) *
                        C139362 * C5796 -
                    ((C31866 + C31867) * C139465 * C139544 +
                     (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                      C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                         C139465 * C13349) *
                        C139362 * C5797 +
                    ((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                      C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                         C139465 * C13349 +
                     (C31868 + C31869) * C139465 * C139544) *
                        C139362 * C5798 -
                    ((C30856 * C23997 + C37602 + C37602 + C139557 * C24852 +
                      C30855 * C5802 + C37603 + C37603 + C30255 * C6244) *
                         C139465 * C139544 +
                     (C30856 * C23998 + C37604 + C37604 + C139557 * C24853 +
                      C30855 * C5803 + C37605 + C37605 + C30255 * C6245) *
                         C139465 * C13349) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139362 * C139398) *
                        C5151 +
                    (((C31867 + C31866) * C139465 * C13349 +
                      (C33922 + C33923) * C139465 * C139544) *
                         C139362 * C139398 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139362 * C5149) *
                        C5152 +
                    (((C30895 + C30894) * C139465 * C13349 +
                      (C30896 + C30897) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C30856 * C4162 + C33916 + C33916 + C139557 * C5058 +
                       C30855 * C833 + C33917 + C33917 + C30255 * C1649) *
                          C139465 * C139544 +
                      (C33923 + C33922) * C139465 * C13349) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C1757 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C1758 +
                     ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
                       C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                          C139465 * C13349 +
                      (C33006 + C33007) * C139465 * C139544) *
                         C1759) *
                        C5149 +
                    (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                       C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                          C139465 * C13349 +
                      (C36122 + C36123) * C139465 * C139544) *
                         C1758 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C1757 -
                     ((C30856 * C26691 + C38510 + C38510 + C139557 * C27251 +
                       C30855 * C6324 + C38511 + C38511 + C30255 * C6958) *
                          C139465 * C139544 +
                      (C30856 * C26692 + C38512 + C38512 + C139557 * C27252 +
                       C30855 * C6325 + C38513 + C38513 + C30255 * C6959) *
                          C139465 * C13349) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
              C13359 + C13359 + C139544 * C119) *
                 C30255 +
             (C32002 + C32003) * C139557) *
                C139465 * C139530 -
            ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
                C139465 * C139426) *
               C5149 +
           (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
                C139465 * C139426 -
            ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
                C139465 * C139426 -
            ((C32007 + C32006) * C139557 +
             (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
              C13365 + C13365 + C13349 * C119) *
                 C30255) *
                C139465 * C139530) *
               C5149 +
           (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
                C139465 * C139530 -
            ((C13355 * C6323 + C15268 + C15268 + C139544 * C6329 +
              C13353 * C6324 + C15269 + C15269 + C13349 * C6330) *
                 C139557 +
             (C18177 + C18176) * C30255) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C13354 +
              (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
              C217 * C139544) *
                 C30255 +
             (C32138 + C32139 + C32112 + C32113) * C139557) *
                C139530 -
            ((C32114 + C32115 + C32140 + C32141) * C139557 +
             (C32113 + C32112 + C32139 + C32138) * C30255) *
                C139426) *
               C5149 +
           (((C35154 + C35155 + C35140 + C35141) * C30255 +
             (C37810 + C37811 + C37806 + C37807) * C139557) *
                C139426 -
            ((C35141 + C35140 + C35155 + C35154) * C139557 +
             (C972 * C139544 + C973 * C13356 +
              (C186 * C837 + C139465 * C947) * C13349 +
              (C186 * C829 + C139465 * C939) * C13354) *
                 C30255) *
                C139530) *
               C139398) *
              C139521 +
          ((((C32124 + C32125 + C32126 + C32127) * C30255 +
             (C32128 + C32129 + C32130 + C32131) * C139557) *
                C139426 -
            ((C32127 + C32126 + C32125 + C32124) * C139557 +
             (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                 C30255) *
                C139530) *
               C5149 +
           (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                 C30255 +
             (C35146 + C35147 + C35148 + C35149) * C139557) *
                C139530 -
            (((C186 * C6326 + C139465 * C6412) * C139544 +
              (C186 * C6323 + C139465 * C6409) * C13356 + C35153 * C13349 +
              C35152 * C13354) *
                 C139557 +
             (C35149 + C35148 + C35147 + C35146) * C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C13354 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C13349 +
             (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
                C139465 * C139530 -
            ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
             (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C13349 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C13354) *
                C139465 * C139426) *
               C5149 +
           (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C13354 +
             (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
              C139557 * C6494) *
                 C13349 +
             (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
                C139465 * C139426 -
            ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
             (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
              C30255 * C1061) *
                 C13349 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C13354) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
             (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
                C139465 * C139426 -
            ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
             (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
                C139465 * C139530) *
               C5149 +
           (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
             (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
                C139465 * C139530 -
            ((C30392 * C6326 + C139557 * C6492 + C30391 * C4165 +
              C30255 * C4399) *
                 C139544 +
             (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
              C30255 * C4395) *
                 C13356 +
             (C35297 + C35296) * C13349 + (C35295 + C35294) * C13354) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                  C186 +
              (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                  C139465) *
                 C30255 +
             ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                 C139557) *
                C139530 -
            (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) *
                 C139557 +
             ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) *
                 C30255) *
                C139426) *
               C5149 +
           ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
             ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                 C139557) *
                C139426 -
            (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) *
                 C139557 +
             ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) *
                 C30255) *
                C139530) *
               C139398) *
              C139521 +
          (((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
             ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                 C139557) *
                C139426 -
            (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) *
                 C139557 +
             ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                  C139465 +
              (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                  C186) *
                 C30255) *
                C139530) *
               C5149 +
           ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
             ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                 C139557) *
                C139530 -
            (((C13356 * C6409 + C139544 * C6569 + C13354 * C6410 +
               C13349 * C6570) *
                  C139465 +
              (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
               C13349 * C6327) *
                  C186) *
                 C139557 +
             ((C18623 + C18622) * C139465 + (C18621 + C18620) * C186) *
                 C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
              C446 * C139544) *
                 C30255 +
             (C32529 + C32510) * C139557) *
                C139530 -
            ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
                C139426) *
               C5149 +
           (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) *
                C139426 -
            ((C35560 + C35571) * C139557 +
             (C1281 * C139544 +
              (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                 C30255) *
                C139530) *
               C139398) *
              C139521 +
          ((((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
                C139426 -
            ((C32517 + C32516) * C139557 +
             (C447 * C139544 + C446 * C13349) * C30255) *
                C139530) *
               C5149 +
           (((C1281 * C13349 + C1280 * C139544) * C30255 +
             (C35563 + C35564) * C139557) *
                C139530 -
            (((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139544 +
              C35570 * C13349) *
                 C139557 +
             (C35564 + C35563) * C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
               C139557 * C1986) *
                  C186 +
              (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
               C139557 * C2292) *
                  C139465) *
                 C13349 +
             ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                 C139544) *
                C139530 -
            (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) *
                 C139544 +
             ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
               C30255 * C2292) *
                  C139465 +
              (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
               C30255 * C1986) *
                  C186) *
                 C13349) *
                C139426) *
               C5149 +
           ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
               C139557 * C6491) *
                  C186 +
              (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
               C139557 * C6728) *
                  C139465) *
                 C13349 +
             ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                 C139544) *
                C139426 -
            (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) *
                 C139544 +
             ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
               C30255 * C1359) *
                  C139465 +
              (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
               C30255 * C1053) *
                  C186) *
                 C13349) *
                C139530) *
               C139398) *
              C139521 +
          (((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
             ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                 C139544) *
                C139426 -
            (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) *
                 C139544 +
             ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) *
                 C13349) *
                C139530) *
               C5149 +
           ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
             ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                 C139544) *
                C139530 -
            (((C30392 * C6409 + C139557 * C6726 + C30391 * C4277 +
               C30255 * C4731) *
                  C139465 +
              (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
               C30255 * C4395) *
                  C186) *
                 C139544 +
             ((C35707 + C35706) * C139465 + (C35295 + C35294) * C186) *
                 C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C30391 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C30255 +
             (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
                C139465 * C139530 -
            ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
             (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
                C139465 * C139426) *
               C5149 +
           (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
             (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
                C139465 * C139426 -
            ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
             (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
             (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
                C139465 * C139426 -
            ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
             (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C30255 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C30391) *
                C139465 * C139530) *
               C5149 +
           (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
             (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
                C139465 * C139530 -
            ((C13356 * C6489 + C139544 * C6803 + C13354 * C6490 +
              C13349 * C6804) *
                 C139557 +
             (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
              C13349 * C6327) *
                 C30392 +
             (C19051 + C19050) * C30255 + (C18621 + C18620) * C30391) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C186 * C106 + C139465 * C187) * C30391 +
                        (C186 * C274 + C139465 * C633) * C30255 +
                        C32132 * C30392 + C32874 * C139557) *
                           C13349 +
                       (C30778 + C30779 + C30780 + C30781) * C139544) *
                          C139530 -
                      ((C32863 + C32864 + C32865 + C32866) * C139544 +
                       (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                        C32132 * C30391) *
                           C13349) *
                          C139426) *
                         C5149 +
                     (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
                        C38411 * C139557) *
                           C13349 +
                       (C35970 + C35971 + C35972 + C35977) * C139544) *
                          C139426 -
                      ((C31729 + C31730 + C31731 + C31732) * C139544 +
                       (C35975 * C139557 + C35150 * C30392 +
                        (C186 * C1053 + C139465 * C1543) * C30255 +
                        (C186 * C829 + C139465 * C939) * C30391) *
                           C13349) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C32866 + C32865 + C32864 + C32863) * C13349 +
                       (C34762 + C34763 + C34764 + C34765) * C139544) *
                          C139426 -
                      ((C30782 + C30783 + C30784 + C30785) * C139544 +
                       (C30781 + C30780 + C30779 + C30778) * C13349) *
                          C139530) *
                         C5149 +
                     (((C31732 + C31731 + C31730 + C31729) * C13349 +
                       (C33810 + C33811 + C33812 + C33813) * C139544) *
                          C139530 -
                      (((C186 * C6489 + C139465 * C6880) * C139557 +
                        (C186 * C6323 + C139465 * C6409) * C30392 +
                        C4955 * C30255 + C4294 * C30391) *
                           C139544 +
                       (C35977 + C35972 + C35971 + C35970) * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[38] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                        C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                           C139465 * C13349 +
                       (C30892 + C30893) * C139465 * C139544) *
                          C139530 -
                      ((C33004 + C33005) * C139465 * C139544 +
                       (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                        C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                           C139465 * C13349) *
                          C139426) *
                         C5149 +
                     (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                        C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                           C139465 * C13349 +
                       (C36122 + C36123) * C139465 * C139544) *
                          C139426 -
                      ((C31866 + C31867) * C139465 * C139544 +
                       (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                        C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                           C139465 * C13349) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C33005 + C33004) * C139465 * C13349 +
                       (C34874 + C34875) * C139465 * C139544) *
                          C139426 -
                      ((C30894 + C30895) * C139465 * C139544 +
                       (C30893 + C30892) * C139465 * C13349) *
                          C139530) *
                         C5149 +
                     (((C31867 + C31866) * C139465 * C13349 +
                       (C33922 + C33923) * C139465 * C139544) *
                          C139530 -
                      ((C30856 * C6323 + C36116 + C36116 + C139557 * C6957 +
                        C30855 * C4161 + C36117 + C36117 + C30255 * C5057) *
                           C139465 * C139544 +
                       (C36123 + C36122) * C139465 * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139362 * C5149 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
               C139465 * C139362 * C139398 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
             C13367 + C13367 + C139544 * C121) *
                C30255 +
            (C34032 + C34033) * C139557) *
               C139465 * C139362 * C5149 -
           ((C13355 * C4162 + C17200 + C17200 + C139544 * C4170 +
             C13353 * C4161 + C17201 + C17201 + C13349 * C4169) *
                C139557 +
            (C16259 + C16258) * C30255) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
            C13359 + C13359 + C139544 * C119) *
               C30255 +
           (C32002 + C32003) * C139557) *
              C139465 * C139362 * C5796 -
          ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) * C139465 *
              C139362 * C5797 +
          ((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) * C139465 *
              C139362 * C5798 -
          ((C13355 * C23997 + C24008 + C24008 + C139544 * C24001 +
            C13353 * C23998 + C24009 + C24009 + C13349 * C24002) *
               C139557 +
           (C20295 + C20294) * C30255) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C139362 * C5149 -
           ((C35141 + C35140 + C35155 + C35154) * C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C139362 * C139398) *
              C5151 +
          (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                C30255 +
            (C35146 + C35147 + C35148 + C35149) * C139557) *
               C139362 * C139398 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139362 * C5149) *
              C5152 +
          (((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
                C30255 +
            (C34132 + C34133 + C34134 + C34135) * C139557) *
               C139362 * C5149 -
           (((C186 * C4166 + C139465 * C4282) * C139544 +
             (C186 * C4162 + C139465 * C4278) * C13356 + C4295 * C13349 +
             C4294 * C13354) *
                C139557 +
            (C2783 * C139544 + C2782 * C13356 + C970 * C13349 + C971 * C13354) *
                C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C13354 +
            (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
            C217 * C139544) *
               C30255 +
           (C32138 + C32139 + C32112 + C32113) * C139557) *
              C139362 * C5796 -
          ((C35141 + C35140 + C35155 + C35154) * C139557 +
           (C972 * C139544 + C973 * C13356 +
            (C186 * C837 + C139465 * C947) * C13349 +
            (C186 * C829 + C139465 * C939) * C13354) *
               C30255) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C13354 +
            (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
            C975 * C139544) *
               C30255 +
           ((C186 * C8592 + C139465 * C8678) * C13354 +
            (C186 * C8595 + C139465 * C8681) * C13349 + C31098 * C13356 +
            C31099 * C139544) *
               C139557) *
              C139362 * C5798 -
          (((C186 * C23999 + C139465 * C24115) * C139544 +
            (C186 * C23997 + C139465 * C24113) * C13356 +
            (C186 * C24000 + C139465 * C24116) * C13349 +
            (C186 * C23998 + C139465 * C24114) * C13354) *
               C139557 +
           ((C186 * C5805 + C139465 * C5867) * C139544 +
            (C186 * C5802 + C139465 * C5864) * C13356 +
            (C186 * C5806 + C139465 * C5868) * C13349 +
            (C186 * C5803 + C139465 * C5865) * C13354) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139362 * C5149 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
            (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
               C139465 * C139362 * C139398 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
            (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
               C139465 * C139362 * C5149 -
           ((C30392 * C4166 + C139557 * C4400 + C30391 * C841 +
             C30255 * C1065) *
                C139544 +
            (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
             C30255 * C1057) *
                C13356 +
            (C33313 + C33312) * C13349 + (C33311 + C33310) * C13354) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C13354 +
           (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
               C13349 +
           (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
              C139465 * C139362 * C5796 -
          ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
           (C30392 * C4163 + C139557 * C4397 + C30391 * C837 + C30255 * C1061) *
               C13349 +
           (C30392 * C4159 + C139557 * C4393 + C30391 * C829 + C30255 * C1053) *
               C13354) *
              C139465 * C139362 * C5797 +
          ((C30391 * C830 + C30255 * C1054 + C30392 * C8592 + C139557 * C8758) *
               C13354 +
           (C30391 * C838 + C30255 * C1062 + C30392 * C8595 + C139557 * C8761) *
               C13349 +
           (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
              C139465 * C139362 * C5798 -
          ((C30392 * C23999 + C139557 * C24217 + C30391 * C5805 +
            C30255 * C5923) *
               C139544 +
           (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
            C30255 * C5920) *
               C13356 +
           (C30392 * C24000 + C139557 * C24218 + C30391 * C5806 +
            C30255 * C5924) *
               C13349 +
           (C30392 * C23998 + C139557 * C24216 + C30391 * C5803 +
            C30255 * C5921) *
               C13354) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139362 * C139398) *
              C5151 +
          ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
            ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                C139557) *
               C139362 * C139398 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139362 * C5149) *
              C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C186 +
             (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                 C139465) *
                C30255 +
            ((C34352 + C34353) * C186 + (C34354 + C34355) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C13356 * C4278 + C139544 * C4514 + C13354 * C4277 +
              C13349 * C4513) *
                 C139465 +
             (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
              C13349 * C4165) *
                 C186) *
                C139557 +
            ((C16581 + C16580) * C139465 + (C16579 + C16578) * C186) * C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C186 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C139465) *
               C30255 +
           ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) * C139557) *
              C139362 * C5796 -
          (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
           ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
              C139362 * C5797 +
          (((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
           ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) * C139557) *
              C139362 * C5798 -
          (((C13356 * C24113 + C139544 * C24327 + C13354 * C24114 +
             C13349 * C24328) *
                C139465 +
            (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
             C13349 * C24000) *
                C186) *
               C139557 +
           ((C20525 + C20524) * C139465 + (C20523 + C20522) * C186) * C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139362 * C5149 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139362 * C139398) *
              C5151 +
          (((C1281 * C13349 + C1280 * C139544) * C30255 +
            (C35563 + C35564) * C139557) *
               C139362 * C139398 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139362 * C5149) *
              C5152 +
          (((C447 * C13349 + C448 * C139544) * C30255 +
            (C34454 + C34455) * C139557) *
               C139362 * C5149 -
           (((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C139544 +
             C4631 * C13349) *
                C139557 +
            (C3021 * C139544 + C1280 * C13349) * C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
            C446 * C139544) *
               C30255 +
           (C32529 + C32510) * C139557) *
              C139362 * C5796 -
          ((C35560 + C35571) * C139557 +
           (C1281 * C139544 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
               C30255) *
              C139362 * C5797 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
            C1282 * C139544) *
               C30255 +
           ((C416 * C8592 + C8919 + C8919 + C139465 * C8915) * C13349 +
            C31422 * C139544) *
               C139557) *
              C139362 * C5798 -
          (((C416 * C23997 + C37336 + C37336 + C139465 * C24439) * C139544 +
            (C416 * C23998 + C37337 + C37337 + C139465 * C24440) * C13349) *
               C139557 +
           ((C416 * C5802 + C6033 + C6033 + C139465 * C6029) * C139544 +
            (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C13349) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139362 * C139398) *
              C5151 +
          ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
            ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                C139544) *
               C139362 * C139398 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139362 * C5149) *
              C5152 +
          ((((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
            ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C30392 * C4278 + C139557 * C4732 + C30391 * C943 +
              C30255 * C1363) *
                 C139465 +
             (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
              C30255 * C1057) *
                 C186) *
                C139544 +
            ((C33613 + C33612) * C139465 + (C33311 + C33310) * C186) * C13349) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C186 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C139465) *
               C13349 +
           ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) * C139544) *
              C139362 * C5796 -
          (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
           ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
             C30255 * C1359) *
                C139465 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C186) *
               C13349) *
              C139362 * C5797 +
          (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C186 +
            (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
             C139557 * C8995) *
                C139465) *
               C13349 +
           ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) * C139544) *
              C139362 * C5798 -
          (((C30392 * C24113 + C139557 * C24543 + C30391 * C5864 +
             C30255 * C6085) *
                C139465 +
            (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
             C30255 * C5920) *
                C186) *
               C139544 +
           ((C30392 * C24114 + C139557 * C24544 + C30391 * C5865 +
             C30255 * C6086) *
                C139465 +
            (C30392 * C23998 + C139557 * C24216 + C30391 * C5803 +
             C30255 * C5921) *
                C186) *
               C13349) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139362 * C5149 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
            (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
               C139465 * C139362 * C139398 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C30391 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C30255 +
            (C34352 + C34353) * C30392 + (C34662 + C34663) * C139557) *
               C139465 * C139362 * C5149 -
           ((C13356 * C4396 + C139544 * C4844 + C13354 * C4395 +
             C13349 * C4843) *
                C139557 +
            (C13356 * C4162 + C139544 * C4166 + C13354 * C4161 +
             C13349 * C4165) *
                C30392 +
            (C16897 + C16896) * C30255 + (C16579 + C16578) * C30391) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C30391 +
           (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
               C30255 +
           (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
              C139465 * C139362 * C5796 -
          ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
           (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
              C139465 * C139362 * C5797 +
          ((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
           (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
              C139465 * C139362 * C5798 -
          ((C13356 * C24215 + C139544 * C24646 + C13354 * C24216 +
            C13349 * C24647) *
               C139557 +
           (C13356 * C23997 + C139544 * C23999 + C13354 * C23998 +
            C13349 * C24000) *
               C30392 +
           (C20742 + C20741) * C30255 + (C20523 + C20522) * C30391) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139362 * C5149 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      (C35975 * C139557 + C35150 * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C139362 * C139398) *
                        C5151 +
                    (((C31732 + C31731 + C31730 + C31729) * C13349 +
                      (C33810 + C33811 + C33812 + C33813) * C139544) *
                         C139362 * C139398 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C139362 * C5149) *
                        C5152 +
                    (((C30785 + C30784 + C30783 + C30782) * C13349 +
                      (C30786 + C30787 + C30788 + C30789) * C139544) *
                         C139362 * C5149 -
                     (((C186 * C4396 + C139465 * C4946) * C139557 +
                       (C186 * C4162 + C139465 * C4278) * C30392 +
                       C3257 * C30255 + C2782 * C30391) *
                          C139544 +
                      (C33813 + C33812 + C33811 + C33810) * C13349) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C30391 +
                      (C186 * C274 + C139465 * C633) * C30255 +
                      C32132 * C30392 + C32874 * C139557) *
                         C13349 +
                     (C30778 + C30779 + C30780 + C30781) * C139544) *
                        C139362 * C5796 -
                    ((C31729 + C31730 + C31731 + C31732) * C139544 +
                     (C35975 * C139557 + C35150 * C30392 +
                      (C186 * C1053 + C139465 * C1543) * C30255 +
                      (C186 * C829 + C139465 * C939) * C30391) *
                         C13349) *
                        C139362 * C5797 +
                    (((C186 * C830 + C139465 * C940) * C30391 +
                      (C186 * C1054 + C139465 * C1544) * C30255 +
                      (C186 * C8592 + C139465 * C8678) * C30392 +
                      (C186 * C8758 + C139465 * C9149) * C139557) *
                         C13349 +
                     (C31733 + C31734 + C31735 + C31739) * C139544) *
                        C139362 * C5798 -
                    (((C186 * C24215 + C139465 * C24752) * C139557 +
                      (C186 * C23997 + C139465 * C24113) * C30392 +
                      (C186 * C5920 + C139465 * C6191) * C30255 +
                      (C186 * C5802 + C139465 * C5864) * C30391) *
                         C139544 +
                     ((C186 * C24216 + C139465 * C24753) * C139557 +
                      (C186 * C23998 + C139465 * C24114) * C30392 +
                      (C186 * C5921 + C139465 * C6192) * C30255 +
                      (C186 * C5803 + C139465 * C5865) * C30391) *
                         C13349) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139362 * C139398) *
                        C5151 +
                    (((C31867 + C31866) * C139465 * C13349 +
                      (C33922 + C33923) * C139465 * C139544) *
                         C139362 * C139398 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139362 * C5149) *
                        C5152 +
                    (((C30895 + C30894) * C139465 * C13349 +
                      (C30896 + C30897) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C30856 * C4162 + C33916 + C33916 + C139557 * C5058 +
                       C30855 * C833 + C33917 + C33917 + C30255 * C1649) *
                          C139465 * C139544 +
                      (C33923 + C33922) * C139465 * C13349) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                      C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                         C139465 * C13349 +
                     (C30892 + C30893) * C139465 * C139544) *
                        C139362 * C5796 -
                    ((C31866 + C31867) * C139465 * C139544 +
                     (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                      C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                         C139465 * C13349) *
                        C139362 * C5797 +
                    ((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                      C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                         C139465 * C13349 +
                     (C31868 + C31869) * C139465 * C139544) *
                        C139362 * C5798 -
                    ((C30856 * C23997 + C37602 + C37602 + C139557 * C24852 +
                      C30855 * C5802 + C37603 + C37603 + C30255 * C6244) *
                         C139465 * C139544 +
                     (C30856 * C23998 + C37604 + C37604 + C139557 * C24853 +
                      C30855 * C5803 + C37605 + C37605 + C30255 * C6245) *
                         C139465 * C13349) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
              C13359 + C13359 + C139544 * C119) *
                 C30255 +
             (C32002 + C32003) * C139557) *
                C139465 * C9304 -
            ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
                C139465 * C139426) *
               C139529 +
           (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
                C139465 * C139426 -
            ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
                C139465 * C139426 -
            ((C32007 + C32006) * C139557 +
             (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
              C13365 + C13365 + C13349 * C119) *
                 C30255) *
                C139465 * C9304) *
               C139529 +
           (((C14160 + C14161) * C30255 + (C18176 + C18177) * C139557) *
                C139465 * C9304 -
            ((C13355 * C6323 + C15268 + C15268 + C139544 * C6329 +
              C13353 * C6324 + C15269 + C15269 + C13349 * C6330) *
                 C139557 +
             (C18177 + C18176) * C30255) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C13354 +
              (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
              C217 * C139544) *
                 C30255 +
             (C32138 + C32139 + C32112 + C32113) * C139557) *
                C9304 -
            ((C32114 + C32115 + C32140 + C32141) * C139557 +
             (C32113 + C32112 + C32139 + C32138) * C30255) *
                C139426) *
               C139529 +
           (((C35154 + C35155 + C35140 + C35141) * C30255 +
             (C37810 + C37811 + C37806 + C37807) * C139557) *
                C139426 -
            ((C35141 + C35140 + C35155 + C35154) * C139557 +
             (C972 * C139544 + C973 * C13356 +
              (C186 * C837 + C139465 * C947) * C13349 +
              (C186 * C829 + C139465 * C939) * C13354) *
                 C30255) *
                C9304) *
               C139398) *
              C139521 +
          ((((C32124 + C32125 + C32126 + C32127) * C30255 +
             (C32128 + C32129 + C32130 + C32131) * C139557) *
                C139426 -
            ((C32127 + C32126 + C32125 + C32124) * C139557 +
             (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                 C30255) *
                C9304) *
               C139529 +
           (((C973 * C13354 + C972 * C13349 + C971 * C13356 + C970 * C139544) *
                 C30255 +
             (C35146 + C35147 + C35148 + C35149) * C139557) *
                C9304 -
            (((C186 * C6326 + C139465 * C6412) * C139544 +
              (C186 * C6323 + C139465 * C6409) * C13356 + C35153 * C13349 +
              C35152 * C13354) *
                 C139557 +
             (C35149 + C35148 + C35147 + C35146) * C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C13354 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C13349 +
             (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
                C139465 * C9304 -
            ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
             (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C13349 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C13354) *
                C139465 * C139426) *
               C139529 +
           (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C13354 +
             (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
              C139557 * C6494) *
                 C13349 +
             (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
                C139465 * C139426 -
            ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
             (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
              C30255 * C1061) *
                 C13349 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C13354) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
             (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
                C139465 * C139426 -
            ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
             (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
                C139465 * C9304) *
               C139529 +
           (((C31217 + C31216) * C13354 + (C31215 + C31214) * C13349 +
             (C33310 + C33311) * C13356 + (C33312 + C33313) * C139544) *
                C139465 * C9304 -
            ((C30392 * C6326 + C139557 * C6492 + C30391 * C4165 +
              C30255 * C4399) *
                 C139544 +
             (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
              C30255 * C4395) *
                 C13356 +
             (C35297 + C35296) * C13349 + (C35295 + C35294) * C13354) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                  C186 +
              (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                  C139465) *
                 C30255 +
             ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                 C139557) *
                C9304 -
            (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) *
                 C139557 +
             ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) *
                 C30255) *
                C139426) *
               C139529 +
           ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
             ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                 C139557) *
                C139426 -
            (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) *
                 C139557 +
             ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) *
                 C30255) *
                C9304) *
               C139398) *
              C139521 +
          (((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
             ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                 C139557) *
                C139426 -
            (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) *
                 C139557 +
             ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                  C139465 +
              (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                  C186) *
                 C30255) *
                C9304) *
               C139529 +
           ((((C14556 + C14557) * C186 + (C14558 + C14559) * C139465) * C30255 +
             ((C18620 + C18621) * C186 + (C18622 + C18623) * C139465) *
                 C139557) *
                C9304 -
            (((C13356 * C6409 + C139544 * C6569 + C13354 * C6410 +
               C13349 * C6570) *
                  C139465 +
              (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
               C13349 * C6327) *
                  C186) *
                 C139557 +
             ((C18623 + C18622) * C139465 + (C18621 + C18620) * C186) *
                 C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
              C446 * C139544) *
                 C30255 +
             (C32529 + C32510) * C139557) *
                C9304 -
            ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
                C139426) *
               C139529 +
           (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) *
                C139426 -
            ((C35560 + C35571) * C139557 +
             (C1281 * C139544 +
              (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                 C30255) *
                C9304) *
               C139398) *
              C139521 +
          ((((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
                C139426 -
            ((C32517 + C32516) * C139557 +
             (C447 * C139544 + C446 * C13349) * C30255) *
                C9304) *
               C139529 +
           (((C1281 * C13349 + C1280 * C139544) * C30255 +
             (C35563 + C35564) * C139557) *
                C9304 -
            (((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139544 +
              C35570 * C13349) *
                 C139557 +
             (C35564 + C35563) * C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
               C139557 * C1986) *
                  C186 +
              (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
               C139557 * C2292) *
                  C139465) *
                 C13349 +
             ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                 C139544) *
                C9304 -
            (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) *
                 C139544 +
             ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
               C30255 * C2292) *
                  C139465 +
              (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
               C30255 * C1986) *
                  C186) *
                 C13349) *
                C139426) *
               C139529 +
           ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
               C139557 * C6491) *
                  C186 +
              (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
               C139557 * C6728) *
                  C139465) *
                 C13349 +
             ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                 C139544) *
                C139426 -
            (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) *
                 C139544 +
             ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
               C30255 * C1359) *
                  C139465 +
              (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
               C30255 * C1053) *
                  C186) *
                 C13349) *
                C9304) *
               C139398) *
              C139521 +
          (((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
             ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                 C139544) *
                C139426 -
            (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) *
                 C139544 +
             ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) *
                 C13349) *
                C9304) *
               C139529 +
           ((((C31217 + C31216) * C186 + (C31530 + C31529) * C139465) * C13349 +
             ((C33310 + C33311) * C186 + (C33612 + C33613) * C139465) *
                 C139544) *
                C9304 -
            (((C30392 * C6409 + C139557 * C6726 + C30391 * C4277 +
               C30255 * C4731) *
                  C139465 +
              (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
               C30255 * C4395) *
                  C186) *
                 C139544 +
             ((C35707 + C35706) * C139465 + (C35295 + C35294) * C186) *
                 C13349) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C30391 +
             (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                 C30255 +
             (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
                C139465 * C9304 -
            ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
             (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
                C139465 * C139426) *
               C139529 +
           (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
             (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
                C139465 * C139426 -
            ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
             (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
             (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
                C139465 * C139426 -
            ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
             (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                 C30255 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C30391) *
                C139465 * C9304) *
               C139529 +
           (((C14556 + C14557) * C30391 + (C14927 + C14928) * C30255 +
             (C18620 + C18621) * C30392 + (C19050 + C19051) * C139557) *
                C139465 * C9304 -
            ((C13356 * C6489 + C139544 * C6803 + C13354 * C6490 +
              C13349 * C6804) *
                 C139557 +
             (C13356 * C6323 + C139544 * C6326 + C13354 * C6324 +
              C13349 * C6327) *
                 C30392 +
             (C19051 + C19050) * C30255 + (C18621 + C18620) * C30391) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C186 * C106 + C139465 * C187) * C30391 +
                        (C186 * C274 + C139465 * C633) * C30255 +
                        C32132 * C30392 + C32874 * C139557) *
                           C13349 +
                       (C30778 + C30779 + C30780 + C30781) * C139544) *
                          C9304 -
                      ((C32863 + C32864 + C32865 + C32866) * C139544 +
                       (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                        C32132 * C30391) *
                           C13349) *
                          C139426) *
                         C139529 +
                     (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
                        C38411 * C139557) *
                           C13349 +
                       (C35970 + C35971 + C35972 + C35977) * C139544) *
                          C139426 -
                      ((C31729 + C31730 + C31731 + C31732) * C139544 +
                       (C35975 * C139557 + C35150 * C30392 +
                        (C186 * C1053 + C139465 * C1543) * C30255 +
                        (C186 * C829 + C139465 * C939) * C30391) *
                           C13349) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C32866 + C32865 + C32864 + C32863) * C13349 +
                       (C34762 + C34763 + C34764 + C34765) * C139544) *
                          C139426 -
                      ((C30782 + C30783 + C30784 + C30785) * C139544 +
                       (C30781 + C30780 + C30779 + C30778) * C13349) *
                          C9304) *
                         C139529 +
                     (((C31732 + C31731 + C31730 + C31729) * C13349 +
                       (C33810 + C33811 + C33812 + C33813) * C139544) *
                          C9304 -
                      (((C186 * C6489 + C139465 * C6880) * C139557 +
                        (C186 * C6323 + C139465 * C6409) * C30392 +
                        C4955 * C30255 + C4294 * C30391) *
                           C139544 +
                       (C35977 + C35972 + C35971 + C35970) * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[40] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                        C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                           C139465 * C13349 +
                       (C30892 + C30893) * C139465 * C139544) *
                          C9304 -
                      ((C33004 + C33005) * C139465 * C139544 +
                       (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                        C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                           C139465 * C13349) *
                          C139426) *
                         C139529 +
                     (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                        C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                           C139465 * C13349 +
                       (C36122 + C36123) * C139465 * C139544) *
                          C139426 -
                      ((C31866 + C31867) * C139465 * C139544 +
                       (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                        C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                           C139465 * C13349) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C33005 + C33004) * C139465 * C13349 +
                       (C34874 + C34875) * C139465 * C139544) *
                          C139426 -
                      ((C30894 + C30895) * C139465 * C139544 +
                       (C30893 + C30892) * C139465 * C13349) *
                          C9304) *
                         C139529 +
                     (((C31867 + C31866) * C139465 * C13349 +
                       (C33922 + C33923) * C139465 * C139544) *
                          C9304 -
                      ((C30856 * C6323 + C36116 + C36116 + C139557 * C6957 +
                        C30855 * C4161 + C36117 + C36117 + C30255 * C5057) *
                           C139465 * C139544 +
                       (C36123 + C36122) * C139465 * C13349) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139562 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139563 +
           ((C32005 + C32004) * C30255 + (C43320 + C43321) * C139557) *
               C139465 * C12024) *
              C139529 +
          (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
               C139465 * C139563 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C139562 -
           ((C13355 * C26691 + C26698 + C26698 + C139544 * C26695 +
             C13353 * C26692 + C26699 + C26699 + C13349 * C26696) *
                C139557 +
            (C21001 + C21000) * C30255) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C13354 +
                       (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
                       C217 * C139544) *
                          C30255 +
                      (C32138 + C32139 + C32112 + C32113) * C139557) *
                         C139562 -
                     ((C32114 + C32115 + C32140 + C32141) * C139557 +
                      (C32113 + C32112 + C32139 + C32138) * C30255) *
                         C139563 +
                     ((C32141 + C32140 + C32115 + C32114) * C30255 +
                      (C43400 + C43401 + C43396 + C43397) * C139557) *
                         C12024) *
                        C139529 +
                    (((C35154 + C35155 + C35140 + C35141) * C30255 +
                      (C37810 + C37811 + C37806 + C37807) * C139557) *
                         C139563 -
                     ((C35141 + C35140 + C35155 + C35154) * C139557 +
                      (C972 * C139544 + C973 * C13356 +
                       (C186 * C837 + C139465 * C947) * C13349 +
                       (C186 * C829 + C139465 * C939) * C13354) *
                          C30255) *
                         C139562 -
                     (((C186 * C26693 + C139465 * C26769) * C139544 +
                       (C186 * C26691 + C139465 * C26767) * C13356 +
                       (C186 * C26694 + C139465 * C26770) * C13349 +
                       (C186 * C26692 + C139465 * C26768) * C13354) *
                          C139557 +
                      (C37807 + C37806 + C37811 + C37810) * C30255) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139562 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139563 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C13354 +
            (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
             C139557 * C10741) *
                C13349 +
            (C32260 + C32261) * C13356 + (C32262 + C32263) * C139544) *
               C139465 * C12024) *
              C139529 +
          (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
             C139557 * C6491) *
                C13354 +
            (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
             C139557 * C6494) *
                C13349 +
            (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
               C139465 * C139563 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C139562 -
           ((C30392 * C26693 + C139557 * C26839 + C30391 * C6327 +
             C30255 * C6493) *
                C139544 +
            (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
             C30255 * C6490) *
                C13356 +
            (C30392 * C26694 + C139557 * C26840 + C30391 * C6328 +
             C30255 * C6494) *
                C13349 +
            (C30392 * C26692 + C139557 * C26838 + C30391 * C6325 +
             C30255 * C6491) *
                C13354) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139562 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139563 +
           (((C32401 + C32400) * C186 + (C32399 + C32398) * C139465) * C30255 +
            ((C43548 + C43549) * C186 + (C43550 + C43551) * C139465) *
                C139557) *
               C12024) *
              C139529 +
          ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
            ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                C139557) *
               C139563 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C139562 -
           (((C13356 * C26767 + C139544 * C26907 + C13354 * C26768 +
              C13349 * C26908) *
                 C139465 +
             (C13356 * C26691 + C139544 * C26693 + C13354 * C26692 +
              C13349 * C26694) *
                 C186) *
                C139557 +
            ((C21327 + C21326) * C139465 + (C21325 + C21324) * C186) * C30255) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139562 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139563 +
           ((C32530 + C32511) * C30255 + (C43628 + C43622) * C139557) *
               C12024) *
              C139529 +
          (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) *
               C139563 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C139562 -
           (((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139544 +
             (C416 * C26692 + C38110 + C38110 + C139465 * C26976) * C13349) *
                C139557 +
            (C38108 + C38114) * C30255) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139562 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139563 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C13349 +
            ((C32260 + C32261) * C186 + (C32639 + C32640) * C139465) *
                C139544) *
               C12024) *
              C139529 +
          ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C13349 +
            ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                C139544) *
               C139563 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C139562 -
           (((C30392 * C26767 + C139557 * C27047 + C30391 * C6410 +
              C30255 * C6727) *
                 C139465 +
             (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
              C30255 * C6490) *
                 C186) *
                C139544 +
            ((C30392 * C26768 + C139557 * C27048 + C30391 * C6411 +
              C30255 * C6728) *
                 C139465 +
             (C30392 * C26692 + C139557 * C26838 + C30391 * C6325 +
              C30255 * C6491) *
                 C186) *
                C13349) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139562 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139563 +
           ((C32401 + C32400) * C30391 + (C32758 + C32757) * C30255 +
            (C43548 + C43549) * C30392 + (C43769 + C43770) * C139557) *
               C139465 * C12024) *
              C139529 +
          (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
            (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
               C139465 * C139563 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C139562 -
           ((C13356 * C26837 + C139544 * C27115 + C13354 * C26838 +
             C13349 * C27116) *
                C139557 +
            (C13356 * C26691 + C139544 * C26693 + C13354 * C26692 +
             C13349 * C26694) *
                C30392 +
            (C21640 + C21639) * C30255 + (C21325 + C21324) * C30391) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139562 -
                     ((C32863 + C32864 + C32865 + C32866) * C139544 +
                      (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                       C32132 * C30391) *
                          C13349) *
                         C139563 +
                     ((C32135 * C30391 + C32875 * C30255 + C43398 * C30392 +
                       C43841 * C139557) *
                          C13349 +
                      (C32869 + C32870 + C32871 + C32877) * C139544) *
                         C12024) *
                        C139529 +
                    (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
                       C38411 * C139557) *
                          C13349 +
                      (C35970 + C35971 + C35972 + C35977) * C139544) *
                         C139563 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      (C35975 * C139557 + C35150 * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C139562 -
                     (((C186 * C26837 + C139465 * C27183) * C139557 +
                       (C186 * C26691 + C139465 * C26767) * C30392 +
                       C35976 * C30255 + C35152 * C30391) *
                          C139544 +
                      ((C186 * C26838 + C139465 * C27184) * C139557 +
                       (C186 * C26692 + C139465 * C26768) * C30392 +
                       C38411 * C30255 + C37808 * C30391) *
                          C13349) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezz[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139562 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139563 +
                     ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
                       C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                          C139465 * C13349 +
                      (C33006 + C33007) * C139465 * C139544) *
                         C12024) *
                        C139529 +
                    (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                       C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                          C139465 * C13349 +
                      (C36122 + C36123) * C139465 * C139544) *
                         C139563 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C139562 -
                     ((C30856 * C26691 + C38510 + C38510 + C139557 * C27251 +
                       C30855 * C6324 + C38511 + C38511 + C30255 * C6958) *
                          C139465 * C139544 +
                      (C30856 * C26692 + C38512 + C38512 + C139557 * C27252 +
                       C30855 * C6325 + C38513 + C38513 + C30255 * C6959) *
                          C139465 * C13349) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C9304 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139426) *
              C822 +
          (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
               C139465 * C139426 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C9304) *
              C823 +
          (((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) *
               C139465 * C9304 -
           ((C13355 * C20983 + C20994 + C20994 + C139544 * C20987 +
             C13353 * C20984 + C20995 + C20995 + C13349 * C20988) *
                C139557 +
            (C24015 + C24014) * C30255) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C9304 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
               C139465 * C139426 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
             C13367 + C13367 + C139544 * C121) *
                C30255 +
            (C34032 + C34033) * C139557) *
               C139465 * C9304 -
           ((C13355 * C1767 + C34026 + C34026 + C139544 * C1783 +
             C13353 * C1765 + C34027 + C34027 + C13349 * C1781) *
                C139557 +
            (C34033 + C34032) * C30255) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
            C13359 + C13359 + C139544 * C119) *
               C30255 +
           (C32002 + C32003) * C139557) *
              C139465 * C10614 -
          ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) * C139465 *
              C10615 +
          ((C32005 + C32004) * C30255 + (C43320 + C43321) * C139557) * C139465 *
              C10616 -
          ((C13355 * C43303 + C43314 + C43314 + C139544 * C43307 +
            C13353 * C43304 + C43315 + C43315 + C13349 * C43308) *
               C139557 +
           (C43321 + C43320) * C30255) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C9304 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C139426) *
              C822 +
          (((C35154 + C35155 + C35140 + C35141) * C30255 +
            (C37810 + C37811 + C37806 + C37807) * C139557) *
               C139426 -
           ((C35141 + C35140 + C35155 + C35154) * C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C13354 +
             (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
             C975 * C139544) *
                C30255 +
            (C40770 + C40771 + C40766 + C40767) * C139557) *
               C9304 -
           (((C186 * C20985 + C139465 * C21101) * C139544 +
             (C186 * C20983 + C139465 * C21099) * C13356 +
             (C186 * C20986 + C139465 * C21102) * C13349 +
             (C186 * C20984 + C139465 * C21100) * C13354) *
                C139557 +
            (C40767 + C40766 + C40771 + C40770) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C9304 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C139426) *
              C139346 * C5151 +
          (((C32124 + C32125 + C32126 + C32127) * C30255 +
            (C32128 + C32129 + C32130 + C32131) * C139557) *
               C139426 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C9304) *
              C139346 * C5152 +
          (((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
                C30255 +
            (C34132 + C34133 + C34134 + C34135) * C139557) *
               C9304 -
           (((C186 * C1775 + C139465 * C1885) * C139544 +
             (C186 * C1767 + C139465 * C1877) * C13356 + C1910 * C13349 +
             C1909 * C13354) *
                C139557 +
            (C34135 + C34134 + C34133 + C34132) * C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C13354 +
            (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
            C217 * C139544) *
               C30255 +
           (C32138 + C32139 + C32112 + C32113) * C139557) *
              C10614 -
          ((C32114 + C32115 + C32140 + C32141) * C139557 +
           (C32113 + C32112 + C32139 + C32138) * C30255) *
              C10615 +
          ((C32141 + C32140 + C32115 + C32114) * C30255 +
           (C43400 + C43401 + C43396 + C43397) * C139557) *
              C10616 -
          (((C186 * C43305 + C139465 * C43389) * C139544 +
            (C186 * C43303 + C139465 * C43387) * C13356 +
            (C186 * C43306 + C139465 * C43390) * C13349 +
            (C186 * C43304 + C139465 * C43388) * C13354) *
               C139557 +
           (C43397 + C43396 + C43401 + C43400) * C30255) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C9304 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139426) *
              C822 +
          (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
             C139557 * C6491) *
                C13354 +
            (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
             C139557 * C6494) *
                C13349 +
            (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
               C139465 * C139426 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C9304) *
              C823 +
          (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C13354 +
            (C30391 * C838 + C30255 * C1062 + C30392 * C8595 +
             C139557 * C8761) *
                C13349 +
            (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
               C139465 * C9304 -
           ((C30392 * C20985 + C139557 * C21203 + C30391 * C8594 +
             C30255 * C8760) *
                C139544 +
            (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
             C30255 * C8757) *
                C13356 +
            (C30392 * C20986 + C139557 * C21204 + C30391 * C8595 +
             C30255 * C8761) *
                C13349 +
            (C30392 * C20984 + C139557 * C21202 + C30391 * C8592 +
             C30255 * C8758) *
                C13354) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C9304 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
            (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
               C139465 * C139426 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
            (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
               C139465 * C9304 -
           ((C30392 * C1775 + C139557 * C1999 + C30391 * C1774 +
             C30255 * C1998) *
                C139544 +
            (C30392 * C1767 + C139557 * C1991 + C30391 * C1766 +
             C30255 * C1990) *
                C13356 +
            (C34245 + C34244) * C13349 + (C34243 + C34242) * C13354) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C13354 +
           (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
               C13349 +
           (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
              C139465 * C10614 -
          ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
           (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
            C30255 * C1994) *
               C13349 +
           (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
            C30255 * C1986) *
               C13354) *
              C139465 * C10615 +
          ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
            C139557 * C10738) *
               C13354 +
           (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
            C139557 * C10741) *
               C13349 +
           (C32260 + C32261) * C13356 + (C32262 + C32263) * C139544) *
              C139465 * C10616 -
          ((C30392 * C43305 + C139557 * C43469 + C30391 * C10622 +
            C30255 * C10740) *
               C139544 +
           (C30392 * C43303 + C139557 * C43467 + C30391 * C10619 +
            C30255 * C10737) *
               C13356 +
           (C30392 * C43306 + C139557 * C43470 + C30391 * C10623 +
            C30255 * C10741) *
               C13349 +
           (C30392 * C43304 + C139557 * C43468 + C30391 * C10620 +
            C30255 * C10738) *
               C13354) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C9304 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139426) *
              C822 +
          ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
            ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                C139557) *
               C139426 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C9304) *
              C823 +
          ((((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
            ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) *
                C139557) *
               C9304 -
           (((C13356 * C21099 + C139544 * C21313 + C13354 * C21100 +
              C13349 * C21314) *
                 C139465 +
             (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
              C13349 * C20986) *
                 C186) *
                C139557 +
            ((C24341 + C24340) * C139465 + (C24339 + C24338) * C186) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C9304 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139426) *
              C139346 * C5151 +
          ((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
            ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                C139557) *
               C139426 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C9304) *
              C139346 * C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C186 +
             (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                 C139465) *
                C30255 +
            ((C34352 + C34353) * C186 + (C34354 + C34355) * C139465) *
                C139557) *
               C9304 -
           (((C13356 * C1877 + C139544 * C2105 + C13354 * C1875 +
              C13349 * C2103) *
                 C139465 +
             (C13356 * C1767 + C139544 * C1775 + C13354 * C1765 +
              C13349 * C1773) *
                 C186) *
                C139557 +
            ((C34355 + C34354) * C139465 + (C34353 + C34352) * C186) * C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C186 +
            (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                C139465) *
               C30255 +
           ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) * C139557) *
              C10614 -
          (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
           ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
              C10615 +
          (((C32401 + C32400) * C186 + (C32399 + C32398) * C139465) * C30255 +
           ((C43548 + C43549) * C186 + (C43550 + C43551) * C139465) * C139557) *
              C10616 -
          (((C13356 * C43387 + C139544 * C43537 + C13354 * C43388 +
             C13349 * C43538) *
                C139465 +
            (C13356 * C43303 + C139544 * C43305 + C13354 * C43304 +
             C13349 * C43306) *
                C186) *
               C139557 +
           ((C43551 + C43550) * C139465 + (C43549 + C43548) * C186) * C30255) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C9304 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139426) *
              C822 +
          (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) *
               C139426 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C9304) *
              C823 +
          ((((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
             C1282 * C139544) *
                C30255 +
            (C41074 + C41068) * C139557) *
               C9304 -
           (((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139544 +
             (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C13349) *
                C139557 +
            (C41068 + C41074) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C9304 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139426) *
              C139346 * C5151 +
          (((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
               C139426 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C9304) *
              C139346 * C5152 +
          (((C447 * C13349 + C448 * C139544) * C30255 +
            (C34454 + C34455) * C139557) *
               C9304 -
           (((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139544 +
             C2216 * C13349) *
                C139557 +
            (C34455 + C34454) * C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
            C446 * C139544) *
               C30255 +
           (C32529 + C32510) * C139557) *
              C10614 -
          ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) * C10615 +
          ((C32530 + C32511) * C30255 + (C43628 + C43622) * C139557) * C10616 -
          (((C416 * C43303 + C43623 + C43623 + C139465 * C43617) * C139544 +
            (C416 * C43304 + C43624 + C43624 + C139465 * C43618) * C13349) *
               C139557 +
           (C43622 + C43628) * C30255) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C9304 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139426) *
              C822 +
          ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C13349 +
            ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                C139544) *
               C139426 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C9304) *
              C823 +
          ((((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C13349 +
            ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) *
                C139544) *
               C9304 -
           (((C30392 * C21099 + C139557 * C21529 + C30391 * C8677 +
              C30255 * C8994) *
                 C139465 +
             (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
              C30255 * C8757) *
                 C186) *
                C139544 +
            ((C30392 * C21100 + C139557 * C21530 + C30391 * C8678 +
              C30255 * C8995) *
                 C139465 +
             (C30392 * C20984 + C139557 * C21202 + C30391 * C8592 +
              C30255 * C8758) *
                 C186) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C9304 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139426) *
              C139346 * C5151 +
          ((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
            ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                C139544) *
               C139426 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C9304) *
              C139346 * C5152 +
          ((((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
            ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) *
                C139544) *
               C9304 -
           (((C30392 * C1877 + C139557 * C2297 + C30391 * C1876 +
              C30255 * C2296) *
                 C139465 +
             (C30392 * C1767 + C139557 * C1991 + C30391 * C1766 +
              C30255 * C1990) *
                 C186) *
                C139544 +
            ((C34559 + C34558) * C139465 + (C34243 + C34242) * C186) * C13349) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C186 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C139465) *
               C13349 +
           ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) * C139544) *
              C10614 -
          (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
           ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C139465 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C186) *
               C13349) *
              C10615 +
          (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C186 +
            (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
             C139557 * C10903) *
                C139465) *
               C13349 +
           ((C32260 + C32261) * C186 + (C32639 + C32640) * C139465) * C139544) *
              C10616 -
          (((C30392 * C43387 + C139557 * C43694 + C30391 * C10681 +
             C30255 * C10902) *
                C139465 +
            (C30392 * C43303 + C139557 * C43467 + C30391 * C10619 +
             C30255 * C10737) *
                C186) *
               C139544 +
           ((C30392 * C43388 + C139557 * C43695 + C30391 * C10682 +
             C30255 * C10903) *
                C139465 +
            (C30392 * C43304 + C139557 * C43468 + C30391 * C10620 +
             C30255 * C10738) *
                C186) *
               C13349) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C9304 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139426) *
              C822 +
          (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
            (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
               C139465 * C139426 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C9304) *
              C823 +
          (((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
            (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
               C139465 * C9304 -
           ((C13356 * C21201 + C139544 * C21632 + C13354 * C21202 +
             C13349 * C21633) *
                C139557 +
            (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
             C13349 * C20986) *
                C30392 +
            (C24654 + C24653) * C30255 + (C24339 + C24338) * C30391) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C9304 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
            (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
               C139465 * C139426 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C30391 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C30255 +
            (C34352 + C34353) * C30392 + (C34662 + C34663) * C139557) *
               C139465 * C9304 -
           ((C13356 * C1991 + C139544 * C2399 + C13354 * C1989 +
             C13349 * C2397) *
                C139557 +
            (C13356 * C1767 + C139544 * C1775 + C13354 * C1765 +
             C13349 * C1773) *
                C30392 +
            (C34663 + C34662) * C30255 + (C34353 + C34352) * C30391) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
               C30391 +
           (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
               C30255 +
           (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
              C139465 * C10614 -
          ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
           (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
              C139465 * C10615 +
          ((C32401 + C32400) * C30391 + (C32758 + C32757) * C30255 +
           (C43548 + C43549) * C30392 + (C43769 + C43770) * C139557) *
              C139465 * C10616 -
          ((C13356 * C43467 + C139544 * C43762 + C13354 * C43468 +
            C13349 * C43763) *
               C139557 +
           (C13356 * C43303 + C139544 * C43305 + C13354 * C43304 +
            C13349 * C43306) *
               C30392 +
           (C43770 + C43769) * C30255 + (C43549 + C43548) * C30391) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C30391 +
             (C186 * C274 + C139465 * C633) * C30255 + C32132 * C30392 +
             C32874 * C139557) *
                C13349 +
            (C30778 + C30779 + C30780 + C30781) * C139544) *
               C9304 -
           ((C32863 + C32864 + C32865 + C32866) * C139544 +
            (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
             C32132 * C30391) *
                C13349) *
               C139426) *
              C822 +
          (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
             C38411 * C139557) *
                C13349 +
            (C35970 + C35971 + C35972 + C35977) * C139544) *
               C139426 -
           ((C31729 + C31730 + C31731 + C31732) * C139544 +
            (C35975 * C139557 + C35150 * C30392 +
             (C186 * C1053 + C139465 * C1543) * C30255 +
             (C186 * C829 + C139465 * C939) * C30391) *
                C13349) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C30391 +
             (C186 * C1054 + C139465 * C1544) * C30255 + C40768 * C30392 +
             C41371 * C139557) *
                C13349 +
            (C31733 + C31734 + C31735 + C31739) * C139544) *
               C9304 -
           (((C186 * C21201 + C139465 * C21738) * C139557 +
             (C186 * C20983 + C139465 * C21099) * C30392 + C31738 * C30255 +
             C31098 * C30391) *
                C139544 +
            ((C186 * C21202 + C139465 * C21739) * C139557 +
             (C186 * C20984 + C139465 * C21100) * C30392 + C41371 * C30255 +
             C40768 * C30391) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C186 * C106 + C139465 * C187) * C30391 +
                                 (C186 * C274 + C139465 * C633) * C30255 +
                                 C32132 * C30392 + C32874 * C139557) *
                                    C13349 +
                                (C30778 + C30779 + C30780 + C30781) * C139544) *
                                   C9304 -
                               ((C32863 + C32864 + C32865 + C32866) * C139544 +
                                (C32875 * C139557 + C32135 * C30392 +
                                 C32874 * C30255 + C32132 * C30391) *
                                    C13349) *
                                   C139426) *
                                  C139346 * C5151 +
                              (((C32866 + C32865 + C32864 + C32863) * C13349 +
                                (C34762 + C34763 + C34764 + C34765) * C139544) *
                                   C139426 -
                               ((C30782 + C30783 + C30784 + C30785) * C139544 +
                                (C30781 + C30780 + C30779 + C30778) * C13349) *
                                   C9304) *
                                  C139346 * C5152 +
                              (((C30785 + C30784 + C30783 + C30782) * C13349 +
                                (C30786 + C30787 + C30788 + C30789) * C139544) *
                                   C9304 -
                               (((C186 * C1991 + C139465 * C2481) * C139557 +
                                 (C186 * C1767 + C139465 * C1877) * C30392 +
                                 C3978 * C30255 + C3503 * C30391) *
                                    C139544 +
                                (C34765 + C34764 + C34763 + C34762) * C13349) *
                                   C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C30391 +
            (C186 * C274 + C139465 * C633) * C30255 + C32132 * C30392 +
            C32874 * C139557) *
               C13349 +
           (C30778 + C30779 + C30780 + C30781) * C139544) *
              C10614 -
          ((C32863 + C32864 + C32865 + C32866) * C139544 +
           (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
            C32132 * C30391) *
               C13349) *
              C10615 +
          ((C32135 * C30391 + C32875 * C30255 + C43398 * C30392 +
            C43841 * C139557) *
               C13349 +
           (C32869 + C32870 + C32871 + C32877) * C139544) *
              C10616 -
          (((C186 * C43467 + C139465 * C43836) * C139557 +
            (C186 * C43303 + C139465 * C43387) * C30392 + C32876 * C30255 +
            C32136 * C30391) *
               C139544 +
           ((C186 * C43468 + C139465 * C43837) * C139557 +
            (C186 * C43304 + C139465 * C43388) * C30392 + C43841 * C30255 +
            C43398 * C30391) *
               C13349) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] += (-std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C9304 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139426) *
                        C822 +
                    (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                       C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                          C139465 * C13349 +
                      (C36122 + C36123) * C139465 * C139544) *
                         C139426 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C9304) *
                        C823 +
                    (((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                       C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                          C139465 * C13349 +
                      (C31868 + C31869) * C139465 * C139544) *
                         C9304 -
                     ((C30856 * C20983 + C41470 + C41470 + C139557 * C21838 +
                       C30855 * C8591 + C41471 + C41471 + C30255 * C9225) *
                          C139465 * C139544 +
                      (C30856 * C20984 + C41472 + C41472 + C139557 * C21839 +
                       C30855 * C8592 + C41473 + C41473 + C30255 * C9226) *
                          C139465 * C13349) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C9304 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139426) *
                        C139346 * C5151 +
                    (((C33005 + C33004) * C139465 * C13349 +
                      (C34874 + C34875) * C139465 * C139544) *
                         C139426 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C9304) *
                        C139346 * C5152 +
                    (((C30895 + C30894) * C139465 * C13349 +
                      (C30896 + C30897) * C139465 * C139544) *
                         C9304 -
                     ((C30856 * C1767 + C34868 + C34868 + C139557 * C2583 +
                       C30855 * C1766 + C34869 + C34869 + C30255 * C2582) *
                          C139465 * C139544 +
                      (C34875 + C34874) * C139465 * C13349) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                      C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                         C139465 * C13349 +
                     (C30892 + C30893) * C139465 * C139544) *
                        C10614 -
                    ((C33004 + C33005) * C139465 * C139544 +
                     (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                      C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                         C139465 * C13349) *
                        C10615 +
                    ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
                      C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                         C139465 * C13349 +
                     (C33006 + C33007) * C139465 * C139544) *
                        C10616 -
                    ((C30856 * C43303 + C43910 + C43910 + C139557 * C43907 +
                      C30855 * C10619 + C43911 + C43911 + C30255 * C11061) *
                         C139465 * C139544 +
                     (C30856 * C43304 + C43912 + C43912 + C139557 * C43908 +
                      C30855 * C10620 + C43913 + C43913 + C30255 * C11062) *
                         C139465 * C13349) *
                        C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C139562 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139563 +
           ((C32005 + C32004) * C30255 + (C43320 + C43321) * C139557) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
               C139465 * C139563 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C139562 -
           ((C13355 * C10618 + C31984 + C31984 + C139544 * C10624 +
             C13353 * C10619 + C31985 + C31985 + C13349 * C10625) *
                C139557 +
            (C32009 + C32008) * C30255) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C139562 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C139563 +
           ((C32141 + C32140 + C32115 + C32114) * C30255 +
            (C43400 + C43401 + C43396 + C43397) * C139557) *
               C12024) *
              C139346 * C139521 +
          (((C32124 + C32125 + C32126 + C32127) * C30255 +
            (C32128 + C32129 + C32130 + C32131) * C139557) *
               C139563 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C139562 -
           (((C186 * C10621 + C139465 * C10683) * C139544 +
             (C186 * C10618 + C139465 * C10680) * C13356 + C32137 * C13349 +
             C32136 * C13354) *
                C139557 +
            (C32131 + C32130 + C32129 + C32128) * C30255) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C139562 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139563 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C13354 +
            (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
             C139557 * C10741) *
                C13349 +
            (C32260 + C32261) * C13356 + (C32262 + C32263) * C139544) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
            (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
               C139465 * C139563 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C139562 -
           ((C30392 * C10621 + C139557 * C10739 + C30391 * C1773 +
             C30255 * C1997) *
                C139544 +
            (C30392 * C10618 + C139557 * C10736 + C30391 * C1765 +
             C30255 * C1989) *
                C13356 +
            (C32263 + C32262) * C13349 + (C32261 + C32260) * C13354) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C139562 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139563 +
           (((C32401 + C32400) * C186 + (C32399 + C32398) * C139465) * C30255 +
            ((C43548 + C43549) * C186 + (C43550 + C43551) * C139465) *
                C139557) *
               C12024) *
              C139346 * C139521 +
          ((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
            ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                C139557) *
               C139563 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C139562 -
           (((C13356 * C10680 + C139544 * C10792 + C13354 * C10681 +
              C13349 * C10793) *
                 C139465 +
             (C13356 * C10618 + C139544 * C10621 + C13354 * C10619 +
              C13349 * C10622) *
                 C186) *
                C139557 +
            ((C32409 + C32408) * C139465 + (C32407 + C32406) * C186) * C30255) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C139562 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139563 +
           ((C32530 + C32511) * C30255 + (C43628 + C43622) * C139557) *
               C12024) *
              C139346 * C139521 +
          (((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
               C139563 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C139562 -
           (((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139544 +
             C32528 * C13349) *
                C139557 +
            (C32519 + C32518) * C30255) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C139562 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139563 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C13349 +
            ((C32260 + C32261) * C186 + (C32639 + C32640) * C139465) *
                C139544) *
               C12024) *
              C139346 * C139521 +
          ((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
            ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                C139544) *
               C139563 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C139562 -
           (((C30392 * C10680 + C139557 * C10901 + C30391 * C1875 +
              C30255 * C2295) *
                 C139465 +
             (C30392 * C10618 + C139557 * C10736 + C30391 * C1765 +
              C30255 * C1989) *
                 C186) *
                C139544 +
            ((C32640 + C32639) * C139465 + (C32261 + C32260) * C186) * C13349) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C139562 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139563 +
           ((C32401 + C32400) * C30391 + (C32758 + C32757) * C30255 +
            (C43548 + C43549) * C30392 + (C43769 + C43770) * C139557) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
            (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
               C139465 * C139563 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C139562 -
           ((C13356 * C10736 + C139544 * C10954 + C13354 * C10737 +
             C13349 * C10955) *
                C139557 +
            (C13356 * C10618 + C139544 * C10621 + C13354 * C10619 +
             C13349 * C10622) *
                C30392 +
            (C32762 + C32761) * C30255 + (C32407 + C32406) * C30391) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C139562 -
                     ((C32863 + C32864 + C32865 + C32866) * C139544 +
                      (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                       C32132 * C30391) *
                          C13349) *
                         C139563 +
                     ((C32135 * C30391 + C32875 * C30255 + C43398 * C30392 +
                       C43841 * C139557) *
                          C13349 +
                      (C32869 + C32870 + C32871 + C32877) * C139544) *
                         C12024) *
                        C139346 * C139521 +
                    (((C32866 + C32865 + C32864 + C32863) * C13349 +
                      (C34762 + C34763 + C34764 + C34765) * C139544) *
                         C139563 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C139562 -
                     (((C186 * C10736 + C139465 * C11007) * C139557 +
                       (C186 * C10618 + C139465 * C10680) * C30392 +
                       C2498 * C30255 + C1909 * C30391) *
                          C139544 +
                      (C32877 + C32871 + C32870 + C32869) * C13349) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C139562 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139563 +
                     ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
                       C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                          C139465 * C13349 +
                      (C33006 + C33007) * C139465 * C139544) *
                         C12024) *
                        C139346 * C139521 +
                    (((C33005 + C33004) * C139465 * C13349 +
                      (C34874 + C34875) * C139465 * C139544) *
                         C139563 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C139562 -
                     ((C30856 * C10618 + C32994 + C32994 + C139557 * C11060 +
                       C30855 * C1765 + C32995 + C32995 + C30255 * C2581) *
                          C139465 * C139544 +
                      (C33007 + C33006) * C139465 * C13349) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C9304 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C32006 + C32007) * C30255 + (C32008 + C32009) * C139557) *
               C139465 * C139426 -
           ((C32007 + C32006) * C139557 +
            (C13355 * C108 + C13364 + C13364 + C139544 * C120 + C13353 * C107 +
             C13365 + C13365 + C13349 * C119) *
                C30255) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C13353 * C108 + C13366 + C13366 + C13349 * C120 + C13355 * C109 +
             C13367 + C13367 + C139544 * C121) *
                C30255 +
            (C34032 + C34033) * C139557) *
               C139465 * C9304 -
           ((C13355 * C1767 + C34026 + C34026 + C139544 * C1783 +
             C13353 * C1765 + C34027 + C34027 + C13349 * C1781) *
                C139557 +
            (C34033 + C34032) * C30255) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13353 * C106 + C13358 + C13358 + C13349 * C118 + C13355 * C107 +
             C13359 + C13359 + C139544 * C119) *
                C30255 +
            (C32002 + C32003) * C139557) *
               C139465 * C9304 -
           ((C32004 + C32005) * C139557 + (C32003 + C32002) * C30255) *
               C139465 * C139426) *
              C822 +
          (((C18175 + C18174) * C30255 + (C21000 + C21001) * C139557) *
               C139465 * C139426 -
           ((C18174 + C18175) * C139557 + (C14157 + C14156) * C30255) *
               C139465 * C9304) *
              C823 +
          (((C14159 + C14158) * C30255 + (C24014 + C24015) * C139557) *
               C139465 * C9304 -
           ((C13355 * C20983 + C20994 + C20994 + C139544 * C20987 +
             C13353 * C20984 + C20995 + C20995 + C13349 * C20988) *
                C139557 +
            (C24015 + C24014) * C30255) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C9304 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C139426) *
              C139346 * C5151 +
          (((C32124 + C32125 + C32126 + C32127) * C30255 +
            (C32128 + C32129 + C32130 + C32131) * C139557) *
               C139426 -
           ((C32127 + C32126 + C32125 + C32124) * C139557 +
            (C219 * C139544 + C218 * C13356 + C217 * C13349 + C216 * C13354) *
                C30255) *
               C9304) *
              C139346 * C5152 +
          (((C218 * C13354 + C219 * C13349 + C221 * C13356 + C220 * C139544) *
                C30255 +
            (C34132 + C34133 + C34134 + C34135) * C139557) *
               C9304 -
           (((C186 * C1775 + C139465 * C1885) * C139544 +
             (C186 * C1767 + C139465 * C1877) * C13356 + C1910 * C13349 +
             C1909 * C13354) *
                C139557 +
            (C34135 + C34134 + C34133 + C34132) * C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C13354 +
             (C186 * C112 + C139465 * C193) * C13349 + C216 * C13356 +
             C217 * C139544) *
                C30255 +
            (C32138 + C32139 + C32112 + C32113) * C139557) *
               C9304 -
           ((C32114 + C32115 + C32140 + C32141) * C139557 +
            (C32113 + C32112 + C32139 + C32138) * C30255) *
               C139426) *
              C822 +
          (((C35154 + C35155 + C35140 + C35141) * C30255 +
            (C37810 + C37811 + C37806 + C37807) * C139557) *
               C139426 -
           ((C35141 + C35140 + C35155 + C35154) * C139557 +
            (C972 * C139544 + C973 * C13356 +
             (C186 * C837 + C139465 * C947) * C13349 +
             (C186 * C829 + C139465 * C939) * C13354) *
                C30255) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C13354 +
             (C186 * C838 + C139465 * C948) * C13349 + C974 * C13356 +
             C975 * C139544) *
                C30255 +
            (C40770 + C40771 + C40766 + C40767) * C139557) *
               C9304 -
           (((C186 * C20985 + C139465 * C21101) * C139544 +
             (C186 * C20983 + C139465 * C21099) * C13356 +
             (C186 * C20986 + C139465 * C21102) * C13349 +
             (C186 * C20984 + C139465 * C21100) * C13354) *
                C139557 +
            (C40767 + C40766 + C40771 + C40770) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C9304 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C32259 + C32258) * C13354 + (C32257 + C32256) * C13349 +
            (C34242 + C34243) * C13356 + (C34244 + C34245) * C139544) *
               C139465 * C139426 -
           ((C30422 + C30423) * C139544 + (C30424 + C30425) * C13356 +
            (C30421 + C30420) * C13349 + (C30419 + C30418) * C13354) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C30425 + C30424) * C13354 + (C30423 + C30422) * C13349 +
            (C30426 + C30427) * C13356 + (C30428 + C30429) * C139544) *
               C139465 * C9304 -
           ((C30392 * C1775 + C139557 * C1999 + C30391 * C1774 +
             C30255 * C1998) *
                C139544 +
            (C30392 * C1767 + C139557 * C1991 + C30391 * C1766 +
             C30255 * C1990) *
                C13356 +
            (C34245 + C34244) * C13349 + (C34243 + C34242) * C13354) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C13354 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C13349 +
            (C30418 + C30419) * C13356 + (C30420 + C30421) * C139544) *
               C139465 * C9304 -
           ((C32256 + C32257) * C139544 + (C32258 + C32259) * C13356 +
            (C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C13349 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C13354) *
               C139465 * C139426) *
              C822 +
          (((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
             C139557 * C6491) *
                C13354 +
            (C30391 * C4163 + C30255 * C4397 + C30392 * C6328 +
             C139557 * C6494) *
                C13349 +
            (C35294 + C35295) * C13356 + (C35296 + C35297) * C139544) *
               C139465 * C139426 -
           ((C31214 + C31215) * C139544 + (C31216 + C31217) * C13356 +
            (C30392 * C4163 + C139557 * C4397 + C30391 * C837 +
             C30255 * C1061) *
                C13349 +
            (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
             C30255 * C1053) *
                C13354) *
               C139465 * C9304) *
              C823 +
          (((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
             C139557 * C8758) *
                C13354 +
            (C30391 * C838 + C30255 * C1062 + C30392 * C8595 +
             C139557 * C8761) *
                C13349 +
            (C31218 + C31219) * C13356 + (C31220 + C31221) * C139544) *
               C139465 * C9304 -
           ((C30392 * C20985 + C139557 * C21203 + C30391 * C8594 +
             C30255 * C8760) *
                C139544 +
            (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
             C30255 * C8757) *
                C13356 +
            (C30392 * C20986 + C139557 * C21204 + C30391 * C8595 +
             C30255 * C8761) *
                C13349 +
            (C30392 * C20984 + C139557 * C21202 + C30391 * C8592 +
             C30255 * C8758) *
                C13354) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C9304 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139426) *
              C139346 * C5151 +
          ((((C32402 + C32403) * C186 + (C32404 + C32405) * C139465) * C30255 +
            ((C32406 + C32407) * C186 + (C32408 + C32409) * C139465) *
                C139557) *
               C139426 -
           (((C32405 + C32404) * C139465 + (C32403 + C32402) * C186) * C139557 +
            ((C13356 * C189 + C139544 * C362 + C13354 * C188 + C13349 * C361) *
                 C139465 +
             (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                 C186) *
                C30255) *
               C9304) *
              C139346 * C5152 +
          ((((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                 C186 +
             (C13354 * C189 + C13349 * C362 + C13356 * C190 + C139544 * C363) *
                 C139465) *
                C30255 +
            ((C34352 + C34353) * C186 + (C34354 + C34355) * C139465) *
                C139557) *
               C9304 -
           (((C13356 * C1877 + C139544 * C2105 + C13354 * C1875 +
              C13349 * C2103) *
                 C139465 +
             (C13356 * C1767 + C139544 * C1775 + C13354 * C1765 +
              C13349 * C1773) *
                 C186) *
                C139557 +
            ((C34355 + C34354) * C139465 + (C34353 + C34352) * C186) * C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                 C186 +
             (C13354 * C187 + C13349 * C360 + C13356 * C188 + C139544 * C361) *
                 C139465) *
                C30255 +
            ((C32394 + C32395) * C186 + (C32396 + C32397) * C139465) *
                C139557) *
               C9304 -
           (((C32398 + C32399) * C139465 + (C32400 + C32401) * C186) * C139557 +
            ((C32397 + C32396) * C139465 + (C32395 + C32394) * C186) * C30255) *
               C139426) *
              C822 +
          ((((C18619 + C18618) * C186 + (C18617 + C18616) * C139465) * C30255 +
            ((C21324 + C21325) * C186 + (C21326 + C21327) * C139465) *
                C139557) *
               C139426 -
           (((C18616 + C18617) * C139465 + (C18618 + C18619) * C186) * C139557 +
            ((C14551 + C14550) * C139465 + (C14549 + C14548) * C186) * C30255) *
               C9304) *
              C823 +
          ((((C14555 + C14554) * C186 + (C14553 + C14552) * C139465) * C30255 +
            ((C24338 + C24339) * C186 + (C24340 + C24341) * C139465) *
                C139557) *
               C9304 -
           (((C13356 * C21099 + C139544 * C21313 + C13354 * C21100 +
              C13349 * C21314) *
                 C139465 +
             (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
              C13349 * C20986) *
                 C186) *
                C139557 +
            ((C24341 + C24340) * C139465 + (C24339 + C24338) * C186) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C9304 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139426) *
              C139346 * C5151 +
          (((C32516 + C32517) * C30255 + (C32518 + C32519) * C139557) *
               C139426 -
           ((C32517 + C32516) * C139557 +
            (C447 * C139544 + C446 * C13349) * C30255) *
               C9304) *
              C139346 * C5152 +
          (((C447 * C13349 + C448 * C139544) * C30255 +
            (C34454 + C34455) * C139557) *
               C9304 -
           (((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139544 +
             C2216 * C13349) *
                C139557 +
            (C34455 + C34454) * C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C13349 +
             C446 * C139544) *
                C30255 +
            (C32529 + C32510) * C139557) *
               C9304 -
           ((C32511 + C32530) * C139557 + (C32510 + C32529) * C30255) *
               C139426) *
              C822 +
          (((C35571 + C35560) * C30255 + (C38114 + C38108) * C139557) *
               C139426 -
           ((C35560 + C35571) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C13349) *
                C30255) *
               C9304) *
              C823 +
          ((((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C13349 +
             C1282 * C139544) *
                C30255 +
            (C41074 + C41068) * C139557) *
               C9304 -
           (((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139544 +
             (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C13349) *
                C139557 +
            (C41068 + C41074) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C9304 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139426) *
              C139346 * C5151 +
          ((((C32259 + C32258) * C186 + (C32638 + C32637) * C139465) * C13349 +
            ((C34242 + C34243) * C186 + (C34558 + C34559) * C139465) *
                C139544) *
               C139426 -
           (((C30642 + C30643) * C139465 + (C30424 + C30425) * C186) * C139544 +
            ((C30641 + C30640) * C139465 + (C30419 + C30418) * C186) * C13349) *
               C9304) *
              C139346 * C5152 +
          ((((C30425 + C30424) * C186 + (C30643 + C30642) * C139465) * C13349 +
            ((C30426 + C30427) * C186 + (C30644 + C30645) * C139465) *
                C139544) *
               C9304 -
           (((C30392 * C1877 + C139557 * C2297 + C30391 * C1876 +
              C30255 * C2296) *
                 C139465 +
             (C30392 * C1767 + C139557 * C1991 + C30391 * C1766 +
              C30255 * C1990) *
                 C186) *
                C139544 +
            ((C34559 + C34558) * C139465 + (C34243 + C34242) * C186) * C13349) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C13349 +
            ((C30418 + C30419) * C186 + (C30640 + C30641) * C139465) *
                C139544) *
               C9304 -
           (((C32637 + C32638) * C139465 + (C32258 + C32259) * C186) * C139544 +
            ((C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C139465 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C186) *
                C13349) *
               C139426) *
              C822 +
          ((((C30391 * C4159 + C30255 * C4393 + C30392 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C30391 * C4275 + C30255 * C4729 + C30392 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C13349 +
            ((C35294 + C35295) * C186 + (C35706 + C35707) * C139465) *
                C139544) *
               C139426 -
           (((C31529 + C31530) * C139465 + (C31216 + C31217) * C186) * C139544 +
            ((C30392 * C4275 + C139557 * C4729 + C30391 * C939 +
              C30255 * C1359) *
                 C139465 +
             (C30392 * C4159 + C139557 * C4393 + C30391 * C829 +
              C30255 * C1053) *
                 C186) *
                C13349) *
               C9304) *
              C823 +
          ((((C30391 * C830 + C30255 * C1054 + C30392 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C30391 * C940 + C30255 * C1360 + C30392 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C13349 +
            ((C31218 + C31219) * C186 + (C31531 + C31532) * C139465) *
                C139544) *
               C9304 -
           (((C30392 * C21099 + C139557 * C21529 + C30391 * C8677 +
              C30255 * C8994) *
                 C139465 +
             (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
              C30255 * C8757) *
                 C186) *
                C139544 +
            ((C30392 * C21100 + C139557 * C21530 + C30391 * C8678 +
              C30255 * C8995) *
                 C139465 +
             (C30392 * C20984 + C139557 * C21202 + C30391 * C8592 +
              C30255 * C8758) *
                 C186) *
                C13349) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C9304 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C32402 + C32403) * C30391 + (C32759 + C32760) * C30255 +
            (C32406 + C32407) * C30392 + (C32761 + C32762) * C139557) *
               C139465 * C139426 -
           ((C32760 + C32759) * C139557 + (C32403 + C32402) * C30392 +
            (C13356 * C276 + C139544 * C579 + C13354 * C275 + C13349 * C578) *
                C30255 +
            (C13356 * C108 + C139544 * C114 + C13354 * C107 + C13349 * C113) *
                C30391) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C13354 * C108 + C13349 * C114 + C13356 * C109 + C139544 * C115) *
                C30391 +
            (C13354 * C276 + C13349 * C579 + C13356 * C277 + C139544 * C580) *
                C30255 +
            (C34352 + C34353) * C30392 + (C34662 + C34663) * C139557) *
               C139465 * C9304 -
           ((C13356 * C1991 + C139544 * C2399 + C13354 * C1989 +
             C13349 * C2397) *
                C139557 +
            (C13356 * C1767 + C139544 * C1775 + C13354 * C1765 +
             C13349 * C1773) *
                C30392 +
            (C34663 + C34662) * C30255 + (C34353 + C34352) * C30391) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13354 * C106 + C13349 * C112 + C13356 * C107 + C139544 * C113) *
                C30391 +
            (C13354 * C274 + C13349 * C577 + C13356 * C275 + C139544 * C578) *
                C30255 +
            (C32394 + C32395) * C30392 + (C32755 + C32756) * C139557) *
               C139465 * C9304 -
           ((C32757 + C32758) * C139557 + (C32400 + C32401) * C30392 +
            (C32756 + C32755) * C30255 + (C32395 + C32394) * C30391) *
               C139465 * C139426) *
              C822 +
          (((C18619 + C18618) * C30391 + (C19049 + C19048) * C30255 +
            (C21324 + C21325) * C30392 + (C21639 + C21640) * C139557) *
               C139465 * C139426 -
           ((C19048 + C19049) * C139557 + (C18618 + C18619) * C30392 +
            (C14924 + C14923) * C30255 + (C14549 + C14548) * C30391) *
               C139465 * C9304) *
              C823 +
          (((C14555 + C14554) * C30391 + (C14926 + C14925) * C30255 +
            (C24338 + C24339) * C30392 + (C24653 + C24654) * C139557) *
               C139465 * C9304 -
           ((C13356 * C21201 + C139544 * C21632 + C13354 * C21202 +
             C13349 * C21633) *
                C139557 +
            (C13356 * C20983 + C139544 * C20985 + C13354 * C20984 +
             C13349 * C20986) *
                C30392 +
            (C24654 + C24653) * C30255 + (C24339 + C24338) * C30391) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C9304 -
                     ((C32863 + C32864 + C32865 + C32866) * C139544 +
                      (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                       C32132 * C30391) *
                          C13349) *
                         C139426) *
                        C139346 * C5151 +
                    (((C32866 + C32865 + C32864 + C32863) * C13349 +
                      (C34762 + C34763 + C34764 + C34765) * C139544) *
                         C139426 -
                     ((C30782 + C30783 + C30784 + C30785) * C139544 +
                      (C30781 + C30780 + C30779 + C30778) * C13349) *
                         C9304) *
                        C139346 * C5152 +
                    (((C30785 + C30784 + C30783 + C30782) * C13349 +
                      (C30786 + C30787 + C30788 + C30789) * C139544) *
                         C9304 -
                     (((C186 * C1991 + C139465 * C2481) * C139557 +
                       (C186 * C1767 + C139465 * C1877) * C30392 +
                       C3978 * C30255 + C3503 * C30391) *
                          C139544 +
                      (C34765 + C34764 + C34763 + C34762) * C13349) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C30391 +
                       (C186 * C274 + C139465 * C633) * C30255 +
                       C32132 * C30392 + C32874 * C139557) *
                          C13349 +
                      (C30778 + C30779 + C30780 + C30781) * C139544) *
                         C9304 -
                     ((C32863 + C32864 + C32865 + C32866) * C139544 +
                      (C32875 * C139557 + C32135 * C30392 + C32874 * C30255 +
                       C32132 * C30391) *
                          C13349) *
                         C139426) *
                        C822 +
                    (((C35150 * C30391 + C35975 * C30255 + C37808 * C30392 +
                       C38411 * C139557) *
                          C13349 +
                      (C35970 + C35971 + C35972 + C35977) * C139544) *
                         C139426 -
                     ((C31729 + C31730 + C31731 + C31732) * C139544 +
                      (C35975 * C139557 + C35150 * C30392 +
                       (C186 * C1053 + C139465 * C1543) * C30255 +
                       (C186 * C829 + C139465 * C939) * C30391) *
                          C13349) *
                         C9304) *
                        C823 +
                    ((((C186 * C830 + C139465 * C940) * C30391 +
                       (C186 * C1054 + C139465 * C1544) * C30255 +
                       C40768 * C30392 + C41371 * C139557) *
                          C13349 +
                      (C31733 + C31734 + C31735 + C31739) * C139544) *
                         C9304 -
                     (((C186 * C21201 + C139465 * C21738) * C139557 +
                       (C186 * C20983 + C139465 * C21099) * C30392 +
                       C31738 * C30255 + C31098 * C30391) *
                          C139544 +
                      ((C186 * C21202 + C139465 * C21739) * C139557 +
                       (C186 * C20984 + C139465 * C21100) * C30392 +
                       C41371 * C30255 + C40768 * C30391) *
                          C13349) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C9304 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139426) *
                        C139346 * C5151 +
                    (((C33005 + C33004) * C139465 * C13349 +
                      (C34874 + C34875) * C139465 * C139544) *
                         C139426 -
                     ((C30894 + C30895) * C139465 * C139544 +
                      (C30893 + C30892) * C139465 * C13349) *
                         C9304) *
                        C139346 * C5152 +
                    (((C30895 + C30894) * C139465 * C13349 +
                      (C30896 + C30897) * C139465 * C139544) *
                         C9304 -
                     ((C30856 * C1767 + C34868 + C34868 + C139557 * C2583 +
                       C30855 * C1766 + C34869 + C34869 + C30255 * C2582) *
                          C139465 * C139544 +
                      (C34875 + C34874) * C139465 * C13349) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 +
                       C30856 * C1762 + C30859 + C30859 + C139557 * C2578) *
                          C139465 * C13349 +
                      (C30892 + C30893) * C139465 * C139544) *
                         C9304 -
                     ((C33004 + C33005) * C139465 * C139544 +
                      (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
                       C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                          C139465 * C13349) *
                         C139426) *
                        C822 +
                    (((C30855 * C4159 + C36108 + C36108 + C30255 * C5055 +
                       C30856 * C6325 + C36109 + C36109 + C139557 * C6959) *
                          C139465 * C13349 +
                      (C36122 + C36123) * C139465 * C139544) *
                         C139426 -
                     ((C31866 + C31867) * C139465 * C139544 +
                      (C30856 * C4159 + C31844 + C31844 + C139557 * C5055 +
                       C30855 * C829 + C31845 + C31845 + C30255 * C1645) *
                          C139465 * C13349) *
                         C9304) *
                        C823 +
                    (((C30855 * C830 + C31846 + C31846 + C30255 * C1646 +
                       C30856 * C8592 + C31847 + C31847 + C139557 * C9226) *
                          C139465 * C13349 +
                      (C31868 + C31869) * C139465 * C139544) *
                         C9304 -
                     ((C30856 * C20983 + C41470 + C41470 + C139557 * C21838 +
                       C30855 * C8591 + C41471 + C41471 + C30255 * C9225) *
                          C139465 * C139544 +
                      (C30856 * C20984 + C41472 + C41472 + C139557 * C21839 +
                       C30855 * C8592 + C41473 + C41473 + C30255 * C9226) *
                          C139465 * C13349) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexx[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139362 * C139529 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139362 * C139398) *
                        C139558 +
                    (((C47724 + C47725) * C139480 * C46915 +
                      (C47726 + C47727) * C139480 * C139555) *
                         C139362 * C139398 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139362 * C139529) *
                        C139559 +
                    (((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                       C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                          C139480 * C46915 +
                      (C49766 + C49767) * C139480 * C139555) *
                         C139362 * C139529 -
                     ((C46919 * C834 + C49760 + C49760 + C139544 * C850 +
                       C46917 * C832 + C49761 + C49761 + C46913 * C848) *
                          C139480 * C139555 +
                      (C49767 + C49766) * C139480 * C46915) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139362 * C139529 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139362 * C139398) *
              C139558 +
          (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
            (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
               C139480 * C139362 * C139398 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
            (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
               C139480 * C139362 * C139529 -
           ((C47004 * C842 + C139555 * C952 + C47003 * C841 + C46915 * C951) *
                C139544 +
            (C47004 * C834 + C139555 * C944 + C47003 * C833 + C46915 * C943) *
                C46920 +
            (C49877 + C49876) * C46913 + (C49875 + C49874) * C46918) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139362 * C139529 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C139362 * C139398) *
              C139558 +
          (((C47956 + C47957 + C47958 + C47959) * C46915 +
            (C47960 + C47961 + C47962 + C47963) * C139555) *
               C139362 * C139398 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139362 * C139529) *
              C139559 +
          (((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
                C46915 +
            (C49976 + C49977 + C49978 + C49979) * C139555) *
               C139362 * C139529 -
           (((C273 * C842 + C139480 * C1066) * C139544 +
             (C273 * C834 + C139480 * C1058) * C46920 + C1091 * C46913 +
             C1090 * C46918) *
                C139555 +
            (C49979 + C49978 + C49977 + C49976) * C46915) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139362 * C139529 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139362 * C139398) *
              C139558 +
          (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
            (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
               C139480 * C139362 * C139398 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C47003 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C46915 +
            (C50086 + C50087) * C47004 + (C50088 + C50089) * C139555) *
               C139480 * C139362 * C139529 -
           ((C46920 * C944 + C139544 * C1172 + C46918 * C942 + C46913 * C1170) *
                C139555 +
            (C46920 * C834 + C139544 * C842 + C46918 * C832 + C46913 * C840) *
                C47004 +
            (C50089 + C50088) * C46915 + (C50087 + C50086) * C47003) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139362 * C139529 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C139362 * C139398) *
              C139558 +
          (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
               C139480 * C139362 * C139398 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) *
               C139480 * C139362 * C139529 -
           ((C47240 * C834 + C50192 + C50192 + C139555 * C1254 + C47239 * C833 +
             C50193 + C50193 + C46915 * C1253) *
                C139544 +
            (C50199 + C50198) * C46913) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139362 * C139529 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C139362 * C139398) *
                        C139558 +
                    (((C48341 + C48340 + C48339 + C48338) * C46913 +
                      (C50298 + C50299 + C50300 + C50301) * C139544) *
                         C139362 * C139398 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C139362 * C139529) *
                        C139559 +
                    (((C47355 + C47354 + C47353 + C47352) * C46913 +
                      (C47356 + C47357 + C47358 + C47359) * C139544) *
                         C139362 * C139529 -
                     (((C273 * C944 + C139480 * C1364) * C139555 +
                       (C273 * C834 + C139480 * C1058) * C47004 +
                       C3101 * C46915 + C2864 * C47003) *
                          C139544 +
                      (C50301 + C50300 + C50299 + C50298) * C46913) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139362 * C139529 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139362 * C139398) *
              C139558 +
          ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
            ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                C139555) *
               C139362 * C139398 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139362 * C139529) *
              C139559 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C273 +
             (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                 C139480) *
                C46915 +
            ((C50086 + C50087) * C273 + (C50404 + C50405) * C139480) *
                C139555) *
               C139362 * C139529 -
           (((C46920 * C1058 + C139544 * C1466 + C46918 * C1056 +
              C46913 * C1464) *
                 C139480 +
             (C46920 * C834 + C139544 * C842 + C46918 * C832 + C46913 * C840) *
                 C273) *
                C139555 +
            ((C50405 + C50404) * C139480 + (C50087 + C50086) * C273) * C46915) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139362 * C139529 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139362 * C139398) *
              C139558 +
          ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
            ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                C139544) *
               C139362 * C139398 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139362 * C139529) *
              C139559 +
          ((((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
            ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) *
                C139544) *
               C139362 * C139529 -
           (((C47004 * C1058 + C139555 * C1548 + C47003 * C1057 +
              C46915 * C1547) *
                 C139480 +
             (C47004 * C834 + C139555 * C944 + C47003 * C833 + C46915 * C943) *
                 C273) *
                C139544 +
            ((C50509 + C50508) * C139480 + (C49875 + C49874) * C273) * C46913) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139362 * C139529 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139362 * C139398) *
              C139558 +
          (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) *
               C139362 * C139398 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139362 * C139529) *
              C139559 +
          (((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) *
               C139362 * C139529 -
           (((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139555 +
             C3339 * C46915) *
                C139544 +
            (C50609 + C50608) * C46913) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                        C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                           C139480 * C46915 +
                       (C47720 + C47721) * C139480 * C139555) *
                          C139530 -
                      ((C51682 + C51683) * C139480 * C139555 +
                       (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                        C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                           C139480 * C46915) *
                          C139426) *
                         C139529 +
                     (((C51683 + C51682) * C139480 * C46915 +
                       (C46917 * C8592 + C51666 + C51666 + C46913 * C8598 +
                        C46919 * C8591 + C51667 + C51667 + C139544 * C8597) *
                           C139480 * C139555) *
                          C139426 -
                      ((C47722 + C47723) * C139480 * C139555 +
                       (C47721 + C47720) * C139480 * C46915) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                        C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                           C139480 * C46915 +
                       (C51684 + C51685) * C139480 * C139555) *
                          C139426 -
                      ((C47725 + C47724) * C139480 * C139555 +
                       (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                        C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                           C139480 * C46915) *
                          C139530) *
                         C139529 +
                     (((C47724 + C47725) * C139480 * C46915 +
                       (C47726 + C47727) * C139480 * C139555) *
                          C139530 -
                      ((C46919 * C8590 + C51672 + C51672 + C139544 * C8596 +
                        C46917 * C8591 + C51673 + C51673 + C46913 * C8597) *
                           C139480 * C139555 +
                       (C51685 + C51684) * C139480 * C46915) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C46918 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C46913 +
             (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
                C139480 * C139530 -
            ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
             (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
              C46915 * C1880) *
                 C46913 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C46918) *
                C139480 * C139426) *
               C139529 +
           (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C46918 +
             (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
              C139555 * C8681) *
                 C46913 +
             (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
                C139480 * C139426 -
            ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
             (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C46913 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C46918) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
             (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
                C139480 * C139426 -
            ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
             (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
                C139480 * C139530) *
               C139529 +
           (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
             (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
                C139480 * C139530 -
            ((C47004 * C8593 + C139555 * C8679 + C47003 * C4165 +
              C46915 * C4281) *
                 C139544 +
             (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
              C46915 * C4277) *
                 C46920 +
             (C51827 + C51826) * C46913 + (C51825 + C51824) * C46918) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C46918 +
              (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
              C304 * C139544) *
                 C46915 +
             (C47948 + C47949 + C47950 + C47951) * C139555) *
                C139530 -
            ((C51958 + C51959 + C51960 + C51961) * C139555 +
             (C2019 * C139544 + C2020 * C46920 +
              (C273 * C1770 + C139480 * C1994) * C46913 +
              (C273 * C1762 + C139480 * C1986) * C46918) *
                 C46915) *
                C139426) *
               C139529 +
           (((C51961 + C51960 + C51959 + C51958) * C46915 +
             (C24226 * C46918 + C24227 * C46913 + C18466 * C46920 +
              C18467 * C139544) *
                 C139555) *
                C139426 -
            ((C47952 + C47953 + C47954 + C47955) * C139555 +
             (C47951 + C47950 + C47949 + C47948) * C46915) *
                C139530) *
               C139398) *
              C825 +
          ((((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
              C2017 * C139544) *
                 C46915 +
             (C51962 + C51963 + C51964 + C51965) * C139555) *
                C139426 -
            ((C47959 + C47958 + C47957 + C47956) * C139555 +
             (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                 C46915) *
                C139530) *
               C139529 +
           (((C47956 + C47957 + C47958 + C47959) * C46915 +
             (C47960 + C47961 + C47962 + C47963) * C139555) *
                C139530 -
            (((C273 * C8593 + C139480 * C8759) * C139544 +
              (C273 * C8590 + C139480 * C8756) * C46920 + C18467 * C46913 +
              C18466 * C46918) *
                 C139555 +
             (C51965 + C51964 + C51963 + C51962) * C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C47003 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C46915 +
             (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
                C139480 * C139530 -
            ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
             (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
              C46913 * C2100) *
                 C46915 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C47003) *
                C139480 * C139426) *
               C139529 +
           (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
             (C46918 * C8592 + C46913 * C8595 + C46920 * C8591 +
              C139544 * C8594) *
                 C47004 +
             (C46918 * C8678 + C46913 * C8838 + C46920 * C8677 +
              C139544 * C8837) *
                 C139555) *
                C139480 * C139426 -
            ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
             (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C47003 +
             (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
              C139544 * C2098) *
                 C46915 +
             (C52116 + C52117) * C47004 + (C52118 + C52119) * C139555) *
                C139480 * C139426 -
            ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
             (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C46915 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C47003) *
                C139480 * C139530) *
               C139529 +
           (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
             (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
                C139480 * C139530 -
            ((C46920 * C8676 + C139544 * C8836 + C46918 * C8677 +
              C46913 * C8837) *
                 C139555 +
             (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
              C46913 * C8594) *
                 C47004 +
             (C52119 + C52118) * C46915 + (C52117 + C52116) * C47003) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
              C47243 + C47243 + C139555 * C1249) *
                 C46913 +
             (C47276 + C47277) * C139544) *
                C139480 * C139530 -
            ((C49238 + C49239) * C139544 +
             (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
              C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                 C46913) *
                C139480 * C139426) *
               C139529 +
           (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
              C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                 C46913 +
             (C52264 + C52265) * C139544) *
                C139480 * C139426 -
            ((C48236 + C48237) * C139544 +
             (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
              C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                 C46913) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
                C139480 * C139426 -
            ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
                C139480 * C139530) *
               C139529 +
           (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
                C139480 * C139530 -
            ((C47240 * C8590 + C52258 + C52258 + C139555 * C8913 +
              C47239 * C4161 + C52259 + C52259 + C46915 * C4615) *
                 C139544 +
             (C52265 + C52264) * C46913) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C273 * C106 + C139480 * C274) * C47003 +
                        (C273 * C187 + C139480 * C499) * C46915 +
                        C14408 * C47004 + C14805 * C139555) *
                           C46913 +
                       (C47348 + C47349 + C47350 + C47351) * C139544) *
                          C139530 -
                      ((C49340 + C49341 + C49342 + C49343) * C139544 +
                       (C18907 * C139555 + C18465 * C47004 +
                        (C273 * C1872 + C139480 * C2292) * C46915 +
                        (C273 * C1762 + C139480 * C1986) * C47003) *
                           C46913) *
                          C139426) *
                         C139529 +
                     (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
                        C24548 * C139555) *
                           C46913 +
                       (C52396 + C52397 + C52398 + C52399) * C139544) *
                          C139426 -
                      ((C48338 + C48339 + C48340 + C48341) * C139544 +
                       (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                        C14408 * C47003) *
                           C46913) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C49343 + C49342 + C49341 + C49340) * C46913 +
                       (C51226 + C51227 + C51228 + C51229) * C139544) *
                          C139426 -
                      ((C47352 + C47353 + C47354 + C47355) * C139544 +
                       (C47351 + C47350 + C47349 + C47348) * C46913) *
                          C139530) *
                         C139529 +
                     (((C48341 + C48340 + C48339 + C48338) * C46913 +
                       (C50298 + C50299 + C50300 + C50301) * C139544) *
                          C139530 -
                      (((C273 * C8676 + C139480 * C8993) * C139555 +
                        (C273 * C8590 + C139480 * C8756) * C47004 +
                        C4741 * C46915 + C4412 * C47003) *
                           C139544 +
                       (C52399 + C52398 + C52397 + C52396) * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                  C273 +
              (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                  C139480) *
                 C46915 +
             ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                 C139555) *
                C139530 -
            (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) *
                 C139555 +
             ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
               C46913 * C2394) *
                  C139480 +
              (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
               C46913 * C1770) *
                  C273) *
                 C46915) *
                C139426) *
               C139529 +
           ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
             ((C46918 * C8592 + C46913 * C8595 + C46920 * C8591 +
               C139544 * C8594) *
                  C273 +
              (C46918 * C8758 + C46913 * C9072 + C46920 * C8757 +
               C139544 * C9071) *
                  C139480) *
                 C139555) *
                C139426 -
            (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) *
                 C139555 +
             ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) *
                 C46915) *
                C139530) *
               C139398) *
              C825 +
          (((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
               C139544 * C1768) *
                  C273 +
              (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
               C139544 * C2392) *
                  C139480) *
                 C46915 +
             ((C52116 + C52117) * C273 + (C52540 + C52541) * C139480) *
                 C139555) *
                C139426 -
            (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) *
                 C139555 +
             ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                  C139480 +
              (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                  C273) *
                 C46915) *
                C139530) *
               C139529 +
           ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
             ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                 C139555) *
                C139530 -
            (((C46920 * C8756 + C139544 * C9070 + C46918 * C8757 +
               C46913 * C9071) *
                  C139480 +
              (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
               C46913 * C8594) *
                  C273) *
                 C139555 +
             ((C52541 + C52540) * C139480 + (C52117 + C52116) * C273) *
                 C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                  C273 +
              (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
               C139555 * C1543) *
                  C139480) *
                 C46913 +
             ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                 C139544) *
                C139530 -
            (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) *
                 C139544 +
             ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
               C46915 * C2476) *
                  C139480 +
              (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
               C46915 * C1872) *
                  C273) *
                 C46913) *
                C139426) *
               C139529 +
           ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
               C139555 * C8678) *
                  C273 +
              (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
               C139555 * C9149) *
                  C139480) *
                 C46913 +
             ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                 C139544) *
                C139426 -
            (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) *
                 C139544 +
             ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
               C46915 * C1543) *
                  C139480 +
              (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                  C273) *
                 C46913) *
                C139530) *
               C139398) *
              C825 +
          (((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
             ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                 C139544) *
                C139426 -
            (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) *
                 C139544 +
             ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) *
                 C46913) *
                C139530) *
               C139529 +
           ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
             ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                 C139544) *
                C139530 -
            (((C47004 * C8756 + C139555 * C9147 + C47003 * C4395 +
               C46915 * C4945) *
                  C139480 +
              (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
               C46915 * C4277) *
                  C273) *
                 C139544 +
             ((C52677 + C52676) * C139480 + (C51825 + C51824) * C273) *
                 C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
              C15154 * C139555) *
                 C46913 +
             (C47576 + C47577) * C139544) *
                C139530 -
            ((C49654 + C49655) * C139544 +
             (C19327 * C139555 +
              (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                 C46913) *
                C139426) *
               C139529 +
           (((C19327 * C46915 + C24861 * C139555) * C46913 +
             (C52808 + C52809) * C139544) *
                C139426 -
            ((C48676 + C48677) * C139544 +
             (C15155 * C139555 + C15154 * C46915) * C46913) *
                C139530) *
               C139398) *
              C825 +
          ((((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
                C139426 -
            ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
                C139530) *
               C139529 +
           (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) *
                C139530 -
            (((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139555 +
              C5073 * C46915) *
                 C139544 +
             (C52809 + C52808) * C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] += (-std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139362 * C822 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139362 * C823 +
                     ((C47723 + C47722) * C139480 * C46915 +
                      (C46917 * C5803 + C47690 + C47690 + C46913 * C5809 +
                       C46919 * C5802 + C47691 + C47691 + C139544 * C5808) *
                          C139480 * C139555) *
                         C139362 * C824) *
                        C825 +
                    (((C47724 + C47725) * C139480 * C46915 +
                      (C47726 + C47727) * C139480 * C139555) *
                         C139362 * C823 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139362 * C822 -
                     ((C46919 * C5801 + C47702 + C47702 + C139544 * C5807 +
                       C46917 * C5802 + C47703 + C47703 + C46913 * C5808) *
                          C139480 * C139555 +
                      (C47727 + C47726) * C139480 * C46915) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                      C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                         C139480 * C46915 +
                     (C46917 * C829 + C46924 + C46924 + C46913 * C845 +
                      C46919 * C828 + C46925 + C46925 + C139544 * C844) *
                         C139480 * C139555) *
                        C139362 * C139346 * C96 -
                    ((C46919 * C827 + C46926 + C46926 + C139544 * C843 +
                      C46917 * C828 + C46927 + C46927 + C46913 * C844) *
                         C139480 * C139555 +
                     (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                      C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                         C139480 * C46915) *
                        C139362 * C139346 * C97 +
                    ((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                      C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                         C139480 * C46915 +
                     (C46917 * C827 + C46932 + C46932 + C46913 * C843 +
                      C46919 * C833 + C46933 + C46933 + C139544 * C849) *
                         C139480 * C139555) *
                        C139362 * C139346 * C98 -
                    ((C46919 * C2695 + C46934 + C46934 + C139544 * C2697 +
                      C46917 * C833 + C46935 + C46935 + C46913 * C849) *
                         C139480 * C139555 +
                     (C46919 * C110 + C46936 + C46936 + C139544 * C122 +
                      C46917 * C109 + C46937 + C46937 + C46913 * C121) *
                         C139480 * C46915) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C1757 -
                     ((C46919 * C4160 + C48778 + C48778 + C139544 * C4168 +
                       C46917 * C4159 + C48779 + C48779 + C46913 * C4167) *
                          C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C1758 +
                     ((C46917 * C1763 + C48782 + C48782 + C46913 * C1779 +
                       C46919 * C1764 + C48783 + C48783 + C139544 * C1780) *
                          C139480 * C46915 +
                      (C46917 * C6325 + C48784 + C48784 + C46913 * C6331 +
                       C46919 * C6324 + C48785 + C48785 + C139544 * C6330) *
                          C139480 * C139555) *
                         C1759) *
                        C139346 * C825 +
                    (((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                       C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                          C139480 * C46915 +
                      (C46917 * C4160 + C48788 + C48788 + C46913 * C4168 +
                       C46919 * C4161 + C48789 + C48789 + C139544 * C4169) *
                          C139480 * C139555) *
                         C1758 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C1757 -
                     ((C46919 * C6323 + C48790 + C48790 + C139544 * C6329 +
                       C46917 * C6324 + C48791 + C48791 + C46913 * C6330) *
                          C139480 * C139555 +
                      (C46919 * C1765 + C48792 + C48792 + C139544 * C1781 +
                       C46917 * C1764 + C48793 + C48793 + C46913 * C1780) *
                          C139480 * C46915) *
                         C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139362 * C822 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139362 * C823 +
           ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C46918 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C46913 +
            (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
            (C47003 * C827 + C46915 * C937 + C47004 * C832 + C139555 * C942) *
                C46920 +
            (C47003 * C835 + C46915 * C945 + C47004 * C840 + C139555 * C950) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139362 * C822 -
           ((C47004 * C5804 + C139555 * C5866 + C47003 * C840 + C46915 * C950) *
                C139544 +
            (C47004 * C5801 + C139555 * C5863 + C47003 * C832 + C46915 * C942) *
                C46920 +
            (C47849 + C47848) * C46913 + (C47847 + C47846) * C46918) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C46918 +
           (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
               C46913 +
           (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
           (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
              C139480 * C139362 * C139346 * C97 +
          ((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
           (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
              C139480 * C139362 * C139346 * C98 -
          ((C47004 * C2696 + C139555 * C2776 + C47003 * C116 + C46915 * C197) *
               C139544 +
           (C47004 * C2695 + C139555 * C2775 + C47003 * C110 + C46915 * C191) *
               C46920 +
           (C47041 + C47040) * C46913 + (C47039 + C47038) * C46918) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C1757 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C1758 +
           ((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
             C139555 * C6411) *
                C46918 +
            (C47003 * C1771 + C46915 * C1881 + C47004 * C6328 +
             C139555 * C6414) *
                C46913 +
            (C48912 + C48913) * C46920 + (C48914 + C48915) * C139544) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
            (C47003 * C1760 + C46915 * C1870 + C47004 * C4161 +
             C139555 * C4277) *
                C46920 +
            (C47003 * C1768 + C46915 * C1878 + C47004 * C4165 +
             C139555 * C4281) *
                C139544) *
               C139480 * C1758 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C1757 -
           ((C47004 * C6326 + C139555 * C6412 + C47003 * C1773 +
             C46915 * C1883) *
                C139544 +
            (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
             C46915 * C1875) *
                C46920 +
            (C48915 + C48914) * C46913 + (C48913 + C48912) * C46918) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139362 * C822 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C139362 * C823 +
           ((C47955 + C47954 + C47953 + C47952) * C46915 +
            (C20442 * C46918 + C20443 * C46913 + C14412 * C46920 +
             C14413 * C139544) *
                C139555) *
               C139362 * C824) *
              C825 +
          (((C47956 + C47957 + C47958 + C47959) * C46915 +
            (C47960 + C47961 + C47962 + C47963) * C139555) *
               C139362 * C823 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139362 * C822 -
           (((C273 * C5804 + C139480 * C5922) * C139544 +
             (C273 * C5801 + C139480 * C5919) * C46920 + C14413 * C46913 +
             C14412 * C46918) *
                C139555 +
            (C47963 + C47962 + C47961 + C47960) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C46918 +
            (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
            C304 * C139544) *
               C46915 +
           (C14408 * C46918 + C14409 * C46913 + C1087 * C46920 +
            C1086 * C139544) *
               C139555) *
              C139362 * C139346 * C96 -
          ((C1084 * C139544 + C1085 * C46920 + C1086 * C46913 +
            C1087 * C46918) *
               C139555 +
           (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
               C46915) *
              C139362 * C139346 * C97 +
          ((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
               C46915 +
           (C1085 * C46918 + C1084 * C46913 + C2864 * C46920 +
            C2865 * C139544) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C273 * C2696 + C139480 * C2858) * C139544 +
            (C273 * C2695 + C139480 * C2857) * C46920 + C2865 * C46913 +
            C2864 * C46918) *
               C139555 +
           (C310 * C139544 + C309 * C46920 + C307 * C46913 + C308 * C46918) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C1757 -
           ((C4411 * C139544 + C4410 * C46920 + C18464 * C46913 +
             C18465 * C46918) *
                C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C46918 +
             (C273 * C1771 + C139480 * C1995) * C46913 + C2021 * C46920 +
             C2022 * C139544) *
                C46915 +
            (C21212 * C46918 + C21213 * C46913 + C15496 * C46920 +
             C15497 * C139544) *
                C139555) *
               C1759) *
              C139346 * C825 +
          (((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
             C2017 * C139544) *
                C46915 +
            (C4410 * C46918 + C4411 * C46913 + C4412 * C46920 +
             C4413 * C139544) *
                C139555) *
               C1758 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C1757 -
           (((C273 * C6326 + C139480 * C6492) * C139544 +
             (C273 * C6323 + C139480 * C6489) * C46920 + C15497 * C46913 +
             C15496 * C46918) *
                C139555 +
            (C2024 * C139544 + C2023 * C46920 + C2022 * C46913 +
             C2021 * C46918) *
                C46915) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139362 * C822 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139362 * C823 +
           ((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
            (C46918 * C5803 + C46913 * C5806 + C46920 * C5802 +
             C139544 * C5805) *
                C47004 +
            (C46918 * C5865 + C46913 * C5977 + C46920 * C5864 +
             C139544 * C5976) *
                C139555) *
               C139480 * C139362 * C824) *
              C825 +
          (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
            (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
               C139480 * C139362 * C823 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139362 * C822 -
           ((C46920 * C5863 + C139544 * C5975 + C46918 * C5864 +
             C46913 * C5976) *
                C139555 +
            (C46920 * C5801 + C139544 * C5804 + C46918 * C5802 +
             C46913 * C5805) *
                C47004 +
            (C48109 + C48108) * C46915 + (C48107 + C48106) * C47003) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C47003 +
           (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
               C46915 +
           (C46918 * C829 + C46913 * C837 + C46920 * C828 + C139544 * C836) *
               C47004 +
           (C46918 * C939 + C46913 * C1167 + C46920 * C938 + C139544 * C1166) *
               C139555) *
              C139480 * C139362 * C139346 * C96 -
          ((C46920 * C937 + C139544 * C1165 + C46918 * C938 + C46913 * C1166) *
               C139555 +
           (C46920 * C827 + C139544 * C835 + C46918 * C828 + C46913 * C836) *
               C47004 +
           (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
               C46915 +
           (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
               C47003) *
              C139480 * C139362 * C139346 * C97 +
          ((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
               C47003 +
           (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
               C46915 +
           (C46918 * C827 + C46913 * C835 + C46920 * C833 + C139544 * C841) *
               C47004 +
           (C46918 * C937 + C46913 * C1165 + C46920 * C943 + C139544 * C1171) *
               C139555) *
              C139480 * C139362 * C139346 * C98 -
          ((C46920 * C2775 + C139544 * C2939 + C46918 * C943 + C46913 * C1171) *
               C139555 +
           (C46920 * C2695 + C139544 * C2696 + C46918 * C833 + C46913 * C841) *
               C47004 +
           (C46920 * C191 + C139544 * C364 + C46918 * C190 + C46913 * C363) *
               C46915 +
           (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
               C47003) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C1757 -
           ((C46920 * C4276 + C139544 * C4512 + C46918 * C4275 +
             C46913 * C4511) *
                C139555 +
            (C46920 * C4160 + C139544 * C4164 + C46918 * C4159 +
             C46913 * C4163) *
                C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C1758 +
           ((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
             C139544 * C1772) *
                C47003 +
            (C46918 * C1873 + C46913 * C2101 + C46920 * C1874 +
             C139544 * C2102) *
                C46915 +
            (C46918 * C6325 + C46913 * C6328 + C46920 * C6324 +
             C139544 * C6327) *
                C47004 +
            (C46918 * C6411 + C46913 * C6571 + C46920 * C6410 +
             C139544 * C6570) *
                C139555) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
             C139544 * C1768) *
                C47003 +
            (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
             C139544 * C2098) *
                C46915 +
            (C46918 * C4160 + C46913 * C4164 + C46920 * C4161 +
             C139544 * C4165) *
                C47004 +
            (C46918 * C4276 + C46913 * C4512 + C46920 * C4277 +
             C139544 * C4513) *
                C139555) *
               C139480 * C1758 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C1757 -
           ((C46920 * C6409 + C139544 * C6569 + C46918 * C6410 +
             C46913 * C6570) *
                C139555 +
            (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
             C46913 * C6327) *
                C47004 +
            (C46920 * C1875 + C139544 * C2103 + C46918 * C1874 +
             C46913 * C2102) *
                C46915 +
            (C46920 * C1765 + C139544 * C1773 + C46918 * C1764 +
             C46913 * C1772) *
                C47003) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139362 * C822 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C139362 * C823 +
           ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
             C48217 + C48217 + C139555 * C6030) *
                C46913 +
            (C48238 + C48239) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C48237 + C48236) * C46913 +
            (C47239 * C827 + C48224 + C48224 + C46915 * C1247 + C47240 * C832 +
             C48225 + C48225 + C139555 * C1252) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139362 * C822 -
           ((C47240 * C5801 + C48226 + C48226 + C139555 * C6028 +
             C47239 * C832 + C48227 + C48227 + C46915 * C1252) *
                C139544 +
            (C48239 + C48238) * C46913) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
            C47243 + C47243 + C139555 * C1249) *
               C46913 +
           (C47276 + C47277) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) * C139480 *
              C139362 * C139346 * C97 +
          ((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) * C139480 *
              C139362 * C139346 * C98 -
          ((C47240 * C2695 + C47262 + C47262 + C139555 * C3014 + C47239 * C110 +
            C47263 + C47263 + C46915 * C421) *
               C139544 +
           (C47281 + C47280) * C46913) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C1757 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C1758 +
           ((C47239 * C1763 + C49218 + C49218 + C46915 * C2183 +
             C47240 * C6325 + C49219 + C49219 + C139555 * C6648) *
                C46913 +
            (C49240 + C49241) * C139544) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C49239 + C49238) * C46913 +
            (C47239 * C1760 + C49226 + C49226 + C46915 * C2180 +
             C47240 * C4161 + C49227 + C49227 + C139555 * C4615) *
                C139544) *
               C139480 * C1758 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C1757 -
           ((C47240 * C6323 + C49228 + C49228 + C139555 * C6646 +
             C47239 * C1765 + C49229 + C49229 + C46915 * C2185) *
                C139544 +
            (C49241 + C49240) * C46913) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C47003 +
             (C273 * C187 + C139480 * C499) * C46915 + C14408 * C47004 +
             C14805 * C139555) *
                C46913 +
            (C47348 + C47349 + C47350 + C47351) * C139544) *
               C139362 * C822 -
           ((C48338 + C48339 + C48340 + C48341) * C139544 +
            (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
             C14408 * C47003) *
                C46913) *
               C139362 * C823 +
           ((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
             C20668 * C139555) *
                C46913 +
            (C48342 + C48343 + C48344 + C48345) * C139544) *
               C139362 * C824) *
              C825 +
          (((C48341 + C48340 + C48339 + C48338) * C46913 +
            (C1085 * C47003 + C1378 * C46915 + C1090 * C47004 +
             C1381 * C139555) *
                C139544) *
               C139362 * C823 -
           ((C47352 + C47353 + C47354 + C47355) * C139544 +
            (C47351 + C47350 + C47349 + C47348) * C46913) *
               C139362 * C822 -
           (((C273 * C5863 + C139480 * C6084) * C139555 +
             (C273 * C5801 + C139480 * C5919) * C47004 + C1381 * C46915 +
             C1090 * C47003) *
                C139544 +
            (C48345 + C48344 + C48343 + C48342) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C273 * C106 + C139480 * C274) * C47003 +
                                (C273 * C187 + C139480 * C499) * C46915 +
                                C14408 * C47004 + C14805 * C139555) *
                                   C46913 +
                               (C47348 + C47349 + C47350 + C47351) * C139544) *
                                  C139362 * C139346 * C96 -
                              ((C47352 + C47353 + C47354 + C47355) * C139544 +
                               (C47351 + C47350 + C47349 + C47348) * C46913) *
                                  C139362 * C139346 * C97 +
                              ((C47355 + C47354 + C47353 + C47352) * C46913 +
                               (C47356 + C47357 + C47358 + C47359) * C139544) *
                                  C139362 * C139346 * C98 -
                              (((C273 * C2775 + C139480 * C3095) * C139555 +
                                (C273 * C2695 + C139480 * C2857) * C47004 +
                                C521 * C46915 + C309 * C47003) *
                                   C139544 +
                               (C47359 + C47358 + C47357 + C47356) * C46913) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C47003 +
             (C273 * C187 + C139480 * C499) * C46915 + C14408 * C47004 +
             C14805 * C139555) *
                C46913 +
            (C47348 + C47349 + C47350 + C47351) * C139544) *
               C1757 -
           ((C49340 + C49341 + C49342 + C49343) * C139544 +
            (C18907 * C139555 + C18465 * C47004 +
             (C273 * C1872 + C139480 * C2292) * C46915 +
             (C273 * C1762 + C139480 * C1986) * C47003) *
                C46913) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C47003 +
             (C273 * C1873 + C139480 * C2293) * C46915 + C21212 * C47004 +
             C21534 * C139555) *
                C46913 +
            (C49344 + C49345 + C49346 + C49347) * C139544) *
               C1759) *
              C139346 * C825 +
          (((C49343 + C49342 + C49341 + C49340) * C46913 +
            (C2018 * C47003 + C2311 * C46915 + C4412 * C47004 +
             C4741 * C139555) *
                C139544) *
               C1758 -
           ((C47352 + C47353 + C47354 + C47355) * C139544 +
            (C47351 + C47350 + C47349 + C47348) * C46913) *
               C1757 -
           (((C273 * C6409 + C139480 * C6726) * C139555 +
             (C273 * C6323 + C139480 * C6489) * C47004 + C2314 * C46915 +
             C2023 * C47003) *
                C139544 +
            (C49347 + C49346 + C49345 + C49344) * C46913) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139362 * C822 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139362 * C823 +
           (((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
            ((C46918 * C5803 + C46913 * C5806 + C46920 * C5802 +
              C139544 * C5805) *
                 C273 +
             (C46918 * C5921 + C46913 * C6139 + C46920 * C5920 +
              C139544 * C6138) *
                 C139480) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
            ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                C139555) *
               C139362 * C823 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139362 * C822 -
           (((C46920 * C5919 + C139544 * C6137 + C46918 * C5920 +
              C46913 * C6138) *
                 C139480 +
             (C46920 * C5801 + C139544 * C5804 + C46918 * C5802 +
              C46913 * C5805) *
                 C273) *
                C139555 +
            ((C48467 + C48466) * C139480 + (C48107 + C48106) * C273) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C273 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C139480) *
               C46915 +
           ((C46918 * C829 + C46913 * C837 + C46920 * C828 + C139544 * C836) *
                C273 +
            (C46918 * C1053 + C46913 * C1461 + C46920 * C1052 +
             C139544 * C1460) *
                C139480) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C46920 * C1051 + C139544 * C1459 + C46918 * C1052 +
             C46913 * C1460) *
                C139480 +
            (C46920 * C827 + C139544 * C835 + C46918 * C828 + C46913 * C836) *
                C273) *
               C139555 +
           ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C139480 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C273) *
               C46915) *
              C139362 * C139346 * C97 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C273 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C139480) *
               C46915 +
           ((C46918 * C827 + C46913 * C835 + C46920 * C833 + C139544 * C841) *
                C273 +
            (C46918 * C1051 + C46913 * C1459 + C46920 * C1057 +
             C139544 * C1465) *
                C139480) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C46920 * C2857 + C139544 * C3176 + C46918 * C1057 +
             C46913 * C1465) *
                C139480 +
            (C46920 * C2695 + C139544 * C2696 + C46918 * C833 + C46913 * C841) *
                C273) *
               C139555 +
           ((C46920 * C278 + C139544 * C581 + C46918 * C277 + C46913 * C580) *
                C139480 +
            (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
                C273) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C1757 -
           (((C46920 * C4394 + C139544 * C4842 + C46918 * C4393 +
              C46913 * C4841) *
                 C139480 +
             (C46920 * C4160 + C139544 * C4164 + C46918 * C4159 +
              C46913 * C4163) *
                 C273) *
                C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C1758 +
           (((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C46918 * C1987 + C46913 * C2395 + C46920 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C46915 +
            ((C46918 * C6325 + C46913 * C6328 + C46920 * C6324 +
              C139544 * C6327) *
                 C273 +
             (C46918 * C6491 + C46913 * C6805 + C46920 * C6490 +
              C139544 * C6804) *
                 C139480) *
                C139555) *
               C1759) *
              C139346 * C825 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C46915 +
            ((C46918 * C4160 + C46913 * C4164 + C46920 * C4161 +
              C139544 * C4165) *
                 C273 +
             (C46918 * C4394 + C46913 * C4842 + C46920 * C4395 +
              C139544 * C4843) *
                 C139480) *
                C139555) *
               C1758 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C1757 -
           (((C46920 * C6489 + C139544 * C6803 + C46918 * C6490 +
              C46913 * C6804) *
                 C139480 +
             (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
              C46913 * C6327) *
                 C273) *
                C139555 +
            ((C46920 * C1989 + C139544 * C2397 + C46918 * C1988 +
              C46913 * C2396) *
                 C139480 +
             (C46920 * C1765 + C139544 * C1773 + C46918 * C1764 +
              C46913 * C1772) *
                 C273) *
                C46915) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139362 * C822 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139362 * C823 +
           (((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C46913 +
            ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
            ((C47003 * C827 + C46915 * C937 + C47004 * C832 + C139555 * C942) *
                 C273 +
             (C47003 * C1051 + C46915 * C1541 + C47004 * C1056 +
              C139555 * C1546) *
                 C139480) *
                C139544) *
               C139362 * C823 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139362 * C822 -
           (((C47004 * C5919 + C139555 * C6190 + C47003 * C1056 +
              C46915 * C1546) *
                 C139480 +
             (C47004 * C5801 + C139555 * C5863 + C47003 * C832 +
              C46915 * C942) *
                 C273) *
                C139544 +
            ((C48577 + C48576) * C139480 + (C47847 + C47846) * C273) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C273 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C139480) *
               C46913 +
           ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) * C139544) *
              C139362 * C139346 * C96 -
          (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
           ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
              C139362 * C139346 * C97 +
          (((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
           ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) * C139544) *
              C139362 * C139346 * C98 -
          (((C47004 * C2857 + C139555 * C3251 + C47003 * C278 + C46915 * C637) *
                C139480 +
            (C47004 * C2695 + C139555 * C2775 + C47003 * C110 + C46915 * C191) *
                C273) *
               C139544 +
           ((C47509 + C47508) * C139480 + (C47039 + C47038) * C273) * C46913) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C1757 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C1758 +
           (((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C47003 * C1987 + C46915 * C2477 + C47004 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C46913 +
            ((C48912 + C48913) * C273 + (C49554 + C49555) * C139480) *
                C139544) *
               C1759) *
              C139346 * C825 +
          ((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
            ((C47003 * C1760 + C46915 * C1870 + C47004 * C4161 +
              C139555 * C4277) *
                 C273 +
             (C47003 * C1984 + C46915 * C2474 + C47004 * C4395 +
              C139555 * C4945) *
                 C139480) *
                C139544) *
               C1758 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C1757 -
           (((C47004 * C6489 + C139555 * C6880 + C47003 * C1989 +
              C46915 * C2479) *
                 C139480 +
             (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
              C46915 * C1875) *
                 C273) *
                C139544 +
            ((C49555 + C49554) * C139480 + (C48913 + C48912) * C273) * C46913) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (-std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139362 * C822 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139362 * C823 +
           ((C15155 * C46915 + C20885 * C139555) * C46913 +
            (C48678 + C48679) * C139544) *
               C139362 * C824) *
              C825 +
          (((C48677 + C48676) * C46913 +
            (C1676 * C46915 + C1679 * C139555) * C139544) *
               C139362 * C823 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139362 * C822 -
           (((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139555 +
             C1679 * C46915) *
                C139544 +
            (C48679 + C48678) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
            C15154 * C139555) *
               C46913 +
           (C47576 + C47577) * C139544) *
              C139362 * C139346 * C96 -
          ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) * C139362 *
              C139346 * C97 +
          ((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) * C139362 *
              C139346 * C98 -
          (((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139555 +
            C744 * C46915) *
               C139544 +
           (C47581 + C47580) * C46913) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C1757 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C1758 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C46915 +
             C21847 * C139555) *
                C46913 +
            (C49656 + C49657) * C139544) *
               C1759) *
              C139346 * C825 +
          (((C49655 + C49654) * C46913 +
            (C2609 * C46915 + C5073 * C139555) * C139544) *
               C1758 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) * C1757 -
           (((C711 * C6323 + C6961 + C6961 + C139480 * C6957) * C139555 +
             C2612 * C46915) *
                C139544 +
            (C49657 + C49656) * C46913) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139530 -
                     ((C46919 * C4160 + C48778 + C48778 + C139544 * C4168 +
                       C46917 * C4159 + C48779 + C48779 + C46913 * C4167) *
                          C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139426) *
                        C139346 * C139558 +
                    (((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                       C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                          C139480 * C46915 +
                      (C46917 * C4160 + C48788 + C48788 + C46913 * C4168 +
                       C46919 * C4161 + C48789 + C48789 + C139544 * C4169) *
                          C139480 * C139555) *
                         C139426 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139530) *
                        C139346 * C139559 +
                    (((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                       C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                          C139480 * C46915 +
                      (C49766 + C49767) * C139480 * C139555) *
                         C139530 -
                     ((C46919 * C4162 + C50708 + C50708 + C139544 * C4170 +
                       C46917 * C4161 + C50709 + C50709 + C46913 * C4169) *
                          C139480 * C139555 +
                      (C46919 * C1766 + C50710 + C50710 + C139544 * C1782 +
                       C46917 * C1760 + C50711 + C50711 + C46913 * C1776) *
                          C139480 * C46915) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139530 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
            (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
               C139480 * C139426 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
            (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
               C139480 * C139530 -
           ((C47004 * C4166 + C139555 * C4282 + C47003 * C1774 +
             C46915 * C1884) *
                C139544 +
            (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
             C46915 * C1876) *
                C46920 +
            (C50821 + C50820) * C46913 + (C50819 + C50818) * C46918) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139530 -
           ((C4411 * C139544 + C4410 * C46920 + C18464 * C46913 +
             C18465 * C46918) *
                C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C139426) *
              C139346 * C139558 +
          (((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
             C2017 * C139544) *
                C46915 +
            (C4410 * C46918 + C4411 * C46913 + C4412 * C46920 +
             C4413 * C139544) *
                C139555) *
               C139426 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139530) *
              C139346 * C139559 +
          (((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
                C46915 +
            (C49976 + C49977 + C49978 + C49979) * C139555) *
               C139530 -
           (((C273 * C4166 + C139480 * C4400) * C139544 +
             (C273 * C4162 + C139480 * C4396) * C46920 + C4413 * C46913 +
             C4412 * C46918) *
                C139555 +
            (C3586 * C139544 + C3585 * C46920 + C2017 * C46913 +
             C2018 * C46918) *
                C46915) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139530 -
           ((C46920 * C4276 + C139544 * C4512 + C46918 * C4275 +
             C46913 * C4511) *
                C139555 +
            (C46920 * C4160 + C139544 * C4164 + C46918 * C4159 +
             C46913 * C4163) *
                C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
             C139544 * C1768) *
                C47003 +
            (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
             C139544 * C2098) *
                C46915 +
            (C46918 * C4160 + C46913 * C4164 + C46920 * C4161 +
             C139544 * C4165) *
                C47004 +
            (C46918 * C4276 + C46913 * C4512 + C46920 * C4277 +
             C139544 * C4513) *
                C139555) *
               C139480 * C139426 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C47003 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C46915 +
            (C50086 + C50087) * C47004 + (C50088 + C50089) * C139555) *
               C139480 * C139530 -
           ((C46920 * C4278 + C139544 * C4514 + C46918 * C4277 +
             C46913 * C4513) *
                C139555 +
            (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
             C46913 * C4165) *
                C47004 +
            (C46920 * C1876 + C139544 * C2104 + C46918 * C1870 +
             C46913 * C2098) *
                C46915 +
            (C46920 * C1766 + C139544 * C1774 + C46918 * C1760 +
             C46913 * C1768) *
                C47003) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139530 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
               C139480 * C139426 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) *
               C139480 * C139530 -
           ((C47240 * C4162 + C51120 + C51120 + C139555 * C4616 +
             C47239 * C1766 + C51121 + C51121 + C46915 * C2186) *
                C139544 +
            (C51127 + C51126) * C46913) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139530 -
                     ((C49340 + C49341 + C49342 + C49343) * C139544 +
                      (C18907 * C139555 + C18465 * C47004 +
                       (C273 * C1872 + C139480 * C2292) * C46915 +
                       (C273 * C1762 + C139480 * C1986) * C47003) *
                          C46913) *
                         C139426) *
                        C139346 * C139558 +
                    (((C49343 + C49342 + C49341 + C49340) * C46913 +
                      (C51226 + C51227 + C51228 + C51229) * C139544) *
                         C139426 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C139530) *
                        C139346 * C139559 +
                    (((C47355 + C47354 + C47353 + C47352) * C46913 +
                      (C47356 + C47357 + C47358 + C47359) * C139544) *
                         C139530 -
                     (((C273 * C4278 + C139480 * C4732) * C139555 +
                       (C273 * C4162 + C139480 * C4396) * C47004 +
                       C3822 * C46915 + C3585 * C47003) *
                          C139544 +
                      (C51229 + C51228 + C51227 + C51226) * C46913) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139530 -
           (((C46920 * C4394 + C139544 * C4842 + C46918 * C4393 +
              C46913 * C4841) *
                 C139480 +
             (C46920 * C4160 + C139544 * C4164 + C46918 * C4159 +
              C46913 * C4163) *
                 C273) *
                C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139426) *
              C139346 * C139558 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C46915 +
            ((C46918 * C4160 + C46913 * C4164 + C46920 * C4161 +
              C139544 * C4165) *
                 C273 +
             (C46918 * C4394 + C46913 * C4842 + C46920 * C4395 +
              C139544 * C4843) *
                 C139480) *
                C139555) *
               C139426 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139530) *
              C139346 * C139559 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C273 +
             (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                 C139480) *
                C46915 +
            ((C50086 + C50087) * C273 + (C50404 + C50405) * C139480) *
                C139555) *
               C139530 -
           (((C46920 * C4396 + C139544 * C4844 + C46918 * C4395 +
              C46913 * C4843) *
                 C139480 +
             (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
              C46913 * C4165) *
                 C273) *
                C139555 +
            ((C46920 * C1990 + C139544 * C2398 + C46918 * C1984 +
              C46913 * C2392) *
                 C139480 +
             (C46920 * C1766 + C139544 * C1774 + C46918 * C1760 +
              C46913 * C1768) *
                 C273) *
                C46915) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139530 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139426) *
              C139346 * C139558 +
          ((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
            ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                C139544) *
               C139426 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139530) *
              C139346 * C139559 +
          ((((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
            ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) *
                C139544) *
               C139530 -
           (((C47004 * C4396 + C139555 * C4946 + C47003 * C1990 +
              C46915 * C2480) *
                 C139480 +
             (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
              C46915 * C1876) *
                 C273) *
                C139544 +
            ((C51431 + C51430) * C139480 + (C50819 + C50818) * C273) * C46913) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139530 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139426) *
              C139346 * C139558 +
          (((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
               C139426 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139530) *
              C139346 * C139559 +
          (((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) *
               C139530 -
           (((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139555 +
             C4060 * C46915) *
                C139544 +
            (C51531 + C51530) * C46913) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                      C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                         C139480 * C46915 +
                     (C46917 * C829 + C46924 + C46924 + C46913 * C845 +
                      C46919 * C828 + C46925 + C46925 + C139544 * C844) *
                         C139480 * C139555) *
                        C139362 * C139346 * C96 -
                    ((C46919 * C827 + C46926 + C46926 + C139544 * C843 +
                      C46917 * C828 + C46927 + C46927 + C46913 * C844) *
                         C139480 * C139555 +
                     (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                      C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                         C139480 * C46915) *
                        C139362 * C139346 * C97 +
                    ((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                      C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                         C139480 * C46915 +
                     (C46917 * C827 + C46932 + C46932 + C46913 * C843 +
                      C46919 * C833 + C46933 + C46933 + C139544 * C849) *
                         C139480 * C139555) *
                        C139362 * C139346 * C98 -
                    ((C46919 * C2695 + C46934 + C46934 + C139544 * C2697 +
                      C46917 * C833 + C46935 + C46935 + C46913 * C849) *
                         C139480 * C139555 +
                     (C46919 * C110 + C46936 + C46936 + C139544 * C122 +
                      C46917 * C109 + C46937 + C46937 + C46913 * C121) *
                         C139480 * C46915) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139362 * C822 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139362 * C823 +
                     ((C47723 + C47722) * C139480 * C46915 +
                      (C46917 * C5803 + C47690 + C47690 + C46913 * C5809 +
                       C46919 * C5802 + C47691 + C47691 + C139544 * C5808) *
                          C139480 * C139555) *
                         C139362 * C824) *
                        C825 +
                    (((C47724 + C47725) * C139480 * C46915 +
                      (C47726 + C47727) * C139480 * C139555) *
                         C139362 * C823 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139362 * C822 -
                     ((C46919 * C5801 + C47702 + C47702 + C139544 * C5807 +
                       C46917 * C5802 + C47703 + C47703 + C46913 * C5808) *
                          C139480 * C139555 +
                      (C47727 + C47726) * C139480 * C46915) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C46918 +
           (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
               C46913 +
           (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
           (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
              C139480 * C139362 * C139346 * C97 +
          ((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
           (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
              C139480 * C139362 * C139346 * C98 -
          ((C47004 * C2696 + C139555 * C2776 + C47003 * C116 + C46915 * C197) *
               C139544 +
           (C47004 * C2695 + C139555 * C2775 + C47003 * C110 + C46915 * C191) *
               C46920 +
           (C47041 + C47040) * C46913 + (C47039 + C47038) * C46918) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139362 * C822 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139362 * C823 +
           ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C46918 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C46913 +
            (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
            (C47003 * C827 + C46915 * C937 + C47004 * C832 + C139555 * C942) *
                C46920 +
            (C47003 * C835 + C46915 * C945 + C47004 * C840 + C139555 * C950) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139362 * C822 -
           ((C47004 * C5804 + C139555 * C5866 + C47003 * C840 + C46915 * C950) *
                C139544 +
            (C47004 * C5801 + C139555 * C5863 + C47003 * C832 + C46915 * C942) *
                C46920 +
            (C47849 + C47848) * C46913 + (C47847 + C47846) * C46918) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C46918 +
            (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
            C304 * C139544) *
               C46915 +
           (C14408 * C46918 + C14409 * C46913 + C1087 * C46920 +
            C1086 * C139544) *
               C139555) *
              C139362 * C139346 * C96 -
          ((C1084 * C139544 + C1085 * C46920 + C1086 * C46913 +
            C1087 * C46918) *
               C139555 +
           (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
               C46915) *
              C139362 * C139346 * C97 +
          ((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
               C46915 +
           (C1085 * C46918 + C1084 * C46913 + C2864 * C46920 +
            C2865 * C139544) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C273 * C2696 + C139480 * C2858) * C139544 +
            (C273 * C2695 + C139480 * C2857) * C46920 + C2865 * C46913 +
            C2864 * C46918) *
               C139555 +
           (C310 * C139544 + C309 * C46920 + C307 * C46913 + C308 * C46918) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139362 * C822 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C139362 * C823 +
           ((C47955 + C47954 + C47953 + C47952) * C46915 +
            (C20442 * C46918 + C20443 * C46913 + C14412 * C46920 +
             C14413 * C139544) *
                C139555) *
               C139362 * C824) *
              C825 +
          (((C47956 + C47957 + C47958 + C47959) * C46915 +
            (C47960 + C47961 + C47962 + C47963) * C139555) *
               C139362 * C823 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139362 * C822 -
           (((C273 * C5804 + C139480 * C5922) * C139544 +
             (C273 * C5801 + C139480 * C5919) * C46920 + C14413 * C46913 +
             C14412 * C46918) *
                C139555 +
            (C47963 + C47962 + C47961 + C47960) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C47003 +
           (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
               C46915 +
           (C46918 * C829 + C46913 * C837 + C46920 * C828 + C139544 * C836) *
               C47004 +
           (C46918 * C939 + C46913 * C1167 + C46920 * C938 + C139544 * C1166) *
               C139555) *
              C139480 * C139362 * C139346 * C96 -
          ((C46920 * C937 + C139544 * C1165 + C46918 * C938 + C46913 * C1166) *
               C139555 +
           (C46920 * C827 + C139544 * C835 + C46918 * C828 + C46913 * C836) *
               C47004 +
           (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
               C46915 +
           (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
               C47003) *
              C139480 * C139362 * C139346 * C97 +
          ((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
               C47003 +
           (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
               C46915 +
           (C46918 * C827 + C46913 * C835 + C46920 * C833 + C139544 * C841) *
               C47004 +
           (C46918 * C937 + C46913 * C1165 + C46920 * C943 + C139544 * C1171) *
               C139555) *
              C139480 * C139362 * C139346 * C98 -
          ((C46920 * C2775 + C139544 * C2939 + C46918 * C943 + C46913 * C1171) *
               C139555 +
           (C46920 * C2695 + C139544 * C2696 + C46918 * C833 + C46913 * C841) *
               C47004 +
           (C46920 * C191 + C139544 * C364 + C46918 * C190 + C46913 * C363) *
               C46915 +
           (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
               C47003) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139362 * C822 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139362 * C823 +
           ((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
            (C46918 * C5803 + C46913 * C5806 + C46920 * C5802 +
             C139544 * C5805) *
                C47004 +
            (C46918 * C5865 + C46913 * C5977 + C46920 * C5864 +
             C139544 * C5976) *
                C139555) *
               C139480 * C139362 * C824) *
              C825 +
          (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
            (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
               C139480 * C139362 * C823 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139362 * C822 -
           ((C46920 * C5863 + C139544 * C5975 + C46918 * C5864 +
             C46913 * C5976) *
                C139555 +
            (C46920 * C5801 + C139544 * C5804 + C46918 * C5802 +
             C46913 * C5805) *
                C47004 +
            (C48109 + C48108) * C46915 + (C48107 + C48106) * C47003) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
            C47243 + C47243 + C139555 * C1249) *
               C46913 +
           (C47276 + C47277) * C139544) *
              C139480 * C139362 * C139346 * C96 -
          ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) * C139480 *
              C139362 * C139346 * C97 +
          ((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) * C139480 *
              C139362 * C139346 * C98 -
          ((C47240 * C2695 + C47262 + C47262 + C139555 * C3014 + C47239 * C110 +
            C47263 + C47263 + C46915 * C421) *
               C139544 +
           (C47281 + C47280) * C46913) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139362 * C822 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C139362 * C823 +
           ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
             C48217 + C48217 + C139555 * C6030) *
                C46913 +
            (C48238 + C48239) * C139544) *
               C139480 * C139362 * C824) *
              C825 +
          (((C48237 + C48236) * C46913 +
            (C47239 * C827 + C48224 + C48224 + C46915 * C1247 + C47240 * C832 +
             C48225 + C48225 + C139555 * C1252) *
                C139544) *
               C139480 * C139362 * C823 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139362 * C822 -
           ((C47240 * C5801 + C48226 + C48226 + C139555 * C6028 +
             C47239 * C832 + C48227 + C48227 + C46915 * C1252) *
                C139544 +
            (C48239 + C48238) * C46913) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C47003 +
                      (C273 * C187 + C139480 * C499) * C46915 +
                      C14408 * C47004 + C14805 * C139555) *
                         C46913 +
                     (C47348 + C47349 + C47350 + C47351) * C139544) *
                        C139362 * C139346 * C96 -
                    ((C47352 + C47353 + C47354 + C47355) * C139544 +
                     (C47351 + C47350 + C47349 + C47348) * C46913) *
                        C139362 * C139346 * C97 +
                    ((C47355 + C47354 + C47353 + C47352) * C46913 +
                     (C47356 + C47357 + C47358 + C47359) * C139544) *
                        C139362 * C139346 * C98 -
                    (((C273 * C2775 + C139480 * C3095) * C139555 +
                      (C273 * C2695 + C139480 * C2857) * C47004 +
                      C521 * C46915 + C309 * C47003) *
                         C139544 +
                     (C47359 + C47358 + C47357 + C47356) * C46913) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139362 * C822 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C139362 * C823 +
                     ((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
                       C20668 * C139555) *
                          C46913 +
                      (C48342 + C48343 + C48344 + C48345) * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C48341 + C48340 + C48339 + C48338) * C46913 +
                      (C1085 * C47003 + C1378 * C46915 + C1090 * C47004 +
                       C1381 * C139555) *
                          C139544) *
                         C139362 * C823 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C139362 * C822 -
                     (((C273 * C5863 + C139480 * C6084) * C139555 +
                       (C273 * C5801 + C139480 * C5919) * C47004 +
                       C1381 * C46915 + C1090 * C47003) *
                          C139544 +
                      (C48345 + C48344 + C48343 + C48342) * C46913) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C273 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C139480) *
               C46915 +
           ((C46918 * C829 + C46913 * C837 + C46920 * C828 + C139544 * C836) *
                C273 +
            (C46918 * C1053 + C46913 * C1461 + C46920 * C1052 +
             C139544 * C1460) *
                C139480) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C46920 * C1051 + C139544 * C1459 + C46918 * C1052 +
             C46913 * C1460) *
                C139480 +
            (C46920 * C827 + C139544 * C835 + C46918 * C828 + C46913 * C836) *
                C273) *
               C139555 +
           ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C139480 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C273) *
               C46915) *
              C139362 * C139346 * C97 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C273 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C139480) *
               C46915 +
           ((C46918 * C827 + C46913 * C835 + C46920 * C833 + C139544 * C841) *
                C273 +
            (C46918 * C1051 + C46913 * C1459 + C46920 * C1057 +
             C139544 * C1465) *
                C139480) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C46920 * C2857 + C139544 * C3176 + C46918 * C1057 +
             C46913 * C1465) *
                C139480 +
            (C46920 * C2695 + C139544 * C2696 + C46918 * C833 + C46913 * C841) *
                C273) *
               C139555 +
           ((C46920 * C278 + C139544 * C581 + C46918 * C277 + C46913 * C580) *
                C139480 +
            (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
                C273) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139362 * C822 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139362 * C823 +
           (((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
            ((C46918 * C5803 + C46913 * C5806 + C46920 * C5802 +
              C139544 * C5805) *
                 C273 +
             (C46918 * C5921 + C46913 * C6139 + C46920 * C5920 +
              C139544 * C6138) *
                 C139480) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
            ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                C139555) *
               C139362 * C823 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139362 * C822 -
           (((C46920 * C5919 + C139544 * C6137 + C46918 * C5920 +
              C46913 * C6138) *
                 C139480 +
             (C46920 * C5801 + C139544 * C5804 + C46918 * C5802 +
              C46913 * C5805) *
                 C273) *
                C139555 +
            ((C48467 + C48466) * C139480 + (C48107 + C48106) * C273) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C273 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C139480) *
               C46913 +
           ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) * C139544) *
              C139362 * C139346 * C96 -
          (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
           ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
              C139362 * C139346 * C97 +
          (((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
           ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) * C139544) *
              C139362 * C139346 * C98 -
          (((C47004 * C2857 + C139555 * C3251 + C47003 * C278 + C46915 * C637) *
                C139480 +
            (C47004 * C2695 + C139555 * C2775 + C47003 * C110 + C46915 * C191) *
                C273) *
               C139544 +
           ((C47509 + C47508) * C139480 + (C47039 + C47038) * C273) * C46913) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139362 * C822 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139362 * C823 +
           (((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C46913 +
            ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
            ((C47003 * C827 + C46915 * C937 + C47004 * C832 + C139555 * C942) *
                 C273 +
             (C47003 * C1051 + C46915 * C1541 + C47004 * C1056 +
              C139555 * C1546) *
                 C139480) *
                C139544) *
               C139362 * C823 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139362 * C822 -
           (((C47004 * C5919 + C139555 * C6190 + C47003 * C1056 +
              C46915 * C1546) *
                 C139480 +
             (C47004 * C5801 + C139555 * C5863 + C47003 * C832 +
              C46915 * C942) *
                 C273) *
                C139544 +
            ((C48577 + C48576) * C139480 + (C47847 + C47846) * C273) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
            C15154 * C139555) *
               C46913 +
           (C47576 + C47577) * C139544) *
              C139362 * C139346 * C96 -
          ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) * C139362 *
              C139346 * C97 +
          ((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) * C139362 *
              C139346 * C98 -
          (((C711 * C2695 + C3336 + C3336 + C139480 * C3332) * C139555 +
            C744 * C46915) *
               C139544 +
           (C47581 + C47580) * C46913) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139362 * C822 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139362 * C823 +
           ((C15155 * C46915 + C20885 * C139555) * C46913 +
            (C48678 + C48679) * C139544) *
               C139362 * C824) *
              C825 +
          (((C48677 + C48676) * C46913 +
            (C1676 * C46915 + C1679 * C139555) * C139544) *
               C139362 * C823 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139362 * C822 -
           (((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139555 +
             C1679 * C46915) *
                C139544 +
            (C48679 + C48678) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139362 * C139560 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139362 * C139561 +
                     ((C47723 + C47722) * C139480 * C46915 +
                      (C53768 + C53769) * C139480 * C139555) *
                         C139362 * C7039) *
                        C139521 +
                    (((C47724 + C47725) * C139480 * C46915 +
                      (C47726 + C47727) * C139480 * C139555) *
                         C139362 * C139561 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139362 * C139560 -
                     ((C46919 * C5801 + C47702 + C47702 + C139544 * C5807 +
                       C46917 * C5802 + C47703 + C47703 + C46913 * C5808) *
                          C139480 * C139555 +
                      (C47727 + C47726) * C139480 * C46915) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139362 * C139560 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139362 * C139561 +
           ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C46918 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C46913 +
            (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
               C139480 * C139362 * C7039) *
              C139521 +
          (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
            (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
               C139480 * C139362 * C139561 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139362 * C139560 -
           ((C47004 * C5804 + C139555 * C5866 + C47003 * C840 + C46915 * C950) *
                C139544 +
            (C47004 * C5801 + C139555 * C5863 + C47003 * C832 + C46915 * C942) *
                C46920 +
            (C47849 + C47848) * C46913 + (C47847 + C47846) * C46918) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139362 * C139560 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C139362 * C139561 +
           ((C47955 + C47954 + C47953 + C47952) * C46915 +
            (C53902 + C53903 + C53904 + C53905) * C139555) *
               C139362 * C7039) *
              C139521 +
          (((C47956 + C47957 + C47958 + C47959) * C46915 +
            (C47960 + C47961 + C47962 + C47963) * C139555) *
               C139362 * C139561 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139362 * C139560 -
           (((C273 * C5804 + C139480 * C5922) * C139544 +
             (C273 * C5801 + C139480 * C5919) * C46920 + C14413 * C46913 +
             C14412 * C46918) *
                C139555 +
            (C47963 + C47962 + C47961 + C47960) * C46915) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139362 * C139560 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139362 * C139561 +
           ((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
            (C53980 + C53981) * C47004 + (C53982 + C53983) * C139555) *
               C139480 * C139362 * C7039) *
              C139521 +
          (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
            (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
               C139480 * C139362 * C139561 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139362 * C139560 -
           ((C46920 * C5863 + C139544 * C5975 + C46918 * C5864 +
             C46913 * C5976) *
                C139555 +
            (C46920 * C5801 + C139544 * C5804 + C46918 * C5802 +
             C46913 * C5805) *
                C47004 +
            (C48109 + C48108) * C46915 + (C48107 + C48106) * C47003) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139362 * C139560 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C139362 * C139561 +
           ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
             C48217 + C48217 + C139555 * C6030) *
                C46913 +
            (C48238 + C48239) * C139544) *
               C139480 * C139362 * C7039) *
              C139521 +
          (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
               C139480 * C139362 * C139561 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139362 * C139560 -
           ((C47240 * C5801 + C48226 + C48226 + C139555 * C6028 +
             C47239 * C832 + C48227 + C48227 + C46915 * C1252) *
                C139544 +
            (C48239 + C48238) * C46913) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139362 * C139560 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C139362 * C139561 +
                     ((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
                       C20668 * C139555) *
                          C46913 +
                      (C48342 + C48343 + C48344 + C48345) * C139544) *
                         C139362 * C7039) *
                        C139521 +
                    (((C48341 + C48340 + C48339 + C48338) * C46913 +
                      (C50298 + C50299 + C50300 + C50301) * C139544) *
                         C139362 * C139561 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C139362 * C139560 -
                     (((C273 * C5863 + C139480 * C6084) * C139555 +
                       (C273 * C5801 + C139480 * C5919) * C47004 +
                       C1381 * C46915 + C1090 * C47003) *
                          C139544 +
                      (C48345 + C48344 + C48343 + C48342) * C46913) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139362 * C139560 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139362 * C139561 +
           (((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
            ((C53980 + C53981) * C273 + (C54190 + C54191) * C139480) *
                C139555) *
               C139362 * C7039) *
              C139521 +
          ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
            ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                C139555) *
               C139362 * C139561 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139362 * C139560 -
           (((C46920 * C5919 + C139544 * C6137 + C46918 * C5920 +
              C46913 * C6138) *
                 C139480 +
             (C46920 * C5801 + C139544 * C5804 + C46918 * C5802 +
              C46913 * C5805) *
                 C273) *
                C139555 +
            ((C48467 + C48466) * C139480 + (C48107 + C48106) * C273) * C46915) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139362 * C139560 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139362 * C139561 +
           (((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C46913 +
            ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) *
                C139544) *
               C139362 * C7039) *
              C139521 +
          ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
            ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                C139544) *
               C139362 * C139561 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139362 * C139560 -
           (((C47004 * C5919 + C139555 * C6190 + C47003 * C1056 +
              C46915 * C1546) *
                 C139480 +
             (C47004 * C5801 + C139555 * C5863 + C47003 * C832 +
              C46915 * C942) *
                 C273) *
                C139544 +
            ((C48577 + C48576) * C139480 + (C47847 + C47846) * C273) * C46913) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139362 * C139560 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139362 * C139561 +
           ((C15155 * C46915 + C20885 * C139555) * C46913 +
            (C48678 + C48679) * C139544) *
               C139362 * C7039) *
              C139521 +
          (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) *
               C139362 * C139561 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139362 * C139560 -
           (((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C139555 +
             C1679 * C46915) *
                C139544 +
            (C48679 + C48678) * C46913) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139530 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139426) *
                        C139560 +
                    (((C51683 + C51682) * C139480 * C46915 +
                      (C57404 + C57405) * C139480 * C139555) *
                         C139426 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139530) *
                        C139561 +
                    (((C47723 + C47722) * C139480 * C46915 +
                      (C53768 + C53769) * C139480 * C139555) *
                         C139530 -
                     ((C46919 * C23997 + C57398 + C57398 + C139544 * C24001 +
                       C46917 * C23998 + C57399 + C57399 + C46913 * C24002) *
                          C139480 * C139555 +
                      (C57405 + C57404) * C139480 * C46915) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139530 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139426) *
              C139560 +
          (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
             C139555 * C8678) *
                C46918 +
            (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
             C139555 * C8681) *
                C46913 +
            (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
               C139480 * C139426 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139530) *
              C139561 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C46918 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C46913 +
            (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
               C139480 * C139530 -
           ((C47004 * C23999 + C139555 * C24115 + C47003 * C8594 +
             C46915 * C8680) *
                C139544 +
            (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
             C46915 * C8677) *
                C46920 +
            (C47004 * C24000 + C139555 * C24116 + C47003 * C8595 +
             C46915 * C8681) *
                C46913 +
            (C47004 * C23998 + C139555 * C24114 + C47003 * C8592 +
             C46915 * C8678) *
                C46918) *
               C139480 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C46918 +
                       (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
                       C304 * C139544) *
                          C46915 +
                      (C47948 + C47949 + C47950 + C47951) * C139555) *
                         C139530 -
                     ((C51958 + C51959 + C51960 + C51961) * C139555 +
                      (C2019 * C139544 + C2020 * C46920 +
                       (C273 * C1770 + C139480 * C1994) * C46913 +
                       (C273 * C1762 + C139480 * C1986) * C46918) *
                          C46915) *
                         C139426) *
                        C139560 +
                    (((C51961 + C51960 + C51959 + C51958) * C46915 +
                      (C57602 + C57603 + C57604 + C57605) * C139555) *
                         C139426 -
                     ((C47952 + C47953 + C47954 + C47955) * C139555 +
                      (C47951 + C47950 + C47949 + C47948) * C46915) *
                         C139530) *
                        C139561 +
                    (((C47955 + C47954 + C47953 + C47952) * C46915 +
                      (C53902 + C53903 + C53904 + C53905) * C139555) *
                         C139530 -
                     (((C273 * C23999 + C139480 * C24217) * C139544 +
                       (C273 * C23997 + C139480 * C24215) * C46920 +
                       (C273 * C24000 + C139480 * C24218) * C46913 +
                       (C273 * C23998 + C139480 * C24216) * C46918) *
                          C139555 +
                      (C57605 + C57604 + C57603 + C57602) * C46915) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139530 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139426) *
              C139560 +
          (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
            (C57712 + C57713) * C47004 + (C57714 + C57715) * C139555) *
               C139480 * C139426 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139530) *
              C139561 +
          (((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
            (C53980 + C53981) * C47004 + (C53982 + C53983) * C139555) *
               C139480 * C139530 -
           ((C46920 * C24113 + C139544 * C24327 + C46918 * C24114 +
             C46913 * C24328) *
                C139555 +
            (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
             C46913 * C24000) *
                C47004 +
            (C57715 + C57714) * C46915 + (C57713 + C57712) * C47003) *
               C139480 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C46913 +
                      (C47276 + C47277) * C139544) *
                         C139480 * C139530 -
                     ((C49238 + C49239) * C139544 +
                      (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
                       C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                          C46913) *
                         C139480 * C139426) *
                        C139560 +
                    (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
                       C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                          C46913 +
                      (C52264 + C52265) * C139544) *
                         C139480 * C139426 -
                     ((C48236 + C48237) * C139544 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C46913) *
                         C139480 * C139530) *
                        C139561 +
                    (((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C46913 +
                      (C48238 + C48239) * C139544) *
                         C139480 * C139530 -
                     ((C47240 * C23997 + C57814 + C57814 + C139555 * C24439 +
                       C47239 * C8591 + C57815 + C57815 + C46915 * C8914) *
                          C139544 +
                      (C47240 * C23998 + C57816 + C57816 + C139555 * C24440 +
                       C47239 * C8592 + C57817 + C57817 + C46915 * C8915) *
                          C46913) *
                         C139480 * C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[51] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139530 -
                     ((C49340 + C49341 + C49342 + C49343) * C139544 +
                      (C18907 * C139555 + C18465 * C47004 +
                       (C273 * C1872 + C139480 * C2292) * C46915 +
                       (C273 * C1762 + C139480 * C1986) * C47003) *
                          C46913) *
                         C139426) *
                        C139560 +
                    (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
                       C24548 * C139555) *
                          C46913 +
                      (C52396 + C52397 + C52398 + C52399) * C139544) *
                         C139426 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C139530) *
                        C139561 +
                    (((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
                       C20668 * C139555) *
                          C46913 +
                      (C48342 + C48343 + C48344 + C48345) * C139544) *
                         C139530 -
                     (((C273 * C24113 + C139480 * C24543) * C139555 +
                       (C273 * C23997 + C139480 * C24215) * C47004 +
                       C18908 * C46915 + C18466 * C47003) *
                          C139544 +
                      ((C273 * C24114 + C139480 * C24544) * C139555 +
                       (C273 * C23998 + C139480 * C24216) * C47004 +
                       C24548 * C46915 + C24226 * C47003) *
                          C46913) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139530 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139426) *
              C139560 +
          ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
            ((C57712 + C57713) * C273 + (C58018 + C58019) * C139480) *
                C139555) *
               C139426 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139530) *
              C139561 +
          ((((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
            ((C53980 + C53981) * C273 + (C54190 + C54191) * C139480) *
                C139555) *
               C139530 -
           (((C46920 * C24215 + C139544 * C24646 + C46918 * C24216 +
              C46913 * C24647) *
                 C139480 +
             (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
              C46913 * C24000) *
                 C273) *
                C139555 +
            ((C58019 + C58018) * C139480 + (C57713 + C57712) * C273) * C46915) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139530 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139426) *
              C139560 +
          ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C46913 +
            ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                C139544) *
               C139426 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139530) *
              C139561 +
          ((((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C46913 +
            ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) *
                C139544) *
               C139530 -
           (((C47004 * C24215 + C139555 * C24752 + C47003 * C8757 +
              C46915 * C9148) *
                 C139480 +
             (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
              C46915 * C8677) *
                 C273) *
                C139544 +
            ((C47004 * C24216 + C139555 * C24753 + C47003 * C8758 +
              C46915 * C9149) *
                 C139480 +
             (C47004 * C23998 + C139555 * C24114 + C47003 * C8592 +
              C46915 * C8678) *
                 C273) *
                C46913) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139530 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139426) *
              C139560 +
          (((C19327 * C46915 + C24861 * C139555) * C46913 +
            (C52808 + C52809) * C139544) *
               C139426 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139530) *
              C139561 +
          (((C15155 * C46915 + C20885 * C139555) * C46913 +
            (C48678 + C48679) * C139544) *
               C139530 -
           (((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C139555 +
             C19328 * C46915) *
                C139544 +
            ((C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C139555 +
             C24861 * C46915) *
                C46913) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] += (-std::pow(Pi, 2.5) *
                   (((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                      C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                         C139480 * C46915 +
                     (C47720 + C47721) * C139480 * C139555) *
                        C139362 * C5796 -
                    ((C47722 + C47723) * C139480 * C139555 +
                     (C47721 + C47720) * C139480 * C46915) *
                        C139362 * C5797 +
                    ((C47723 + C47722) * C139480 * C46915 +
                     (C53768 + C53769) * C139480 * C139555) *
                        C139362 * C5798 -
                    ((C46919 * C20277 + C53762 + C53762 + C139544 * C20281 +
                      C46917 * C20278 + C53763 + C53763 + C46913 * C20282) *
                         C139480 * C139555 +
                     (C53769 + C53768) * C139480 * C46915) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139362 * C139398) *
                        C5151 +
                    (((C47724 + C47725) * C139480 * C46915 +
                      (C47726 + C47727) * C139480 * C139555) *
                         C139362 * C139398 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139362 * C5149) *
                        C5152 +
                    (((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                       C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                          C139480 * C46915 +
                      (C49766 + C49767) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C46919 * C834 + C49760 + C49760 + C139544 * C850 +
                       C46917 * C832 + C49761 + C49761 + C46913 * C848) *
                          C139480 * C139555 +
                      (C49767 + C49766) * C139480 * C46915) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C1757 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C1758 +
                     ((C46917 * C1763 + C48782 + C48782 + C46913 * C1779 +
                       C46919 * C1764 + C48783 + C48783 + C139544 * C1780) *
                          C139480 * C46915 +
                      (C54432 + C54433) * C139480 * C139555) *
                         C1759) *
                        C5149 +
                    (((C51683 + C51682) * C139480 * C46915 +
                      (C46917 * C8592 + C51666 + C51666 + C46913 * C8598 +
                       C46919 * C8591 + C51667 + C51667 + C139544 * C8597) *
                          C139480 * C139555) *
                         C1758 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C1757 -
                     ((C46919 * C20983 + C54426 + C54426 + C139544 * C20987 +
                       C46917 * C20984 + C54427 + C54427 + C46913 * C20988) *
                          C139480 * C139555 +
                      (C54433 + C54432) * C139480 * C46915) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C46918 +
           (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
               C46913 +
           (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
              C139480 * C139362 * C5796 -
          ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
           (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
               C46913 +
           (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
               C46918) *
              C139480 * C139362 * C5797 +
          ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
               C46918 +
           (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
               C46913 +
           (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
              C139480 * C139362 * C5798 -
          ((C47004 * C20279 + C139555 * C20363 + C47003 * C5805 +
            C46915 * C5867) *
               C139544 +
           (C47004 * C20277 + C139555 * C20361 + C47003 * C5802 +
            C46915 * C5864) *
               C46920 +
           (C47004 * C20280 + C139555 * C20364 + C47003 * C5806 +
            C46915 * C5868) *
               C46913 +
           (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
            C46915 * C5865) *
               C46918) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139362 * C5149 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
            (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
               C139480 * C139362 * C139398 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
            (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
               C139480 * C139362 * C5149 -
           ((C47004 * C842 + C139555 * C952 + C47003 * C841 + C46915 * C951) *
                C139544 +
            (C47004 * C834 + C139555 * C944 + C47003 * C833 + C46915 * C943) *
                C46920 +
            (C49877 + C49876) * C46913 + (C49875 + C49874) * C46918) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C1757 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C1758 +
           ((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
             C139555 * C6411) *
                C46918 +
            (C47003 * C1771 + C46915 * C1881 + C47004 * C6328 +
             C139555 * C6414) *
                C46913 +
            (C48912 + C48913) * C46920 + (C48914 + C48915) * C139544) *
               C139480 * C1759) *
              C5149 +
          (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
             C139555 * C8678) *
                C46918 +
            (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
             C139555 * C8681) *
                C46913 +
            (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
               C139480 * C1758 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C1757 -
           ((C47004 * C20985 + C139555 * C21101 + C47003 * C6327 +
             C46915 * C6413) *
                C139544 +
            (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
             C46915 * C6410) *
                C46920 +
            (C47004 * C20986 + C139555 * C21102 + C47003 * C6328 +
             C46915 * C6414) *
                C46913 +
            (C47004 * C20984 + C139555 * C21100 + C47003 * C6325 +
             C46915 * C6411) *
                C46918) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C46918 +
            (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
            C304 * C139544) *
               C46915 +
           (C47948 + C47949 + C47950 + C47951) * C139555) *
              C139362 * C5796 -
          ((C47952 + C47953 + C47954 + C47955) * C139555 +
           (C47951 + C47950 + C47949 + C47948) * C46915) *
              C139362 * C5797 +
          ((C47955 + C47954 + C47953 + C47952) * C46915 +
           (C53902 + C53903 + C53904 + C53905) * C139555) *
              C139362 * C5798 -
          (((C273 * C20279 + C139480 * C20433) * C139544 +
            (C273 * C20277 + C139480 * C20431) * C46920 +
            (C273 * C20280 + C139480 * C20434) * C46913 +
            (C273 * C20278 + C139480 * C20432) * C46918) *
               C139555 +
           (C53905 + C53904 + C53903 + C53902) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139362 * C5149 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C139362 * C139398) *
              C5151 +
          (((C47956 + C47957 + C47958 + C47959) * C46915 +
            (C47960 + C47961 + C47962 + C47963) * C139555) *
               C139362 * C139398 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          (((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
                C46915 +
            (C49976 + C49977 + C49978 + C49979) * C139555) *
               C139362 * C5149 -
           (((C273 * C842 + C139480 * C1066) * C139544 +
             (C273 * C834 + C139480 * C1058) * C46920 + C1091 * C46913 +
             C1090 * C46918) *
                C139555 +
            (C49979 + C49978 + C49977 + C49976) * C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C1757 -
           ((C51958 + C51959 + C51960 + C51961) * C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C46918 +
             (C273 * C1771 + C139480 * C1995) * C46913 + C2021 * C46920 +
             C2022 * C139544) *
                C46915 +
            (C54630 + C54631 + C54632 + C54633) * C139555) *
               C1759) *
              C5149 +
          (((C51961 + C51960 + C51959 + C51958) * C46915 +
            (C24226 * C46918 + C24227 * C46913 + C18466 * C46920 +
             C18467 * C139544) *
                C139555) *
               C1758 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C1757 -
           (((C273 * C20985 + C139480 * C21203) * C139544 +
             (C273 * C20983 + C139480 * C21201) * C46920 +
             (C273 * C20986 + C139480 * C21204) * C46913 +
             (C273 * C20984 + C139480 * C21202) * C46918) *
                C139555 +
            (C54633 + C54632 + C54631 + C54630) * C46915) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C47003 +
           (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
               C46915 +
           (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
              C139480 * C139362 * C5796 -
          ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
           (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
              C139480 * C139362 * C5797 +
          ((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
           (C53980 + C53981) * C47004 + (C53982 + C53983) * C139555) *
              C139480 * C139362 * C5798 -
          ((C46920 * C20361 + C139544 * C20511 + C46918 * C20362 +
            C46913 * C20512) *
               C139555 +
           (C46920 * C20277 + C139544 * C20279 + C46918 * C20278 +
            C46913 * C20280) *
               C47004 +
           (C53983 + C53982) * C46915 + (C53981 + C53980) * C47003) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139362 * C5149 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
            (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
               C139480 * C139362 * C139398 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C47003 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C46915 +
            (C50086 + C50087) * C47004 + (C50088 + C50089) * C139555) *
               C139480 * C139362 * C5149 -
           ((C46920 * C944 + C139544 * C1172 + C46918 * C942 + C46913 * C1170) *
                C139555 +
            (C46920 * C834 + C139544 * C842 + C46918 * C832 + C46913 * C840) *
                C47004 +
            (C50089 + C50088) * C46915 + (C50087 + C50086) * C47003) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C1757 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C1758 +
           ((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
             C139544 * C1772) *
                C47003 +
            (C46918 * C1873 + C46913 * C2101 + C46920 * C1874 +
             C139544 * C2102) *
                C46915 +
            (C54740 + C54741) * C47004 + (C54742 + C54743) * C139555) *
               C139480 * C1759) *
              C5149 +
          (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
            (C46918 * C8592 + C46913 * C8595 + C46920 * C8591 +
             C139544 * C8594) *
                C47004 +
            (C46918 * C8678 + C46913 * C8838 + C46920 * C8677 +
             C139544 * C8837) *
                C139555) *
               C139480 * C1758 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C1757 -
           ((C46920 * C21099 + C139544 * C21313 + C46918 * C21100 +
             C46913 * C21314) *
                C139555 +
            (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
             C46913 * C20986) *
                C47004 +
            (C54743 + C54742) * C46915 + (C54741 + C54740) * C47003) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::pow(Pi, 2.5) *
         (((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
            C47243 + C47243 + C139555 * C1249) *
               C46913 +
           (C47276 + C47277) * C139544) *
              C139480 * C139362 * C5796 -
          ((C48236 + C48237) * C139544 +
           (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
            C48215 + C48215 + C46915 * C1249) *
               C46913) *
              C139480 * C139362 * C5797 +
          ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
            C48217 + C48217 + C139555 * C6030) *
               C46913 +
           (C48238 + C48239) * C139544) *
              C139480 * C139362 * C5798 -
          ((C47240 * C20277 + C54050 + C54050 + C139555 * C20591 +
            C47239 * C5802 + C54051 + C54051 + C46915 * C6029) *
               C139544 +
           (C47240 * C20278 + C54052 + C54052 + C139555 * C20592 +
            C47239 * C5803 + C54053 + C54053 + C46915 * C6030) *
               C46913) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139362 * C5149 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
               C139480 * C139362 * C139398 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) *
               C139480 * C139362 * C5149 -
           ((C47240 * C834 + C50192 + C50192 + C139555 * C1254 + C47239 * C833 +
             C50193 + C50193 + C46915 * C1253) *
                C139544 +
            (C50199 + C50198) * C46913) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C1757 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C1758 +
           ((C47239 * C1763 + C49218 + C49218 + C46915 * C2183 +
             C47240 * C6325 + C49219 + C49219 + C139555 * C6648) *
                C46913 +
            (C49240 + C49241) * C139544) *
               C139480 * C1759) *
              C5149 +
          (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
             C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                C46913 +
            (C52264 + C52265) * C139544) *
               C139480 * C1758 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C1757 -
           ((C47240 * C20983 + C54842 + C54842 + C139555 * C21425 +
             C47239 * C6324 + C54843 + C54843 + C46915 * C6647) *
                C139544 +
            (C47240 * C20984 + C54844 + C54844 + C139555 * C21426 +
             C47239 * C6325 + C54845 + C54845 + C46915 * C6648) *
                C46913) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C47003 +
            (C273 * C187 + C139480 * C499) * C46915 + C14408 * C47004 +
            C14805 * C139555) *
               C46913 +
           (C47348 + C47349 + C47350 + C47351) * C139544) *
              C139362 * C5796 -
          ((C48338 + C48339 + C48340 + C48341) * C139544 +
           (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
            C14408 * C47003) *
               C46913) *
              C139362 * C5797 +
          ((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
            C20668 * C139555) *
               C46913 +
           (C48342 + C48343 + C48344 + C48345) * C139544) *
              C139362 * C5798 -
          (((C273 * C20361 + C139480 * C20663) * C139555 +
            (C273 * C20277 + C139480 * C20431) * C47004 + C14807 * C46915 +
            C14412 * C47003) *
               C139544 +
           ((C273 * C20362 + C139480 * C20664) * C139555 +
            (C273 * C20278 + C139480 * C20432) * C47004 + C20668 * C46915 +
            C20442 * C47003) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C273 * C106 + C139480 * C274) * C47003 +
                                 (C273 * C187 + C139480 * C499) * C46915 +
                                 C14408 * C47004 + C14805 * C139555) *
                                    C46913 +
                                (C47348 + C47349 + C47350 + C47351) * C139544) *
                                   C139362 * C5149 -
                               ((C48338 + C48339 + C48340 + C48341) * C139544 +
                                (C14806 * C139555 + C14411 * C47004 +
                                 C14805 * C46915 + C14408 * C47003) *
                                    C46913) *
                                   C139362 * C139398) *
                                  C5151 +
                              (((C48341 + C48340 + C48339 + C48338) * C46913 +
                                (C50298 + C50299 + C50300 + C50301) * C139544) *
                                   C139362 * C139398 -
                               ((C47352 + C47353 + C47354 + C47355) * C139544 +
                                (C47351 + C47350 + C47349 + C47348) * C46913) *
                                   C139362 * C5149) *
                                  C5152 +
                              (((C47355 + C47354 + C47353 + C47352) * C46913 +
                                (C47356 + C47357 + C47358 + C47359) * C139544) *
                                   C139362 * C5149 -
                               (((C273 * C944 + C139480 * C1364) * C139555 +
                                 (C273 * C834 + C139480 * C1058) * C47004 +
                                 C3101 * C46915 + C2864 * C47003) *
                                    C139544 +
                                (C50301 + C50300 + C50299 + C50298) * C46913) *
                                   C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C47003 +
             (C273 * C187 + C139480 * C499) * C46915 + C14408 * C47004 +
             C14805 * C139555) *
                C46913 +
            (C47348 + C47349 + C47350 + C47351) * C139544) *
               C1757 -
           ((C49340 + C49341 + C49342 + C49343) * C139544 +
            (C18907 * C139555 + C18465 * C47004 +
             (C273 * C1872 + C139480 * C2292) * C46915 +
             (C273 * C1762 + C139480 * C1986) * C47003) *
                C46913) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C47003 +
             (C273 * C1873 + C139480 * C2293) * C46915 + C21212 * C47004 +
             C21534 * C139555) *
                C46913 +
            (C49344 + C49345 + C49346 + C49347) * C139544) *
               C1759) *
              C5149 +
          (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
             C24548 * C139555) *
                C46913 +
            (C52396 + C52397 + C52398 + C52399) * C139544) *
               C1758 -
           ((C48338 + C48339 + C48340 + C48341) * C139544 +
            (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
             C14408 * C47003) *
                C46913) *
               C1757 -
           (((C273 * C21099 + C139480 * C21529) * C139555 +
             (C273 * C20983 + C139480 * C21201) * C47004 + C15833 * C46915 +
             C15496 * C47003) *
                C139544 +
            ((C273 * C21100 + C139480 * C21530) * C139555 +
             (C273 * C20984 + C139480 * C21202) * C47004 + C21534 * C46915 +
             C21212 * C47003) *
                C46913) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C273 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C139480) *
               C46915 +
           ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) * C139555) *
              C139362 * C5796 -
          (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
           ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
              C139362 * C5797 +
          (((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
           ((C53980 + C53981) * C273 + (C54190 + C54191) * C139480) * C139555) *
              C139362 * C5798 -
          (((C46920 * C20431 + C139544 * C20734 + C46918 * C20432 +
             C46913 * C20735) *
                C139480 +
            (C46920 * C20277 + C139544 * C20279 + C46918 * C20278 +
             C46913 * C20280) *
                C273) *
               C139555 +
           ((C54191 + C54190) * C139480 + (C53981 + C53980) * C273) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139362 * C139398) *
              C5151 +
          ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
            ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                C139555) *
               C139362 * C139398 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C273 +
             (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                 C139480) *
                C46915 +
            ((C50086 + C50087) * C273 + (C50404 + C50405) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C46920 * C1058 + C139544 * C1466 + C46918 * C1056 +
              C46913 * C1464) *
                 C139480 +
             (C46920 * C834 + C139544 * C842 + C46918 * C832 + C46913 * C840) *
                 C273) *
                C139555 +
            ((C50405 + C50404) * C139480 + (C50087 + C50086) * C273) * C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C1757 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C1758 +
           (((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C46918 * C1987 + C46913 * C2395 + C46920 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C46915 +
            ((C54740 + C54741) * C273 + (C55046 + C55047) * C139480) *
                C139555) *
               C1759) *
              C5149 +
          ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
            ((C46918 * C8592 + C46913 * C8595 + C46920 * C8591 +
              C139544 * C8594) *
                 C273 +
             (C46918 * C8758 + C46913 * C9072 + C46920 * C8757 +
              C139544 * C9071) *
                 C139480) *
                C139555) *
               C1758 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C1757 -
           (((C46920 * C21201 + C139544 * C21632 + C46918 * C21202 +
              C46913 * C21633) *
                 C139480 +
             (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
              C46913 * C20986) *
                 C273) *
                C139555 +
            ((C55047 + C55046) * C139480 + (C54741 + C54740) * C273) * C46915) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C273 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C139480) *
               C46913 +
           ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) * C139544) *
              C139362 * C5796 -
          (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
           ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C139480 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C273) *
               C46913) *
              C139362 * C5797 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C273 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C139480) *
               C46913 +
           ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) * C139544) *
              C139362 * C5798 -
          (((C47004 * C20431 + C139555 * C20808 + C47003 * C5920 +
             C46915 * C6191) *
                C139480 +
            (C47004 * C20277 + C139555 * C20361 + C47003 * C5802 +
             C46915 * C5864) *
                C273) *
               C139544 +
           ((C47004 * C20432 + C139555 * C20809 + C47003 * C5921 +
             C46915 * C6192) *
                C139480 +
            (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
             C46915 * C5865) *
                C273) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139362 * C139398) *
              C5151 +
          ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
            ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                C139544) *
               C139362 * C139398 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139362 * C5149) *
              C5152 +
          ((((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
            ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C47004 * C1058 + C139555 * C1548 + C47003 * C1057 +
              C46915 * C1547) *
                 C139480 +
             (C47004 * C834 + C139555 * C944 + C47003 * C833 + C46915 * C943) *
                 C273) *
                C139544 +
            ((C50509 + C50508) * C139480 + (C49875 + C49874) * C273) * C46913) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C1757 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C1758 +
           (((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C47003 * C1987 + C46915 * C2477 + C47004 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C46913 +
            ((C48912 + C48913) * C273 + (C49554 + C49555) * C139480) *
                C139544) *
               C1759) *
              C5149 +
          ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C46913 +
            ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                C139544) *
               C1758 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C1757 -
           (((C47004 * C21201 + C139555 * C21738 + C47003 * C6490 +
              C46915 * C6881) *
                 C139480 +
             (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
              C46915 * C6410) *
                 C273) *
                C139544 +
            ((C47004 * C21202 + C139555 * C21739 + C47003 * C6491 +
              C46915 * C6882) *
                 C139480 +
             (C47004 * C20984 + C139555 * C21100 + C47003 * C6325 +
              C46915 * C6411) *
                 C273) *
                C46913) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
            C15154 * C139555) *
               C46913 +
           (C47576 + C47577) * C139544) *
              C139362 * C5796 -
          ((C48676 + C48677) * C139544 +
           (C15155 * C139555 + C15154 * C46915) * C46913) *
              C139362 * C5797 +
          ((C15155 * C46915 + C20885 * C139555) * C46913 +
           (C48678 + C48679) * C139544) *
              C139362 * C5798 -
          (((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C139555 +
            C15156 * C46915) *
               C139544 +
           ((C711 * C20278 + C20882 + C20882 + C139480 * C20877) * C139555 +
            C20885 * C46915) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139362 * C5149 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139362 * C139398) *
              C5151 +
          (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) *
               C139362 * C139398 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139362 * C5149) *
              C5152 +
          (((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) *
               C139362 * C5149 -
           (((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139555 +
             C3339 * C46915) *
                C139544 +
            (C50609 + C50608) * C46913) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C1757 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C1758 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C46915 +
             C21847 * C139555) *
                C46913 +
            (C49656 + C49657) * C139544) *
               C1759) *
              C5149 +
          (((C19327 * C46915 + C24861 * C139555) * C46913 +
            (C52808 + C52809) * C139544) *
               C1758 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C1757 -
           (((C711 * C20983 + C21843 + C21843 + C139480 * C21838) * C139555 +
             C16148 * C46915) *
                C139544 +
            ((C711 * C20984 + C21844 + C21844 + C139480 * C21839) * C139555 +
             C21847 * C46915) *
                C46913) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                        C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                           C139480 * C46915 +
                       (C47720 + C47721) * C139480 * C139555) *
                          C139530 -
                      ((C51682 + C51683) * C139480 * C139555 +
                       (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                        C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                           C139480 * C46915) *
                          C139426) *
                         C5149 +
                     (((C51683 + C51682) * C139480 * C46915 +
                       (C46917 * C8592 + C51666 + C51666 + C46913 * C8598 +
                        C46919 * C8591 + C51667 + C51667 + C139544 * C8597) *
                           C139480 * C139555) *
                          C139426 -
                      ((C47722 + C47723) * C139480 * C139555 +
                       (C47721 + C47720) * C139480 * C46915) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                        C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                           C139480 * C46915 +
                       (C51684 + C51685) * C139480 * C139555) *
                          C139426 -
                      ((C47725 + C47724) * C139480 * C139555 +
                       (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                        C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                           C139480 * C46915) *
                          C139530) *
                         C5149 +
                     (((C47724 + C47725) * C139480 * C46915 +
                       (C47726 + C47727) * C139480 * C139555) *
                          C139530 -
                      ((C46919 * C8590 + C51672 + C51672 + C139544 * C8596 +
                        C46917 * C8591 + C51673 + C51673 + C46913 * C8597) *
                           C139480 * C139555 +
                       (C51685 + C51684) * C139480 * C46915) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C46918 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C46913 +
             (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
                C139480 * C139530 -
            ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
             (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
              C46915 * C1880) *
                 C46913 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C46918) *
                C139480 * C139426) *
               C5149 +
           (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C46918 +
             (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
              C139555 * C8681) *
                 C46913 +
             (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
                C139480 * C139426 -
            ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
             (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C46913 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C46918) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
             (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
                C139480 * C139426 -
            ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
             (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
                C139480 * C139530) *
               C5149 +
           (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
             (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
                C139480 * C139530 -
            ((C47004 * C8593 + C139555 * C8679 + C47003 * C4165 +
              C46915 * C4281) *
                 C139544 +
             (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
              C46915 * C4277) *
                 C46920 +
             (C51827 + C51826) * C46913 + (C51825 + C51824) * C46918) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C46918 +
              (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
              C304 * C139544) *
                 C46915 +
             (C47948 + C47949 + C47950 + C47951) * C139555) *
                C139530 -
            ((C51958 + C51959 + C51960 + C51961) * C139555 +
             (C2019 * C139544 + C2020 * C46920 +
              (C273 * C1770 + C139480 * C1994) * C46913 +
              (C273 * C1762 + C139480 * C1986) * C46918) *
                 C46915) *
                C139426) *
               C5149 +
           (((C51961 + C51960 + C51959 + C51958) * C46915 +
             (C24226 * C46918 + C24227 * C46913 + C18466 * C46920 +
              C18467 * C139544) *
                 C139555) *
                C139426 -
            ((C47952 + C47953 + C47954 + C47955) * C139555 +
             (C47951 + C47950 + C47949 + C47948) * C46915) *
                C139530) *
               C139398) *
              C139521 +
          ((((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
              C2017 * C139544) *
                 C46915 +
             (C51962 + C51963 + C51964 + C51965) * C139555) *
                C139426 -
            ((C47959 + C47958 + C47957 + C47956) * C139555 +
             (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                 C46915) *
                C139530) *
               C5149 +
           (((C47956 + C47957 + C47958 + C47959) * C46915 +
             (C47960 + C47961 + C47962 + C47963) * C139555) *
                C139530 -
            (((C273 * C8593 + C139480 * C8759) * C139544 +
              (C273 * C8590 + C139480 * C8756) * C46920 + C18467 * C46913 +
              C18466 * C46918) *
                 C139555 +
             (C51965 + C51964 + C51963 + C51962) * C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C47003 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C46915 +
             (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
                C139480 * C139530 -
            ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
             (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
              C46913 * C2100) *
                 C46915 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C47003) *
                C139480 * C139426) *
               C5149 +
           (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
             (C46918 * C8592 + C46913 * C8595 + C46920 * C8591 +
              C139544 * C8594) *
                 C47004 +
             (C46918 * C8678 + C46913 * C8838 + C46920 * C8677 +
              C139544 * C8837) *
                 C139555) *
                C139480 * C139426 -
            ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
             (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C47003 +
             (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
              C139544 * C2098) *
                 C46915 +
             (C52116 + C52117) * C47004 + (C52118 + C52119) * C139555) *
                C139480 * C139426 -
            ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
             (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C46915 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C47003) *
                C139480 * C139530) *
               C5149 +
           (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
             (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
                C139480 * C139530 -
            ((C46920 * C8676 + C139544 * C8836 + C46918 * C8677 +
              C46913 * C8837) *
                 C139555 +
             (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
              C46913 * C8594) *
                 C47004 +
             (C52119 + C52118) * C46915 + (C52117 + C52116) * C47003) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
              C47243 + C47243 + C139555 * C1249) *
                 C46913 +
             (C47276 + C47277) * C139544) *
                C139480 * C139530 -
            ((C49238 + C49239) * C139544 +
             (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
              C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                 C46913) *
                C139480 * C139426) *
               C5149 +
           (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
              C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                 C46913 +
             (C52264 + C52265) * C139544) *
                C139480 * C139426 -
            ((C48236 + C48237) * C139544 +
             (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
              C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                 C46913) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
                C139480 * C139426 -
            ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
                C139480 * C139530) *
               C5149 +
           (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
                C139480 * C139530 -
            ((C47240 * C8590 + C52258 + C52258 + C139555 * C8913 +
              C47239 * C4161 + C52259 + C52259 + C46915 * C4615) *
                 C139544 +
             (C52265 + C52264) * C46913) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C273 * C106 + C139480 * C274) * C47003 +
                        (C273 * C187 + C139480 * C499) * C46915 +
                        C14408 * C47004 + C14805 * C139555) *
                           C46913 +
                       (C47348 + C47349 + C47350 + C47351) * C139544) *
                          C139530 -
                      ((C49340 + C49341 + C49342 + C49343) * C139544 +
                       (C18907 * C139555 + C18465 * C47004 +
                        (C273 * C1872 + C139480 * C2292) * C46915 +
                        (C273 * C1762 + C139480 * C1986) * C47003) *
                           C46913) *
                          C139426) *
                         C5149 +
                     (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
                        C24548 * C139555) *
                           C46913 +
                       (C52396 + C52397 + C52398 + C52399) * C139544) *
                          C139426 -
                      ((C48338 + C48339 + C48340 + C48341) * C139544 +
                       (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                        C14408 * C47003) *
                           C46913) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C49343 + C49342 + C49341 + C49340) * C46913 +
                       (C51226 + C51227 + C51228 + C51229) * C139544) *
                          C139426 -
                      ((C47352 + C47353 + C47354 + C47355) * C139544 +
                       (C47351 + C47350 + C47349 + C47348) * C46913) *
                          C139530) *
                         C5149 +
                     (((C48341 + C48340 + C48339 + C48338) * C46913 +
                       (C50298 + C50299 + C50300 + C50301) * C139544) *
                          C139530 -
                      (((C273 * C8676 + C139480 * C8993) * C139555 +
                        (C273 * C8590 + C139480 * C8756) * C47004 +
                        C4741 * C46915 + C4412 * C47003) *
                           C139544 +
                       (C52399 + C52398 + C52397 + C52396) * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                  C273 +
              (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                  C139480) *
                 C46915 +
             ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                 C139555) *
                C139530 -
            (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) *
                 C139555 +
             ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
               C46913 * C2394) *
                  C139480 +
              (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
               C46913 * C1770) *
                  C273) *
                 C46915) *
                C139426) *
               C5149 +
           ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
             ((C46918 * C8592 + C46913 * C8595 + C46920 * C8591 +
               C139544 * C8594) *
                  C273 +
              (C46918 * C8758 + C46913 * C9072 + C46920 * C8757 +
               C139544 * C9071) *
                  C139480) *
                 C139555) *
                C139426 -
            (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) *
                 C139555 +
             ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) *
                 C46915) *
                C139530) *
               C139398) *
              C139521 +
          (((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
               C139544 * C1768) *
                  C273 +
              (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
               C139544 * C2392) *
                  C139480) *
                 C46915 +
             ((C52116 + C52117) * C273 + (C52540 + C52541) * C139480) *
                 C139555) *
                C139426 -
            (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) *
                 C139555 +
             ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                  C139480 +
              (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                  C273) *
                 C46915) *
                C139530) *
               C5149 +
           ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
             ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                 C139555) *
                C139530 -
            (((C46920 * C8756 + C139544 * C9070 + C46918 * C8757 +
               C46913 * C9071) *
                  C139480 +
              (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
               C46913 * C8594) *
                  C273) *
                 C139555 +
             ((C52541 + C52540) * C139480 + (C52117 + C52116) * C273) *
                 C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                  C273 +
              (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
               C139555 * C1543) *
                  C139480) *
                 C46913 +
             ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                 C139544) *
                C139530 -
            (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) *
                 C139544 +
             ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
               C46915 * C2476) *
                  C139480 +
              (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
               C46915 * C1872) *
                  C273) *
                 C46913) *
                C139426) *
               C5149 +
           ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
               C139555 * C8678) *
                  C273 +
              (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
               C139555 * C9149) *
                  C139480) *
                 C46913 +
             ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                 C139544) *
                C139426 -
            (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) *
                 C139544 +
             ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
               C46915 * C1543) *
                  C139480 +
              (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                  C273) *
                 C46913) *
                C139530) *
               C139398) *
              C139521 +
          (((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
             ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                 C139544) *
                C139426 -
            (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) *
                 C139544 +
             ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) *
                 C46913) *
                C139530) *
               C5149 +
           ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
             ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                 C139544) *
                C139530 -
            (((C47004 * C8756 + C139555 * C9147 + C47003 * C4395 +
               C46915 * C4945) *
                  C139480 +
              (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
               C46915 * C4277) *
                  C273) *
                 C139544 +
             ((C52677 + C52676) * C139480 + (C51825 + C51824) * C273) *
                 C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
              C15154 * C139555) *
                 C46913 +
             (C47576 + C47577) * C139544) *
                C139530 -
            ((C49654 + C49655) * C139544 +
             (C19327 * C139555 +
              (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                 C46913) *
                C139426) *
               C5149 +
           (((C19327 * C46915 + C24861 * C139555) * C46913 +
             (C52808 + C52809) * C139544) *
                C139426 -
            ((C48676 + C48677) * C139544 +
             (C15155 * C139555 + C15154 * C46915) * C46913) *
                C139530) *
               C139398) *
              C139521 +
          ((((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
                C139426 -
            ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
                C139530) *
               C5149 +
           (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) *
                C139530 -
            (((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139555 +
              C5073 * C46915) *
                 C139544 +
             (C52809 + C52808) * C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139362 * C139398) *
                        C5151 +
                    (((C47724 + C47725) * C139480 * C46915 +
                      (C47726 + C47727) * C139480 * C139555) *
                         C139362 * C139398 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139362 * C5149) *
                        C5152 +
                    (((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                       C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                          C139480 * C46915 +
                      (C49766 + C49767) * C139480 * C139555) *
                         C139362 * C5149 -
                     ((C46919 * C834 + C49760 + C49760 + C139544 * C850 +
                       C46917 * C832 + C49761 + C49761 + C46913 * C848) *
                          C139480 * C139555 +
                      (C49767 + C49766) * C139480 * C46915) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                      C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                         C139480 * C46915 +
                     (C47720 + C47721) * C139480 * C139555) *
                        C139362 * C5796 -
                    ((C47722 + C47723) * C139480 * C139555 +
                     (C47721 + C47720) * C139480 * C46915) *
                        C139362 * C5797 +
                    ((C47723 + C47722) * C139480 * C46915 +
                     (C53768 + C53769) * C139480 * C139555) *
                        C139362 * C5798 -
                    ((C46919 * C20277 + C53762 + C53762 + C139544 * C20281 +
                      C46917 * C20278 + C53763 + C53763 + C46913 * C20282) *
                         C139480 * C139555 +
                     (C53769 + C53768) * C139480 * C46915) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139362 * C5149 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
            (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
               C139480 * C139362 * C139398 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
            (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
               C139480 * C139362 * C5149 -
           ((C47004 * C842 + C139555 * C952 + C47003 * C841 + C46915 * C951) *
                C139544 +
            (C47004 * C834 + C139555 * C944 + C47003 * C833 + C46915 * C943) *
                C46920 +
            (C49877 + C49876) * C46913 + (C49875 + C49874) * C46918) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C46918 +
           (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
               C46913 +
           (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
              C139480 * C139362 * C5796 -
          ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
           (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
               C46913 +
           (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
               C46918) *
              C139480 * C139362 * C5797 +
          ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
               C46918 +
           (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
               C46913 +
           (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
              C139480 * C139362 * C5798 -
          ((C47004 * C20279 + C139555 * C20363 + C47003 * C5805 +
            C46915 * C5867) *
               C139544 +
           (C47004 * C20277 + C139555 * C20361 + C47003 * C5802 +
            C46915 * C5864) *
               C46920 +
           (C47004 * C20280 + C139555 * C20364 + C47003 * C5806 +
            C46915 * C5868) *
               C46913 +
           (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
            C46915 * C5865) *
               C46918) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139362 * C5149 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C139362 * C139398) *
              C5151 +
          (((C47956 + C47957 + C47958 + C47959) * C46915 +
            (C47960 + C47961 + C47962 + C47963) * C139555) *
               C139362 * C139398 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          (((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
                C46915 +
            (C49976 + C49977 + C49978 + C49979) * C139555) *
               C139362 * C5149 -
           (((C273 * C842 + C139480 * C1066) * C139544 +
             (C273 * C834 + C139480 * C1058) * C46920 + C1091 * C46913 +
             C1090 * C46918) *
                C139555 +
            (C49979 + C49978 + C49977 + C49976) * C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C46918 +
            (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
            C304 * C139544) *
               C46915 +
           (C47948 + C47949 + C47950 + C47951) * C139555) *
              C139362 * C5796 -
          ((C47952 + C47953 + C47954 + C47955) * C139555 +
           (C47951 + C47950 + C47949 + C47948) * C46915) *
              C139362 * C5797 +
          ((C47955 + C47954 + C47953 + C47952) * C46915 +
           (C53902 + C53903 + C53904 + C53905) * C139555) *
              C139362 * C5798 -
          (((C273 * C20279 + C139480 * C20433) * C139544 +
            (C273 * C20277 + C139480 * C20431) * C46920 +
            (C273 * C20280 + C139480 * C20434) * C46913 +
            (C273 * C20278 + C139480 * C20432) * C46918) *
               C139555 +
           (C53905 + C53904 + C53903 + C53902) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139362 * C5149 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
            (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
               C139480 * C139362 * C139398 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C47003 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C46915 +
            (C50086 + C50087) * C47004 + (C50088 + C50089) * C139555) *
               C139480 * C139362 * C5149 -
           ((C46920 * C944 + C139544 * C1172 + C46918 * C942 + C46913 * C1170) *
                C139555 +
            (C46920 * C834 + C139544 * C842 + C46918 * C832 + C46913 * C840) *
                C47004 +
            (C50089 + C50088) * C46915 + (C50087 + C50086) * C47003) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C47003 +
           (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
               C46915 +
           (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
              C139480 * C139362 * C5796 -
          ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
           (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
              C139480 * C139362 * C5797 +
          ((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
           (C53980 + C53981) * C47004 + (C53982 + C53983) * C139555) *
              C139480 * C139362 * C5798 -
          ((C46920 * C20361 + C139544 * C20511 + C46918 * C20362 +
            C46913 * C20512) *
               C139555 +
           (C46920 * C20277 + C139544 * C20279 + C46918 * C20278 +
            C46913 * C20280) *
               C47004 +
           (C53983 + C53982) * C46915 + (C53981 + C53980) * C47003) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139362 * C5149 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C139362 * C139398) *
              C5151 +
          (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
               C139480 * C139362 * C139398 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) *
               C139480 * C139362 * C5149 -
           ((C47240 * C834 + C50192 + C50192 + C139555 * C1254 + C47239 * C833 +
             C50193 + C50193 + C46915 * C1253) *
                C139544 +
            (C50199 + C50198) * C46913) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
            C47243 + C47243 + C139555 * C1249) *
               C46913 +
           (C47276 + C47277) * C139544) *
              C139480 * C139362 * C5796 -
          ((C48236 + C48237) * C139544 +
           (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
            C48215 + C48215 + C46915 * C1249) *
               C46913) *
              C139480 * C139362 * C5797 +
          ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
            C48217 + C48217 + C139555 * C6030) *
               C46913 +
           (C48238 + C48239) * C139544) *
              C139480 * C139362 * C5798 -
          ((C47240 * C20277 + C54050 + C54050 + C139555 * C20591 +
            C47239 * C5802 + C54051 + C54051 + C46915 * C6029) *
               C139544 +
           (C47240 * C20278 + C54052 + C54052 + C139555 * C20592 +
            C47239 * C5803 + C54053 + C54053 + C46915 * C6030) *
               C46913) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139362 * C5149 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C139362 * C139398) *
                        C5151 +
                    (((C48341 + C48340 + C48339 + C48338) * C46913 +
                      (C50298 + C50299 + C50300 + C50301) * C139544) *
                         C139362 * C139398 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C139362 * C5149) *
                        C5152 +
                    (((C47355 + C47354 + C47353 + C47352) * C46913 +
                      (C47356 + C47357 + C47358 + C47359) * C139544) *
                         C139362 * C5149 -
                     (((C273 * C944 + C139480 * C1364) * C139555 +
                       (C273 * C834 + C139480 * C1058) * C47004 +
                       C3101 * C46915 + C2864 * C47003) *
                          C139544 +
                      (C50301 + C50300 + C50299 + C50298) * C46913) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C47003 +
                      (C273 * C187 + C139480 * C499) * C46915 +
                      C14408 * C47004 + C14805 * C139555) *
                         C46913 +
                     (C47348 + C47349 + C47350 + C47351) * C139544) *
                        C139362 * C5796 -
                    ((C48338 + C48339 + C48340 + C48341) * C139544 +
                     (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                      C14408 * C47003) *
                         C46913) *
                        C139362 * C5797 +
                    ((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
                      C20668 * C139555) *
                         C46913 +
                     (C48342 + C48343 + C48344 + C48345) * C139544) *
                        C139362 * C5798 -
                    (((C273 * C20361 + C139480 * C20663) * C139555 +
                      (C273 * C20277 + C139480 * C20431) * C47004 +
                      C14807 * C46915 + C14412 * C47003) *
                         C139544 +
                     ((C273 * C20362 + C139480 * C20664) * C139555 +
                      (C273 * C20278 + C139480 * C20432) * C47004 +
                      C20668 * C46915 + C20442 * C47003) *
                         C46913) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139362 * C139398) *
              C5151 +
          ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
            ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                C139555) *
               C139362 * C139398 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C273 +
             (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                 C139480) *
                C46915 +
            ((C50086 + C50087) * C273 + (C50404 + C50405) * C139480) *
                C139555) *
               C139362 * C5149 -
           (((C46920 * C1058 + C139544 * C1466 + C46918 * C1056 +
              C46913 * C1464) *
                 C139480 +
             (C46920 * C834 + C139544 * C842 + C46918 * C832 + C46913 * C840) *
                 C273) *
                C139555 +
            ((C50405 + C50404) * C139480 + (C50087 + C50086) * C273) * C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C273 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C139480) *
               C46915 +
           ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) * C139555) *
              C139362 * C5796 -
          (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
           ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
              C139362 * C5797 +
          (((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
           ((C53980 + C53981) * C273 + (C54190 + C54191) * C139480) * C139555) *
              C139362 * C5798 -
          (((C46920 * C20431 + C139544 * C20734 + C46918 * C20432 +
             C46913 * C20735) *
                C139480 +
            (C46920 * C20277 + C139544 * C20279 + C46918 * C20278 +
             C46913 * C20280) *
                C273) *
               C139555 +
           ((C54191 + C54190) * C139480 + (C53981 + C53980) * C273) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139362 * C139398) *
              C5151 +
          ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
            ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                C139544) *
               C139362 * C139398 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139362 * C5149) *
              C5152 +
          ((((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
            ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) *
                C139544) *
               C139362 * C5149 -
           (((C47004 * C1058 + C139555 * C1548 + C47003 * C1057 +
              C46915 * C1547) *
                 C139480 +
             (C47004 * C834 + C139555 * C944 + C47003 * C833 + C46915 * C943) *
                 C273) *
                C139544 +
            ((C50509 + C50508) * C139480 + (C49875 + C49874) * C273) * C46913) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C273 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C139480) *
               C46913 +
           ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) * C139544) *
              C139362 * C5796 -
          (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
           ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C139480 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C273) *
               C46913) *
              C139362 * C5797 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C273 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C139480) *
               C46913 +
           ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) * C139544) *
              C139362 * C5798 -
          (((C47004 * C20431 + C139555 * C20808 + C47003 * C5920 +
             C46915 * C6191) *
                C139480 +
            (C47004 * C20277 + C139555 * C20361 + C47003 * C5802 +
             C46915 * C5864) *
                C273) *
               C139544 +
           ((C47004 * C20432 + C139555 * C20809 + C47003 * C5921 +
             C46915 * C6192) *
                C139480 +
            (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
             C46915 * C5865) *
                C273) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139362 * C5149 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139362 * C139398) *
              C5151 +
          (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) *
               C139362 * C139398 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139362 * C5149) *
              C5152 +
          (((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) *
               C139362 * C5149 -
           (((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C139555 +
             C3339 * C46915) *
                C139544 +
            (C50609 + C50608) * C46913) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
            C15154 * C139555) *
               C46913 +
           (C47576 + C47577) * C139544) *
              C139362 * C5796 -
          ((C48676 + C48677) * C139544 +
           (C15155 * C139555 + C15154 * C46915) * C46913) *
              C139362 * C5797 +
          ((C15155 * C46915 + C20885 * C139555) * C46913 +
           (C48678 + C48679) * C139544) *
              C139362 * C5798 -
          (((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C139555 +
            C15156 * C46915) *
               C139544 +
           ((C711 * C20278 + C20882 + C20882 + C139480 * C20877) * C139555 +
            C20885 * C46915) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                        C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                           C139480 * C46915 +
                       (C47720 + C47721) * C139480 * C139555) *
                          C9304 -
                      ((C51682 + C51683) * C139480 * C139555 +
                       (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                        C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                           C139480 * C46915) *
                          C139426) *
                         C139529 +
                     (((C51683 + C51682) * C139480 * C46915 +
                       (C57404 + C57405) * C139480 * C139555) *
                          C139426 -
                      ((C47722 + C47723) * C139480 * C139555 +
                       (C47721 + C47720) * C139480 * C46915) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                        C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                           C139480 * C46915 +
                       (C51684 + C51685) * C139480 * C139555) *
                          C139426 -
                      ((C47725 + C47724) * C139480 * C139555 +
                       (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                        C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                           C139480 * C46915) *
                          C9304) *
                         C139529 +
                     (((C47724 + C47725) * C139480 * C46915 +
                       (C47726 + C47727) * C139480 * C139555) *
                          C9304 -
                      ((C46919 * C8590 + C51672 + C51672 + C139544 * C8596 +
                        C46917 * C8591 + C51673 + C51673 + C46913 * C8597) *
                           C139480 * C139555 +
                       (C51685 + C51684) * C139480 * C46915) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C46918 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C46913 +
             (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
                C139480 * C9304 -
            ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
             (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
              C46915 * C1880) *
                 C46913 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C46918) *
                C139480 * C139426) *
               C139529 +
           (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C46918 +
             (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
              C139555 * C8681) *
                 C46913 +
             (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
                C139480 * C139426 -
            ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
             (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C46913 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C46918) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
             (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
                C139480 * C139426 -
            ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
             (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
                C139480 * C9304) *
               C139529 +
           (((C47845 + C47844) * C46918 + (C47843 + C47842) * C46913 +
             (C49874 + C49875) * C46920 + (C49876 + C49877) * C139544) *
                C139480 * C9304 -
            ((C47004 * C8593 + C139555 * C8679 + C47003 * C4165 +
              C46915 * C4281) *
                 C139544 +
             (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
              C46915 * C4277) *
                 C46920 +
             (C51827 + C51826) * C46913 + (C51825 + C51824) * C46918) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C46918 +
              (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
              C304 * C139544) *
                 C46915 +
             (C47948 + C47949 + C47950 + C47951) * C139555) *
                C9304 -
            ((C51958 + C51959 + C51960 + C51961) * C139555 +
             (C2019 * C139544 + C2020 * C46920 +
              (C273 * C1770 + C139480 * C1994) * C46913 +
              (C273 * C1762 + C139480 * C1986) * C46918) *
                 C46915) *
                C139426) *
               C139529 +
           (((C51961 + C51960 + C51959 + C51958) * C46915 +
             (C57602 + C57603 + C57604 + C57605) * C139555) *
                C139426 -
            ((C47952 + C47953 + C47954 + C47955) * C139555 +
             (C47951 + C47950 + C47949 + C47948) * C46915) *
                C9304) *
               C139398) *
              C139521 +
          ((((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
              C2017 * C139544) *
                 C46915 +
             (C51962 + C51963 + C51964 + C51965) * C139555) *
                C139426 -
            ((C47959 + C47958 + C47957 + C47956) * C139555 +
             (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                 C46915) *
                C9304) *
               C139529 +
           (((C47956 + C47957 + C47958 + C47959) * C46915 +
             (C47960 + C47961 + C47962 + C47963) * C139555) *
                C9304 -
            (((C273 * C8593 + C139480 * C8759) * C139544 +
              (C273 * C8590 + C139480 * C8756) * C46920 + C18467 * C46913 +
              C18466 * C46918) *
                 C139555 +
             (C51965 + C51964 + C51963 + C51962) * C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C47003 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C46915 +
             (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
                C139480 * C9304 -
            ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
             (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
              C46913 * C2100) *
                 C46915 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C47003) *
                C139480 * C139426) *
               C139529 +
           (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
             (C57712 + C57713) * C47004 + (C57714 + C57715) * C139555) *
                C139480 * C139426 -
            ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
             (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C47003 +
             (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
              C139544 * C2098) *
                 C46915 +
             (C52116 + C52117) * C47004 + (C52118 + C52119) * C139555) *
                C139480 * C139426 -
            ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
             (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C46915 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C47003) *
                C139480 * C9304) *
               C139529 +
           (((C48102 + C48103) * C47003 + (C48104 + C48105) * C46915 +
             (C48106 + C48107) * C47004 + (C48108 + C48109) * C139555) *
                C139480 * C9304 -
            ((C46920 * C8676 + C139544 * C8836 + C46918 * C8677 +
              C46913 * C8837) *
                 C139555 +
             (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
              C46913 * C8594) *
                 C47004 +
             (C52119 + C52118) * C46915 + (C52117 + C52116) * C47003) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
              C47243 + C47243 + C139555 * C1249) *
                 C46913 +
             (C47276 + C47277) * C139544) *
                C139480 * C9304 -
            ((C49238 + C49239) * C139544 +
             (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
              C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                 C46913) *
                C139480 * C139426) *
               C139529 +
           (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
              C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                 C46913 +
             (C52264 + C52265) * C139544) *
                C139480 * C139426 -
            ((C48236 + C48237) * C139544 +
             (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
              C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                 C46913) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
                C139480 * C139426 -
            ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
                C139480 * C9304) *
               C139529 +
           (((C48237 + C48236) * C46913 + (C50198 + C50199) * C139544) *
                C139480 * C9304 -
            ((C47240 * C8590 + C52258 + C52258 + C139555 * C8913 +
              C47239 * C4161 + C52259 + C52259 + C46915 * C4615) *
                 C139544 +
             (C52265 + C52264) * C46913) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C273 * C106 + C139480 * C274) * C47003 +
                        (C273 * C187 + C139480 * C499) * C46915 +
                        C14408 * C47004 + C14805 * C139555) *
                           C46913 +
                       (C47348 + C47349 + C47350 + C47351) * C139544) *
                          C9304 -
                      ((C49340 + C49341 + C49342 + C49343) * C139544 +
                       (C18907 * C139555 + C18465 * C47004 +
                        (C273 * C1872 + C139480 * C2292) * C46915 +
                        (C273 * C1762 + C139480 * C1986) * C47003) *
                           C46913) *
                          C139426) *
                         C139529 +
                     (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
                        C24548 * C139555) *
                           C46913 +
                       (C52396 + C52397 + C52398 + C52399) * C139544) *
                          C139426 -
                      ((C48338 + C48339 + C48340 + C48341) * C139544 +
                       (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                        C14408 * C47003) *
                           C46913) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C49343 + C49342 + C49341 + C49340) * C46913 +
                       (C51226 + C51227 + C51228 + C51229) * C139544) *
                          C139426 -
                      ((C47352 + C47353 + C47354 + C47355) * C139544 +
                       (C47351 + C47350 + C47349 + C47348) * C46913) *
                          C9304) *
                         C139529 +
                     (((C48341 + C48340 + C48339 + C48338) * C46913 +
                       (C50298 + C50299 + C50300 + C50301) * C139544) *
                          C9304 -
                      (((C273 * C8676 + C139480 * C8993) * C139555 +
                        (C273 * C8590 + C139480 * C8756) * C47004 +
                        C4741 * C46915 + C4412 * C47003) *
                           C139544 +
                       (C52399 + C52398 + C52397 + C52396) * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                  C273 +
              (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                  C139480) *
                 C46915 +
             ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                 C139555) *
                C9304 -
            (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) *
                 C139555 +
             ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
               C46913 * C2394) *
                  C139480 +
              (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
               C46913 * C1770) *
                  C273) *
                 C46915) *
                C139426) *
               C139529 +
           ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
             ((C57712 + C57713) * C273 + (C58018 + C58019) * C139480) *
                 C139555) *
                C139426 -
            (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) *
                 C139555 +
             ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) *
                 C46915) *
                C9304) *
               C139398) *
              C139521 +
          (((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
               C139544 * C1768) *
                  C273 +
              (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
               C139544 * C2392) *
                  C139480) *
                 C46915 +
             ((C52116 + C52117) * C273 + (C52540 + C52541) * C139480) *
                 C139555) *
                C139426 -
            (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) *
                 C139555 +
             ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                  C139480 +
              (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                  C273) *
                 C46915) *
                C9304) *
               C139529 +
           ((((C48102 + C48103) * C273 + (C48464 + C48465) * C139480) * C46915 +
             ((C48106 + C48107) * C273 + (C48466 + C48467) * C139480) *
                 C139555) *
                C9304 -
            (((C46920 * C8756 + C139544 * C9070 + C46918 * C8757 +
               C46913 * C9071) *
                  C139480 +
              (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
               C46913 * C8594) *
                  C273) *
                 C139555 +
             ((C52541 + C52540) * C139480 + (C52117 + C52116) * C273) *
                 C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                  C273 +
              (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
               C139555 * C1543) *
                  C139480) *
                 C46913 +
             ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                 C139544) *
                C9304 -
            (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) *
                 C139544 +
             ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
               C46915 * C2476) *
                  C139480 +
              (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
               C46915 * C1872) *
                  C273) *
                 C46913) *
                C139426) *
               C139529 +
           ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
               C139555 * C8678) *
                  C273 +
              (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
               C139555 * C9149) *
                  C139480) *
                 C46913 +
             ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                 C139544) *
                C139426 -
            (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) *
                 C139544 +
             ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
               C46915 * C1543) *
                  C139480 +
              (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                  C273) *
                 C46913) *
                C9304) *
               C139398) *
              C139521 +
          (((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
             ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                 C139544) *
                C139426 -
            (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) *
                 C139544 +
             ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) *
                 C46913) *
                C9304) *
               C139529 +
           ((((C47845 + C47844) * C273 + (C48575 + C48574) * C139480) * C46913 +
             ((C49874 + C49875) * C273 + (C50508 + C50509) * C139480) *
                 C139544) *
                C9304 -
            (((C47004 * C8756 + C139555 * C9147 + C47003 * C4395 +
               C46915 * C4945) *
                  C139480 +
              (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
               C46915 * C4277) *
                  C273) *
                 C139544 +
             ((C52677 + C52676) * C139480 + (C51825 + C51824) * C273) *
                 C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
              C15154 * C139555) *
                 C46913 +
             (C47576 + C47577) * C139544) *
                C9304 -
            ((C49654 + C49655) * C139544 +
             (C19327 * C139555 +
              (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                 C46913) *
                C139426) *
               C139529 +
           (((C19327 * C46915 + C24861 * C139555) * C46913 +
             (C52808 + C52809) * C139544) *
                C139426 -
            ((C48676 + C48677) * C139544 +
             (C15155 * C139555 + C15154 * C46915) * C46913) *
                C9304) *
               C139398) *
              C139521 +
          ((((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
                C139426 -
            ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
                C9304) *
               C139529 +
           (((C48677 + C48676) * C46913 + (C50608 + C50609) * C139544) * C9304 -
            (((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C139555 +
              C5073 * C46915) *
                 C139544 +
             (C52809 + C52808) * C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139562 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139563 +
                     ((C46917 * C1763 + C48782 + C48782 + C46913 * C1779 +
                       C46919 * C1764 + C48783 + C48783 + C139544 * C1780) *
                          C139480 * C46915 +
                      (C54432 + C54433) * C139480 * C139555) *
                         C12024) *
                        C139529 +
                    (((C51683 + C51682) * C139480 * C46915 +
                      (C57404 + C57405) * C139480 * C139555) *
                         C139563 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C139562 -
                     ((C46919 * C20983 + C54426 + C54426 + C139544 * C20987 +
                       C46917 * C20984 + C54427 + C54427 + C46913 * C20988) *
                          C139480 * C139555 +
                      (C54433 + C54432) * C139480 * C46915) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139562 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139563 +
           ((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
             C139555 * C6411) *
                C46918 +
            (C47003 * C1771 + C46915 * C1881 + C47004 * C6328 +
             C139555 * C6414) *
                C46913 +
            (C48912 + C48913) * C46920 + (C48914 + C48915) * C139544) *
               C139480 * C12024) *
              C139529 +
          (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
             C139555 * C8678) *
                C46918 +
            (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
             C139555 * C8681) *
                C46913 +
            (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
               C139480 * C139563 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C139562 -
           ((C47004 * C20985 + C139555 * C21101 + C47003 * C6327 +
             C46915 * C6413) *
                C139544 +
            (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
             C46915 * C6410) *
                C46920 +
            (C47004 * C20986 + C139555 * C21102 + C47003 * C6328 +
             C46915 * C6414) *
                C46913 +
            (C47004 * C20984 + C139555 * C21100 + C47003 * C6325 +
             C46915 * C6411) *
                C46918) *
               C139480 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C46918 +
                       (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
                       C304 * C139544) *
                          C46915 +
                      (C47948 + C47949 + C47950 + C47951) * C139555) *
                         C139562 -
                     ((C51958 + C51959 + C51960 + C51961) * C139555 +
                      (C2019 * C139544 + C2020 * C46920 +
                       (C273 * C1770 + C139480 * C1994) * C46913 +
                       (C273 * C1762 + C139480 * C1986) * C46918) *
                          C46915) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C46918 +
                       (C273 * C1771 + C139480 * C1995) * C46913 +
                       C2021 * C46920 + C2022 * C139544) *
                          C46915 +
                      (C54630 + C54631 + C54632 + C54633) * C139555) *
                         C12024) *
                        C139529 +
                    (((C51961 + C51960 + C51959 + C51958) * C46915 +
                      (C57602 + C57603 + C57604 + C57605) * C139555) *
                         C139563 -
                     ((C47952 + C47953 + C47954 + C47955) * C139555 +
                      (C47951 + C47950 + C47949 + C47948) * C46915) *
                         C139562 -
                     (((C273 * C20985 + C139480 * C21203) * C139544 +
                       (C273 * C20983 + C139480 * C21201) * C46920 +
                       (C273 * C20986 + C139480 * C21204) * C46913 +
                       (C273 * C20984 + C139480 * C21202) * C46918) *
                          C139555 +
                      (C54633 + C54632 + C54631 + C54630) * C46915) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139562 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139563 +
           ((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
             C139544 * C1772) *
                C47003 +
            (C46918 * C1873 + C46913 * C2101 + C46920 * C1874 +
             C139544 * C2102) *
                C46915 +
            (C54740 + C54741) * C47004 + (C54742 + C54743) * C139555) *
               C139480 * C12024) *
              C139529 +
          (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
            (C57712 + C57713) * C47004 + (C57714 + C57715) * C139555) *
               C139480 * C139563 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C139562 -
           ((C46920 * C21099 + C139544 * C21313 + C46918 * C21100 +
             C46913 * C21314) *
                C139555 +
            (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
             C46913 * C20986) *
                C47004 +
            (C54743 + C54742) * C46915 + (C54741 + C54740) * C47003) *
               C139480 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C46913 +
                      (C47276 + C47277) * C139544) *
                         C139480 * C139562 -
                     ((C49238 + C49239) * C139544 +
                      (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
                       C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                          C46913) *
                         C139480 * C139563 +
                     ((C47239 * C1763 + C49218 + C49218 + C46915 * C2183 +
                       C47240 * C6325 + C49219 + C49219 + C139555 * C6648) *
                          C46913 +
                      (C49240 + C49241) * C139544) *
                         C139480 * C12024) *
                        C139529 +
                    (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
                       C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                          C46913 +
                      (C52264 + C52265) * C139544) *
                         C139480 * C139563 -
                     ((C48236 + C48237) * C139544 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C46913) *
                         C139480 * C139562 -
                     ((C47240 * C20983 + C54842 + C54842 + C139555 * C21425 +
                       C47239 * C6324 + C54843 + C54843 + C46915 * C6647) *
                          C139544 +
                      (C47240 * C20984 + C54844 + C54844 + C139555 * C21426 +
                       C47239 * C6325 + C54845 + C54845 + C46915 * C6648) *
                          C46913) *
                         C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[56] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139562 -
                     ((C49340 + C49341 + C49342 + C49343) * C139544 +
                      (C18907 * C139555 + C18465 * C47004 +
                       (C273 * C1872 + C139480 * C2292) * C46915 +
                       (C273 * C1762 + C139480 * C1986) * C47003) *
                          C46913) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C47003 +
                       (C273 * C1873 + C139480 * C2293) * C46915 +
                       C21212 * C47004 + C21534 * C139555) *
                          C46913 +
                      (C49344 + C49345 + C49346 + C49347) * C139544) *
                         C12024) *
                        C139529 +
                    (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
                       C24548 * C139555) *
                          C46913 +
                      (C52396 + C52397 + C52398 + C52399) * C139544) *
                         C139563 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C139562 -
                     (((C273 * C21099 + C139480 * C21529) * C139555 +
                       (C273 * C20983 + C139480 * C21201) * C47004 +
                       C15833 * C46915 + C15496 * C47003) *
                          C139544 +
                      ((C273 * C21100 + C139480 * C21530) * C139555 +
                       (C273 * C20984 + C139480 * C21202) * C47004 +
                       C21534 * C46915 + C21212 * C47003) *
                          C46913) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139562 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139563 +
           (((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C46918 * C1987 + C46913 * C2395 + C46920 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C46915 +
            ((C54740 + C54741) * C273 + (C55046 + C55047) * C139480) *
                C139555) *
               C12024) *
              C139529 +
          ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
            ((C57712 + C57713) * C273 + (C58018 + C58019) * C139480) *
                C139555) *
               C139563 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C139562 -
           (((C46920 * C21201 + C139544 * C21632 + C46918 * C21202 +
              C46913 * C21633) *
                 C139480 +
             (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
              C46913 * C20986) *
                 C273) *
                C139555 +
            ((C55047 + C55046) * C139480 + (C54741 + C54740) * C273) * C46915) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139562 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139563 +
           (((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C47003 * C1987 + C46915 * C2477 + C47004 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C46913 +
            ((C48912 + C48913) * C273 + (C49554 + C49555) * C139480) *
                C139544) *
               C12024) *
              C139529 +
          ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C46913 +
            ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                C139544) *
               C139563 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C139562 -
           (((C47004 * C21201 + C139555 * C21738 + C47003 * C6490 +
              C46915 * C6881) *
                 C139480 +
             (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
              C46915 * C6410) *
                 C273) *
                C139544 +
            ((C47004 * C21202 + C139555 * C21739 + C47003 * C6491 +
              C46915 * C6882) *
                 C139480 +
             (C47004 * C20984 + C139555 * C21100 + C47003 * C6325 +
              C46915 * C6411) *
                 C273) *
                C46913) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139562 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139563 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C46915 +
             C21847 * C139555) *
                C46913 +
            (C49656 + C49657) * C139544) *
               C12024) *
              C139529 +
          (((C19327 * C46915 + C24861 * C139555) * C46913 +
            (C52808 + C52809) * C139544) *
               C139563 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C139562 -
           (((C711 * C20983 + C21843 + C21843 + C139480 * C21838) * C139555 +
             C16148 * C46915) *
                C139544 +
            ((C711 * C20984 + C21844 + C21844 + C139480 * C21839) * C139555 +
             C21847 * C46915) *
                C46913) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] += (-std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C9304 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139426) *
                        C822 +
                    (((C51683 + C51682) * C139480 * C46915 +
                      (C57404 + C57405) * C139480 * C139555) *
                         C139426 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C9304) *
                        C823 +
                    (((C47723 + C47722) * C139480 * C46915 +
                      (C53768 + C53769) * C139480 * C139555) *
                         C9304 -
                     ((C46919 * C23997 + C57398 + C57398 + C139544 * C24001 +
                       C46917 * C23998 + C57399 + C57399 + C46913 * C24002) *
                          C139480 * C139555 +
                      (C57405 + C57404) * C139480 * C46915) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C9304 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139426) *
                        C139346 * C5151 +
                    (((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                       C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                          C139480 * C46915 +
                      (C51684 + C51685) * C139480 * C139555) *
                         C139426 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C9304) *
                        C139346 * C5152 +
                    (((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                       C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                          C139480 * C46915 +
                      (C49766 + C49767) * C139480 * C139555) *
                         C9304 -
                     ((C46919 * C4162 + C50708 + C50708 + C139544 * C4170 +
                       C46917 * C4161 + C50709 + C50709 + C46913 * C4169) *
                          C139480 * C139555 +
                      (C46919 * C1766 + C50710 + C50710 + C139544 * C1782 +
                       C46917 * C1760 + C50711 + C50711 + C46913 * C1776) *
                          C139480 * C46915) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                      C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                         C139480 * C46915 +
                     (C47720 + C47721) * C139480 * C139555) *
                        C10614 -
                    ((C51682 + C51683) * C139480 * C139555 +
                     (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                      C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                         C139480 * C46915) *
                        C10615 +
                    ((C46917 * C1763 + C48782 + C48782 + C46913 * C1779 +
                      C46919 * C1764 + C48783 + C48783 + C139544 * C1780) *
                         C139480 * C46915 +
                     (C54432 + C54433) * C139480 * C139555) *
                        C10616 -
                    ((C46919 * C26691 + C60046 + C60046 + C139544 * C26695 +
                      C46917 * C26692 + C60047 + C60047 + C46913 * C26696) *
                         C139480 * C139555 +
                     (C46919 * C10619 + C60048 + C60048 + C139544 * C10625 +
                      C46917 * C10620 + C60049 + C60049 + C46913 * C10626) *
                         C139480 * C46915) *
                        C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C9304 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139426) *
              C822 +
          (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
             C139555 * C8678) *
                C46918 +
            (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
             C139555 * C8681) *
                C46913 +
            (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
               C139480 * C139426 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C9304) *
              C823 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C46918 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C46913 +
            (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
               C139480 * C9304 -
           ((C47004 * C23999 + C139555 * C24115 + C47003 * C8594 +
             C46915 * C8680) *
                C139544 +
            (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
             C46915 * C8677) *
                C46920 +
            (C47004 * C24000 + C139555 * C24116 + C47003 * C8595 +
             C46915 * C8681) *
                C46913 +
            (C47004 * C23998 + C139555 * C24114 + C47003 * C8592 +
             C46915 * C8678) *
                C46918) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C9304 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
            (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
               C139480 * C139426 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
            (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
               C139480 * C9304 -
           ((C47004 * C4166 + C139555 * C4282 + C47003 * C1774 +
             C46915 * C1884) *
                C139544 +
            (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
             C46915 * C1876) *
                C46920 +
            (C50821 + C50820) * C46913 + (C50819 + C50818) * C46918) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C46918 +
           (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
               C46913 +
           (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
              C139480 * C10614 -
          ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
           (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
            C46915 * C1880) *
               C46913 +
           (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
            C46915 * C1872) *
               C46918) *
              C139480 * C10615 +
          ((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
            C139555 * C6411) *
               C46918 +
           (C47003 * C1771 + C46915 * C1881 + C47004 * C6328 +
            C139555 * C6414) *
               C46913 +
           (C48912 + C48913) * C46920 + (C48914 + C48915) * C139544) *
              C139480 * C10616 -
          ((C47004 * C26693 + C139555 * C26769 + C47003 * C10622 +
            C46915 * C10684) *
               C139544 +
           (C47004 * C26691 + C139555 * C26767 + C47003 * C10619 +
            C46915 * C10681) *
               C46920 +
           (C47004 * C26694 + C139555 * C26770 + C47003 * C10623 +
            C46915 * C10685) *
               C46913 +
           (C47004 * C26692 + C139555 * C26768 + C47003 * C10620 +
            C46915 * C10682) *
               C46918) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C9304 -
           ((C51958 + C51959 + C51960 + C51961) * C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C139426) *
              C822 +
          (((C51961 + C51960 + C51959 + C51958) * C46915 +
            (C57602 + C57603 + C57604 + C57605) * C139555) *
               C139426 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C9304) *
              C823 +
          (((C47955 + C47954 + C47953 + C47952) * C46915 +
            (C53902 + C53903 + C53904 + C53905) * C139555) *
               C9304 -
           (((C273 * C23999 + C139480 * C24217) * C139544 +
             (C273 * C23997 + C139480 * C24215) * C46920 +
             (C273 * C24000 + C139480 * C24218) * C46913 +
             (C273 * C23998 + C139480 * C24216) * C46918) *
                C139555 +
            (C57605 + C57604 + C57603 + C57602) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C9304 -
           ((C51958 + C51959 + C51960 + C51961) * C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C139426) *
              C139346 * C5151 +
          (((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
             C2017 * C139544) *
                C46915 +
            (C51962 + C51963 + C51964 + C51965) * C139555) *
               C139426 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          (((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
                C46915 +
            (C49976 + C49977 + C49978 + C49979) * C139555) *
               C9304 -
           (((C273 * C4166 + C139480 * C4400) * C139544 +
             (C273 * C4162 + C139480 * C4396) * C46920 + C4413 * C46913 +
             C4412 * C46918) *
                C139555 +
            (C3586 * C139544 + C3585 * C46920 + C2017 * C46913 +
             C2018 * C46918) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C46918 +
            (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
            C304 * C139544) *
               C46915 +
           (C47948 + C47949 + C47950 + C47951) * C139555) *
              C10614 -
          ((C51958 + C51959 + C51960 + C51961) * C139555 +
           (C2019 * C139544 + C2020 * C46920 +
            (C273 * C1770 + C139480 * C1994) * C46913 +
            (C273 * C1762 + C139480 * C1986) * C46918) *
               C46915) *
              C10615 +
          (((C273 * C1763 + C139480 * C1987) * C46918 +
            (C273 * C1771 + C139480 * C1995) * C46913 + C2021 * C46920 +
            C2022 * C139544) *
               C46915 +
           (C54630 + C54631 + C54632 + C54633) * C139555) *
              C10616 -
          (((C273 * C26693 + C139480 * C26839) * C139544 +
            (C273 * C26691 + C139480 * C26837) * C46920 +
            (C273 * C26694 + C139480 * C26840) * C46913 +
            (C273 * C26692 + C139480 * C26838) * C46918) *
               C139555 +
           ((C273 * C10622 + C139480 * C10740) * C139544 +
            (C273 * C10619 + C139480 * C10737) * C46920 +
            (C273 * C10623 + C139480 * C10741) * C46913 +
            (C273 * C10620 + C139480 * C10738) * C46918) *
               C46915) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C9304 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139426) *
              C822 +
          (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
            (C57712 + C57713) * C47004 + (C57714 + C57715) * C139555) *
               C139480 * C139426 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C9304) *
              C823 +
          (((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
            (C53980 + C53981) * C47004 + (C53982 + C53983) * C139555) *
               C139480 * C9304 -
           ((C46920 * C24113 + C139544 * C24327 + C46918 * C24114 +
             C46913 * C24328) *
                C139555 +
            (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
             C46913 * C24000) *
                C47004 +
            (C57715 + C57714) * C46915 + (C57713 + C57712) * C47003) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C9304 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
             C139544 * C1768) *
                C47003 +
            (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
             C139544 * C2098) *
                C46915 +
            (C52116 + C52117) * C47004 + (C52118 + C52119) * C139555) *
               C139480 * C139426 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C47003 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C46915 +
            (C50086 + C50087) * C47004 + (C50088 + C50089) * C139555) *
               C139480 * C9304 -
           ((C46920 * C4278 + C139544 * C4514 + C46918 * C4277 +
             C46913 * C4513) *
                C139555 +
            (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
             C46913 * C4165) *
                C47004 +
            (C46920 * C1876 + C139544 * C2104 + C46918 * C1870 +
             C46913 * C2098) *
                C46915 +
            (C46920 * C1766 + C139544 * C1774 + C46918 * C1760 +
             C46913 * C1768) *
                C47003) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C47003 +
           (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
               C46915 +
           (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
              C139480 * C10614 -
          ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
           (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
            C46913 * C2100) *
               C46915 +
           (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
            C46913 * C1770) *
               C47003) *
              C139480 * C10615 +
          ((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
            C139544 * C1772) *
               C47003 +
           (C46918 * C1873 + C46913 * C2101 + C46920 * C1874 +
            C139544 * C2102) *
               C46915 +
           (C54740 + C54741) * C47004 + (C54742 + C54743) * C139555) *
              C139480 * C10616 -
          ((C46920 * C26767 + C139544 * C26907 + C46918 * C26768 +
            C46913 * C26908) *
               C139555 +
           (C46920 * C26691 + C139544 * C26693 + C46918 * C26692 +
            C46913 * C26694) *
               C47004 +
           (C46920 * C10681 + C139544 * C10793 + C46918 * C10682 +
            C46913 * C10794) *
               C46915 +
           (C46920 * C10619 + C139544 * C10622 + C46918 * C10620 +
            C46913 * C10623) *
               C47003) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C9304 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C139426) *
              C822 +
          (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
             C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                C46913 +
            (C52264 + C52265) * C139544) *
               C139480 * C139426 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C9304) *
              C823 +
          (((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
             C48217 + C48217 + C139555 * C6030) *
                C46913 +
            (C48238 + C48239) * C139544) *
               C139480 * C9304 -
           ((C47240 * C23997 + C57814 + C57814 + C139555 * C24439 +
             C47239 * C8591 + C57815 + C57815 + C46915 * C8914) *
                C139544 +
            (C47240 * C23998 + C57816 + C57816 + C139555 * C24440 +
             C47239 * C8592 + C57817 + C57817 + C46915 * C8915) *
                C46913) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C9304 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
               C139480 * C139426 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) *
               C139480 * C9304 -
           ((C47240 * C4162 + C51120 + C51120 + C139555 * C4616 +
             C47239 * C1766 + C51121 + C51121 + C46915 * C2186) *
                C139544 +
            (C51127 + C51126) * C46913) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
            C47243 + C47243 + C139555 * C1249) *
               C46913 +
           (C47276 + C47277) * C139544) *
              C139480 * C10614 -
          ((C49238 + C49239) * C139544 +
           (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
            C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
               C46913) *
              C139480 * C10615 +
          ((C47239 * C1763 + C49218 + C49218 + C46915 * C2183 + C47240 * C6325 +
            C49219 + C49219 + C139555 * C6648) *
               C46913 +
           (C49240 + C49241) * C139544) *
              C139480 * C10616 -
          ((C47240 * C26691 + C60314 + C60314 + C139555 * C26975 +
            C47239 * C10619 + C60315 + C60315 + C46915 * C10846) *
               C139544 +
           (C47240 * C26692 + C60316 + C60316 + C139555 * C26976 +
            C47239 * C10620 + C60317 + C60317 + C46915 * C10847) *
               C46913) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C47003 +
             (C273 * C187 + C139480 * C499) * C46915 + C14408 * C47004 +
             C14805 * C139555) *
                C46913 +
            (C47348 + C47349 + C47350 + C47351) * C139544) *
               C9304 -
           ((C49340 + C49341 + C49342 + C49343) * C139544 +
            (C18907 * C139555 + C18465 * C47004 +
             (C273 * C1872 + C139480 * C2292) * C46915 +
             (C273 * C1762 + C139480 * C1986) * C47003) *
                C46913) *
               C139426) *
              C822 +
          (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
             C24548 * C139555) *
                C46913 +
            (C52396 + C52397 + C52398 + C52399) * C139544) *
               C139426 -
           ((C48338 + C48339 + C48340 + C48341) * C139544 +
            (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
             C14408 * C47003) *
                C46913) *
               C9304) *
              C823 +
          (((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
             C20668 * C139555) *
                C46913 +
            (C48342 + C48343 + C48344 + C48345) * C139544) *
               C9304 -
           (((C273 * C24113 + C139480 * C24543) * C139555 +
             (C273 * C23997 + C139480 * C24215) * C47004 + C18908 * C46915 +
             C18466 * C47003) *
                C139544 +
            ((C273 * C24114 + C139480 * C24544) * C139555 +
             (C273 * C23998 + C139480 * C24216) * C47004 + C24548 * C46915 +
             C24226 * C47003) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C273 * C106 + C139480 * C274) * C47003 +
                                 (C273 * C187 + C139480 * C499) * C46915 +
                                 C14408 * C47004 + C14805 * C139555) *
                                    C46913 +
                                (C47348 + C47349 + C47350 + C47351) * C139544) *
                                   C9304 -
                               ((C49340 + C49341 + C49342 + C49343) * C139544 +
                                (C18907 * C139555 + C18465 * C47004 +
                                 (C273 * C1872 + C139480 * C2292) * C46915 +
                                 (C273 * C1762 + C139480 * C1986) * C47003) *
                                    C46913) *
                                   C139426) *
                                  C139346 * C5151 +
                              (((C49343 + C49342 + C49341 + C49340) * C46913 +
                                (C51226 + C51227 + C51228 + C51229) * C139544) *
                                   C139426 -
                               ((C47352 + C47353 + C47354 + C47355) * C139544 +
                                (C47351 + C47350 + C47349 + C47348) * C46913) *
                                   C9304) *
                                  C139346 * C5152 +
                              (((C47355 + C47354 + C47353 + C47352) * C46913 +
                                (C47356 + C47357 + C47358 + C47359) * C139544) *
                                   C9304 -
                               (((C273 * C4278 + C139480 * C4732) * C139555 +
                                 (C273 * C4162 + C139480 * C4396) * C47004 +
                                 C3822 * C46915 + C3585 * C47003) *
                                    C139544 +
                                (C51229 + C51228 + C51227 + C51226) * C46913) *
                                   C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C47003 +
            (C273 * C187 + C139480 * C499) * C46915 + C14408 * C47004 +
            C14805 * C139555) *
               C46913 +
           (C47348 + C47349 + C47350 + C47351) * C139544) *
              C10614 -
          ((C49340 + C49341 + C49342 + C49343) * C139544 +
           (C18907 * C139555 + C18465 * C47004 +
            (C273 * C1872 + C139480 * C2292) * C46915 +
            (C273 * C1762 + C139480 * C1986) * C47003) *
               C46913) *
              C10615 +
          (((C273 * C1763 + C139480 * C1987) * C47003 +
            (C273 * C1873 + C139480 * C2293) * C46915 + C21212 * C47004 +
            C21534 * C139555) *
               C46913 +
           (C49344 + C49345 + C49346 + C49347) * C139544) *
              C10616 -
          (((C273 * C26767 + C139480 * C27047) * C139555 +
            (C273 * C26691 + C139480 * C26837) * C47004 +
            (C273 * C10681 + C139480 * C10902) * C46915 +
            (C273 * C10619 + C139480 * C10737) * C47003) *
               C139544 +
           ((C273 * C26768 + C139480 * C27048) * C139555 +
            (C273 * C26692 + C139480 * C26838) * C47004 +
            (C273 * C10682 + C139480 * C10903) * C46915 +
            (C273 * C10620 + C139480 * C10738) * C47003) *
               C46913) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C9304 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139426) *
              C822 +
          ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
            ((C57712 + C57713) * C273 + (C58018 + C58019) * C139480) *
                C139555) *
               C139426 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C9304) *
              C823 +
          ((((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
            ((C53980 + C53981) * C273 + (C54190 + C54191) * C139480) *
                C139555) *
               C9304 -
           (((C46920 * C24215 + C139544 * C24646 + C46918 * C24216 +
              C46913 * C24647) *
                 C139480 +
             (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
              C46913 * C24000) *
                 C273) *
                C139555 +
            ((C58019 + C58018) * C139480 + (C57713 + C57712) * C273) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C9304 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139426) *
              C139346 * C5151 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C46915 +
            ((C52116 + C52117) * C273 + (C52540 + C52541) * C139480) *
                C139555) *
               C139426 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C273 +
             (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                 C139480) *
                C46915 +
            ((C50086 + C50087) * C273 + (C50404 + C50405) * C139480) *
                C139555) *
               C9304 -
           (((C46920 * C4396 + C139544 * C4844 + C46918 * C4395 +
              C46913 * C4843) *
                 C139480 +
             (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
              C46913 * C4165) *
                 C273) *
                C139555 +
            ((C46920 * C1990 + C139544 * C2398 + C46918 * C1984 +
              C46913 * C2392) *
                 C139480 +
             (C46920 * C1766 + C139544 * C1774 + C46918 * C1760 +
              C46913 * C1768) *
                 C273) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C273 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C139480) *
               C46915 +
           ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) * C139555) *
              C10614 -
          (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
           ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
             C46913 * C2394) *
                C139480 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C273) *
               C46915) *
              C10615 +
          (((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
             C139544 * C1772) *
                C273 +
            (C46918 * C1987 + C46913 * C2395 + C46920 * C1988 +
             C139544 * C2396) *
                C139480) *
               C46915 +
           ((C54740 + C54741) * C273 + (C55046 + C55047) * C139480) * C139555) *
              C10616 -
          (((C46920 * C26837 + C139544 * C27115 + C46918 * C26838 +
             C46913 * C27116) *
                C139480 +
            (C46920 * C26691 + C139544 * C26693 + C46918 * C26692 +
             C46913 * C26694) *
                C273) *
               C139555 +
           ((C46920 * C10737 + C139544 * C10955 + C46918 * C10738 +
             C46913 * C10956) *
                C139480 +
            (C46920 * C10619 + C139544 * C10622 + C46918 * C10620 +
             C46913 * C10623) *
                C273) *
               C46915) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C9304 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139426) *
              C822 +
          ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C46913 +
            ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                C139544) *
               C139426 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C9304) *
              C823 +
          ((((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C46913 +
            ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) *
                C139544) *
               C9304 -
           (((C47004 * C24215 + C139555 * C24752 + C47003 * C8757 +
              C46915 * C9148) *
                 C139480 +
             (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
              C46915 * C8677) *
                 C273) *
                C139544 +
            ((C47004 * C24216 + C139555 * C24753 + C47003 * C8758 +
              C46915 * C9149) *
                 C139480 +
             (C47004 * C23998 + C139555 * C24114 + C47003 * C8592 +
              C46915 * C8678) *
                 C273) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C9304 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139426) *
              C139346 * C5151 +
          ((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
            ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                C139544) *
               C139426 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C9304) *
              C139346 * C5152 +
          ((((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
            ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) *
                C139544) *
               C9304 -
           (((C47004 * C4396 + C139555 * C4946 + C47003 * C1990 +
              C46915 * C2480) *
                 C139480 +
             (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
              C46915 * C1876) *
                 C273) *
                C139544 +
            ((C51431 + C51430) * C139480 + (C50819 + C50818) * C273) * C46913) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C273 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C139480) *
               C46913 +
           ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) * C139544) *
              C10614 -
          (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
           ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
             C46915 * C2476) *
                C139480 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C273) *
               C46913) *
              C10615 +
          (((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
             C139555 * C6411) *
                C273 +
            (C47003 * C1987 + C46915 * C2477 + C47004 * C6491 +
             C139555 * C6882) *
                C139480) *
               C46913 +
           ((C48912 + C48913) * C273 + (C49554 + C49555) * C139480) * C139544) *
              C10616 -
          (((C47004 * C26837 + C139555 * C27183 + C47003 * C10737 +
             C46915 * C11008) *
                C139480 +
            (C47004 * C26691 + C139555 * C26767 + C47003 * C10619 +
             C46915 * C10681) *
                C273) *
               C139544 +
           ((C47004 * C26838 + C139555 * C27184 + C47003 * C10738 +
             C46915 * C11009) *
                C139480 +
            (C47004 * C26692 + C139555 * C26768 + C47003 * C10620 +
             C46915 * C10682) *
                C273) *
               C46913) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C9304 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139426) *
              C822 +
          (((C19327 * C46915 + C24861 * C139555) * C46913 +
            (C52808 + C52809) * C139544) *
               C139426 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C9304) *
              C823 +
          (((C15155 * C46915 + C20885 * C139555) * C46913 +
            (C48678 + C48679) * C139544) *
               C9304 -
           (((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C139555 +
             C19328 * C46915) *
                C139544 +
            ((C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C139555 +
             C24861 * C46915) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C9304 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139426) *
              C139346 * C5151 +
          (((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
               C139426 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) * C9304) *
              C139346 * C5152 +
          (((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) * C9304 -
           (((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139555 +
             C4060 * C46915) *
                C139544 +
            (C51531 + C51530) * C46913) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
            C15154 * C139555) *
               C46913 +
           (C47576 + C47577) * C139544) *
              C10614 -
          ((C49654 + C49655) * C139544 +
           (C19327 * C139555 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
               C46913) *
              C10615 +
          (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C46915 +
            C21847 * C139555) *
               C46913 +
           (C49656 + C49657) * C139544) *
              C10616 -
          (((C711 * C26691 + C27254 + C27254 + C139480 * C27251) * C139555 +
            (C711 * C10619 + C11065 + C11065 + C139480 * C11061) * C46915) *
               C139544 +
           ((C711 * C26692 + C27255 + C27255 + C139480 * C27252) * C139555 +
            (C711 * C10620 + C11066 + C11066 + C139480 * C11062) * C46915) *
               C46913) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C139562 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139563 +
                     ((C46917 * C1763 + C48782 + C48782 + C46913 * C1779 +
                       C46919 * C1764 + C48783 + C48783 + C139544 * C1780) *
                          C139480 * C46915 +
                      (C54432 + C54433) * C139480 * C139555) *
                         C12024) *
                        C139346 * C139521 +
                    (((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                       C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                          C139480 * C46915 +
                      (C51684 + C51685) * C139480 * C139555) *
                         C139563 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C139562 -
                     ((C46919 * C6323 + C48790 + C48790 + C139544 * C6329 +
                       C46917 * C6324 + C48791 + C48791 + C46913 * C6330) *
                          C139480 * C139555 +
                      (C46919 * C1765 + C48792 + C48792 + C139544 * C1781 +
                       C46917 * C1764 + C48793 + C48793 + C46913 * C1780) *
                          C139480 * C46915) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C139562 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139563 +
           ((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
             C139555 * C6411) *
                C46918 +
            (C47003 * C1771 + C46915 * C1881 + C47004 * C6328 +
             C139555 * C6414) *
                C46913 +
            (C48912 + C48913) * C46920 + (C48914 + C48915) * C139544) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
            (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
               C139480 * C139563 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C139562 -
           ((C47004 * C6326 + C139555 * C6412 + C47003 * C1773 +
             C46915 * C1883) *
                C139544 +
            (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
             C46915 * C1875) *
                C46920 +
            (C48915 + C48914) * C46913 + (C48913 + C48912) * C46918) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C139562 -
           ((C51958 + C51959 + C51960 + C51961) * C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C139563 +
           (((C273 * C1763 + C139480 * C1987) * C46918 +
             (C273 * C1771 + C139480 * C1995) * C46913 + C2021 * C46920 +
             C2022 * C139544) *
                C46915 +
            (C54630 + C54631 + C54632 + C54633) * C139555) *
               C12024) *
              C139346 * C139521 +
          (((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
             C2017 * C139544) *
                C46915 +
            (C51962 + C51963 + C51964 + C51965) * C139555) *
               C139563 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C139562 -
           (((C273 * C6326 + C139480 * C6492) * C139544 +
             (C273 * C6323 + C139480 * C6489) * C46920 + C15497 * C46913 +
             C15496 * C46918) *
                C139555 +
            (C2024 * C139544 + C2023 * C46920 + C2022 * C46913 +
             C2021 * C46918) *
                C46915) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C139562 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139563 +
           ((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
             C139544 * C1772) *
                C47003 +
            (C46918 * C1873 + C46913 * C2101 + C46920 * C1874 +
             C139544 * C2102) *
                C46915 +
            (C54740 + C54741) * C47004 + (C54742 + C54743) * C139555) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
             C139544 * C1768) *
                C47003 +
            (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
             C139544 * C2098) *
                C46915 +
            (C52116 + C52117) * C47004 + (C52118 + C52119) * C139555) *
               C139480 * C139563 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C139562 -
           ((C46920 * C6409 + C139544 * C6569 + C46918 * C6410 +
             C46913 * C6570) *
                C139555 +
            (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
             C46913 * C6327) *
                C47004 +
            (C46920 * C1875 + C139544 * C2103 + C46918 * C1874 +
             C46913 * C2102) *
                C46915 +
            (C46920 * C1765 + C139544 * C1773 + C46918 * C1764 +
             C46913 * C1772) *
                C47003) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C139562 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C139563 +
           ((C47239 * C1763 + C49218 + C49218 + C46915 * C2183 +
             C47240 * C6325 + C49219 + C49219 + C139555 * C6648) *
                C46913 +
            (C49240 + C49241) * C139544) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
               C139480 * C139563 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C139562 -
           ((C47240 * C6323 + C49228 + C49228 + C139555 * C6646 +
             C47239 * C1765 + C49229 + C49229 + C46915 * C2185) *
                C139544 +
            (C49241 + C49240) * C46913) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C139562 -
                     ((C49340 + C49341 + C49342 + C49343) * C139544 +
                      (C18907 * C139555 + C18465 * C47004 +
                       (C273 * C1872 + C139480 * C2292) * C46915 +
                       (C273 * C1762 + C139480 * C1986) * C47003) *
                          C46913) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C47003 +
                       (C273 * C1873 + C139480 * C2293) * C46915 +
                       C21212 * C47004 + C21534 * C139555) *
                          C46913 +
                      (C49344 + C49345 + C49346 + C49347) * C139544) *
                         C12024) *
                        C139346 * C139521 +
                    (((C49343 + C49342 + C49341 + C49340) * C46913 +
                      (C51226 + C51227 + C51228 + C51229) * C139544) *
                         C139563 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C139562 -
                     (((C273 * C6409 + C139480 * C6726) * C139555 +
                       (C273 * C6323 + C139480 * C6489) * C47004 +
                       C2314 * C46915 + C2023 * C47003) *
                          C139544 +
                      (C49347 + C49346 + C49345 + C49344) * C46913) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C139562 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139563 +
           (((C46918 * C1763 + C46913 * C1771 + C46920 * C1764 +
              C139544 * C1772) *
                 C273 +
             (C46918 * C1987 + C46913 * C2395 + C46920 * C1988 +
              C139544 * C2396) *
                 C139480) *
                C46915 +
            ((C54740 + C54741) * C273 + (C55046 + C55047) * C139480) *
                C139555) *
               C12024) *
              C139346 * C139521 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C46915 +
            ((C52116 + C52117) * C273 + (C52540 + C52541) * C139480) *
                C139555) *
               C139563 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C139562 -
           (((C46920 * C6489 + C139544 * C6803 + C46918 * C6490 +
              C46913 * C6804) *
                 C139480 +
             (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
              C46913 * C6327) *
                 C273) *
                C139555 +
            ((C46920 * C1989 + C139544 * C2397 + C46918 * C1988 +
              C46913 * C2396) *
                 C139480 +
             (C46920 * C1765 + C139544 * C1773 + C46918 * C1764 +
              C46913 * C1772) *
                 C273) *
                C46915) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C139562 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139563 +
           (((C47003 * C1763 + C46915 * C1873 + C47004 * C6325 +
              C139555 * C6411) *
                 C273 +
             (C47003 * C1987 + C46915 * C2477 + C47004 * C6491 +
              C139555 * C6882) *
                 C139480) *
                C46913 +
            ((C48912 + C48913) * C273 + (C49554 + C49555) * C139480) *
                C139544) *
               C12024) *
              C139346 * C139521 +
          ((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
            ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                C139544) *
               C139563 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C139562 -
           (((C47004 * C6489 + C139555 * C6880 + C47003 * C1989 +
              C46915 * C2479) *
                 C139480 +
             (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
              C46915 * C1875) *
                 C273) *
                C139544 +
            ((C49555 + C49554) * C139480 + (C48913 + C48912) * C273) * C46913) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C139562 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139563 +
           (((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C46915 +
             C21847 * C139555) *
                C46913 +
            (C49656 + C49657) * C139544) *
               C12024) *
              C139346 * C139521 +
          (((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
               C139563 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) *
               C139562 -
           (((C711 * C6323 + C6961 + C6961 + C139480 * C6957) * C139555 +
             C2612 * C46915) *
                C139544 +
            (C49657 + C49656) * C46913) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[59] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C9304 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139426) *
                        C139346 * C5151 +
                    (((C46917 * C1761 + C48786 + C48786 + C46913 * C1777 +
                       C46919 * C1760 + C48787 + C48787 + C139544 * C1776) *
                          C139480 * C46915 +
                      (C51684 + C51685) * C139480 * C139555) *
                         C139426 -
                     ((C47725 + C47724) * C139480 * C139555 +
                      (C46919 * C108 + C46928 + C46928 + C139544 * C120 +
                       C46917 * C107 + C46929 + C46929 + C46913 * C119) *
                          C139480 * C46915) *
                         C9304) *
                        C139346 * C5152 +
                    (((C46917 * C108 + C46930 + C46930 + C46913 * C120 +
                       C46919 * C109 + C46931 + C46931 + C139544 * C121) *
                          C139480 * C46915 +
                      (C49766 + C49767) * C139480 * C139555) *
                         C9304 -
                     ((C46919 * C4162 + C50708 + C50708 + C139544 * C4170 +
                       C46917 * C4161 + C50709 + C50709 + C46913 * C4169) *
                          C139480 * C139555 +
                      (C46919 * C1766 + C50710 + C50710 + C139544 * C1782 +
                       C46917 * C1760 + C50711 + C50711 + C46913 * C1776) *
                          C139480 * C46915) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 +
                       C46919 * C107 + C46923 + C46923 + C139544 * C119) *
                          C139480 * C46915 +
                      (C47720 + C47721) * C139480 * C139555) *
                         C9304 -
                     ((C51682 + C51683) * C139480 * C139555 +
                      (C46919 * C1761 + C48780 + C48780 + C139544 * C1777 +
                       C46917 * C1762 + C48781 + C48781 + C46913 * C1778) *
                          C139480 * C46915) *
                         C139426) *
                        C822 +
                    (((C51683 + C51682) * C139480 * C46915 +
                      (C57404 + C57405) * C139480 * C139555) *
                         C139426 -
                     ((C47722 + C47723) * C139480 * C139555 +
                      (C47721 + C47720) * C139480 * C46915) *
                         C9304) *
                        C823 +
                    (((C47723 + C47722) * C139480 * C46915 +
                      (C53768 + C53769) * C139480 * C139555) *
                         C9304 -
                     ((C46919 * C23997 + C57398 + C57398 + C139544 * C24001 +
                       C46917 * C23998 + C57399 + C57399 + C46913 * C24002) *
                          C139480 * C139555 +
                      (C57405 + C57404) * C139480 * C46915) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C9304 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C48911 + C48910) * C46918 + (C48909 + C48908) * C46913 +
            (C50818 + C50819) * C46920 + (C50820 + C50821) * C139544) *
               C139480 * C139426 -
           ((C47034 + C47035) * C139544 + (C47036 + C47037) * C46920 +
            (C47033 + C47032) * C46913 + (C47031 + C47030) * C46918) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C47037 + C47036) * C46918 + (C47035 + C47034) * C46913 +
            (C47038 + C47039) * C46920 + (C47040 + C47041) * C139544) *
               C139480 * C9304 -
           ((C47004 * C4166 + C139555 * C4282 + C47003 * C1774 +
             C46915 * C1884) *
                C139544 +
            (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
             C46915 * C1876) *
                C46920 +
            (C50821 + C50820) * C46913 + (C50819 + C50818) * C46918) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C46918 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C46913 +
            (C47030 + C47031) * C46920 + (C47032 + C47033) * C139544) *
               C139480 * C9304 -
           ((C48908 + C48909) * C139544 + (C48910 + C48911) * C46920 +
            (C47004 * C4163 + C139555 * C4279 + C47003 * C1770 +
             C46915 * C1880) *
                C46913 +
            (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
             C46915 * C1872) *
                C46918) *
               C139480 * C139426) *
              C822 +
          (((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
             C139555 * C8678) *
                C46918 +
            (C47003 * C4163 + C46915 * C4279 + C47004 * C8595 +
             C139555 * C8681) *
                C46913 +
            (C51824 + C51825) * C46920 + (C51826 + C51827) * C139544) *
               C139480 * C139426 -
           ((C47842 + C47843) * C139544 + (C47844 + C47845) * C46920 +
            (C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C46913 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C46918) *
               C139480 * C9304) *
              C823 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C46918 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C46913 +
            (C47846 + C47847) * C46920 + (C47848 + C47849) * C139544) *
               C139480 * C9304 -
           ((C47004 * C23999 + C139555 * C24115 + C47003 * C8594 +
             C46915 * C8680) *
                C139544 +
            (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
             C46915 * C8677) *
                C46920 +
            (C47004 * C24000 + C139555 * C24116 + C47003 * C8595 +
             C46915 * C8681) *
                C46913 +
            (C47004 * C23998 + C139555 * C24114 + C47003 * C8592 +
             C46915 * C8678) *
                C46918) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C9304 -
           ((C51958 + C51959 + C51960 + C51961) * C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C139426) *
              C139346 * C5151 +
          (((C2020 * C46918 + C2019 * C46913 + C2018 * C46920 +
             C2017 * C139544) *
                C46915 +
            (C51962 + C51963 + C51964 + C51965) * C139555) *
               C139426 -
           ((C47959 + C47958 + C47957 + C47956) * C139555 +
            (C306 * C139544 + C305 * C46920 + C304 * C46913 + C303 * C46918) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          (((C305 * C46918 + C306 * C46913 + C308 * C46920 + C307 * C139544) *
                C46915 +
            (C49976 + C49977 + C49978 + C49979) * C139555) *
               C9304 -
           (((C273 * C4166 + C139480 * C4400) * C139544 +
             (C273 * C4162 + C139480 * C4396) * C46920 + C4413 * C46913 +
             C4412 * C46918) *
                C139555 +
            (C3586 * C139544 + C3585 * C46920 + C2017 * C46913 +
             C2018 * C46918) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C46918 +
             (C273 * C112 + C139480 * C280) * C46913 + C303 * C46920 +
             C304 * C139544) *
                C46915 +
            (C47948 + C47949 + C47950 + C47951) * C139555) *
               C9304 -
           ((C51958 + C51959 + C51960 + C51961) * C139555 +
            (C2019 * C139544 + C2020 * C46920 +
             (C273 * C1770 + C139480 * C1994) * C46913 +
             (C273 * C1762 + C139480 * C1986) * C46918) *
                C46915) *
               C139426) *
              C822 +
          (((C51961 + C51960 + C51959 + C51958) * C46915 +
            (C57602 + C57603 + C57604 + C57605) * C139555) *
               C139426 -
           ((C47952 + C47953 + C47954 + C47955) * C139555 +
            (C47951 + C47950 + C47949 + C47948) * C46915) *
               C9304) *
              C823 +
          (((C47955 + C47954 + C47953 + C47952) * C46915 +
            (C53902 + C53903 + C53904 + C53905) * C139555) *
               C9304 -
           (((C273 * C23999 + C139480 * C24217) * C139544 +
             (C273 * C23997 + C139480 * C24215) * C46920 +
             (C273 * C24000 + C139480 * C24218) * C46913 +
             (C273 * C23998 + C139480 * C24216) * C46918) *
                C139555 +
            (C57605 + C57604 + C57603 + C57602) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C9304 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
             C139544 * C1768) *
                C47003 +
            (C46918 * C1871 + C46913 * C2099 + C46920 * C1870 +
             C139544 * C2098) *
                C46915 +
            (C52116 + C52117) * C47004 + (C52118 + C52119) * C139555) *
               C139480 * C139426 -
           ((C48105 + C48104) * C139555 + (C48103 + C48102) * C47004 +
            (C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C46915 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C47003) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C47003 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C46915 +
            (C50086 + C50087) * C47004 + (C50088 + C50089) * C139555) *
               C139480 * C9304 -
           ((C46920 * C4278 + C139544 * C4514 + C46918 * C4277 +
             C46913 * C4513) *
                C139555 +
            (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
             C46913 * C4165) *
                C47004 +
            (C46920 * C1876 + C139544 * C2104 + C46918 * C1870 +
             C46913 * C2098) *
                C46915 +
            (C46920 * C1766 + C139544 * C1774 + C46918 * C1760 +
             C46913 * C1768) *
                C47003) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C47003 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C46915 +
            (C48094 + C48095) * C47004 + (C48096 + C48097) * C139555) *
               C139480 * C9304 -
           ((C52112 + C52113) * C139555 + (C52114 + C52115) * C47004 +
            (C46920 * C1871 + C139544 * C2099 + C46918 * C1872 +
             C46913 * C2100) *
                C46915 +
            (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
             C46913 * C1770) *
                C47003) *
               C139480 * C139426) *
              C822 +
          (((C52115 + C52114) * C47003 + (C52113 + C52112) * C46915 +
            (C57712 + C57713) * C47004 + (C57714 + C57715) * C139555) *
               C139480 * C139426 -
           ((C48098 + C48099) * C139555 + (C48100 + C48101) * C47004 +
            (C48097 + C48096) * C46915 + (C48095 + C48094) * C47003) *
               C139480 * C9304) *
              C823 +
          (((C48101 + C48100) * C47003 + (C48099 + C48098) * C46915 +
            (C53980 + C53981) * C47004 + (C53982 + C53983) * C139555) *
               C139480 * C9304 -
           ((C46920 * C24113 + C139544 * C24327 + C46918 * C24114 +
             C46913 * C24328) *
                C139555 +
            (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
             C46913 * C24000) *
                C47004 +
            (C57715 + C57714) * C46915 + (C57713 + C57712) * C47003) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C9304 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C49239 + C49238) * C46913 + (C51126 + C51127) * C139544) *
               C139480 * C139426 -
           ((C47278 + C47279) * C139544 + (C47277 + C47276) * C46913) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C47279 + C47278) * C46913 + (C47280 + C47281) * C139544) *
               C139480 * C9304 -
           ((C47240 * C4162 + C51120 + C51120 + C139555 * C4616 +
             C47239 * C1766 + C51121 + C51121 + C46915 * C2186) *
                C139544 +
            (C51127 + C51126) * C46913) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 + C47240 * C829 +
             C47243 + C47243 + C139555 * C1249) *
                C46913 +
            (C47276 + C47277) * C139544) *
               C139480 * C9304 -
           ((C49238 + C49239) * C139544 +
            (C47240 * C4159 + C49216 + C49216 + C139555 * C4613 +
             C47239 * C1762 + C49217 + C49217 + C46915 * C2182) *
                C46913) *
               C139480 * C139426) *
              C822 +
          (((C47239 * C4159 + C52250 + C52250 + C46915 * C4613 +
             C47240 * C8592 + C52251 + C52251 + C139555 * C8915) *
                C46913 +
            (C52264 + C52265) * C139544) *
               C139480 * C139426 -
           ((C48236 + C48237) * C139544 +
            (C47240 * C830 + C48214 + C48214 + C139555 * C1250 + C47239 * C829 +
             C48215 + C48215 + C46915 * C1249) *
                C46913) *
               C139480 * C9304) *
              C823 +
          (((C47239 * C830 + C48216 + C48216 + C46915 * C1250 + C47240 * C5803 +
             C48217 + C48217 + C139555 * C6030) *
                C46913 +
            (C48238 + C48239) * C139544) *
               C139480 * C9304 -
           ((C47240 * C23997 + C57814 + C57814 + C139555 * C24439 +
             C47239 * C8591 + C57815 + C57815 + C46915 * C8914) *
                C139544 +
            (C47240 * C23998 + C57816 + C57816 + C139555 * C24440 +
             C47239 * C8592 + C57817 + C57817 + C46915 * C8915) *
                C46913) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C9304 -
                     ((C49340 + C49341 + C49342 + C49343) * C139544 +
                      (C18907 * C139555 + C18465 * C47004 +
                       (C273 * C1872 + C139480 * C2292) * C46915 +
                       (C273 * C1762 + C139480 * C1986) * C47003) *
                          C46913) *
                         C139426) *
                        C139346 * C5151 +
                    (((C49343 + C49342 + C49341 + C49340) * C46913 +
                      (C51226 + C51227 + C51228 + C51229) * C139544) *
                         C139426 -
                     ((C47352 + C47353 + C47354 + C47355) * C139544 +
                      (C47351 + C47350 + C47349 + C47348) * C46913) *
                         C9304) *
                        C139346 * C5152 +
                    (((C47355 + C47354 + C47353 + C47352) * C46913 +
                      (C47356 + C47357 + C47358 + C47359) * C139544) *
                         C9304 -
                     (((C273 * C4278 + C139480 * C4732) * C139555 +
                       (C273 * C4162 + C139480 * C4396) * C47004 +
                       C3822 * C46915 + C3585 * C47003) *
                          C139544 +
                      (C51229 + C51228 + C51227 + C51226) * C46913) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C47003 +
                       (C273 * C187 + C139480 * C499) * C46915 +
                       C14408 * C47004 + C14805 * C139555) *
                          C46913 +
                      (C47348 + C47349 + C47350 + C47351) * C139544) *
                         C9304 -
                     ((C49340 + C49341 + C49342 + C49343) * C139544 +
                      (C18907 * C139555 + C18465 * C47004 +
                       (C273 * C1872 + C139480 * C2292) * C46915 +
                       (C273 * C1762 + C139480 * C1986) * C47003) *
                          C46913) *
                         C139426) *
                        C822 +
                    (((C18465 * C47003 + C18907 * C46915 + C24226 * C47004 +
                       C24548 * C139555) *
                          C46913 +
                      (C52396 + C52397 + C52398 + C52399) * C139544) *
                         C139426 -
                     ((C48338 + C48339 + C48340 + C48341) * C139544 +
                      (C14806 * C139555 + C14411 * C47004 + C14805 * C46915 +
                       C14408 * C47003) *
                          C46913) *
                         C9304) *
                        C823 +
                    (((C14411 * C47003 + C14806 * C46915 + C20442 * C47004 +
                       C20668 * C139555) *
                          C46913 +
                      (C48342 + C48343 + C48344 + C48345) * C139544) *
                         C9304 -
                     (((C273 * C24113 + C139480 * C24543) * C139555 +
                       (C273 * C23997 + C139480 * C24215) * C47004 +
                       C18908 * C46915 + C18466 * C47003) *
                          C139544 +
                      ((C273 * C24114 + C139480 * C24544) * C139555 +
                       (C273 * C23998 + C139480 * C24216) * C47004 +
                       C24548 * C46915 + C24226 * C47003) *
                          C46913) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C9304 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139426) *
              C139346 * C5151 +
          ((((C46918 * C1761 + C46913 * C1769 + C46920 * C1760 +
              C139544 * C1768) *
                 C273 +
             (C46918 * C1985 + C46913 * C2393 + C46920 * C1984 +
              C139544 * C2392) *
                 C139480) *
                C46915 +
            ((C52116 + C52117) * C273 + (C52540 + C52541) * C139480) *
                C139555) *
               C139426 -
           (((C48465 + C48464) * C139480 + (C48103 + C48102) * C273) * C139555 +
            ((C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C139480 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C273) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C273 +
             (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                 C139480) *
                C46915 +
            ((C50086 + C50087) * C273 + (C50404 + C50405) * C139480) *
                C139555) *
               C9304 -
           (((C46920 * C4396 + C139544 * C4844 + C46918 * C4395 +
              C46913 * C4843) *
                 C139480 +
             (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
              C46913 * C4165) *
                 C273) *
                C139555 +
            ((C46920 * C1990 + C139544 * C2398 + C46918 * C1984 +
              C46913 * C2392) *
                 C139480 +
             (C46920 * C1766 + C139544 * C1774 + C46918 * C1760 +
              C46913 * C1768) *
                 C273) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C273 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C139480) *
                C46915 +
            ((C48094 + C48095) * C273 + (C48460 + C48461) * C139480) *
                C139555) *
               C9304 -
           (((C52538 + C52539) * C139480 + (C52114 + C52115) * C273) * C139555 +
            ((C46920 * C1985 + C139544 * C2393 + C46918 * C1986 +
              C46913 * C2394) *
                 C139480 +
             (C46920 * C1761 + C139544 * C1769 + C46918 * C1762 +
              C46913 * C1770) *
                 C273) *
                C46915) *
               C139426) *
              C822 +
          ((((C52115 + C52114) * C273 + (C52539 + C52538) * C139480) * C46915 +
            ((C57712 + C57713) * C273 + (C58018 + C58019) * C139480) *
                C139555) *
               C139426 -
           (((C48462 + C48463) * C139480 + (C48100 + C48101) * C273) * C139555 +
            ((C48461 + C48460) * C139480 + (C48095 + C48094) * C273) * C46915) *
               C9304) *
              C823 +
          ((((C48101 + C48100) * C273 + (C48463 + C48462) * C139480) * C46915 +
            ((C53980 + C53981) * C273 + (C54190 + C54191) * C139480) *
                C139555) *
               C9304 -
           (((C46920 * C24215 + C139544 * C24646 + C46918 * C24216 +
              C46913 * C24647) *
                 C139480 +
             (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
              C46913 * C24000) *
                 C273) *
                C139555 +
            ((C58019 + C58018) * C139480 + (C57713 + C57712) * C273) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C9304 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139426) *
              C139346 * C5151 +
          ((((C48911 + C48910) * C273 + (C49553 + C49552) * C139480) * C46913 +
            ((C50818 + C50819) * C273 + (C51430 + C51431) * C139480) *
                C139544) *
               C139426 -
           (((C47506 + C47507) * C139480 + (C47036 + C47037) * C273) * C139544 +
            ((C47505 + C47504) * C139480 + (C47031 + C47030) * C273) * C46913) *
               C9304) *
              C139346 * C5152 +
          ((((C47037 + C47036) * C273 + (C47507 + C47506) * C139480) * C46913 +
            ((C47038 + C47039) * C273 + (C47508 + C47509) * C139480) *
                C139544) *
               C9304 -
           (((C47004 * C4396 + C139555 * C4946 + C47003 * C1990 +
              C46915 * C2480) *
                 C139480 +
             (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
              C46915 * C1876) *
                 C273) *
                C139544 +
            ((C51431 + C51430) * C139480 + (C50819 + C50818) * C273) * C46913) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C273 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C139480) *
                C46913 +
            ((C47030 + C47031) * C273 + (C47504 + C47505) * C139480) *
                C139544) *
               C9304 -
           (((C49552 + C49553) * C139480 + (C48910 + C48911) * C273) * C139544 +
            ((C47004 * C4393 + C139555 * C4943 + C47003 * C1986 +
              C46915 * C2476) *
                 C139480 +
             (C47004 * C4159 + C139555 * C4275 + C47003 * C1762 +
              C46915 * C1872) *
                 C273) *
                C46913) *
               C139426) *
              C822 +
          ((((C47003 * C4159 + C46915 * C4275 + C47004 * C8592 +
              C139555 * C8678) *
                 C273 +
             (C47003 * C4393 + C46915 * C4943 + C47004 * C8758 +
              C139555 * C9149) *
                 C139480) *
                C46913 +
            ((C51824 + C51825) * C273 + (C52676 + C52677) * C139480) *
                C139544) *
               C139426 -
           (((C48574 + C48575) * C139480 + (C47844 + C47845) * C273) * C139544 +
            ((C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C139480 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C273) *
                C46913) *
               C9304) *
              C823 +
          ((((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C273 +
             (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
              C139555 * C6192) *
                 C139480) *
                C46913 +
            ((C47846 + C47847) * C273 + (C48576 + C48577) * C139480) *
                C139544) *
               C9304 -
           (((C47004 * C24215 + C139555 * C24752 + C47003 * C8757 +
              C46915 * C9148) *
                 C139480 +
             (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
              C46915 * C8677) *
                 C273) *
                C139544 +
            ((C47004 * C24216 + C139555 * C24753 + C47003 * C8758 +
              C46915 * C9149) *
                 C139480 +
             (C47004 * C23998 + C139555 * C24114 + C47003 * C8592 +
              C46915 * C8678) *
                 C273) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C9304 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139426) *
              C139346 * C5151 +
          (((C49655 + C49654) * C46913 + (C51530 + C51531) * C139544) *
               C139426 -
           ((C47578 + C47579) * C139544 + (C47577 + C47576) * C46913) * C9304) *
              C139346 * C5152 +
          (((C47579 + C47578) * C46913 + (C47580 + C47581) * C139544) * C9304 -
           (((C711 * C4162 + C5067 + C5067 + C139480 * C5058) * C139555 +
             C4060 * C46915) *
                C139544 +
            (C51531 + C51530) * C46913) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C46915 +
             C15154 * C139555) *
                C46913 +
            (C47576 + C47577) * C139544) *
               C9304 -
           ((C49654 + C49655) * C139544 +
            (C19327 * C139555 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C46915) *
                C46913) *
               C139426) *
              C822 +
          (((C19327 * C46915 + C24861 * C139555) * C46913 +
            (C52808 + C52809) * C139544) *
               C139426 -
           ((C48676 + C48677) * C139544 +
            (C15155 * C139555 + C15154 * C46915) * C46913) *
               C9304) *
              C823 +
          (((C15155 * C46915 + C20885 * C139555) * C46913 +
            (C48678 + C48679) * C139544) *
               C9304 -
           (((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C139555 +
             C19328 * C46915) *
                C139544 +
            ((C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C139555 +
             C24861 * C46915) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139362 * C139529 -
                     (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) *
                         C139362 * C139398) *
                        C139558 +
                    ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) *
                         C139362 * C139398 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139362 * C139529) *
                        C139559 +
                    (((C63569 * C108 + C63578 + C63578 + C139301 * C120) *
                          C139480 * C63566 +
                      C65577 * C63567 + C65578 * C63568) *
                         C139362 * C139529 -
                     ((C63569 * C5801 + C65570 + C65570 + C139301 * C5807) *
                          C139480 * C63568 +
                      C65578 * C63567 + C65577 * C63566) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139362 * C139529 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139362 * C139398) *
                        C139558 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C63570 +
                      (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                       C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                          C139301) *
                         C139480 * C139362 * C139398 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139362 * C139529) *
                        C139559 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C63570 +
                      (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                       C63567 * C945 + C63635 * C840 + C63568 * C950) *
                          C139301) *
                         C139480 * C139362 * C139529 -
                     ((C63635 * C5804 + C63568 * C5866 + C63634 * C840 +
                       C63567 * C950 + C63633 * C835 + C63566 * C945) *
                          C139301 +
                      (C63635 * C5801 + C63568 * C5863 + C63634 * C832 +
                       C63567 * C942 + C63633 * C827 + C63566 * C937) *
                          C63570) *
                         C139480 * C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139362 * C139529 -
                     ((C64268 + C64269) * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139362 * C139398) *
                        C139558 +
                    (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
                      (C64274 + C64275) * C63568) *
                         C139362 * C139398 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139362 * C139529) *
                        C139559 +
                    (((C305 * C63570 + C306 * C139301) * C63566 +
                      (C65727 + C65728) * C63567 + (C65729 + C65730) * C63568) *
                         C139362 * C139529 -
                     (((C273 * C5804 + C139480 * C5922) * C139301 +
                       (C273 * C5801 + C139480 * C5919) * C63570) *
                          C63568 +
                      (C65730 + C65729) * C63567 + (C65728 + C65727) * C63566) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139362 * C139529 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139362 * C139398) *
              C139558 +
          ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
            C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
               C139480 * C139362 * C139398 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139362 * C139529) *
              C139559 +
          (((C63570 * C108 + C139301 * C114) * C63633 +
            (C63570 * C189 + C139301 * C362) * C63566 + C65813 * C63634 +
            C65814 * C63567 + C65815 * C63635 + C65816 * C63568) *
               C139480 * C139362 * C139529 -
           ((C63570 * C5863 + C139301 * C5975) * C63568 +
            (C63570 * C5801 + C139301 * C5804) * C63635 + C65816 * C63567 +
            C65815 * C63634 + C65814 * C63566 + C65813 * C63633) *
               C139480 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139362 * C139529 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139362 * C139398) *
                        C139558 +
                    ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                      C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                      C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                         C139301 * C139480 * C139362 * C139398 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139362 * C139529) *
                        C139559 +
                    ((C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                      C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                      C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                         C139301 * C139480 * C139362 * C139529 -
                     (C63788 * C5801 + C65891 + C65891 + C63568 * C6028 +
                      C63787 * C832 + C65892 + C65892 + C63567 * C1252 +
                      C63786 * C827 + C65893 + C65893 + C63566 * C1247) *
                         C139301 * C139480 * C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139362 * C139529 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139362 * C139398) *
              C139558 +
          ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
            C14412 * C63635 + C14807 * C63568) *
               C139301 * C139362 * C139398 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139362 * C139529) *
              C139559 +
          ((C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
            C1090 * C63635 + C1381 * C63568) *
               C139301 * C139362 * C139529 -
           ((C273 * C5863 + C139480 * C6084) * C63568 +
            (C273 * C5801 + C139480 * C5919) * C63635 + C1381 * C63567 +
            C1090 * C63634 + C1378 * C63566 + C1085 * C63633) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139362 * C139529 -
                     ((C64648 + C64630) * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139362 * C139398) *
                        C139558 +
                    (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
                      (C64637 + C64651) * C63568) *
                         C139362 * C139398 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139362 * C139529) *
                        C139559 +
                    ((((C63570 * C108 + C139301 * C114) * C273 +
                       (C63570 * C276 + C139301 * C579) * C139480) *
                          C63566 +
                      (C66042 + C66050) * C63567 + (C66045 + C66051) * C63568) *
                         C139362 * C139529 -
                     (((C63570 * C5919 + C139301 * C6137) * C139480 +
                       (C63570 * C5801 + C139301 * C5804) * C273) *
                          C63568 +
                      (C66051 + C66045) * C63567 + (C66050 + C66042) * C63566) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[60] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139362 * C139529 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139362 * C139398) *
                        C139558 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C273 +
                      (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                       C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                          C139480) *
                         C139301 * C139362 * C139398 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139362 * C139529) *
                        C139559 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C273 +
                      (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                       C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                          C139480) *
                         C139301 * C139362 * C139529 -
                     ((C63635 * C5919 + C63568 * C6190 + C63634 * C1056 +
                       C63567 * C1546 + C63633 * C1051 + C63566 * C1541) *
                          C139480 +
                      (C63635 * C5801 + C63568 * C5863 + C63634 * C832 +
                       C63567 * C942 + C63633 * C827 + C63566 * C937) *
                          C273) *
                         C139301 * C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139362 * C139529 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139362 * C139398) *
              C139558 +
          ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
               C139362 * C139398 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139362 * C139529) *
              C139559 +
          ((C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 *
               C139362 * C139529 -
           ((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C63568 +
            C1679 * C63567 + C1676 * C63566) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                 C63566 +
             C64110 * C63567 + C64111 * C63568) *
                C139530 -
            (C66992 * C63568 + C66993 * C63567 +
             (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                 C63566) *
                C139426) *
               C139529 +
           ((C66993 * C63566 + C66992 * C63567 +
             (C63569 * C23998 + C66974 + C66974 + C139301 * C24002) * C139480 *
                 C63568) *
                C139426 -
            (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C139530) *
               C139398) *
              C825 +
          ((((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139480 *
                 C63566 +
             C66994 * C63567 + C66995 * C63568) *
                C139426 -
            (C64114 * C63568 + C64113 * C63567 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C139480 *
                 C63566) *
                C139530) *
               C139529 +
           ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) * C139530 -
            ((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139480 *
                 C63568 +
             C66995 * C63567 + C66994 * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                        C63567 * C939 + C63635 * C830 + C63568 * C940) *
                           C63570 +
                       (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                        C63567 * C947 + C63635 * C838 + C63568 * C948) *
                           C139301) *
                          C139480 * C139530 -
                      ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                        C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                           C139301 +
                       (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                        C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                           C63570) *
                          C139480 * C139426) *
                         C139529 +
                     (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                        C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                           C63570 +
                       (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                        C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                           C139301) *
                          C139480 * C139426 -
                      ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                        C63567 * C948 + C63633 * C837 + C63566 * C947) *
                           C139301 +
                       (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                        C63567 * C940 + C63633 * C829 + C63566 * C939) *
                           C63570) *
                          C139480 * C139530) *
                         C139398) *
                        C825 +
                    ((((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                        C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                           C63570 +
                       (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                        C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                           C139301) *
                          C139480 * C139426 -
                      ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                        C63567 * C946 + C63633 * C113 + C63566 * C194) *
                           C139301 +
                       (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                        C63567 * C938 + C63633 * C107 + C63566 * C188) *
                           C63570) *
                          C139480 * C139530) *
                         C139529 +
                     (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                        C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                           C63570 +
                       (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                        C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                           C139301) *
                          C139480 * C139530 -
                      ((C63635 * C23999 + C63568 * C24115 + C63634 * C8594 +
                        C63567 * C8680 + C63633 * C4164 + C63566 * C4280) *
                           C139301 +
                       (C63635 * C23997 + C63568 * C24113 + C63634 * C8591 +
                        C63567 * C8677 + C63633 * C4160 + C63566 * C4276) *
                           C63570) *
                          C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C63570 +
              (C273 * C112 + C139480 * C280) * C139301) *
                 C63566 +
             (C64264 + C64265) * C63567 + C64276 * C63568) *
                C139530 -
            ((C67192 + C67193) * C63568 + (C67194 + C67195) * C63567 +
             ((C273 * C1770 + C139480 * C1994) * C139301 +
              (C273 * C1762 + C139480 * C1986) * C63570) *
                 C63566) *
                C139426) *
               C139529 +
           (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
             ((C273 * C23998 + C139480 * C24216) * C63570 +
              (C273 * C24000 + C139480 * C24218) * C139301) *
                 C63568) *
                C139426 -
            ((C64268 + C64269) * C63568 + (C64267 + C64266) * C63567 +
             (C64265 + C64264) * C63566) *
                C139530) *
               C139398) *
              C825 +
          ((((C2020 * C63570 + C2019 * C139301) * C63566 +
             (C67196 + C67197) * C63567 + (C67198 + C67199) * C63568) *
                C139426 -
            (C64277 * C63568 + (C64271 + C64270) * C63567 +
             (C304 * C139301 + C303 * C63570) * C63566) *
                C139530) *
               C139529 +
           (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
             (C64274 + C64275) * C63568) *
                C139530 -
            (((C273 * C23999 + C139480 * C24217) * C139301 +
              (C273 * C23997 + C139480 * C24215) * C63570) *
                 C63568 +
             (C67199 + C67198) * C63567 + (C67197 + C67196) * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C63633 +
             (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
             C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
                C139480 * C139530 -
            (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
             C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
             (C63570 * C1762 + C139301 * C1770) * C63633) *
                C139480 * C139426) *
               C139529 +
           ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
             C67314 * C63567 + (C63570 * C23998 + C139301 * C24000) * C63635 +
             (C63570 * C24114 + C139301 * C24328) * C63568) *
                C139480 * C139426 -
            (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
             C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
                C139480 * C139530) *
               C139398) *
              C825 +
          ((((C63570 * C1761 + C139301 * C1769) * C63633 +
             (C63570 * C1871 + C139301 * C2099) * C63566 + C67318 * C63634 +
             C67319 * C63567 + C67320 * C63635 + C67321 * C63568) *
                C139480 * C139426 -
            (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
             C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
             (C63570 * C107 + C139301 * C113) * C63633) *
                C139480 * C139530) *
               C139529 +
           ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
             C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
                C139480 * C139530 -
            ((C63570 * C24113 + C139301 * C24327) * C63568 +
             (C63570 * C23997 + C139301 * C23999) * C63635 + C67321 * C63567 +
             C67320 * C63634 + C67319 * C63566 + C67318 * C63633) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                       C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                       C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                          C139301 * C139480 * C139530 -
                      (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                       C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                       C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                          C139301 * C139480 * C139426) *
                         C139529 +
                     ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                       C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                       C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                          C139301 * C139480 * C139426 -
                      (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                       C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                       C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                          C139301 * C139480 * C139530) *
                         C139398) *
                        C825 +
                    (((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                       C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                       C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                          C139301 * C139480 * C139426 -
                      (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                       C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                       C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                          C139301 * C139480 * C139530) *
                         C139529 +
                     ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                       C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                       C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                          C139301 * C139480 * C139530 -
                      (C63788 * C23997 + C67423 + C67423 + C63568 * C24439 +
                       C63787 * C8591 + C67424 + C67424 + C63567 * C8914 +
                       C63786 * C4160 + C67425 + C67425 + C63566 * C4614) *
                          C139301 * C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C63633 +
             (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
             C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
                C139301 * C139530 -
            (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
             C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
             (C273 * C1762 + C139480 * C1986) * C63633) *
                C139301 * C139426) *
               C139529 +
           ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
             C24548 * C63567 + (C273 * C23998 + C139480 * C24216) * C63635 +
             (C273 * C24114 + C139480 * C24544) * C63568) *
                C139301 * C139426 -
            (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
             C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
                C139301 * C139530) *
               C139398) *
              C825 +
          (((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
             C18466 * C63635 + C18908 * C63568) *
                C139301 * C139426 -
            (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
             C518 * C63566 + C303 * C63633) *
                C139301 * C139530) *
               C139529 +
           ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
             C14412 * C63635 + C14807 * C63568) *
                C139301 * C139530 -
            ((C273 * C24113 + C139480 * C24543) * C63568 +
             (C273 * C23997 + C139480 * C24215) * C63635 + C18908 * C63567 +
             C18466 * C63634 + C4740 * C63566 + C4410 * C63633) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63570 * C106 + C139301 * C112) * C273 +
              (C63570 * C274 + C139301 * C577) * C139480) *
                 C63566 +
             (C64622 + C64646) * C63567 + C64652 * C63568) *
                C139530 -
            ((C67638 + C67624) * C63568 + (C67639 + C67627) * C63567 +
             ((C63570 * C1986 + C139301 * C2394) * C139480 +
              (C63570 * C1762 + C139301 * C1770) * C273) *
                 C63566) *
                C139426) *
               C139529 +
           (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
             ((C63570 * C23998 + C139301 * C24000) * C273 +
              (C63570 * C24216 + C139301 * C24647) * C139480) *
                 C63568) *
                C139426 -
            ((C64648 + C64630) * C63568 + (C64647 + C64625) * C63567 +
             (C64646 + C64622) * C63566) *
                C139530) *
               C139398) *
              C825 +
          (((((C63570 * C1761 + C139301 * C1769) * C273 +
              (C63570 * C1985 + C139301 * C2393) * C139480) *
                 C63566 +
             (C67628 + C67640) * C63567 + (C67631 + C67641) * C63568) *
                C139426 -
            (C64653 * C63568 + (C64649 + C64631) * C63567 +
             ((C63570 * C275 + C139301 * C578) * C139480 +
              (C63570 * C107 + C139301 * C113) * C273) *
                 C63566) *
                C139530) *
               C139529 +
           (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
             (C64637 + C64651) * C63568) *
                C139530 -
            (((C63570 * C24215 + C139301 * C24646) * C139480 +
              (C63570 * C23997 + C139301 * C23999) * C273) *
                 C63568 +
             (C67641 + C67631) * C63567 + (C67640 + C67628) * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[61] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                        C63567 * C939 + C63635 * C830 + C63568 * C940) *
                           C273 +
                       (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                        C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                           C139480) *
                          C139301 * C139530 -
                      ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                        C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                           C139480 +
                       (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                        C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                           C273) *
                          C139301 * C139426) *
                         C139529 +
                     (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                        C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                           C273 +
                       (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                        C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                           C139480) *
                          C139301 * C139426 -
                      ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                        C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                           C139480 +
                       (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                        C63567 * C940 + C63633 * C829 + C63566 * C939) *
                           C273) *
                          C139301 * C139530) *
                         C139398) *
                        C825 +
                    ((((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                        C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                           C273 +
                       (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                        C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                           C139480) *
                          C139301 * C139426 -
                      ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                        C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                           C139480 +
                       (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                        C63567 * C938 + C63633 * C107 + C63566 * C188) *
                           C273) *
                          C139301 * C139530) *
                         C139529 +
                     (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                        C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                           C273 +
                       (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                        C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                           C139480) *
                          C139301 * C139530 -
                      ((C63635 * C24215 + C63568 * C24752 + C63634 * C8757 +
                        C63567 * C9148 + C63633 * C4394 + C63566 * C4944) *
                           C139480 +
                       (C63635 * C23997 + C63568 * C24113 + C63634 * C8591 +
                        C63567 * C8677 + C63633 * C4160 + C63566 * C4276) *
                           C273) *
                          C139301 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
             C15154 * C63567 + C15155 * C63568) *
                C139301 * C139530 -
            (C24861 * C63568 + C19327 * C63567 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
                C139301 * C139426) *
               C139529 +
           ((C19327 * C63566 + C24861 * C63567 +
             (C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C63568) *
                C139301 * C139426 -
            (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
                C139530) *
               C139398) *
              C825 +
          (((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
                C139426 -
            (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
                C139530) *
               C139529 +
           ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
                C139530 -
            ((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C63568 +
             C19328 * C63567 + C5072 * C63566) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[62] += (-std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139362 * C822 -
                     (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) *
                         C139362 * C823 +
                     (C64111 * C63566 + C64112 * C63567 +
                      (C63569 * C20278 + C64083 + C64083 + C139301 * C20282) *
                          C139480 * C63568) *
                         C139362 * C824) *
                        C825 +
                    ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) *
                         C139362 * C823 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139362 * C822 -
                     ((C63569 * C20277 + C64091 + C64091 + C139301 * C20281) *
                          C139480 * C63568 +
                      C64115 * C63567 + C64114 * C63566) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                         C139480 * C63566 +
                     (C63569 * C829 + C63573 + C63573 + C139301 * C845) *
                         C139480 * C63567 +
                     (C63569 * C830 + C63574 + C63574 + C139301 * C846) *
                         C139480 * C63568) *
                        C139362 * C139346 * C96 -
                    ((C63569 * C831 + C63575 + C63575 + C139301 * C847) *
                         C139480 * C63568 +
                     (C63569 * C828 + C63576 + C63576 + C139301 * C844) *
                         C139480 * C63567 +
                     (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                         C139480 * C63566) *
                        C139362 * C139346 * C97 +
                    ((C63569 * C108 + C63578 + C63578 + C139301 * C120) *
                         C139480 * C63566 +
                     (C63569 * C827 + C63579 + C63579 + C139301 * C843) *
                         C139480 * C63567 +
                     (C63569 * C832 + C63580 + C63580 + C139301 * C848) *
                         C139480 * C63568) *
                        C139362 * C139346 * C98 -
                    ((C63569 * C834 + C63581 + C63581 + C139301 * C850) *
                         C139480 * C63568 +
                     (C63569 * C833 + C63582 + C63582 + C139301 * C849) *
                         C139480 * C63567 +
                     (C63569 * C109 + C63583 + C63583 + C139301 * C121) *
                         C139480 * C63566) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C1757 -
                     ((C63569 * C8592 + C64876 + C64876 + C139301 * C8598) *
                          C139480 * C63568 +
                      (C63569 * C4159 + C64877 + C64877 + C139301 * C4167) *
                          C139480 * C63567 +
                      (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) *
                          C139480 * C63566) *
                         C1758 +
                     ((C63569 * C1763 + C64879 + C64879 + C139301 * C1779) *
                          C139480 * C63566 +
                      (C63569 * C6325 + C64880 + C64880 + C139301 * C6331) *
                          C139480 * C63567 +
                      (C63569 * C20984 + C64881 + C64881 + C139301 * C20988) *
                          C139480 * C63568) *
                         C1759) *
                        C139346 * C825 +
                    (((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) *
                          C139480 * C63566 +
                      (C63569 * C4160 + C64883 + C64883 + C139301 * C4168) *
                          C139480 * C63567 +
                      (C63569 * C8591 + C64884 + C64884 + C139301 * C8597) *
                          C139480 * C63568) *
                         C1758 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C1757 -
                     ((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) *
                          C139480 * C63568 +
                      (C63569 * C6324 + C64886 + C64886 + C139301 * C6330) *
                          C139480 * C63567 +
                      (C63569 * C1764 + C64887 + C64887 + C139301 * C1780) *
                          C139480 * C63566) *
                         C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C63633 * C106 + C63566 * C187 + C63634 * C829 + C63567 * C939 +
             C63635 * C830 + C63568 * C940) *
                C63570 +
            (C63633 * C112 + C63566 * C193 + C63634 * C837 + C63567 * C947 +
             C63635 * C838 + C63568 * C948) *
                C139301) *
               C139480 * C139362 * C822 -
           ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 + C63567 * C948 +
             C63633 * C837 + C63566 * C947) *
                C139301 +
            (C63635 * C5803 + C63568 * C5865 + C63634 * C830 + C63567 * C940 +
             C63633 * C829 + C63566 * C939) *
                C63570) *
               C139480 * C139362 * C823 +
           ((C63633 * C830 + C63566 * C940 + C63634 * C5803 + C63567 * C5865 +
             C63635 * C20278 + C63568 * C20362) *
                C63570 +
            (C63633 * C838 + C63566 * C948 + C63634 * C5806 + C63567 * C5868 +
             C63635 * C20280 + C63568 * C20364) *
                C139301) *
               C139480 * C139362 * C824) *
              C825 +
          (((C63633 * C828 + C63566 * C938 + C63634 * C831 + C63567 * C941 +
             C63635 * C5802 + C63568 * C5864) *
                C63570 +
            (C63633 * C836 + C63566 * C946 + C63634 * C839 + C63567 * C949 +
             C63635 * C5805 + C63568 * C5867) *
                C139301) *
               C139480 * C139362 * C823 -
           ((C63635 * C839 + C63568 * C949 + C63634 * C836 + C63567 * C946 +
             C63633 * C113 + C63566 * C194) *
                C139301 +
            (C63635 * C831 + C63568 * C941 + C63634 * C828 + C63567 * C938 +
             C63633 * C107 + C63566 * C188) *
                C63570) *
               C139480 * C139362 * C822 -
           ((C63635 * C20279 + C63568 * C20363 + C63634 * C5805 +
             C63567 * C5867 + C63633 * C839 + C63566 * C949) *
                C139301 +
            (C63635 * C20277 + C63568 * C20361 + C63634 * C5802 +
             C63567 * C5864 + C63633 * C831 + C63566 * C941) *
                C63570) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                                C63567 * C939 + C63635 * C830 + C63568 * C940) *
                                   C63570 +
                               (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                                C63567 * C947 + C63635 * C838 + C63568 * C948) *
                                   C139301) *
                                  C139480 * C139362 * C139346 * C96 -
                              ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                                C63567 * C946 + C63633 * C113 + C63566 * C194) *
                                   C139301 +
                               (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                                C63567 * C938 + C63633 * C107 + C63566 * C188) *
                                   C63570) *
                                  C139480 * C139362 * C139346 * C97 +
                              ((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                                C63567 * C937 + C63635 * C832 + C63568 * C942) *
                                   C63570 +
                               (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                                C63567 * C945 + C63635 * C840 + C63568 * C950) *
                                   C139301) *
                                  C139480 * C139362 * C139346 * C98 -
                              ((C63635 * C842 + C63568 * C952 + C63634 * C841 +
                                C63567 * C951 + C63633 * C115 + C63566 * C196) *
                                   C139301 +
                               (C63635 * C834 + C63568 * C944 + C63634 * C833 +
                                C63567 * C943 + C63633 * C109 + C63566 * C190) *
                                   C63570) *
                                  C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63633 * C106 + C63566 * C187 + C63634 * C829 + C63567 * C939 +
             C63635 * C830 + C63568 * C940) *
                C63570 +
            (C63633 * C112 + C63566 * C193 + C63634 * C837 + C63567 * C947 +
             C63635 * C838 + C63568 * C948) *
                C139301) *
               C139480 * C1757 -
           ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 + C63567 * C4279 +
             C63633 * C1770 + C63566 * C1880) *
                C139301 +
            (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 + C63567 * C4275 +
             C63633 * C1762 + C63566 * C1872) *
                C63570) *
               C139480 * C1758 +
           ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 + C63567 * C6411 +
             C63635 * C20984 + C63568 * C21100) *
                C63570 +
            (C63633 * C1771 + C63566 * C1881 + C63634 * C6328 + C63567 * C6414 +
             C63635 * C20986 + C63568 * C21102) *
                C139301) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 + C63567 * C4276 +
             C63635 * C8591 + C63568 * C8677) *
                C63570 +
            (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 + C63567 * C4280 +
             C63635 * C8594 + C63568 * C8680) *
                C139301) *
               C139480 * C1758 -
           ((C63635 * C839 + C63568 * C949 + C63634 * C836 + C63567 * C946 +
             C63633 * C113 + C63566 * C194) *
                C139301 +
            (C63635 * C831 + C63568 * C941 + C63634 * C828 + C63567 * C938 +
             C63633 * C107 + C63566 * C188) *
                C63570) *
               C139480 * C1757 -
           ((C63635 * C20985 + C63568 * C21101 + C63634 * C6327 +
             C63567 * C6413 + C63633 * C1772 + C63566 * C1882) *
                C139301 +
            (C63635 * C20983 + C63568 * C21099 + C63634 * C6324 +
             C63567 * C6410 + C63633 * C1764 + C63566 * C1874) *
                C63570) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (-std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C63570 +
             (C273 * C112 + C139480 * C280) * C139301) *
                C63566 +
            (C64264 + C64265) * C63567 + C64276 * C63568) *
               C139362 * C822 -
           ((C64268 + C64269) * C63568 + (C64267 + C64266) * C63567 +
            (C64265 + C64264) * C63566) *
               C139362 * C823 +
           (C64276 * C63566 + (C64269 + C64268) * C63567 +
            ((C273 * C20278 + C139480 * C20432) * C63570 +
             (C273 * C20280 + C139480 * C20434) * C139301) *
                C63568) *
               C139362 * C824) *
              C825 +
          (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
            (C64274 + C64275) * C63568) *
               C139362 * C823 -
           (C64277 * C63568 + (C64271 + C64270) * C63567 +
            (C304 * C139301 + C303 * C63570) * C63566) *
               C139362 * C822 -
           (((C273 * C20279 + C139480 * C20433) * C139301 +
             (C273 * C20277 + C139480 * C20431) * C63570) *
                C63568 +
            (C64275 + C64274) * C63567 + C64277 * C63566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C273 * C106 + C139480 * C274) * C63570 +
                                (C273 * C112 + C139480 * C280) * C139301) *
                                   C63566 +
                               (C14408 * C63570 + C14409 * C139301) * C63567 +
                               (C14411 * C63570 + C14410 * C139301) * C63568) *
                                  C139362 * C139346 * C96 -
                              ((C1089 * C139301 + C1088 * C63570) * C63568 +
                               (C1086 * C139301 + C1087 * C63570) * C63567 +
                               (C304 * C139301 + C303 * C63570) * C63566) *
                                  C139362 * C139346 * C97 +
                              ((C305 * C63570 + C306 * C139301) * C63566 +
                               (C1085 * C63570 + C1084 * C139301) * C63567 +
                               (C1090 * C63570 + C1091 * C139301) * C63568) *
                                  C139362 * C139346 * C98 -
                              (((C273 * C842 + C139480 * C1066) * C139301 +
                                (C273 * C834 + C139480 * C1058) * C63570) *
                                   C63568 +
                               (C2865 * C139301 + C2864 * C63570) * C63567 +
                               (C307 * C139301 + C308 * C63570) * C63566) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C63570 +
             (C273 * C112 + C139480 * C280) * C139301) *
                C63566 +
            (C64264 + C64265) * C63567 + C64276 * C63568) *
               C1757 -
           ((C24227 * C139301 + C24226 * C63570) * C63568 +
            (C18464 * C139301 + C18465 * C63570) * C63567 +
            ((C273 * C1770 + C139480 * C1994) * C139301 +
             (C273 * C1762 + C139480 * C1986) * C63570) *
                C63566) *
               C1758 +
           (((C273 * C1763 + C139480 * C1987) * C63570 +
             (C273 * C1771 + C139480 * C1995) * C139301) *
                C63566 +
            (C21212 * C63570 + C21213 * C139301) * C63567 +
            ((C273 * C20984 + C139480 * C21202) * C63570 +
             (C273 * C20986 + C139480 * C21204) * C139301) *
                C63568) *
               C1759) *
              C139346 * C825 +
          (((C2020 * C63570 + C2019 * C139301) * C63566 +
            (C4410 * C63570 + C4411 * C139301) * C63567 +
            (C18466 * C63570 + C18467 * C139301) * C63568) *
               C1758 -
           (C64277 * C63568 + (C64271 + C64270) * C63567 +
            (C304 * C139301 + C303 * C63570) * C63566) *
               C1757 -
           (((C273 * C20985 + C139480 * C21203) * C139301 +
             (C273 * C20983 + C139480 * C21201) * C63570) *
                C63568 +
            (C15497 * C139301 + C15496 * C63570) * C63567 +
            (C2022 * C139301 + C2021 * C63570) * C63566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139362 * C822 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139362 * C823 +
           (C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
            C64380 * C63567 + (C63570 * C20278 + C139301 * C20280) * C63635 +
            (C63570 * C20362 + C139301 * C20512) * C63568) *
               C139480 * C139362 * C824) *
              C825 +
          ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
            C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
               C139480 * C139362 * C823 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139362 * C822 -
           ((C63570 * C20361 + C139301 * C20511) * C63568 +
            (C63570 * C20277 + C139301 * C20279) * C63635 + C64387 * C63567 +
            C64386 * C63634 + C64385 * C63566 + C64384 * C63633) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C63570 * C106 + C139301 * C112) * C63633 +
                               (C63570 * C187 + C139301 * C360) * C63566 +
                               (C63570 * C829 + C139301 * C837) * C63634 +
                               (C63570 * C939 + C139301 * C1167) * C63567 +
                               (C63570 * C830 + C139301 * C838) * C63635 +
                               (C63570 * C940 + C139301 * C1168) * C63568) *
                                  C139480 * C139362 * C139346 * C96 -
                              ((C63570 * C941 + C139301 * C1169) * C63568 +
                               (C63570 * C831 + C139301 * C839) * C63635 +
                               (C63570 * C938 + C139301 * C1166) * C63567 +
                               (C63570 * C828 + C139301 * C836) * C63634 +
                               (C63570 * C188 + C139301 * C361) * C63566 +
                               (C63570 * C107 + C139301 * C113) * C63633) *
                                  C139480 * C139362 * C139346 * C97 +
                              ((C63570 * C108 + C139301 * C114) * C63633 +
                               (C63570 * C189 + C139301 * C362) * C63566 +
                               (C63570 * C827 + C139301 * C835) * C63634 +
                               (C63570 * C937 + C139301 * C1165) * C63567 +
                               (C63570 * C832 + C139301 * C840) * C63635 +
                               (C63570 * C942 + C139301 * C1170) * C63568) *
                                  C139480 * C139362 * C139346 * C98 -
                              ((C63570 * C944 + C139301 * C1172) * C63568 +
                               (C63570 * C834 + C139301 * C842) * C63635 +
                               (C63570 * C943 + C139301 * C1171) * C63567 +
                               (C63570 * C833 + C139301 * C841) * C63634 +
                               (C63570 * C190 + C139301 * C363) * C63566 +
                               (C63570 * C109 + C139301 * C115) * C63633) *
                                  C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C1757 -
           ((C63570 * C8678 + C139301 * C8838) * C63568 +
            (C63570 * C8592 + C139301 * C8595) * C63635 +
            (C63570 * C4275 + C139301 * C4511) * C63567 +
            (C63570 * C4159 + C139301 * C4163) * C63634 +
            (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C1758 +
           ((C63570 * C1763 + C139301 * C1771) * C63633 +
            (C63570 * C1873 + C139301 * C2101) * C63566 +
            (C63570 * C6325 + C139301 * C6328) * C63634 +
            (C63570 * C6411 + C139301 * C6571) * C63567 +
            (C63570 * C20984 + C139301 * C20986) * C63635 +
            (C63570 * C21100 + C139301 * C21314) * C63568) *
               C139480 * C1759) *
              C139346 * C825 +
          (((C63570 * C1761 + C139301 * C1769) * C63633 +
            (C63570 * C1871 + C139301 * C2099) * C63566 +
            (C63570 * C4160 + C139301 * C4164) * C63634 +
            (C63570 * C4276 + C139301 * C4512) * C63567 +
            (C63570 * C8591 + C139301 * C8594) * C63635 +
            (C63570 * C8677 + C139301 * C8837) * C63568) *
               C139480 * C1758 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C1757 -
           ((C63570 * C21099 + C139301 * C21313) * C63568 +
            (C63570 * C20983 + C139301 * C20985) * C63635 +
            (C63570 * C6410 + C139301 * C6570) * C63567 +
            (C63570 * C6324 + C139301 * C6327) * C63634 +
            (C63570 * C1874 + C139301 * C2102) * C63566 +
            (C63570 * C1764 + C139301 * C1772) * C63633) *
               C139480 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] += (-std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139362 * C822 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139362 * C823 +
                     (C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                      C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                      C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                         C139301 * C139480 * C139362 * C824) *
                        C825 +
                    ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                      C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                      C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                         C139301 * C139480 * C139362 * C823 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139362 * C822 -
                     (C63788 * C20277 + C64471 + C64471 + C63568 * C20591 +
                      C63787 * C5802 + C64472 + C64472 + C63567 * C6029 +
                      C63786 * C831 + C64473 + C64473 + C63566 * C1251) *
                         C139301 * C139480 * C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                     C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                     C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                        C139301 * C139480 * C139362 * C139346 * C96 -
                    (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                     C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                     C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                        C139301 * C139480 * C139362 * C139346 * C97 +
                    (C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                     C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                     C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                        C139301 * C139480 * C139362 * C139346 * C98 -
                    (C63788 * C834 + C63799 + C63799 + C63568 * C1254 +
                     C63787 * C833 + C63800 + C63800 + C63567 * C1253 +
                     C63786 * C109 + C63801 + C63801 + C63566 * C420) *
                        C139301 * C139480 * C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C1757 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C1758 +
                     (C63786 * C1763 + C65187 + C65187 + C63566 * C2183 +
                      C63787 * C6325 + C65188 + C65188 + C63567 * C6648 +
                      C63788 * C20984 + C65189 + C65189 + C63568 * C21426) *
                         C139301 * C139480 * C1759) *
                        C139346 * C825 +
                    ((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                      C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                      C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                         C139301 * C139480 * C1758 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C1757 -
                     (C63788 * C20983 + C65193 + C65193 + C63568 * C21425 +
                      C63787 * C6324 + C65194 + C65194 + C63567 * C6647 +
                      C63786 * C1764 + C65195 + C65195 + C63566 * C2184) *
                         C139301 * C139480 * C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139362 * C822 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139362 * C823 +
           (C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
            C20668 * C63567 + (C273 * C20278 + C139480 * C20432) * C63635 +
            (C273 * C20362 + C139480 * C20664) * C63568) *
               C139301 * C139362 * C824) *
              C825 +
          ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
            C14412 * C63635 + C14807 * C63568) *
               C139301 * C139362 * C823 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139362 * C822 -
           ((C273 * C20361 + C139480 * C20663) * C63568 +
            (C273 * C20277 + C139480 * C20431) * C63635 + C14807 * C63567 +
            C14412 * C63634 + C1380 * C63566 + C1088 * C63633) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C273 * C106 + C139480 * C274) * C63633 +
           (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
           C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
              C139301 * C139362 * C139346 * C96 -
          (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
           C518 * C63566 + C303 * C63633) *
              C139301 * C139362 * C139346 * C97 +
          (C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
           C1090 * C63635 + C1381 * C63568) *
              C139301 * C139362 * C139346 * C98 -
          ((C273 * C944 + C139480 * C1364) * C63568 +
           (C273 * C834 + C139480 * C1058) * C63635 + C3101 * C63567 +
           C2864 * C63634 + C520 * C63566 + C308 * C63633) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C1757 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C1758 +
           ((C273 * C1763 + C139480 * C1987) * C63633 +
            (C273 * C1873 + C139480 * C2293) * C63566 + C21212 * C63634 +
            C21534 * C63567 + (C273 * C20984 + C139480 * C21202) * C63635 +
            (C273 * C21100 + C139480 * C21530) * C63568) *
               C139301 * C1759) *
              C139346 * C825 +
          ((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
            C18466 * C63635 + C18908 * C63568) *
               C139301 * C1758 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C1757 -
           ((C273 * C21099 + C139480 * C21529) * C63568 +
            (C273 * C20983 + C139480 * C21201) * C63635 + C15833 * C63567 +
            C15496 * C63634 + C2313 * C63566 + C2021 * C63633) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C273 +
             (C63570 * C274 + C139301 * C577) * C139480) *
                C63566 +
            (C64622 + C64646) * C63567 + C64652 * C63568) *
               C139362 * C822 -
           ((C64648 + C64630) * C63568 + (C64647 + C64625) * C63567 +
            (C64646 + C64622) * C63566) *
               C139362 * C823 +
           (C64652 * C63566 + (C64630 + C64648) * C63567 +
            ((C63570 * C20278 + C139301 * C20280) * C273 +
             (C63570 * C20432 + C139301 * C20735) * C139480) *
                C63568) *
               C139362 * C824) *
              C825 +
          (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
            (C64637 + C64651) * C63568) *
               C139362 * C823 -
           (C64653 * C63568 + (C64649 + C64631) * C63567 +
            ((C63570 * C275 + C139301 * C578) * C139480 +
             (C63570 * C107 + C139301 * C113) * C273) *
                C63566) *
               C139362 * C822 -
           (((C63570 * C20431 + C139301 * C20734) * C139480 +
             (C63570 * C20277 + C139301 * C20279) * C273) *
                C63568 +
            (C64651 + C64637) * C63567 + C64653 * C63566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63570 * C106 + C139301 * C112) * C273 +
                                (C63570 * C274 + C139301 * C577) * C139480) *
                                   C63566 +
                               ((C63570 * C829 + C139301 * C837) * C273 +
                                (C63570 * C1053 + C139301 * C1461) * C139480) *
                                   C63567 +
                               ((C63570 * C830 + C139301 * C838) * C273 +
                                (C63570 * C1054 + C139301 * C1462) * C139480) *
                                   C63568) *
                                  C139362 * C139346 * C96 -
                              (((C63570 * C1055 + C139301 * C1463) * C139480 +
                                (C63570 * C831 + C139301 * C839) * C273) *
                                   C63568 +
                               ((C63570 * C1052 + C139301 * C1460) * C139480 +
                                (C63570 * C828 + C139301 * C836) * C273) *
                                   C63567 +
                               ((C63570 * C275 + C139301 * C578) * C139480 +
                                (C63570 * C107 + C139301 * C113) * C273) *
                                   C63566) *
                                  C139362 * C139346 * C97 +
                              (((C63570 * C108 + C139301 * C114) * C273 +
                                (C63570 * C276 + C139301 * C579) * C139480) *
                                   C63566 +
                               ((C63570 * C827 + C139301 * C835) * C273 +
                                (C63570 * C1051 + C139301 * C1459) * C139480) *
                                   C63567 +
                               ((C63570 * C832 + C139301 * C840) * C273 +
                                (C63570 * C1056 + C139301 * C1464) * C139480) *
                                   C63568) *
                                  C139362 * C139346 * C98 -
                              (((C63570 * C1058 + C139301 * C1466) * C139480 +
                                (C63570 * C834 + C139301 * C842) * C273) *
                                   C63568 +
                               ((C63570 * C1057 + C139301 * C1465) * C139480 +
                                (C63570 * C833 + C139301 * C841) * C273) *
                                   C63567 +
                               ((C63570 * C277 + C139301 * C580) * C139480 +
                                (C63570 * C109 + C139301 * C115) * C273) *
                                   C63566) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C273 +
             (C63570 * C274 + C139301 * C577) * C139480) *
                C63566 +
            (C64622 + C64646) * C63567 + C64652 * C63568) *
               C1757 -
           (((C63570 * C8758 + C139301 * C9072) * C139480 +
             (C63570 * C8592 + C139301 * C8595) * C273) *
                C63568 +
            ((C63570 * C4393 + C139301 * C4841) * C139480 +
             (C63570 * C4159 + C139301 * C4163) * C273) *
                C63567 +
            ((C63570 * C1986 + C139301 * C2394) * C139480 +
             (C63570 * C1762 + C139301 * C1770) * C273) *
                C63566) *
               C1758 +
           (((C63570 * C1763 + C139301 * C1771) * C273 +
             (C63570 * C1987 + C139301 * C2395) * C139480) *
                C63566 +
            ((C63570 * C6325 + C139301 * C6328) * C273 +
             (C63570 * C6491 + C139301 * C6805) * C139480) *
                C63567 +
            ((C63570 * C20984 + C139301 * C20986) * C273 +
             (C63570 * C21202 + C139301 * C21633) * C139480) *
                C63568) *
               C1759) *
              C139346 * C825 +
          ((((C63570 * C1761 + C139301 * C1769) * C273 +
             (C63570 * C1985 + C139301 * C2393) * C139480) *
                C63566 +
            ((C63570 * C4160 + C139301 * C4164) * C273 +
             (C63570 * C4394 + C139301 * C4842) * C139480) *
                C63567 +
            ((C63570 * C8591 + C139301 * C8594) * C273 +
             (C63570 * C8757 + C139301 * C9071) * C139480) *
                C63568) *
               C1758 -
           (C64653 * C63568 + (C64649 + C64631) * C63567 +
            ((C63570 * C275 + C139301 * C578) * C139480 +
             (C63570 * C107 + C139301 * C113) * C273) *
                C63566) *
               C1757 -
           (((C63570 * C21201 + C139301 * C21632) * C139480 +
             (C63570 * C20983 + C139301 * C20985) * C273) *
                C63568 +
            ((C63570 * C6490 + C139301 * C6804) * C139480 +
             (C63570 * C6324 + C139301 * C6327) * C273) *
                C63567 +
            ((C63570 * C1988 + C139301 * C2396) * C139480 +
             (C63570 * C1764 + C139301 * C1772) * C273) *
                C63566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] += (-std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139362 * C822 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139362 * C823 +
                     ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C273 +
                      (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                       C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                          C139480) *
                         C139301 * C139362 * C824) *
                        C825 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C273 +
                      (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                       C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                          C139480) *
                         C139301 * C139362 * C823 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139362 * C822 -
                     ((C63635 * C20431 + C63568 * C20808 + C63634 * C5920 +
                       C63567 * C6191 + C63633 * C1055 + C63566 * C1545) *
                          C139480 +
                      (C63635 * C20277 + C63568 * C20361 + C63634 * C5802 +
                       C63567 * C5864 + C63633 * C831 + C63566 * C941) *
                          C273) *
                         C139301 * C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C273 +
                     (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                      C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                         C139480) *
                        C139301 * C139362 * C139346 * C96 -
                    ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                      C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                         C139480 +
                     (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                      C63567 * C938 + C63633 * C107 + C63566 * C188) *
                         C273) *
                        C139301 * C139362 * C139346 * C97 +
                    ((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                      C63567 * C937 + C63635 * C832 + C63568 * C942) *
                         C273 +
                     (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                      C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                         C139480) *
                        C139301 * C139362 * C139346 * C98 -
                    ((C63635 * C1058 + C63568 * C1548 + C63634 * C1057 +
                      C63567 * C1547 + C63633 * C277 + C63566 * C636) *
                         C139480 +
                     (C63635 * C834 + C63568 * C944 + C63634 * C833 +
                      C63567 * C943 + C63633 * C109 + C63566 * C190) *
                         C273) *
                        C139301 * C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C1757 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C1758 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C273 +
                      (C63633 * C1987 + C63566 * C2477 + C63634 * C6491 +
                       C63567 * C6882 + C63635 * C21202 + C63568 * C21739) *
                          C139480) *
                         C139301 * C1759) *
                        C139346 * C825 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C273 +
                      (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                       C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                          C139480) *
                         C139301 * C1758 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C1757 -
                     ((C63635 * C21201 + C63568 * C21738 + C63634 * C6490 +
                       C63567 * C6881 + C63633 * C1988 + C63566 * C2478) *
                          C139480 +
                      (C63635 * C20983 + C63568 * C21099 + C63634 * C6324 +
                       C63567 * C6410 + C63633 * C1764 + C63566 * C1874) *
                          C273) *
                         C139301 * C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (-std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139362 * C822 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139362 * C823 +
           (C15155 * C63566 + C20885 * C63567 +
            (C711 * C20278 + C20882 + C20882 + C139480 * C20877) * C63568) *
               C139301 * C139362 * C824) *
              C825 +
          ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
               C139362 * C823 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139362 * C822 -
           ((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C63568 +
            C15156 * C63567 + C1678 * C63566) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
           C15154 * C63567 + C15155 * C63568) *
              C139301 * C139362 * C139346 * C96 -
          (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
              C139362 * C139346 * C97 +
          (C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 *
              C139362 * C139346 * C98 -
          ((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C63568 +
           C3339 * C63567 + C743 * C63566) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C1757 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C1758 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C63566 +
            C21847 * C63567 +
            (C711 * C20984 + C21844 + C21844 + C139480 * C21839) * C63568) *
               C139301 * C1759) *
              C139346 * C825 +
          ((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
               C1758 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 * C1757 -
           ((C711 * C20983 + C21843 + C21843 + C139480 * C21838) * C63568 +
            C16148 * C63567 + C2611 * C63566) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139530 -
                     ((C63569 * C8592 + C64876 + C64876 + C139301 * C8598) *
                          C139480 * C63568 +
                      (C63569 * C4159 + C64877 + C64877 + C139301 * C4167) *
                          C139480 * C63567 +
                      (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) *
                          C139480 * C63566) *
                         C139426) *
                        C139346 * C139558 +
                    (((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) *
                          C139480 * C63566 +
                      (C63569 * C4160 + C64883 + C64883 + C139301 * C4168) *
                          C139480 * C63567 +
                      (C63569 * C8591 + C64884 + C64884 + C139301 * C8597) *
                          C139480 * C63568) *
                         C139426 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139530) *
                        C139346 * C139559 +
                    (((C63569 * C108 + C63578 + C63578 + C139301 * C120) *
                          C139480 * C63566 +
                      C65577 * C63567 + C65578 * C63568) *
                         C139530 -
                     ((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) *
                          C139480 * C63568 +
                      (C63569 * C4161 + C66275 + C66275 + C139301 * C4169) *
                          C139480 * C63567 +
                      (C63569 * C1760 + C66276 + C66276 + C139301 * C1776) *
                          C139480 * C63566) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139530 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139426) *
                        C139346 * C139558 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C63570 +
                      (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                       C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                          C139301) *
                         C139480 * C139426 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139530) *
                        C139346 * C139559 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C63570 +
                      (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                       C63567 * C945 + C63635 * C840 + C63568 * C950) *
                          C139301) *
                         C139480 * C139530 -
                     ((C63635 * C8593 + C63568 * C8679 + C63634 * C4165 +
                       C63567 * C4281 + C63633 * C1768 + C63566 * C1878) *
                          C139301 +
                      (C63635 * C8590 + C63568 * C8676 + C63634 * C4161 +
                       C63567 * C4277 + C63633 * C1760 + C63566 * C1870) *
                          C63570) *
                         C139480 * C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139530 -
                     ((C24227 * C139301 + C24226 * C63570) * C63568 +
                      (C18464 * C139301 + C18465 * C63570) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139426) *
                        C139346 * C139558 +
                    (((C2020 * C63570 + C2019 * C139301) * C63566 +
                      (C4410 * C63570 + C4411 * C139301) * C63567 +
                      (C18466 * C63570 + C18467 * C139301) * C63568) *
                         C139426 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139530) *
                        C139346 * C139559 +
                    (((C305 * C63570 + C306 * C139301) * C63566 +
                      (C65727 + C65728) * C63567 + (C65729 + C65730) * C63568) *
                         C139530 -
                     (((C273 * C8593 + C139480 * C8759) * C139301 +
                       (C273 * C8590 + C139480 * C8756) * C63570) *
                          C63568 +
                      (C4413 * C139301 + C4412 * C63570) * C63567 +
                      (C2017 * C139301 + C2018 * C63570) * C63566) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139530 -
           ((C63570 * C8678 + C139301 * C8838) * C63568 +
            (C63570 * C8592 + C139301 * C8595) * C63635 +
            (C63570 * C4275 + C139301 * C4511) * C63567 +
            (C63570 * C4159 + C139301 * C4163) * C63634 +
            (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139426) *
              C139346 * C139558 +
          (((C63570 * C1761 + C139301 * C1769) * C63633 +
            (C63570 * C1871 + C139301 * C2099) * C63566 +
            (C63570 * C4160 + C139301 * C4164) * C63634 +
            (C63570 * C4276 + C139301 * C4512) * C63567 +
            (C63570 * C8591 + C139301 * C8594) * C63635 +
            (C63570 * C8677 + C139301 * C8837) * C63568) *
               C139480 * C139426 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139530) *
              C139346 * C139559 +
          (((C63570 * C108 + C139301 * C114) * C63633 +
            (C63570 * C189 + C139301 * C362) * C63566 + C65813 * C63634 +
            C65814 * C63567 + C65815 * C63635 + C65816 * C63568) *
               C139480 * C139530 -
           ((C63570 * C8676 + C139301 * C8836) * C63568 +
            (C63570 * C8590 + C139301 * C8593) * C63635 +
            (C63570 * C4277 + C139301 * C4513) * C63567 +
            (C63570 * C4161 + C139301 * C4165) * C63634 +
            (C63570 * C1870 + C139301 * C2098) * C63566 +
            (C63570 * C1760 + C139301 * C1768) * C63633) *
               C139480 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139530 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139426) *
                        C139346 * C139558 +
                    ((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                      C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                      C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                         C139301 * C139480 * C139426 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139530) *
                        C139346 * C139559 +
                    ((C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                      C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                      C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                         C139301 * C139480 * C139530 -
                     (C63788 * C8590 + C66573 + C66573 + C63568 * C8913 +
                      C63787 * C4161 + C66574 + C66574 + C63567 * C4615 +
                      C63786 * C1760 + C66575 + C66575 + C63566 * C2180) *
                         C139301 * C139480 * C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139530 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139426) *
              C139346 * C139558 +
          ((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
            C18466 * C63635 + C18908 * C63568) *
               C139301 * C139426 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139530) *
              C139346 * C139559 +
          ((C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
            C1090 * C63635 + C1381 * C63568) *
               C139301 * C139530 -
           ((C273 * C8676 + C139480 * C8993) * C63568 +
            (C273 * C8590 + C139480 * C8756) * C63635 + C4741 * C63567 +
            C4412 * C63634 + C2311 * C63566 + C2018 * C63633) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139530 -
                     (((C63570 * C8758 + C139301 * C9072) * C139480 +
                       (C63570 * C8592 + C139301 * C8595) * C273) *
                          C63568 +
                      ((C63570 * C4393 + C139301 * C4841) * C139480 +
                       (C63570 * C4159 + C139301 * C4163) * C273) *
                          C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139426) *
                        C139346 * C139558 +
                    ((((C63570 * C1761 + C139301 * C1769) * C273 +
                       (C63570 * C1985 + C139301 * C2393) * C139480) *
                          C63566 +
                      ((C63570 * C4160 + C139301 * C4164) * C273 +
                       (C63570 * C4394 + C139301 * C4842) * C139480) *
                          C63567 +
                      ((C63570 * C8591 + C139301 * C8594) * C273 +
                       (C63570 * C8757 + C139301 * C9071) * C139480) *
                          C63568) *
                         C139426 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139530) *
                        C139346 * C139559 +
                    ((((C63570 * C108 + C139301 * C114) * C273 +
                       (C63570 * C276 + C139301 * C579) * C139480) *
                          C63566 +
                      (C66042 + C66050) * C63567 + (C66045 + C66051) * C63568) *
                         C139530 -
                     (((C63570 * C8756 + C139301 * C9070) * C139480 +
                       (C63570 * C8590 + C139301 * C8593) * C273) *
                          C63568 +
                      ((C63570 * C4395 + C139301 * C4843) * C139480 +
                       (C63570 * C4161 + C139301 * C4165) * C273) *
                          C63567 +
                      ((C63570 * C1984 + C139301 * C2392) * C139480 +
                       (C63570 * C1760 + C139301 * C1768) * C273) *
                          C63566) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[63] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139530 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139426) *
                        C139346 * C139558 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C273 +
                      (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                       C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                          C139480) *
                         C139301 * C139426 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139530) *
                        C139346 * C139559 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C273 +
                      (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                       C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                          C139480) *
                         C139301 * C139530 -
                     ((C63635 * C8756 + C63568 * C9147 + C63634 * C4395 +
                       C63567 * C4945 + C63633 * C1984 + C63566 * C2474) *
                          C139480 +
                      (C63635 * C8590 + C63568 * C8676 + C63634 * C4161 +
                       C63567 * C4277 + C63633 * C1760 + C63566 * C1870) *
                          C273) *
                         C139301 * C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139530 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139426) *
              C139346 * C139558 +
          ((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
               C139426 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139530) *
              C139346 * C139559 +
          ((C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 *
               C139530 -
           ((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C63568 +
            C5073 * C63567 + C2609 * C63566) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                         C139480 * C63566 +
                     (C63569 * C829 + C63573 + C63573 + C139301 * C845) *
                         C139480 * C63567 +
                     (C63569 * C830 + C63574 + C63574 + C139301 * C846) *
                         C139480 * C63568) *
                        C139362 * C139346 * C96 -
                    ((C63569 * C831 + C63575 + C63575 + C139301 * C847) *
                         C139480 * C63568 +
                     (C63569 * C828 + C63576 + C63576 + C139301 * C844) *
                         C139480 * C63567 +
                     (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                         C139480 * C63566) *
                        C139362 * C139346 * C97 +
                    ((C63569 * C108 + C63578 + C63578 + C139301 * C120) *
                         C139480 * C63566 +
                     (C63569 * C827 + C63579 + C63579 + C139301 * C843) *
                         C139480 * C63567 +
                     (C63569 * C832 + C63580 + C63580 + C139301 * C848) *
                         C139480 * C63568) *
                        C139362 * C139346 * C98 -
                    ((C63569 * C834 + C63581 + C63581 + C139301 * C850) *
                         C139480 * C63568 +
                     (C63569 * C833 + C63582 + C63582 + C139301 * C849) *
                         C139480 * C63567 +
                     (C63569 * C109 + C63583 + C63583 + C139301 * C121) *
                         C139480 * C63566) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139362 * C822 -
                     (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) *
                         C139362 * C823 +
                     (C64111 * C63566 + C64112 * C63567 +
                      (C63569 * C20278 + C64083 + C64083 + C139301 * C20282) *
                          C139480 * C63568) *
                         C139362 * C824) *
                        C825 +
                    ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) *
                         C139362 * C823 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139362 * C822 -
                     ((C63569 * C20277 + C64091 + C64091 + C139301 * C20281) *
                          C139480 * C63568 +
                      C64115 * C63567 + C64114 * C63566) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C63570 +
                     (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                      C63567 * C947 + C63635 * C838 + C63568 * C948) *
                         C139301) *
                        C139480 * C139362 * C139346 * C96 -
                    ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                      C63567 * C946 + C63633 * C113 + C63566 * C194) *
                         C139301 +
                     (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                      C63567 * C938 + C63633 * C107 + C63566 * C188) *
                         C63570) *
                        C139480 * C139362 * C139346 * C97 +
                    ((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                      C63567 * C937 + C63635 * C832 + C63568 * C942) *
                         C63570 +
                     (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                      C63567 * C945 + C63635 * C840 + C63568 * C950) *
                         C139301) *
                        C139480 * C139362 * C139346 * C98 -
                    ((C63635 * C842 + C63568 * C952 + C63634 * C841 +
                      C63567 * C951 + C63633 * C115 + C63566 * C196) *
                         C139301 +
                     (C63635 * C834 + C63568 * C944 + C63634 * C833 +
                      C63567 * C943 + C63633 * C109 + C63566 * C190) *
                         C63570) *
                        C139480 * C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139362 * C822 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139362 * C823 +
                     ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C63570 +
                      (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                       C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                          C139301) *
                         C139480 * C139362 * C824) *
                        C825 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C63570 +
                      (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                       C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                          C139301) *
                         C139480 * C139362 * C823 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139362 * C822 -
                     ((C63635 * C20279 + C63568 * C20363 + C63634 * C5805 +
                       C63567 * C5867 + C63633 * C839 + C63566 * C949) *
                          C139301 +
                      (C63635 * C20277 + C63568 * C20361 + C63634 * C5802 +
                       C63567 * C5864 + C63633 * C831 + C63566 * C941) *
                          C63570) *
                         C139480 * C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C63570 +
                      (C273 * C112 + C139480 * C280) * C139301) *
                         C63566 +
                     (C14408 * C63570 + C14409 * C139301) * C63567 +
                     (C14411 * C63570 + C14410 * C139301) * C63568) *
                        C139362 * C139346 * C96 -
                    ((C1089 * C139301 + C1088 * C63570) * C63568 +
                     (C1086 * C139301 + C1087 * C63570) * C63567 +
                     (C304 * C139301 + C303 * C63570) * C63566) *
                        C139362 * C139346 * C97 +
                    ((C305 * C63570 + C306 * C139301) * C63566 +
                     (C1085 * C63570 + C1084 * C139301) * C63567 +
                     (C1090 * C63570 + C1091 * C139301) * C63568) *
                        C139362 * C139346 * C98 -
                    (((C273 * C842 + C139480 * C1066) * C139301 +
                      (C273 * C834 + C139480 * C1058) * C63570) *
                         C63568 +
                     (C2865 * C139301 + C2864 * C63570) * C63567 +
                     (C307 * C139301 + C308 * C63570) * C63566) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139362 * C822 -
                     ((C64268 + C64269) * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139362 * C823 +
                     (C64276 * C63566 + (C64269 + C64268) * C63567 +
                      ((C273 * C20278 + C139480 * C20432) * C63570 +
                       (C273 * C20280 + C139480 * C20434) * C139301) *
                          C63568) *
                         C139362 * C824) *
                        C825 +
                    (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
                      (C64274 + C64275) * C63568) *
                         C139362 * C823 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139362 * C822 -
                     (((C273 * C20279 + C139480 * C20433) * C139301 +
                       (C273 * C20277 + C139480 * C20431) * C63570) *
                          C63568 +
                      (C64275 + C64274) * C63567 + C64277 * C63566) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C63633 +
           (C63570 * C187 + C139301 * C360) * C63566 +
           (C63570 * C829 + C139301 * C837) * C63634 +
           (C63570 * C939 + C139301 * C1167) * C63567 +
           (C63570 * C830 + C139301 * C838) * C63635 +
           (C63570 * C940 + C139301 * C1168) * C63568) *
              C139480 * C139362 * C139346 * C96 -
          ((C63570 * C941 + C139301 * C1169) * C63568 +
           (C63570 * C831 + C139301 * C839) * C63635 +
           (C63570 * C938 + C139301 * C1166) * C63567 +
           (C63570 * C828 + C139301 * C836) * C63634 +
           (C63570 * C188 + C139301 * C361) * C63566 +
           (C63570 * C107 + C139301 * C113) * C63633) *
              C139480 * C139362 * C139346 * C97 +
          ((C63570 * C108 + C139301 * C114) * C63633 +
           (C63570 * C189 + C139301 * C362) * C63566 +
           (C63570 * C827 + C139301 * C835) * C63634 +
           (C63570 * C937 + C139301 * C1165) * C63567 +
           (C63570 * C832 + C139301 * C840) * C63635 +
           (C63570 * C942 + C139301 * C1170) * C63568) *
              C139480 * C139362 * C139346 * C98 -
          ((C63570 * C944 + C139301 * C1172) * C63568 +
           (C63570 * C834 + C139301 * C842) * C63635 +
           (C63570 * C943 + C139301 * C1171) * C63567 +
           (C63570 * C833 + C139301 * C841) * C63634 +
           (C63570 * C190 + C139301 * C363) * C63566 +
           (C63570 * C109 + C139301 * C115) * C63633) *
              C139480 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139362 * C822 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139362 * C823 +
           (C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
            C64380 * C63567 + (C63570 * C20278 + C139301 * C20280) * C63635 +
            (C63570 * C20362 + C139301 * C20512) * C63568) *
               C139480 * C139362 * C824) *
              C825 +
          ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
            C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
               C139480 * C139362 * C823 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139362 * C822 -
           ((C63570 * C20361 + C139301 * C20511) * C63568 +
            (C63570 * C20277 + C139301 * C20279) * C63635 + C64387 * C63567 +
            C64386 * C63634 + C64385 * C63566 + C64384 * C63633) *
               C139480 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                     C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                     C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                        C139301 * C139480 * C139362 * C139346 * C96 -
                    (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                     C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                     C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                        C139301 * C139480 * C139362 * C139346 * C97 +
                    (C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                     C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                     C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                        C139301 * C139480 * C139362 * C139346 * C98 -
                    (C63788 * C834 + C63799 + C63799 + C63568 * C1254 +
                     C63787 * C833 + C63800 + C63800 + C63567 * C1253 +
                     C63786 * C109 + C63801 + C63801 + C63566 * C420) *
                        C139301 * C139480 * C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139362 * C822 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139362 * C823 +
                     (C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                      C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                      C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                         C139301 * C139480 * C139362 * C824) *
                        C825 +
                    ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                      C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                      C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                         C139301 * C139480 * C139362 * C823 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139362 * C822 -
                     (C63788 * C20277 + C64471 + C64471 + C63568 * C20591 +
                      C63787 * C5802 + C64472 + C64472 + C63567 * C6029 +
                      C63786 * C831 + C64473 + C64473 + C63566 * C1251) *
                         C139301 * C139480 * C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C273 * C106 + C139480 * C274) * C63633 +
           (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
           C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
              C139301 * C139362 * C139346 * C96 -
          (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
           C518 * C63566 + C303 * C63633) *
              C139301 * C139362 * C139346 * C97 +
          (C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
           C1090 * C63635 + C1381 * C63568) *
              C139301 * C139362 * C139346 * C98 -
          ((C273 * C944 + C139480 * C1364) * C63568 +
           (C273 * C834 + C139480 * C1058) * C63635 + C3101 * C63567 +
           C2864 * C63634 + C520 * C63566 + C308 * C63633) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139362 * C822 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139362 * C823 +
           (C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
            C20668 * C63567 + (C273 * C20278 + C139480 * C20432) * C63635 +
            (C273 * C20362 + C139480 * C20664) * C63568) *
               C139301 * C139362 * C824) *
              C825 +
          ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
            C14412 * C63635 + C14807 * C63568) *
               C139301 * C139362 * C823 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139362 * C822 -
           ((C273 * C20361 + C139480 * C20663) * C63568 +
            (C273 * C20277 + C139480 * C20431) * C63635 + C14807 * C63567 +
            C14412 * C63634 + C1380 * C63566 + C1088 * C63633) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C273 +
                      (C63570 * C274 + C139301 * C577) * C139480) *
                         C63566 +
                     ((C63570 * C829 + C139301 * C837) * C273 +
                      (C63570 * C1053 + C139301 * C1461) * C139480) *
                         C63567 +
                     ((C63570 * C830 + C139301 * C838) * C273 +
                      (C63570 * C1054 + C139301 * C1462) * C139480) *
                         C63568) *
                        C139362 * C139346 * C96 -
                    (((C63570 * C1055 + C139301 * C1463) * C139480 +
                      (C63570 * C831 + C139301 * C839) * C273) *
                         C63568 +
                     ((C63570 * C1052 + C139301 * C1460) * C139480 +
                      (C63570 * C828 + C139301 * C836) * C273) *
                         C63567 +
                     ((C63570 * C275 + C139301 * C578) * C139480 +
                      (C63570 * C107 + C139301 * C113) * C273) *
                         C63566) *
                        C139362 * C139346 * C97 +
                    (((C63570 * C108 + C139301 * C114) * C273 +
                      (C63570 * C276 + C139301 * C579) * C139480) *
                         C63566 +
                     ((C63570 * C827 + C139301 * C835) * C273 +
                      (C63570 * C1051 + C139301 * C1459) * C139480) *
                         C63567 +
                     ((C63570 * C832 + C139301 * C840) * C273 +
                      (C63570 * C1056 + C139301 * C1464) * C139480) *
                         C63568) *
                        C139362 * C139346 * C98 -
                    (((C63570 * C1058 + C139301 * C1466) * C139480 +
                      (C63570 * C834 + C139301 * C842) * C273) *
                         C63568 +
                     ((C63570 * C1057 + C139301 * C1465) * C139480 +
                      (C63570 * C833 + C139301 * C841) * C273) *
                         C63567 +
                     ((C63570 * C277 + C139301 * C580) * C139480 +
                      (C63570 * C109 + C139301 * C115) * C273) *
                         C63566) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139362 * C822 -
                     ((C64648 + C64630) * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139362 * C823 +
                     (C64652 * C63566 + (C64630 + C64648) * C63567 +
                      ((C63570 * C20278 + C139301 * C20280) * C273 +
                       (C63570 * C20432 + C139301 * C20735) * C139480) *
                          C63568) *
                         C139362 * C824) *
                        C825 +
                    (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
                      (C64637 + C64651) * C63568) *
                         C139362 * C823 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139362 * C822 -
                     (((C63570 * C20431 + C139301 * C20734) * C139480 +
                       (C63570 * C20277 + C139301 * C20279) * C273) *
                          C63568 +
                      (C64651 + C64637) * C63567 + C64653 * C63566) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[64] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C273 +
                     (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                      C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                         C139480) *
                        C139301 * C139362 * C139346 * C96 -
                    ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                      C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                         C139480 +
                     (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                      C63567 * C938 + C63633 * C107 + C63566 * C188) *
                         C273) *
                        C139301 * C139362 * C139346 * C97 +
                    ((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                      C63567 * C937 + C63635 * C832 + C63568 * C942) *
                         C273 +
                     (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                      C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                         C139480) *
                        C139301 * C139362 * C139346 * C98 -
                    ((C63635 * C1058 + C63568 * C1548 + C63634 * C1057 +
                      C63567 * C1547 + C63633 * C277 + C63566 * C636) *
                         C139480 +
                     (C63635 * C834 + C63568 * C944 + C63634 * C833 +
                      C63567 * C943 + C63633 * C109 + C63566 * C190) *
                         C273) *
                        C139301 * C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139362 * C822 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139362 * C823 +
                     ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C273 +
                      (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                       C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                          C139480) *
                         C139301 * C139362 * C824) *
                        C825 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C273 +
                      (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                       C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                          C139480) *
                         C139301 * C139362 * C823 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139362 * C822 -
                     ((C63635 * C20431 + C63568 * C20808 + C63634 * C5920 +
                       C63567 * C6191 + C63633 * C1055 + C63566 * C1545) *
                          C139480 +
                      (C63635 * C20277 + C63568 * C20361 + C63634 * C5802 +
                       C63567 * C5864 + C63633 * C831 + C63566 * C941) *
                          C273) *
                         C139301 * C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
           C15154 * C63567 + C15155 * C63568) *
              C139301 * C139362 * C139346 * C96 -
          (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
              C139362 * C139346 * C97 +
          (C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 *
              C139362 * C139346 * C98 -
          ((C711 * C834 + C1667 + C1667 + C139480 * C1650) * C63568 +
           C3339 * C63567 + C743 * C63566) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139362 * C822 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139362 * C823 +
           (C15155 * C63566 + C20885 * C63567 +
            (C711 * C20278 + C20882 + C20882 + C139480 * C20877) * C63568) *
               C139301 * C139362 * C824) *
              C825 +
          ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
               C139362 * C823 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139362 * C822 -
           ((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C63568 +
            C15156 * C63567 + C1678 * C63566) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139362 * C139560 -
                     (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) *
                         C139362 * C139561 +
                     (C64111 * C63566 + C64112 * C63567 + C68563 * C63568) *
                         C139362 * C7039) *
                        C139521 +
                    ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) *
                         C139362 * C139561 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139362 * C139560 -
                     ((C63569 * C20277 + C64091 + C64091 + C139301 * C20281) *
                          C139480 * C63568 +
                      C64115 * C63567 + C64114 * C63566) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139362 * C139560 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139362 * C139561 +
                     ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C63570 +
                      (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                       C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                          C139301) *
                         C139480 * C139362 * C7039) *
                        C139521 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C63570 +
                      (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                       C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                          C139301) *
                         C139480 * C139362 * C139561 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139362 * C139560 -
                     ((C63635 * C20279 + C63568 * C20363 + C63634 * C5805 +
                       C63567 * C5867 + C63633 * C839 + C63566 * C949) *
                          C139301 +
                      (C63635 * C20277 + C63568 * C20361 + C63634 * C5802 +
                       C63567 * C5864 + C63633 * C831 + C63566 * C941) *
                          C63570) *
                         C139480 * C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139362 * C139560 -
                     (C68668 * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139362 * C139561 +
                     (C64276 * C63566 + (C64269 + C64268) * C63567 +
                      (C68675 + C68676) * C63568) *
                         C139362 * C7039) *
                        C139521 +
                    (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
                      (C64274 + C64275) * C63568) *
                         C139362 * C139561 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139362 * C139560 -
                     (((C273 * C20279 + C139480 * C20433) * C139301 +
                       (C273 * C20277 + C139480 * C20431) * C63570) *
                          C63568 +
                      (C64275 + C64274) * C63567 + C64277 * C63566) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139362 * C139560 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139362 * C139561 +
           (C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
            C64380 * C63567 + C68732 * C63635 + C68733 * C63568) *
               C139480 * C139362 * C7039) *
              C139521 +
          ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
            C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
               C139480 * C139362 * C139561 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139362 * C139560 -
           ((C63570 * C20361 + C139301 * C20511) * C63568 +
            (C63570 * C20277 + C139301 * C20279) * C63635 + C64387 * C63567 +
            C64386 * C63634 + C64385 * C63566 + C64384 * C63633) *
               C139480 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139362 * C139560 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139362 * C139561 +
                     (C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                      C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                      C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                         C139301 * C139480 * C139362 * C7039) *
                        C139521 +
                    ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                      C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                      C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                         C139301 * C139480 * C139362 * C139561 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139362 * C139560 -
                     (C63788 * C20277 + C64471 + C64471 + C63568 * C20591 +
                      C63787 * C5802 + C64472 + C64472 + C63567 * C6029 +
                      C63786 * C831 + C64473 + C64473 + C63566 * C1251) *
                         C139301 * C139480 * C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139362 * C139560 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139362 * C139561 +
           (C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
            C20668 * C63567 + C68673 * C63635 + C68841 * C63568) *
               C139301 * C139362 * C7039) *
              C139521 +
          ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
            C14412 * C63635 + C14807 * C63568) *
               C139301 * C139362 * C139561 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139362 * C139560 -
           ((C273 * C20361 + C139480 * C20663) * C63568 +
            (C273 * C20277 + C139480 * C20431) * C63635 + C14807 * C63567 +
            C14412 * C63634 + C1380 * C63566 + C1088 * C63633) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139362 * C139560 -
                     (C68893 * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139362 * C139561 +
                     (C64652 * C63566 + (C64630 + C64648) * C63567 +
                      (C68894 + C68898) * C63568) *
                         C139362 * C7039) *
                        C139521 +
                    (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
                      (C64637 + C64651) * C63568) *
                         C139362 * C139561 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139362 * C139560 -
                     (((C63570 * C20431 + C139301 * C20734) * C139480 +
                       (C63570 * C20277 + C139301 * C20279) * C273) *
                          C63568 +
                      (C64651 + C64637) * C63567 + C64653 * C63566) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[65] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139362 * C139560 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139362 * C139561 +
                     ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C273 +
                      (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                       C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                          C139480) *
                         C139301 * C139362 * C7039) *
                        C139521 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C273 +
                      (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                       C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                          C139480) *
                         C139301 * C139362 * C139561 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139362 * C139560 -
                     ((C63635 * C20431 + C63568 * C20808 + C63634 * C5920 +
                       C63567 * C6191 + C63633 * C1055 + C63566 * C1545) *
                          C139480 +
                      (C63635 * C20277 + C63568 * C20361 + C63634 * C5802 +
                       C63567 * C5864 + C63633 * C831 + C63566 * C941) *
                          C273) *
                         C139301 * C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139362 * C139560 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139362 * C139561 +
           (C15155 * C63566 + C20885 * C63567 + C69006 * C63568) * C139301 *
               C139362 * C7039) *
              C139521 +
          ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
               C139362 * C139561 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139362 * C139560 -
           ((C711 * C20277 + C20881 + C20881 + C139480 * C20876) * C63568 +
            C15156 * C63567 + C1678 * C63566) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C139530 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C139426) *
              C139560 +
          ((C66993 * C63566 + C66992 * C63567 + C71374 * C63568) * C139426 -
           (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C139530) *
              C139561 +
          ((C64111 * C63566 + C64112 * C63567 + C68563 * C63568) * C139530 -
           ((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139480 *
                C63568 +
            C71374 * C63567 + C66992 * C63566) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139530 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139426) *
                        C139560 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C63570 +
                      (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                       C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                          C139301) *
                         C139480 * C139426 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139530) *
                        C139561 +
                    (((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C63570 +
                      (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                       C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                          C139301) *
                         C139480 * C139530 -
                     ((C63635 * C71365 + C63568 * C71449 + C63634 * C24000 +
                       C63567 * C24116 + C63633 * C8595 + C63566 * C8681) *
                          C139301 +
                      (C63635 * C71364 + C63568 * C71448 + C63634 * C23998 +
                       C63567 * C24114 + C63633 * C8592 + C63566 * C8678) *
                          C63570) *
                         C139480 * C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexz[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139530 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139426) *
                        C139560 +
                    (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
                      (C71534 + C71535) * C63568) *
                         C139426 -
                     (C68668 * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139530) *
                        C139561 +
                    ((C64276 * C63566 + (C64269 + C64268) * C63567 +
                      (C68675 + C68676) * C63568) *
                         C139530 -
                     (((C273 * C71365 + C139480 * C71525) * C139301 +
                       (C273 * C71364 + C139480 * C71524) * C63570) *
                          C63568 +
                      (C71535 + C71534) * C63567 + C71527 * C63566) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139530 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139426) *
              C139560 +
          ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
            C67314 * C63567 + C71615 * C63635 + C71616 * C63568) *
               C139480 * C139426 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139530) *
              C139561 +
          ((C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
            C64380 * C63567 + C68732 * C63635 + C68733 * C63568) *
               C139480 * C139530 -
           ((C63570 * C71448 + C139301 * C71609) * C63568 +
            (C63570 * C71364 + C139301 * C71365) * C63635 + C71616 * C63567 +
            C71615 * C63634 + C67314 * C63566 + C67315 * C63633) *
               C139480 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139530 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139426) *
                        C139560 +
                    ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                      C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                      C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                         C139301 * C139480 * C139426 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139530) *
                        C139561 +
                    ((C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                      C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                      C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                         C139301 * C139480 * C139530 -
                     (C63788 * C71364 + C71692 + C71692 + C63568 * C71690 +
                      C63787 * C23998 + C71693 + C71693 + C63567 * C24440 +
                      C63786 * C8592 + C71694 + C71694 + C63566 * C8915) *
                         C139301 * C139480 * C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139530 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139426) *
              C139560 +
          ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
            C24548 * C63567 + C71532 * C63635 + C71772 * C63568) *
               C139301 * C139426 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139530) *
              C139561 +
          ((C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
            C20668 * C63567 + C68673 * C63635 + C68841 * C63568) *
               C139301 * C139530 -
           ((C273 * C71448 + C139480 * C71768) * C63568 +
            (C273 * C71364 + C139480 * C71524) * C63635 + C71772 * C63567 +
            C71532 * C63634 + C24548 * C63566 + C24226 * C63633) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139530 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139426) *
                        C139560 +
                    (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
                      (C71849 + C71853) * C63568) *
                         C139426 -
                     (C68893 * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139530) *
                        C139561 +
                    ((C64652 * C63566 + (C64630 + C64648) * C63567 +
                      (C68894 + C68898) * C63568) *
                         C139530 -
                     (((C63570 * C71524 + C139301 * C71846) * C139480 +
                       (C63570 * C71364 + C139301 * C71365) * C273) *
                          C63568 +
                      (C71853 + C71849) * C63567 + C71848 * C63566) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezy[66] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139530 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139426) *
                        C139560 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C273 +
                      (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                       C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                          C139480) *
                         C139301 * C139426 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139530) *
                        C139561 +
                    (((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C273 +
                      (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                       C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                          C139480) *
                         C139301 * C139530 -
                     ((C63635 * C71524 + C63568 * C71927 + C63634 * C24216 +
                       C63567 * C24753 + C63633 * C8758 + C63566 * C9149) *
                          C139480 +
                      (C63635 * C71364 + C63568 * C71448 + C63634 * C23998 +
                       C63567 * C24114 + C63633 * C8592 + C63566 * C8678) *
                          C273) *
                         C139301 * C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139530 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139426) *
              C139560 +
          ((C19327 * C63566 + C24861 * C63567 + C72009 * C63568) * C139301 *
               C139426 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139530) *
              C139561 +
          ((C15155 * C63566 + C20885 * C63567 + C69006 * C63568) * C139301 *
               C139530 -
           ((C711 * C71364 + C72006 + C72006 + C139480 * C72002) * C63568 +
            C72009 * C63567 + C24861 * C63566) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
               C63566 +
           C64110 * C63567 + C64111 * C63568) *
              C139362 * C5796 -
          (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C139362 *
              C5797 +
          (C64111 * C63566 + C64112 * C63567 + C68563 * C63568) * C139362 *
              C5798 -
          ((C63569 * C68553 + C68559 + C68559 + C139301 * C68555) * C139480 *
               C63568 +
           C68563 * C63567 + C64112 * C63566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C139362 * C5149 -
           (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C139362 *
               C139398) *
              C5151 +
          ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) * C139362 *
               C139398 -
           (C64114 * C63568 + C64113 * C63567 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C139480 *
                C63566) *
               C139362 * C5149) *
              C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C139480 *
                C63566 +
            C65577 * C63567 + C65578 * C63568) *
               C139362 * C5149 -
           ((C63569 * C5801 + C65570 + C65570 + C139301 * C5807) * C139480 *
                C63568 +
            C65578 * C63567 + C65577 * C63566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C1757 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C1758 +
           ((C63569 * C1763 + C64879 + C64879 + C139301 * C1779) * C139480 *
                C63566 +
            C69095 * C63567 + C69096 * C63568) *
               C1759) *
              C5149 +
          ((C66993 * C63566 + C66992 * C63567 +
            (C63569 * C23998 + C66974 + C66974 + C139301 * C24002) * C139480 *
                C63568) *
               C1758 -
           (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C1757 -
           ((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139480 *
                C63568 +
            C69096 * C63567 + C69095 * C63566) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] += (-std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C63570 +
                     (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                      C63567 * C947 + C63635 * C838 + C63568 * C948) *
                         C139301) *
                        C139480 * C139362 * C5796 -
                    ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                      C63567 * C948 + C63633 * C837 + C63566 * C947) *
                         C139301 +
                     (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                      C63567 * C940 + C63633 * C829 + C63566 * C939) *
                         C63570) *
                        C139480 * C139362 * C5797 +
                    ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                      C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                         C63570 +
                     (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                      C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                         C139301) *
                        C139480 * C139362 * C5798 -
                    ((C63635 * C68554 + C63568 * C68614 + C63634 * C20280 +
                      C63567 * C20364 + C63633 * C5806 + C63566 * C5868) *
                         C139301 +
                     (C63635 * C68553 + C63568 * C68613 + C63634 * C20278 +
                      C63567 * C20362 + C63633 * C5803 + C63566 * C5865) *
                         C63570) *
                        C139480 * C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139362 * C5149 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139362 * C139398) *
                        C5151 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C63570 +
                      (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                       C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                          C139301) *
                         C139480 * C139362 * C139398 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139362 * C5149) *
                        C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C63570 +
                      (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                       C63567 * C945 + C63635 * C840 + C63568 * C950) *
                          C139301) *
                         C139480 * C139362 * C5149 -
                     ((C63635 * C5804 + C63568 * C5866 + C63634 * C840 +
                       C63567 * C950 + C63633 * C835 + C63566 * C945) *
                          C139301 +
                      (C63635 * C5801 + C63568 * C5863 + C63634 * C832 +
                       C63567 * C942 + C63633 * C827 + C63566 * C937) *
                          C63570) *
                         C139480 * C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C1757 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C1758 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C63570 +
                      (C63633 * C1771 + C63566 * C1881 + C63634 * C6328 +
                       C63567 * C6414 + C63635 * C20986 + C63568 * C21102) *
                          C139301) *
                         C139480 * C1759) *
                        C5149 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C63570 +
                      (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                       C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                          C139301) *
                         C139480 * C1758 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C1757 -
                     ((C63635 * C69081 + C63568 * C69171 + C63634 * C20986 +
                       C63567 * C21102 + C63633 * C6328 + C63566 * C6414) *
                          C139301 +
                      (C63635 * C69080 + C63568 * C69170 + C63634 * C20984 +
                       C63567 * C21100 + C63633 * C6325 + C63566 * C6411) *
                          C63570) *
                         C139480 * C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexz[67] += (-std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C63570 +
                      (C273 * C112 + C139480 * C280) * C139301) *
                         C63566 +
                     (C64264 + C64265) * C63567 + C64276 * C63568) *
                        C139362 * C5796 -
                    (C68668 * C63568 + (C64267 + C64266) * C63567 +
                     (C64265 + C64264) * C63566) *
                        C139362 * C5797 +
                    (C64276 * C63566 + (C64269 + C64268) * C63567 +
                     (C68675 + C68676) * C63568) *
                        C139362 * C5798 -
                    (((C273 * C68554 + C139480 * C68666) * C139301 +
                      (C273 * C68553 + C139480 * C68665) * C63570) *
                         C63568 +
                     (C68676 + C68675) * C63567 + C68668 * C63566) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139362 * C5149 -
                     ((C64268 + C64269) * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139362 * C139398) *
                        C5151 +
                    (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
                      (C64274 + C64275) * C63568) *
                         C139362 * C139398 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139362 * C5149) *
                        C5152 +
                    (((C305 * C63570 + C306 * C139301) * C63566 +
                      (C65727 + C65728) * C63567 + (C65729 + C65730) * C63568) *
                         C139362 * C5149 -
                     (((C273 * C5804 + C139480 * C5922) * C139301 +
                       (C273 * C5801 + C139480 * C5919) * C63570) *
                          C63568 +
                      (C65730 + C65729) * C63567 + (C65728 + C65727) * C63566) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C1757 -
                     ((C67192 + C67193) * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C1758 +
                     (((C273 * C1763 + C139480 * C1987) * C63570 +
                       (C273 * C1771 + C139480 * C1995) * C139301) *
                          C63566 +
                      (C69249 + C69250) * C63567 + (C69257 + C69258) * C63568) *
                         C1759) *
                        C5149 +
                    (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
                      ((C273 * C23998 + C139480 * C24216) * C63570 +
                       (C273 * C24000 + C139480 * C24218) * C139301) *
                          C63568) *
                         C1758 -
                     (C68668 * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C1757 -
                     (((C273 * C69081 + C139480 * C69247) * C139301 +
                       (C273 * C69080 + C139480 * C69246) * C63570) *
                          C63568 +
                      (C69258 + C69257) * C63567 + (C69250 + C69249) * C63566) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C63633 +
           (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
           C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
              C139480 * C139362 * C5796 -
          (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
           C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
              C139480 * C139362 * C5797 +
          (C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
           C64380 * C63567 + C68732 * C63635 + C68733 * C63568) *
              C139480 * C139362 * C5798 -
          ((C63570 * C68613 + C139301 * C68726) * C63568 +
           (C63570 * C68553 + C139301 * C68554) * C63635 + C68733 * C63567 +
           C68732 * C63634 + C64380 * C63566 + C64381 * C63633) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139362 * C5149 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139362 * C139398) *
              C5151 +
          ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
            C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
               C139480 * C139362 * C139398 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C63570 * C108 + C139301 * C114) * C63633 +
            (C63570 * C189 + C139301 * C362) * C63566 + C65813 * C63634 +
            C65814 * C63567 + C65815 * C63635 + C65816 * C63568) *
               C139480 * C139362 * C5149 -
           ((C63570 * C5863 + C139301 * C5975) * C63568 +
            (C63570 * C5801 + C139301 * C5804) * C63635 + C65816 * C63567 +
            C65815 * C63634 + C65814 * C63566 + C65813 * C63633) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C1757 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C1758 +
           ((C63570 * C1763 + C139301 * C1771) * C63633 +
            (C63570 * C1873 + C139301 * C2101) * C63566 + C69342 * C63634 +
            C69343 * C63567 + C69344 * C63635 + C69345 * C63568) *
               C139480 * C1759) *
              C5149 +
          ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
            C67314 * C63567 + (C63570 * C23998 + C139301 * C24000) * C63635 +
            (C63570 * C24114 + C139301 * C24328) * C63568) *
               C139480 * C1758 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C1757 -
           ((C63570 * C69170 + C139301 * C69332) * C63568 +
            (C63570 * C69080 + C139301 * C69081) * C63635 + C69345 * C63567 +
            C69344 * C63634 + C69343 * C63566 + C69342 * C63633) *
               C139480 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] += (-std::pow(Pi, 2.5) *
                   ((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                     C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                     C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                        C139301 * C139480 * C139362 * C5796 -
                    (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                     C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                     C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                        C139301 * C139480 * C139362 * C5797 +
                    (C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                     C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                     C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                        C139301 * C139480 * C139362 * C5798 -
                    (C63788 * C68553 + C68785 + C68785 + C63568 * C68783 +
                     C63787 * C20278 + C68786 + C68786 + C63567 * C20592 +
                     C63786 * C5803 + C68787 + C68787 + C63566 * C6030) *
                        C139301 * C139480 * C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139362 * C5149 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139362 * C139398) *
                        C5151 +
                    ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                      C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                      C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                         C139301 * C139480 * C139362 * C139398 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139362 * C5149) *
                        C5152 +
                    ((C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                      C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                      C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                         C139301 * C139480 * C139362 * C5149 -
                     (C63788 * C5801 + C65891 + C65891 + C63568 * C6028 +
                      C63787 * C832 + C65892 + C65892 + C63567 * C1252 +
                      C63786 * C827 + C65893 + C65893 + C63566 * C1247) *
                         C139301 * C139480 * C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C1757 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C1758 +
                     (C63786 * C1763 + C65187 + C65187 + C63566 * C2183 +
                      C63787 * C6325 + C65188 + C65188 + C63567 * C6648 +
                      C63788 * C20984 + C65189 + C65189 + C63568 * C21426) *
                         C139301 * C139480 * C1759) *
                        C5149 +
                    ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                      C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                      C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                         C139301 * C139480 * C1758 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C1757 -
                     (C63788 * C69080 + C69421 + C69421 + C63568 * C69419 +
                      C63787 * C20984 + C69422 + C69422 + C63567 * C21426 +
                      C63786 * C6325 + C69423 + C69423 + C63566 * C6648) *
                         C139301 * C139480 * C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C273 * C106 + C139480 * C274) * C63633 +
           (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
           C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
              C139301 * C139362 * C5796 -
          (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
           C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
              C139301 * C139362 * C5797 +
          (C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
           C20668 * C63567 + C68673 * C63635 + C68841 * C63568) *
              C139301 * C139362 * C5798 -
          ((C273 * C68613 + C139480 * C68837) * C63568 +
           (C273 * C68553 + C139480 * C68665) * C63635 + C68841 * C63567 +
           C68673 * C63634 + C20668 * C63566 + C20442 * C63633) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139362 * C5149 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139362 * C139398) *
              C5151 +
          ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
            C14412 * C63635 + C14807 * C63568) *
               C139301 * C139362 * C139398 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139362 * C5149) *
              C5152 +
          ((C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
            C1090 * C63635 + C1381 * C63568) *
               C139301 * C139362 * C5149 -
           ((C273 * C5863 + C139480 * C6084) * C63568 +
            (C273 * C5801 + C139480 * C5919) * C63635 + C1381 * C63567 +
            C1090 * C63634 + C1378 * C63566 + C1085 * C63633) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C1757 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C1758 +
           ((C273 * C1763 + C139480 * C1987) * C63633 +
            (C273 * C1873 + C139480 * C2293) * C63566 + C21212 * C63634 +
            C21534 * C63567 + C69255 * C63635 + C69501 * C63568) *
               C139301 * C1759) *
              C5149 +
          ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
            C24548 * C63567 + (C273 * C23998 + C139480 * C24216) * C63635 +
            (C273 * C24114 + C139480 * C24544) * C63568) *
               C139301 * C1758 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C1757 -
           ((C273 * C69170 + C139480 * C69497) * C63568 +
            (C273 * C69080 + C139480 * C69246) * C63635 + C69501 * C63567 +
            C69255 * C63634 + C21534 * C63566 + C21212 * C63633) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] += (-std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C273 +
                      (C63570 * C274 + C139301 * C577) * C139480) *
                         C63566 +
                     (C64622 + C64646) * C63567 + C64652 * C63568) *
                        C139362 * C5796 -
                    (C68893 * C63568 + (C64647 + C64625) * C63567 +
                     (C64646 + C64622) * C63566) *
                        C139362 * C5797 +
                    (C64652 * C63566 + (C64630 + C64648) * C63567 +
                     (C68894 + C68898) * C63568) *
                        C139362 * C5798 -
                    (((C63570 * C68665 + C139301 * C68891) * C139480 +
                      (C63570 * C68553 + C139301 * C68554) * C273) *
                         C63568 +
                     (C68898 + C68894) * C63567 + C68893 * C63566) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139362 * C5149 -
                     ((C64648 + C64630) * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139362 * C139398) *
                        C5151 +
                    (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
                      (C64637 + C64651) * C63568) *
                         C139362 * C139398 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139362 * C5149) *
                        C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C273 +
                       (C63570 * C276 + C139301 * C579) * C139480) *
                          C63566 +
                      (C66042 + C66050) * C63567 + (C66045 + C66051) * C63568) *
                         C139362 * C5149 -
                     (((C63570 * C5919 + C139301 * C6137) * C139480 +
                       (C63570 * C5801 + C139301 * C5804) * C273) *
                          C63568 +
                      (C66051 + C66045) * C63567 + (C66050 + C66042) * C63566) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C1757 -
                     ((C67638 + C67624) * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C1758 +
                     (((C63570 * C1763 + C139301 * C1771) * C273 +
                       (C63570 * C1987 + C139301 * C2395) * C139480) *
                          C63566 +
                      (C69577 + C69585) * C63567 + (C69580 + C69586) * C63568) *
                         C1759) *
                        C5149 +
                    (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
                      ((C63570 * C23998 + C139301 * C24000) * C273 +
                       (C63570 * C24216 + C139301 * C24647) * C139480) *
                          C63568) *
                         C1758 -
                     (C68893 * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C1757 -
                     (((C63570 * C69246 + C139301 * C69575) * C139480 +
                       (C63570 * C69080 + C139301 * C69081) * C273) *
                          C63568 +
                      (C69586 + C69580) * C63567 + (C69585 + C69577) * C63566) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[67] += (-std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C273 +
                     (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                      C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                         C139480) *
                        C139301 * C139362 * C5796 -
                    ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                      C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                         C139480 +
                     (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                      C63567 * C940 + C63633 * C829 + C63566 * C939) *
                         C273) *
                        C139301 * C139362 * C5797 +
                    ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                      C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                         C273 +
                     (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                      C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                         C139480) *
                        C139301 * C139362 * C5798 -
                    ((C63635 * C68665 + C63568 * C68948 + C63634 * C20432 +
                      C63567 * C20809 + C63633 * C5921 + C63566 * C6192) *
                         C139480 +
                     (C63635 * C68553 + C63568 * C68613 + C63634 * C20278 +
                      C63567 * C20362 + C63633 * C5803 + C63566 * C5865) *
                         C273) *
                        C139301 * C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139362 * C5149 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139362 * C139398) *
                        C5151 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C273 +
                      (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                       C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                          C139480) *
                         C139301 * C139362 * C139398 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139362 * C5149) *
                        C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C273 +
                      (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                       C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                          C139480) *
                         C139301 * C139362 * C5149 -
                     ((C63635 * C5919 + C63568 * C6190 + C63634 * C1056 +
                       C63567 * C1546 + C63633 * C1051 + C63566 * C1541) *
                          C139480 +
                      (C63635 * C5801 + C63568 * C5863 + C63634 * C832 +
                       C63567 * C942 + C63633 * C827 + C63566 * C937) *
                          C273) *
                         C139301 * C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C1757 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C1758 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C273 +
                      (C63633 * C1987 + C63566 * C2477 + C63634 * C6491 +
                       C63567 * C6882 + C63635 * C21202 + C63568 * C21739) *
                          C139480) *
                         C139301 * C1759) *
                        C5149 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C273 +
                      (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                       C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                          C139480) *
                         C139301 * C1758 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C1757 -
                     ((C63635 * C69246 + C63568 * C69660 + C63634 * C21202 +
                       C63567 * C21739 + C63633 * C6491 + C63566 * C6882) *
                          C139480 +
                      (C63635 * C69080 + C63568 * C69170 + C63634 * C20984 +
                       C63567 * C21100 + C63633 * C6325 + C63566 * C6411) *
                          C273) *
                         C139301 * C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
           C15154 * C63567 + C15155 * C63568) *
              C139301 * C139362 * C5796 -
          (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
              C139362 * C5797 +
          (C15155 * C63566 + C20885 * C63567 + C69006 * C63568) * C139301 *
              C139362 * C5798 -
          ((C711 * C68553 + C69003 + C69003 + C139480 * C68999) * C63568 +
           C69006 * C63567 + C20885 * C63566) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139362 * C5149 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139362 * C139398) *
              C5151 +
          ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
               C139362 * C139398 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139362 * C5149) *
              C5152 +
          ((C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 *
               C139362 * C5149 -
           ((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C63568 +
            C1679 * C63567 + C1676 * C63566) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C1757 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C1758 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C63566 +
            C21847 * C63567 + C69742 * C63568) *
               C139301 * C1759) *
              C5149 +
          ((C19327 * C63566 + C24861 * C63567 +
            (C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C63568) *
               C139301 * C1758 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C1757 -
           ((C711 * C69080 + C69739 + C69739 + C139480 * C69735) * C63568 +
            C69742 * C63567 + C21847 * C63566) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                 C63566 +
             C64110 * C63567 + C64111 * C63568) *
                C139530 -
            (C66992 * C63568 + C66993 * C63567 +
             (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                 C63566) *
                C139426) *
               C5149 +
           ((C66993 * C63566 + C66992 * C63567 +
             (C63569 * C23998 + C66974 + C66974 + C139301 * C24002) * C139480 *
                 C63568) *
                C139426 -
            (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C139530) *
               C139398) *
              C139521 +
          ((((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139480 *
                 C63566 +
             C66994 * C63567 + C66995 * C63568) *
                C139426 -
            (C64114 * C63568 + C64113 * C63567 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C139480 *
                 C63566) *
                C139530) *
               C5149 +
           ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) * C139530 -
            ((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139480 *
                 C63568 +
             C66995 * C63567 + C66994 * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                        C63567 * C939 + C63635 * C830 + C63568 * C940) *
                           C63570 +
                       (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                        C63567 * C947 + C63635 * C838 + C63568 * C948) *
                           C139301) *
                          C139480 * C139530 -
                      ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                        C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                           C139301 +
                       (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                        C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                           C63570) *
                          C139480 * C139426) *
                         C5149 +
                     (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                        C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                           C63570 +
                       (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                        C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                           C139301) *
                          C139480 * C139426 -
                      ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                        C63567 * C948 + C63633 * C837 + C63566 * C947) *
                           C139301 +
                       (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                        C63567 * C940 + C63633 * C829 + C63566 * C939) *
                           C63570) *
                          C139480 * C139530) *
                         C139398) *
                        C139521 +
                    ((((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                        C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                           C63570 +
                       (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                        C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                           C139301) *
                          C139480 * C139426 -
                      ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                        C63567 * C946 + C63633 * C113 + C63566 * C194) *
                           C139301 +
                       (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                        C63567 * C938 + C63633 * C107 + C63566 * C188) *
                           C63570) *
                          C139480 * C139530) *
                         C5149 +
                     (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                        C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                           C63570 +
                       (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                        C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                           C139301) *
                          C139480 * C139530 -
                      ((C63635 * C23999 + C63568 * C24115 + C63634 * C8594 +
                        C63567 * C8680 + C63633 * C4164 + C63566 * C4280) *
                           C139301 +
                       (C63635 * C23997 + C63568 * C24113 + C63634 * C8591 +
                        C63567 * C8677 + C63633 * C4160 + C63566 * C4276) *
                           C63570) *
                          C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C63570 +
              (C273 * C112 + C139480 * C280) * C139301) *
                 C63566 +
             (C64264 + C64265) * C63567 + C64276 * C63568) *
                C139530 -
            ((C67192 + C67193) * C63568 + (C67194 + C67195) * C63567 +
             ((C273 * C1770 + C139480 * C1994) * C139301 +
              (C273 * C1762 + C139480 * C1986) * C63570) *
                 C63566) *
                C139426) *
               C5149 +
           (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
             ((C273 * C23998 + C139480 * C24216) * C63570 +
              (C273 * C24000 + C139480 * C24218) * C139301) *
                 C63568) *
                C139426 -
            (C68668 * C63568 + (C64267 + C64266) * C63567 +
             (C64265 + C64264) * C63566) *
                C139530) *
               C139398) *
              C139521 +
          ((((C2020 * C63570 + C2019 * C139301) * C63566 +
             (C67196 + C67197) * C63567 + (C67198 + C67199) * C63568) *
                C139426 -
            (C64277 * C63568 + (C64271 + C64270) * C63567 +
             (C304 * C139301 + C303 * C63570) * C63566) *
                C139530) *
               C5149 +
           (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
             (C64274 + C64275) * C63568) *
                C139530 -
            (((C273 * C23999 + C139480 * C24217) * C139301 +
              (C273 * C23997 + C139480 * C24215) * C63570) *
                 C63568 +
             (C67199 + C67198) * C63567 + (C67197 + C67196) * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C63633 +
             (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
             C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
                C139480 * C139530 -
            (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
             C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
             (C63570 * C1762 + C139301 * C1770) * C63633) *
                C139480 * C139426) *
               C5149 +
           ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
             C67314 * C63567 + (C63570 * C23998 + C139301 * C24000) * C63635 +
             (C63570 * C24114 + C139301 * C24328) * C63568) *
                C139480 * C139426 -
            (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
             C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
                C139480 * C139530) *
               C139398) *
              C139521 +
          ((((C63570 * C1761 + C139301 * C1769) * C63633 +
             (C63570 * C1871 + C139301 * C2099) * C63566 + C67318 * C63634 +
             C67319 * C63567 + C67320 * C63635 + C67321 * C63568) *
                C139480 * C139426 -
            (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
             C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
             (C63570 * C107 + C139301 * C113) * C63633) *
                C139480 * C139530) *
               C5149 +
           ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
             C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
                C139480 * C139530 -
            ((C63570 * C24113 + C139301 * C24327) * C63568 +
             (C63570 * C23997 + C139301 * C23999) * C63635 + C67321 * C63567 +
             C67320 * C63634 + C67319 * C63566 + C67318 * C63633) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                       C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                       C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                          C139301 * C139480 * C139530 -
                      (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                       C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                       C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                          C139301 * C139480 * C139426) *
                         C5149 +
                     ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                       C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                       C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                          C139301 * C139480 * C139426 -
                      (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                       C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                       C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                          C139301 * C139480 * C139530) *
                         C139398) *
                        C139521 +
                    (((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                       C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                       C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                          C139301 * C139480 * C139426 -
                      (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                       C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                       C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                          C139301 * C139480 * C139530) *
                         C5149 +
                     ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                       C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                       C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                          C139301 * C139480 * C139530 -
                      (C63788 * C23997 + C67423 + C67423 + C63568 * C24439 +
                       C63787 * C8591 + C67424 + C67424 + C63567 * C8914 +
                       C63786 * C4160 + C67425 + C67425 + C63566 * C4614) *
                          C139301 * C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C63633 +
             (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
             C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
                C139301 * C139530 -
            (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
             C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
             (C273 * C1762 + C139480 * C1986) * C63633) *
                C139301 * C139426) *
               C5149 +
           ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
             C24548 * C63567 + (C273 * C23998 + C139480 * C24216) * C63635 +
             (C273 * C24114 + C139480 * C24544) * C63568) *
                C139301 * C139426 -
            (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
             C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          (((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
             C18466 * C63635 + C18908 * C63568) *
                C139301 * C139426 -
            (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
             C518 * C63566 + C303 * C63633) *
                C139301 * C139530) *
               C5149 +
           ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
             C14412 * C63635 + C14807 * C63568) *
                C139301 * C139530 -
            ((C273 * C24113 + C139480 * C24543) * C63568 +
             (C273 * C23997 + C139480 * C24215) * C63635 + C18908 * C63567 +
             C18466 * C63634 + C4740 * C63566 + C4410 * C63633) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63570 * C106 + C139301 * C112) * C273 +
              (C63570 * C274 + C139301 * C577) * C139480) *
                 C63566 +
             (C64622 + C64646) * C63567 + C64652 * C63568) *
                C139530 -
            ((C67638 + C67624) * C63568 + (C67639 + C67627) * C63567 +
             ((C63570 * C1986 + C139301 * C2394) * C139480 +
              (C63570 * C1762 + C139301 * C1770) * C273) *
                 C63566) *
                C139426) *
               C5149 +
           (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
             ((C63570 * C23998 + C139301 * C24000) * C273 +
              (C63570 * C24216 + C139301 * C24647) * C139480) *
                 C63568) *
                C139426 -
            (C68893 * C63568 + (C64647 + C64625) * C63567 +
             (C64646 + C64622) * C63566) *
                C139530) *
               C139398) *
              C139521 +
          (((((C63570 * C1761 + C139301 * C1769) * C273 +
              (C63570 * C1985 + C139301 * C2393) * C139480) *
                 C63566 +
             (C67628 + C67640) * C63567 + (C67631 + C67641) * C63568) *
                C139426 -
            (C64653 * C63568 + (C64649 + C64631) * C63567 +
             ((C63570 * C275 + C139301 * C578) * C139480 +
              (C63570 * C107 + C139301 * C113) * C273) *
                 C63566) *
                C139530) *
               C5149 +
           (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
             (C64637 + C64651) * C63568) *
                C139530 -
            (((C63570 * C24215 + C139301 * C24646) * C139480 +
              (C63570 * C23997 + C139301 * C23999) * C273) *
                 C63568 +
             (C67641 + C67631) * C63567 + (C67640 + C67628) * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[68] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                        C63567 * C939 + C63635 * C830 + C63568 * C940) *
                           C273 +
                       (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                        C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                           C139480) *
                          C139301 * C139530 -
                      ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                        C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                           C139480 +
                       (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                        C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                           C273) *
                          C139301 * C139426) *
                         C5149 +
                     (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                        C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                           C273 +
                       (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                        C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                           C139480) *
                          C139301 * C139426 -
                      ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                        C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                           C139480 +
                       (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                        C63567 * C940 + C63633 * C829 + C63566 * C939) *
                           C273) *
                          C139301 * C139530) *
                         C139398) *
                        C139521 +
                    ((((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                        C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                           C273 +
                       (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                        C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                           C139480) *
                          C139301 * C139426 -
                      ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                        C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                           C139480 +
                       (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                        C63567 * C938 + C63633 * C107 + C63566 * C188) *
                           C273) *
                          C139301 * C139530) *
                         C5149 +
                     (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                        C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                           C273 +
                       (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                        C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                           C139480) *
                          C139301 * C139530 -
                      ((C63635 * C24215 + C63568 * C24752 + C63634 * C8757 +
                        C63567 * C9148 + C63633 * C4394 + C63566 * C4944) *
                           C139480 +
                       (C63635 * C23997 + C63568 * C24113 + C63634 * C8591 +
                        C63567 * C8677 + C63633 * C4160 + C63566 * C4276) *
                           C273) *
                          C139301 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
             C15154 * C63567 + C15155 * C63568) *
                C139301 * C139530 -
            (C24861 * C63568 + C19327 * C63567 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
                C139301 * C139426) *
               C5149 +
           ((C19327 * C63566 + C24861 * C63567 +
             (C711 * C23998 + C24858 + C24858 + C139480 * C24853) * C63568) *
                C139301 * C139426 -
            (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
                C139530) *
               C139398) *
              C139521 +
          (((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
                C139426 -
            (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
                C139530) *
               C5149 +
           ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
                C139530 -
            ((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C63568 +
             C19328 * C63567 + C5072 * C63566) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139362 * C5149 -
                     (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) *
                         C139362 * C139398) *
                        C5151 +
                    ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) *
                         C139362 * C139398 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139362 * C5149) *
                        C5152 +
                    (((C63569 * C108 + C63578 + C63578 + C139301 * C120) *
                          C139480 * C63566 +
                      C65577 * C63567 + C65578 * C63568) *
                         C139362 * C5149 -
                     ((C63569 * C5801 + C65570 + C65570 + C139301 * C5807) *
                          C139480 * C63568 +
                      C65578 * C63567 + C65577 * C63566) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                         C139480 * C63566 +
                     C64110 * C63567 + C64111 * C63568) *
                        C139362 * C5796 -
                    (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) *
                        C139362 * C5797 +
                    (C64111 * C63566 + C64112 * C63567 + C68563 * C63568) *
                        C139362 * C5798 -
                    ((C63569 * C68553 + C68559 + C68559 + C139301 * C68555) *
                         C139480 * C63568 +
                     C68563 * C63567 + C64112 * C63566) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexy[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139362 * C5149 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139362 * C139398) *
                        C5151 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C63570 +
                      (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                       C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                          C139301) *
                         C139480 * C139362 * C139398 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139362 * C5149) *
                        C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C63570 +
                      (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                       C63567 * C945 + C63635 * C840 + C63568 * C950) *
                          C139301) *
                         C139480 * C139362 * C5149 -
                     ((C63635 * C5804 + C63568 * C5866 + C63634 * C840 +
                       C63567 * C950 + C63633 * C835 + C63566 * C945) *
                          C139301 +
                      (C63635 * C5801 + C63568 * C5863 + C63634 * C832 +
                       C63567 * C942 + C63633 * C827 + C63566 * C937) *
                          C63570) *
                         C139480 * C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C63570 +
                     (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                      C63567 * C947 + C63635 * C838 + C63568 * C948) *
                         C139301) *
                        C139480 * C139362 * C5796 -
                    ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                      C63567 * C948 + C63633 * C837 + C63566 * C947) *
                         C139301 +
                     (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                      C63567 * C940 + C63633 * C829 + C63566 * C939) *
                         C63570) *
                        C139480 * C139362 * C5797 +
                    ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                      C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                         C63570 +
                     (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                      C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                         C139301) *
                        C139480 * C139362 * C5798 -
                    ((C63635 * C68554 + C63568 * C68614 + C63634 * C20280 +
                      C63567 * C20364 + C63633 * C5806 + C63566 * C5868) *
                         C139301 +
                     (C63635 * C68553 + C63568 * C68613 + C63634 * C20278 +
                      C63567 * C20362 + C63633 * C5803 + C63566 * C5865) *
                         C63570) *
                        C139480 * C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexz[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139362 * C5149 -
                     ((C64268 + C64269) * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139362 * C139398) *
                        C5151 +
                    (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
                      (C64274 + C64275) * C63568) *
                         C139362 * C139398 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139362 * C5149) *
                        C5152 +
                    (((C305 * C63570 + C306 * C139301) * C63566 +
                      (C65727 + C65728) * C63567 + (C65729 + C65730) * C63568) *
                         C139362 * C5149 -
                     (((C273 * C5804 + C139480 * C5922) * C139301 +
                       (C273 * C5801 + C139480 * C5919) * C63570) *
                          C63568 +
                      (C65730 + C65729) * C63567 + (C65728 + C65727) * C63566) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C63570 +
                      (C273 * C112 + C139480 * C280) * C139301) *
                         C63566 +
                     (C64264 + C64265) * C63567 + C64276 * C63568) *
                        C139362 * C5796 -
                    (C68668 * C63568 + (C64267 + C64266) * C63567 +
                     (C64265 + C64264) * C63566) *
                        C139362 * C5797 +
                    (C64276 * C63566 + (C64269 + C64268) * C63567 +
                     (C68675 + C68676) * C63568) *
                        C139362 * C5798 -
                    (((C273 * C68554 + C139480 * C68666) * C139301 +
                      (C273 * C68553 + C139480 * C68665) * C63570) *
                         C63568 +
                     (C68676 + C68675) * C63567 + C68668 * C63566) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139362 * C5149 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139362 * C139398) *
              C5151 +
          ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
            C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
               C139480 * C139362 * C139398 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139362 * C5149) *
              C5152 +
          (((C63570 * C108 + C139301 * C114) * C63633 +
            (C63570 * C189 + C139301 * C362) * C63566 + C65813 * C63634 +
            C65814 * C63567 + C65815 * C63635 + C65816 * C63568) *
               C139480 * C139362 * C5149 -
           ((C63570 * C5863 + C139301 * C5975) * C63568 +
            (C63570 * C5801 + C139301 * C5804) * C63635 + C65816 * C63567 +
            C65815 * C63634 + C65814 * C63566 + C65813 * C63633) *
               C139480 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C63633 +
           (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
           C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
              C139480 * C139362 * C5796 -
          (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
           C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
              C139480 * C139362 * C5797 +
          (C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
           C64380 * C63567 + C68732 * C63635 + C68733 * C63568) *
              C139480 * C139362 * C5798 -
          ((C63570 * C68613 + C139301 * C68726) * C63568 +
           (C63570 * C68553 + C139301 * C68554) * C63635 + C68733 * C63567 +
           C68732 * C63634 + C64380 * C63566 + C64381 * C63633) *
              C139480 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139362 * C5149 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139362 * C139398) *
                        C5151 +
                    ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                      C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                      C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                         C139301 * C139480 * C139362 * C139398 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139362 * C5149) *
                        C5152 +
                    ((C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                      C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                      C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                         C139301 * C139480 * C139362 * C5149 -
                     (C63788 * C5801 + C65891 + C65891 + C63568 * C6028 +
                      C63787 * C832 + C65892 + C65892 + C63567 * C1252 +
                      C63786 * C827 + C65893 + C65893 + C63566 * C1247) *
                         C139301 * C139480 * C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                     C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                     C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                        C139301 * C139480 * C139362 * C5796 -
                    (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                     C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                     C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                        C139301 * C139480 * C139362 * C5797 +
                    (C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                     C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                     C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                        C139301 * C139480 * C139362 * C5798 -
                    (C63788 * C68553 + C68785 + C68785 + C63568 * C68783 +
                     C63787 * C20278 + C68786 + C68786 + C63567 * C20592 +
                     C63786 * C5803 + C68787 + C68787 + C63566 * C6030) *
                        C139301 * C139480 * C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139362 * C5149 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139362 * C139398) *
              C5151 +
          ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
            C14412 * C63635 + C14807 * C63568) *
               C139301 * C139362 * C139398 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139362 * C5149) *
              C5152 +
          ((C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
            C1090 * C63635 + C1381 * C63568) *
               C139301 * C139362 * C5149 -
           ((C273 * C5863 + C139480 * C6084) * C63568 +
            (C273 * C5801 + C139480 * C5919) * C63635 + C1381 * C63567 +
            C1090 * C63634 + C1378 * C63566 + C1085 * C63633) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C273 * C106 + C139480 * C274) * C63633 +
           (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
           C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
              C139301 * C139362 * C5796 -
          (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
           C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
              C139301 * C139362 * C5797 +
          (C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
           C20668 * C63567 + C68673 * C63635 + C68841 * C63568) *
              C139301 * C139362 * C5798 -
          ((C273 * C68613 + C139480 * C68837) * C63568 +
           (C273 * C68553 + C139480 * C68665) * C63635 + C68841 * C63567 +
           C68673 * C63634 + C20668 * C63566 + C20442 * C63633) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139362 * C5149 -
                     ((C64648 + C64630) * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139362 * C139398) *
                        C5151 +
                    (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
                      (C64637 + C64651) * C63568) *
                         C139362 * C139398 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139362 * C5149) *
                        C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C273 +
                       (C63570 * C276 + C139301 * C579) * C139480) *
                          C63566 +
                      (C66042 + C66050) * C63567 + (C66045 + C66051) * C63568) *
                         C139362 * C5149 -
                     (((C63570 * C5919 + C139301 * C6137) * C139480 +
                       (C63570 * C5801 + C139301 * C5804) * C273) *
                          C63568 +
                      (C66051 + C66045) * C63567 + (C66050 + C66042) * C63566) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C273 +
                      (C63570 * C274 + C139301 * C577) * C139480) *
                         C63566 +
                     (C64622 + C64646) * C63567 + C64652 * C63568) *
                        C139362 * C5796 -
                    (C68893 * C63568 + (C64647 + C64625) * C63567 +
                     (C64646 + C64622) * C63566) *
                        C139362 * C5797 +
                    (C64652 * C63566 + (C64630 + C64648) * C63567 +
                     (C68894 + C68898) * C63568) *
                        C139362 * C5798 -
                    (((C63570 * C68665 + C139301 * C68891) * C139480 +
                      (C63570 * C68553 + C139301 * C68554) * C273) *
                         C63568 +
                     (C68898 + C68894) * C63567 + C68893 * C63566) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[69] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139362 * C5149 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139362 * C139398) *
                        C5151 +
                    (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                       C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                          C273 +
                      (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                       C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                          C139480) *
                         C139301 * C139362 * C139398 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139362 * C5149) *
                        C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C273 +
                      (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                       C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                          C139480) *
                         C139301 * C139362 * C5149 -
                     ((C63635 * C5919 + C63568 * C6190 + C63634 * C1056 +
                       C63567 * C1546 + C63633 * C1051 + C63566 * C1541) *
                          C139480 +
                      (C63635 * C5801 + C63568 * C5863 + C63634 * C832 +
                       C63567 * C942 + C63633 * C827 + C63566 * C937) *
                          C273) *
                         C139301 * C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C273 +
                     (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                      C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                         C139480) *
                        C139301 * C139362 * C5796 -
                    ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                      C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                         C139480 +
                     (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                      C63567 * C940 + C63633 * C829 + C63566 * C939) *
                         C273) *
                        C139301 * C139362 * C5797 +
                    ((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                      C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                         C273 +
                     (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                      C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                         C139480) *
                        C139301 * C139362 * C5798 -
                    ((C63635 * C68665 + C63568 * C68948 + C63634 * C20432 +
                      C63567 * C20809 + C63633 * C5921 + C63566 * C6192) *
                         C139480 +
                     (C63635 * C68553 + C63568 * C68613 + C63634 * C20278 +
                      C63567 * C20362 + C63633 * C5803 + C63566 * C5865) *
                         C273) *
                        C139301 * C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139362 * C5149 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139362 * C139398) *
              C5151 +
          ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
               C139362 * C139398 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139362 * C5149) *
              C5152 +
          ((C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 *
               C139362 * C5149 -
           ((C711 * C5801 + C6247 + C6247 + C139480 * C6243) * C63568 +
            C1679 * C63567 + C1676 * C63566) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
           C15154 * C63567 + C15155 * C63568) *
              C139301 * C139362 * C5796 -
          (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
              C139362 * C5797 +
          (C15155 * C63566 + C20885 * C63567 + C69006 * C63568) * C139301 *
              C139362 * C5798 -
          ((C711 * C68553 + C69003 + C69003 + C139480 * C68999) * C63568 +
           C69006 * C63567 + C20885 * C63566) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                 C63566 +
             C64110 * C63567 + C64111 * C63568) *
                C9304 -
            (C66992 * C63568 + C66993 * C63567 +
             (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                 C63566) *
                C139426) *
               C139529 +
           ((C66993 * C63566 + C66992 * C63567 + C71374 * C63568) * C139426 -
            (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C9304) *
               C139398) *
              C139521 +
          ((((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139480 *
                 C63566 +
             C66994 * C63567 + C66995 * C63568) *
                C139426 -
            (C64114 * C63568 + C64113 * C63567 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C139480 *
                 C63566) *
                C9304) *
               C139529 +
           ((C64113 * C63566 + C64114 * C63567 + C64115 * C63568) * C9304 -
            ((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139480 *
                 C63568 +
             C66995 * C63567 + C66994 * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                        C63567 * C939 + C63635 * C830 + C63568 * C940) *
                           C63570 +
                       (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                        C63567 * C947 + C63635 * C838 + C63568 * C948) *
                           C139301) *
                          C139480 * C9304 -
                      ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                        C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                           C139301 +
                       (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                        C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                           C63570) *
                          C139480 * C139426) *
                         C139529 +
                     (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                        C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                           C63570 +
                       (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                        C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                           C139301) *
                          C139480 * C139426 -
                      ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                        C63567 * C948 + C63633 * C837 + C63566 * C947) *
                           C139301 +
                       (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                        C63567 * C940 + C63633 * C829 + C63566 * C939) *
                           C63570) *
                          C139480 * C9304) *
                         C139398) *
                        C139521 +
                    ((((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                        C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                           C63570 +
                       (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                        C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                           C139301) *
                          C139480 * C139426 -
                      ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                        C63567 * C946 + C63633 * C113 + C63566 * C194) *
                           C139301 +
                       (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                        C63567 * C938 + C63633 * C107 + C63566 * C188) *
                           C63570) *
                          C139480 * C9304) *
                         C139529 +
                     (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                        C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                           C63570 +
                       (C63633 * C836 + C63566 * C946 + C63634 * C839 +
                        C63567 * C949 + C63635 * C5805 + C63568 * C5867) *
                           C139301) *
                          C139480 * C9304 -
                      ((C63635 * C23999 + C63568 * C24115 + C63634 * C8594 +
                        C63567 * C8680 + C63633 * C4164 + C63566 * C4280) *
                           C139301 +
                       (C63635 * C23997 + C63568 * C24113 + C63634 * C8591 +
                        C63567 * C8677 + C63633 * C4160 + C63566 * C4276) *
                           C63570) *
                          C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C273 * C106 + C139480 * C274) * C63570 +
              (C273 * C112 + C139480 * C280) * C139301) *
                 C63566 +
             (C64264 + C64265) * C63567 + C64276 * C63568) *
                C9304 -
            (C71527 * C63568 + (C67194 + C67195) * C63567 +
             ((C273 * C1770 + C139480 * C1994) * C139301 +
              (C273 * C1762 + C139480 * C1986) * C63570) *
                 C63566) *
                C139426) *
               C139529 +
           (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
             (C71534 + C71535) * C63568) *
                C139426 -
            (C68668 * C63568 + (C64267 + C64266) * C63567 +
             (C64265 + C64264) * C63566) *
                C9304) *
               C139398) *
              C139521 +
          ((((C2020 * C63570 + C2019 * C139301) * C63566 +
             (C67196 + C67197) * C63567 + (C67198 + C67199) * C63568) *
                C139426 -
            (C64277 * C63568 + (C64271 + C64270) * C63567 +
             (C304 * C139301 + C303 * C63570) * C63566) *
                C9304) *
               C139529 +
           (((C64270 + C64271) * C63566 + (C64272 + C64273) * C63567 +
             (C64274 + C64275) * C63568) *
                C9304 -
            (((C273 * C23999 + C139480 * C24217) * C139301 +
              (C273 * C23997 + C139480 * C24215) * C63570) *
                 C63568 +
             (C67199 + C67198) * C63567 + (C67197 + C67196) * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C63633 +
             (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
             C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
                C139480 * C9304 -
            (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
             C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
             (C63570 * C1762 + C139301 * C1770) * C63633) *
                C139480 * C139426) *
               C139529 +
           ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
             C67314 * C63567 + C71615 * C63635 + C71616 * C63568) *
                C139480 * C139426 -
            (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
             C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
                C139480 * C9304) *
               C139398) *
              C139521 +
          ((((C63570 * C1761 + C139301 * C1769) * C63633 +
             (C63570 * C1871 + C139301 * C2099) * C63566 + C67318 * C63634 +
             C67319 * C63567 + C67320 * C63635 + C67321 * C63568) *
                C139480 * C139426 -
            (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
             C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
             (C63570 * C107 + C139301 * C113) * C63633) *
                C139480 * C9304) *
               C139529 +
           ((C64382 * C63633 + C64383 * C63566 + C64384 * C63634 +
             C64385 * C63567 + C64386 * C63635 + C64387 * C63568) *
                C139480 * C9304 -
            ((C63570 * C24113 + C139301 * C24327) * C63568 +
             (C63570 * C23997 + C139301 * C23999) * C63635 + C67321 * C63567 +
             C67320 * C63634 + C67319 * C63566 + C67318 * C63633) *
                C139480 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                       C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                       C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                          C139301 * C139480 * C9304 -
                      (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                       C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                       C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                          C139301 * C139480 * C139426) *
                         C139529 +
                     ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                       C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                       C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                          C139301 * C139480 * C139426 -
                      (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                       C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                       C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                          C139301 * C139480 * C9304) *
                         C139398) *
                        C139521 +
                    (((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                       C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                       C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                          C139301 * C139480 * C139426 -
                      (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                       C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                       C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                          C139301 * C139480 * C9304) *
                         C139529 +
                     ((C63786 * C828 + C64468 + C64468 + C63566 * C1248 +
                       C63787 * C831 + C64469 + C64469 + C63567 * C1251 +
                       C63788 * C5802 + C64470 + C64470 + C63568 * C6029) *
                          C139301 * C139480 * C9304 -
                      (C63788 * C23997 + C67423 + C67423 + C63568 * C24439 +
                       C63787 * C8591 + C67424 + C67424 + C63567 * C8914 +
                       C63786 * C4160 + C67425 + C67425 + C63566 * C4614) *
                          C139301 * C139480 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C273 * C106 + C139480 * C274) * C63633 +
             (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
             C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
                C139301 * C9304 -
            (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
             C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
             (C273 * C1762 + C139480 * C1986) * C63633) *
                C139301 * C139426) *
               C139529 +
           ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
             C24548 * C63567 + C71532 * C63635 + C71772 * C63568) *
                C139301 * C139426 -
            (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
             C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          (((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
             C18466 * C63635 + C18908 * C63568) *
                C139301 * C139426 -
            (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
             C518 * C63566 + C303 * C63633) *
                C139301 * C9304) *
               C139529 +
           ((C1087 * C63633 + C1379 * C63566 + C1088 * C63634 + C1380 * C63567 +
             C14412 * C63635 + C14807 * C63568) *
                C139301 * C9304 -
            ((C273 * C24113 + C139480 * C24543) * C63568 +
             (C273 * C23997 + C139480 * C24215) * C63635 + C18908 * C63567 +
             C18466 * C63634 + C4740 * C63566 + C4410 * C63633) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63570 * C106 + C139301 * C112) * C273 +
              (C63570 * C274 + C139301 * C577) * C139480) *
                 C63566 +
             (C64622 + C64646) * C63567 + C64652 * C63568) *
                C9304 -
            (C71848 * C63568 + (C67639 + C67627) * C63567 +
             ((C63570 * C1986 + C139301 * C2394) * C139480 +
              (C63570 * C1762 + C139301 * C1770) * C273) *
                 C63566) *
                C139426) *
               C139529 +
           (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
             (C71849 + C71853) * C63568) *
                C139426 -
            (C68893 * C63568 + (C64647 + C64625) * C63567 +
             (C64646 + C64622) * C63566) *
                C9304) *
               C139398) *
              C139521 +
          (((((C63570 * C1761 + C139301 * C1769) * C273 +
              (C63570 * C1985 + C139301 * C2393) * C139480) *
                 C63566 +
             (C67628 + C67640) * C63567 + (C67631 + C67641) * C63568) *
                C139426 -
            (C64653 * C63568 + (C64649 + C64631) * C63567 +
             ((C63570 * C275 + C139301 * C578) * C139480 +
              (C63570 * C107 + C139301 * C113) * C273) *
                 C63566) *
                C9304) *
               C139529 +
           (((C64631 + C64649) * C63566 + (C64634 + C64650) * C63567 +
             (C64637 + C64651) * C63568) *
                C9304 -
            (((C63570 * C24215 + C139301 * C24646) * C139480 +
              (C63570 * C23997 + C139301 * C23999) * C273) *
                 C63568 +
             (C67641 + C67631) * C63567 + (C67640 + C67628) * C63566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[70] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                        C63567 * C939 + C63635 * C830 + C63568 * C940) *
                           C273 +
                       (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                        C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                           C139480) *
                          C139301 * C9304 -
                      ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                        C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                           C139480 +
                       (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                        C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                           C273) *
                          C139301 * C139426) *
                         C139529 +
                     (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                        C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                           C273 +
                       (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                        C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                           C139480) *
                          C139301 * C139426 -
                      ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                        C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                           C139480 +
                       (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                        C63567 * C940 + C63633 * C829 + C63566 * C939) *
                           C273) *
                          C139301 * C9304) *
                         C139398) *
                        C139521 +
                    ((((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                        C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                           C273 +
                       (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                        C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                           C139480) *
                          C139301 * C139426 -
                      ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                        C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                           C139480 +
                       (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                        C63567 * C938 + C63633 * C107 + C63566 * C188) *
                           C273) *
                          C139301 * C9304) *
                         C139529 +
                     (((C63633 * C828 + C63566 * C938 + C63634 * C831 +
                        C63567 * C941 + C63635 * C5802 + C63568 * C5864) *
                           C273 +
                       (C63633 * C1052 + C63566 * C1542 + C63634 * C1055 +
                        C63567 * C1545 + C63635 * C5920 + C63568 * C6191) *
                           C139480) *
                          C139301 * C9304 -
                      ((C63635 * C24215 + C63568 * C24752 + C63634 * C8757 +
                        C63567 * C9148 + C63633 * C4394 + C63566 * C4944) *
                           C139480 +
                       (C63635 * C23997 + C63568 * C24113 + C63634 * C8591 +
                        C63567 * C8677 + C63633 * C4160 + C63566 * C4276) *
                           C273) *
                          C139301 * C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
             C15154 * C63567 + C15155 * C63568) *
                C139301 * C9304 -
            (C24861 * C63568 + C19327 * C63567 +
             (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
                C139301 * C139426) *
               C139529 +
           ((C19327 * C63566 + C24861 * C63567 + C72009 * C63568) * C139301 *
                C139426 -
            (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
                C9304) *
               C139398) *
              C139521 +
          (((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
                C139426 -
            (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
                C9304) *
               C139529 +
           ((C1677 * C63566 + C1678 * C63567 + C15156 * C63568) * C139301 *
                C9304 -
            ((C711 * C23997 + C24857 + C24857 + C139480 * C24852) * C63568 +
             C19328 * C63567 + C5072 * C63566) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C139562 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C139563 +
           ((C63569 * C1763 + C64879 + C64879 + C139301 * C1779) * C139480 *
                C63566 +
            C69095 * C63567 + C69096 * C63568) *
               C12024) *
              C139529 +
          ((C66993 * C63566 + C66992 * C63567 + C71374 * C63568) * C139563 -
           (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C139562 -
           ((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139480 *
                C63568 +
            C69096 * C63567 + C69095 * C63566) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139562 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139563 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C63570 +
                      (C63633 * C1771 + C63566 * C1881 + C63634 * C6328 +
                       C63567 * C6414 + C63635 * C20986 + C63568 * C21102) *
                          C139301) *
                         C139480 * C12024) *
                        C139529 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C63570 +
                      (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                       C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                          C139301) *
                         C139480 * C139563 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C139562 -
                     ((C63635 * C69081 + C63568 * C69171 + C63634 * C20986 +
                       C63567 * C21102 + C63633 * C6328 + C63566 * C6414) *
                          C139301 +
                      (C63635 * C69080 + C63568 * C69170 + C63634 * C20984 +
                       C63567 * C21100 + C63633 * C6325 + C63566 * C6411) *
                          C63570) *
                         C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexz[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139562 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C63570 +
                       (C273 * C1771 + C139480 * C1995) * C139301) *
                          C63566 +
                      (C69249 + C69250) * C63567 + (C69257 + C69258) * C63568) *
                         C12024) *
                        C139529 +
                    (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
                      (C71534 + C71535) * C63568) *
                         C139563 -
                     (C68668 * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C139562 -
                     (((C273 * C69081 + C139480 * C69247) * C139301 +
                       (C273 * C69080 + C139480 * C69246) * C63570) *
                          C63568 +
                      (C69258 + C69257) * C63567 + (C69250 + C69249) * C63566) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139562 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139563 +
           ((C63570 * C1763 + C139301 * C1771) * C63633 +
            (C63570 * C1873 + C139301 * C2101) * C63566 + C69342 * C63634 +
            C69343 * C63567 + C69344 * C63635 + C69345 * C63568) *
               C139480 * C12024) *
              C139529 +
          ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
            C67314 * C63567 + C71615 * C63635 + C71616 * C63568) *
               C139480 * C139563 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C139562 -
           ((C63570 * C69170 + C139301 * C69332) * C63568 +
            (C63570 * C69080 + C139301 * C69081) * C63635 + C69345 * C63567 +
            C69344 * C63634 + C69343 * C63566 + C69342 * C63633) *
               C139480 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139562 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139563 +
                     (C63786 * C1763 + C65187 + C65187 + C63566 * C2183 +
                      C63787 * C6325 + C65188 + C65188 + C63567 * C6648 +
                      C63788 * C20984 + C65189 + C65189 + C63568 * C21426) *
                         C139301 * C139480 * C12024) *
                        C139529 +
                    ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                      C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                      C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                         C139301 * C139480 * C139563 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C139562 -
                     (C63788 * C69080 + C69421 + C69421 + C63568 * C69419 +
                      C63787 * C20984 + C69422 + C69422 + C63567 * C21426 +
                      C63786 * C6325 + C69423 + C69423 + C63566 * C6648) *
                         C139301 * C139480 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139562 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139563 +
           ((C273 * C1763 + C139480 * C1987) * C63633 +
            (C273 * C1873 + C139480 * C2293) * C63566 + C21212 * C63634 +
            C21534 * C63567 + C69255 * C63635 + C69501 * C63568) *
               C139301 * C12024) *
              C139529 +
          ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
            C24548 * C63567 + C71532 * C63635 + C71772 * C63568) *
               C139301 * C139563 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C139562 -
           ((C273 * C69170 + C139480 * C69497) * C63568 +
            (C273 * C69080 + C139480 * C69246) * C63635 + C69501 * C63567 +
            C69255 * C63634 + C21534 * C63566 + C21212 * C63633) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139562 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139563 +
                     (((C63570 * C1763 + C139301 * C1771) * C273 +
                       (C63570 * C1987 + C139301 * C2395) * C139480) *
                          C63566 +
                      (C69577 + C69585) * C63567 + (C69580 + C69586) * C63568) *
                         C12024) *
                        C139529 +
                    (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
                      (C71849 + C71853) * C63568) *
                         C139563 -
                     (C68893 * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C139562 -
                     (((C63570 * C69246 + C139301 * C69575) * C139480 +
                       (C63570 * C69080 + C139301 * C69081) * C273) *
                          C63568 +
                      (C69586 + C69580) * C63567 + (C69585 + C69577) * C63566) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezy[71] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139562 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139563 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C273 +
                      (C63633 * C1987 + C63566 * C2477 + C63634 * C6491 +
                       C63567 * C6882 + C63635 * C21202 + C63568 * C21739) *
                          C139480) *
                         C139301 * C12024) *
                        C139529 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C273 +
                      (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                       C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                          C139480) *
                         C139301 * C139563 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C139562 -
                     ((C63635 * C69246 + C63568 * C69660 + C63634 * C21202 +
                       C63567 * C21739 + C63633 * C6491 + C63566 * C6882) *
                          C139480 +
                      (C63635 * C69080 + C63568 * C69170 + C63634 * C20984 +
                       C63567 * C21100 + C63633 * C6325 + C63566 * C6411) *
                          C273) *
                         C139301 * C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139562 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139563 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C63566 +
            C21847 * C63567 + C69742 * C63568) *
               C139301 * C12024) *
              C139529 +
          ((C19327 * C63566 + C24861 * C63567 + C72009 * C63568) * C139301 *
               C139563 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C139562 -
           ((C711 * C69080 + C69739 + C69739 + C139480 * C69735) * C63568 +
            C69742 * C63567 + C21847 * C63566) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C9304 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C139426) *
              C822 +
          ((C66993 * C63566 + C66992 * C63567 + C71374 * C63568) * C139426 -
           (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C9304) *
              C823 +
          ((C64111 * C63566 + C64112 * C63567 + C68563 * C63568) * C9304 -
           ((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139480 *
                C63568 +
            C71374 * C63567 + C66992 * C63566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C9304 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C139426) *
              C139346 * C5151 +
          (((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139480 *
                C63566 +
            C66994 * C63567 + C66995 * C63568) *
               C139426 -
           (C64114 * C63568 + C64113 * C63567 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C139480 *
                C63566) *
               C9304) *
              C139346 * C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C139480 *
                C63566 +
            C65577 * C63567 + C65578 * C63568) *
               C9304 -
           ((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139480 *
                C63568 +
            (C63569 * C4161 + C66275 + C66275 + C139301 * C4169) * C139480 *
                C63567 +
            (C63569 * C1760 + C66276 + C66276 + C139301 * C1776) * C139480 *
                C63566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
               C63566 +
           C64110 * C63567 + C64111 * C63568) *
              C10614 -
          (C66992 * C63568 + C66993 * C63567 +
           (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
               C63566) *
              C10615 +
          ((C63569 * C1763 + C64879 + C64879 + C139301 * C1779) * C139480 *
               C63566 +
           C69095 * C63567 + C69096 * C63568) *
              C10616 -
          ((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C139480 *
               C63568 +
           (C63569 * C26692 + C73396 + C73396 + C139301 * C26696) * C139480 *
               C63567 +
           (C63569 * C10620 + C73397 + C73397 + C139301 * C10626) * C139480 *
               C63566) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] += (-std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139426) *
                        C822 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C63570 +
                      (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                       C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                          C139301) *
                         C139480 * C139426 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C9304) *
                        C823 +
                    (((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C63570 +
                      (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                       C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C71365 + C63568 * C71449 + C63634 * C24000 +
                       C63567 * C24116 + C63633 * C8595 + C63566 * C8681) *
                          C139301 +
                      (C63635 * C71364 + C63568 * C71448 + C63634 * C23998 +
                       C63567 * C24114 + C63633 * C8592 + C63566 * C8678) *
                          C63570) *
                         C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139426) *
                        C139346 * C5151 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C63570 +
                      (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                       C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                          C139301) *
                         C139480 * C139426 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C9304) *
                        C139346 * C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C63570 +
                      (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                       C63567 * C945 + C63635 * C840 + C63568 * C950) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C8593 + C63568 * C8679 + C63634 * C4165 +
                       C63567 * C4281 + C63633 * C1768 + C63566 * C1878) *
                          C139301 +
                      (C63635 * C8590 + C63568 * C8676 + C63634 * C4161 +
                       C63567 * C4277 + C63633 * C1760 + C63566 * C1870) *
                          C63570) *
                         C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C63570 +
                     (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                      C63567 * C947 + C63635 * C838 + C63568 * C948) *
                         C139301) *
                        C139480 * C10614 -
                    ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                      C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                         C139301 +
                     (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                      C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                         C63570) *
                        C139480 * C10615 +
                    ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                      C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                         C63570 +
                     (C63633 * C1771 + C63566 * C1881 + C63634 * C6328 +
                      C63567 * C6414 + C63635 * C20986 + C63568 * C21102) *
                         C139301) *
                        C139480 * C10616 -
                    ((C63635 * C73392 + C63568 * C73448 + C63634 * C26694 +
                      C63567 * C26770 + C63633 * C10623 + C63566 * C10685) *
                         C139301 +
                     (C63635 * C73391 + C63568 * C73447 + C63634 * C26692 +
                      C63567 * C26768 + C63633 * C10620 + C63566 * C10682) *
                         C63570) *
                        C139480 * C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexz[72] += (-std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C9304 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139426) *
                        C822 +
                    (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
                      (C71534 + C71535) * C63568) *
                         C139426 -
                     (C68668 * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C9304) *
                        C823 +
                    ((C64276 * C63566 + (C64269 + C64268) * C63567 +
                      (C68675 + C68676) * C63568) *
                         C9304 -
                     (((C273 * C71365 + C139480 * C71525) * C139301 +
                       (C273 * C71364 + C139480 * C71524) * C63570) *
                          C63568 +
                      (C71535 + C71534) * C63567 + C71527 * C63566) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C9304 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139426) *
                        C139346 * C5151 +
                    (((C2020 * C63570 + C2019 * C139301) * C63566 +
                      (C67196 + C67197) * C63567 + (C67198 + C67199) * C63568) *
                         C139426 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C9304) *
                        C139346 * C5152 +
                    (((C305 * C63570 + C306 * C139301) * C63566 +
                      (C65727 + C65728) * C63567 + (C65729 + C65730) * C63568) *
                         C9304 -
                     (((C273 * C8593 + C139480 * C8759) * C139301 +
                       (C273 * C8590 + C139480 * C8756) * C63570) *
                          C63568 +
                      (C4413 * C139301 + C4412 * C63570) * C63567 +
                      (C2017 * C139301 + C2018 * C63570) * C63566) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C273 * C106 + C139480 * C274) * C63570 +
                      (C273 * C112 + C139480 * C280) * C139301) *
                         C63566 +
                     (C64264 + C64265) * C63567 + C64276 * C63568) *
                        C10614 -
                    (C71527 * C63568 + (C67194 + C67195) * C63567 +
                     ((C273 * C1770 + C139480 * C1994) * C139301 +
                      (C273 * C1762 + C139480 * C1986) * C63570) *
                         C63566) *
                        C10615 +
                    (((C273 * C1763 + C139480 * C1987) * C63570 +
                      (C273 * C1771 + C139480 * C1995) * C139301) *
                         C63566 +
                     (C69249 + C69250) * C63567 + (C69257 + C69258) * C63568) *
                        C10616 -
                    (((C273 * C73392 + C139480 * C73500) * C139301 +
                      (C273 * C73391 + C139480 * C73499) * C63570) *
                         C63568 +
                     ((C273 * C26694 + C139480 * C26840) * C139301 +
                      (C273 * C26692 + C139480 * C26838) * C63570) *
                         C63567 +
                     ((C273 * C10623 + C139480 * C10741) * C139301 +
                      (C273 * C10620 + C139480 * C10738) * C63570) *
                         C63566) *
                        C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C9304 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139426) *
              C822 +
          ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
            C67314 * C63567 + C71615 * C63635 + C71616 * C63568) *
               C139480 * C139426 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C9304) *
              C823 +
          ((C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
            C64380 * C63567 + C68732 * C63635 + C68733 * C63568) *
               C139480 * C9304 -
           ((C63570 * C71448 + C139301 * C71609) * C63568 +
            (C63570 * C71364 + C139301 * C71365) * C63635 + C71616 * C63567 +
            C71615 * C63634 + C67314 * C63566 + C67315 * C63633) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C9304 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C63570 * C1761 + C139301 * C1769) * C63633 +
            (C63570 * C1871 + C139301 * C2099) * C63566 + C67318 * C63634 +
            C67319 * C63567 + C67320 * C63635 + C67321 * C63568) *
               C139480 * C139426 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C63570 * C108 + C139301 * C114) * C63633 +
            (C63570 * C189 + C139301 * C362) * C63566 + C65813 * C63634 +
            C65814 * C63567 + C65815 * C63635 + C65816 * C63568) *
               C139480 * C9304 -
           ((C63570 * C8676 + C139301 * C8836) * C63568 +
            (C63570 * C8590 + C139301 * C8593) * C63635 +
            (C63570 * C4277 + C139301 * C4513) * C63567 +
            (C63570 * C4161 + C139301 * C4165) * C63634 +
            (C63570 * C1870 + C139301 * C2098) * C63566 +
            (C63570 * C1760 + C139301 * C1768) * C63633) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C63633 +
           (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
           C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
              C139480 * C10614 -
          (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
           C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
           (C63570 * C1762 + C139301 * C1770) * C63633) *
              C139480 * C10615 +
          ((C63570 * C1763 + C139301 * C1771) * C63633 +
           (C63570 * C1873 + C139301 * C2101) * C63566 + C69342 * C63634 +
           C69343 * C63567 + C69344 * C63635 + C69345 * C63568) *
              C139480 * C10616 -
          ((C63570 * C73447 + C139301 * C73551) * C63568 +
           (C63570 * C73391 + C139301 * C73392) * C63635 +
           (C63570 * C26768 + C139301 * C26908) * C63567 +
           (C63570 * C26692 + C139301 * C26694) * C63634 +
           (C63570 * C10682 + C139301 * C10794) * C63566 +
           (C63570 * C10620 + C139301 * C10623) * C63633) *
              C139480 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] += (-std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139426) *
                        C822 +
                    ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                      C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                      C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                         C139301 * C139480 * C139426 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C9304) *
                        C823 +
                    ((C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                      C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                      C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C71364 + C71692 + C71692 + C63568 * C71690 +
                      C63787 * C23998 + C71693 + C71693 + C63567 * C24440 +
                      C63786 * C8592 + C71694 + C71694 + C63566 * C8915) *
                         C139301 * C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139426) *
                        C139346 * C5151 +
                    ((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                      C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                      C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                         C139301 * C139480 * C139426 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C9304) *
                        C139346 * C5152 +
                    ((C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                      C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                      C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C8590 + C66573 + C66573 + C63568 * C8913 +
                      C63787 * C4161 + C66574 + C66574 + C63567 * C4615 +
                      C63786 * C1760 + C66575 + C66575 + C63566 * C2180) *
                         C139301 * C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                     C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                     C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                        C139301 * C139480 * C10614 -
                    (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                     C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                     C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                        C139301 * C139480 * C10615 +
                    (C63786 * C1763 + C65187 + C65187 + C63566 * C2183 +
                     C63787 * C6325 + C65188 + C65188 + C63567 * C6648 +
                     C63788 * C20984 + C65189 + C65189 + C63568 * C21426) *
                        C139301 * C139480 * C10616 -
                    (C63788 * C73391 + C73604 + C73604 + C63568 * C73602 +
                     C63787 * C26692 + C73605 + C73605 + C63567 * C26976 +
                     C63786 * C10620 + C73606 + C73606 + C63566 * C10847) *
                        C139301 * C139480 * C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C9304 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139426) *
              C822 +
          ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
            C24548 * C63567 + C71532 * C63635 + C71772 * C63568) *
               C139301 * C139426 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C9304) *
              C823 +
          ((C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
            C20668 * C63567 + C68673 * C63635 + C68841 * C63568) *
               C139301 * C9304 -
           ((C273 * C71448 + C139480 * C71768) * C63568 +
            (C273 * C71364 + C139480 * C71524) * C63635 + C71772 * C63567 +
            C71532 * C63634 + C24548 * C63566 + C24226 * C63633) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C9304 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139426) *
              C139346 * C5151 +
          ((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
            C18466 * C63635 + C18908 * C63568) *
               C139301 * C139426 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C9304) *
              C139346 * C5152 +
          ((C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
            C1090 * C63635 + C1381 * C63568) *
               C139301 * C9304 -
           ((C273 * C8676 + C139480 * C8993) * C63568 +
            (C273 * C8590 + C139480 * C8756) * C63635 + C4741 * C63567 +
            C4412 * C63634 + C2311 * C63566 + C2018 * C63633) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C273 * C106 + C139480 * C274) * C63633 +
           (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
           C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
              C139301 * C10614 -
          (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
           C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
           (C273 * C1762 + C139480 * C1986) * C63633) *
              C139301 * C10615 +
          ((C273 * C1763 + C139480 * C1987) * C63633 +
           (C273 * C1873 + C139480 * C2293) * C63566 + C21212 * C63634 +
           C21534 * C63567 + C69255 * C63635 + C69501 * C63568) *
              C139301 * C10616 -
          ((C273 * C73447 + C139480 * C73656) * C63568 +
           (C273 * C73391 + C139480 * C73499) * C63635 +
           (C273 * C26768 + C139480 * C27048) * C63567 +
           (C273 * C26692 + C139480 * C26838) * C63634 +
           (C273 * C10682 + C139480 * C10903) * C63566 +
           (C273 * C10620 + C139480 * C10738) * C63633) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] += (-std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C9304 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139426) *
                        C822 +
                    (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
                      (C71849 + C71853) * C63568) *
                         C139426 -
                     (C68893 * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C9304) *
                        C823 +
                    ((C64652 * C63566 + (C64630 + C64648) * C63567 +
                      (C68894 + C68898) * C63568) *
                         C9304 -
                     (((C63570 * C71524 + C139301 * C71846) * C139480 +
                       (C63570 * C71364 + C139301 * C71365) * C273) *
                          C63568 +
                      (C71853 + C71849) * C63567 + C71848 * C63566) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C9304 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139426) *
                        C139346 * C5151 +
                    ((((C63570 * C1761 + C139301 * C1769) * C273 +
                       (C63570 * C1985 + C139301 * C2393) * C139480) *
                          C63566 +
                      (C67628 + C67640) * C63567 + (C67631 + C67641) * C63568) *
                         C139426 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C9304) *
                        C139346 * C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C273 +
                       (C63570 * C276 + C139301 * C579) * C139480) *
                          C63566 +
                      (C66042 + C66050) * C63567 + (C66045 + C66051) * C63568) *
                         C9304 -
                     (((C63570 * C8756 + C139301 * C9070) * C139480 +
                       (C63570 * C8590 + C139301 * C8593) * C273) *
                          C63568 +
                      ((C63570 * C4395 + C139301 * C4843) * C139480 +
                       (C63570 * C4161 + C139301 * C4165) * C273) *
                          C63567 +
                      ((C63570 * C1984 + C139301 * C2392) * C139480 +
                       (C63570 * C1760 + C139301 * C1768) * C273) *
                          C63566) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C273 +
                      (C63570 * C274 + C139301 * C577) * C139480) *
                         C63566 +
                     (C64622 + C64646) * C63567 + C64652 * C63568) *
                        C10614 -
                    (C71848 * C63568 + (C67639 + C67627) * C63567 +
                     ((C63570 * C1986 + C139301 * C2394) * C139480 +
                      (C63570 * C1762 + C139301 * C1770) * C273) *
                         C63566) *
                        C10615 +
                    (((C63570 * C1763 + C139301 * C1771) * C273 +
                      (C63570 * C1987 + C139301 * C2395) * C139480) *
                         C63566 +
                     (C69577 + C69585) * C63567 + (C69580 + C69586) * C63568) *
                        C10616 -
                    (((C63570 * C73499 + C139301 * C73707) * C139480 +
                      (C63570 * C73391 + C139301 * C73392) * C273) *
                         C63568 +
                     ((C63570 * C26838 + C139301 * C27116) * C139480 +
                      (C63570 * C26692 + C139301 * C26694) * C273) *
                         C63567 +
                     ((C63570 * C10738 + C139301 * C10956) * C139480 +
                      (C63570 * C10620 + C139301 * C10623) * C273) *
                         C63566) *
                        C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[72] += (-std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139426) *
                        C822 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C273 +
                      (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                       C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                          C139480) *
                         C139301 * C139426 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C9304) *
                        C823 +
                    (((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C273 +
                      (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                       C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C71524 + C63568 * C71927 + C63634 * C24216 +
                       C63567 * C24753 + C63633 * C8758 + C63566 * C9149) *
                          C139480 +
                      (C63635 * C71364 + C63568 * C71448 + C63634 * C23998 +
                       C63567 * C24114 + C63633 * C8592 + C63566 * C8678) *
                          C273) *
                         C139301 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139426) *
                        C139346 * C5151 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C273 +
                      (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                       C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                          C139480) *
                         C139301 * C139426 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C9304) *
                        C139346 * C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C273 +
                      (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                       C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C8756 + C63568 * C9147 + C63634 * C4395 +
                       C63567 * C4945 + C63633 * C1984 + C63566 * C2474) *
                          C139480 +
                      (C63635 * C8590 + C63568 * C8676 + C63634 * C4161 +
                       C63567 * C4277 + C63633 * C1760 + C63566 * C1870) *
                          C273) *
                         C139301 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                      C63567 * C939 + C63635 * C830 + C63568 * C940) *
                         C273 +
                     (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                      C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                         C139480) *
                        C139301 * C10614 -
                    ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                      C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                         C139480 +
                     (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                      C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                         C273) *
                        C139301 * C10615 +
                    ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                      C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                         C273 +
                     (C63633 * C1987 + C63566 * C2477 + C63634 * C6491 +
                      C63567 * C6882 + C63635 * C21202 + C63568 * C21739) *
                         C139480) *
                        C139301 * C10616 -
                    ((C63635 * C73499 + C63568 * C73758 + C63634 * C26838 +
                      C63567 * C27184 + C63633 * C10738 + C63566 * C11009) *
                         C139480 +
                     (C63635 * C73391 + C63568 * C73447 + C63634 * C26692 +
                      C63567 * C26768 + C63633 * C10620 + C63566 * C10682) *
                         C273) *
                        C139301 * C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (-std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C9304 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139426) *
              C822 +
          ((C19327 * C63566 + C24861 * C63567 + C72009 * C63568) * C139301 *
               C139426 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C9304) *
              C823 +
          ((C15155 * C63566 + C20885 * C63567 + C69006 * C63568) * C139301 *
               C9304 -
           ((C711 * C71364 + C72006 + C72006 + C139480 * C72002) * C63568 +
            C72009 * C63567 + C24861 * C63566) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C9304 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139426) *
              C139346 * C5151 +
          ((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
               C139426 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C9304) *
              C139346 * C5152 +
          ((C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 * C9304 -
           ((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C63568 +
            C5073 * C63567 + C2609 * C63566) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
           C15154 * C63567 + C15155 * C63568) *
              C139301 * C10614 -
          (C24861 * C63568 + C19327 * C63567 +
           (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
              C139301 * C10615 +
          ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C63566 +
           C21847 * C63567 + C69742 * C63568) *
              C139301 * C10616 -
          ((C711 * C73391 + C73811 + C73811 + C139480 * C73809) * C63568 +
           (C711 * C26692 + C27255 + C27255 + C139480 * C27252) * C63567 +
           (C711 * C10620 + C11066 + C11066 + C139480 * C11062) * C63566) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) *
                          C139480 * C63566 +
                      C64110 * C63567 + C64111 * C63568) *
                         C139562 -
                     (C66992 * C63568 + C66993 * C63567 +
                      (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) *
                          C139480 * C63566) *
                         C139563 +
                     ((C63569 * C1763 + C64879 + C64879 + C139301 * C1779) *
                          C139480 * C63566 +
                      C69095 * C63567 + C69096 * C63568) *
                         C12024) *
                        C139346 * C139521 +
                    (((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) *
                          C139480 * C63566 +
                      C66994 * C63567 + C66995 * C63568) *
                         C139563 -
                     (C64114 * C63568 + C64113 * C63567 +
                      (C63569 * C107 + C63577 + C63577 + C139301 * C119) *
                          C139480 * C63566) *
                         C139562 -
                     ((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) *
                          C139480 * C63568 +
                      (C63569 * C6324 + C64886 + C64886 + C139301 * C6330) *
                          C139480 * C63567 +
                      (C63569 * C1764 + C64887 + C64887 + C139301 * C1780) *
                          C139480 * C63566) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C139562 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139563 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C63570 +
                      (C63633 * C1771 + C63566 * C1881 + C63634 * C6328 +
                       C63567 * C6414 + C63635 * C20986 + C63568 * C21102) *
                          C139301) *
                         C139480 * C12024) *
                        C139346 * C139521 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C63570 +
                      (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                       C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                          C139301) *
                         C139480 * C139563 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C139562 -
                     ((C63635 * C20985 + C63568 * C21101 + C63634 * C6327 +
                       C63567 * C6413 + C63633 * C1772 + C63566 * C1882) *
                          C139301 +
                      (C63635 * C20983 + C63568 * C21099 + C63634 * C6324 +
                       C63567 * C6410 + C63633 * C1764 + C63566 * C1874) *
                          C63570) *
                         C139480 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C139562 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139563 +
                     (((C273 * C1763 + C139480 * C1987) * C63570 +
                       (C273 * C1771 + C139480 * C1995) * C139301) *
                          C63566 +
                      (C69249 + C69250) * C63567 + (C69257 + C69258) * C63568) *
                         C12024) *
                        C139346 * C139521 +
                    (((C2020 * C63570 + C2019 * C139301) * C63566 +
                      (C67196 + C67197) * C63567 + (C67198 + C67199) * C63568) *
                         C139563 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C139562 -
                     (((C273 * C20985 + C139480 * C21203) * C139301 +
                       (C273 * C20983 + C139480 * C21201) * C63570) *
                          C63568 +
                      (C15497 * C139301 + C15496 * C63570) * C63567 +
                      (C2022 * C139301 + C2021 * C63570) * C63566) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C139562 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139563 +
           ((C63570 * C1763 + C139301 * C1771) * C63633 +
            (C63570 * C1873 + C139301 * C2101) * C63566 + C69342 * C63634 +
            C69343 * C63567 + C69344 * C63635 + C69345 * C63568) *
               C139480 * C12024) *
              C139346 * C139521 +
          (((C63570 * C1761 + C139301 * C1769) * C63633 +
            (C63570 * C1871 + C139301 * C2099) * C63566 + C67318 * C63634 +
            C67319 * C63567 + C67320 * C63635 + C67321 * C63568) *
               C139480 * C139563 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C139562 -
           ((C63570 * C21099 + C139301 * C21313) * C63568 +
            (C63570 * C20983 + C139301 * C20985) * C63635 +
            (C63570 * C6410 + C139301 * C6570) * C63567 +
            (C63570 * C6324 + C139301 * C6327) * C63634 +
            (C63570 * C1874 + C139301 * C2102) * C63566 +
            (C63570 * C1764 + C139301 * C1772) * C63633) *
               C139480 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C139562 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139563 +
                     (C63786 * C1763 + C65187 + C65187 + C63566 * C2183 +
                      C63787 * C6325 + C65188 + C65188 + C63567 * C6648 +
                      C63788 * C20984 + C65189 + C65189 + C63568 * C21426) *
                         C139301 * C139480 * C12024) *
                        C139346 * C139521 +
                    ((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                      C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                      C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                         C139301 * C139480 * C139563 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C139562 -
                     (C63788 * C20983 + C65193 + C65193 + C63568 * C21425 +
                      C63787 * C6324 + C65194 + C65194 + C63567 * C6647 +
                      C63786 * C1764 + C65195 + C65195 + C63566 * C2184) *
                         C139301 * C139480 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C139562 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139563 +
           ((C273 * C1763 + C139480 * C1987) * C63633 +
            (C273 * C1873 + C139480 * C2293) * C63566 + C21212 * C63634 +
            C21534 * C63567 + C69255 * C63635 + C69501 * C63568) *
               C139301 * C12024) *
              C139346 * C139521 +
          ((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
            C18466 * C63635 + C18908 * C63568) *
               C139301 * C139563 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C139562 -
           ((C273 * C21099 + C139480 * C21529) * C63568 +
            (C273 * C20983 + C139480 * C21201) * C63635 + C15833 * C63567 +
            C15496 * C63634 + C2313 * C63566 + C2021 * C63633) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C139562 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139563 +
                     (((C63570 * C1763 + C139301 * C1771) * C273 +
                       (C63570 * C1987 + C139301 * C2395) * C139480) *
                          C63566 +
                      (C69577 + C69585) * C63567 + (C69580 + C69586) * C63568) *
                         C12024) *
                        C139346 * C139521 +
                    ((((C63570 * C1761 + C139301 * C1769) * C273 +
                       (C63570 * C1985 + C139301 * C2393) * C139480) *
                          C63566 +
                      (C67628 + C67640) * C63567 + (C67631 + C67641) * C63568) *
                         C139563 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C139562 -
                     (((C63570 * C21201 + C139301 * C21632) * C139480 +
                       (C63570 * C20983 + C139301 * C20985) * C273) *
                          C63568 +
                      ((C63570 * C6490 + C139301 * C6804) * C139480 +
                       (C63570 * C6324 + C139301 * C6327) * C273) *
                          C63567 +
                      ((C63570 * C1988 + C139301 * C2396) * C139480 +
                       (C63570 * C1764 + C139301 * C1772) * C273) *
                          C63566) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[73] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C139562 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139563 +
                     ((C63633 * C1763 + C63566 * C1873 + C63634 * C6325 +
                       C63567 * C6411 + C63635 * C20984 + C63568 * C21100) *
                          C273 +
                      (C63633 * C1987 + C63566 * C2477 + C63634 * C6491 +
                       C63567 * C6882 + C63635 * C21202 + C63568 * C21739) *
                          C139480) *
                         C139301 * C12024) *
                        C139346 * C139521 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C273 +
                      (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                       C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                          C139480) *
                         C139301 * C139563 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C139562 -
                     ((C63635 * C21201 + C63568 * C21738 + C63634 * C6490 +
                       C63567 * C6881 + C63633 * C1988 + C63566 * C2478) *
                          C139480 +
                      (C63635 * C20983 + C63568 * C21099 + C63634 * C6324 +
                       C63567 * C6410 + C63633 * C1764 + C63566 * C1874) *
                          C273) *
                         C139301 * C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C139562 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139563 +
           ((C711 * C1763 + C2592 + C2592 + C139480 * C2579) * C63566 +
            C21847 * C63567 + C69742 * C63568) *
               C139301 * C12024) *
              C139346 * C139521 +
          ((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
               C139563 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C139562 -
           ((C711 * C20983 + C21843 + C21843 + C139480 * C21838) * C63568 +
            C16148 * C63567 + C2611 * C63566) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C9304 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C139426) *
              C139346 * C5151 +
          (((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139480 *
                C63566 +
            C66994 * C63567 + C66995 * C63568) *
               C139426 -
           (C64114 * C63568 + C64113 * C63567 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C139480 *
                C63566) *
               C9304) *
              C139346 * C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C139480 *
                C63566 +
            C65577 * C63567 + C65578 * C63568) *
               C9304 -
           ((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139480 *
                C63568 +
            (C63569 * C4161 + C66275 + C66275 + C139301 * C4169) * C139480 *
                C63567 +
            (C63569 * C1760 + C66276 + C66276 + C139301 * C1776) * C139480 *
                C63566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C139480 *
                C63566 +
            C64110 * C63567 + C64111 * C63568) *
               C9304 -
           (C66992 * C63568 + C66993 * C63567 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139480 *
                C63566) *
               C139426) *
              C822 +
          ((C66993 * C63566 + C66992 * C63567 + C71374 * C63568) * C139426 -
           (C64112 * C63568 + C64111 * C63567 + C64110 * C63566) * C9304) *
              C823 +
          ((C64111 * C63566 + C64112 * C63567 + C68563 * C63568) * C9304 -
           ((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139480 *
                C63568 +
            C71374 * C63567 + C66992 * C63566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139426) *
                        C139346 * C5151 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C63570 +
                      (C63633 * C1769 + C63566 * C1879 + C63634 * C4164 +
                       C63567 * C4280 + C63635 * C8594 + C63568 * C8680) *
                          C139301) *
                         C139480 * C139426 -
                     ((C63635 * C839 + C63568 * C949 + C63634 * C836 +
                       C63567 * C946 + C63633 * C113 + C63566 * C194) *
                          C139301 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C63570) *
                         C139480 * C9304) *
                        C139346 * C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C63570 +
                      (C63633 * C114 + C63566 * C195 + C63634 * C835 +
                       C63567 * C945 + C63635 * C840 + C63568 * C950) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C8593 + C63568 * C8679 + C63634 * C4165 +
                       C63567 * C4281 + C63633 * C1768 + C63566 * C1878) *
                          C139301 +
                      (C63635 * C8590 + C63568 * C8676 + C63634 * C4161 +
                       C63567 * C4277 + C63633 * C1760 + C63566 * C1870) *
                          C63570) *
                         C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C63570 +
                      (C63633 * C112 + C63566 * C193 + C63634 * C837 +
                       C63567 * C947 + C63635 * C838 + C63568 * C948) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C8595 + C63568 * C8681 + C63634 * C4163 +
                       C63567 * C4279 + C63633 * C1770 + C63566 * C1880) *
                          C139301 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C63570) *
                         C139480 * C139426) *
                        C822 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C63570 +
                      (C63633 * C4163 + C63566 * C4279 + C63634 * C8595 +
                       C63567 * C8681 + C63635 * C24000 + C63568 * C24116) *
                          C139301) *
                         C139480 * C139426 -
                     ((C63635 * C5806 + C63568 * C5868 + C63634 * C838 +
                       C63567 * C948 + C63633 * C837 + C63566 * C947) *
                          C139301 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C63570) *
                         C139480 * C9304) *
                        C823 +
                    (((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C63570 +
                      (C63633 * C838 + C63566 * C948 + C63634 * C5806 +
                       C63567 * C5868 + C63635 * C20280 + C63568 * C20364) *
                          C139301) *
                         C139480 * C9304 -
                     ((C63635 * C71365 + C63568 * C71449 + C63634 * C24000 +
                       C63567 * C24116 + C63633 * C8595 + C63566 * C8681) *
                          C139301 +
                      (C63635 * C71364 + C63568 * C71448 + C63634 * C23998 +
                       C63567 * C24114 + C63633 * C8592 + C63566 * C8678) *
                          C63570) *
                         C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexz[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C9304 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139426) *
                        C139346 * C5151 +
                    (((C2020 * C63570 + C2019 * C139301) * C63566 +
                      (C67196 + C67197) * C63567 + (C67198 + C67199) * C63568) *
                         C139426 -
                     (C64277 * C63568 + (C64271 + C64270) * C63567 +
                      (C304 * C139301 + C303 * C63570) * C63566) *
                         C9304) *
                        C139346 * C5152 +
                    (((C305 * C63570 + C306 * C139301) * C63566 +
                      (C65727 + C65728) * C63567 + (C65729 + C65730) * C63568) *
                         C9304 -
                     (((C273 * C8593 + C139480 * C8759) * C139301 +
                       (C273 * C8590 + C139480 * C8756) * C63570) *
                          C63568 +
                      (C4413 * C139301 + C4412 * C63570) * C63567 +
                      (C2017 * C139301 + C2018 * C63570) * C63566) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C273 * C106 + C139480 * C274) * C63570 +
                       (C273 * C112 + C139480 * C280) * C139301) *
                          C63566 +
                      (C64264 + C64265) * C63567 + C64276 * C63568) *
                         C9304 -
                     (C71527 * C63568 + (C67194 + C67195) * C63567 +
                      ((C273 * C1770 + C139480 * C1994) * C139301 +
                       (C273 * C1762 + C139480 * C1986) * C63570) *
                          C63566) *
                         C139426) *
                        C822 +
                    (((C67195 + C67194) * C63566 + (C67193 + C67192) * C63567 +
                      (C71534 + C71535) * C63568) *
                         C139426 -
                     (C68668 * C63568 + (C64267 + C64266) * C63567 +
                      (C64265 + C64264) * C63566) *
                         C9304) *
                        C823 +
                    ((C64276 * C63566 + (C64269 + C64268) * C63567 +
                      (C68675 + C68676) * C63568) *
                         C9304 -
                     (((C273 * C71365 + C139480 * C71525) * C139301 +
                       (C273 * C71364 + C139480 * C71524) * C63570) *
                          C63568 +
                      (C71535 + C71534) * C63567 + C71527 * C63566) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C9304 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139426) *
              C139346 * C5151 +
          (((C63570 * C1761 + C139301 * C1769) * C63633 +
            (C63570 * C1871 + C139301 * C2099) * C63566 + C67318 * C63634 +
            C67319 * C63567 + C67320 * C63635 + C67321 * C63568) *
               C139480 * C139426 -
           (C64385 * C63568 + C64384 * C63635 + C64383 * C63567 +
            C64382 * C63634 + (C63570 * C188 + C139301 * C361) * C63566 +
            (C63570 * C107 + C139301 * C113) * C63633) *
               C139480 * C9304) *
              C139346 * C5152 +
          (((C63570 * C108 + C139301 * C114) * C63633 +
            (C63570 * C189 + C139301 * C362) * C63566 + C65813 * C63634 +
            C65814 * C63567 + C65815 * C63635 + C65816 * C63568) *
               C139480 * C9304 -
           ((C63570 * C8676 + C139301 * C8836) * C63568 +
            (C63570 * C8590 + C139301 * C8593) * C63635 +
            (C63570 * C4277 + C139301 * C4513) * C63567 +
            (C63570 * C4161 + C139301 * C4165) * C63634 +
            (C63570 * C1870 + C139301 * C2098) * C63566 +
            (C63570 * C1760 + C139301 * C1768) * C63633) *
               C139480 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C63633 +
            (C63570 * C187 + C139301 * C360) * C63566 + C64376 * C63634 +
            C64377 * C63567 + C64378 * C63635 + C64379 * C63568) *
               C139480 * C9304 -
           (C67314 * C63568 + C67315 * C63635 + C67316 * C63567 +
            C67317 * C63634 + (C63570 * C1872 + C139301 * C2100) * C63566 +
            (C63570 * C1762 + C139301 * C1770) * C63633) *
               C139480 * C139426) *
              C822 +
          ((C67317 * C63633 + C67316 * C63566 + C67315 * C63634 +
            C67314 * C63567 + C71615 * C63635 + C71616 * C63568) *
               C139480 * C139426 -
           (C64380 * C63568 + C64381 * C63635 + C64379 * C63567 +
            C64378 * C63634 + C64377 * C63566 + C64376 * C63633) *
               C139480 * C9304) *
              C823 +
          ((C64378 * C63633 + C64379 * C63566 + C64381 * C63634 +
            C64380 * C63567 + C68732 * C63635 + C68733 * C63568) *
               C139480 * C9304 -
           ((C63570 * C71448 + C139301 * C71609) * C63568 +
            (C63570 * C71364 + C139301 * C71365) * C63635 + C71616 * C63567 +
            C71615 * C63634 + C67314 * C63566 + C67315 * C63633) *
               C139480 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139426) *
                        C139346 * C5151 +
                    ((C63786 * C1761 + C65190 + C65190 + C63566 * C2181 +
                      C63787 * C4160 + C65191 + C65191 + C63567 * C4614 +
                      C63788 * C8591 + C65192 + C65192 + C63568 * C8914) *
                         C139301 * C139480 * C139426 -
                     (C63788 * C831 + C63793 + C63793 + C63568 * C1251 +
                      C63787 * C828 + C63794 + C63794 + C63567 * C1248 +
                      C63786 * C107 + C63795 + C63795 + C63566 * C418) *
                         C139301 * C139480 * C9304) *
                        C139346 * C5152 +
                    ((C63786 * C108 + C63796 + C63796 + C63566 * C419 +
                      C63787 * C827 + C63797 + C63797 + C63567 * C1247 +
                      C63788 * C832 + C63798 + C63798 + C63568 * C1252) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C8590 + C66573 + C66573 + C63568 * C8913 +
                      C63787 * C4161 + C66574 + C66574 + C63567 * C4615 +
                      C63786 * C1760 + C66575 + C66575 + C63566 * C2180) *
                         C139301 * C139480 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C63786 * C106 + C63790 + C63790 + C63566 * C417 +
                      C63787 * C829 + C63791 + C63791 + C63567 * C1249 +
                      C63788 * C830 + C63792 + C63792 + C63568 * C1250) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C8592 + C65184 + C65184 + C63568 * C8915 +
                      C63787 * C4159 + C65185 + C65185 + C63567 * C4613 +
                      C63786 * C1762 + C65186 + C65186 + C63566 * C2182) *
                         C139301 * C139480 * C139426) *
                        C822 +
                    ((C63786 * C4159 + C67420 + C67420 + C63566 * C4613 +
                      C63787 * C8592 + C67421 + C67421 + C63567 * C8915 +
                      C63788 * C23998 + C67422 + C67422 + C63568 * C24440) *
                         C139301 * C139480 * C139426 -
                     (C63788 * C5803 + C64462 + C64462 + C63568 * C6030 +
                      C63787 * C830 + C64463 + C64463 + C63567 * C1250 +
                      C63786 * C829 + C64464 + C64464 + C63566 * C1249) *
                         C139301 * C139480 * C9304) *
                        C823 +
                    ((C63786 * C830 + C64465 + C64465 + C63566 * C1250 +
                      C63787 * C5803 + C64466 + C64466 + C63567 * C6030 +
                      C63788 * C20278 + C64467 + C64467 + C63568 * C20592) *
                         C139301 * C139480 * C9304 -
                     (C63788 * C71364 + C71692 + C71692 + C63568 * C71690 +
                      C63787 * C23998 + C71693 + C71693 + C63567 * C24440 +
                      C63786 * C8592 + C71694 + C71694 + C63566 * C8915) *
                         C139301 * C139480 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C9304 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139426) *
              C139346 * C5151 +
          ((C2020 * C63633 + C2312 * C63566 + C4410 * C63634 + C4740 * C63567 +
            C18466 * C63635 + C18908 * C63568) *
               C139301 * C139426 -
           (C1380 * C63568 + C1088 * C63635 + C1379 * C63567 + C1087 * C63634 +
            C518 * C63566 + C303 * C63633) *
               C139301 * C9304) *
              C139346 * C5152 +
          ((C305 * C63633 + C519 * C63566 + C1085 * C63634 + C1378 * C63567 +
            C1090 * C63635 + C1381 * C63568) *
               C139301 * C9304 -
           ((C273 * C8676 + C139480 * C8993) * C63568 +
            (C273 * C8590 + C139480 * C8756) * C63635 + C4741 * C63567 +
            C4412 * C63634 + C2311 * C63566 + C2018 * C63633) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C273 * C106 + C139480 * C274) * C63633 +
            (C273 * C187 + C139480 * C499) * C63566 + C14408 * C63634 +
            C14805 * C63567 + C14411 * C63635 + C14806 * C63568) *
               C139301 * C9304 -
           (C24548 * C63568 + C24226 * C63635 + C18907 * C63567 +
            C18465 * C63634 + (C273 * C1872 + C139480 * C2292) * C63566 +
            (C273 * C1762 + C139480 * C1986) * C63633) *
               C139301 * C139426) *
              C822 +
          ((C18465 * C63633 + C18907 * C63566 + C24226 * C63634 +
            C24548 * C63567 + C71532 * C63635 + C71772 * C63568) *
               C139301 * C139426 -
           (C20668 * C63568 + C20442 * C63635 + C14806 * C63567 +
            C14411 * C63634 + C14805 * C63566 + C14408 * C63633) *
               C139301 * C9304) *
              C823 +
          ((C14411 * C63633 + C14806 * C63566 + C20442 * C63634 +
            C20668 * C63567 + C68673 * C63635 + C68841 * C63568) *
               C139301 * C9304 -
           ((C273 * C71448 + C139480 * C71768) * C63568 +
            (C273 * C71364 + C139480 * C71524) * C63635 + C71772 * C63567 +
            C71532 * C63634 + C24548 * C63566 + C24226 * C63633) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C9304 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139426) *
                        C139346 * C5151 +
                    ((((C63570 * C1761 + C139301 * C1769) * C273 +
                       (C63570 * C1985 + C139301 * C2393) * C139480) *
                          C63566 +
                      (C67628 + C67640) * C63567 + (C67631 + C67641) * C63568) *
                         C139426 -
                     (C64653 * C63568 + (C64649 + C64631) * C63567 +
                      ((C63570 * C275 + C139301 * C578) * C139480 +
                       (C63570 * C107 + C139301 * C113) * C273) *
                          C63566) *
                         C9304) *
                        C139346 * C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C273 +
                       (C63570 * C276 + C139301 * C579) * C139480) *
                          C63566 +
                      (C66042 + C66050) * C63567 + (C66045 + C66051) * C63568) *
                         C9304 -
                     (((C63570 * C8756 + C139301 * C9070) * C139480 +
                       (C63570 * C8590 + C139301 * C8593) * C273) *
                          C63568 +
                      ((C63570 * C4395 + C139301 * C4843) * C139480 +
                       (C63570 * C4161 + C139301 * C4165) * C273) *
                          C63567 +
                      ((C63570 * C1984 + C139301 * C2392) * C139480 +
                       (C63570 * C1760 + C139301 * C1768) * C273) *
                          C63566) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C273 +
                       (C63570 * C274 + C139301 * C577) * C139480) *
                          C63566 +
                      (C64622 + C64646) * C63567 + C64652 * C63568) *
                         C9304 -
                     (C71848 * C63568 + (C67639 + C67627) * C63567 +
                      ((C63570 * C1986 + C139301 * C2394) * C139480 +
                       (C63570 * C1762 + C139301 * C1770) * C273) *
                          C63566) *
                         C139426) *
                        C822 +
                    (((C67627 + C67639) * C63566 + (C67624 + C67638) * C63567 +
                      (C71849 + C71853) * C63568) *
                         C139426 -
                     (C68893 * C63568 + (C64647 + C64625) * C63567 +
                      (C64646 + C64622) * C63566) *
                         C9304) *
                        C823 +
                    ((C64652 * C63566 + (C64630 + C64648) * C63567 +
                      (C68894 + C68898) * C63568) *
                         C9304 -
                     (((C63570 * C71524 + C139301 * C71846) * C139480 +
                       (C63570 * C71364 + C139301 * C71365) * C273) *
                          C63568 +
                      (C71853 + C71849) * C63567 + C71848 * C63566) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[74] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139426) *
                        C139346 * C5151 +
                    (((C63633 * C1761 + C63566 * C1871 + C63634 * C4160 +
                       C63567 * C4276 + C63635 * C8591 + C63568 * C8677) *
                          C273 +
                      (C63633 * C1985 + C63566 * C2475 + C63634 * C4394 +
                       C63567 * C4944 + C63635 * C8757 + C63568 * C9148) *
                          C139480) *
                         C139301 * C139426 -
                     ((C63635 * C1055 + C63568 * C1545 + C63634 * C1052 +
                       C63567 * C1542 + C63633 * C275 + C63566 * C634) *
                          C139480 +
                      (C63635 * C831 + C63568 * C941 + C63634 * C828 +
                       C63567 * C938 + C63633 * C107 + C63566 * C188) *
                          C273) *
                         C139301 * C9304) *
                        C139346 * C5152 +
                    (((C63633 * C108 + C63566 * C189 + C63634 * C827 +
                       C63567 * C937 + C63635 * C832 + C63568 * C942) *
                          C273 +
                      (C63633 * C276 + C63566 * C635 + C63634 * C1051 +
                       C63567 * C1541 + C63635 * C1056 + C63568 * C1546) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C8756 + C63568 * C9147 + C63634 * C4395 +
                       C63567 * C4945 + C63633 * C1984 + C63566 * C2474) *
                          C139480 +
                      (C63635 * C8590 + C63568 * C8676 + C63634 * C4161 +
                       C63567 * C4277 + C63633 * C1760 + C63566 * C1870) *
                          C273) *
                         C139301 * C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63633 * C106 + C63566 * C187 + C63634 * C829 +
                       C63567 * C939 + C63635 * C830 + C63568 * C940) *
                          C273 +
                      (C63633 * C274 + C63566 * C633 + C63634 * C1053 +
                       C63567 * C1543 + C63635 * C1054 + C63568 * C1544) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C8758 + C63568 * C9149 + C63634 * C4393 +
                       C63567 * C4943 + C63633 * C1986 + C63566 * C2476) *
                          C139480 +
                      (C63635 * C8592 + C63568 * C8678 + C63634 * C4159 +
                       C63567 * C4275 + C63633 * C1762 + C63566 * C1872) *
                          C273) *
                         C139301 * C139426) *
                        C822 +
                    (((C63633 * C4159 + C63566 * C4275 + C63634 * C8592 +
                       C63567 * C8678 + C63635 * C23998 + C63568 * C24114) *
                          C273 +
                      (C63633 * C4393 + C63566 * C4943 + C63634 * C8758 +
                       C63567 * C9149 + C63635 * C24216 + C63568 * C24753) *
                          C139480) *
                         C139301 * C139426 -
                     ((C63635 * C5921 + C63568 * C6192 + C63634 * C1054 +
                       C63567 * C1544 + C63633 * C1053 + C63566 * C1543) *
                          C139480 +
                      (C63635 * C5803 + C63568 * C5865 + C63634 * C830 +
                       C63567 * C940 + C63633 * C829 + C63566 * C939) *
                          C273) *
                         C139301 * C9304) *
                        C823 +
                    (((C63633 * C830 + C63566 * C940 + C63634 * C5803 +
                       C63567 * C5865 + C63635 * C20278 + C63568 * C20362) *
                          C273 +
                      (C63633 * C1054 + C63566 * C1544 + C63634 * C5921 +
                       C63567 * C6192 + C63635 * C20432 + C63568 * C20809) *
                          C139480) *
                         C139301 * C9304 -
                     ((C63635 * C71524 + C63568 * C71927 + C63634 * C24216 +
                       C63567 * C24753 + C63633 * C8758 + C63566 * C9149) *
                          C139480 +
                      (C63635 * C71364 + C63568 * C71448 + C63634 * C23998 +
                       C63567 * C24114 + C63633 * C8592 + C63566 * C8678) *
                          C273) *
                         C139301 * C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C9304 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139426) *
              C139346 * C5151 +
          ((C2610 * C63566 + C5072 * C63567 + C19328 * C63568) * C139301 *
               C139426 -
           (C1678 * C63568 + C1677 * C63567 + C741 * C63566) * C139301 *
               C9304) *
              C139346 * C5152 +
          ((C742 * C63566 + C1676 * C63567 + C1679 * C63568) * C139301 * C9304 -
           ((C711 * C8590 + C9228 + C9228 + C139480 * C9224) * C63568 +
            C5073 * C63567 + C2609 * C63566) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C711 * C106 + C719 + C719 + C139480 * C712) * C63566 +
            C15154 * C63567 + C15155 * C63568) *
               C139301 * C9304 -
           (C24861 * C63568 + C19327 * C63567 +
            (C711 * C1762 + C2591 + C2591 + C139480 * C2578) * C63566) *
               C139301 * C139426) *
              C822 +
          ((C19327 * C63566 + C24861 * C63567 + C72009 * C63568) * C139301 *
               C139426 -
           (C20885 * C63568 + C15155 * C63567 + C15154 * C63566) * C139301 *
               C9304) *
              C823 +
          ((C15155 * C63566 + C20885 * C63567 + C69006 * C63568) * C139301 *
               C9304 -
           ((C711 * C71364 + C72006 + C72006 + C139480 * C72002) * C63568 +
            C72009 * C63567 + C24861 * C63566) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139362 * C139529 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139362 * C139398) *
              C139558 +
          (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
               C139362 * C139398 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139362 * C139529) *
              C139559 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
             (C63569 * C1760 + C66276 + C66276 + C139301 * C1776) * C139557) *
                C46915 +
            (C78708 + C78714) * C139555) *
               C139362 * C139529 -
           (((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139557 +
             C65576 * C30255) *
                C139555 +
            (C78714 + C78708) * C46915) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139362 * C139529 -
           (((C47004 * C8595 + C139555 * C8681 + C47003 * C4163 +
              C46915 * C4279) *
                 C139301 +
             (C47004 * C8592 + C139555 * C8678 + C47003 * C4159 +
              C46915 * C4275) *
                 C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139362 * C139398) *
              C139558 +
          ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                C30255 +
            ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                C139557) *
               C139362 * C139398 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139362 * C139529) *
              C139559 +
          ((((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) *
                C30255 +
            ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
                C139557) *
               C139362 * C139529 -
           (((C47004 * C8593 + C139555 * C8679 + C47003 * C4165 +
              C46915 * C4281) *
                 C139301 +
             (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
              C46915 * C4277) *
                 C63570) *
                C139557 +
            ((C49877 + C49876) * C139301 + (C49875 + C49874) * C63570) *
                C30255) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139362 * C139529 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139362 * C139398) *
              C139558 +
          ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                C46915 +
            ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                C139555) *
               C139362 * C139398 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139362 * C139529) *
              C139559 +
          ((((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) *
                C46915 +
            ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
                C139555) *
               C139362 * C139529 -
           (((C30392 * C8593 + C139557 * C8759 + C30391 * C840 +
              C30255 * C1064) *
                 C139301 +
             (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
              C30255 * C1056) *
                 C63570) *
                C139555 +
            ((C33313 + C33312) * C139301 + (C33311 + C33310) * C63570) *
                C46915) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139362 * C139529 -
                     ((C67314 * C139555 + C67315 * C47004 + C67316 * C46915 +
                       C67317 * C47003) *
                          C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C139362 * C139398) *
                        C139558 +
                    (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                       C64385 * C139555) *
                          C30255 +
                      (C67318 * C47003 + C67319 * C46915 + C67320 * C47004 +
                       C67321 * C139555) *
                          C139557) *
                         C139362 * C139398 -
                     ((C78044 + C78043 + C78068 + C78067) * C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C139362 * C139529) *
                        C139559 +
                    ((((C63570 * C108 + C139301 * C114) * C47003 +
                       (C63570 * C189 + C139301 * C362) * C46915 +
                       C65813 * C47004 + C65814 * C139555) *
                          C30255 +
                      ((C63570 * C1760 + C139301 * C1768) * C47003 +
                       (C63570 * C1870 + C139301 * C2098) * C46915 +
                       C79013 * C47004 + C79014 * C139555) *
                          C139557) *
                         C139362 * C139529 -
                     (((C63570 * C8676 + C139301 * C8836) * C139555 +
                       (C63570 * C8590 + C139301 * C8593) * C47004 +
                       C79014 * C46915 + C79013 * C47003) *
                          C139557 +
                      (C65816 * C139555 + C65815 * C47004 + C65814 * C46915 +
                       C65813 * C47003) *
                          C30255) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139362 * C139529 -
                     ((C47240 * C8592 + C52251 + C52251 + C139555 * C8915 +
                       C47239 * C4159 + C52250 + C52250 + C46915 * C4613) *
                          C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139362 * C139398) *
                        C139558 +
                    (((C48237 + C48236) * C139301 * C30255 +
                      (C52264 + C52265) * C139301 * C139557) *
                         C139362 * C139398 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139362 * C139529) *
                        C139559 +
                    (((C47279 + C47278) * C139301 * C30255 +
                      (C51126 + C51127) * C139301 * C139557) *
                         C139362 * C139529 -
                     ((C47240 * C8590 + C52258 + C52258 + C139555 * C8913 +
                       C47239 * C4161 + C52259 + C52259 + C46915 * C4615) *
                          C139301 * C139557 +
                      (C50199 + C50198) * C139301 * C30255) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139362 * C139529 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139362 * C139398) *
              C139558 +
          (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
            (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
               C139301 * C139362 * C139398 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139362 * C139529) *
              C139559 +
          (((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
            (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
               C139301 * C139362 * C139529 -
           ((C30392 * C8676 + C139557 * C8993 + C30391 * C942 +
             C30255 * C1362) *
                C139555 +
            (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
             C30255 * C1056) *
                C47004 +
            (C33613 + C33612) * C46915 + (C33311 + C33310) * C47003) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[75] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139362 * C139529 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C139362 * C139398) *
                        C139558 +
                    (((C77360 + C77361 + C77362 + C77363) * C46915 +
                      (C77364 + C77365 + C77366 + C77367) * C139555) *
                         C139362 * C139398 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      (C78399 * C139557 + C78057 * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C139362 * C139529) *
                        C139559 +
                    ((((C63570 * C108 + C139301 * C114) * C30391 +
                       (C63570 * C276 + C139301 * C579) * C30255 +
                       (C63570 * C1760 + C139301 * C1768) * C30392 +
                       (C63570 * C1984 + C139301 * C2392) * C139557) *
                          C46915 +
                      (C79309 + C79310 + C79311 + C79315) * C139555) *
                         C139362 * C139529 -
                     (((C63570 * C8756 + C139301 * C9070) * C139557 +
                       (C63570 * C8590 + C139301 * C8593) * C30392 +
                       C66049 * C30255 + C65815 * C30391) *
                          C139555 +
                      (C79315 + C79311 + C79310 + C79309) * C46915) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139362 * C139529 -
           ((C47004 * C8758 + C139555 * C9149 + C47003 * C4393 +
             C46915 * C4943) *
                C139557 +
            (C47004 * C8592 + C139555 * C8678 + C47003 * C4159 +
             C46915 * C4275) *
                C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139362 * C139398) *
              C139558 +
          (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
            (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
               C139301 * C139362 * C139398 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139362 * C139529) *
              C139559 +
          (((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
            (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
               C139301 * C139362 * C139529 -
           ((C47004 * C8756 + C139555 * C9147 + C47003 * C4395 +
             C46915 * C4945) *
                C139557 +
            (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
             C46915 * C4277) *
                C30392 +
            (C50509 + C50508) * C30255 + (C49875 + C49874) * C30391) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[75] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139362 * C139529 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139362 * C139398) *
              C139558 +
          (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
               C139301 * C139362 * C139398 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139362 * C139529) *
              C139559 +
          (((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) *
               C139301 * C139362 * C139529 -
           ((C30856 * C8590 + C31856 + C31856 + C139557 * C9224 +
             C30855 * C832 + C31857 + C31857 + C30255 * C1648) *
                C139555 +
            (C33923 + C33922) * C46915) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
              C77704 * C139557) *
                 C46915 +
             (C76720 + C76721) * C139555) *
                C139530 -
            ((C80544 + C80545) * C139555 +
             (C77705 * C139557 + C77704 * C30255) * C46915) *
                C139426) *
               C139529 +
           (((C80545 + C80544) * C46915 +
             (C66988 * C30255 + C69094 * C139557) * C139555) *
                C139426 -
            ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
                C139530) *
               C139398) *
              C825 +
          ((((C77706 * C30255 + C77707 * C139557) * C46915 +
             (C80546 + C80547) * C139555) *
                C139426 -
            ((C76725 + C76724) * C139555 +
             (C77706 * C139557 +
              (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                 C46915) *
                C139530) *
               C139529 +
           (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
                C139530 -
            (((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C139557 +
              C66991 * C30255) *
                 C139555 +
             (C80547 + C80546) * C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                  C63570 +
              (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                  C139301) *
                 C30255 +
             ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                 C139557) *
                C139530 -
            (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                 C139557 +
             ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                 C30255) *
                C139426) *
               C139529 +
           ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                 C30255 +
             ((C47003 * C6325 + C46915 * C6411 + C47004 * C20984 +
               C139555 * C21100) *
                  C63570 +
              (C47003 * C6328 + C46915 * C6414 + C47004 * C20986 +
               C139555 * C21102) *
                  C139301) *
                 C139557) *
                C139426 -
            (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                 C139557 +
             ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                  C139301 +
              (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                  C63570) *
                 C30255) *
                C139530) *
               C139398) *
              C825 +
          (((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                 C30255 +
             ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                 C139557) *
                C139426 -
            (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                 C139557 +
             ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                 C30255) *
                C139530) *
               C139529 +
           ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                 C30255 +
             ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                 C139557) *
                C139530 -
            (((C47004 * C20985 + C139555 * C21101 + C47003 * C6327 +
               C46915 * C6413) *
                  C139301 +
              (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
               C46915 * C6410) *
                  C63570) *
                 C139557 +
             ((C51827 + C51826) * C139301 + (C51825 + C51824) * C63570) *
                 C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
               C139557 * C1986) *
                  C63570 +
              (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
               C139557 * C1994) *
                  C139301) *
                 C46915 +
             ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                 C139555) *
                C139530 -
            (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                 C139555 +
             ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
               C30255 * C1994) *
                  C139301 +
              (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
               C30255 * C1986) *
                  C63570) *
                 C46915) *
                C139426) *
               C139529 +
           ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                 C46915 +
             ((C30391 * C8592 + C30255 * C8758 + C30392 * C20984 +
               C139557 * C21202) *
                  C63570 +
              (C30391 * C8595 + C30255 * C8761 + C30392 * C20986 +
               C139557 * C21204) *
                  C139301) *
                 C139555) *
                C139426 -
            (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                 C139555 +
             ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                 C46915) *
                C139530) *
               C139398) *
              C825 +
          (((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                 C46915 +
             ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                 C139555) *
                C139426 -
            (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                 C139555 +
             ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                 C46915) *
                C139530) *
               C139529 +
           ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                 C46915 +
             ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                 C139555) *
                C139530 -
            (((C30392 * C20985 + C139557 * C21203 + C30391 * C8594 +
               C30255 * C8760) *
                  C139301 +
              (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
               C30255 * C8757) *
                  C63570) *
                 C139555 +
             ((C35297 + C35296) * C139301 + (C35295 + C35294) * C63570) *
                 C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63570 * C106 + C139301 * C112) * C47003 +
                        (C63570 * C187 + C139301 * C360) * C46915 +
                        C64376 * C47004 + C64377 * C139555) *
                           C30255 +
                       (C78063 + C78064 + C78031 + C78032) * C139557) *
                          C139530 -
                      ((C78033 + C78034 + C78065 + C78066) * C139557 +
                       (C78032 + C78031 + C78064 + C78063) * C30255) *
                          C139426) *
                         C139529 +
                     (((C80962 + C80963 + C80964 + C80965) * C30255 +
                       (C69342 * C47003 + C69343 * C46915 + C69344 * C47004 +
                        C69345 * C139555) *
                           C139557) *
                          C139426 -
                      ((C80965 + C80964 + C80963 + C80962) * C139557 +
                       (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                        C64376 * C47003) *
                           C30255) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C78067 + C78068 + C78043 + C78044) * C30255 +
                       (C78069 + C78070 + C78071 + C78072) * C139557) *
                          C139426 -
                      ((C78044 + C78043 + C78068 + C78067) * C139557 +
                       (C64383 * C139555 + C64382 * C47004 +
                        (C63570 * C188 + C139301 * C361) * C46915 +
                        (C63570 * C107 + C139301 * C113) * C47003) *
                           C30255) *
                          C139530) *
                         C139529 +
                     (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                        C64385 * C139555) *
                           C30255 +
                       (C80966 + C80967 + C80968 + C80969) * C139557) *
                          C139530 -
                      (((C63570 * C21099 + C139301 * C21313) * C139555 +
                        (C63570 * C20983 + C139301 * C20985) * C47004 +
                        C78062 * C46915 + C78061 * C47003) *
                           C139557 +
                       (C80969 + C80968 + C80967 + C80966) * C30255) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                        C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                           C139301 * C30255 +
                       (C78187 + C78188) * C139301 * C139557) *
                          C139530 -
                      ((C78189 + C78190) * C139301 * C139557 +
                       (C78188 + C78187) * C139301 * C30255) *
                          C139426) *
                         C139529 +
                     (((C81108 + C81109) * C139301 * C30255 +
                       (C47239 * C6325 + C54845 + C54845 + C46915 * C6648 +
                        C47240 * C20984 + C54844 + C54844 + C139555 * C21426) *
                           C139301 * C139557) *
                          C139426 -
                      ((C81109 + C81108) * C139301 * C139557 +
                       (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                        C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                           C139301 * C30255) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C49239 + C49238) * C139301 * C30255 +
                       (C49240 + C49241) * C139301 * C139557) *
                          C139426 -
                      ((C49238 + C49239) * C139301 * C139557 +
                       (C47277 + C47276) * C139301 * C30255) *
                          C139530) *
                         C139529 +
                     (((C48237 + C48236) * C139301 * C30255 +
                       (C52264 + C52265) * C139301 * C139557) *
                          C139530 -
                      ((C47240 * C20983 + C54842 + C54842 + C139555 * C21425 +
                        C47239 * C6324 + C54843 + C54843 + C46915 * C6647) *
                           C139301 * C139557 +
                       (C52265 + C52264) * C139301 * C30255) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C47003 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C46915 +
             (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
                C139301 * C139530 -
            ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
             (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C46915 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C47003) *
                C139301 * C139426) *
               C139529 +
           (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
             (C30391 * C8592 + C30255 * C8758 + C30392 * C20984 +
              C139557 * C21202) *
                 C47004 +
             (C30391 * C8678 + C30255 * C8995 + C30392 * C21100 +
              C139557 * C21530) *
                 C139555) *
                C139301 * C139426 -
            ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
             (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
             (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
                C139301 * C139426 -
            ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
             (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
                C139301 * C139530) *
               C139529 +
           (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
             (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
                C139301 * C139530 -
            ((C30392 * C21099 + C139557 * C21529 + C30391 * C8677 +
              C30255 * C8994) *
                 C139555 +
             (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
              C30255 * C8757) *
                 C47004 +
             (C35707 + C35706) * C46915 + (C35295 + C35294) * C47003) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[76] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63570 * C106 + C139301 * C112) * C30391 +
                        (C63570 * C274 + C139301 * C577) * C30255 +
                        C78053 * C30392 + C78397 * C139557) *
                           C46915 +
                       (C77352 + C77353 + C77354 + C77355) * C139555) *
                          C139530 -
                      ((C81376 + C81377 + C81378 + C81379) * C139555 +
                       (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                        C78053 * C30391) *
                           C46915) *
                          C139426) *
                         C139529 +
                     (((C81379 + C81378 + C81377 + C81376) * C46915 +
                       (C67315 * C30391 + C67634 * C30255 + C69344 * C30392 +
                        C69584 * C139557) *
                           C139555) *
                          C139426 -
                      ((C77356 + C77357 + C77358 + C77359) * C139555 +
                       (C77355 + C77354 + C77353 + C77352) * C46915) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
                        C78400 * C139557) *
                           C46915 +
                       (C81380 + C81381 + C81382 + C81383) * C139555) *
                          C139426 -
                      ((C77363 + C77362 + C77361 + C77360) * C139555 +
                       (C78399 * C139557 + C78057 * C30392 +
                        (C63570 * C275 + C139301 * C578) * C30255 +
                        (C63570 * C107 + C139301 * C113) * C30391) *
                           C46915) *
                          C139530) *
                         C139529 +
                     (((C77360 + C77361 + C77362 + C77363) * C46915 +
                       (C77364 + C77365 + C77366 + C77367) * C139555) *
                          C139530 -
                      (((C63570 * C21201 + C139301 * C21632) * C139557 +
                        (C63570 * C20983 + C139301 * C20985) * C30392 +
                        C67637 * C30255 + C67320 * C30391) *
                           C139555 +
                       (C81383 + C81382 + C81381 + C81380) * C46915) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C30391 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C30255 +
             (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
                C139301 * C139530 -
            ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
             (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
                C139301 * C139426) *
               C139529 +
           (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
             (C47003 * C6325 + C46915 * C6411 + C47004 * C20984 +
              C139555 * C21100) *
                 C30392 +
             (C47003 * C6491 + C46915 * C6882 + C47004 * C21202 +
              C139555 * C21739) *
                 C139557) *
                C139301 * C139426 -
            ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
             (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C30255 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C30391) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
             (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
                C139301 * C139426 -
            ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
             (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
                C139301 * C139530) *
               C139529 +
           (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
             (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
                C139301 * C139530 -
            ((C47004 * C21201 + C139555 * C21738 + C47003 * C6490 +
              C46915 * C6881) *
                 C139557 +
             (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
              C46915 * C6410) *
                 C30392 +
             (C52677 + C52676) * C30255 + (C51825 + C51824) * C30391) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[76] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
              C30859 + C30859 + C139557 * C2578) *
                 C46915 +
             (C77580 + C77581) * C139555) *
                C139301 * C139530 -
            ((C81658 + C81659) * C139555 +
             (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
              C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                 C46915) *
                C139301 * C139426) *
               C139529 +
           (((C81659 + C81658) * C46915 +
             (C30855 * C8592 + C41473 + C41473 + C30255 * C9226 +
              C30856 * C20984 + C41472 + C41472 + C139557 * C21839) *
                 C139555) *
                C139301 * C139426 -
            ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
                C139301 * C139426 -
            ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
                C139301 * C139530) *
               C139529 +
           (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
                C139301 * C139530 -
            ((C30856 * C20983 + C41470 + C41470 + C139557 * C21838 +
              C30855 * C8591 + C41471 + C41471 + C30255 * C9225) *
                 C139555 +
             (C36123 + C36122) * C46915) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139362 * C822 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139362 * C823 +
           ((C76723 + C76722) * C46915 +
            (C64106 * C30255 + C71373 * C139557) * C139555) *
               C139362 * C824) *
              C825 +
          (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
               C139362 * C823 -
           ((C76725 + C76724) * C139555 +
            ((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139362 * C822 -
           (((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139557 +
             C64109 * C30255) *
                C139555 +
            (C76727 + C76726) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139557) *
               C46915 +
           (C64104 * C30255 + C66989 * C139557) * C139555) *
              C139362 * C139346 * C96 -
          ((C66990 * C139557 + C64107 * C30255) * C139555 +
           ((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139557 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
               C46915) *
              C139362 * C139346 * C97 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
            (C63569 * C1760 + C66276 + C66276 + C139301 * C1776) * C139557) *
               C46915 +
           (C65575 * C30255 +
            (C63569 * C4161 + C66275 + C66275 + C139301 * C4169) * C139557) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C63569 * C4162 + C76092 + C76092 + C139301 * C4170) * C139557 +
            (C63569 * C833 + C63582 + C63582 + C139301 * C849) * C30255) *
               C139555 +
           ((C63569 * C1766 + C76093 + C76093 + C139301 * C1782) * C139557 +
            (C63569 * C109 + C63583 + C63583 + C139301 * C121) * C30255) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C1757 -
           ((C69093 * C139557 + C66989 * C30255) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C1758 +
           ((C77705 * C30255 +
             (C63569 * C10620 + C73397 + C73397 + C139301 * C10626) * C139557) *
                C46915 +
            (C69093 * C30255 +
             (C63569 * C26692 + C73396 + C73396 + C139301 * C26696) * C139557) *
                C139555) *
               C1759) *
              C139346 * C825 +
          (((C77706 * C30255 + C77707 * C139557) * C46915 +
            (C66990 * C30255 + C77708 * C139557) * C139555) *
               C1758 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C1757 -
           (((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C139557 +
             C77708 * C30255) *
                C139555 +
            ((C63569 * C10619 + C77693 + C77693 + C139301 * C10625) * C139557 +
             C77707 * C30255) *
                C46915) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
              C139555 * C4275) *
                 C63570 +
             (C47003 * C1770 + C46915 * C1880 + C47004 * C4163 +
              C139555 * C4279) *
                 C139301) *
                C139557) *
               C139362 * C822 -
           (((C47004 * C8595 + C139555 * C8681 + C47003 * C4163 +
              C46915 * C4279) *
                 C139301 +
             (C47004 * C8592 + C139555 * C8678 + C47003 * C4159 +
              C46915 * C4275) *
                 C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139362 * C823 +
           (((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C47003 * C838 + C46915 * C948 + C47004 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C30255 +
            ((C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
              C139555 * C24114) *
                 C63570 +
             (C47003 * C8595 + C46915 * C8681 + C47004 * C24000 +
              C139555 * C24116) *
                 C139301) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                C30255 +
            ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                C139557) *
               C139362 * C823 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139362 * C822 -
           (((C47004 * C23999 + C139555 * C24115 + C47003 * C8594 +
              C46915 * C8680) *
                 C139301 +
             (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
              C46915 * C8677) *
                 C63570) *
                C139557 +
            ((C47849 + C47848) * C139301 + (C47847 + C47846) * C63570) *
                C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C63570 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C139301) *
               C30255 +
           ((C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
             C139555 * C4275) *
                C63570 +
            (C47003 * C1770 + C46915 * C1880 + C47004 * C4163 +
             C139555 * C4279) *
                C139301) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
               C139557 +
           ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
               C30255) *
              C139362 * C139346 * C97 +
          (((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) * C30255 +
           ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C47004 * C4166 + C139555 * C4282 + C47003 * C1774 +
             C46915 * C1884) *
                C139301 +
            (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
             C46915 * C1876) *
                C63570) *
               C139557 +
           ((C47041 + C47040) * C139301 + (C47039 + C47038) * C63570) *
               C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C1757 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C1758 +
           (((C77830 + C77829) * C63570 + (C77828 + C77827) * C139301) *
                C30255 +
            ((C47003 * C10620 + C46915 * C10682 + C47004 * C26692 +
              C139555 * C26768) *
                 C63570 +
             (C47003 * C10623 + C46915 * C10685 + C47004 * C26694 +
              C139555 * C26770) *
                 C139301) *
                C139557) *
               C1759) *
              C139346 * C825 +
          ((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                C30255 +
            ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                C139557) *
               C1758 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C1757 -
           (((C47004 * C26693 + C139555 * C26769 + C47003 * C10622 +
              C46915 * C10684) *
                 C139301 +
             (C47004 * C26691 + C139555 * C26767 + C47003 * C10619 +
              C46915 * C10681) *
                 C63570) *
                C139557 +
            ((C48915 + C48914) * C139301 + (C48913 + C48912) * C63570) *
                C30255) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139362 * C822 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139362 * C823 +
           (((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) *
                C46915 +
            ((C30391 * C5803 + C30255 * C5921 + C30392 * C23998 +
              C139557 * C24216) *
                 C63570 +
             (C30391 * C5806 + C30255 * C5924 + C30392 * C24000 +
              C139557 * C24218) *
                 C139301) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                C46915 +
            ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                C139555) *
               C139362 * C823 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139362 * C822 -
           (((C30392 * C23999 + C139557 * C24217 + C30391 * C5805 +
              C30255 * C5923) *
                 C139301 +
             (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
              C30255 * C5920) *
                 C63570) *
                C139555 +
            ((C31221 + C31220) * C139301 + (C31219 + C31218) * C63570) *
                C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C63570 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C139301) *
               C46915 +
           ((C30391 * C829 + C30255 * C1053 + C30392 * C4159 +
             C139557 * C4393) *
                C63570 +
            (C30391 * C837 + C30255 * C1061 + C30392 * C4163 +
             C139557 * C4397) *
                C139301) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
               C139555 +
           ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
               C46915) *
              C139362 * C139346 * C97 +
          (((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) * C46915 +
           ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C30392 * C4166 + C139557 * C4400 + C30391 * C841 +
             C30255 * C1065) *
                C139301 +
            (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
             C30255 * C1057) *
                C63570) *
               C139555 +
           ((C30429 + C30428) * C139301 + (C30427 + C30426) * C63570) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C1757 -
           (((C30392 * C6328 + C139557 * C6494 + C30391 * C4163 +
              C30255 * C4397) *
                 C139301 +
             (C30392 * C6325 + C139557 * C6491 + C30391 * C4159 +
              C30255 * C4393) *
                 C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C1758 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C46915 +
            ((C30391 * C6325 + C30255 * C6491 + C30392 * C26692 +
              C139557 * C26838) *
                 C63570 +
             (C30391 * C6328 + C30255 * C6494 + C30392 * C26694 +
              C139557 * C26840) *
                 C139301) *
                C139555) *
               C1759) *
              C139346 * C825 +
          ((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                C46915 +
            ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                C139555) *
               C1758 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C1757 -
           (((C30392 * C26693 + C139557 * C26839 + C30391 * C6327 +
              C30255 * C6493) *
                 C139301 +
             (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
              C30255 * C6490) *
                 C63570) *
                C139555 +
            ((C32263 + C32262) * C139301 + (C32261 + C32260) * C63570) *
                C46915) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C47003 +
             (C63570 * C187 + C139301 * C360) * C46915 + C64376 * C47004 +
             C64377 * C139555) *
                C30255 +
            ((C63570 * C1762 + C139301 * C1770) * C47003 +
             (C63570 * C1872 + C139301 * C2100) * C46915 + C67317 * C47004 +
             C67316 * C139555) *
                C139557) *
               C139362 * C822 -
           ((C67314 * C139555 + C67315 * C47004 + C67316 * C46915 +
             C67317 * C47003) *
                C139557 +
            (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
             C64376 * C47003) *
                C30255) *
               C139362 * C823 +
           ((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
             C64380 * C139555) *
                C30255 +
            (C67315 * C47003 + C67314 * C46915 + C71615 * C47004 +
             C71616 * C139555) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
             C64385 * C139555) *
                C30255 +
            (C67318 * C47003 + C67319 * C46915 + C67320 * C47004 +
             C67321 * C139555) *
                C139557) *
               C139362 * C823 -
           ((C67319 * C139555 + C67318 * C47004 +
             (C63570 * C1871 + C139301 * C2099) * C46915 +
             (C63570 * C1761 + C139301 * C1769) * C47003) *
                C139557 +
            (C64383 * C139555 + C64382 * C47004 +
             (C63570 * C188 + C139301 * C361) * C46915 +
             (C63570 * C107 + C139301 * C113) * C47003) *
                C30255) *
               C139362 * C822 -
           (((C63570 * C24113 + C139301 * C24327) * C139555 +
             (C63570 * C23997 + C139301 * C23999) * C47004 + C67321 * C46915 +
             C67320 * C47003) *
                C139557 +
            (C64387 * C139555 + C64386 * C47004 + C64385 * C46915 +
             C64384 * C47003) *
                C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63570 * C106 + C139301 * C112) * C47003 +
                                (C63570 * C187 + C139301 * C360) * C46915 +
                                C64376 * C47004 + C64377 * C139555) *
                                   C30255 +
                               ((C63570 * C1762 + C139301 * C1770) * C47003 +
                                (C63570 * C1872 + C139301 * C2100) * C46915 +
                                C67317 * C47004 + C67316 * C139555) *
                                   C139557) *
                                  C139362 * C139346 * C96 -
                              ((C67319 * C139555 + C67318 * C47004 +
                                (C63570 * C1871 + C139301 * C2099) * C46915 +
                                (C63570 * C1761 + C139301 * C1769) * C47003) *
                                   C139557 +
                               (C64383 * C139555 + C64382 * C47004 +
                                (C63570 * C188 + C139301 * C361) * C46915 +
                                (C63570 * C107 + C139301 * C113) * C47003) *
                                   C30255) *
                                  C139362 * C139346 * C97 +
                              (((C63570 * C108 + C139301 * C114) * C47003 +
                                (C63570 * C189 + C139301 * C362) * C46915 +
                                C65813 * C47004 + C65814 * C139555) *
                                   C30255 +
                               ((C63570 * C1760 + C139301 * C1768) * C47003 +
                                (C63570 * C1870 + C139301 * C2098) * C46915 +
                                (C63570 * C4161 + C139301 * C4165) * C47004 +
                                (C63570 * C4277 + C139301 * C4513) * C139555) *
                                   C139557) *
                                  C139362 * C139346 * C98 -
                              (((C63570 * C4278 + C139301 * C4514) * C139555 +
                                (C63570 * C4162 + C139301 * C4166) * C47004 +
                                (C63570 * C1876 + C139301 * C2104) * C46915 +
                                (C63570 * C1766 + C139301 * C1774) * C47003) *
                                   C139557 +
                               ((C63570 * C943 + C139301 * C1171) * C139555 +
                                (C63570 * C833 + C139301 * C841) * C47004 +
                                (C63570 * C190 + C139301 * C363) * C46915 +
                                (C63570 * C109 + C139301 * C115) * C47003) *
                                   C30255) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C47003 +
             (C63570 * C187 + C139301 * C360) * C46915 + C64376 * C47004 +
             C64377 * C139555) *
                C30255 +
            (C78063 + C78064 + C78031 + C78032) * C139557) *
               C1757 -
           ((C78033 + C78034 + C78065 + C78066) * C139557 +
            (C78032 + C78031 + C78064 + C78063) * C30255) *
               C1758 +
           ((C78066 + C78065 + C78034 + C78033) * C30255 +
            ((C63570 * C10620 + C139301 * C10623) * C47003 +
             (C63570 * C10682 + C139301 * C10794) * C46915 +
             (C63570 * C26692 + C139301 * C26694) * C47004 +
             (C63570 * C26768 + C139301 * C26908) * C139555) *
                C139557) *
               C1759) *
              C139346 * C825 +
          (((C78067 + C78068 + C78043 + C78044) * C30255 +
            (C78069 + C78070 + C78071 + C78072) * C139557) *
               C1758 -
           ((C78044 + C78043 + C78068 + C78067) * C139557 +
            (C64383 * C139555 + C64382 * C47004 +
             (C63570 * C188 + C139301 * C361) * C46915 +
             (C63570 * C107 + C139301 * C113) * C47003) *
                C30255) *
               C1757 -
           (((C63570 * C26767 + C139301 * C26907) * C139555 +
             (C63570 * C26691 + C139301 * C26693) * C47004 +
             (C63570 * C10681 + C139301 * C10793) * C46915 +
             (C63570 * C10619 + C139301 * C10622) * C47003) *
                C139557 +
            (C78072 + C78071 + C78070 + C78069) * C30255) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[77] += (-std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C47239 * C1762 + C49217 + C49217 + C46915 * C2182 +
                       C47240 * C4159 + C49216 + C49216 + C139555 * C4613) *
                          C139301 * C139557) *
                         C139362 * C822 -
                     ((C47240 * C8592 + C52251 + C52251 + C139555 * C8915 +
                       C47239 * C4159 + C52250 + C52250 + C46915 * C4613) *
                          C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139362 * C823 +
                     ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C139301 * C30255 +
                      (C47239 * C8592 + C57817 + C57817 + C46915 * C8915 +
                       C47240 * C23998 + C57816 + C57816 + C139555 * C24440) *
                          C139301 * C139557) *
                         C139362 * C824) *
                        C825 +
                    (((C48237 + C48236) * C139301 * C30255 +
                      (C52264 + C52265) * C139301 * C139557) *
                         C139362 * C823 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139362 * C822 -
                     ((C47240 * C23997 + C57814 + C57814 + C139555 * C24439 +
                       C47239 * C8591 + C57815 + C57815 + C46915 * C8914) *
                          C139301 * C139557 +
                      (C48239 + C48238) * C139301 * C30255) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                      C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                         C139301 * C30255 +
                     (C47239 * C1762 + C49217 + C49217 + C46915 * C2182 +
                      C47240 * C4159 + C49216 + C49216 + C139555 * C4613) *
                         C139301 * C139557) *
                        C139362 * C139346 * C96 -
                    ((C49238 + C49239) * C139301 * C139557 +
                     (C47277 + C47276) * C139301 * C30255) *
                        C139362 * C139346 * C97 +
                    ((C47279 + C47278) * C139301 * C30255 +
                     (C51126 + C51127) * C139301 * C139557) *
                        C139362 * C139346 * C98 -
                    ((C47240 * C4162 + C51120 + C51120 + C139555 * C4616 +
                      C47239 * C1766 + C51121 + C51121 + C46915 * C2186) *
                         C139301 * C139557 +
                     (C47281 + C47280) * C139301 * C30255) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C1757 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C1758 +
                     ((C78190 + C78189) * C139301 * C30255 +
                      (C47239 * C10620 + C60317 + C60317 + C46915 * C10847 +
                       C47240 * C26692 + C60316 + C60316 + C139555 * C26976) *
                          C139301 * C139557) *
                         C1759) *
                        C139346 * C825 +
                    (((C49239 + C49238) * C139301 * C30255 +
                      (C49240 + C49241) * C139301 * C139557) *
                         C1758 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C1757 -
                     ((C47240 * C26691 + C60314 + C60314 + C139555 * C26975 +
                       C47239 * C10619 + C60315 + C60315 + C46915 * C10846) *
                          C139301 * C139557 +
                      (C49241 + C49240) * C139301 * C30255) *
                         C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139362 * C822 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139362 * C823 +
           ((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
            (C30391 * C5803 + C30255 * C5921 + C30392 * C23998 +
             C139557 * C24216) *
                C47004 +
            (C30391 * C5865 + C30255 * C6086 + C30392 * C24114 +
             C139557 * C24544) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
            (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
               C139301 * C139362 * C823 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139362 * C822 -
           ((C30392 * C24113 + C139557 * C24543 + C30391 * C5864 +
             C30255 * C6085) *
                C139555 +
            (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
             C30255 * C5920) *
                C47004 +
            (C31532 + C31531) * C46915 + (C31219 + C31218) * C47003) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C47003 +
           (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
               C46915 +
           (C30391 * C829 + C30255 * C1053 + C30392 * C4159 + C139557 * C4393) *
               C47004 +
           (C30391 * C939 + C30255 * C1359 + C30392 * C4275 + C139557 * C4729) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
           (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
              C139301 * C139362 * C139346 * C97 +
          ((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
           (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
              C139301 * C139362 * C139346 * C98 -
          ((C30392 * C4278 + C139557 * C4732 + C30391 * C943 + C30255 * C1363) *
               C139555 +
           (C30392 * C4162 + C139557 * C4396 + C30391 * C833 + C30255 * C1057) *
               C47004 +
           (C30645 + C30644) * C46915 + (C30427 + C30426) * C47003) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C1757 -
           ((C30392 * C6411 + C139557 * C6728 + C30391 * C4275 +
             C30255 * C4729) *
                C139555 +
            (C30392 * C6325 + C139557 * C6491 + C30391 * C4159 +
             C30255 * C4393) *
                C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C1758 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C47003 +
            (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
             C139557 * C10903) *
                C46915 +
            (C30391 * C6325 + C30255 * C6491 + C30392 * C26692 +
             C139557 * C26838) *
                C47004 +
            (C30391 * C6411 + C30255 * C6728 + C30392 * C26768 +
             C139557 * C27048) *
                C139555) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
            (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
               C139301 * C1758 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C1757 -
           ((C30392 * C26767 + C139557 * C27047 + C30391 * C6410 +
             C30255 * C6727) *
                C139555 +
            (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
             C30255 * C6490) *
                C47004 +
            (C32640 + C32639) * C46915 + (C32261 + C32260) * C47003) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[77] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C30391 +
             (C63570 * C274 + C139301 * C577) * C30255 +
             (C63570 * C1762 + C139301 * C1770) * C30392 +
             (C63570 * C1986 + C139301 * C2394) * C139557) *
                C46915 +
            (C77352 + C77353 + C77354 + C77355) * C139555) *
               C139362 * C822 -
           ((C77356 + C77357 + C77358 + C77359) * C139555 +
            (C77355 + C77354 + C77353 + C77352) * C46915) *
               C139362 * C823 +
           ((C77359 + C77358 + C77357 + C77356) * C46915 +
            (C64381 * C30391 + C64642 * C30255 + C71615 * C30392 +
             C71852 * C139557) *
                C139555) *
               C139362 * C824) *
              C825 +
          (((C77360 + C77361 + C77362 + C77363) * C46915 +
            (C77364 + C77365 + C77366 + C77367) * C139555) *
               C139362 * C823 -
           ((C77363 + C77362 + C77361 + C77360) * C139555 +
            ((C63570 * C1985 + C139301 * C2393) * C139557 +
             (C63570 * C1761 + C139301 * C1769) * C30392 +
             (C63570 * C275 + C139301 * C578) * C30255 +
             (C63570 * C107 + C139301 * C113) * C30391) *
                C46915) *
               C139362 * C822 -
           (((C63570 * C24215 + C139301 * C24646) * C139557 +
             (C63570 * C23997 + C139301 * C23999) * C30392 + C64645 * C30255 +
             C64386 * C30391) *
                C139555 +
            (C77367 + C77366 + C77365 + C77364) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63570 * C106 + C139301 * C112) * C30391 +
                                (C63570 * C274 + C139301 * C577) * C30255 +
                                (C63570 * C1762 + C139301 * C1770) * C30392 +
                                (C63570 * C1986 + C139301 * C2394) * C139557) *
                                   C46915 +
                               (C64376 * C30391 + C64640 * C30255 +
                                C67317 * C30392 + C67635 * C139557) *
                                   C139555) *
                                  C139362 * C139346 * C96 -
                              ((C67636 * C139557 + C67318 * C30392 +
                                C64643 * C30255 + C64382 * C30391) *
                                   C139555 +
                               ((C63570 * C1985 + C139301 * C2393) * C139557 +
                                (C63570 * C1761 + C139301 * C1769) * C30392 +
                                (C63570 * C275 + C139301 * C578) * C30255 +
                                (C63570 * C107 + C139301 * C113) * C30391) *
                                   C46915) *
                                  C139362 * C139346 * C97 +
                              (((C63570 * C108 + C139301 * C114) * C30391 +
                                (C63570 * C276 + C139301 * C579) * C30255 +
                                (C63570 * C1760 + C139301 * C1768) * C30392 +
                                (C63570 * C1984 + C139301 * C2392) * C139557) *
                                   C46915 +
                               (C65813 * C30391 + C66048 * C30255 +
                                (C63570 * C4161 + C139301 * C4165) * C30392 +
                                (C63570 * C4395 + C139301 * C4843) * C139557) *
                                   C139555) *
                                  C139362 * C139346 * C98 -
                              (((C63570 * C4396 + C139301 * C4844) * C139557 +
                                (C63570 * C4162 + C139301 * C4166) * C30392 +
                                (C63570 * C1057 + C139301 * C1465) * C30255 +
                                (C63570 * C833 + C139301 * C841) * C30391) *
                                   C139555 +
                               ((C63570 * C1990 + C139301 * C2398) * C139557 +
                                (C63570 * C1766 + C139301 * C1774) * C30392 +
                                (C63570 * C277 + C139301 * C580) * C30255 +
                                (C63570 * C109 + C139301 * C115) * C30391) *
                                   C46915) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C30391 +
             (C63570 * C274 + C139301 * C577) * C30255 + C78053 * C30392 +
             C78397 * C139557) *
                C46915 +
            (C77352 + C77353 + C77354 + C77355) * C139555) *
               C1757 -
           ((C69583 * C139557 + C69342 * C30392 + C67635 * C30255 +
             C67317 * C30391) *
                C139555 +
            (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
             C78053 * C30391) *
                C46915) *
               C1758 +
           ((C78056 * C30391 + C78398 * C30255 +
             (C63570 * C10620 + C139301 * C10623) * C30392 +
             (C63570 * C10738 + C139301 * C10956) * C139557) *
                C46915 +
            (C69342 * C30391 + C69583 * C30255 +
             (C63570 * C26692 + C139301 * C26694) * C30392 +
             (C63570 * C26838 + C139301 * C27116) * C139557) *
                C139555) *
               C1759) *
              C139346 * C825 +
          (((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
             C78400 * C139557) *
                C46915 +
            (C67318 * C30391 + C67636 * C30255 + C78061 * C30392 +
             C78401 * C139557) *
                C139555) *
               C1758 -
           ((C77363 + C77362 + C77361 + C77360) * C139555 +
            (C78399 * C139557 + C78057 * C30392 +
             (C63570 * C275 + C139301 * C578) * C30255 +
             (C63570 * C107 + C139301 * C113) * C30391) *
                C46915) *
               C1757 -
           (((C63570 * C26837 + C139301 * C27115) * C139557 +
             (C63570 * C26691 + C139301 * C26693) * C30392 + C78401 * C30255 +
             C78061 * C30391) *
                C139555 +
            ((C63570 * C10737 + C139301 * C10955) * C139557 +
             (C63570 * C10619 + C139301 * C10622) * C30392 + C78400 * C30255 +
             C78059 * C30391) *
                C46915) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
             C139555 * C4275) *
                C30392 +
            (C47003 * C1986 + C46915 * C2476 + C47004 * C4393 +
             C139555 * C4943) *
                C139557) *
               C139301 * C139362 * C822 -
           ((C47004 * C8758 + C139555 * C9149 + C47003 * C4393 +
             C46915 * C4943) *
                C139557 +
            (C47004 * C8592 + C139555 * C8678 + C47003 * C4159 +
             C46915 * C4275) *
                C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139362 * C823 +
           ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C30391 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C30255 +
            (C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
             C139555 * C24114) *
                C30392 +
            (C47003 * C8758 + C46915 * C9149 + C47004 * C24216 +
             C139555 * C24753) *
                C139557) *
               C139301 * C139362 * C824) *
              C825 +
          (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
            (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
               C139301 * C139362 * C823 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139362 * C822 -
           ((C47004 * C24215 + C139555 * C24752 + C47003 * C8757 +
             C46915 * C9148) *
                C139557 +
            (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
             C46915 * C8677) *
                C30392 +
            (C48577 + C48576) * C30255 + (C47847 + C47846) * C30391) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C30391 +
           (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
               C30255 +
           (C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
            C139555 * C4275) *
               C30392 +
           (C47003 * C1986 + C46915 * C2476 + C47004 * C4393 +
            C139555 * C4943) *
               C139557) *
              C139301 * C139362 * C139346 * C96 -
          ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
           (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
              C139301 * C139362 * C139346 * C97 +
          ((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
           (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
              C139301 * C139362 * C139346 * C98 -
          ((C47004 * C4396 + C139555 * C4946 + C47003 * C1990 +
            C46915 * C2480) *
               C139557 +
           (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
            C46915 * C1876) *
               C30392 +
           (C47509 + C47508) * C30255 + (C47039 + C47038) * C30391) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C1757 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C1758 +
           ((C77830 + C77829) * C30391 + (C78511 + C78510) * C30255 +
            (C47003 * C10620 + C46915 * C10682 + C47004 * C26692 +
             C139555 * C26768) *
                C30392 +
            (C47003 * C10738 + C46915 * C11009 + C47004 * C26838 +
             C139555 * C27184) *
                C139557) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
            (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
               C139301 * C1758 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C1757 -
           ((C47004 * C26837 + C139555 * C27183 + C47003 * C10737 +
             C46915 * C11008) *
                C139557 +
            (C47004 * C26691 + C139555 * C26767 + C47003 * C10619 +
             C46915 * C10681) *
                C30392 +
            (C49555 + C49554) * C30255 + (C48913 + C48912) * C30391) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[77] +=
        (-std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139362 * C822 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139362 * C823 +
           ((C77583 + C77582) * C46915 +
            (C30855 * C5803 + C37605 + C37605 + C30255 * C6245 +
             C30856 * C23998 + C37604 + C37604 + C139557 * C24853) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
               C139301 * C139362 * C823 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139362 * C822 -
           ((C30856 * C23997 + C37602 + C37602 + C139557 * C24852 +
             C30855 * C5802 + C37603 + C37603 + C30255 * C6244) *
                C139555 +
            (C31869 + C31868) * C46915) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
            C30859 + C30859 + C139557 * C2578) *
               C46915 +
           (C30855 * C829 + C31845 + C31845 + C30255 * C1645 + C30856 * C4159 +
            C31844 + C31844 + C139557 * C5055) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) * C139301 *
              C139362 * C139346 * C97 +
          ((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) * C139301 *
              C139362 * C139346 * C98 -
          ((C30856 * C4162 + C33916 + C33916 + C139557 * C5058 + C30855 * C833 +
            C33917 + C33917 + C30255 * C1649) *
               C139555 +
           (C30897 + C30896) * C46915) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C1757 -
           ((C30856 * C6325 + C36109 + C36109 + C139557 * C6959 +
             C30855 * C4159 + C36108 + C36108 + C30255 * C5055) *
                C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C1758 +
           ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
             C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                C46915 +
            (C30855 * C6325 + C38513 + C38513 + C30255 * C6959 +
             C30856 * C26692 + C38512 + C38512 + C139557 * C27252) *
                C139555) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
               C139301 * C1758 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C1757 -
           ((C30856 * C26691 + C38510 + C38510 + C139557 * C27251 +
             C30855 * C6324 + C38511 + C38511 + C30255 * C6958) *
                C139555 +
            (C33007 + C33006) * C46915) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139530 -
           ((C69093 * C139557 + C66989 * C30255) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139426) *
              C139346 * C139558 +
          (((C77706 * C30255 + C77707 * C139557) * C46915 +
            (C66990 * C30255 + C77708 * C139557) * C139555) *
               C139426 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139530) *
              C139346 * C139559 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
             C79616 * C139557) *
                C46915 +
            (C78708 + C78714) * C139555) *
               C139530 -
           (((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C139557 +
             C78713 * C30255) *
                C139555 +
            ((C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C139557 +
             C79616 * C30255) *
                C46915) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139530 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139426) *
              C139346 * C139558 +
          ((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                C30255 +
            ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                C139557) *
               C139426 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139530) *
              C139346 * C139559 +
          ((((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) *
                C30255 +
            ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
                C139557) *
               C139530 -
           (((C47004 * C6326 + C139555 * C6412 + C47003 * C1773 +
              C46915 * C1883) *
                 C139301 +
             (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
              C46915 * C1875) *
                 C63570) *
                C139557 +
            ((C50821 + C50820) * C139301 + (C50819 + C50818) * C63570) *
                C30255) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139530 -
           (((C30392 * C6328 + C139557 * C6494 + C30391 * C4163 +
              C30255 * C4397) *
                 C139301 +
             (C30392 * C6325 + C139557 * C6491 + C30391 * C4159 +
              C30255 * C4393) *
                 C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139426) *
              C139346 * C139558 +
          ((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                C46915 +
            ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                C139555) *
               C139426 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139530) *
              C139346 * C139559 +
          ((((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) *
                C46915 +
            ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
                C139555) *
               C139530 -
           (((C30392 * C6326 + C139557 * C6492 + C30391 * C4165 +
              C30255 * C4399) *
                 C139301 +
             (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
              C30255 * C4395) *
                 C63570) *
                C139555 +
            ((C34245 + C34244) * C139301 + (C34243 + C34242) * C63570) *
                C46915) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139530 -
                     ((C78033 + C78034 + C78065 + C78066) * C139557 +
                      (C78032 + C78031 + C78064 + C78063) * C30255) *
                         C139426) *
                        C139346 * C139558 +
                    (((C78067 + C78068 + C78043 + C78044) * C30255 +
                      (C78069 + C78070 + C78071 + C78072) * C139557) *
                         C139426 -
                     ((C78044 + C78043 + C78068 + C78067) * C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C139530) *
                        C139346 * C139559 +
                    ((((C63570 * C108 + C139301 * C114) * C47003 +
                       (C63570 * C189 + C139301 * C362) * C46915 +
                       C65813 * C47004 + C65814 * C139555) *
                          C30255 +
                      (C79919 + C79920 + C79915 + C79916) * C139557) *
                         C139530 -
                     (((C63570 * C6409 + C139301 * C6569) * C139555 +
                       (C63570 * C6323 + C139301 * C6326) * C47004 +
                       (C63570 * C1875 + C139301 * C2103) * C46915 +
                       (C63570 * C1765 + C139301 * C1773) * C47003) *
                          C139557 +
                      (C79916 + C79915 + C79920 + C79919) * C30255) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139530 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139426) *
                        C139346 * C139558 +
                    (((C49239 + C49238) * C139301 * C30255 +
                      (C49240 + C49241) * C139301 * C139557) *
                         C139426 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139530) *
                        C139346 * C139559 +
                    (((C47279 + C47278) * C139301 * C30255 +
                      (C51126 + C51127) * C139301 * C139557) *
                         C139530 -
                     ((C47240 * C6323 + C49228 + C49228 + C139555 * C6646 +
                       C47239 * C1765 + C49229 + C49229 + C46915 * C2185) *
                          C139301 * C139557 +
                      (C51127 + C51126) * C139301 * C30255) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139530 -
           ((C30392 * C6411 + C139557 * C6728 + C30391 * C4275 +
             C30255 * C4729) *
                C139555 +
            (C30392 * C6325 + C139557 * C6491 + C30391 * C4159 +
             C30255 * C4393) *
                C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139426) *
              C139346 * C139558 +
          (((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
            (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
               C139301 * C139426 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139530) *
              C139346 * C139559 +
          (((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
            (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
               C139301 * C139530 -
           ((C30392 * C6409 + C139557 * C6726 + C30391 * C4277 +
             C30255 * C4731) *
                C139555 +
            (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
             C30255 * C4395) *
                C47004 +
            (C34559 + C34558) * C46915 + (C34243 + C34242) * C47003) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[78] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139530 -
                     ((C69583 * C139557 + C69342 * C30392 + C67635 * C30255 +
                       C67317 * C30391) *
                          C139555 +
                      (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                       C78053 * C30391) *
                          C46915) *
                         C139426) *
                        C139346 * C139558 +
                    (((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
                       C78400 * C139557) *
                          C46915 +
                      (C67318 * C30391 + C67636 * C30255 + C78061 * C30392 +
                       C78401 * C139557) *
                          C139555) *
                         C139426 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      (C78399 * C139557 + C78057 * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C139530) *
                        C139346 * C139559 +
                    ((((C63570 * C108 + C139301 * C114) * C30391 +
                       (C63570 * C276 + C139301 * C579) * C30255 +
                       C79917 * C30392 + C80217 * C139557) *
                          C46915 +
                      (C79309 + C79310 + C79311 + C79315) * C139555) *
                         C139530 -
                     (((C63570 * C6489 + C139301 * C6803) * C139557 +
                       (C63570 * C6323 + C139301 * C6326) * C30392 +
                       C79314 * C30255 + C79013 * C30391) *
                          C139555 +
                      ((C63570 * C1989 + C139301 * C2397) * C139557 +
                       (C63570 * C1765 + C139301 * C1773) * C30392 +
                       C80217 * C30255 + C79917 * C30391) *
                          C46915) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139530 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139426) *
              C139346 * C139558 +
          (((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
            (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
               C139301 * C139426 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139530) *
              C139346 * C139559 +
          (((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
            (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
               C139301 * C139530 -
           ((C47004 * C6489 + C139555 * C6880 + C47003 * C1989 +
             C46915 * C2479) *
                C139557 +
            (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
             C46915 * C1875) *
                C30392 +
            (C51431 + C51430) * C30255 + (C50819 + C50818) * C30391) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[78] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139530 -
           ((C30856 * C6325 + C36109 + C36109 + C139557 * C6959 +
             C30855 * C4159 + C36108 + C36108 + C30255 * C5055) *
                C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139426) *
              C139346 * C139558 +
          (((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
               C139301 * C139426 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139530) *
              C139346 * C139559 +
          (((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) *
               C139301 * C139530 -
           ((C30856 * C6323 + C36116 + C36116 + C139557 * C6957 +
             C30855 * C4161 + C36117 + C36117 + C30255 * C5057) *
                C139555 +
            (C34875 + C34874) * C46915) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
            (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139557) *
               C46915 +
           (C64104 * C30255 + C66989 * C139557) * C139555) *
              C139362 * C139346 * C96 -
          ((C66990 * C139557 + C64107 * C30255) * C139555 +
           ((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139557 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
               C46915) *
              C139362 * C139346 * C97 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
            (C63569 * C1760 + C66276 + C66276 + C139301 * C1776) * C139557) *
               C46915 +
           (C65575 * C30255 +
            (C63569 * C4161 + C66275 + C66275 + C139301 * C4169) * C139557) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C63569 * C4162 + C76092 + C76092 + C139301 * C4170) * C139557 +
            (C63569 * C833 + C63582 + C63582 + C139301 * C849) * C30255) *
               C139555 +
           ((C63569 * C1766 + C76093 + C76093 + C139301 * C1782) * C139557 +
            (C63569 * C109 + C63583 + C63583 + C139301 * C121) * C30255) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             (C63569 * C1762 + C64878 + C64878 + C139301 * C1778) * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139362 * C822 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139362 * C823 +
           ((C76723 + C76722) * C46915 +
            (C64106 * C30255 + C71373 * C139557) * C139555) *
               C139362 * C824) *
              C825 +
          (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
               C139362 * C823 -
           ((C76725 + C76724) * C139555 +
            ((C63569 * C1761 + C64882 + C64882 + C139301 * C1777) * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139362 * C822 -
           (((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139557 +
             C64109 * C30255) *
                C139555 +
            (C76727 + C76726) * C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C63570 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C139301) *
               C30255 +
           ((C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
             C139555 * C4275) *
                C63570 +
            (C47003 * C1770 + C46915 * C1880 + C47004 * C4163 +
             C139555 * C4279) *
                C139301) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
               C139557 +
           ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
               C30255) *
              C139362 * C139346 * C97 +
          (((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) * C30255 +
           ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C47004 * C4166 + C139555 * C4282 + C47003 * C1774 +
             C46915 * C1884) *
                C139301 +
            (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
             C46915 * C1876) *
                C63570) *
               C139557 +
           ((C47041 + C47040) * C139301 + (C47039 + C47038) * C63570) *
               C30255) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
              C139555 * C4275) *
                 C63570 +
             (C47003 * C1770 + C46915 * C1880 + C47004 * C4163 +
              C139555 * C4279) *
                 C139301) *
                C139557) *
               C139362 * C822 -
           (((C47004 * C8595 + C139555 * C8681 + C47003 * C4163 +
              C46915 * C4279) *
                 C139301 +
             (C47004 * C8592 + C139555 * C8678 + C47003 * C4159 +
              C46915 * C4275) *
                 C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139362 * C823 +
           (((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C47003 * C838 + C46915 * C948 + C47004 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C30255 +
            ((C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
              C139555 * C24114) *
                 C63570 +
             (C47003 * C8595 + C46915 * C8681 + C47004 * C24000 +
              C139555 * C24116) *
                 C139301) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                C30255 +
            ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                C139557) *
               C139362 * C823 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139362 * C822 -
           (((C47004 * C23999 + C139555 * C24115 + C47003 * C8594 +
              C46915 * C8680) *
                 C139301 +
             (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
              C46915 * C8677) *
                 C63570) *
                C139557 +
            ((C47849 + C47848) * C139301 + (C47847 + C47846) * C63570) *
                C30255) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C63570 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C139301) *
               C46915 +
           ((C30391 * C829 + C30255 * C1053 + C30392 * C4159 +
             C139557 * C4393) *
                C63570 +
            (C30391 * C837 + C30255 * C1061 + C30392 * C4163 +
             C139557 * C4397) *
                C139301) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
               C139555 +
           ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
               C46915) *
              C139362 * C139346 * C97 +
          (((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) * C46915 +
           ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C30392 * C4166 + C139557 * C4400 + C30391 * C841 +
             C30255 * C1065) *
                C139301 +
            (C30392 * C4162 + C139557 * C4396 + C30391 * C833 +
             C30255 * C1057) *
                C63570) *
               C139555 +
           ((C30429 + C30428) * C139301 + (C30427 + C30426) * C63570) *
               C46915) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139362 * C822 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139362 * C823 +
           (((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) *
                C46915 +
            ((C30391 * C5803 + C30255 * C5921 + C30392 * C23998 +
              C139557 * C24216) *
                 C63570 +
             (C30391 * C5806 + C30255 * C5924 + C30392 * C24000 +
              C139557 * C24218) *
                 C139301) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                C46915 +
            ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                C139555) *
               C139362 * C823 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139362 * C822 -
           (((C30392 * C23999 + C139557 * C24217 + C30391 * C5805 +
              C30255 * C5923) *
                 C139301 +
             (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
              C30255 * C5920) *
                 C63570) *
                C139555 +
            ((C31221 + C31220) * C139301 + (C31219 + C31218) * C63570) *
                C46915) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[79] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C47003 +
                      (C63570 * C187 + C139301 * C360) * C46915 +
                      C64376 * C47004 + C64377 * C139555) *
                         C30255 +
                     ((C63570 * C1762 + C139301 * C1770) * C47003 +
                      (C63570 * C1872 + C139301 * C2100) * C46915 +
                      C67317 * C47004 + C67316 * C139555) *
                         C139557) *
                        C139362 * C139346 * C96 -
                    ((C67319 * C139555 + C67318 * C47004 +
                      (C63570 * C1871 + C139301 * C2099) * C46915 +
                      (C63570 * C1761 + C139301 * C1769) * C47003) *
                         C139557 +
                     (C64383 * C139555 + C64382 * C47004 +
                      (C63570 * C188 + C139301 * C361) * C46915 +
                      (C63570 * C107 + C139301 * C113) * C47003) *
                         C30255) *
                        C139362 * C139346 * C97 +
                    (((C63570 * C108 + C139301 * C114) * C47003 +
                      (C63570 * C189 + C139301 * C362) * C46915 +
                      C65813 * C47004 + C65814 * C139555) *
                         C30255 +
                     ((C63570 * C1760 + C139301 * C1768) * C47003 +
                      (C63570 * C1870 + C139301 * C2098) * C46915 +
                      (C63570 * C4161 + C139301 * C4165) * C47004 +
                      (C63570 * C4277 + C139301 * C4513) * C139555) *
                         C139557) *
                        C139362 * C139346 * C98 -
                    (((C63570 * C4278 + C139301 * C4514) * C139555 +
                      (C63570 * C4162 + C139301 * C4166) * C47004 +
                      (C63570 * C1876 + C139301 * C2104) * C46915 +
                      (C63570 * C1766 + C139301 * C1774) * C47003) *
                         C139557 +
                     ((C63570 * C943 + C139301 * C1171) * C139555 +
                      (C63570 * C833 + C139301 * C841) * C47004 +
                      (C63570 * C190 + C139301 * C363) * C46915 +
                      (C63570 * C109 + C139301 * C115) * C47003) *
                         C30255) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      ((C63570 * C1762 + C139301 * C1770) * C47003 +
                       (C63570 * C1872 + C139301 * C2100) * C46915 +
                       C67317 * C47004 + C67316 * C139555) *
                          C139557) *
                         C139362 * C822 -
                     ((C67314 * C139555 + C67315 * C47004 + C67316 * C46915 +
                       C67317 * C47003) *
                          C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C139362 * C823 +
                     ((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
                       C64380 * C139555) *
                          C30255 +
                      (C67315 * C47003 + C67314 * C46915 + C71615 * C47004 +
                       C71616 * C139555) *
                          C139557) *
                         C139362 * C824) *
                        C825 +
                    (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                       C64385 * C139555) *
                          C30255 +
                      (C67318 * C47003 + C67319 * C46915 + C67320 * C47004 +
                       C67321 * C139555) *
                          C139557) *
                         C139362 * C823 -
                     ((C67319 * C139555 + C67318 * C47004 +
                       (C63570 * C1871 + C139301 * C2099) * C46915 +
                       (C63570 * C1761 + C139301 * C1769) * C47003) *
                          C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C139362 * C822 -
                     (((C63570 * C24113 + C139301 * C24327) * C139555 +
                       (C63570 * C23997 + C139301 * C23999) * C47004 +
                       C67321 * C46915 + C67320 * C47003) *
                          C139557 +
                      (C64387 * C139555 + C64386 * C47004 + C64385 * C46915 +
                       C64384 * C47003) *
                          C30255) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[79] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                      C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                         C139301 * C30255 +
                     (C47239 * C1762 + C49217 + C49217 + C46915 * C2182 +
                      C47240 * C4159 + C49216 + C49216 + C139555 * C4613) *
                         C139301 * C139557) *
                        C139362 * C139346 * C96 -
                    ((C49238 + C49239) * C139301 * C139557 +
                     (C47277 + C47276) * C139301 * C30255) *
                        C139362 * C139346 * C97 +
                    ((C47279 + C47278) * C139301 * C30255 +
                     (C51126 + C51127) * C139301 * C139557) *
                        C139362 * C139346 * C98 -
                    ((C47240 * C4162 + C51120 + C51120 + C139555 * C4616 +
                      C47239 * C1766 + C51121 + C51121 + C46915 * C2186) *
                         C139301 * C139557 +
                     (C47281 + C47280) * C139301 * C30255) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C47239 * C1762 + C49217 + C49217 + C46915 * C2182 +
                       C47240 * C4159 + C49216 + C49216 + C139555 * C4613) *
                          C139301 * C139557) *
                         C139362 * C822 -
                     ((C47240 * C8592 + C52251 + C52251 + C139555 * C8915 +
                       C47239 * C4159 + C52250 + C52250 + C46915 * C4613) *
                          C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139362 * C823 +
                     ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C139301 * C30255 +
                      (C47239 * C8592 + C57817 + C57817 + C46915 * C8915 +
                       C47240 * C23998 + C57816 + C57816 + C139555 * C24440) *
                          C139301 * C139557) *
                         C139362 * C824) *
                        C825 +
                    (((C48237 + C48236) * C139301 * C30255 +
                      (C52264 + C52265) * C139301 * C139557) *
                         C139362 * C823 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139362 * C822 -
                     ((C47240 * C23997 + C57814 + C57814 + C139555 * C24439 +
                       C47239 * C8591 + C57815 + C57815 + C46915 * C8914) *
                          C139301 * C139557 +
                      (C48239 + C48238) * C139301 * C30255) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C47003 +
           (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
               C46915 +
           (C30391 * C829 + C30255 * C1053 + C30392 * C4159 + C139557 * C4393) *
               C47004 +
           (C30391 * C939 + C30255 * C1359 + C30392 * C4275 + C139557 * C4729) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
           (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
              C139301 * C139362 * C139346 * C97 +
          ((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
           (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
              C139301 * C139362 * C139346 * C98 -
          ((C30392 * C4278 + C139557 * C4732 + C30391 * C943 + C30255 * C1363) *
               C139555 +
           (C30392 * C4162 + C139557 * C4396 + C30391 * C833 + C30255 * C1057) *
               C47004 +
           (C30645 + C30644) * C46915 + (C30427 + C30426) * C47003) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139362 * C822 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139362 * C823 +
           ((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
            (C30391 * C5803 + C30255 * C5921 + C30392 * C23998 +
             C139557 * C24216) *
                C47004 +
            (C30391 * C5865 + C30255 * C6086 + C30392 * C24114 +
             C139557 * C24544) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
            (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
               C139301 * C139362 * C823 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139362 * C822 -
           ((C30392 * C24113 + C139557 * C24543 + C30391 * C5864 +
             C30255 * C6085) *
                C139555 +
            (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
             C30255 * C5920) *
                C47004 +
            (C31532 + C31531) * C46915 + (C31219 + C31218) * C47003) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[79] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C30391 +
                      (C63570 * C274 + C139301 * C577) * C30255 +
                      (C63570 * C1762 + C139301 * C1770) * C30392 +
                      (C63570 * C1986 + C139301 * C2394) * C139557) *
                         C46915 +
                     (C64376 * C30391 + C64640 * C30255 + C67317 * C30392 +
                      C67635 * C139557) *
                         C139555) *
                        C139362 * C139346 * C96 -
                    ((C67636 * C139557 + C67318 * C30392 + C64643 * C30255 +
                      C64382 * C30391) *
                         C139555 +
                     ((C63570 * C1985 + C139301 * C2393) * C139557 +
                      (C63570 * C1761 + C139301 * C1769) * C30392 +
                      (C63570 * C275 + C139301 * C578) * C30255 +
                      (C63570 * C107 + C139301 * C113) * C30391) *
                         C46915) *
                        C139362 * C139346 * C97 +
                    (((C63570 * C108 + C139301 * C114) * C30391 +
                      (C63570 * C276 + C139301 * C579) * C30255 +
                      (C63570 * C1760 + C139301 * C1768) * C30392 +
                      (C63570 * C1984 + C139301 * C2392) * C139557) *
                         C46915 +
                     (C65813 * C30391 + C66048 * C30255 +
                      (C63570 * C4161 + C139301 * C4165) * C30392 +
                      (C63570 * C4395 + C139301 * C4843) * C139557) *
                         C139555) *
                        C139362 * C139346 * C98 -
                    (((C63570 * C4396 + C139301 * C4844) * C139557 +
                      (C63570 * C4162 + C139301 * C4166) * C30392 +
                      (C63570 * C1057 + C139301 * C1465) * C30255 +
                      (C63570 * C833 + C139301 * C841) * C30391) *
                         C139555 +
                     ((C63570 * C1990 + C139301 * C2398) * C139557 +
                      (C63570 * C1766 + C139301 * C1774) * C30392 +
                      (C63570 * C277 + C139301 * C580) * C30255 +
                      (C63570 * C109 + C139301 * C115) * C30391) *
                         C46915) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       (C63570 * C1762 + C139301 * C1770) * C30392 +
                       (C63570 * C1986 + C139301 * C2394) * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139362 * C822 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C139362 * C823 +
                     ((C77359 + C77358 + C77357 + C77356) * C46915 +
                      (C64381 * C30391 + C64642 * C30255 + C71615 * C30392 +
                       C71852 * C139557) *
                          C139555) *
                         C139362 * C824) *
                        C825 +
                    (((C77360 + C77361 + C77362 + C77363) * C46915 +
                      (C77364 + C77365 + C77366 + C77367) * C139555) *
                         C139362 * C823 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      ((C63570 * C1985 + C139301 * C2393) * C139557 +
                       (C63570 * C1761 + C139301 * C1769) * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C139362 * C822 -
                     (((C63570 * C24215 + C139301 * C24646) * C139557 +
                       (C63570 * C23997 + C139301 * C23999) * C30392 +
                       C64645 * C30255 + C64386 * C30391) *
                          C139555 +
                      (C77367 + C77366 + C77365 + C77364) * C46915) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C30391 +
           (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
               C30255 +
           (C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
            C139555 * C4275) *
               C30392 +
           (C47003 * C1986 + C46915 * C2476 + C47004 * C4393 +
            C139555 * C4943) *
               C139557) *
              C139301 * C139362 * C139346 * C96 -
          ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
           (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
              C139301 * C139362 * C139346 * C97 +
          ((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
           (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
              C139301 * C139362 * C139346 * C98 -
          ((C47004 * C4396 + C139555 * C4946 + C47003 * C1990 +
            C46915 * C2480) *
               C139557 +
           (C47004 * C4162 + C139555 * C4278 + C47003 * C1766 +
            C46915 * C1876) *
               C30392 +
           (C47509 + C47508) * C30255 + (C47039 + C47038) * C30391) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C47003 * C1762 + C46915 * C1872 + C47004 * C4159 +
             C139555 * C4275) *
                C30392 +
            (C47003 * C1986 + C46915 * C2476 + C47004 * C4393 +
             C139555 * C4943) *
                C139557) *
               C139301 * C139362 * C822 -
           ((C47004 * C8758 + C139555 * C9149 + C47003 * C4393 +
             C46915 * C4943) *
                C139557 +
            (C47004 * C8592 + C139555 * C8678 + C47003 * C4159 +
             C46915 * C4275) *
                C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139362 * C823 +
           ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C30391 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C30255 +
            (C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
             C139555 * C24114) *
                C30392 +
            (C47003 * C8758 + C46915 * C9149 + C47004 * C24216 +
             C139555 * C24753) *
                C139557) *
               C139301 * C139362 * C824) *
              C825 +
          (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
            (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
               C139301 * C139362 * C823 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139362 * C822 -
           ((C47004 * C24215 + C139555 * C24752 + C47003 * C8757 +
             C46915 * C9148) *
                C139557 +
            (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
             C46915 * C8677) *
                C30392 +
            (C48577 + C48576) * C30255 + (C47847 + C47846) * C30391) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[79] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
            C30859 + C30859 + C139557 * C2578) *
               C46915 +
           (C30855 * C829 + C31845 + C31845 + C30255 * C1645 + C30856 * C4159 +
            C31844 + C31844 + C139557 * C5055) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) * C139301 *
              C139362 * C139346 * C97 +
          ((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) * C139301 *
              C139362 * C139346 * C98 -
          ((C30856 * C4162 + C33916 + C33916 + C139557 * C5058 + C30855 * C833 +
            C33917 + C33917 + C30255 * C1649) *
               C139555 +
           (C30897 + C30896) * C46915) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139362 * C822 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139362 * C823 +
           ((C77583 + C77582) * C46915 +
            (C30855 * C5803 + C37605 + C37605 + C30255 * C6245 +
             C30856 * C23998 + C37604 + C37604 + C139557 * C24853) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
               C139301 * C139362 * C823 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139362 * C822 -
           ((C30856 * C23997 + C37602 + C37602 + C139557 * C24852 +
             C30855 * C5802 + C37603 + C37603 + C30255 * C6244) *
                C139555 +
            (C31869 + C31868) * C46915) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139362 * C139560 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139362 * C139561 +
           ((C76723 + C76722) * C46915 + (C82608 + C82609) * C139555) *
               C139362 * C7039) *
              C139521 +
          (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
               C139362 * C139561 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139362 * C139560 -
           (((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139557 +
             C64109 * C30255) *
                C139555 +
            (C76727 + C76726) * C46915) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139362 * C139560 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139362 * C139561 +
           (((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C47003 * C838 + C46915 * C948 + C47004 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C30255 +
            ((C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
              C139555 * C24114) *
                 C63570 +
             (C47003 * C8595 + C46915 * C8681 + C47004 * C24000 +
              C139555 * C24116) *
                 C139301) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                C30255 +
            ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                C139557) *
               C139362 * C139561 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139362 * C139560 -
           (((C47004 * C23999 + C139555 * C24115 + C47003 * C8594 +
              C46915 * C8680) *
                 C139301 +
             (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
              C46915 * C8677) *
                 C63570) *
                C139557 +
            ((C47849 + C47848) * C139301 + (C47847 + C47846) * C63570) *
                C30255) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139362 * C139560 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139362 * C139561 +
           (((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) *
                C46915 +
            ((C82750 + C82751) * C63570 + (C82752 + C82753) * C139301) *
                C139555) *
               C139362 * C7039) *
              C139521 +
          ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                C46915 +
            ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                C139555) *
               C139362 * C139561 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139362 * C139560 -
           (((C30392 * C23999 + C139557 * C24217 + C30391 * C5805 +
              C30255 * C5923) *
                 C139301 +
             (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
              C30255 * C5920) *
                 C63570) *
                C139555 +
            ((C31221 + C31220) * C139301 + (C31219 + C31218) * C63570) *
                C46915) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139362 * C139560 -
                     ((C80965 + C80964 + C80963 + C80962) * C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C139362 * C139561 +
                     ((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
                       C64380 * C139555) *
                          C30255 +
                      (C67315 * C47003 + C67314 * C46915 + C71615 * C47004 +
                       C71616 * C139555) *
                          C139557) *
                         C139362 * C7039) *
                        C139521 +
                    (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                       C64385 * C139555) *
                          C30255 +
                      (C80966 + C80967 + C80968 + C80969) * C139557) *
                         C139362 * C139561 -
                     ((C78044 + C78043 + C78068 + C78067) * C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C139362 * C139560 -
                     (((C63570 * C24113 + C139301 * C24327) * C139555 +
                       (C63570 * C23997 + C139301 * C23999) * C47004 +
                       C67321 * C46915 + C67320 * C47003) *
                          C139557 +
                      (C64387 * C139555 + C64386 * C47004 + C64385 * C46915 +
                       C64384 * C47003) *
                          C30255) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139362 * C139560 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139362 * C139561 +
                     ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C139301 * C30255 +
                      (C47239 * C8592 + C57817 + C57817 + C46915 * C8915 +
                       C47240 * C23998 + C57816 + C57816 + C139555 * C24440) *
                          C139301 * C139557) *
                         C139362 * C7039) *
                        C139521 +
                    (((C48237 + C48236) * C139301 * C30255 +
                      (C52264 + C52265) * C139301 * C139557) *
                         C139362 * C139561 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139362 * C139560 -
                     ((C47240 * C23997 + C57814 + C57814 + C139555 * C24439 +
                       C47239 * C8591 + C57815 + C57815 + C46915 * C8914) *
                          C139301 * C139557 +
                      (C48239 + C48238) * C139301 * C30255) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139362 * C139560 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139362 * C139561 +
           ((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
            (C82750 + C82751) * C47004 + (C82958 + C82959) * C139555) *
               C139301 * C139362 * C7039) *
              C139521 +
          (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
            (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
               C139301 * C139362 * C139561 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139362 * C139560 -
           ((C30392 * C24113 + C139557 * C24543 + C30391 * C5864 +
             C30255 * C6085) *
                C139555 +
            (C30392 * C23997 + C139557 * C24215 + C30391 * C5802 +
             C30255 * C5920) *
                C47004 +
            (C31532 + C31531) * C46915 + (C31219 + C31218) * C47003) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[80] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139362 * C139560 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C139362 * C139561 +
                     ((C77359 + C77358 + C77357 + C77356) * C46915 +
                      (C83026 + C83027 + C83028 + C83029) * C139555) *
                         C139362 * C7039) *
                        C139521 +
                    (((C77360 + C77361 + C77362 + C77363) * C46915 +
                      (C77364 + C77365 + C77366 + C77367) * C139555) *
                         C139362 * C139561 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      (C78399 * C139557 + C78057 * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C139362 * C139560 -
                     (((C63570 * C24215 + C139301 * C24646) * C139557 +
                       (C63570 * C23997 + C139301 * C23999) * C30392 +
                       C64645 * C30255 + C64386 * C30391) *
                          C139555 +
                      (C77367 + C77366 + C77365 + C77364) * C46915) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139362 * C139560 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139362 * C139561 +
           ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C30391 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C30255 +
            (C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
             C139555 * C24114) *
                C30392 +
            (C47003 * C8758 + C46915 * C9149 + C47004 * C24216 +
             C139555 * C24753) *
                C139557) *
               C139301 * C139362 * C7039) *
              C139521 +
          (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
            (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
               C139301 * C139362 * C139561 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139362 * C139560 -
           ((C47004 * C24215 + C139555 * C24752 + C47003 * C8757 +
             C46915 * C9148) *
                C139557 +
            (C47004 * C23997 + C139555 * C24113 + C47003 * C8591 +
             C46915 * C8677) *
                C30392 +
            (C48577 + C48576) * C30255 + (C47847 + C47846) * C30391) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[80] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139362 * C139560 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139362 * C139561 +
           ((C77583 + C77582) * C46915 + (C83172 + C83173) * C139555) *
               C139301 * C139362 * C7039) *
              C139521 +
          (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
               C139301 * C139362 * C139561 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139362 * C139560 -
           ((C30856 * C23997 + C37602 + C37602 + C139557 * C24852 +
             C30855 * C5802 + C37603 + C37603 + C30255 * C6244) *
                C139555 +
            (C31869 + C31868) * C46915) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139530 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139426) *
              C139560 +
          (((C80545 + C80544) * C46915 + (C86290 + C86291) * C139555) *
               C139426 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139530) *
              C139561 +
          (((C76723 + C76722) * C46915 + (C82608 + C82609) * C139555) *
               C139530 -
           (((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139557 +
             C71373 * C30255) *
                C139555 +
            (C86291 + C86290) * C46915) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139530 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139426) *
              C139560 +
          ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                C30255 +
            ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                C139557) *
               C139426 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139530) *
              C139561 +
          ((((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C47003 * C838 + C46915 * C948 + C47004 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C30255 +
            ((C86398 + C86399) * C63570 + (C86400 + C86401) * C139301) *
                C139557) *
               C139530 -
           (((C47004 * C69081 + C139555 * C69171 + C47003 * C20986 +
              C46915 * C21102) *
                 C139301 +
             (C47004 * C69080 + C139555 * C69170 + C47003 * C20984 +
              C46915 * C21100) *
                 C63570) *
                C139557 +
            ((C86401 + C86400) * C139301 + (C86399 + C86398) * C63570) *
                C30255) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139530 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139426) *
              C139560 +
          ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                C46915 +
            ((C86508 + C86509) * C63570 + (C86510 + C86511) * C139301) *
                C139555) *
               C139426 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139530) *
              C139561 +
          ((((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) *
                C46915 +
            ((C82750 + C82751) * C63570 + (C82752 + C82753) * C139301) *
                C139555) *
               C139530 -
           (((C30392 * C69081 + C139557 * C69247 + C30391 * C24000 +
              C30255 * C24218) *
                 C139301 +
             (C30392 * C69080 + C139557 * C69246 + C30391 * C23998 +
              C30255 * C24216) *
                 C63570) *
                C139555 +
            ((C86511 + C86510) * C139301 + (C86509 + C86508) * C63570) *
                C46915) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139530 -
                     ((C78033 + C78034 + C78065 + C78066) * C139557 +
                      (C78032 + C78031 + C78064 + C78063) * C30255) *
                         C139426) *
                        C139560 +
                    (((C80962 + C80963 + C80964 + C80965) * C30255 +
                      (C83601 + C83602 + C83603 + C83604) * C139557) *
                         C139426 -
                     ((C80965 + C80964 + C80963 + C80962) * C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C139530) *
                        C139561 +
                    (((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
                       C64380 * C139555) *
                          C30255 +
                      (C86610 + C86611 + C86612 + C86613) * C139557) *
                         C139530 -
                     (((C63570 * C69170 + C139301 * C69332) * C139555 +
                       (C63570 * C69080 + C139301 * C69081) * C47004 +
                       C69345 * C46915 + C69344 * C47003) *
                          C139557 +
                      (C86613 + C86612 + C86611 + C86610) * C30255) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139530 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139426) *
                        C139560 +
                    (((C81108 + C81109) * C139301 * C30255 +
                      (C83715 + C83716) * C139301 * C139557) *
                         C139426 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139530) *
                        C139561 +
                    (((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C139301 * C30255 +
                      (C86722 + C86723) * C139301 * C139557) *
                         C139530 -
                     ((C47240 * C69080 + C86716 + C86716 + C139555 * C69419 +
                       C47239 * C20984 + C86717 + C86717 + C46915 * C21426) *
                          C139301 * C139557 +
                      (C86723 + C86722) * C139301 * C30255) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139530 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139426) *
              C139560 +
          (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
            (C86508 + C86509) * C47004 + (C86826 + C86827) * C139555) *
               C139301 * C139426 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139530) *
              C139561 +
          (((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
            (C82750 + C82751) * C47004 + (C82958 + C82959) * C139555) *
               C139301 * C139530 -
           ((C30392 * C69170 + C139557 * C69497 + C30391 * C24114 +
             C30255 * C24544) *
                C139555 +
            (C30392 * C69080 + C139557 * C69246 + C30391 * C23998 +
             C30255 * C24216) *
                C47004 +
            (C86827 + C86826) * C46915 + (C86509 + C86508) * C47003) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[81] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139530 -
                     ((C81376 + C81377 + C81378 + C81379) * C139555 +
                      (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                       C78053 * C30391) *
                          C46915) *
                         C139426) *
                        C139560 +
                    (((C81379 + C81378 + C81377 + C81376) * C46915 +
                      (C86926 + C86927 + C86928 + C86929) * C139555) *
                         C139426 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C139530) *
                        C139561 +
                    (((C77359 + C77358 + C77357 + C77356) * C46915 +
                      (C83026 + C83027 + C83028 + C83029) * C139555) *
                         C139530 -
                     (((C63570 * C69246 + C139301 * C69575) * C139557 +
                       (C63570 * C69080 + C139301 * C69081) * C30392 +
                       C71852 * C30255 + C71615 * C30391) *
                          C139555 +
                      (C86929 + C86928 + C86927 + C86926) * C46915) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezy[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139530 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139426) *
              C139560 +
          (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
            (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
               C139301 * C139426 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139530) *
              C139561 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C30391 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C30255 +
            (C86398 + C86399) * C30392 + (C87032 + C87033) * C139557) *
               C139301 * C139530 -
           ((C47004 * C69246 + C139555 * C69660 + C47003 * C21202 +
             C46915 * C21739) *
                C139557 +
            (C47004 * C69080 + C139555 * C69170 + C47003 * C20984 +
             C46915 * C21100) *
                C30392 +
            (C87033 + C87032) * C30255 + (C86399 + C86398) * C30391) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[81] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139530 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139426) *
              C139560 +
          (((C81659 + C81658) * C46915 + (C87142 + C87143) * C139555) *
               C139301 * C139426 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139530) *
              C139561 +
          (((C77583 + C77582) * C46915 + (C83172 + C83173) * C139555) *
               C139301 * C139530 -
           ((C30856 * C69080 + C87136 + C87136 + C139557 * C69735 +
             C30855 * C23998 + C87137 + C87137 + C30255 * C24853) *
                C139555 +
            (C87143 + C87142) * C46915) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
            C77704 * C139557) *
               C46915 +
           (C76720 + C76721) * C139555) *
              C139362 * C5796 -
          ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) * C139362 *
              C5797 +
          ((C76723 + C76722) * C46915 + (C82608 + C82609) * C139555) * C139362 *
              C5798 -
          (((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139557 +
            C68562 * C30255) *
               C139555 +
           (C82609 + C82608) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139362 * C5149 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139362 * C139398) *
              C5151 +
          (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
               C139362 * C139398 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
             C79616 * C139557) *
                C46915 +
            (C78708 + C78714) * C139555) *
               C139362 * C5149 -
           (((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139557 +
             C65576 * C30255) *
                C139555 +
            (C78714 + C78708) * C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C1757 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C1758 +
           ((C77705 * C30255 +
             (C63569 * C10620 + C73397 + C73397 + C139301 * C10626) * C139557) *
                C46915 +
            (C83272 + C83278) * C139555) *
               C1759) *
              C5149 +
          (((C80545 + C80544) * C46915 +
            (C66988 * C30255 + C69094 * C139557) * C139555) *
               C1758 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) * C1757 -
           (((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C139557 +
             C69094 * C30255) *
                C139555 +
            (C83278 + C83272) * C46915) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C63570 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C139301) *
               C30255 +
           ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
               C139557) *
              C139362 * C5796 -
          (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
               C139557 +
           ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C139301 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C63570) *
               C30255) *
              C139362 * C5797 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C63570 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C139301) *
               C30255 +
           ((C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
             C139555 * C24114) *
                C63570 +
            (C47003 * C8595 + C46915 * C8681 + C47004 * C24000 +
             C139555 * C24116) *
                C139301) *
               C139557) *
              C139362 * C5798 -
          (((C47004 * C71365 + C139555 * C71449 + C47003 * C24000 +
             C46915 * C24116) *
                C139301 +
            (C47004 * C71364 + C139555 * C71448 + C47003 * C23998 +
             C46915 * C24114) *
                C63570) *
               C139557 +
           ((C47004 * C20280 + C139555 * C20364 + C47003 * C5806 +
             C46915 * C5868) *
                C139301 +
            (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
             C46915 * C5865) *
                C63570) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139362 * C139398) *
              C5151 +
          ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                C30255 +
            ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                C139557) *
               C139362 * C139398 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139362 * C5149) *
              C5152 +
          ((((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) *
                C30255 +
            ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C47004 * C8593 + C139555 * C8679 + C47003 * C4165 +
              C46915 * C4281) *
                 C139301 +
             (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
              C46915 * C4277) *
                 C63570) *
                C139557 +
            ((C49877 + C49876) * C139301 + (C49875 + C49874) * C63570) *
                C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C1757 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C1758 +
           (((C77830 + C77829) * C63570 + (C77828 + C77827) * C139301) *
                C30255 +
            ((C47003 * C10620 + C46915 * C10682 + C47004 * C26692 +
              C139555 * C26768) *
                 C63570 +
             (C47003 * C10623 + C46915 * C10685 + C47004 * C26694 +
              C139555 * C26770) *
                 C139301) *
                C139557) *
               C1759) *
              C5149 +
          ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                C30255 +
            ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                C139557) *
               C1758 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C1757 -
           (((C47004 * C73392 + C139555 * C73448 + C47003 * C26694 +
              C46915 * C26770) *
                 C139301 +
             (C47004 * C73391 + C139555 * C73447 + C47003 * C26692 +
              C46915 * C26768) *
                 C63570) *
                C139557 +
            ((C83388 + C83387) * C139301 + (C83386 + C83385) * C63570) *
                C30255) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C63570 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C139301) *
               C46915 +
           ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
               C139555) *
              C139362 * C5796 -
          (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
               C139555 +
           ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
               C46915) *
              C139362 * C5797 +
          (((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) * C46915 +
           ((C82750 + C82751) * C63570 + (C82752 + C82753) * C139301) *
               C139555) *
              C139362 * C5798 -
          (((C30392 * C71365 + C139557 * C71525 + C30391 * C20280 +
             C30255 * C20434) *
                C139301 +
            (C30392 * C71364 + C139557 * C71524 + C30391 * C20278 +
             C30255 * C20432) *
                C63570) *
               C139555 +
           ((C82753 + C82752) * C139301 + (C82751 + C82750) * C63570) *
               C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139362 * C139398) *
              C5151 +
          ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                C46915 +
            ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                C139555) *
               C139362 * C139398 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          ((((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) *
                C46915 +
            ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C30392 * C8593 + C139557 * C8759 + C30391 * C840 +
              C30255 * C1064) *
                 C139301 +
             (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
              C30255 * C1056) *
                 C63570) *
                C139555 +
            ((C33313 + C33312) * C139301 + (C33311 + C33310) * C63570) *
                C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C1757 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C1758 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C46915 +
            ((C83495 + C83496) * C63570 + (C83497 + C83498) * C139301) *
                C139555) *
               C1759) *
              C5149 +
          ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                C46915 +
            ((C30391 * C8592 + C30255 * C8758 + C30392 * C20984 +
              C139557 * C21202) *
                 C63570 +
             (C30391 * C8595 + C30255 * C8761 + C30392 * C20986 +
              C139557 * C21204) *
                 C139301) *
                C139555) *
               C1758 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C1757 -
           (((C30392 * C73392 + C139557 * C73500 + C30391 * C20986 +
              C30255 * C21204) *
                 C139301 +
             (C30392 * C73391 + C139557 * C73499 + C30391 * C20984 +
              C30255 * C21202) *
                 C63570) *
                C139555 +
            ((C83498 + C83497) * C139301 + (C83496 + C83495) * C63570) *
                C46915) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C47003 +
            (C63570 * C187 + C139301 * C360) * C46915 + C64376 * C47004 +
            C64377 * C139555) *
               C30255 +
           (C78063 + C78064 + C78031 + C78032) * C139557) *
              C139362 * C5796 -
          ((C80965 + C80964 + C80963 + C80962) * C139557 +
           (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
            C64376 * C47003) *
               C30255) *
              C139362 * C5797 +
          ((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
            C64380 * C139555) *
               C30255 +
           (C67315 * C47003 + C67314 * C46915 + C71615 * C47004 +
            C71616 * C139555) *
               C139557) *
              C139362 * C5798 -
          (((C63570 * C71448 + C139301 * C71609) * C139555 +
            (C63570 * C71364 + C139301 * C71365) * C47004 + C71616 * C46915 +
            C71615 * C47003) *
               C139557 +
           (C68733 * C139555 + C68732 * C47004 + C64380 * C46915 +
            C64381 * C47003) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63570 * C106 + C139301 * C112) * C47003 +
                                 (C63570 * C187 + C139301 * C360) * C46915 +
                                 C64376 * C47004 + C64377 * C139555) *
                                    C30255 +
                                (C78063 + C78064 + C78031 + C78032) * C139557) *
                                   C139362 * C5149 -
                               ((C80965 + C80964 + C80963 + C80962) * C139557 +
                                (C64379 * C139555 + C64378 * C47004 +
                                 C64377 * C46915 + C64376 * C47003) *
                                    C30255) *
                                   C139362 * C139398) *
                                  C5151 +
                              (((C64382 * C47003 + C64383 * C46915 +
                                 C64384 * C47004 + C64385 * C139555) *
                                    C30255 +
                                (C80966 + C80967 + C80968 + C80969) * C139557) *
                                   C139362 * C139398 -
                               ((C78044 + C78043 + C78068 + C78067) * C139557 +
                                (C64383 * C139555 + C64382 * C47004 +
                                 (C63570 * C188 + C139301 * C361) * C46915 +
                                 (C63570 * C107 + C139301 * C113) * C47003) *
                                    C30255) *
                                   C139362 * C5149) *
                                  C5152 +
                              ((((C63570 * C108 + C139301 * C114) * C47003 +
                                 (C63570 * C189 + C139301 * C362) * C46915 +
                                 C65813 * C47004 + C65814 * C139555) *
                                    C30255 +
                                (C79919 + C79920 + C79915 + C79916) * C139557) *
                                   C139362 * C5149 -
                               (((C63570 * C8676 + C139301 * C8836) * C139555 +
                                 (C63570 * C8590 + C139301 * C8593) * C47004 +
                                 C79014 * C46915 + C79013 * C47003) *
                                    C139557 +
                                (C65816 * C139555 + C65815 * C47004 +
                                 C65814 * C46915 + C65813 * C47003) *
                                    C30255) *
                                   C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C47003 +
             (C63570 * C187 + C139301 * C360) * C46915 + C64376 * C47004 +
             C64377 * C139555) *
                C30255 +
            (C78063 + C78064 + C78031 + C78032) * C139557) *
               C1757 -
           ((C78033 + C78034 + C78065 + C78066) * C139557 +
            (C78032 + C78031 + C78064 + C78063) * C30255) *
               C1758 +
           ((C78066 + C78065 + C78034 + C78033) * C30255 +
            ((C63570 * C10620 + C139301 * C10623) * C47003 +
             (C63570 * C10682 + C139301 * C10794) * C46915 + C83605 * C47004 +
             C83606 * C139555) *
                C139557) *
               C1759) *
              C5149 +
          (((C80962 + C80963 + C80964 + C80965) * C30255 +
            (C83601 + C83602 + C83603 + C83604) * C139557) *
               C1758 -
           ((C80965 + C80964 + C80963 + C80962) * C139557 +
            (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
             C64376 * C47003) *
                C30255) *
               C1757 -
           (((C63570 * C73447 + C139301 * C73551) * C139555 +
             (C63570 * C73391 + C139301 * C73392) * C47004 + C83606 * C46915 +
             C83605 * C47003) *
                C139557 +
            (C83604 + C83603 + C83602 + C83601) * C30255) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[82] += (-std::pow(Pi, 2.5) *
                   (((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                      C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                         C139301 * C30255 +
                     (C78187 + C78188) * C139301 * C139557) *
                        C139362 * C5796 -
                    ((C81109 + C81108) * C139301 * C139557 +
                     (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                      C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                         C139301 * C30255) *
                        C139362 * C5797 +
                    ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                      C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                         C139301 * C30255 +
                     (C47239 * C8592 + C57817 + C57817 + C46915 * C8915 +
                      C47240 * C23998 + C57816 + C57816 + C139555 * C24440) *
                         C139301 * C139557) *
                        C139362 * C5798 -
                    ((C47240 * C71364 + C82886 + C82886 + C139555 * C71690 +
                      C47239 * C23998 + C82887 + C82887 + C46915 * C24440) *
                         C139301 * C139557 +
                     (C47240 * C20278 + C54052 + C54052 + C139555 * C20592 +
                      C47239 * C5803 + C54053 + C54053 + C46915 * C6030) *
                         C139301 * C30255) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139362 * C5149 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139362 * C139398) *
                        C5151 +
                    (((C48237 + C48236) * C139301 * C30255 +
                      (C52264 + C52265) * C139301 * C139557) *
                         C139362 * C139398 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139362 * C5149) *
                        C5152 +
                    (((C47279 + C47278) * C139301 * C30255 +
                      (C51126 + C51127) * C139301 * C139557) *
                         C139362 * C5149 -
                     ((C47240 * C8590 + C52258 + C52258 + C139555 * C8913 +
                       C47239 * C4161 + C52259 + C52259 + C46915 * C4615) *
                          C139301 * C139557 +
                      (C50199 + C50198) * C139301 * C30255) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C1757 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C1758 +
                     ((C78190 + C78189) * C139301 * C30255 +
                      (C47239 * C10620 + C60317 + C60317 + C46915 * C10847 +
                       C47240 * C26692 + C60316 + C60316 + C139555 * C26976) *
                          C139301 * C139557) *
                         C1759) *
                        C5149 +
                    (((C81108 + C81109) * C139301 * C30255 +
                      (C83715 + C83716) * C139301 * C139557) *
                         C1758 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C1757 -
                     ((C47240 * C73391 + C83709 + C83709 + C139555 * C73602 +
                       C47239 * C26692 + C83710 + C83710 + C46915 * C26976) *
                          C139301 * C139557 +
                      (C83716 + C83715) * C139301 * C30255) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[82] +=
        (-std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C47003 +
           (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
               C46915 +
           (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
              C139301 * C139362 * C5796 -
          ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
           (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
              C139301 * C139362 * C5797 +
          ((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
           (C82750 + C82751) * C47004 + (C82958 + C82959) * C139555) *
              C139301 * C139362 * C5798 -
          ((C30392 * C71448 + C139557 * C71768 + C30391 * C20362 +
            C30255 * C20664) *
               C139555 +
           (C30392 * C71364 + C139557 * C71524 + C30391 * C20278 +
            C30255 * C20432) *
               C47004 +
           (C82959 + C82958) * C46915 + (C82751 + C82750) * C47003) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139362 * C5149 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
            (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
               C139301 * C139362 * C139398 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
            (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
               C139301 * C139362 * C5149 -
           ((C30392 * C8676 + C139557 * C8993 + C30391 * C942 +
             C30255 * C1362) *
                C139555 +
            (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
             C30255 * C1056) *
                C47004 +
            (C33613 + C33612) * C46915 + (C33311 + C33310) * C47003) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C1757 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C1758 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C47003 +
            (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
             C139557 * C10903) *
                C46915 +
            (C83495 + C83496) * C47004 + (C83819 + C83820) * C139555) *
               C139301 * C1759) *
              C5149 +
          (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
            (C30391 * C8592 + C30255 * C8758 + C30392 * C20984 +
             C139557 * C21202) *
                C47004 +
            (C30391 * C8678 + C30255 * C8995 + C30392 * C21100 +
             C139557 * C21530) *
                C139555) *
               C139301 * C1758 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C1757 -
           ((C30392 * C73447 + C139557 * C73656 + C30391 * C21100 +
             C30255 * C21530) *
                C139555 +
            (C30392 * C73391 + C139557 * C73499 + C30391 * C20984 +
             C30255 * C21202) *
                C47004 +
            (C83820 + C83819) * C46915 + (C83496 + C83495) * C47003) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[82] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C30391 +
            (C63570 * C274 + C139301 * C577) * C30255 + C78053 * C30392 +
            C78397 * C139557) *
               C46915 +
           (C77352 + C77353 + C77354 + C77355) * C139555) *
              C139362 * C5796 -
          ((C77356 + C77357 + C77358 + C77359) * C139555 +
           (C77355 + C77354 + C77353 + C77352) * C46915) *
              C139362 * C5797 +
          ((C77359 + C77358 + C77357 + C77356) * C46915 +
           (C83026 + C83027 + C83028 + C83029) * C139555) *
              C139362 * C5798 -
          (((C63570 * C71524 + C139301 * C71846) * C139557 +
            (C63570 * C71364 + C139301 * C71365) * C30392 + C68897 * C30255 +
            C68732 * C30391) *
               C139555 +
           (C83029 + C83028 + C83027 + C83026) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63570 * C106 + C139301 * C112) * C30391 +
                                 (C63570 * C274 + C139301 * C577) * C30255 +
                                 C78053 * C30392 + C78397 * C139557) *
                                    C46915 +
                                (C77352 + C77353 + C77354 + C77355) * C139555) *
                                   C139362 * C5149 -
                               ((C77356 + C77357 + C77358 + C77359) * C139555 +
                                (C77355 + C77354 + C77353 + C77352) * C46915) *
                                   C139362 * C139398) *
                                  C5151 +
                              (((C77360 + C77361 + C77362 + C77363) * C46915 +
                                (C77364 + C77365 + C77366 + C77367) * C139555) *
                                   C139362 * C139398 -
                               ((C77363 + C77362 + C77361 + C77360) * C139555 +
                                (C78399 * C139557 + C78057 * C30392 +
                                 (C63570 * C275 + C139301 * C578) * C30255 +
                                 (C63570 * C107 + C139301 * C113) * C30391) *
                                    C46915) *
                                   C139362 * C5149) *
                                  C5152 +
                              ((((C63570 * C108 + C139301 * C114) * C30391 +
                                 (C63570 * C276 + C139301 * C579) * C30255 +
                                 C79917 * C30392 + C80217 * C139557) *
                                    C46915 +
                                (C79309 + C79310 + C79311 + C79315) * C139555) *
                                   C139362 * C5149 -
                               (((C63570 * C8756 + C139301 * C9070) * C139557 +
                                 (C63570 * C8590 + C139301 * C8593) * C30392 +
                                 C66049 * C30255 + C65815 * C30391) *
                                    C139555 +
                                (C79315 + C79311 + C79310 + C79309) * C46915) *
                                   C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C30391 +
             (C63570 * C274 + C139301 * C577) * C30255 + C78053 * C30392 +
             C78397 * C139557) *
                C46915 +
            (C77352 + C77353 + C77354 + C77355) * C139555) *
               C1757 -
           ((C81376 + C81377 + C81378 + C81379) * C139555 +
            (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
             C78053 * C30391) *
                C46915) *
               C1758 +
           ((C78056 * C30391 + C78398 * C30255 +
             (C63570 * C10620 + C139301 * C10623) * C30392 +
             (C63570 * C10738 + C139301 * C10956) * C139557) *
                C46915 +
            (C83919 + C83920 + C83921 + C83925) * C139555) *
               C1759) *
              C5149 +
          (((C81379 + C81378 + C81377 + C81376) * C46915 +
            (C67315 * C30391 + C67634 * C30255 + C69344 * C30392 +
             C69584 * C139557) *
                C139555) *
               C1758 -
           ((C77356 + C77357 + C77358 + C77359) * C139555 +
            (C77355 + C77354 + C77353 + C77352) * C46915) *
               C1757 -
           (((C63570 * C73499 + C139301 * C73707) * C139557 +
             (C63570 * C73391 + C139301 * C73392) * C30392 + C69584 * C30255 +
             C69344 * C30391) *
                C139555 +
            (C83925 + C83921 + C83920 + C83919) * C46915) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[82] +=
        (-std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C30391 +
           (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
               C30255 +
           (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
              C139301 * C139362 * C5796 -
          ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
           (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
            C46915 * C1543) *
               C30255 +
           (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
               C30391) *
              C139301 * C139362 * C5797 +
          ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
               C30391 +
           (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
            C139555 * C6192) *
               C30255 +
           (C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
            C139555 * C24114) *
               C30392 +
           (C47003 * C8758 + C46915 * C9149 + C47004 * C24216 +
            C139555 * C24753) *
               C139557) *
              C139301 * C139362 * C5798 -
          ((C47004 * C71524 + C139555 * C71927 + C47003 * C24216 +
            C46915 * C24753) *
               C139557 +
           (C47004 * C71364 + C139555 * C71448 + C47003 * C23998 +
            C46915 * C24114) *
               C30392 +
           (C47004 * C20432 + C139555 * C20809 + C47003 * C5921 +
            C46915 * C6192) *
               C30255 +
           (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
            C46915 * C5865) *
               C30391) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139362 * C5149 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
            (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
               C139301 * C139362 * C139398 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
            (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
               C139301 * C139362 * C5149 -
           ((C47004 * C8756 + C139555 * C9147 + C47003 * C4395 +
             C46915 * C4945) *
                C139557 +
            (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
             C46915 * C4277) *
                C30392 +
            (C50509 + C50508) * C30255 + (C49875 + C49874) * C30391) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C1757 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C1758 +
           ((C77830 + C77829) * C30391 + (C78511 + C78510) * C30255 +
            (C47003 * C10620 + C46915 * C10682 + C47004 * C26692 +
             C139555 * C26768) *
                C30392 +
            (C47003 * C10738 + C46915 * C11009 + C47004 * C26838 +
             C139555 * C27184) *
                C139557) *
               C139301 * C1759) *
              C5149 +
          (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
            (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
               C139301 * C1758 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C1757 -
           ((C47004 * C73499 + C139555 * C73758 + C47003 * C26838 +
             C46915 * C27184) *
                C139557 +
            (C47004 * C73391 + C139555 * C73447 + C47003 * C26692 +
             C46915 * C26768) *
                C30392 +
            (C84029 + C84028) * C30255 + (C83386 + C83385) * C30391) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[82] +=
        (-std::pow(Pi, 2.5) *
         (((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
            C30859 + C30859 + C139557 * C2578) *
               C46915 +
           (C77580 + C77581) * C139555) *
              C139301 * C139362 * C5796 -
          ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) * C139301 *
              C139362 * C5797 +
          ((C77583 + C77582) * C46915 + (C83172 + C83173) * C139555) * C139301 *
              C139362 * C5798 -
          ((C30856 * C71364 + C83166 + C83166 + C139557 * C72002 +
            C30855 * C20278 + C83167 + C83167 + C30255 * C20877) *
               C139555 +
           (C83173 + C83172) * C46915) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139362 * C5149 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
               C139301 * C139362 * C139398 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) *
               C139301 * C139362 * C5149 -
           ((C30856 * C8590 + C31856 + C31856 + C139557 * C9224 +
             C30855 * C832 + C31857 + C31857 + C30255 * C1648) *
                C139555 +
            (C33923 + C33922) * C46915) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C1757 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C1758 +
           ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
             C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                C46915 +
            (C84138 + C84139) * C139555) *
               C139301 * C1759) *
              C5149 +
          (((C81659 + C81658) * C46915 +
            (C30855 * C8592 + C41473 + C41473 + C30255 * C9226 +
             C30856 * C20984 + C41472 + C41472 + C139557 * C21839) *
                C139555) *
               C139301 * C1758 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C1757 -
           ((C30856 * C73391 + C84132 + C84132 + C139557 * C73809 +
             C30855 * C20984 + C84133 + C84133 + C30255 * C21839) *
                C139555 +
            (C84139 + C84138) * C46915) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
              C77704 * C139557) *
                 C46915 +
             (C76720 + C76721) * C139555) *
                C139530 -
            ((C80544 + C80545) * C139555 +
             (C77705 * C139557 + C77704 * C30255) * C46915) *
                C139426) *
               C5149 +
           (((C80545 + C80544) * C46915 +
             (C66988 * C30255 + C69094 * C139557) * C139555) *
                C139426 -
            ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
                C139530) *
               C139398) *
              C139521 +
          ((((C77706 * C30255 + C77707 * C139557) * C46915 +
             (C80546 + C80547) * C139555) *
                C139426 -
            ((C76725 + C76724) * C139555 +
             (C77706 * C139557 +
              (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                 C46915) *
                C139530) *
               C5149 +
           (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
                C139530 -
            (((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C139557 +
              C66991 * C30255) *
                 C139555 +
             (C80547 + C80546) * C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                  C63570 +
              (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                  C139301) *
                 C30255 +
             ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                 C139557) *
                C139530 -
            (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                 C139557 +
             ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                 C30255) *
                C139426) *
               C5149 +
           ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                 C30255 +
             ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                 C139557) *
                C139426 -
            (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                 C139557 +
             ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                  C139301 +
              (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                  C63570) *
                 C30255) *
                C139530) *
               C139398) *
              C139521 +
          (((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                 C30255 +
             ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                 C139557) *
                C139426 -
            (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                 C139557 +
             ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                 C30255) *
                C139530) *
               C5149 +
           ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                 C30255 +
             ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                 C139557) *
                C139530 -
            (((C47004 * C20985 + C139555 * C21101 + C47003 * C6327 +
               C46915 * C6413) *
                  C139301 +
              (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
               C46915 * C6410) *
                  C63570) *
                 C139557 +
             ((C51827 + C51826) * C139301 + (C51825 + C51824) * C63570) *
                 C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
               C139557 * C1986) *
                  C63570 +
              (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
               C139557 * C1994) *
                  C139301) *
                 C46915 +
             ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                 C139555) *
                C139530 -
            (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                 C139555 +
             ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
               C30255 * C1994) *
                  C139301 +
              (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
               C30255 * C1986) *
                  C63570) *
                 C46915) *
                C139426) *
               C5149 +
           ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                 C46915 +
             ((C30391 * C8592 + C30255 * C8758 + C30392 * C20984 +
               C139557 * C21202) *
                  C63570 +
              (C30391 * C8595 + C30255 * C8761 + C30392 * C20986 +
               C139557 * C21204) *
                  C139301) *
                 C139555) *
                C139426 -
            (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                 C139555 +
             ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                 C46915) *
                C139530) *
               C139398) *
              C139521 +
          (((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                 C46915 +
             ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                 C139555) *
                C139426 -
            (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                 C139555 +
             ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                 C46915) *
                C139530) *
               C5149 +
           ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                 C46915 +
             ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                 C139555) *
                C139530 -
            (((C30392 * C20985 + C139557 * C21203 + C30391 * C8594 +
               C30255 * C8760) *
                  C139301 +
              (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
               C30255 * C8757) *
                  C63570) *
                 C139555 +
             ((C35297 + C35296) * C139301 + (C35295 + C35294) * C63570) *
                 C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63570 * C106 + C139301 * C112) * C47003 +
                        (C63570 * C187 + C139301 * C360) * C46915 +
                        C64376 * C47004 + C64377 * C139555) *
                           C30255 +
                       (C78063 + C78064 + C78031 + C78032) * C139557) *
                          C139530 -
                      ((C78033 + C78034 + C78065 + C78066) * C139557 +
                       (C78032 + C78031 + C78064 + C78063) * C30255) *
                          C139426) *
                         C5149 +
                     (((C80962 + C80963 + C80964 + C80965) * C30255 +
                       (C83601 + C83602 + C83603 + C83604) * C139557) *
                          C139426 -
                      ((C80965 + C80964 + C80963 + C80962) * C139557 +
                       (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                        C64376 * C47003) *
                           C30255) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C78067 + C78068 + C78043 + C78044) * C30255 +
                       (C78069 + C78070 + C78071 + C78072) * C139557) *
                          C139426 -
                      ((C78044 + C78043 + C78068 + C78067) * C139557 +
                       (C64383 * C139555 + C64382 * C47004 +
                        (C63570 * C188 + C139301 * C361) * C46915 +
                        (C63570 * C107 + C139301 * C113) * C47003) *
                           C30255) *
                          C139530) *
                         C5149 +
                     (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                        C64385 * C139555) *
                           C30255 +
                       (C80966 + C80967 + C80968 + C80969) * C139557) *
                          C139530 -
                      (((C63570 * C21099 + C139301 * C21313) * C139555 +
                        (C63570 * C20983 + C139301 * C20985) * C47004 +
                        C78062 * C46915 + C78061 * C47003) *
                           C139557 +
                       (C80969 + C80968 + C80967 + C80966) * C30255) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                        C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                           C139301 * C30255 +
                       (C78187 + C78188) * C139301 * C139557) *
                          C139530 -
                      ((C78189 + C78190) * C139301 * C139557 +
                       (C78188 + C78187) * C139301 * C30255) *
                          C139426) *
                         C5149 +
                     (((C81108 + C81109) * C139301 * C30255 +
                       (C83715 + C83716) * C139301 * C139557) *
                          C139426 -
                      ((C81109 + C81108) * C139301 * C139557 +
                       (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                        C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                           C139301 * C30255) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C49239 + C49238) * C139301 * C30255 +
                       (C49240 + C49241) * C139301 * C139557) *
                          C139426 -
                      ((C49238 + C49239) * C139301 * C139557 +
                       (C47277 + C47276) * C139301 * C30255) *
                          C139530) *
                         C5149 +
                     (((C48237 + C48236) * C139301 * C30255 +
                       (C52264 + C52265) * C139301 * C139557) *
                          C139530 -
                      ((C47240 * C20983 + C54842 + C54842 + C139555 * C21425 +
                        C47239 * C6324 + C54843 + C54843 + C46915 * C6647) *
                           C139301 * C139557 +
                       (C52265 + C52264) * C139301 * C30255) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C47003 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C46915 +
             (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
                C139301 * C139530 -
            ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
             (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C46915 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C47003) *
                C139301 * C139426) *
               C5149 +
           (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
             (C30391 * C8592 + C30255 * C8758 + C30392 * C20984 +
              C139557 * C21202) *
                 C47004 +
             (C30391 * C8678 + C30255 * C8995 + C30392 * C21100 +
              C139557 * C21530) *
                 C139555) *
                C139301 * C139426 -
            ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
             (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
             (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
                C139301 * C139426 -
            ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
             (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
                C139301 * C139530) *
               C5149 +
           (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
             (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
                C139301 * C139530 -
            ((C30392 * C21099 + C139557 * C21529 + C30391 * C8677 +
              C30255 * C8994) *
                 C139555 +
             (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
              C30255 * C8757) *
                 C47004 +
             (C35707 + C35706) * C46915 + (C35295 + C35294) * C47003) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[83] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63570 * C106 + C139301 * C112) * C30391 +
                        (C63570 * C274 + C139301 * C577) * C30255 +
                        C78053 * C30392 + C78397 * C139557) *
                           C46915 +
                       (C77352 + C77353 + C77354 + C77355) * C139555) *
                          C139530 -
                      ((C81376 + C81377 + C81378 + C81379) * C139555 +
                       (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                        C78053 * C30391) *
                           C46915) *
                          C139426) *
                         C5149 +
                     (((C81379 + C81378 + C81377 + C81376) * C46915 +
                       (C67315 * C30391 + C67634 * C30255 + C69344 * C30392 +
                        C69584 * C139557) *
                           C139555) *
                          C139426 -
                      ((C77356 + C77357 + C77358 + C77359) * C139555 +
                       (C77355 + C77354 + C77353 + C77352) * C46915) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
                        C78400 * C139557) *
                           C46915 +
                       (C81380 + C81381 + C81382 + C81383) * C139555) *
                          C139426 -
                      ((C77363 + C77362 + C77361 + C77360) * C139555 +
                       (C78399 * C139557 + C78057 * C30392 +
                        (C63570 * C275 + C139301 * C578) * C30255 +
                        (C63570 * C107 + C139301 * C113) * C30391) *
                           C46915) *
                          C139530) *
                         C5149 +
                     (((C77360 + C77361 + C77362 + C77363) * C46915 +
                       (C77364 + C77365 + C77366 + C77367) * C139555) *
                          C139530 -
                      (((C63570 * C21201 + C139301 * C21632) * C139557 +
                        (C63570 * C20983 + C139301 * C20985) * C30392 +
                        C67637 * C30255 + C67320 * C30391) *
                           C139555 +
                       (C81383 + C81382 + C81381 + C81380) * C46915) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C30391 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C30255 +
             (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
                C139301 * C139530 -
            ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
             (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
                C139301 * C139426) *
               C5149 +
           (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
             (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
                C139301 * C139426 -
            ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
             (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C30255 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C30391) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
             (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
                C139301 * C139426 -
            ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
             (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
                C139301 * C139530) *
               C5149 +
           (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
             (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
                C139301 * C139530 -
            ((C47004 * C21201 + C139555 * C21738 + C47003 * C6490 +
              C46915 * C6881) *
                 C139557 +
             (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
              C46915 * C6410) *
                 C30392 +
             (C52677 + C52676) * C30255 + (C51825 + C51824) * C30391) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[83] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
              C30859 + C30859 + C139557 * C2578) *
                 C46915 +
             (C77580 + C77581) * C139555) *
                C139301 * C139530 -
            ((C81658 + C81659) * C139555 +
             (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
              C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                 C46915) *
                C139301 * C139426) *
               C5149 +
           (((C81659 + C81658) * C46915 +
             (C30855 * C8592 + C41473 + C41473 + C30255 * C9226 +
              C30856 * C20984 + C41472 + C41472 + C139557 * C21839) *
                 C139555) *
                C139301 * C139426 -
            ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
                C139301 * C139426 -
            ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
                C139301 * C139530) *
               C5149 +
           (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
                C139301 * C139530 -
            ((C30856 * C20983 + C41470 + C41470 + C139557 * C21838 +
              C30855 * C8591 + C41471 + C41471 + C30255 * C9225) *
                 C139555 +
             (C36123 + C36122) * C46915) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139362 * C5149 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139362 * C139398) *
              C5151 +
          (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) *
               C139362 * C139398 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
             C79616 * C139557) *
                C46915 +
            (C78708 + C78714) * C139555) *
               C139362 * C5149 -
           (((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139557 +
             C65576 * C30255) *
                C139555 +
            (C78714 + C78708) * C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
            C77704 * C139557) *
               C46915 +
           (C76720 + C76721) * C139555) *
              C139362 * C5796 -
          ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) * C139362 *
              C5797 +
          ((C76723 + C76722) * C46915 + (C82608 + C82609) * C139555) * C139362 *
              C5798 -
          (((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139557 +
            C68562 * C30255) *
               C139555 +
           (C82609 + C82608) * C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139362 * C139398) *
              C5151 +
          ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                C30255 +
            ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                C139557) *
               C139362 * C139398 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139362 * C5149) *
              C5152 +
          ((((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) *
                C30255 +
            ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C47004 * C8593 + C139555 * C8679 + C47003 * C4165 +
              C46915 * C4281) *
                 C139301 +
             (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
              C46915 * C4277) *
                 C63570) *
                C139557 +
            ((C49877 + C49876) * C139301 + (C49875 + C49874) * C63570) *
                C30255) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C63570 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C139301) *
               C30255 +
           ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
               C139557) *
              C139362 * C5796 -
          (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
               C139557 +
           ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                C139301 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C63570) *
               C30255) *
              C139362 * C5797 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C63570 +
            (C47003 * C838 + C46915 * C948 + C47004 * C5806 + C139555 * C5868) *
                C139301) *
               C30255 +
           ((C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
             C139555 * C24114) *
                C63570 +
            (C47003 * C8595 + C46915 * C8681 + C47004 * C24000 +
             C139555 * C24116) *
                C139301) *
               C139557) *
              C139362 * C5798 -
          (((C47004 * C71365 + C139555 * C71449 + C47003 * C24000 +
             C46915 * C24116) *
                C139301 +
            (C47004 * C71364 + C139555 * C71448 + C47003 * C23998 +
             C46915 * C24114) *
                C63570) *
               C139557 +
           ((C47004 * C20280 + C139555 * C20364 + C47003 * C5806 +
             C46915 * C5868) *
                C139301 +
            (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
             C46915 * C5865) *
                C63570) *
               C30255) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139362 * C139398) *
              C5151 +
          ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                C46915 +
            ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                C139555) *
               C139362 * C139398 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139362 * C5149) *
              C5152 +
          ((((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) *
                C46915 +
            ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C30392 * C8593 + C139557 * C8759 + C30391 * C840 +
              C30255 * C1064) *
                 C139301 +
             (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
              C30255 * C1056) *
                 C63570) *
                C139555 +
            ((C33313 + C33312) * C139301 + (C33311 + C33310) * C63570) *
                C46915) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C63570 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C139301) *
               C46915 +
           ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
               C139555) *
              C139362 * C5796 -
          (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
               C139555 +
           ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
               C46915) *
              C139362 * C5797 +
          (((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) * C46915 +
           ((C82750 + C82751) * C63570 + (C82752 + C82753) * C139301) *
               C139555) *
              C139362 * C5798 -
          (((C30392 * C71365 + C139557 * C71525 + C30391 * C20280 +
             C30255 * C20434) *
                C139301 +
            (C30392 * C71364 + C139557 * C71524 + C30391 * C20278 +
             C30255 * C20432) *
                C63570) *
               C139555 +
           ((C82753 + C82752) * C139301 + (C82751 + C82750) * C63570) *
               C46915) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[84] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139362 * C5149 -
                     ((C80965 + C80964 + C80963 + C80962) * C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C139362 * C139398) *
                        C5151 +
                    (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                       C64385 * C139555) *
                          C30255 +
                      (C80966 + C80967 + C80968 + C80969) * C139557) *
                         C139362 * C139398 -
                     ((C78044 + C78043 + C78068 + C78067) * C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C139362 * C5149) *
                        C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C47003 +
                       (C63570 * C189 + C139301 * C362) * C46915 +
                       C65813 * C47004 + C65814 * C139555) *
                          C30255 +
                      (C79919 + C79920 + C79915 + C79916) * C139557) *
                         C139362 * C5149 -
                     (((C63570 * C8676 + C139301 * C8836) * C139555 +
                       (C63570 * C8590 + C139301 * C8593) * C47004 +
                       C79014 * C46915 + C79013 * C47003) *
                          C139557 +
                      (C65816 * C139555 + C65815 * C47004 + C65814 * C46915 +
                       C65813 * C47003) *
                          C30255) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C47003 +
                      (C63570 * C187 + C139301 * C360) * C46915 +
                      C64376 * C47004 + C64377 * C139555) *
                         C30255 +
                     (C78063 + C78064 + C78031 + C78032) * C139557) *
                        C139362 * C5796 -
                    ((C80965 + C80964 + C80963 + C80962) * C139557 +
                     (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                      C64376 * C47003) *
                         C30255) *
                        C139362 * C5797 +
                    ((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
                      C64380 * C139555) *
                         C30255 +
                     (C67315 * C47003 + C67314 * C46915 + C71615 * C47004 +
                      C71616 * C139555) *
                         C139557) *
                        C139362 * C5798 -
                    (((C63570 * C71448 + C139301 * C71609) * C139555 +
                      (C63570 * C71364 + C139301 * C71365) * C47004 +
                      C71616 * C46915 + C71615 * C47003) *
                         C139557 +
                     (C68733 * C139555 + C68732 * C47004 + C64380 * C46915 +
                      C64381 * C47003) *
                         C30255) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[84] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139362 * C5149 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139362 * C139398) *
                        C5151 +
                    (((C48237 + C48236) * C139301 * C30255 +
                      (C52264 + C52265) * C139301 * C139557) *
                         C139362 * C139398 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139362 * C5149) *
                        C5152 +
                    (((C47279 + C47278) * C139301 * C30255 +
                      (C51126 + C51127) * C139301 * C139557) *
                         C139362 * C5149 -
                     ((C47240 * C8590 + C52258 + C52258 + C139555 * C8913 +
                       C47239 * C4161 + C52259 + C52259 + C46915 * C4615) *
                          C139301 * C139557 +
                      (C50199 + C50198) * C139301 * C30255) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                      C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                         C139301 * C30255 +
                     (C78187 + C78188) * C139301 * C139557) *
                        C139362 * C5796 -
                    ((C81109 + C81108) * C139301 * C139557 +
                     (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                      C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                         C139301 * C30255) *
                        C139362 * C5797 +
                    ((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                      C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                         C139301 * C30255 +
                     (C47239 * C8592 + C57817 + C57817 + C46915 * C8915 +
                      C47240 * C23998 + C57816 + C57816 + C139555 * C24440) *
                         C139301 * C139557) *
                        C139362 * C5798 -
                    ((C47240 * C71364 + C82886 + C82886 + C139555 * C71690 +
                      C47239 * C23998 + C82887 + C82887 + C46915 * C24440) *
                         C139301 * C139557 +
                     (C47240 * C20278 + C54052 + C54052 + C139555 * C20592 +
                      C47239 * C5803 + C54053 + C54053 + C46915 * C6030) *
                         C139301 * C30255) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139362 * C5149 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
            (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
               C139301 * C139362 * C139398 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
            (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
               C139301 * C139362 * C5149 -
           ((C30392 * C8676 + C139557 * C8993 + C30391 * C942 +
             C30255 * C1362) *
                C139555 +
            (C30392 * C8590 + C139557 * C8756 + C30391 * C832 +
             C30255 * C1056) *
                C47004 +
            (C33613 + C33612) * C46915 + (C33311 + C33310) * C47003) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C47003 +
           (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
               C46915 +
           (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
              C139301 * C139362 * C5796 -
          ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
           (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
              C139301 * C139362 * C5797 +
          ((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
           (C82750 + C82751) * C47004 + (C82958 + C82959) * C139555) *
              C139301 * C139362 * C5798 -
          ((C30392 * C71448 + C139557 * C71768 + C30391 * C20362 +
            C30255 * C20664) *
               C139555 +
           (C30392 * C71364 + C139557 * C71524 + C30391 * C20278 +
            C30255 * C20432) *
               C47004 +
           (C82959 + C82958) * C46915 + (C82751 + C82750) * C47003) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[84] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139362 * C5149 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C139362 * C139398) *
                        C5151 +
                    (((C77360 + C77361 + C77362 + C77363) * C46915 +
                      (C77364 + C77365 + C77366 + C77367) * C139555) *
                         C139362 * C139398 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      (C78399 * C139557 + C78057 * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C139362 * C5149) *
                        C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C30391 +
                       (C63570 * C276 + C139301 * C579) * C30255 +
                       C79917 * C30392 + C80217 * C139557) *
                          C46915 +
                      (C79309 + C79310 + C79311 + C79315) * C139555) *
                         C139362 * C5149 -
                     (((C63570 * C8756 + C139301 * C9070) * C139557 +
                       (C63570 * C8590 + C139301 * C8593) * C30392 +
                       C66049 * C30255 + C65815 * C30391) *
                          C139555 +
                      (C79315 + C79311 + C79310 + C79309) * C46915) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C63570 * C106 + C139301 * C112) * C30391 +
                      (C63570 * C274 + C139301 * C577) * C30255 +
                      C78053 * C30392 + C78397 * C139557) *
                         C46915 +
                     (C77352 + C77353 + C77354 + C77355) * C139555) *
                        C139362 * C5796 -
                    ((C77356 + C77357 + C77358 + C77359) * C139555 +
                     (C77355 + C77354 + C77353 + C77352) * C46915) *
                        C139362 * C5797 +
                    ((C77359 + C77358 + C77357 + C77356) * C46915 +
                     (C83026 + C83027 + C83028 + C83029) * C139555) *
                        C139362 * C5798 -
                    (((C63570 * C71524 + C139301 * C71846) * C139557 +
                      (C63570 * C71364 + C139301 * C71365) * C30392 +
                      C68897 * C30255 + C68732 * C30391) *
                         C139555 +
                     (C83029 + C83028 + C83027 + C83026) * C46915) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139362 * C5149 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
            (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
               C139301 * C139362 * C139398 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
            (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
               C139301 * C139362 * C5149 -
           ((C47004 * C8756 + C139555 * C9147 + C47003 * C4395 +
             C46915 * C4945) *
                C139557 +
            (C47004 * C8590 + C139555 * C8676 + C47003 * C4161 +
             C46915 * C4277) *
                C30392 +
            (C50509 + C50508) * C30255 + (C49875 + C49874) * C30391) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C30391 +
           (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
               C30255 +
           (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
              C139301 * C139362 * C5796 -
          ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
           (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
            C46915 * C1543) *
               C30255 +
           (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
               C30391) *
              C139301 * C139362 * C5797 +
          ((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
               C30391 +
           (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
            C139555 * C6192) *
               C30255 +
           (C47003 * C8592 + C46915 * C8678 + C47004 * C23998 +
            C139555 * C24114) *
               C30392 +
           (C47003 * C8758 + C46915 * C9149 + C47004 * C24216 +
            C139555 * C24753) *
               C139557) *
              C139301 * C139362 * C5798 -
          ((C47004 * C71524 + C139555 * C71927 + C47003 * C24216 +
            C46915 * C24753) *
               C139557 +
           (C47004 * C71364 + C139555 * C71448 + C47003 * C23998 +
            C46915 * C24114) *
               C30392 +
           (C47004 * C20432 + C139555 * C20809 + C47003 * C5921 +
            C46915 * C6192) *
               C30255 +
           (C47004 * C20278 + C139555 * C20362 + C47003 * C5803 +
            C46915 * C5865) *
               C30391) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[84] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139362 * C5149 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
               C139301 * C139362 * C139398 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) *
               C139301 * C139362 * C5149 -
           ((C30856 * C8590 + C31856 + C31856 + C139557 * C9224 +
             C30855 * C832 + C31857 + C31857 + C30255 * C1648) *
                C139555 +
            (C33923 + C33922) * C46915) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
            C30859 + C30859 + C139557 * C2578) *
               C46915 +
           (C77580 + C77581) * C139555) *
              C139301 * C139362 * C5796 -
          ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) * C139301 *
              C139362 * C5797 +
          ((C77583 + C77582) * C46915 + (C83172 + C83173) * C139555) * C139301 *
              C139362 * C5798 -
          ((C30856 * C71364 + C83166 + C83166 + C139557 * C72002 +
            C30855 * C20278 + C83167 + C83167 + C30255 * C20877) *
               C139555 +
           (C83173 + C83172) * C46915) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
              C77704 * C139557) *
                 C46915 +
             (C76720 + C76721) * C139555) *
                C9304 -
            ((C80544 + C80545) * C139555 +
             (C77705 * C139557 + C77704 * C30255) * C46915) *
                C139426) *
               C139529 +
           (((C80545 + C80544) * C46915 + (C86290 + C86291) * C139555) *
                C139426 -
            ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
                C9304) *
               C139398) *
              C139521 +
          ((((C77706 * C30255 + C77707 * C139557) * C46915 +
             (C80546 + C80547) * C139555) *
                C139426 -
            ((C76725 + C76724) * C139555 +
             (C77706 * C139557 +
              (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                 C46915) *
                C9304) *
               C139529 +
           (((C76724 + C76725) * C46915 + (C76726 + C76727) * C139555) * C9304 -
            (((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C139557 +
              C66991 * C30255) *
                 C139555 +
             (C80547 + C80546) * C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                  C63570 +
              (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                  C139301) *
                 C30255 +
             ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                 C139557) *
                C9304 -
            (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                 C139557 +
             ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                 C30255) *
                C139426) *
               C139529 +
           ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                 C30255 +
             ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                 C139557) *
                C139426 -
            (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                 C139557 +
             ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                  C139301 +
              (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                  C63570) *
                 C30255) *
                C9304) *
               C139398) *
              C139521 +
          (((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                 C30255 +
             ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                 C139557) *
                C139426 -
            (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                 C139557 +
             ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                 C30255) *
                C9304) *
               C139529 +
           ((((C47845 + C47844) * C63570 + (C47843 + C47842) * C139301) *
                 C30255 +
             ((C51824 + C51825) * C63570 + (C51826 + C51827) * C139301) *
                 C139557) *
                C9304 -
            (((C47004 * C20985 + C139555 * C21101 + C47003 * C6327 +
               C46915 * C6413) *
                  C139301 +
              (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
               C46915 * C6410) *
                  C63570) *
                 C139557 +
             ((C51827 + C51826) * C139301 + (C51825 + C51824) * C63570) *
                 C30255) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
               C139557 * C1986) *
                  C63570 +
              (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
               C139557 * C1994) *
                  C139301) *
                 C46915 +
             ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                 C139555) *
                C9304 -
            (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                 C139555 +
             ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
               C30255 * C1994) *
                  C139301 +
              (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
               C30255 * C1986) *
                  C63570) *
                 C46915) *
                C139426) *
               C139529 +
           ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                 C46915 +
             ((C86508 + C86509) * C63570 + (C86510 + C86511) * C139301) *
                 C139555) *
                C139426 -
            (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                 C139555 +
             ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                 C46915) *
                C9304) *
               C139398) *
              C139521 +
          (((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                 C46915 +
             ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                 C139555) *
                C139426 -
            (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                 C139555 +
             ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                 C46915) *
                C9304) *
               C139529 +
           ((((C31217 + C31216) * C63570 + (C31215 + C31214) * C139301) *
                 C46915 +
             ((C31218 + C31219) * C63570 + (C31220 + C31221) * C139301) *
                 C139555) *
                C9304 -
            (((C30392 * C20985 + C139557 * C21203 + C30391 * C8594 +
               C30255 * C8760) *
                  C139301 +
              (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
               C30255 * C8757) *
                  C63570) *
                 C139555 +
             ((C35297 + C35296) * C139301 + (C35295 + C35294) * C63570) *
                 C46915) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63570 * C106 + C139301 * C112) * C47003 +
                        (C63570 * C187 + C139301 * C360) * C46915 +
                        C64376 * C47004 + C64377 * C139555) *
                           C30255 +
                       (C78063 + C78064 + C78031 + C78032) * C139557) *
                          C9304 -
                      ((C78033 + C78034 + C78065 + C78066) * C139557 +
                       (C78032 + C78031 + C78064 + C78063) * C30255) *
                          C139426) *
                         C139529 +
                     (((C80962 + C80963 + C80964 + C80965) * C30255 +
                       (C83601 + C83602 + C83603 + C83604) * C139557) *
                          C139426 -
                      ((C80965 + C80964 + C80963 + C80962) * C139557 +
                       (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                        C64376 * C47003) *
                           C30255) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C78067 + C78068 + C78043 + C78044) * C30255 +
                       (C78069 + C78070 + C78071 + C78072) * C139557) *
                          C139426 -
                      ((C78044 + C78043 + C78068 + C78067) * C139557 +
                       (C64383 * C139555 + C64382 * C47004 +
                        (C63570 * C188 + C139301 * C361) * C46915 +
                        (C63570 * C107 + C139301 * C113) * C47003) *
                           C30255) *
                          C9304) *
                         C139529 +
                     (((C64382 * C47003 + C64383 * C46915 + C64384 * C47004 +
                        C64385 * C139555) *
                           C30255 +
                       (C80966 + C80967 + C80968 + C80969) * C139557) *
                          C9304 -
                      (((C63570 * C21099 + C139301 * C21313) * C139555 +
                        (C63570 * C20983 + C139301 * C20985) * C47004 +
                        C78062 * C46915 + C78061 * C47003) *
                           C139557 +
                       (C80969 + C80968 + C80967 + C80966) * C30255) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                        C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                           C139301 * C30255 +
                       (C78187 + C78188) * C139301 * C139557) *
                          C9304 -
                      ((C78189 + C78190) * C139301 * C139557 +
                       (C78188 + C78187) * C139301 * C30255) *
                          C139426) *
                         C139529 +
                     (((C81108 + C81109) * C139301 * C30255 +
                       (C83715 + C83716) * C139301 * C139557) *
                          C139426 -
                      ((C81109 + C81108) * C139301 * C139557 +
                       (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                        C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                           C139301 * C30255) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C49239 + C49238) * C139301 * C30255 +
                       (C49240 + C49241) * C139301 * C139557) *
                          C139426 -
                      ((C49238 + C49239) * C139301 * C139557 +
                       (C47277 + C47276) * C139301 * C30255) *
                          C9304) *
                         C139529 +
                     (((C48237 + C48236) * C139301 * C30255 +
                       (C52264 + C52265) * C139301 * C139557) *
                          C9304 -
                      ((C47240 * C20983 + C54842 + C54842 + C139555 * C21425 +
                        C47239 * C6324 + C54843 + C54843 + C46915 * C6647) *
                           C139301 * C139557 +
                       (C52265 + C52264) * C139301 * C30255) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C47003 +
             (C30391 * C187 + C30255 * C499 + C30392 * C1872 +
              C139557 * C2292) *
                 C46915 +
             (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
                C139301 * C9304 -
            ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
             (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
              C30255 * C2292) *
                 C46915 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C47003) *
                C139301 * C139426) *
               C139529 +
           (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
             (C86508 + C86509) * C47004 + (C86826 + C86827) * C139555) *
                C139301 * C139426 -
            ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
             (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
             (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
                C139301 * C139426 -
            ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
             (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
                C139301 * C9304) *
               C139529 +
           (((C31217 + C31216) * C47003 + (C31530 + C31529) * C46915 +
             (C31218 + C31219) * C47004 + (C31531 + C31532) * C139555) *
                C139301 * C9304 -
            ((C30392 * C21099 + C139557 * C21529 + C30391 * C8677 +
              C30255 * C8994) *
                 C139555 +
             (C30392 * C20983 + C139557 * C21201 + C30391 * C8591 +
              C30255 * C8757) *
                 C47004 +
             (C35707 + C35706) * C46915 + (C35295 + C35294) * C47003) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[85] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C63570 * C106 + C139301 * C112) * C30391 +
                        (C63570 * C274 + C139301 * C577) * C30255 +
                        C78053 * C30392 + C78397 * C139557) *
                           C46915 +
                       (C77352 + C77353 + C77354 + C77355) * C139555) *
                          C9304 -
                      ((C81376 + C81377 + C81378 + C81379) * C139555 +
                       (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                        C78053 * C30391) *
                           C46915) *
                          C139426) *
                         C139529 +
                     (((C81379 + C81378 + C81377 + C81376) * C46915 +
                       (C86926 + C86927 + C86928 + C86929) * C139555) *
                          C139426 -
                      ((C77356 + C77357 + C77358 + C77359) * C139555 +
                       (C77355 + C77354 + C77353 + C77352) * C46915) *
                          C9304) *
                         C139398) *
                        C139521 +
                    ((((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
                        C78400 * C139557) *
                           C46915 +
                       (C81380 + C81381 + C81382 + C81383) * C139555) *
                          C139426 -
                      ((C77363 + C77362 + C77361 + C77360) * C139555 +
                       (C78399 * C139557 + C78057 * C30392 +
                        (C63570 * C275 + C139301 * C578) * C30255 +
                        (C63570 * C107 + C139301 * C113) * C30391) *
                           C46915) *
                          C9304) *
                         C139529 +
                     (((C77360 + C77361 + C77362 + C77363) * C46915 +
                       (C77364 + C77365 + C77366 + C77367) * C139555) *
                          C9304 -
                      (((C63570 * C21201 + C139301 * C21632) * C139557 +
                        (C63570 * C20983 + C139301 * C20985) * C30392 +
                        C67637 * C30255 + C67320 * C30391) *
                           C139555 +
                       (C81383 + C81382 + C81381 + C81380) * C46915) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C30391 +
             (C47003 * C274 + C46915 * C633 + C47004 * C1053 +
              C139555 * C1543) *
                 C30255 +
             (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
                C139301 * C9304 -
            ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
             (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
                C139301 * C139426) *
               C139529 +
           (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
             (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
                C139301 * C139426 -
            ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
             (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
              C46915 * C1543) *
                 C30255 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C30391) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
             (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
                C139301 * C139426 -
            ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
             (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
                C139301 * C9304) *
               C139529 +
           (((C47845 + C47844) * C30391 + (C48575 + C48574) * C30255 +
             (C51824 + C51825) * C30392 + (C52676 + C52677) * C139557) *
                C139301 * C9304 -
            ((C47004 * C21201 + C139555 * C21738 + C47003 * C6490 +
              C46915 * C6881) *
                 C139557 +
             (C47004 * C20983 + C139555 * C21099 + C47003 * C6324 +
              C46915 * C6410) *
                 C30392 +
             (C52677 + C52676) * C30255 + (C51825 + C51824) * C30391) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[85] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
              C30859 + C30859 + C139557 * C2578) *
                 C46915 +
             (C77580 + C77581) * C139555) *
                C139301 * C9304 -
            ((C81658 + C81659) * C139555 +
             (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
              C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                 C46915) *
                C139301 * C139426) *
               C139529 +
           (((C81659 + C81658) * C46915 + (C87142 + C87143) * C139555) *
                C139301 * C139426 -
            ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
                C139301 * C139426 -
            ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
                C139301 * C9304) *
               C139529 +
           (((C31867 + C31866) * C46915 + (C31868 + C31869) * C139555) *
                C139301 * C9304 -
            ((C30856 * C20983 + C41470 + C41470 + C139557 * C21838 +
              C30855 * C8591 + C41471 + C41471 + C30255 * C9225) *
                 C139555 +
             (C36123 + C36122) * C46915) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139562 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139563 +
           ((C77705 * C30255 + C88983 * C139557) * C46915 +
            (C83272 + C83278) * C139555) *
               C12024) *
              C139529 +
          (((C80545 + C80544) * C46915 + (C86290 + C86291) * C139555) *
               C139563 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) *
               C139562 -
           (((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C139557 +
             C69094 * C30255) *
                C139555 +
            (C83278 + C83272) * C46915) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139562 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139563 +
           (((C77830 + C77829) * C63570 + (C77828 + C77827) * C139301) *
                C30255 +
            ((C89060 + C89061) * C63570 + (C89062 + C89063) * C139301) *
                C139557) *
               C12024) *
              C139529 +
          ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                C30255 +
            ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                C139557) *
               C139563 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C139562 -
           (((C47004 * C73392 + C139555 * C73448 + C47003 * C26694 +
              C46915 * C26770) *
                 C139301 +
             (C47004 * C73391 + C139555 * C73447 + C47003 * C26692 +
              C46915 * C26768) *
                 C63570) *
                C139557 +
            ((C83388 + C83387) * C139301 + (C83386 + C83385) * C63570) *
                C30255) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139562 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139563 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C46915 +
            ((C83495 + C83496) * C63570 + (C83497 + C83498) * C139301) *
                C139555) *
               C12024) *
              C139529 +
          ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                C46915 +
            ((C86508 + C86509) * C63570 + (C86510 + C86511) * C139301) *
                C139555) *
               C139563 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C139562 -
           (((C30392 * C73392 + C139557 * C73500 + C30391 * C20986 +
              C30255 * C21204) *
                 C139301 +
             (C30392 * C73391 + C139557 * C73499 + C30391 * C20984 +
              C30255 * C21202) *
                 C63570) *
                C139555 +
            ((C83498 + C83497) * C139301 + (C83496 + C83495) * C63570) *
                C46915) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139562 -
                     ((C78033 + C78034 + C78065 + C78066) * C139557 +
                      (C78032 + C78031 + C78064 + C78063) * C30255) *
                         C139563 +
                     ((C78066 + C78065 + C78034 + C78033) * C30255 +
                      (C89207 + C89208 + C89203 + C89204) * C139557) *
                         C12024) *
                        C139529 +
                    (((C80962 + C80963 + C80964 + C80965) * C30255 +
                      (C83601 + C83602 + C83603 + C83604) * C139557) *
                         C139563 -
                     ((C80965 + C80964 + C80963 + C80962) * C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C139562 -
                     (((C63570 * C73447 + C139301 * C73551) * C139555 +
                       (C63570 * C73391 + C139301 * C73392) * C47004 +
                       C83606 * C46915 + C83605 * C47003) *
                          C139557 +
                      (C83604 + C83603 + C83602 + C83601) * C30255) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139562 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139563 +
                     ((C78190 + C78189) * C139301 * C30255 +
                      (C89286 + C89287) * C139301 * C139557) *
                         C12024) *
                        C139529 +
                    (((C81108 + C81109) * C139301 * C30255 +
                      (C83715 + C83716) * C139301 * C139557) *
                         C139563 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C139562 -
                     ((C47240 * C73391 + C83709 + C83709 + C139555 * C73602 +
                       C47239 * C26692 + C83710 + C83710 + C46915 * C26976) *
                          C139301 * C139557 +
                      (C83716 + C83715) * C139301 * C30255) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139562 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139563 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C47003 +
            (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
             C139557 * C10903) *
                C46915 +
            (C83495 + C83496) * C47004 + (C83819 + C83820) * C139555) *
               C139301 * C12024) *
              C139529 +
          (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
            (C86508 + C86509) * C47004 + (C86826 + C86827) * C139555) *
               C139301 * C139563 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C139562 -
           ((C30392 * C73447 + C139557 * C73656 + C30391 * C21100 +
             C30255 * C21530) *
                C139555 +
            (C30392 * C73391 + C139557 * C73499 + C30391 * C20984 +
             C30255 * C21202) *
                C47004 +
            (C83820 + C83819) * C46915 + (C83496 + C83495) * C47003) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[86] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139562 -
                     ((C81376 + C81377 + C81378 + C81379) * C139555 +
                      (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                       C78053 * C30391) *
                          C46915) *
                         C139563 +
                     ((C78056 * C30391 + C78398 * C30255 + C89205 * C30392 +
                       C89424 * C139557) *
                          C46915 +
                      (C83919 + C83920 + C83921 + C83925) * C139555) *
                         C12024) *
                        C139529 +
                    (((C81379 + C81378 + C81377 + C81376) * C46915 +
                      (C86926 + C86927 + C86928 + C86929) * C139555) *
                         C139563 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C139562 -
                     (((C63570 * C73499 + C139301 * C73707) * C139557 +
                       (C63570 * C73391 + C139301 * C73392) * C30392 +
                       C69584 * C30255 + C69344 * C30391) *
                          C139555 +
                      (C83925 + C83921 + C83920 + C83919) * C46915) *
                         C12024) *
                        C139398) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezy[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139562 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139563 +
           ((C77830 + C77829) * C30391 + (C78511 + C78510) * C30255 +
            (C89060 + C89061) * C30392 + (C89496 + C89497) * C139557) *
               C139301 * C12024) *
              C139529 +
          (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
            (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
               C139301 * C139563 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C139562 -
           ((C47004 * C73499 + C139555 * C73758 + C47003 * C26838 +
             C46915 * C27184) *
                C139557 +
            (C47004 * C73391 + C139555 * C73447 + C47003 * C26692 +
             C46915 * C26768) *
                C30392 +
            (C84029 + C84028) * C30255 + (C83386 + C83385) * C30391) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[86] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139562 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139563 +
           ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
             C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                C46915 +
            (C84138 + C84139) * C139555) *
               C139301 * C12024) *
              C139529 +
          (((C81659 + C81658) * C46915 + (C87142 + C87143) * C139555) *
               C139301 * C139563 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C139562 -
           ((C30856 * C73391 + C84132 + C84132 + C139557 * C73809 +
             C30855 * C20984 + C84133 + C84133 + C30255 * C21839) *
                C139555 +
            (C84139 + C84138) * C46915) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C9304 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139426) *
              C822 +
          (((C80545 + C80544) * C46915 + (C86290 + C86291) * C139555) *
               C139426 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) * C9304) *
              C823 +
          (((C76723 + C76722) * C46915 + (C82608 + C82609) * C139555) * C9304 -
           (((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139557 +
             C71373 * C30255) *
                C139555 +
            (C86291 + C86290) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C9304 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139426) *
              C139346 * C5151 +
          (((C77706 * C30255 + C77707 * C139557) * C46915 +
            (C80546 + C80547) * C139555) *
               C139426 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
             C79616 * C139557) *
                C46915 +
            (C78708 + C78714) * C139555) *
               C9304 -
           (((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C139557 +
             C78713 * C30255) *
                C139555 +
            ((C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C139557 +
             C79616 * C30255) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
            C77704 * C139557) *
               C46915 +
           (C76720 + C76721) * C139555) *
              C10614 -
          ((C80544 + C80545) * C139555 +
           (C77705 * C139557 + C77704 * C30255) * C46915) *
              C10615 +
          ((C77705 * C30255 + C88983 * C139557) * C46915 +
           (C83272 + C83278) * C139555) *
              C10616 -
          (((C63569 * C88973 + C88979 + C88979 + C139301 * C88975) * C139557 +
            C83277 * C30255) *
               C139555 +
           ((C63569 * C43304 + C88980 + C88980 + C139301 * C43308) * C139557 +
            C88983 * C30255) *
               C46915) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C9304 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139426) *
              C822 +
          ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                C30255 +
            ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                C139557) *
               C139426 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C9304) *
              C823 +
          ((((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C47003 * C838 + C46915 * C948 + C47004 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C30255 +
            ((C86398 + C86399) * C63570 + (C86400 + C86401) * C139301) *
                C139557) *
               C9304 -
           (((C47004 * C69081 + C139555 * C69171 + C47003 * C20986 +
              C46915 * C21102) *
                 C139301 +
             (C47004 * C69080 + C139555 * C69170 + C47003 * C20984 +
              C46915 * C21100) *
                 C63570) *
                C139557 +
            ((C86401 + C86400) * C139301 + (C86399 + C86398) * C63570) *
                C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C9304 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139426) *
              C139346 * C5151 +
          ((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                C30255 +
            ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                C139557) *
               C139426 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C9304) *
              C139346 * C5152 +
          ((((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) *
                C30255 +
            ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
                C139557) *
               C9304 -
           (((C47004 * C6326 + C139555 * C6412 + C47003 * C1773 +
              C46915 * C1883) *
                 C139301 +
             (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
              C46915 * C1875) *
                 C63570) *
                C139557 +
            ((C50821 + C50820) * C139301 + (C50819 + C50818) * C63570) *
                C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C63570 +
            (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                C139301) *
               C30255 +
           ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
               C139557) *
              C10614 -
          (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
               C139557 +
           ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
               C30255) *
              C10615 +
          (((C77830 + C77829) * C63570 + (C77828 + C77827) * C139301) * C30255 +
           ((C89060 + C89061) * C63570 + (C89062 + C89063) * C139301) *
               C139557) *
              C10616 -
          (((C47004 * C88974 + C139555 * C89050 + C47003 * C43306 +
             C46915 * C43390) *
                C139301 +
            (C47004 * C88973 + C139555 * C89049 + C47003 * C43304 +
             C46915 * C43388) *
                C63570) *
               C139557 +
           ((C89063 + C89062) * C139301 + (C89061 + C89060) * C63570) *
               C30255) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C9304 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139426) *
              C822 +
          ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                C46915 +
            ((C86508 + C86509) * C63570 + (C86510 + C86511) * C139301) *
                C139555) *
               C139426 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C9304) *
              C823 +
          ((((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) *
                C46915 +
            ((C82750 + C82751) * C63570 + (C82752 + C82753) * C139301) *
                C139555) *
               C9304 -
           (((C30392 * C69081 + C139557 * C69247 + C30391 * C24000 +
              C30255 * C24218) *
                 C139301 +
             (C30392 * C69080 + C139557 * C69246 + C30391 * C23998 +
              C30255 * C24216) *
                 C63570) *
                C139555 +
            ((C86511 + C86510) * C139301 + (C86509 + C86508) * C63570) *
                C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C9304 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139426) *
              C139346 * C5151 +
          ((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                C46915 +
            ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                C139555) *
               C139426 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          ((((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) *
                C46915 +
            ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
                C139555) *
               C9304 -
           (((C30392 * C6326 + C139557 * C6492 + C30391 * C4165 +
              C30255 * C4399) *
                 C139301 +
             (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
              C30255 * C4395) *
                 C63570) *
                C139555 +
            ((C34245 + C34244) * C139301 + (C34243 + C34242) * C63570) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C63570 +
            (C30391 * C112 + C30255 * C280 + C30392 * C1770 + C139557 * C1994) *
                C139301) *
               C46915 +
           ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
               C139555) *
              C10614 -
          (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
               C139555 +
           ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
             C30255 * C1994) *
                C139301 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C63570) *
               C46915) *
              C10615 +
          (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C63570 +
            (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
             C139557 * C10741) *
                C139301) *
               C46915 +
           ((C83495 + C83496) * C63570 + (C83497 + C83498) * C139301) *
               C139555) *
              C10616 -
          (((C30392 * C88974 + C139557 * C89130 + C30391 * C26694 +
             C30255 * C26840) *
                C139301 +
            (C30392 * C88973 + C139557 * C89129 + C30391 * C26692 +
             C30255 * C26838) *
                C63570) *
               C139555 +
           ((C30392 * C43306 + C139557 * C43470 + C30391 * C10623 +
             C30255 * C10741) *
                C139301 +
            (C30392 * C43304 + C139557 * C43468 + C30391 * C10620 +
             C30255 * C10738) *
                C63570) *
               C46915) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C47003 +
             (C63570 * C187 + C139301 * C360) * C46915 + C64376 * C47004 +
             C64377 * C139555) *
                C30255 +
            (C78063 + C78064 + C78031 + C78032) * C139557) *
               C9304 -
           ((C78033 + C78034 + C78065 + C78066) * C139557 +
            (C78032 + C78031 + C78064 + C78063) * C30255) *
               C139426) *
              C822 +
          (((C80962 + C80963 + C80964 + C80965) * C30255 +
            (C83601 + C83602 + C83603 + C83604) * C139557) *
               C139426 -
           ((C80965 + C80964 + C80963 + C80962) * C139557 +
            (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
             C64376 * C47003) *
                C30255) *
               C9304) *
              C823 +
          (((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
             C64380 * C139555) *
                C30255 +
            (C86610 + C86611 + C86612 + C86613) * C139557) *
               C9304 -
           (((C63570 * C69170 + C139301 * C69332) * C139555 +
             (C63570 * C69080 + C139301 * C69081) * C47004 + C69345 * C46915 +
             C69344 * C47003) *
                C139557 +
            (C86613 + C86612 + C86611 + C86610) * C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63570 * C106 + C139301 * C112) * C47003 +
                                 (C63570 * C187 + C139301 * C360) * C46915 +
                                 C64376 * C47004 + C64377 * C139555) *
                                    C30255 +
                                (C78063 + C78064 + C78031 + C78032) * C139557) *
                                   C9304 -
                               ((C78033 + C78034 + C78065 + C78066) * C139557 +
                                (C78032 + C78031 + C78064 + C78063) * C30255) *
                                   C139426) *
                                  C139346 * C5151 +
                              (((C78067 + C78068 + C78043 + C78044) * C30255 +
                                (C78069 + C78070 + C78071 + C78072) * C139557) *
                                   C139426 -
                               ((C78044 + C78043 + C78068 + C78067) * C139557 +
                                (C64383 * C139555 + C64382 * C47004 +
                                 (C63570 * C188 + C139301 * C361) * C46915 +
                                 (C63570 * C107 + C139301 * C113) * C47003) *
                                    C30255) *
                                   C9304) *
                                  C139346 * C5152 +
                              ((((C63570 * C108 + C139301 * C114) * C47003 +
                                 (C63570 * C189 + C139301 * C362) * C46915 +
                                 C65813 * C47004 + C65814 * C139555) *
                                    C30255 +
                                (C79919 + C79920 + C79915 + C79916) * C139557) *
                                   C9304 -
                               (((C63570 * C6409 + C139301 * C6569) * C139555 +
                                 (C63570 * C6323 + C139301 * C6326) * C47004 +
                                 (C63570 * C1875 + C139301 * C2103) * C46915 +
                                 (C63570 * C1765 + C139301 * C1773) * C47003) *
                                    C139557 +
                                (C79916 + C79915 + C79920 + C79919) * C30255) *
                                   C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C47003 +
            (C63570 * C187 + C139301 * C360) * C46915 + C64376 * C47004 +
            C64377 * C139555) *
               C30255 +
           (C78063 + C78064 + C78031 + C78032) * C139557) *
              C10614 -
          ((C78033 + C78034 + C78065 + C78066) * C139557 +
           (C78032 + C78031 + C78064 + C78063) * C30255) *
              C10615 +
          ((C78066 + C78065 + C78034 + C78033) * C30255 +
           (C89207 + C89208 + C89203 + C89204) * C139557) *
              C10616 -
          (((C63570 * C89049 + C139301 * C89197) * C139555 +
            (C63570 * C88973 + C139301 * C88974) * C47004 +
            (C63570 * C43388 + C139301 * C43538) * C46915 +
            (C63570 * C43304 + C139301 * C43306) * C47003) *
               C139557 +
           (C89204 + C89203 + C89208 + C89207) * C30255) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[87] += (-std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C9304 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139426) *
                        C822 +
                    (((C81108 + C81109) * C139301 * C30255 +
                      (C83715 + C83716) * C139301 * C139557) *
                         C139426 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C9304) *
                        C823 +
                    (((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C139301 * C30255 +
                      (C86722 + C86723) * C139301 * C139557) *
                         C9304 -
                     ((C47240 * C69080 + C86716 + C86716 + C139555 * C69419 +
                       C47239 * C20984 + C86717 + C86717 + C46915 * C21426) *
                          C139301 * C139557 +
                      (C86723 + C86722) * C139301 * C30255) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C9304 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139426) *
                        C139346 * C5151 +
                    (((C49239 + C49238) * C139301 * C30255 +
                      (C49240 + C49241) * C139301 * C139557) *
                         C139426 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C9304) *
                        C139346 * C5152 +
                    (((C47279 + C47278) * C139301 * C30255 +
                      (C51126 + C51127) * C139301 * C139557) *
                         C9304 -
                     ((C47240 * C6323 + C49228 + C49228 + C139555 * C6646 +
                       C47239 * C1765 + C49229 + C49229 + C46915 * C2185) *
                          C139301 * C139557 +
                      (C51127 + C51126) * C139301 * C30255) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                      C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                         C139301 * C30255 +
                     (C78187 + C78188) * C139301 * C139557) *
                        C10614 -
                    ((C78189 + C78190) * C139301 * C139557 +
                     (C78188 + C78187) * C139301 * C30255) *
                        C10615 +
                    ((C78190 + C78189) * C139301 * C30255 +
                     (C89286 + C89287) * C139301 * C139557) *
                        C10616 -
                    ((C47240 * C88973 + C89280 + C89280 + C139555 * C89274 +
                      C47239 * C43304 + C89281 + C89281 + C46915 * C43618) *
                         C139301 * C139557 +
                     (C89287 + C89286) * C139301 * C30255) *
                        C10617) *
                   C139346 * C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C9304 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139426) *
              C822 +
          (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
            (C86508 + C86509) * C47004 + (C86826 + C86827) * C139555) *
               C139301 * C139426 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C9304) *
              C823 +
          (((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
            (C82750 + C82751) * C47004 + (C82958 + C82959) * C139555) *
               C139301 * C9304 -
           ((C30392 * C69170 + C139557 * C69497 + C30391 * C24114 +
             C30255 * C24544) *
                C139555 +
            (C30392 * C69080 + C139557 * C69246 + C30391 * C23998 +
             C30255 * C24216) *
                C47004 +
            (C86827 + C86826) * C46915 + (C86509 + C86508) * C47003) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C9304 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
            (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
               C139301 * C139426 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
            (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
               C139301 * C9304 -
           ((C30392 * C6409 + C139557 * C6726 + C30391 * C4277 +
             C30255 * C4731) *
                C139555 +
            (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
             C30255 * C4395) *
                C47004 +
            (C34559 + C34558) * C46915 + (C34243 + C34242) * C47003) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
               C47003 +
           (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
               C46915 +
           (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
              C139301 * C10614 -
          ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
           (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
            C30255 * C2292) *
               C46915 +
           (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
            C30255 * C1986) *
               C47003) *
              C139301 * C10615 +
          ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
            C139557 * C10738) *
               C47003 +
           (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
            C139557 * C10903) *
               C46915 +
           (C83495 + C83496) * C47004 + (C83819 + C83820) * C139555) *
              C139301 * C10616 -
          ((C30392 * C89049 + C139557 * C89353 + C30391 * C26768 +
            C30255 * C27048) *
               C139555 +
           (C30392 * C88973 + C139557 * C89129 + C30391 * C26692 +
            C30255 * C26838) *
               C47004 +
           (C30392 * C43388 + C139557 * C43695 + C30391 * C10682 +
            C30255 * C10903) *
               C46915 +
           (C30392 * C43304 + C139557 * C43468 + C30391 * C10620 +
            C30255 * C10738) *
               C47003) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[87] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C30391 +
             (C63570 * C274 + C139301 * C577) * C30255 + C78053 * C30392 +
             C78397 * C139557) *
                C46915 +
            (C77352 + C77353 + C77354 + C77355) * C139555) *
               C9304 -
           ((C81376 + C81377 + C81378 + C81379) * C139555 +
            (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
             C78053 * C30391) *
                C46915) *
               C139426) *
              C822 +
          (((C81379 + C81378 + C81377 + C81376) * C46915 +
            (C86926 + C86927 + C86928 + C86929) * C139555) *
               C139426 -
           ((C77356 + C77357 + C77358 + C77359) * C139555 +
            (C77355 + C77354 + C77353 + C77352) * C46915) *
               C9304) *
              C823 +
          (((C77359 + C77358 + C77357 + C77356) * C46915 +
            (C83026 + C83027 + C83028 + C83029) * C139555) *
               C9304 -
           (((C63570 * C69246 + C139301 * C69575) * C139557 +
             (C63570 * C69080 + C139301 * C69081) * C30392 + C71852 * C30255 +
             C71615 * C30391) *
                C139555 +
            (C86929 + C86928 + C86927 + C86926) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C63570 * C106 + C139301 * C112) * C30391 +
                                 (C63570 * C274 + C139301 * C577) * C30255 +
                                 C78053 * C30392 + C78397 * C139557) *
                                    C46915 +
                                (C77352 + C77353 + C77354 + C77355) * C139555) *
                                   C9304 -
                               ((C81376 + C81377 + C81378 + C81379) * C139555 +
                                (C78398 * C139557 + C78056 * C30392 +
                                 C78397 * C30255 + C78053 * C30391) *
                                    C46915) *
                                   C139426) *
                                  C139346 * C5151 +
                              (((C78057 * C30391 + C78399 * C30255 +
                                 C78059 * C30392 + C78400 * C139557) *
                                    C46915 +
                                (C81380 + C81381 + C81382 + C81383) * C139555) *
                                   C139426 -
                               ((C77363 + C77362 + C77361 + C77360) * C139555 +
                                (C78399 * C139557 + C78057 * C30392 +
                                 (C63570 * C275 + C139301 * C578) * C30255 +
                                 (C63570 * C107 + C139301 * C113) * C30391) *
                                    C46915) *
                                   C9304) *
                                  C139346 * C5152 +
                              ((((C63570 * C108 + C139301 * C114) * C30391 +
                                 (C63570 * C276 + C139301 * C579) * C30255 +
                                 C79917 * C30392 + C80217 * C139557) *
                                    C46915 +
                                (C79309 + C79310 + C79311 + C79315) * C139555) *
                                   C9304 -
                               (((C63570 * C6489 + C139301 * C6803) * C139557 +
                                 (C63570 * C6323 + C139301 * C6326) * C30392 +
                                 C79314 * C30255 + C79013 * C30391) *
                                    C139555 +
                                ((C63570 * C1989 + C139301 * C2397) * C139557 +
                                 (C63570 * C1765 + C139301 * C1773) * C30392 +
                                 C80217 * C30255 + C79917 * C30391) *
                                    C46915) *
                                   C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C30391 +
            (C63570 * C274 + C139301 * C577) * C30255 + C78053 * C30392 +
            C78397 * C139557) *
               C46915 +
           (C77352 + C77353 + C77354 + C77355) * C139555) *
              C10614 -
          ((C81376 + C81377 + C81378 + C81379) * C139555 +
           (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
            C78053 * C30391) *
               C46915) *
              C10615 +
          ((C78056 * C30391 + C78398 * C30255 + C89205 * C30392 +
            C89424 * C139557) *
               C46915 +
           (C83919 + C83920 + C83921 + C83925) * C139555) *
              C10616 -
          (((C63570 * C89129 + C139301 * C89420) * C139557 +
            (C63570 * C88973 + C139301 * C88974) * C30392 + C83924 * C30255 +
            C83605 * C30391) *
               C139555 +
           ((C63570 * C43468 + C139301 * C43763) * C139557 +
            (C63570 * C43304 + C139301 * C43306) * C30392 + C89424 * C30255 +
            C89205 * C30391) *
               C46915) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C9304 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139426) *
              C822 +
          (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
            (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
               C139301 * C139426 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C9304) *
              C823 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C30391 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C30255 +
            (C86398 + C86399) * C30392 + (C87032 + C87033) * C139557) *
               C139301 * C9304 -
           ((C47004 * C69246 + C139555 * C69660 + C47003 * C21202 +
             C46915 * C21739) *
                C139557 +
            (C47004 * C69080 + C139555 * C69170 + C47003 * C20984 +
             C46915 * C21100) *
                C30392 +
            (C87033 + C87032) * C30255 + (C86399 + C86398) * C30391) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C9304 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
            (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
               C139301 * C139426 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
            (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
               C139301 * C9304 -
           ((C47004 * C6489 + C139555 * C6880 + C47003 * C1989 +
             C46915 * C2479) *
                C139557 +
            (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
             C46915 * C1875) *
                C30392 +
            (C51431 + C51430) * C30255 + (C50819 + C50818) * C30391) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
               C30391 +
           (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
               C30255 +
           (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
              C139301 * C10614 -
          ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
           (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
              C139301 * C10615 +
          ((C77830 + C77829) * C30391 + (C78511 + C78510) * C30255 +
           (C89060 + C89061) * C30392 + (C89496 + C89497) * C139557) *
              C139301 * C10616 -
          ((C47004 * C89129 + C139555 * C89490 + C47003 * C43468 +
            C46915 * C43837) *
               C139557 +
           (C47004 * C88973 + C139555 * C89049 + C47003 * C43304 +
            C46915 * C43388) *
               C30392 +
           (C89497 + C89496) * C30255 + (C89061 + C89060) * C30391) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[87] +=
        (-std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C9304 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139426) *
              C822 +
          (((C81659 + C81658) * C46915 + (C87142 + C87143) * C139555) *
               C139301 * C139426 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C9304) *
              C823 +
          (((C77583 + C77582) * C46915 + (C83172 + C83173) * C139555) *
               C139301 * C9304 -
           ((C30856 * C69080 + C87136 + C87136 + C139557 * C69735 +
             C30855 * C23998 + C87137 + C87137 + C30255 * C24853) *
                C139555 +
            (C87143 + C87142) * C46915) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C9304 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
               C139301 * C139426 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) *
               C139301 * C9304 -
           ((C30856 * C6323 + C36116 + C36116 + C139557 * C6957 +
             C30855 * C4161 + C36117 + C36117 + C30255 * C5057) *
                C139555 +
            (C34875 + C34874) * C46915) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
            C30859 + C30859 + C139557 * C2578) *
               C46915 +
           (C77580 + C77581) * C139555) *
              C139301 * C10614 -
          ((C81658 + C81659) * C139555 +
           (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
            C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
               C46915) *
              C139301 * C10615 +
          ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
            C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
               C46915 +
           (C84138 + C84139) * C139555) *
              C139301 * C10616 -
          ((C30856 * C88973 + C89565 + C89565 + C139557 * C89563 +
            C30855 * C26692 + C89566 + C89566 + C30255 * C27252) *
               C139555 +
           (C30856 * C43304 + C43912 + C43912 + C139557 * C43908 +
            C30855 * C10620 + C43913 + C43913 + C30255 * C11062) *
               C46915) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C139562 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139563 +
           ((C77705 * C30255 + C88983 * C139557) * C46915 +
            (C83272 + C83278) * C139555) *
               C12024) *
              C139346 * C139521 +
          (((C77706 * C30255 + C77707 * C139557) * C46915 +
            (C80546 + C80547) * C139555) *
               C139563 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C139562 -
           (((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C139557 +
             C77708 * C30255) *
                C139555 +
            ((C63569 * C10619 + C77693 + C77693 + C139301 * C10625) * C139557 +
             C77707 * C30255) *
                C46915) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C139562 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139563 +
           (((C77830 + C77829) * C63570 + (C77828 + C77827) * C139301) *
                C30255 +
            ((C89060 + C89061) * C63570 + (C89062 + C89063) * C139301) *
                C139557) *
               C12024) *
              C139346 * C139521 +
          ((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                C30255 +
            ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                C139557) *
               C139563 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C139562 -
           (((C47004 * C26693 + C139555 * C26769 + C47003 * C10622 +
              C46915 * C10684) *
                 C139301 +
             (C47004 * C26691 + C139555 * C26767 + C47003 * C10619 +
              C46915 * C10681) *
                 C63570) *
                C139557 +
            ((C48915 + C48914) * C139301 + (C48913 + C48912) * C63570) *
                C30255) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C139562 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139563 +
           (((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C30391 * C1771 + C30255 * C1995 + C30392 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C46915 +
            ((C83495 + C83496) * C63570 + (C83497 + C83498) * C139301) *
                C139555) *
               C12024) *
              C139346 * C139521 +
          ((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                C46915 +
            ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                C139555) *
               C139563 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C139562 -
           (((C30392 * C26693 + C139557 * C26839 + C30391 * C6327 +
              C30255 * C6493) *
                 C139301 +
             (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
              C30255 * C6490) *
                 C63570) *
                C139555 +
            ((C32263 + C32262) * C139301 + (C32261 + C32260) * C63570) *
                C46915) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C139562 -
                     ((C78033 + C78034 + C78065 + C78066) * C139557 +
                      (C78032 + C78031 + C78064 + C78063) * C30255) *
                         C139563 +
                     ((C78066 + C78065 + C78034 + C78033) * C30255 +
                      (C89207 + C89208 + C89203 + C89204) * C139557) *
                         C12024) *
                        C139346 * C139521 +
                    (((C78067 + C78068 + C78043 + C78044) * C30255 +
                      (C78069 + C78070 + C78071 + C78072) * C139557) *
                         C139563 -
                     ((C78044 + C78043 + C78068 + C78067) * C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C139562 -
                     (((C63570 * C26767 + C139301 * C26907) * C139555 +
                       (C63570 * C26691 + C139301 * C26693) * C47004 +
                       (C63570 * C10681 + C139301 * C10793) * C46915 +
                       (C63570 * C10619 + C139301 * C10622) * C47003) *
                          C139557 +
                      (C78072 + C78071 + C78070 + C78069) * C30255) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C139562 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139563 +
                     ((C78190 + C78189) * C139301 * C30255 +
                      (C89286 + C89287) * C139301 * C139557) *
                         C12024) *
                        C139346 * C139521 +
                    (((C49239 + C49238) * C139301 * C30255 +
                      (C49240 + C49241) * C139301 * C139557) *
                         C139563 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C139562 -
                     ((C47240 * C26691 + C60314 + C60314 + C139555 * C26975 +
                       C47239 * C10619 + C60315 + C60315 + C46915 * C10846) *
                          C139301 * C139557 +
                      (C49241 + C49240) * C139301 * C30255) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C139562 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139563 +
           ((C30391 * C1763 + C30255 * C1987 + C30392 * C10620 +
             C139557 * C10738) *
                C47003 +
            (C30391 * C1873 + C30255 * C2293 + C30392 * C10682 +
             C139557 * C10903) *
                C46915 +
            (C83495 + C83496) * C47004 + (C83819 + C83820) * C139555) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
            (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
               C139301 * C139563 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C139562 -
           ((C30392 * C26767 + C139557 * C27047 + C30391 * C6410 +
             C30255 * C6727) *
                C139555 +
            (C30392 * C26691 + C139557 * C26837 + C30391 * C6324 +
             C30255 * C6490) *
                C47004 +
            (C32640 + C32639) * C46915 + (C32261 + C32260) * C47003) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[88] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C139562 -
                     ((C81376 + C81377 + C81378 + C81379) * C139555 +
                      (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                       C78053 * C30391) *
                          C46915) *
                         C139563 +
                     ((C78056 * C30391 + C78398 * C30255 + C89205 * C30392 +
                       C89424 * C139557) *
                          C46915 +
                      (C83919 + C83920 + C83921 + C83925) * C139555) *
                         C12024) *
                        C139346 * C139521 +
                    (((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
                       C78400 * C139557) *
                          C46915 +
                      (C81380 + C81381 + C81382 + C81383) * C139555) *
                         C139563 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      (C78399 * C139557 + C78057 * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C139562 -
                     (((C63570 * C26837 + C139301 * C27115) * C139557 +
                       (C63570 * C26691 + C139301 * C26693) * C30392 +
                       C78401 * C30255 + C78061 * C30391) *
                          C139555 +
                      ((C63570 * C10737 + C139301 * C10955) * C139557 +
                       (C63570 * C10619 + C139301 * C10622) * C30392 +
                       C78400 * C30255 + C78059 * C30391) *
                          C46915) *
                         C12024) *
                        C139346 * C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C139562 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139563 +
           ((C77830 + C77829) * C30391 + (C78511 + C78510) * C30255 +
            (C89060 + C89061) * C30392 + (C89496 + C89497) * C139557) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
            (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
               C139301 * C139563 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C139562 -
           ((C47004 * C26837 + C139555 * C27183 + C47003 * C10737 +
             C46915 * C11008) *
                C139557 +
            (C47004 * C26691 + C139555 * C26767 + C47003 * C10619 +
             C46915 * C10681) *
                C30392 +
            (C49555 + C49554) * C30255 + (C48913 + C48912) * C30391) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[88] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C139562 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139563 +
           ((C30855 * C1763 + C32984 + C32984 + C30255 * C2579 +
             C30856 * C10620 + C32985 + C32985 + C139557 * C11062) *
                C46915 +
            (C84138 + C84139) * C139555) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
               C139301 * C139563 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C139562 -
           ((C30856 * C26691 + C38510 + C38510 + C139557 * C27251 +
             C30855 * C6324 + C38511 + C38511 + C30255 * C6958) *
                C139555 +
            (C33007 + C33006) * C46915) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C9304 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139426) *
              C139346 * C5151 +
          (((C77706 * C30255 + C77707 * C139557) * C46915 +
            (C80546 + C80547) * C139555) *
               C139426 -
           ((C76725 + C76724) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C30255) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C30255 +
             C79616 * C139557) *
                C46915 +
            (C78708 + C78714) * C139555) *
               C9304 -
           (((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C139557 +
             C78713 * C30255) *
                C139555 +
            ((C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C139557 +
             C79616 * C30255) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C30255 +
             C77704 * C139557) *
                C46915 +
            (C76720 + C76721) * C139555) *
               C9304 -
           ((C80544 + C80545) * C139555 +
            (C77705 * C139557 + C77704 * C30255) * C46915) *
               C139426) *
              C822 +
          (((C80545 + C80544) * C46915 + (C86290 + C86291) * C139555) *
               C139426 -
           ((C76722 + C76723) * C139555 + (C76721 + C76720) * C46915) * C9304) *
              C823 +
          (((C76723 + C76722) * C46915 + (C82608 + C82609) * C139555) * C9304 -
           (((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139557 +
             C71373 * C30255) *
                C139555 +
            (C86291 + C86290) * C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C9304 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139426) *
              C139346 * C5151 +
          ((((C48911 + C48910) * C63570 + (C48909 + C48908) * C139301) *
                C30255 +
            ((C48912 + C48913) * C63570 + (C48914 + C48915) * C139301) *
                C139557) *
               C139426 -
           (((C48908 + C48909) * C139301 + (C48910 + C48911) * C63570) *
                C139557 +
            ((C47033 + C47032) * C139301 + (C47031 + C47030) * C63570) *
                C30255) *
               C9304) *
              C139346 * C5152 +
          ((((C47037 + C47036) * C63570 + (C47035 + C47034) * C139301) *
                C30255 +
            ((C50818 + C50819) * C63570 + (C50820 + C50821) * C139301) *
                C139557) *
               C9304 -
           (((C47004 * C6326 + C139555 * C6412 + C47003 * C1773 +
              C46915 * C1883) *
                 C139301 +
             (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
              C46915 * C1875) *
                 C63570) *
                C139557 +
            ((C50821 + C50820) * C139301 + (C50819 + C50818) * C63570) *
                C30255) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                 C63570 +
             (C47003 * C112 + C46915 * C193 + C47004 * C837 + C139555 * C947) *
                 C139301) *
                C30255 +
            ((C77823 + C77824) * C63570 + (C77825 + C77826) * C139301) *
                C139557) *
               C9304 -
           (((C77827 + C77828) * C139301 + (C77829 + C77830) * C63570) *
                C139557 +
            ((C77826 + C77825) * C139301 + (C77824 + C77823) * C63570) *
                C30255) *
               C139426) *
              C822 +
          ((((C80686 + C80687) * C63570 + (C80688 + C80689) * C139301) *
                C30255 +
            ((C83385 + C83386) * C63570 + (C83387 + C83388) * C139301) *
                C139557) *
               C139426 -
           (((C80689 + C80688) * C139301 + (C80687 + C80686) * C63570) *
                C139557 +
            ((C47004 * C838 + C139555 * C948 + C47003 * C837 + C46915 * C947) *
                 C139301 +
             (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                 C63570) *
                C30255) *
               C9304) *
              C823 +
          ((((C47003 * C830 + C46915 * C940 + C47004 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C47003 * C838 + C46915 * C948 + C47004 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C30255 +
            ((C86398 + C86399) * C63570 + (C86400 + C86401) * C139301) *
                C139557) *
               C9304 -
           (((C47004 * C69081 + C139555 * C69171 + C47003 * C20986 +
              C46915 * C21102) *
                 C139301 +
             (C47004 * C69080 + C139555 * C69170 + C47003 * C20984 +
              C46915 * C21100) *
                 C63570) *
                C139557 +
            ((C86401 + C86400) * C139301 + (C86399 + C86398) * C63570) *
                C30255) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C9304 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139426) *
              C139346 * C5151 +
          ((((C32259 + C32258) * C63570 + (C32257 + C32256) * C139301) *
                C46915 +
            ((C35294 + C35295) * C63570 + (C35296 + C35297) * C139301) *
                C139555) *
               C139426 -
           (((C31214 + C31215) * C139301 + (C31216 + C31217) * C63570) *
                C139555 +
            ((C30421 + C30420) * C139301 + (C30419 + C30418) * C63570) *
                C46915) *
               C9304) *
              C139346 * C5152 +
          ((((C30425 + C30424) * C63570 + (C30423 + C30422) * C139301) *
                C46915 +
            ((C33310 + C33311) * C63570 + (C33312 + C33313) * C139301) *
                C139555) *
               C9304 -
           (((C30392 * C6326 + C139557 * C6492 + C30391 * C4165 +
              C30255 * C4399) *
                 C139301 +
             (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
              C30255 * C4395) *
                 C63570) *
                C139555 +
            ((C34245 + C34244) * C139301 + (C34243 + C34242) * C63570) *
                C46915) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30391 * C106 + C30255 * C274 + C30392 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C30391 * C112 + C30255 * C280 + C30392 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C46915 +
            ((C76940 + C76941) * C63570 + (C76942 + C76943) * C139301) *
                C139555) *
               C9304 -
           (((C80828 + C80829) * C139301 + (C80830 + C80831) * C63570) *
                C139555 +
            ((C30392 * C1771 + C139557 * C1995 + C30391 * C1770 +
              C30255 * C1994) *
                 C139301 +
             (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
              C30255 * C1986) *
                 C63570) *
                C46915) *
               C139426) *
              C822 +
          ((((C80831 + C80830) * C63570 + (C80829 + C80828) * C139301) *
                C46915 +
            ((C86508 + C86509) * C63570 + (C86510 + C86511) * C139301) *
                C139555) *
               C139426 -
           (((C76944 + C76945) * C139301 + (C76946 + C76947) * C63570) *
                C139555 +
            ((C76943 + C76942) * C139301 + (C76941 + C76940) * C63570) *
                C46915) *
               C9304) *
              C823 +
          ((((C76947 + C76946) * C63570 + (C76945 + C76944) * C139301) *
                C46915 +
            ((C82750 + C82751) * C63570 + (C82752 + C82753) * C139301) *
                C139555) *
               C9304 -
           (((C30392 * C69081 + C139557 * C69247 + C30391 * C24000 +
              C30255 * C24218) *
                 C139301 +
             (C30392 * C69080 + C139557 * C69246 + C30391 * C23998 +
              C30255 * C24216) *
                 C63570) *
                C139555 +
            ((C86511 + C86510) * C139301 + (C86509 + C86508) * C63570) *
                C46915) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[89] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C9304 -
                     ((C78033 + C78034 + C78065 + C78066) * C139557 +
                      (C78032 + C78031 + C78064 + C78063) * C30255) *
                         C139426) *
                        C139346 * C5151 +
                    (((C78067 + C78068 + C78043 + C78044) * C30255 +
                      (C78069 + C78070 + C78071 + C78072) * C139557) *
                         C139426 -
                     ((C78044 + C78043 + C78068 + C78067) * C139557 +
                      (C64383 * C139555 + C64382 * C47004 +
                       (C63570 * C188 + C139301 * C361) * C46915 +
                       (C63570 * C107 + C139301 * C113) * C47003) *
                          C30255) *
                         C9304) *
                        C139346 * C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C47003 +
                       (C63570 * C189 + C139301 * C362) * C46915 +
                       C65813 * C47004 + C65814 * C139555) *
                          C30255 +
                      (C79919 + C79920 + C79915 + C79916) * C139557) *
                         C9304 -
                     (((C63570 * C6409 + C139301 * C6569) * C139555 +
                       (C63570 * C6323 + C139301 * C6326) * C47004 +
                       (C63570 * C1875 + C139301 * C2103) * C46915 +
                       (C63570 * C1765 + C139301 * C1773) * C47003) *
                          C139557 +
                      (C79916 + C79915 + C79920 + C79919) * C30255) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C47003 +
                       (C63570 * C187 + C139301 * C360) * C46915 +
                       C64376 * C47004 + C64377 * C139555) *
                          C30255 +
                      (C78063 + C78064 + C78031 + C78032) * C139557) *
                         C9304 -
                     ((C78033 + C78034 + C78065 + C78066) * C139557 +
                      (C78032 + C78031 + C78064 + C78063) * C30255) *
                         C139426) *
                        C822 +
                    (((C80962 + C80963 + C80964 + C80965) * C30255 +
                      (C83601 + C83602 + C83603 + C83604) * C139557) *
                         C139426 -
                     ((C80965 + C80964 + C80963 + C80962) * C139557 +
                      (C64379 * C139555 + C64378 * C47004 + C64377 * C46915 +
                       C64376 * C47003) *
                          C30255) *
                         C9304) *
                        C823 +
                    (((C64378 * C47003 + C64379 * C46915 + C64381 * C47004 +
                       C64380 * C139555) *
                          C30255 +
                      (C86610 + C86611 + C86612 + C86613) * C139557) *
                         C9304 -
                     (((C63570 * C69170 + C139301 * C69332) * C139555 +
                       (C63570 * C69080 + C139301 * C69081) * C47004 +
                       C69345 * C46915 + C69344 * C47003) *
                          C139557 +
                      (C86613 + C86612 + C86611 + C86610) * C30255) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[89] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C9304 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139426) *
                        C139346 * C5151 +
                    (((C49239 + C49238) * C139301 * C30255 +
                      (C49240 + C49241) * C139301 * C139557) *
                         C139426 -
                     ((C49238 + C49239) * C139301 * C139557 +
                      (C47277 + C47276) * C139301 * C30255) *
                         C9304) *
                        C139346 * C5152 +
                    (((C47279 + C47278) * C139301 * C30255 +
                      (C51126 + C51127) * C139301 * C139557) *
                         C9304 -
                     ((C47240 * C6323 + C49228 + C49228 + C139555 * C6646 +
                       C47239 * C1765 + C49229 + C49229 + C46915 * C2185) *
                          C139301 * C139557 +
                      (C51127 + C51126) * C139301 * C30255) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C47239 * C106 + C47242 + C47242 + C46915 * C417 +
                       C47240 * C829 + C47243 + C47243 + C139555 * C1249) *
                          C139301 * C30255 +
                      (C78187 + C78188) * C139301 * C139557) *
                         C9304 -
                     ((C78189 + C78190) * C139301 * C139557 +
                      (C78188 + C78187) * C139301 * C30255) *
                         C139426) *
                        C822 +
                    (((C81108 + C81109) * C139301 * C30255 +
                      (C83715 + C83716) * C139301 * C139557) *
                         C139426 -
                     ((C81109 + C81108) * C139301 * C139557 +
                      (C47240 * C830 + C48214 + C48214 + C139555 * C1250 +
                       C47239 * C829 + C48215 + C48215 + C46915 * C1249) *
                          C139301 * C30255) *
                         C9304) *
                        C823 +
                    (((C47239 * C830 + C48216 + C48216 + C46915 * C1250 +
                       C47240 * C5803 + C48217 + C48217 + C139555 * C6030) *
                          C139301 * C30255 +
                      (C86722 + C86723) * C139301 * C139557) *
                         C9304 -
                     ((C47240 * C69080 + C86716 + C86716 + C139555 * C69419 +
                       C47239 * C20984 + C86717 + C86717 + C46915 * C21426) *
                          C139301 * C139557 +
                      (C86723 + C86722) * C139301 * C30255) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C9304 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C32259 + C32258) * C47003 + (C32638 + C32637) * C46915 +
            (C35294 + C35295) * C47004 + (C35706 + C35707) * C139555) *
               C139301 * C139426 -
           ((C31529 + C31530) * C139555 + (C31216 + C31217) * C47004 +
            (C30641 + C30640) * C46915 + (C30419 + C30418) * C47003) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C30425 + C30424) * C47003 + (C30643 + C30642) * C46915 +
            (C33310 + C33311) * C47004 + (C33612 + C33613) * C139555) *
               C139301 * C9304 -
           ((C30392 * C6409 + C139557 * C6726 + C30391 * C4277 +
             C30255 * C4731) *
                C139555 +
            (C30392 * C6323 + C139557 * C6489 + C30391 * C4161 +
             C30255 * C4395) *
                C47004 +
            (C34559 + C34558) * C46915 + (C34243 + C34242) * C47003) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30391 * C106 + C30255 * C274 + C30392 * C1762 + C139557 * C1986) *
                C47003 +
            (C30391 * C187 + C30255 * C499 + C30392 * C1872 + C139557 * C2292) *
                C46915 +
            (C76940 + C76941) * C47004 + (C77250 + C77251) * C139555) *
               C139301 * C9304 -
           ((C81244 + C81245) * C139555 + (C80830 + C80831) * C47004 +
            (C30392 * C1873 + C139557 * C2293 + C30391 * C1872 +
             C30255 * C2292) *
                C46915 +
            (C30392 * C1763 + C139557 * C1987 + C30391 * C1762 +
             C30255 * C1986) *
                C47003) *
               C139301 * C139426) *
              C822 +
          (((C80831 + C80830) * C47003 + (C81245 + C81244) * C46915 +
            (C86508 + C86509) * C47004 + (C86826 + C86827) * C139555) *
               C139301 * C139426 -
           ((C77252 + C77253) * C139555 + (C76946 + C76947) * C47004 +
            (C77251 + C77250) * C46915 + (C76941 + C76940) * C47003) *
               C139301 * C9304) *
              C823 +
          (((C76947 + C76946) * C47003 + (C77253 + C77252) * C46915 +
            (C82750 + C82751) * C47004 + (C82958 + C82959) * C139555) *
               C139301 * C9304 -
           ((C30392 * C69170 + C139557 * C69497 + C30391 * C24114 +
             C30255 * C24544) *
                C139555 +
            (C30392 * C69080 + C139557 * C69246 + C30391 * C23998 +
             C30255 * C24216) *
                C47004 +
            (C86827 + C86826) * C46915 + (C86509 + C86508) * C47003) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[89] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C9304 -
                     ((C81376 + C81377 + C81378 + C81379) * C139555 +
                      (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                       C78053 * C30391) *
                          C46915) *
                         C139426) *
                        C139346 * C5151 +
                    (((C78057 * C30391 + C78399 * C30255 + C78059 * C30392 +
                       C78400 * C139557) *
                          C46915 +
                      (C81380 + C81381 + C81382 + C81383) * C139555) *
                         C139426 -
                     ((C77363 + C77362 + C77361 + C77360) * C139555 +
                      (C78399 * C139557 + C78057 * C30392 +
                       (C63570 * C275 + C139301 * C578) * C30255 +
                       (C63570 * C107 + C139301 * C113) * C30391) *
                          C46915) *
                         C9304) *
                        C139346 * C5152 +
                    ((((C63570 * C108 + C139301 * C114) * C30391 +
                       (C63570 * C276 + C139301 * C579) * C30255 +
                       C79917 * C30392 + C80217 * C139557) *
                          C46915 +
                      (C79309 + C79310 + C79311 + C79315) * C139555) *
                         C9304 -
                     (((C63570 * C6489 + C139301 * C6803) * C139557 +
                       (C63570 * C6323 + C139301 * C6326) * C30392 +
                       C79314 * C30255 + C79013 * C30391) *
                          C139555 +
                      ((C63570 * C1989 + C139301 * C2397) * C139557 +
                       (C63570 * C1765 + C139301 * C1773) * C30392 +
                       C80217 * C30255 + C79917 * C30391) *
                          C46915) *
                         C139426) *
                        C139346 * C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C63570 * C106 + C139301 * C112) * C30391 +
                       (C63570 * C274 + C139301 * C577) * C30255 +
                       C78053 * C30392 + C78397 * C139557) *
                          C46915 +
                      (C77352 + C77353 + C77354 + C77355) * C139555) *
                         C9304 -
                     ((C81376 + C81377 + C81378 + C81379) * C139555 +
                      (C78398 * C139557 + C78056 * C30392 + C78397 * C30255 +
                       C78053 * C30391) *
                          C46915) *
                         C139426) *
                        C822 +
                    (((C81379 + C81378 + C81377 + C81376) * C46915 +
                      (C86926 + C86927 + C86928 + C86929) * C139555) *
                         C139426 -
                     ((C77356 + C77357 + C77358 + C77359) * C139555 +
                      (C77355 + C77354 + C77353 + C77352) * C46915) *
                         C9304) *
                        C823 +
                    (((C77359 + C77358 + C77357 + C77356) * C46915 +
                      (C83026 + C83027 + C83028 + C83029) * C139555) *
                         C9304 -
                     (((C63570 * C69246 + C139301 * C69575) * C139557 +
                       (C63570 * C69080 + C139301 * C69081) * C30392 +
                       C71852 * C30255 + C71615 * C30391) *
                          C139555 +
                      (C86929 + C86928 + C86927 + C86926) * C46915) *
                         C139426) *
                        C824) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezy[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C9304 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C48911 + C48910) * C30391 + (C49553 + C49552) * C30255 +
            (C48912 + C48913) * C30392 + (C49554 + C49555) * C139557) *
               C139301 * C139426 -
           ((C49552 + C49553) * C139557 + (C48910 + C48911) * C30392 +
            (C47505 + C47504) * C30255 + (C47031 + C47030) * C30391) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C47037 + C47036) * C30391 + (C47507 + C47506) * C30255 +
            (C50818 + C50819) * C30392 + (C51430 + C51431) * C139557) *
               C139301 * C9304 -
           ((C47004 * C6489 + C139555 * C6880 + C47003 * C1989 +
             C46915 * C2479) *
                C139557 +
            (C47004 * C6323 + C139555 * C6409 + C47003 * C1765 +
             C46915 * C1875) *
                C30392 +
            (C51431 + C51430) * C30255 + (C50819 + C50818) * C30391) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47003 * C106 + C46915 * C187 + C47004 * C829 + C139555 * C939) *
                C30391 +
            (C47003 * C274 + C46915 * C633 + C47004 * C1053 + C139555 * C1543) *
                C30255 +
            (C77823 + C77824) * C30392 + (C78508 + C78509) * C139557) *
               C139301 * C9304 -
           ((C78510 + C78511) * C139557 + (C77829 + C77830) * C30392 +
            (C78509 + C78508) * C30255 + (C77824 + C77823) * C30391) *
               C139301 * C139426) *
              C822 +
          (((C80686 + C80687) * C30391 + (C81518 + C81519) * C30255 +
            (C83385 + C83386) * C30392 + (C84028 + C84029) * C139557) *
               C139301 * C139426 -
           ((C81519 + C81518) * C139557 + (C80687 + C80686) * C30392 +
            (C47004 * C1054 + C139555 * C1544 + C47003 * C1053 +
             C46915 * C1543) *
                C30255 +
            (C47004 * C830 + C139555 * C940 + C47003 * C829 + C46915 * C939) *
                C30391) *
               C139301 * C9304) *
              C823 +
          (((C47003 * C830 + C46915 * C940 + C47004 * C5803 + C139555 * C5865) *
                C30391 +
            (C47003 * C1054 + C46915 * C1544 + C47004 * C5921 +
             C139555 * C6192) *
                C30255 +
            (C86398 + C86399) * C30392 + (C87032 + C87033) * C139557) *
               C139301 * C9304 -
           ((C47004 * C69246 + C139555 * C69660 + C47003 * C21202 +
             C46915 * C21739) *
                C139557 +
            (C47004 * C69080 + C139555 * C69170 + C47003 * C20984 +
             C46915 * C21100) *
                C30392 +
            (C87033 + C87032) * C30255 + (C86399 + C86398) * C30391) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[89] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C9304 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C33005 + C33004) * C46915 + (C36122 + C36123) * C139555) *
               C139301 * C139426 -
           ((C31866 + C31867) * C139555 + (C30893 + C30892) * C46915) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C30895 + C30894) * C46915 + (C33922 + C33923) * C139555) *
               C139301 * C9304 -
           ((C30856 * C6323 + C36116 + C36116 + C139557 * C6957 +
             C30855 * C4161 + C36117 + C36117 + C30255 * C5057) *
                C139555 +
            (C34875 + C34874) * C46915) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30855 * C106 + C30858 + C30858 + C30255 * C712 + C30856 * C1762 +
             C30859 + C30859 + C139557 * C2578) *
                C46915 +
            (C77580 + C77581) * C139555) *
               C139301 * C9304 -
           ((C81658 + C81659) * C139555 +
            (C30856 * C1763 + C32982 + C32982 + C139557 * C2579 +
             C30855 * C1762 + C32983 + C32983 + C30255 * C2578) *
                C46915) *
               C139301 * C139426) *
              C822 +
          (((C81659 + C81658) * C46915 + (C87142 + C87143) * C139555) *
               C139301 * C139426 -
           ((C77582 + C77583) * C139555 + (C77581 + C77580) * C46915) *
               C139301 * C9304) *
              C823 +
          (((C77583 + C77582) * C46915 + (C83172 + C83173) * C139555) *
               C139301 * C9304 -
           ((C30856 * C69080 + C87136 + C87136 + C139557 * C69735 +
             C30855 * C23998 + C87137 + C87137 + C30255 * C24853) *
                C139555 +
            (C87143 + C87142) * C46915) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139362 * C139529 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139362 * C139398) *
              C139558 +
          (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
               C139465 * C139362 * C139398 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
             C46931 + C46931 + C139544 * C121) *
                C92566 +
            (C46917 * C1760 + C50711 + C50711 + C46913 * C1776 +
             C46919 * C1766 + C50710 + C50710 + C139544 * C1782) *
                C139557) *
               C139465 * C139362 * C139529 -
           ((C46919 * C4162 + C50708 + C50708 + C139544 * C4170 +
             C46917 * C4161 + C50709 + C50709 + C46913 * C4169) *
                C139557 +
            (C49767 + C49766) * C92566) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C139362 * C139529 -
           ((C4293 * C139544 + C4292 * C46920 + C35151 * C46913 +
             C35150 * C46918) *
                C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C139362 * C139398) *
              C139558 +
          (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                C92566 +
            (C4292 * C46918 + C4293 * C46913 + C4294 * C46920 +
             C4295 * C139544) *
                C139557) *
               C139362 * C139398 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139362 * C139529) *
              C139559 +
          (((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
                C92566 +
            (C1904 * C46918 + C1903 * C46913 + C3503 * C46920 +
             C3504 * C139544) *
                C139557) *
               C139362 * C139529 -
           (((C186 * C4166 + C139465 * C4282) * C139544 +
             (C186 * C4162 + C139465 * C4278) * C46920 + C4295 * C46913 +
             C4294 * C46918) *
                C139557 +
            (C2783 * C139544 + C2782 * C46920 + C970 * C46913 + C971 * C46918) *
                C92566) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139362 * C139529 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139362 * C139398) *
              C139558 +
          (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
            (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
               C139465 * C139362 * C139398 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
            (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
               C139465 * C139362 * C139529 -
           ((C92703 * C4166 + C139557 * C4400 + C92702 * C841 +
             C92566 * C1065) *
                C139544 +
            (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
             C92566 * C1057) *
                C46920 +
            (C95568 + C95567) * C46913 + (C95566 + C95565) * C46918) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139362 * C139529 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139362 * C139398) *
              C139558 +
          ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
            ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                C139557) *
               C139362 * C139398 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139362 * C139529) *
              C139559 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C186 +
             (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                 C139465) *
                C92566 +
            ((C46918 * C1760 + C46913 * C1768 + C46920 * C1766 +
              C139544 * C1774) *
                 C186 +
             (C46918 * C1870 + C46913 * C2098 + C46920 * C1876 +
              C139544 * C2104) *
                 C139465) *
                C139557) *
               C139362 * C139529 -
           (((C46920 * C4278 + C139544 * C4514 + C46918 * C4277 +
              C46913 * C4513) *
                 C139465 +
             (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
              C46913 * C4165) *
                 C186) *
                C139557 +
            ((C50089 + C50088) * C139465 + (C50087 + C50086) * C186) * C92566) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139362 * C139529 -
           ((C4630 * C139544 + C35569 * C46913) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139362 * C139398) *
              C139558 +
          (((C1281 * C46913 + C1280 * C139544) * C92566 +
            (C4630 * C46913 + C4631 * C139544) * C139557) *
               C139362 * C139398 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139362 * C139529) *
              C139559 +
          (((C447 * C46913 + C448 * C139544) * C92566 +
            (C2213 * C46913 + C3742 * C139544) * C139557) *
               C139362 * C139529 -
           (((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C139544 +
             C4631 * C46913) *
                C139557 +
            (C3021 * C139544 + C1280 * C46913) * C92566) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139362 * C139529 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139362 * C139398) *
              C139558 +
          ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
            ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                C139544) *
               C139362 * C139398 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139362 * C139529) *
              C139559 +
          ((((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
            ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) *
                C139544) *
               C139362 * C139529 -
           (((C92703 * C4278 + C139557 * C4732 + C92702 * C943 +
              C92566 * C1363) *
                 C139465 +
             (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
              C92566 * C1057) *
                 C186) *
                C139544 +
            ((C95868 + C95867) * C139465 + (C95566 + C95565) * C186) * C46913) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[90] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139362 * C139529 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139362 * C139398) *
              C139558 +
          (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
            (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
               C139465 * C139362 * C139398 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C92702 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C92566 +
            (C46918 * C1760 + C46913 * C1768 + C46920 * C1766 +
             C139544 * C1774) *
                C92703 +
            (C46918 * C1984 + C46913 * C2392 + C46920 * C1990 +
             C139544 * C2398) *
                C139557) *
               C139465 * C139362 * C139529 -
           ((C46920 * C4396 + C139544 * C4844 + C46918 * C4395 +
             C46913 * C4843) *
                C139557 +
            (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
             C46913 * C4165) *
                C92703 +
            (C50405 + C50404) * C92566 + (C50087 + C50086) * C92702) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[90] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C92702 +
                       (C186 * C274 + C139465 * C633) * C92566 +
                       C32132 * C92703 + C32874 * C139557) *
                          C46913 +
                      (C93089 + C93090 + C93091 + C93092) * C139544) *
                         C139362 * C139529 -
                     ((C94029 + C94030 + C94031 + C94032) * C139544 +
                      (C35975 * C139557 + C35150 * C92703 +
                       (C186 * C1053 + C139465 * C1543) * C92566 +
                       (C186 * C829 + C139465 * C939) * C92702) *
                          C46913) *
                         C139362 * C139398) *
                        C139558 +
                    (((C94032 + C94031 + C94030 + C94029) * C46913 +
                      (C96065 + C96066 + C96067 + C96068) * C139544) *
                         C139362 * C139398 -
                     ((C93093 + C93094 + C93095 + C93096) * C139544 +
                      (C93092 + C93091 + C93090 + C93089) * C46913) *
                         C139362 * C139529) *
                        C139559 +
                    (((C93096 + C93095 + C93094 + C93093) * C46913 +
                      (C93097 + C93098 + C93099 + C93100) * C139544) *
                         C139362 * C139529 -
                     (((C186 * C4396 + C139465 * C4946) * C139557 +
                       (C186 * C4162 + C139465 * C4278) * C92703 +
                       C3257 * C92566 + C2782 * C92702) *
                          C139544 +
                      (C96068 + C96067 + C96066 + C96065) * C46913) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[90] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139362 * C139529 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139362 * C139398) *
                        C139558 +
                    (((C94164 + C94163) * C139465 * C46913 +
                      (C96177 + C96178) * C139465 * C139544) *
                         C139362 * C139398 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139362 * C139529) *
                        C139559 +
                    (((C93206 + C93205) * C139465 * C46913 +
                      (C93207 + C93208) * C139465 * C139544) *
                         C139362 * C139529 -
                     ((C93167 * C4162 + C96171 + C96171 + C139557 * C5058 +
                       C93166 * C833 + C96172 + C96172 + C92566 * C1649) *
                          C139465 * C139544 +
                      (C96178 + C96177) * C139465 * C46913) *
                         C139362 * C139398) *
                        C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
              C46923 + C46923 + C139544 * C119) *
                 C92566 +
             (C94299 + C94300) * C139557) *
                C139465 * C139530 -
            ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
                C139465 * C139426) *
               C139529 +
           (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
                C139465 * C139426 -
            ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
                C139465 * C139426 -
            ((C94304 + C94303) * C139557 +
             (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
              C46929 + C46929 + C46913 * C119) *
                 C92566) *
                C139465 * C139530) *
               C139529 +
           (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
                C139465 * C139530 -
            ((C46919 * C6323 + C48790 + C48790 + C139544 * C6329 +
              C46917 * C6324 + C48791 + C48791 + C46913 * C6330) *
                 C139557 +
             (C51685 + C51684) * C92566) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C46918 +
              (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
              C217 * C139544) *
                 C92566 +
             (C94405 + C94406 + C94407 + C94408) * C139557) *
                C139530 -
            ((C94409 + C94410 + C94411 + C94412) * C139557 +
             (C94408 + C94407 + C94406 + C94405) * C92566) *
                C139426) *
               C139529 +
           (((C97391 + C97392 + C97393 + C97394) * C92566 +
             (C37808 * C46918 + C37809 * C46913 + C35152 * C46920 +
              C35153 * C139544) *
                 C139557) *
                C139426 -
            ((C97394 + C97393 + C97392 + C97391) * C139557 +
             (C972 * C139544 + C973 * C46920 +
              (C186 * C837 + C139465 * C947) * C46913 +
              (C186 * C829 + C139465 * C939) * C46918) *
                 C92566) *
                C139530) *
               C139398) *
              C825 +
          ((((C94413 + C94414 + C94415 + C94416) * C92566 +
             (C94417 + C94418 + C94419 + C94420) * C139557) *
                C139426 -
            ((C94416 + C94415 + C94414 + C94413) * C139557 +
             (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                 C92566) *
                C139530) *
               C139529 +
           (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                 C92566 +
             (C97395 + C97396 + C97397 + C97398) * C139557) *
                C139530 -
            (((C186 * C6326 + C139465 * C6412) * C139544 +
              (C186 * C6323 + C139465 * C6409) * C46920 + C35153 * C46913 +
              C35152 * C46918) *
                 C139557 +
             (C97398 + C97397 + C97396 + C97395) * C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C46918 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C46913 +
             (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
                C139465 * C139530 -
            ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
             (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C46913 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C46918) *
                C139465 * C139426) *
               C139529 +
           (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C46918 +
             (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
              C139557 * C6494) *
                 C46913 +
             (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
                C139465 * C139426 -
            ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
             (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
              C92566 * C1061) *
                 C46913 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C46918) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
             (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
                C139465 * C139426 -
            ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
             (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
                C139465 * C139530) *
               C139529 +
           (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
             (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
                C139465 * C139530 -
            ((C92703 * C6326 + C139557 * C6492 + C92702 * C4165 +
              C92566 * C4399) *
                 C139544 +
             (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
              C92566 * C4395) *
                 C46920 +
             (C97540 + C97539) * C46913 + (C97538 + C97537) * C46918) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                  C186 +
              (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                  C139465) *
                 C92566 +
             ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                 C139557) *
                C139530 -
            (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) *
                 C139557 +
             ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) *
                 C92566) *
                C139426) *
               C139529 +
           ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
             ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                 C139557) *
                C139426 -
            (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) *
                 C139557 +
             ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) *
                 C92566) *
                C139530) *
               C139398) *
              C825 +
          (((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
             ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                 C139557) *
                C139426 -
            (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) *
                 C139557 +
             ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                  C139465 +
              (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                  C186) *
                 C92566) *
                C139530) *
               C139529 +
           ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
             ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                 C139557) *
                C139530 -
            (((C46920 * C6409 + C139544 * C6569 + C46918 * C6410 +
               C46913 * C6570) *
                  C139465 +
              (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
               C46913 * C6327) *
                  C186) *
                 C139557 +
             ((C52119 + C52118) * C139465 + (C52117 + C52116) * C186) *
                 C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
              C446 * C139544) *
                 C92566 +
             (C94787 + C94788) * C139557) *
                C139530 -
            ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
                C139426) *
               C139529 +
           (((C97801 + C97802) * C92566 +
             (C38113 * C46913 + C35570 * C139544) * C139557) *
                C139426 -
            ((C97802 + C97801) * C139557 +
             (C1281 * C139544 +
              (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                 C92566) *
                C139530) *
               C139398) *
              C825 +
          ((((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
                C139426 -
            ((C94792 + C94791) * C139557 +
             (C447 * C139544 + C446 * C46913) * C92566) *
                C139530) *
               C139529 +
           (((C1281 * C46913 + C1280 * C139544) * C92566 +
             (C97803 + C97804) * C139557) *
                C139530 -
            (((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139544 +
              C35570 * C46913) *
                 C139557 +
             (C97804 + C97803) * C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
               C139557 * C1986) *
                  C186 +
              (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
               C139557 * C2292) *
                  C139465) *
                 C46913 +
             ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                 C139544) *
                C139530 -
            (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) *
                 C139544 +
             ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
               C92566 * C2292) *
                  C139465 +
              (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
               C92566 * C1986) *
                  C186) *
                 C46913) *
                C139426) *
               C139529 +
           ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
               C139557 * C6491) *
                  C186 +
              (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
               C139557 * C6728) *
                  C139465) *
                 C46913 +
             ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                 C139544) *
                C139426 -
            (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) *
                 C139544 +
             ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
               C92566 * C1359) *
                  C139465 +
              (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
               C92566 * C1053) *
                  C186) *
                 C46913) *
                C139530) *
               C139398) *
              C825 +
          (((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
             ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                 C139544) *
                C139426 -
            (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) *
                 C139544 +
             ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) *
                 C46913) *
                C139530) *
               C139529 +
           ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
             ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                 C139544) *
                C139530 -
            (((C92703 * C6409 + C139557 * C6726 + C92702 * C4277 +
               C92566 * C4731) *
                  C139465 +
              (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
               C92566 * C4395) *
                  C186) *
                 C139544 +
             ((C97940 + C97939) * C139465 + (C97538 + C97537) * C186) *
                 C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[91] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C92702 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C92566 +
             (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
                C139465 * C139530 -
            ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
             (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
                C139465 * C139426) *
               C139529 +
           (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
             (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
                C139465 * C139426 -
            ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
             (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
             (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
                C139465 * C139426 -
            ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
             (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C92566 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C92702) *
                C139465 * C139530) *
               C139529 +
           (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
             (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
                C139465 * C139530 -
            ((C46920 * C6489 + C139544 * C6803 + C46918 * C6490 +
              C46913 * C6804) *
                 C139557 +
             (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
              C46913 * C6327) *
                 C92703 +
             (C52541 + C52540) * C92566 + (C52117 + C52116) * C92702) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C186 * C106 + C139465 * C187) * C92702 +
                        (C186 * C274 + C139465 * C633) * C92566 +
                        C32132 * C92703 + C32874 * C139557) *
                           C46913 +
                       (C93089 + C93090 + C93091 + C93092) * C139544) *
                          C139530 -
                      ((C95125 + C95126 + C95127 + C95128) * C139544 +
                       (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                        C32132 * C92702) *
                           C46913) *
                          C139426) *
                         C139529 +
                     (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
                        C38411 * C139557) *
                           C46913 +
                       (C98201 + C98202 + C98203 + C98204) * C139544) *
                          C139426 -
                      ((C94029 + C94030 + C94031 + C94032) * C139544 +
                       (C35975 * C139557 + C35150 * C92703 +
                        (C186 * C1053 + C139465 * C1543) * C92566 +
                        (C186 * C829 + C139465 * C939) * C92702) *
                           C46913) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C95128 + C95127 + C95126 + C95125) * C46913 +
                       (C97017 + C97018 + C97019 + C97020) * C139544) *
                          C139426 -
                      ((C93093 + C93094 + C93095 + C93096) * C139544 +
                       (C93092 + C93091 + C93090 + C93089) * C46913) *
                          C139530) *
                         C139529 +
                     (((C94032 + C94031 + C94030 + C94029) * C46913 +
                       (C96065 + C96066 + C96067 + C96068) * C139544) *
                          C139530 -
                      (((C186 * C6489 + C139465 * C6880) * C139557 +
                        (C186 * C6323 + C139465 * C6409) * C92703 +
                        C4955 * C92566 + C4294 * C92702) *
                           C139544 +
                       (C98204 + C98203 + C98202 + C98201) * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[91] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C139530 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139426) *
                         C139529 +
                     (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                        C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                           C139465 * C46913 +
                       (C98349 + C98350) * C139465 * C139544) *
                          C139426 -
                      ((C94163 + C94164) * C139465 * C139544 +
                       (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                        C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                           C139465 * C46913) *
                          C139530) *
                         C139398) *
                        C825 +
                    ((((C95260 + C95259) * C139465 * C46913 +
                       (C97129 + C97130) * C139465 * C139544) *
                          C139426 -
                      ((C93205 + C93206) * C139465 * C139544 +
                       (C93204 + C93203) * C139465 * C46913) *
                          C139530) *
                         C139529 +
                     (((C94164 + C94163) * C139465 * C46913 +
                       (C96177 + C96178) * C139465 * C139544) *
                          C139530 -
                      ((C93167 * C6323 + C98343 + C98343 + C139557 * C6957 +
                        C93166 * C4161 + C98344 + C98344 + C92566 * C5057) *
                           C139465 * C139544 +
                       (C98350 + C98349) * C139465 * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C46917 * C1762 + C48781 + C48781 + C46913 * C1778 +
             C46919 * C1761 + C48780 + C48780 + C139544 * C1777) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139362 * C823 +
           ((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
               C139465 * C139362 * C823 -
           ((C46919 * C1760 + C48787 + C48787 + C139544 * C1776 +
             C46917 * C1761 + C48786 + C48786 + C46913 * C1777) *
                C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139362 * C822 -
           ((C46919 * C8590 + C51672 + C51672 + C139544 * C8596 +
             C46917 * C8591 + C51673 + C51673 + C46913 * C8597) *
                C139557 +
            (C47727 + C47726) * C92566) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
            C46923 + C46923 + C139544 * C119) *
               C92566 +
           (C46917 * C1762 + C48781 + C48781 + C46913 * C1778 + C46919 * C1761 +
            C48780 + C48780 + C139544 * C1777) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C46919 * C1760 + C48787 + C48787 + C139544 * C1776 +
            C46917 * C1761 + C48786 + C48786 + C46913 * C1777) *
               C139557 +
           (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
            C46929 + C46929 + C46913 * C119) *
               C92566) *
              C139465 * C139362 * C139346 * C97 +
          ((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
            C46931 + C46931 + C139544 * C121) *
               C92566 +
           (C46917 * C1760 + C50711 + C50711 + C46913 * C1776 + C46919 * C1766 +
            C50710 + C50710 + C139544 * C1782) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C46919 * C3416 + C92569 + C92569 + C139544 * C3418 +
            C46917 * C1766 + C92570 + C92570 + C46913 * C1782) *
               C139557 +
           (C46919 * C110 + C46936 + C46936 + C139544 * C122 + C46917 * C109 +
            C46937 + C46937 + C46913 * C121) *
               C92566) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C1757 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C1758 +
           ((C94302 + C94301) * C92566 +
            (C46917 * C10620 + C60049 + C60049 + C46913 * C10626 +
             C46919 * C10619 + C60048 + C60048 + C139544 * C10625) *
                C139557) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
               C139465 * C1758 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C1757 -
           ((C46919 * C10618 + C94281 + C94281 + C139544 * C10624 +
             C46917 * C10619 + C94282 + C94282 + C46913 * C10625) *
                C139557 +
            (C94306 + C94305) * C92566) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C32132 * C46918 + C32133 * C46913 + C1906 * C46920 +
             C1905 * C139544) *
                C139557) *
               C139362 * C822 -
           ((C4293 * C139544 + C4292 * C46920 + C35151 * C46913 +
             C35150 * C46918) *
                C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C46918 +
             (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
             C975 * C139544) *
                C92566 +
            (C40768 * C46918 + C40769 * C46913 + C31098 * C46920 +
             C31099 * C139544) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                C92566 +
            (C4292 * C46918 + C4293 * C46913 + C4294 * C46920 +
             C4295 * C139544) *
                C139557) *
               C139362 * C823 -
           ((C1903 * C139544 + C1904 * C46920 + C1905 * C46913 +
             C1906 * C46918) *
                C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139362 * C822 -
           (((C186 * C8593 + C139465 * C8679) * C139544 +
             (C186 * C8590 + C139465 * C8676) * C46920 + C31099 * C46913 +
             C31098 * C46918) *
                C139557 +
            (C977 * C139544 + C976 * C46920 + C975 * C46913 + C974 * C46918) *
                C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C46918 +
            (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
            C217 * C139544) *
               C92566 +
           (C32132 * C46918 + C32133 * C46913 + C1906 * C46920 +
            C1905 * C139544) *
               C139557) *
              C139362 * C139346 * C96 -
          ((C1903 * C139544 + C1904 * C46920 + C1905 * C46913 +
            C1906 * C46918) *
               C139557 +
           (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
               C92566) *
              C139362 * C139346 * C97 +
          ((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
               C92566 +
           (C1904 * C46918 + C1903 * C46913 + C3503 * C46920 +
            C3504 * C139544) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C186 * C3417 + C139465 * C3497) * C139544 +
            (C186 * C3416 + C139465 * C3496) * C46920 + C3504 * C46913 +
            C3503 * C46918) *
               C139557 +
           (C223 * C139544 + C222 * C46920 + C220 * C46913 + C221 * C46918) *
               C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C1757 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C1758 +
           ((C94412 + C94411 + C94410 + C94409) * C92566 +
            (C43398 * C46918 + C43399 * C46913 + C32136 * C46920 +
             C32137 * C139544) *
                C139557) *
               C1759) *
              C139346 * C825 +
          (((C94413 + C94414 + C94415 + C94416) * C92566 +
            (C94417 + C94418 + C94419 + C94420) * C139557) *
               C1758 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C1757 -
           (((C186 * C10621 + C139465 * C10683) * C139544 +
             (C186 * C10618 + C139465 * C10680) * C46920 + C32137 * C46913 +
             C32136 * C46918) *
                C139557 +
            (C94420 + C94419 + C94418 + C94417) * C92566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139362 * C822 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139362 * C823 +
           ((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C46918 +
            (C92702 * C838 + C92566 * C1062 + C92703 * C8595 +
             C139557 * C8761) *
                C46913 +
            (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
               C139465 * C139362 * C824) *
              C825 +
          (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
            (C92702 * C827 + C92566 * C1051 + C92703 * C4161 +
             C139557 * C4395) *
                C46920 +
            (C92702 * C835 + C92566 * C1059 + C92703 * C4165 +
             C139557 * C4399) *
                C139544) *
               C139465 * C139362 * C823 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139362 * C822 -
           ((C92703 * C8593 + C139557 * C8759 + C92702 * C840 +
             C92566 * C1064) *
                C139544 +
            (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
             C92566 * C1056) *
                C46920 +
            (C93526 + C93525) * C46913 + (C93524 + C93523) * C46918) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C46918 +
           (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
               C46913 +
           (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
              C139465 * C139362 * C139346 * C96 -
          ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
           (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
              C139465 * C139362 * C139346 * C97 +
          ((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
           (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
              C139465 * C139362 * C139346 * C98 -
          ((C92703 * C3417 + C139557 * C3579 + C92702 * C116 + C92566 * C284) *
               C139544 +
           (C92703 * C3416 + C139557 * C3578 + C92702 * C110 + C92566 * C278) *
               C46920 +
           (C92740 + C92739) * C46913 + (C92738 + C92737) * C46918) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C1757 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C1758 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C46918 +
            (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
             C139557 * C10741) *
                C46913 +
            (C94539 + C94540) * C46920 + (C94541 + C94542) * C139544) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
            (C92702 * C1760 + C92566 * C1984 + C92703 * C1765 +
             C139557 * C1989) *
                C46920 +
            (C92702 * C1768 + C92566 * C1992 + C92703 * C1773 +
             C139557 * C1997) *
                C139544) *
               C139465 * C1758 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C1757 -
           ((C92703 * C10621 + C139557 * C10739 + C92702 * C1773 +
             C92566 * C1997) *
                C139544 +
            (C92703 * C10618 + C139557 * C10736 + C92702 * C1765 +
             C92566 * C1989) *
                C46920 +
            (C94542 + C94541) * C46913 + (C94540 + C94539) * C46918) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
              C139544 * C1769) *
                 C186 +
             (C46918 * C1872 + C46913 * C2100 + C46920 * C1871 +
              C139544 * C2099) *
                 C139465) *
                C139557) *
               C139362 * C822 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139362 * C823 +
           (((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
            ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
            ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                C139557) *
               C139362 * C823 -
           (((C46920 * C1870 + C139544 * C2098 + C46918 * C1871 +
              C46913 * C2099) *
                 C139465 +
             (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
              C46913 * C1769) *
                 C186) *
                C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139362 * C822 -
           (((C46920 * C8676 + C139544 * C8836 + C46918 * C8677 +
              C46913 * C8837) *
                 C139465 +
             (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
              C46913 * C8594) *
                 C186) *
                C139557 +
            ((C48109 + C48108) * C139465 + (C48107 + C48106) * C186) * C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C186 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C139465) *
               C92566 +
           ((C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
             C139544 * C1769) *
                C186 +
            (C46918 * C1872 + C46913 * C2100 + C46920 * C1871 +
             C139544 * C2099) *
                C139465) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C46920 * C1870 + C139544 * C2098 + C46918 * C1871 +
             C46913 * C2099) *
                C139465 +
            (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
             C46913 * C1769) *
                C186) *
               C139557 +
           ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C139465 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C186) *
               C92566) *
              C139362 * C139346 * C97 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C186 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C139465) *
               C92566 +
           ((C46918 * C1760 + C46913 * C1768 + C46920 * C1766 +
             C139544 * C1774) *
                C186 +
            (C46918 * C1870 + C46913 * C2098 + C46920 * C1876 +
             C139544 * C2104) *
                C139465) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C46920 * C3496 + C139544 * C3660 + C46918 * C1876 +
             C46913 * C2104) *
                C139465 +
            (C46920 * C3416 + C139544 * C3417 + C46918 * C1766 +
             C46913 * C1774) *
                C186) *
               C139557 +
           ((C46920 * C191 + C139544 * C364 + C46918 * C190 + C46913 * C363) *
                C139465 +
            (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
                C186) *
               C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C1757 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C1758 +
           (((C94680 + C94679) * C186 + (C94678 + C94677) * C139465) * C92566 +
            ((C46918 * C10620 + C46913 * C10623 + C46920 * C10619 +
              C139544 * C10622) *
                 C186 +
             (C46918 * C10682 + C46913 * C10794 + C46920 * C10681 +
              C139544 * C10793) *
                 C139465) *
                C139557) *
               C1759) *
              C139346 * C825 +
          ((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
            ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                C139557) *
               C1758 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C1757 -
           (((C46920 * C10680 + C139544 * C10792 + C46918 * C10681 +
              C46913 * C10793) *
                 C139465 +
             (C46920 * C10618 + C139544 * C10621 + C46918 * C10619 +
              C46913 * C10622) *
                 C186) *
                C139557 +
            ((C94688 + C94687) * C139465 + (C94686 + C94685) * C186) * C92566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C32526 * C46913 + C2214 * C139544) * C139557) *
               C139362 * C822 -
           ((C4630 * C139544 + C35569 * C46913) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139362 * C823 +
           (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
             C1282 * C139544) *
                C92566 +
            (C41073 * C46913 + C31422 * C139544) * C139557) *
               C139362 * C824) *
              C825 +
          (((C1281 * C46913 + C1280 * C139544) * C92566 +
            (C4630 * C46913 + C4631 * C139544) * C139557) *
               C139362 * C823 -
           ((C2213 * C139544 + C2214 * C46913) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139362 * C822 -
           (((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C139544 +
             C31422 * C46913) *
                C139557 +
            (C1283 * C139544 + C1282 * C46913) * C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
            C446 * C139544) *
               C92566 +
           (C32526 * C46913 + C2214 * C139544) * C139557) *
              C139362 * C139346 * C96 -
          ((C2213 * C139544 + C2214 * C46913) * C139557 +
           (C447 * C139544 + C446 * C46913) * C92566) *
              C139362 * C139346 * C97 +
          ((C447 * C46913 + C448 * C139544) * C92566 +
           (C2213 * C46913 + C3742 * C139544) * C139557) *
              C139362 * C139346 * C98 -
          (((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C139544 +
            C3742 * C46913) *
               C139557 +
           (C449 * C139544 + C448 * C46913) * C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C1757 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) * C1758 +
           ((C94790 + C94789) * C92566 +
            (C43627 * C46913 + C32528 * C139544) * C139557) *
               C1759) *
              C139346 * C825 +
          (((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) * C1758 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C1757 -
           (((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139544 +
             C32528 * C46913) *
                C139557 +
            (C94794 + C94793) * C92566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139362 * C822 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139362 * C823 +
           (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C46913 +
            ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
            ((C92702 * C827 + C92566 * C1051 + C92703 * C4161 +
              C139557 * C4395) *
                 C186 +
             (C92702 * C937 + C92566 * C1357 + C92703 * C4277 +
              C139557 * C4731) *
                 C139465) *
                C139544) *
               C139362 * C823 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139362 * C822 -
           (((C92703 * C8676 + C139557 * C8993 + C92702 * C942 +
              C92566 * C1362) *
                 C139465 +
             (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
              C92566 * C1056) *
                 C186) *
                C139544 +
            ((C93832 + C93831) * C139465 + (C93524 + C93523) * C186) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C186 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C139465) *
               C46913 +
           ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) * C139544) *
              C139362 * C139346 * C96 -
          (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
           ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
              C139362 * C139346 * C97 +
          (((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
           ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) * C139544) *
              C139362 * C139346 * C98 -
          (((C92703 * C3496 + C139557 * C3816 + C92702 * C191 + C92566 * C503) *
                C139465 +
            (C92703 * C3416 + C139557 * C3578 + C92702 * C110 + C92566 * C278) *
                C186) *
               C139544 +
           ((C92956 + C92955) * C139465 + (C92738 + C92737) * C186) * C46913) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C1757 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C1758 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C46913 +
            ((C94539 + C94540) * C186 + (C94903 + C94904) * C139465) *
                C139544) *
               C1759) *
              C139346 * C825 +
          ((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
            ((C92702 * C1760 + C92566 * C1984 + C92703 * C1765 +
              C139557 * C1989) *
                 C186 +
             (C92702 * C1870 + C92566 * C2290 + C92703 * C1875 +
              C139557 * C2295) *
                 C139465) *
                C139544) *
               C1758 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C1757 -
           (((C92703 * C10680 + C139557 * C10901 + C92702 * C1875 +
              C92566 * C2295) *
                 C139465 +
             (C92703 * C10618 + C139557 * C10736 + C92702 * C1765 +
              C92566 * C1989) *
                 C186) *
                C139544 +
            ((C94904 + C94903) * C139465 + (C94540 + C94539) * C186) * C46913) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[92] +=
        (-std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
             C139544 * C1769) *
                C92703 +
            (C46918 * C1986 + C46913 * C2394 + C46920 * C1985 +
             C139544 * C2393) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139362 * C823 +
           ((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
            (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
            (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
               C139465 * C139362 * C823 -
           ((C46920 * C1984 + C139544 * C2392 + C46918 * C1985 +
             C46913 * C2393) *
                C139557 +
            (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
             C46913 * C1769) *
                C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139362 * C822 -
           ((C46920 * C8756 + C139544 * C9070 + C46918 * C8757 +
             C46913 * C9071) *
                C139557 +
            (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
             C46913 * C8594) *
                C92703 +
            (C48467 + C48466) * C92566 + (C48107 + C48106) * C92702) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C92702 +
           (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
               C92566 +
           (C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
            C139544 * C1769) *
               C92703 +
           (C46918 * C1986 + C46913 * C2394 + C46920 * C1985 +
            C139544 * C2393) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C46920 * C1984 + C139544 * C2392 + C46918 * C1985 +
            C46913 * C2393) *
               C139557 +
           (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
            C46913 * C1769) *
               C92703 +
           (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
               C92566 +
           (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
               C92702) *
              C139465 * C139362 * C139346 * C97 +
          ((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
               C92702 +
           (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
               C92566 +
           (C46918 * C1760 + C46913 * C1768 + C46920 * C1766 +
            C139544 * C1774) *
               C92703 +
           (C46918 * C1984 + C46913 * C2392 + C46920 * C1990 +
            C139544 * C2398) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C46920 * C3578 + C139544 * C3897 + C46918 * C1990 +
            C46913 * C2398) *
               C139557 +
           (C46920 * C3416 + C139544 * C3417 + C46918 * C1766 +
            C46913 * C1774) *
               C92703 +
           (C46920 * C278 + C139544 * C581 + C46918 * C277 + C46913 * C580) *
               C92566 +
           (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
               C92702) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C1757 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C1758 +
           ((C94680 + C94679) * C92702 + (C95022 + C95021) * C92566 +
            (C46918 * C10620 + C46913 * C10623 + C46920 * C10619 +
             C139544 * C10622) *
                C92703 +
            (C46918 * C10738 + C46913 * C10956 + C46920 * C10737 +
             C139544 * C10955) *
                C139557) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
            (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
               C139465 * C1758 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C1757 -
           ((C46920 * C10736 + C139544 * C10954 + C46918 * C10737 +
             C46913 * C10955) *
                C139557 +
            (C46920 * C10618 + C139544 * C10621 + C46918 * C10619 +
             C46913 * C10622) *
                C92703 +
            (C95026 + C95025) * C92566 + (C94686 + C94685) * C92702) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[92] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C92702 +
             (C186 * C274 + C139465 * C633) * C92566 + C32132 * C92703 +
             C32874 * C139557) *
                C46913 +
            (C93089 + C93090 + C93091 + C93092) * C139544) *
               C139362 * C822 -
           ((C94029 + C94030 + C94031 + C94032) * C139544 +
            (C35975 * C139557 + C35150 * C92703 +
             (C186 * C1053 + C139465 * C1543) * C92566 +
             (C186 * C829 + C139465 * C939) * C92702) *
                C46913) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C92702 +
             (C186 * C1054 + C139465 * C1544) * C92566 + C40768 * C92703 +
             C41371 * C139557) *
                C46913 +
            (C94033 + C94034 + C94035 + C94036) * C139544) *
               C139362 * C824) *
              C825 +
          (((C94032 + C94031 + C94030 + C94029) * C46913 +
            (C971 * C92702 + C1562 * C92566 + C4294 * C92703 +
             C4955 * C139557) *
                C139544) *
               C139362 * C823 -
           ((C93093 + C93094 + C93095 + C93096) * C139544 +
            (C93092 + C93091 + C93090 + C93089) * C46913) *
               C139362 * C822 -
           (((C186 * C8756 + C139465 * C9147) * C139557 +
             (C186 * C8590 + C139465 * C8676) * C92703 + C1565 * C92566 +
             C976 * C92702) *
                C139544 +
            (C94036 + C94035 + C94034 + C94033) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C186 * C106 + C139465 * C187) * C92702 +
                                (C186 * C274 + C139465 * C633) * C92566 +
                                C32132 * C92703 + C32874 * C139557) *
                                   C46913 +
                               (C93089 + C93090 + C93091 + C93092) * C139544) *
                                  C139362 * C139346 * C96 -
                              ((C93093 + C93094 + C93095 + C93096) * C139544 +
                               (C93092 + C93091 + C93090 + C93089) * C46913) *
                                  C139362 * C139346 * C97 +
                              ((C93096 + C93095 + C93094 + C93093) * C46913 +
                               (C93097 + C93098 + C93099 + C93100) * C139544) *
                                  C139362 * C139346 * C98 -
                              (((C186 * C3578 + C139465 * C3972) * C139557 +
                                (C186 * C3416 + C139465 * C3496) * C92703 +
                                C655 * C92566 + C222 * C92702) *
                                   C139544 +
                               (C93100 + C93099 + C93098 + C93097) * C46913) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C92702 +
             (C186 * C274 + C139465 * C633) * C92566 + C32132 * C92703 +
             C32874 * C139557) *
                C46913 +
            (C93089 + C93090 + C93091 + C93092) * C139544) *
               C1757 -
           ((C95125 + C95126 + C95127 + C95128) * C139544 +
            (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
             C32132 * C92702) *
                C46913) *
               C1758 +
           ((C32135 * C92702 + C32875 * C92566 + C43398 * C92703 +
             C43841 * C139557) *
                C46913 +
            (C95129 + C95130 + C95131 + C95132) * C139544) *
               C1759) *
              C139346 * C825 +
          (((C95128 + C95127 + C95126 + C95125) * C46913 +
            (C1904 * C92702 + C2495 * C92566 + C1909 * C92703 +
             C2498 * C139557) *
                C139544) *
               C1758 -
           ((C93093 + C93094 + C93095 + C93096) * C139544 +
            (C93092 + C93091 + C93090 + C93089) * C46913) *
               C1757 -
           (((C186 * C10736 + C139465 * C11007) * C139557 +
             (C186 * C10618 + C139465 * C10680) * C92703 + C2498 * C92566 +
             C1909 * C92702) *
                C139544 +
            (C95132 + C95131 + C95130 + C95129) * C46913) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[92] += (-std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139362 * C822 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139362 * C823 +
                     ((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                       C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                          C139465 * C46913 +
                      (C94165 + C94166) * C139465 * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C94164 + C94163) * C139465 * C46913 +
                      (C93166 * C827 + C94151 + C94151 + C92566 * C1643 +
                       C93167 * C4161 + C94152 + C94152 + C139557 * C5057) *
                          C139465 * C139544) *
                         C139362 * C823 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139362 * C822 -
                     ((C93167 * C8590 + C94153 + C94153 + C139557 * C9224 +
                       C93166 * C832 + C94154 + C94154 + C92566 * C1648) *
                          C139465 * C139544 +
                      (C94166 + C94165) * C139465 * C46913) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                      C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                         C139465 * C46913 +
                     (C93203 + C93204) * C139465 * C139544) *
                        C139362 * C139346 * C96 -
                    ((C93205 + C93206) * C139465 * C139544 +
                     (C93204 + C93203) * C139465 * C46913) *
                        C139362 * C139346 * C97 +
                    ((C93206 + C93205) * C139465 * C46913 +
                     (C93207 + C93208) * C139465 * C139544) *
                        C139362 * C139346 * C98 -
                    ((C93167 * C3416 + C93189 + C93189 + C139557 * C4053 +
                      C93166 * C110 + C93190 + C93190 + C92566 * C716) *
                         C139465 * C139544 +
                     (C93208 + C93207) * C139465 * C46913) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C1757 -
                     ((C95259 + C95260) * C139465 * C139544 +
                      (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                       C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                          C139465 * C46913) *
                         C1758 +
                     ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
                       C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                          C139465 * C46913 +
                      (C95261 + C95262) * C139465 * C139544) *
                         C1759) *
                        C139346 * C825 +
                    (((C95260 + C95259) * C139465 * C46913 +
                      (C93166 * C1760 + C95247 + C95247 + C92566 * C2576 +
                       C93167 * C1765 + C95248 + C95248 + C139557 * C2581) *
                          C139465 * C139544) *
                         C1758 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C1757 -
                     ((C93167 * C10618 + C95249 + C95249 + C139557 * C11060 +
                       C93166 * C1765 + C95250 + C95250 + C92566 * C2581) *
                          C139465 * C139544 +
                      (C95262 + C95261) * C139465 * C46913) *
                         C1759) *
                        C139346 * C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139530 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139426) *
              C139346 * C139558 +
          (((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
               C139465 * C139426 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
             C46931 + C46931 + C139544 * C121) *
                C92566 +
            (C96287 + C96288) * C139557) *
               C139465 * C139530 -
           ((C46919 * C1767 + C96281 + C96281 + C139544 * C1783 +
             C46917 * C1765 + C96282 + C96282 + C46913 * C1781) *
                C139557 +
            (C96288 + C96287) * C92566) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C139530 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C139426) *
              C139346 * C139558 +
          (((C94413 + C94414 + C94415 + C94416) * C92566 +
            (C94417 + C94418 + C94419 + C94420) * C139557) *
               C139426 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139530) *
              C139346 * C139559 +
          (((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
                C92566 +
            (C96387 + C96388 + C96389 + C96390) * C139557) *
               C139530 -
           (((C186 * C1775 + C139465 * C1885) * C139544 +
             (C186 * C1767 + C139465 * C1877) * C46920 + C1910 * C46913 +
             C1909 * C46918) *
                C139557 +
            (C96390 + C96389 + C96388 + C96387) * C92566) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139530 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139426) *
              C139346 * C139558 +
          (((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
            (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
               C139465 * C139426 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
            (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
               C139465 * C139530 -
           ((C92703 * C1775 + C139557 * C1999 + C92702 * C1774 +
             C92566 * C1998) *
                C139544 +
            (C92703 * C1767 + C139557 * C1991 + C92702 * C1766 +
             C92566 * C1990) *
                C46920 +
            (C96500 + C96499) * C46913 + (C96498 + C96497) * C46918) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139530 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139426) *
              C139346 * C139558 +
          ((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
            ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                C139557) *
               C139426 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139530) *
              C139346 * C139559 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C186 +
             (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                 C139465) *
                C92566 +
            ((C96607 + C96608) * C186 + (C96609 + C96610) * C139465) *
                C139557) *
               C139530 -
           (((C46920 * C1877 + C139544 * C2105 + C46918 * C1875 +
              C46913 * C2103) *
                 C139465 +
             (C46920 * C1767 + C139544 * C1775 + C46918 * C1765 +
              C46913 * C1773) *
                 C186) *
                C139557 +
            ((C96610 + C96609) * C139465 + (C96608 + C96607) * C186) * C92566) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139530 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139426) *
              C139346 * C139558 +
          (((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
               C139426 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139530) *
              C139346 * C139559 +
          (((C447 * C46913 + C448 * C139544) * C92566 +
            (C96709 + C96710) * C139557) *
               C139530 -
           (((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139544 +
             C2216 * C46913) *
                C139557 +
            (C96710 + C96709) * C92566) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139530 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139426) *
              C139346 * C139558 +
          ((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
            ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                C139544) *
               C139426 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139530) *
              C139346 * C139559 +
          ((((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
            ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) *
                C139544) *
               C139530 -
           (((C92703 * C1877 + C139557 * C2297 + C92702 * C1876 +
              C92566 * C2296) *
                 C139465 +
             (C92703 * C1767 + C139557 * C1991 + C92702 * C1766 +
              C92566 * C1990) *
                 C186) *
                C139544 +
            ((C96814 + C96813) * C139465 + (C96498 + C96497) * C186) * C46913) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[93] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139530 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139426) *
              C139346 * C139558 +
          (((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
            (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
               C139465 * C139426 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C92702 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C92566 +
            (C96607 + C96608) * C92703 + (C96917 + C96918) * C139557) *
               C139465 * C139530 -
           ((C46920 * C1991 + C139544 * C2399 + C46918 * C1989 +
             C46913 * C2397) *
                C139557 +
            (C46920 * C1767 + C139544 * C1775 + C46918 * C1765 +
             C46913 * C1773) *
                C92703 +
            (C96918 + C96917) * C92566 + (C96608 + C96607) * C92702) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C92702 +
                       (C186 * C274 + C139465 * C633) * C92566 +
                       C32132 * C92703 + C32874 * C139557) *
                          C46913 +
                      (C93089 + C93090 + C93091 + C93092) * C139544) *
                         C139530 -
                     ((C95125 + C95126 + C95127 + C95128) * C139544 +
                      (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                       C32132 * C92702) *
                          C46913) *
                         C139426) *
                        C139346 * C139558 +
                    (((C95128 + C95127 + C95126 + C95125) * C46913 +
                      (C97017 + C97018 + C97019 + C97020) * C139544) *
                         C139426 -
                     ((C93093 + C93094 + C93095 + C93096) * C139544 +
                      (C93092 + C93091 + C93090 + C93089) * C46913) *
                         C139530) *
                        C139346 * C139559 +
                    (((C93096 + C93095 + C93094 + C93093) * C46913 +
                      (C93097 + C93098 + C93099 + C93100) * C139544) *
                         C139530 -
                     (((C186 * C1991 + C139465 * C2481) * C139557 +
                       (C186 * C1767 + C139465 * C1877) * C92703 +
                       C3978 * C92566 + C3503 * C92702) *
                          C139544 +
                      (C97020 + C97019 + C97018 + C97017) * C46913) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[93] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139530 -
                     ((C95259 + C95260) * C139465 * C139544 +
                      (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                       C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                          C139465 * C46913) *
                         C139426) *
                        C139346 * C139558 +
                    (((C95260 + C95259) * C139465 * C46913 +
                      (C97129 + C97130) * C139465 * C139544) *
                         C139426 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139530) *
                        C139346 * C139559 +
                    (((C93206 + C93205) * C139465 * C46913 +
                      (C93207 + C93208) * C139465 * C139544) *
                         C139530 -
                     ((C93167 * C1767 + C97123 + C97123 + C139557 * C2583 +
                       C93166 * C1766 + C97124 + C97124 + C92566 * C2582) *
                          C139465 * C139544 +
                      (C97130 + C97129) * C139465 * C46913) *
                         C139426) *
                        C139346 * C2694)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
            C46923 + C46923 + C139544 * C119) *
               C92566 +
           (C46917 * C1762 + C48781 + C48781 + C46913 * C1778 + C46919 * C1761 +
            C48780 + C48780 + C139544 * C1777) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C46919 * C1760 + C48787 + C48787 + C139544 * C1776 +
            C46917 * C1761 + C48786 + C48786 + C46913 * C1777) *
               C139557 +
           (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
            C46929 + C46929 + C46913 * C119) *
               C92566) *
              C139465 * C139362 * C139346 * C97 +
          ((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
            C46931 + C46931 + C139544 * C121) *
               C92566 +
           (C46917 * C1760 + C50711 + C50711 + C46913 * C1776 + C46919 * C1766 +
            C50710 + C50710 + C139544 * C1782) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C46919 * C3416 + C92569 + C92569 + C139544 * C3418 +
            C46917 * C1766 + C92570 + C92570 + C46913 * C1782) *
               C139557 +
           (C46919 * C110 + C46936 + C46936 + C139544 * C122 + C46917 * C109 +
            C46937 + C46937 + C46913 * C121) *
               C92566) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C46917 * C1762 + C48781 + C48781 + C46913 * C1778 +
             C46919 * C1761 + C48780 + C48780 + C139544 * C1777) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139362 * C823 +
           ((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
               C139465 * C139362 * C823 -
           ((C46919 * C1760 + C48787 + C48787 + C139544 * C1776 +
             C46917 * C1761 + C48786 + C48786 + C46913 * C1777) *
                C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139362 * C822 -
           ((C46919 * C8590 + C51672 + C51672 + C139544 * C8596 +
             C46917 * C8591 + C51673 + C51673 + C46913 * C8597) *
                C139557 +
            (C47727 + C47726) * C92566) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C46918 +
            (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
            C217 * C139544) *
               C92566 +
           (C32132 * C46918 + C32133 * C46913 + C1906 * C46920 +
            C1905 * C139544) *
               C139557) *
              C139362 * C139346 * C96 -
          ((C1903 * C139544 + C1904 * C46920 + C1905 * C46913 +
            C1906 * C46918) *
               C139557 +
           (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
               C92566) *
              C139362 * C139346 * C97 +
          ((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
               C92566 +
           (C1904 * C46918 + C1903 * C46913 + C3503 * C46920 +
            C3504 * C139544) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C186 * C3417 + C139465 * C3497) * C139544 +
            (C186 * C3416 + C139465 * C3496) * C46920 + C3504 * C46913 +
            C3503 * C46918) *
               C139557 +
           (C223 * C139544 + C222 * C46920 + C220 * C46913 + C221 * C46918) *
               C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C32132 * C46918 + C32133 * C46913 + C1906 * C46920 +
             C1905 * C139544) *
                C139557) *
               C139362 * C822 -
           ((C4293 * C139544 + C4292 * C46920 + C35151 * C46913 +
             C35150 * C46918) *
                C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C46918 +
             (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
             C975 * C139544) *
                C92566 +
            (C40768 * C46918 + C40769 * C46913 + C31098 * C46920 +
             C31099 * C139544) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                C92566 +
            (C4292 * C46918 + C4293 * C46913 + C4294 * C46920 +
             C4295 * C139544) *
                C139557) *
               C139362 * C823 -
           ((C1903 * C139544 + C1904 * C46920 + C1905 * C46913 +
             C1906 * C46918) *
                C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139362 * C822 -
           (((C186 * C8593 + C139465 * C8679) * C139544 +
             (C186 * C8590 + C139465 * C8676) * C46920 + C31099 * C46913 +
             C31098 * C46918) *
                C139557 +
            (C977 * C139544 + C976 * C46920 + C975 * C46913 + C974 * C46918) *
                C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C46918 +
           (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
               C46913 +
           (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
              C139465 * C139362 * C139346 * C96 -
          ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
           (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
              C139465 * C139362 * C139346 * C97 +
          ((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
           (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
              C139465 * C139362 * C139346 * C98 -
          ((C92703 * C3417 + C139557 * C3579 + C92702 * C116 + C92566 * C284) *
               C139544 +
           (C92703 * C3416 + C139557 * C3578 + C92702 * C110 + C92566 * C278) *
               C46920 +
           (C92740 + C92739) * C46913 + (C92738 + C92737) * C46918) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139362 * C822 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139362 * C823 +
           ((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C46918 +
            (C92702 * C838 + C92566 * C1062 + C92703 * C8595 +
             C139557 * C8761) *
                C46913 +
            (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
               C139465 * C139362 * C824) *
              C825 +
          (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
            (C92702 * C827 + C92566 * C1051 + C92703 * C4161 +
             C139557 * C4395) *
                C46920 +
            (C92702 * C835 + C92566 * C1059 + C92703 * C4165 +
             C139557 * C4399) *
                C139544) *
               C139465 * C139362 * C823 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139362 * C822 -
           ((C92703 * C8593 + C139557 * C8759 + C92702 * C840 +
             C92566 * C1064) *
                C139544 +
            (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
             C92566 * C1056) *
                C46920 +
            (C93526 + C93525) * C46913 + (C93524 + C93523) * C46918) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C186 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C139465) *
               C92566 +
           ((C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
             C139544 * C1769) *
                C186 +
            (C46918 * C1872 + C46913 * C2100 + C46920 * C1871 +
             C139544 * C2099) *
                C139465) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C46920 * C1870 + C139544 * C2098 + C46918 * C1871 +
             C46913 * C2099) *
                C139465 +
            (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
             C46913 * C1769) *
                C186) *
               C139557 +
           ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                C139465 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C186) *
               C92566) *
              C139362 * C139346 * C97 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C186 +
            (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                C139465) *
               C92566 +
           ((C46918 * C1760 + C46913 * C1768 + C46920 * C1766 +
             C139544 * C1774) *
                C186 +
            (C46918 * C1870 + C46913 * C2098 + C46920 * C1876 +
             C139544 * C2104) *
                C139465) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C46920 * C3496 + C139544 * C3660 + C46918 * C1876 +
             C46913 * C2104) *
                C139465 +
            (C46920 * C3416 + C139544 * C3417 + C46918 * C1766 +
             C46913 * C1774) *
                C186) *
               C139557 +
           ((C46920 * C191 + C139544 * C364 + C46918 * C190 + C46913 * C363) *
                C139465 +
            (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
                C186) *
               C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
              C139544 * C1769) *
                 C186 +
             (C46918 * C1872 + C46913 * C2100 + C46920 * C1871 +
              C139544 * C2099) *
                 C139465) *
                C139557) *
               C139362 * C822 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139362 * C823 +
           (((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
            ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
            ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                C139557) *
               C139362 * C823 -
           (((C46920 * C1870 + C139544 * C2098 + C46918 * C1871 +
              C46913 * C2099) *
                 C139465 +
             (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
              C46913 * C1769) *
                 C186) *
                C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139362 * C822 -
           (((C46920 * C8676 + C139544 * C8836 + C46918 * C8677 +
              C46913 * C8837) *
                 C139465 +
             (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
              C46913 * C8594) *
                 C186) *
                C139557 +
            ((C48109 + C48108) * C139465 + (C48107 + C48106) * C186) * C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
            C446 * C139544) *
               C92566 +
           (C32526 * C46913 + C2214 * C139544) * C139557) *
              C139362 * C139346 * C96 -
          ((C2213 * C139544 + C2214 * C46913) * C139557 +
           (C447 * C139544 + C446 * C46913) * C92566) *
              C139362 * C139346 * C97 +
          ((C447 * C46913 + C448 * C139544) * C92566 +
           (C2213 * C46913 + C3742 * C139544) * C139557) *
              C139362 * C139346 * C98 -
          (((C416 * C3416 + C3739 + C3739 + C139465 * C3735) * C139544 +
            C3742 * C46913) *
               C139557 +
           (C449 * C139544 + C448 * C46913) * C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C32526 * C46913 + C2214 * C139544) * C139557) *
               C139362 * C822 -
           ((C4630 * C139544 + C35569 * C46913) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139362 * C823 +
           (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
             C1282 * C139544) *
                C92566 +
            (C41073 * C46913 + C31422 * C139544) * C139557) *
               C139362 * C824) *
              C825 +
          (((C1281 * C46913 + C1280 * C139544) * C92566 +
            (C4630 * C46913 + C4631 * C139544) * C139557) *
               C139362 * C823 -
           ((C2213 * C139544 + C2214 * C46913) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139362 * C822 -
           (((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C139544 +
             C31422 * C46913) *
                C139557 +
            (C1283 * C139544 + C1282 * C46913) * C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C186 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C139465) *
               C46913 +
           ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) * C139544) *
              C139362 * C139346 * C96 -
          (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
           ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
              C139362 * C139346 * C97 +
          (((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
           ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) * C139544) *
              C139362 * C139346 * C98 -
          (((C92703 * C3496 + C139557 * C3816 + C92702 * C191 + C92566 * C503) *
                C139465 +
            (C92703 * C3416 + C139557 * C3578 + C92702 * C110 + C92566 * C278) *
                C186) *
               C139544 +
           ((C92956 + C92955) * C139465 + (C92738 + C92737) * C186) * C46913) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139362 * C822 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139362 * C823 +
           (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C46913 +
            ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) *
                C139544) *
               C139362 * C824) *
              C825 +
          ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
            ((C92702 * C827 + C92566 * C1051 + C92703 * C4161 +
              C139557 * C4395) *
                 C186 +
             (C92702 * C937 + C92566 * C1357 + C92703 * C4277 +
              C139557 * C4731) *
                 C139465) *
                C139544) *
               C139362 * C823 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139362 * C822 -
           (((C92703 * C8676 + C139557 * C8993 + C92702 * C942 +
              C92566 * C1362) *
                 C139465 +
             (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
              C92566 * C1056) *
                 C186) *
                C139544 +
            ((C93832 + C93831) * C139465 + (C93524 + C93523) * C186) * C46913) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[94] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C92702 +
           (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
               C92566 +
           (C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
            C139544 * C1769) *
               C92703 +
           (C46918 * C1986 + C46913 * C2394 + C46920 * C1985 +
            C139544 * C2393) *
               C139557) *
              C139465 * C139362 * C139346 * C96 -
          ((C46920 * C1984 + C139544 * C2392 + C46918 * C1985 +
            C46913 * C2393) *
               C139557 +
           (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
            C46913 * C1769) *
               C92703 +
           (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
               C92566 +
           (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
               C92702) *
              C139465 * C139362 * C139346 * C97 +
          ((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
               C92702 +
           (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
               C92566 +
           (C46918 * C1760 + C46913 * C1768 + C46920 * C1766 +
            C139544 * C1774) *
               C92703 +
           (C46918 * C1984 + C46913 * C2392 + C46920 * C1990 +
            C139544 * C2398) *
               C139557) *
              C139465 * C139362 * C139346 * C98 -
          ((C46920 * C3578 + C139544 * C3897 + C46918 * C1990 +
            C46913 * C2398) *
               C139557 +
           (C46920 * C3416 + C139544 * C3417 + C46918 * C1766 +
            C46913 * C1774) *
               C92703 +
           (C46920 * C278 + C139544 * C581 + C46918 * C277 + C46913 * C580) *
               C92566 +
           (C46920 * C110 + C139544 * C116 + C46918 * C109 + C46913 * C115) *
               C92702) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C46918 * C1762 + C46913 * C1770 + C46920 * C1761 +
             C139544 * C1769) *
                C92703 +
            (C46918 * C1986 + C46913 * C2394 + C46920 * C1985 +
             C139544 * C2393) *
                C139557) *
               C139465 * C139362 * C822 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139362 * C823 +
           ((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
            (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
               C139465 * C139362 * C824) *
              C825 +
          (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
            (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
               C139465 * C139362 * C823 -
           ((C46920 * C1984 + C139544 * C2392 + C46918 * C1985 +
             C46913 * C2393) *
                C139557 +
            (C46920 * C1760 + C139544 * C1768 + C46918 * C1761 +
             C46913 * C1769) *
                C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139362 * C822 -
           ((C46920 * C8756 + C139544 * C9070 + C46918 * C8757 +
             C46913 * C9071) *
                C139557 +
            (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
             C46913 * C8594) *
                C92703 +
            (C48467 + C48466) * C92566 + (C48107 + C48106) * C92702) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[94] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C92702 +
                      (C186 * C274 + C139465 * C633) * C92566 +
                      C32132 * C92703 + C32874 * C139557) *
                         C46913 +
                     (C93089 + C93090 + C93091 + C93092) * C139544) *
                        C139362 * C139346 * C96 -
                    ((C93093 + C93094 + C93095 + C93096) * C139544 +
                     (C93092 + C93091 + C93090 + C93089) * C46913) *
                        C139362 * C139346 * C97 +
                    ((C93096 + C93095 + C93094 + C93093) * C46913 +
                     (C93097 + C93098 + C93099 + C93100) * C139544) *
                        C139362 * C139346 * C98 -
                    (((C186 * C3578 + C139465 * C3972) * C139557 +
                      (C186 * C3416 + C139465 * C3496) * C92703 +
                      C655 * C92566 + C222 * C92702) *
                         C139544 +
                     (C93100 + C93099 + C93098 + C93097) * C46913) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C92702 +
                       (C186 * C274 + C139465 * C633) * C92566 +
                       C32132 * C92703 + C32874 * C139557) *
                          C46913 +
                      (C93089 + C93090 + C93091 + C93092) * C139544) *
                         C139362 * C822 -
                     ((C94029 + C94030 + C94031 + C94032) * C139544 +
                      (C35975 * C139557 + C35150 * C92703 +
                       (C186 * C1053 + C139465 * C1543) * C92566 +
                       (C186 * C829 + C139465 * C939) * C92702) *
                          C46913) *
                         C139362 * C823 +
                     (((C186 * C830 + C139465 * C940) * C92702 +
                       (C186 * C1054 + C139465 * C1544) * C92566 +
                       C40768 * C92703 + C41371 * C139557) *
                          C46913 +
                      (C94033 + C94034 + C94035 + C94036) * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C94032 + C94031 + C94030 + C94029) * C46913 +
                      (C971 * C92702 + C1562 * C92566 + C4294 * C92703 +
                       C4955 * C139557) *
                          C139544) *
                         C139362 * C823 -
                     ((C93093 + C93094 + C93095 + C93096) * C139544 +
                      (C93092 + C93091 + C93090 + C93089) * C46913) *
                         C139362 * C822 -
                     (((C186 * C8756 + C139465 * C9147) * C139557 +
                       (C186 * C8590 + C139465 * C8676) * C92703 +
                       C1565 * C92566 + C976 * C92702) *
                          C139544 +
                      (C94036 + C94035 + C94034 + C94033) * C46913) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[94] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                      C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                         C139465 * C46913 +
                     (C93203 + C93204) * C139465 * C139544) *
                        C139362 * C139346 * C96 -
                    ((C93205 + C93206) * C139465 * C139544 +
                     (C93204 + C93203) * C139465 * C46913) *
                        C139362 * C139346 * C97 +
                    ((C93206 + C93205) * C139465 * C46913 +
                     (C93207 + C93208) * C139465 * C139544) *
                        C139362 * C139346 * C98 -
                    ((C93167 * C3416 + C93189 + C93189 + C139557 * C4053 +
                      C93166 * C110 + C93190 + C93190 + C92566 * C716) *
                         C139465 * C139544 +
                     (C93208 + C93207) * C139465 * C46913) *
                        C139362 * C139346 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139362 * C822 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139362 * C823 +
                     ((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                       C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                          C139465 * C46913 +
                      (C94165 + C94166) * C139465 * C139544) *
                         C139362 * C824) *
                        C825 +
                    (((C94164 + C94163) * C139465 * C46913 +
                      (C93166 * C827 + C94151 + C94151 + C92566 * C1643 +
                       C93167 * C4161 + C94152 + C94152 + C139557 * C5057) *
                          C139465 * C139544) *
                         C139362 * C823 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139362 * C822 -
                     ((C93167 * C8590 + C94153 + C94153 + C139557 * C9224 +
                       C93166 * C832 + C94154 + C94154 + C92566 * C1648) *
                          C139465 * C139544 +
                      (C94166 + C94165) * C139465 * C46913) *
                         C139362 * C824) *
                        C139333)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139362 * C139560 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139362 * C139561 +
           ((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) *
               C139465 * C139362 * C7039) *
              C139521 +
          (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
               C139465 * C139362 * C139561 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139362 * C139560 -
           ((C46919 * C8590 + C51672 + C51672 + C139544 * C8596 +
             C46917 * C8591 + C51673 + C51673 + C46913 * C8597) *
                C139557 +
            (C47727 + C47726) * C92566) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C139362 * C139560 -
           ((C97394 + C97393 + C97392 + C97391) * C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C139362 * C139561 +
           (((C186 * C830 + C139465 * C940) * C46918 +
             (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
             C975 * C139544) *
                C92566 +
            (C40768 * C46918 + C40769 * C46913 + C31098 * C46920 +
             C31099 * C139544) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                C92566 +
            (C97395 + C97396 + C97397 + C97398) * C139557) *
               C139362 * C139561 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139362 * C139560 -
           (((C186 * C8593 + C139465 * C8679) * C139544 +
             (C186 * C8590 + C139465 * C8676) * C46920 + C31099 * C46913 +
             C31098 * C46918) *
                C139557 +
            (C977 * C139544 + C976 * C46920 + C975 * C46913 + C974 * C46918) *
                C92566) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139362 * C139560 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139362 * C139561 +
           ((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C46918 +
            (C92702 * C838 + C92566 * C1062 + C92703 * C8595 +
             C139557 * C8761) *
                C46913 +
            (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
               C139465 * C139362 * C7039) *
              C139521 +
          (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
            (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
               C139465 * C139362 * C139561 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139362 * C139560 -
           ((C92703 * C8593 + C139557 * C8759 + C92702 * C840 +
             C92566 * C1064) *
                C139544 +
            (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
             C92566 * C1056) *
                C46920 +
            (C93526 + C93525) * C46913 + (C93524 + C93523) * C46918) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139362 * C139560 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139362 * C139561 +
           (((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
            ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
            ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                C139557) *
               C139362 * C139561 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139362 * C139560 -
           (((C46920 * C8676 + C139544 * C8836 + C46918 * C8677 +
              C46913 * C8837) *
                 C139465 +
             (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
              C46913 * C8594) *
                 C186) *
                C139557 +
            ((C48109 + C48108) * C139465 + (C48107 + C48106) * C186) * C92566) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139362 * C139560 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139362 * C139561 +
           (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
             C1282 * C139544) *
                C92566 +
            (C41073 * C46913 + C31422 * C139544) * C139557) *
               C139362 * C7039) *
              C139521 +
          (((C1281 * C46913 + C1280 * C139544) * C92566 +
            (C97803 + C97804) * C139557) *
               C139362 * C139561 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139362 * C139560 -
           (((C416 * C8590 + C8917 + C8917 + C139465 * C8913) * C139544 +
             C31422 * C46913) *
                C139557 +
            (C1283 * C139544 + C1282 * C46913) * C92566) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139362 * C139560 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139362 * C139561 +
           (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C46913 +
            ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) *
                C139544) *
               C139362 * C7039) *
              C139521 +
          ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
            ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                C139544) *
               C139362 * C139561 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139362 * C139560 -
           (((C92703 * C8676 + C139557 * C8993 + C92702 * C942 +
              C92566 * C1362) *
                 C139465 +
             (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
              C92566 * C1056) *
                 C186) *
                C139544 +
            ((C93832 + C93831) * C139465 + (C93524 + C93523) * C186) * C46913) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[95] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139362 * C139560 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139362 * C139561 +
           ((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
            (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
               C139465 * C139362 * C7039) *
              C139521 +
          (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
            (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
               C139465 * C139362 * C139561 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139362 * C139560 -
           ((C46920 * C8756 + C139544 * C9070 + C46918 * C8757 +
             C46913 * C9071) *
                C139557 +
            (C46920 * C8590 + C139544 * C8593 + C46918 * C8591 +
             C46913 * C8594) *
                C92703 +
            (C48467 + C48466) * C92566 + (C48107 + C48106) * C92702) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C92702 +
                       (C186 * C274 + C139465 * C633) * C92566 +
                       C32132 * C92703 + C32874 * C139557) *
                          C46913 +
                      (C93089 + C93090 + C93091 + C93092) * C139544) *
                         C139362 * C139560 -
                     ((C94029 + C94030 + C94031 + C94032) * C139544 +
                      (C35975 * C139557 + C35150 * C92703 +
                       (C186 * C1053 + C139465 * C1543) * C92566 +
                       (C186 * C829 + C139465 * C939) * C92702) *
                          C46913) *
                         C139362 * C139561 +
                     (((C186 * C830 + C139465 * C940) * C92702 +
                       (C186 * C1054 + C139465 * C1544) * C92566 +
                       C40768 * C92703 + C41371 * C139557) *
                          C46913 +
                      (C94033 + C94034 + C94035 + C94036) * C139544) *
                         C139362 * C7039) *
                        C139521 +
                    (((C94032 + C94031 + C94030 + C94029) * C46913 +
                      (C96065 + C96066 + C96067 + C96068) * C139544) *
                         C139362 * C139561 -
                     ((C93093 + C93094 + C93095 + C93096) * C139544 +
                      (C93092 + C93091 + C93090 + C93089) * C46913) *
                         C139362 * C139560 -
                     (((C186 * C8756 + C139465 * C9147) * C139557 +
                       (C186 * C8590 + C139465 * C8676) * C92703 +
                       C1565 * C92566 + C976 * C92702) *
                          C139544 +
                      (C94036 + C94035 + C94034 + C94033) * C46913) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[95] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139362 * C139560 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139362 * C139561 +
                     ((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                       C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                          C139465 * C46913 +
                      (C94165 + C94166) * C139465 * C139544) *
                         C139362 * C7039) *
                        C139521 +
                    (((C94164 + C94163) * C139465 * C46913 +
                      (C96177 + C96178) * C139465 * C139544) *
                         C139362 * C139561 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139362 * C139560 -
                     ((C93167 * C8590 + C94153 + C94153 + C139557 * C9224 +
                       C93166 * C832 + C94154 + C94154 + C92566 * C1648) *
                          C139465 * C139544 +
                      (C94166 + C94165) * C139465 * C46913) *
                         C139362 * C7039) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139530 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139426) *
              C139560 +
          (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
               C139465 * C139426 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139530) *
              C139561 +
          (((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) *
               C139465 * C139530 -
           ((C46919 * C20983 + C54426 + C54426 + C139544 * C20987 +
             C46917 * C20984 + C54427 + C54427 + C46913 * C20988) *
                C139557 +
            (C57405 + C57404) * C92566) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C46918 +
                       (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
                       C217 * C139544) *
                          C92566 +
                      (C94405 + C94406 + C94407 + C94408) * C139557) *
                         C139530 -
                     ((C94409 + C94410 + C94411 + C94412) * C139557 +
                      (C94408 + C94407 + C94406 + C94405) * C92566) *
                         C139426) *
                        C139560 +
                    (((C97391 + C97392 + C97393 + C97394) * C92566 +
                      (C100027 + C100028 + C100029 + C100030) * C139557) *
                         C139426 -
                     ((C97394 + C97393 + C97392 + C97391) * C139557 +
                      (C972 * C139544 + C973 * C46920 +
                       (C186 * C837 + C139465 * C947) * C46913 +
                       (C186 * C829 + C139465 * C939) * C46918) *
                          C92566) *
                         C139530) *
                        C139561 +
                    ((((C186 * C830 + C139465 * C940) * C46918 +
                       (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
                       C975 * C139544) *
                          C92566 +
                      (C102971 + C102972 + C102973 + C102974) * C139557) *
                         C139530 -
                     (((C186 * C20985 + C139465 * C21101) * C139544 +
                       (C186 * C20983 + C139465 * C21099) * C46920 +
                       (C186 * C20986 + C139465 * C21102) * C46913 +
                       (C186 * C20984 + C139465 * C21100) * C46918) *
                          C139557 +
                      (C102974 + C102973 + C102972 + C102971) * C92566) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139530 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139426) *
              C139560 +
          (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
             C139557 * C6491) *
                C46918 +
            (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
             C139557 * C6494) *
                C46913 +
            (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
               C139465 * C139426 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139530) *
              C139561 +
          (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C46918 +
            (C92702 * C838 + C92566 * C1062 + C92703 * C8595 +
             C139557 * C8761) *
                C46913 +
            (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
               C139465 * C139530 -
           ((C92703 * C20985 + C139557 * C21203 + C92702 * C8594 +
             C92566 * C8760) *
                C139544 +
            (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
             C92566 * C8757) *
                C46920 +
            (C92703 * C20986 + C139557 * C21204 + C92702 * C8595 +
             C92566 * C8761) *
                C46913 +
            (C92703 * C20984 + C139557 * C21202 + C92702 * C8592 +
             C92566 * C8758) *
                C46918) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139530 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139426) *
              C139560 +
          ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
            ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                C139557) *
               C139426 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139530) *
              C139561 +
          ((((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
            ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) *
                C139557) *
               C139530 -
           (((C46920 * C21099 + C139544 * C21313 + C46918 * C21100 +
              C46913 * C21314) *
                 C139465 +
             (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
              C46913 * C20986) *
                 C186) *
                C139557 +
            ((C57715 + C57714) * C139465 + (C57713 + C57712) * C186) * C92566) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139530 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139426) *
              C139560 +
          (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
               C139426 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139530) *
              C139561 +
          ((((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
             C1282 * C139544) *
                C92566 +
            (C103269 + C103270) * C139557) *
               C139530 -
           (((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139544 +
             (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C46913) *
                C139557 +
            (C103270 + C103269) * C92566) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyz[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139530 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139426) *
              C139560 +
          ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C46913 +
            ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                C139544) *
               C139426 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139530) *
              C139561 +
          ((((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C46913 +
            ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) *
                C139544) *
               C139530 -
           (((C92703 * C21099 + C139557 * C21529 + C92702 * C8677 +
              C92566 * C8994) *
                 C139465 +
             (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
              C92566 * C8757) *
                 C186) *
                C139544 +
            ((C92703 * C21100 + C139557 * C21530 + C92702 * C8678 +
              C92566 * C8995) *
                 C139465 +
             (C92703 * C20984 + C139557 * C21202 + C92702 * C8592 +
              C92566 * C8758) *
                 C186) *
                C46913) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[96] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139530 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139426) *
              C139560 +
          (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
            (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
               C139465 * C139426 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139530) *
              C139561 +
          (((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
            (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
               C139465 * C139530 -
           ((C46920 * C21201 + C139544 * C21632 + C46918 * C21202 +
             C46913 * C21633) *
                C139557 +
            (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
             C46913 * C20986) *
                C92703 +
            (C58019 + C58018) * C92566 + (C57713 + C57712) * C92702) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C92702 +
                       (C186 * C274 + C139465 * C633) * C92566 +
                       C32132 * C92703 + C32874 * C139557) *
                          C46913 +
                      (C93089 + C93090 + C93091 + C93092) * C139544) *
                         C139530 -
                     ((C95125 + C95126 + C95127 + C95128) * C139544 +
                      (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                       C32132 * C92702) *
                          C46913) *
                         C139426) *
                        C139560 +
                    (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
                       C38411 * C139557) *
                          C46913 +
                      (C98201 + C98202 + C98203 + C98204) * C139544) *
                         C139426 -
                     ((C94029 + C94030 + C94031 + C94032) * C139544 +
                      (C35975 * C139557 + C35150 * C92703 +
                       (C186 * C1053 + C139465 * C1543) * C92566 +
                       (C186 * C829 + C139465 * C939) * C92702) *
                          C46913) *
                         C139530) *
                        C139561 +
                    ((((C186 * C830 + C139465 * C940) * C92702 +
                       (C186 * C1054 + C139465 * C1544) * C92566 +
                       C40768 * C92703 + C41371 * C139557) *
                          C46913 +
                      (C94033 + C94034 + C94035 + C94036) * C139544) *
                         C139530 -
                     (((C186 * C21201 + C139465 * C21738) * C139557 +
                       (C186 * C20983 + C139465 * C21099) * C92703 +
                       C31738 * C92566 + C31098 * C92702) *
                          C139544 +
                      ((C186 * C21202 + C139465 * C21739) * C139557 +
                       (C186 * C20984 + C139465 * C21100) * C92703 +
                       C41371 * C92566 + C40768 * C92702) *
                          C46913) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eezz[96] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139530 -
                     ((C95259 + C95260) * C139465 * C139544 +
                      (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                       C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                          C139465 * C46913) *
                         C139426) *
                        C139560 +
                    (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                       C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                          C139465 * C46913 +
                      (C98349 + C98350) * C139465 * C139544) *
                         C139426 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139530) *
                        C139561 +
                    (((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                       C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                          C139465 * C46913 +
                      (C94165 + C94166) * C139465 * C139544) *
                         C139530 -
                     ((C93167 * C20983 + C103663 + C103663 + C139557 * C21838 +
                       C93166 * C8591 + C103664 + C103664 + C92566 * C9225) *
                          C139465 * C139544 +
                      (C93167 * C20984 + C103665 + C103665 + C139557 * C21839 +
                       C93166 * C8592 + C103666 + C103666 + C92566 * C9226) *
                          C139465 * C46913) *
                         C139426) *
                        C7039) *
                   C139327) /
                  (p * q * std::sqrt(p + q));
    d2eexx[97] +=
        (-std::pow(Pi, 2.5) *
         (((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
            C46923 + C46923 + C139544 * C119) *
               C92566 +
           (C94299 + C94300) * C139557) *
              C139465 * C139362 * C5796 -
          ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) * C139465 *
              C139362 * C5797 +
          ((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) * C139465 *
              C139362 * C5798 -
          ((C46919 * C23997 + C57398 + C57398 + C139544 * C24001 +
            C46917 * C23998 + C57399 + C57399 + C46913 * C24002) *
               C139557 +
           (C53769 + C53768) * C92566) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139362 * C5149 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
               C139465 * C139362 * C139398 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
             C46931 + C46931 + C139544 * C121) *
                C92566 +
            (C96287 + C96288) * C139557) *
               C139465 * C139362 * C5149 -
           ((C46919 * C4162 + C50708 + C50708 + C139544 * C4170 +
             C46917 * C4161 + C50709 + C50709 + C46913 * C4169) *
                C139557 +
            (C49767 + C49766) * C92566) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C1757 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C1758 +
           ((C94302 + C94301) * C92566 +
            (C46917 * C10620 + C60049 + C60049 + C46913 * C10626 +
             C46919 * C10619 + C60048 + C60048 + C139544 * C10625) *
                C139557) *
               C139465 * C1759) *
              C5149 +
          (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
               C139465 * C1758 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C1757 -
           ((C46919 * C26691 + C60046 + C60046 + C139544 * C26695 +
             C46917 * C26692 + C60047 + C60047 + C46913 * C26696) *
                C139557 +
            (C54433 + C54432) * C92566) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C46918 +
            (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
            C217 * C139544) *
               C92566 +
           (C94405 + C94406 + C94407 + C94408) * C139557) *
              C139362 * C5796 -
          ((C97394 + C97393 + C97392 + C97391) * C139557 +
           (C972 * C139544 + C973 * C46920 +
            (C186 * C837 + C139465 * C947) * C46913 +
            (C186 * C829 + C139465 * C939) * C46918) *
               C92566) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C46918 +
            (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
            C975 * C139544) *
               C92566 +
           (C40768 * C46918 + C40769 * C46913 + C31098 * C46920 +
            C31099 * C139544) *
               C139557) *
              C139362 * C5798 -
          (((C186 * C23999 + C139465 * C24115) * C139544 +
            (C186 * C23997 + C139465 * C24113) * C46920 +
            (C186 * C24000 + C139465 * C24116) * C46913 +
            (C186 * C23998 + C139465 * C24114) * C46918) *
               C139557 +
           ((C186 * C5805 + C139465 * C5867) * C139544 +
            (C186 * C5802 + C139465 * C5864) * C46920 +
            (C186 * C5806 + C139465 * C5868) * C46913 +
            (C186 * C5803 + C139465 * C5865) * C46918) *
               C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C139362 * C5149 -
           ((C97394 + C97393 + C97392 + C97391) * C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C139362 * C139398) *
              C5151 +
          (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                C92566 +
            (C97395 + C97396 + C97397 + C97398) * C139557) *
               C139362 * C139398 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139362 * C5149) *
              C5152 +
          (((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
                C92566 +
            (C96387 + C96388 + C96389 + C96390) * C139557) *
               C139362 * C5149 -
           (((C186 * C4166 + C139465 * C4282) * C139544 +
             (C186 * C4162 + C139465 * C4278) * C46920 + C4295 * C46913 +
             C4294 * C46918) *
                C139557 +
            (C2783 * C139544 + C2782 * C46920 + C970 * C46913 + C971 * C46918) *
                C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C1757 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C1758 +
           ((C94412 + C94411 + C94410 + C94409) * C92566 +
            (C43398 * C46918 + C43399 * C46913 + C32136 * C46920 +
             C32137 * C139544) *
                C139557) *
               C1759) *
              C5149 +
          (((C97391 + C97392 + C97393 + C97394) * C92566 +
            (C100027 + C100028 + C100029 + C100030) * C139557) *
               C1758 -
           ((C97394 + C97393 + C97392 + C97391) * C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C1757 -
           (((C186 * C26693 + C139465 * C26769) * C139544 +
             (C186 * C26691 + C139465 * C26767) * C46920 +
             (C186 * C26694 + C139465 * C26770) * C46913 +
             (C186 * C26692 + C139465 * C26768) * C46918) *
                C139557 +
            (C100030 + C100029 + C100028 + C100027) * C92566) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[97] +=
        (-std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C46918 +
           (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
               C46913 +
           (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
              C139465 * C139362 * C5796 -
          ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
           (C92703 * C4163 + C139557 * C4397 + C92702 * C837 + C92566 * C1061) *
               C46913 +
           (C92703 * C4159 + C139557 * C4393 + C92702 * C829 + C92566 * C1053) *
               C46918) *
              C139465 * C139362 * C5797 +
          ((C92702 * C830 + C92566 * C1054 + C92703 * C8592 + C139557 * C8758) *
               C46918 +
           (C92702 * C838 + C92566 * C1062 + C92703 * C8595 + C139557 * C8761) *
               C46913 +
           (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
              C139465 * C139362 * C5798 -
          ((C92703 * C23999 + C139557 * C24217 + C92702 * C5805 +
            C92566 * C5923) *
               C139544 +
           (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
            C92566 * C5920) *
               C46920 +
           (C92703 * C24000 + C139557 * C24218 + C92702 * C5806 +
            C92566 * C5924) *
               C46913 +
           (C92703 * C23998 + C139557 * C24216 + C92702 * C5803 +
            C92566 * C5921) *
               C46918) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139362 * C5149 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
            (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
               C139465 * C139362 * C139398 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
            (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
               C139465 * C139362 * C5149 -
           ((C92703 * C4166 + C139557 * C4400 + C92702 * C841 +
             C92566 * C1065) *
                C139544 +
            (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
             C92566 * C1057) *
                C46920 +
            (C95568 + C95567) * C46913 + (C95566 + C95565) * C46918) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C1757 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C1758 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C46918 +
            (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
             C139557 * C10741) *
                C46913 +
            (C94539 + C94540) * C46920 + (C94541 + C94542) * C139544) *
               C139465 * C1759) *
              C5149 +
          (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
             C139557 * C6491) *
                C46918 +
            (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
             C139557 * C6494) *
                C46913 +
            (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
               C139465 * C1758 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C1757 -
           ((C92703 * C26693 + C139557 * C26839 + C92702 * C6327 +
             C92566 * C6493) *
                C139544 +
            (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
             C92566 * C6490) *
                C46920 +
            (C92703 * C26694 + C139557 * C26840 + C92702 * C6328 +
             C92566 * C6494) *
                C46913 +
            (C92703 * C26692 + C139557 * C26838 + C92702 * C6325 +
             C92566 * C6491) *
                C46918) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C186 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C139465) *
               C92566 +
           ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) * C139557) *
              C139362 * C5796 -
          (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
           ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
              C139362 * C5797 +
          (((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
           ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) * C139557) *
              C139362 * C5798 -
          (((C46920 * C24113 + C139544 * C24327 + C46918 * C24114 +
             C46913 * C24328) *
                C139465 +
            (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
             C46913 * C24000) *
                C186) *
               C139557 +
           ((C53983 + C53982) * C139465 + (C53981 + C53980) * C186) * C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139362 * C139398) *
              C5151 +
          ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
            ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                C139557) *
               C139362 * C139398 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139362 * C5149) *
              C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C186 +
             (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                 C139465) *
                C92566 +
            ((C96607 + C96608) * C186 + (C96609 + C96610) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C46920 * C4278 + C139544 * C4514 + C46918 * C4277 +
              C46913 * C4513) *
                 C139465 +
             (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
              C46913 * C4165) *
                 C186) *
                C139557 +
            ((C50089 + C50088) * C139465 + (C50087 + C50086) * C186) * C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C1757 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C1758 +
           (((C94680 + C94679) * C186 + (C94678 + C94677) * C139465) * C92566 +
            ((C46918 * C10620 + C46913 * C10623 + C46920 * C10619 +
              C139544 * C10622) *
                 C186 +
             (C46918 * C10682 + C46913 * C10794 + C46920 * C10681 +
              C139544 * C10793) *
                 C139465) *
                C139557) *
               C1759) *
              C5149 +
          ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
            ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                C139557) *
               C1758 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C1757 -
           (((C46920 * C26767 + C139544 * C26907 + C46918 * C26768 +
              C46913 * C26908) *
                 C139465 +
             (C46920 * C26691 + C139544 * C26693 + C46918 * C26692 +
              C46913 * C26694) *
                 C186) *
                C139557 +
            ((C54743 + C54742) * C139465 + (C54741 + C54740) * C186) * C92566) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
            C446 * C139544) *
               C92566 +
           (C94787 + C94788) * C139557) *
              C139362 * C5796 -
          ((C97802 + C97801) * C139557 +
           (C1281 * C139544 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
               C92566) *
              C139362 * C5797 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
            C1282 * C139544) *
               C92566 +
           (C41073 * C46913 + C31422 * C139544) * C139557) *
              C139362 * C5798 -
          (((C416 * C23997 + C37336 + C37336 + C139465 * C24439) * C139544 +
            (C416 * C23998 + C37337 + C37337 + C139465 * C24440) * C46913) *
               C139557 +
           ((C416 * C5802 + C6033 + C6033 + C139465 * C6029) * C139544 +
            (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C46913) *
               C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139362 * C5149 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139362 * C139398) *
              C5151 +
          (((C1281 * C46913 + C1280 * C139544) * C92566 +
            (C97803 + C97804) * C139557) *
               C139362 * C139398 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139362 * C5149) *
              C5152 +
          (((C447 * C46913 + C448 * C139544) * C92566 +
            (C96709 + C96710) * C139557) *
               C139362 * C5149 -
           (((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C139544 +
             C4631 * C46913) *
                C139557 +
            (C3021 * C139544 + C1280 * C46913) * C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C1757 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) * C1758 +
           ((C94790 + C94789) * C92566 +
            (C43627 * C46913 + C32528 * C139544) * C139557) *
               C1759) *
              C5149 +
          (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
               C1758 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C1757 -
           (((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139544 +
             (C416 * C26692 + C38110 + C38110 + C139465 * C26976) * C46913) *
                C139557 +
            (C100326 + C100325) * C92566) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C186 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C139465) *
               C46913 +
           ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) * C139544) *
              C139362 * C5796 -
          (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
           ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
             C92566 * C1359) *
                C139465 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C186) *
               C46913) *
              C139362 * C5797 +
          (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C186 +
            (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
             C139557 * C8995) *
                C139465) *
               C46913 +
           ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) * C139544) *
              C139362 * C5798 -
          (((C92703 * C24113 + C139557 * C24543 + C92702 * C5864 +
             C92566 * C6085) *
                C139465 +
            (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
             C92566 * C5920) *
                C186) *
               C139544 +
           ((C92703 * C24114 + C139557 * C24544 + C92702 * C5865 +
             C92566 * C6086) *
                C139465 +
            (C92703 * C23998 + C139557 * C24216 + C92702 * C5803 +
             C92566 * C5921) *
                C186) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139362 * C139398) *
              C5151 +
          ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
            ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                C139544) *
               C139362 * C139398 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139362 * C5149) *
              C5152 +
          ((((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
            ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C92703 * C4278 + C139557 * C4732 + C92702 * C943 +
              C92566 * C1363) *
                 C139465 +
             (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
              C92566 * C1057) *
                 C186) *
                C139544 +
            ((C95868 + C95867) * C139465 + (C95566 + C95565) * C186) * C46913) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C1757 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C1758 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C46913 +
            ((C94539 + C94540) * C186 + (C94903 + C94904) * C139465) *
                C139544) *
               C1759) *
              C5149 +
          ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C46913 +
            ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                C139544) *
               C1758 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C1757 -
           (((C92703 * C26767 + C139557 * C27047 + C92702 * C6410 +
              C92566 * C6727) *
                 C139465 +
             (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
              C92566 * C6490) *
                 C186) *
                C139544 +
            ((C92703 * C26768 + C139557 * C27048 + C92702 * C6411 +
              C92566 * C6728) *
                 C139465 +
             (C92703 * C26692 + C139557 * C26838 + C92702 * C6325 +
              C92566 * C6491) *
                 C186) *
                C46913) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[97] +=
        (-std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C92702 +
           (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
               C92566 +
           (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
              C139465 * C139362 * C5796 -
          ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
           (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
              C139465 * C139362 * C5797 +
          ((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
           (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
              C139465 * C139362 * C5798 -
          ((C46920 * C24215 + C139544 * C24646 + C46918 * C24216 +
            C46913 * C24647) *
               C139557 +
           (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
            C46913 * C24000) *
               C92703 +
           (C54191 + C54190) * C92566 + (C53981 + C53980) * C92702) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139362 * C5149 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
            (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
               C139465 * C139362 * C139398 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C92702 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C92566 +
            (C96607 + C96608) * C92703 + (C96917 + C96918) * C139557) *
               C139465 * C139362 * C5149 -
           ((C46920 * C4396 + C139544 * C4844 + C46918 * C4395 +
             C46913 * C4843) *
                C139557 +
            (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
             C46913 * C4165) *
                C92703 +
            (C50405 + C50404) * C92566 + (C50087 + C50086) * C92702) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C1757 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C1758 +
           ((C94680 + C94679) * C92702 + (C95022 + C95021) * C92566 +
            (C46918 * C10620 + C46913 * C10623 + C46920 * C10619 +
             C139544 * C10622) *
                C92703 +
            (C46918 * C10738 + C46913 * C10956 + C46920 * C10737 +
             C139544 * C10955) *
                C139557) *
               C139465 * C1759) *
              C5149 +
          (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
            (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
               C139465 * C1758 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C1757 -
           ((C46920 * C26837 + C139544 * C27115 + C46918 * C26838 +
             C46913 * C27116) *
                C139557 +
            (C46920 * C26691 + C139544 * C26693 + C46918 * C26692 +
             C46913 * C26694) *
                C92703 +
            (C55047 + C55046) * C92566 + (C54741 + C54740) * C92702) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[97] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C92702 +
            (C186 * C274 + C139465 * C633) * C92566 + C32132 * C92703 +
            C32874 * C139557) *
               C46913 +
           (C93089 + C93090 + C93091 + C93092) * C139544) *
              C139362 * C5796 -
          ((C94029 + C94030 + C94031 + C94032) * C139544 +
           (C35975 * C139557 + C35150 * C92703 +
            (C186 * C1053 + C139465 * C1543) * C92566 +
            (C186 * C829 + C139465 * C939) * C92702) *
               C46913) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C92702 +
            (C186 * C1054 + C139465 * C1544) * C92566 + C40768 * C92703 +
            C41371 * C139557) *
               C46913 +
           (C94033 + C94034 + C94035 + C94036) * C139544) *
              C139362 * C5798 -
          (((C186 * C24215 + C139465 * C24752) * C139557 +
            (C186 * C23997 + C139465 * C24113) * C92703 +
            (C186 * C5920 + C139465 * C6191) * C92566 +
            (C186 * C5802 + C139465 * C5864) * C92702) *
               C139544 +
           ((C186 * C24216 + C139465 * C24753) * C139557 +
            (C186 * C23998 + C139465 * C24114) * C92703 +
            (C186 * C5921 + C139465 * C6192) * C92566 +
            (C186 * C5803 + C139465 * C5865) * C92702) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C186 * C106 + C139465 * C187) * C92702 +
                                 (C186 * C274 + C139465 * C633) * C92566 +
                                 C32132 * C92703 + C32874 * C139557) *
                                    C46913 +
                                (C93089 + C93090 + C93091 + C93092) * C139544) *
                                   C139362 * C5149 -
                               ((C94029 + C94030 + C94031 + C94032) * C139544 +
                                (C35975 * C139557 + C35150 * C92703 +
                                 (C186 * C1053 + C139465 * C1543) * C92566 +
                                 (C186 * C829 + C139465 * C939) * C92702) *
                                    C46913) *
                                   C139362 * C139398) *
                                  C5151 +
                              (((C94032 + C94031 + C94030 + C94029) * C46913 +
                                (C96065 + C96066 + C96067 + C96068) * C139544) *
                                   C139362 * C139398 -
                               ((C93093 + C93094 + C93095 + C93096) * C139544 +
                                (C93092 + C93091 + C93090 + C93089) * C46913) *
                                   C139362 * C5149) *
                                  C5152 +
                              (((C93096 + C93095 + C93094 + C93093) * C46913 +
                                (C93097 + C93098 + C93099 + C93100) * C139544) *
                                   C139362 * C5149 -
                               (((C186 * C4396 + C139465 * C4946) * C139557 +
                                 (C186 * C4162 + C139465 * C4278) * C92703 +
                                 C3257 * C92566 + C2782 * C92702) *
                                    C139544 +
                                (C96068 + C96067 + C96066 + C96065) * C46913) *
                                   C139362 * C139398) *
                                  C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C92702 +
             (C186 * C274 + C139465 * C633) * C92566 + C32132 * C92703 +
             C32874 * C139557) *
                C46913 +
            (C93089 + C93090 + C93091 + C93092) * C139544) *
               C1757 -
           ((C95125 + C95126 + C95127 + C95128) * C139544 +
            (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
             C32132 * C92702) *
                C46913) *
               C1758 +
           ((C32135 * C92702 + C32875 * C92566 + C43398 * C92703 +
             C43841 * C139557) *
                C46913 +
            (C95129 + C95130 + C95131 + C95132) * C139544) *
               C1759) *
              C5149 +
          (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
             C38411 * C139557) *
                C46913 +
            (C98201 + C98202 + C98203 + C98204) * C139544) *
               C1758 -
           ((C94029 + C94030 + C94031 + C94032) * C139544 +
            (C35975 * C139557 + C35150 * C92703 +
             (C186 * C1053 + C139465 * C1543) * C92566 +
             (C186 * C829 + C139465 * C939) * C92702) *
                C46913) *
               C1757 -
           (((C186 * C26837 + C139465 * C27183) * C139557 +
             (C186 * C26691 + C139465 * C26767) * C92703 + C35976 * C92566 +
             C35152 * C92702) *
                C139544 +
            ((C186 * C26838 + C139465 * C27184) * C139557 +
             (C186 * C26692 + C139465 * C26768) * C92703 + C38411 * C92566 +
             C37808 * C92702) *
                C46913) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[97] += (-std::pow(Pi, 2.5) *
                   (((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                      C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                         C139465 * C46913 +
                     (C93203 + C93204) * C139465 * C139544) *
                        C139362 * C5796 -
                    ((C94163 + C94164) * C139465 * C139544 +
                     (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                      C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                         C139465 * C46913) *
                        C139362 * C5797 +
                    ((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                      C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                         C139465 * C46913 +
                     (C94165 + C94166) * C139465 * C139544) *
                        C139362 * C5798 -
                    ((C93167 * C23997 + C99827 + C99827 + C139557 * C24852 +
                      C93166 * C5802 + C99828 + C99828 + C92566 * C6244) *
                         C139465 * C139544 +
                     (C93167 * C23998 + C99829 + C99829 + C139557 * C24853 +
                      C93166 * C5803 + C99830 + C99830 + C92566 * C6245) *
                         C139465 * C46913) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139362 * C139398) *
                        C5151 +
                    (((C94164 + C94163) * C139465 * C46913 +
                      (C96177 + C96178) * C139465 * C139544) *
                         C139362 * C139398 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139362 * C5149) *
                        C5152 +
                    (((C93206 + C93205) * C139465 * C46913 +
                      (C93207 + C93208) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C93167 * C4162 + C96171 + C96171 + C139557 * C5058 +
                       C93166 * C833 + C96172 + C96172 + C92566 * C1649) *
                          C139465 * C139544 +
                      (C96178 + C96177) * C139465 * C46913) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C1757 -
                     ((C95259 + C95260) * C139465 * C139544 +
                      (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                       C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                          C139465 * C46913) *
                         C1758 +
                     ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
                       C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                          C139465 * C46913 +
                      (C95261 + C95262) * C139465 * C139544) *
                         C1759) *
                        C5149 +
                    (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                       C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                          C139465 * C46913 +
                      (C98349 + C98350) * C139465 * C139544) *
                         C1758 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C1757 -
                     ((C93167 * C26691 + C100719 + C100719 + C139557 * C27251 +
                       C93166 * C6324 + C100720 + C100720 + C92566 * C6958) *
                          C139465 * C139544 +
                      (C93167 * C26692 + C100721 + C100721 + C139557 * C27252 +
                       C93166 * C6325 + C100722 + C100722 + C92566 * C6959) *
                          C139465 * C46913) *
                         C1759) *
                        C139398) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
              C46923 + C46923 + C139544 * C119) *
                 C92566 +
             (C94299 + C94300) * C139557) *
                C139465 * C139530 -
            ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
                C139465 * C139426) *
               C5149 +
           (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
                C139465 * C139426 -
            ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
                C139465 * C139426 -
            ((C94304 + C94303) * C139557 +
             (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
              C46929 + C46929 + C46913 * C119) *
                 C92566) *
                C139465 * C139530) *
               C5149 +
           (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
                C139465 * C139530 -
            ((C46919 * C6323 + C48790 + C48790 + C139544 * C6329 +
              C46917 * C6324 + C48791 + C48791 + C46913 * C6330) *
                 C139557 +
             (C51685 + C51684) * C92566) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C46918 +
              (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
              C217 * C139544) *
                 C92566 +
             (C94405 + C94406 + C94407 + C94408) * C139557) *
                C139530 -
            ((C94409 + C94410 + C94411 + C94412) * C139557 +
             (C94408 + C94407 + C94406 + C94405) * C92566) *
                C139426) *
               C5149 +
           (((C97391 + C97392 + C97393 + C97394) * C92566 +
             (C100027 + C100028 + C100029 + C100030) * C139557) *
                C139426 -
            ((C97394 + C97393 + C97392 + C97391) * C139557 +
             (C972 * C139544 + C973 * C46920 +
              (C186 * C837 + C139465 * C947) * C46913 +
              (C186 * C829 + C139465 * C939) * C46918) *
                 C92566) *
                C139530) *
               C139398) *
              C139521 +
          ((((C94413 + C94414 + C94415 + C94416) * C92566 +
             (C94417 + C94418 + C94419 + C94420) * C139557) *
                C139426 -
            ((C94416 + C94415 + C94414 + C94413) * C139557 +
             (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                 C92566) *
                C139530) *
               C5149 +
           (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                 C92566 +
             (C97395 + C97396 + C97397 + C97398) * C139557) *
                C139530 -
            (((C186 * C6326 + C139465 * C6412) * C139544 +
              (C186 * C6323 + C139465 * C6409) * C46920 + C35153 * C46913 +
              C35152 * C46918) *
                 C139557 +
             (C97398 + C97397 + C97396 + C97395) * C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C46918 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C46913 +
             (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
                C139465 * C139530 -
            ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
             (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C46913 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C46918) *
                C139465 * C139426) *
               C5149 +
           (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C46918 +
             (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
              C139557 * C6494) *
                 C46913 +
             (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
                C139465 * C139426 -
            ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
             (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
              C92566 * C1061) *
                 C46913 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C46918) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
             (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
                C139465 * C139426 -
            ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
             (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
                C139465 * C139530) *
               C5149 +
           (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
             (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
                C139465 * C139530 -
            ((C92703 * C6326 + C139557 * C6492 + C92702 * C4165 +
              C92566 * C4399) *
                 C139544 +
             (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
              C92566 * C4395) *
                 C46920 +
             (C97540 + C97539) * C46913 + (C97538 + C97537) * C46918) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                  C186 +
              (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                  C139465) *
                 C92566 +
             ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                 C139557) *
                C139530 -
            (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) *
                 C139557 +
             ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) *
                 C92566) *
                C139426) *
               C5149 +
           ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
             ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                 C139557) *
                C139426 -
            (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) *
                 C139557 +
             ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) *
                 C92566) *
                C139530) *
               C139398) *
              C139521 +
          (((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
             ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                 C139557) *
                C139426 -
            (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) *
                 C139557 +
             ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                  C139465 +
              (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                  C186) *
                 C92566) *
                C139530) *
               C5149 +
           ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
             ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                 C139557) *
                C139530 -
            (((C46920 * C6409 + C139544 * C6569 + C46918 * C6410 +
               C46913 * C6570) *
                  C139465 +
              (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
               C46913 * C6327) *
                  C186) *
                 C139557 +
             ((C52119 + C52118) * C139465 + (C52117 + C52116) * C186) *
                 C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
              C446 * C139544) *
                 C92566 +
             (C94787 + C94788) * C139557) *
                C139530 -
            ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
                C139426) *
               C5149 +
           (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
                C139426 -
            ((C97802 + C97801) * C139557 +
             (C1281 * C139544 +
              (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                 C92566) *
                C139530) *
               C139398) *
              C139521 +
          ((((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
                C139426 -
            ((C94792 + C94791) * C139557 +
             (C447 * C139544 + C446 * C46913) * C92566) *
                C139530) *
               C5149 +
           (((C1281 * C46913 + C1280 * C139544) * C92566 +
             (C97803 + C97804) * C139557) *
                C139530 -
            (((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139544 +
              C35570 * C46913) *
                 C139557 +
             (C97804 + C97803) * C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
               C139557 * C1986) *
                  C186 +
              (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
               C139557 * C2292) *
                  C139465) *
                 C46913 +
             ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                 C139544) *
                C139530 -
            (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) *
                 C139544 +
             ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
               C92566 * C2292) *
                  C139465 +
              (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
               C92566 * C1986) *
                  C186) *
                 C46913) *
                C139426) *
               C5149 +
           ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
               C139557 * C6491) *
                  C186 +
              (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
               C139557 * C6728) *
                  C139465) *
                 C46913 +
             ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                 C139544) *
                C139426 -
            (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) *
                 C139544 +
             ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
               C92566 * C1359) *
                  C139465 +
              (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
               C92566 * C1053) *
                  C186) *
                 C46913) *
                C139530) *
               C139398) *
              C139521 +
          (((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
             ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                 C139544) *
                C139426 -
            (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) *
                 C139544 +
             ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) *
                 C46913) *
                C139530) *
               C5149 +
           ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
             ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                 C139544) *
                C139530 -
            (((C92703 * C6409 + C139557 * C6726 + C92702 * C4277 +
               C92566 * C4731) *
                  C139465 +
              (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
               C92566 * C4395) *
                  C186) *
                 C139544 +
             ((C97940 + C97939) * C139465 + (C97538 + C97537) * C186) *
                 C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[98] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C92702 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C92566 +
             (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
                C139465 * C139530 -
            ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
             (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
                C139465 * C139426) *
               C5149 +
           (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
             (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
                C139465 * C139426 -
            ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
             (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
             (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
                C139465 * C139426 -
            ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
             (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C92566 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C92702) *
                C139465 * C139530) *
               C5149 +
           (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
             (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
                C139465 * C139530 -
            ((C46920 * C6489 + C139544 * C6803 + C46918 * C6490 +
              C46913 * C6804) *
                 C139557 +
             (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
              C46913 * C6327) *
                 C92703 +
             (C52541 + C52540) * C92566 + (C52117 + C52116) * C92702) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[98] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((((C186 * C106 + C139465 * C187) * C92702 +
                        (C186 * C274 + C139465 * C633) * C92566 +
                        C32132 * C92703 + C32874 * C139557) *
                           C46913 +
                       (C93089 + C93090 + C93091 + C93092) * C139544) *
                          C139530 -
                      ((C95125 + C95126 + C95127 + C95128) * C139544 +
                       (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                        C32132 * C92702) *
                           C46913) *
                          C139426) *
                         C5149 +
                     (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
                        C38411 * C139557) *
                           C46913 +
                       (C98201 + C98202 + C98203 + C98204) * C139544) *
                          C139426 -
                      ((C94029 + C94030 + C94031 + C94032) * C139544 +
                       (C35975 * C139557 + C35150 * C92703 +
                        (C186 * C1053 + C139465 * C1543) * C92566 +
                        (C186 * C829 + C139465 * C939) * C92702) *
                           C46913) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C95128 + C95127 + C95126 + C95125) * C46913 +
                       (C97017 + C97018 + C97019 + C97020) * C139544) *
                          C139426 -
                      ((C93093 + C93094 + C93095 + C93096) * C139544 +
                       (C93092 + C93091 + C93090 + C93089) * C46913) *
                          C139530) *
                         C5149 +
                     (((C94032 + C94031 + C94030 + C94029) * C46913 +
                       (C96065 + C96066 + C96067 + C96068) * C139544) *
                          C139530 -
                      (((C186 * C6489 + C139465 * C6880) * C139557 +
                        (C186 * C6323 + C139465 * C6409) * C92703 +
                        C4955 * C92566 + C4294 * C92702) *
                           C139544 +
                       (C98204 + C98203 + C98202 + C98201) * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[98] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C139530 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139426) *
                         C5149 +
                     (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                        C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                           C139465 * C46913 +
                       (C98349 + C98350) * C139465 * C139544) *
                          C139426 -
                      ((C94163 + C94164) * C139465 * C139544 +
                       (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                        C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                           C139465 * C46913) *
                          C139530) *
                         C139398) *
                        C139521 +
                    ((((C95260 + C95259) * C139465 * C46913 +
                       (C97129 + C97130) * C139465 * C139544) *
                          C139426 -
                      ((C93205 + C93206) * C139465 * C139544 +
                       (C93204 + C93203) * C139465 * C46913) *
                          C139530) *
                         C5149 +
                     (((C94164 + C94163) * C139465 * C46913 +
                       (C96177 + C96178) * C139465 * C139544) *
                          C139530 -
                      ((C93167 * C6323 + C98343 + C98343 + C139557 * C6957 +
                        C93166 * C4161 + C98344 + C98344 + C92566 * C5057) *
                           C139465 * C139544 +
                       (C98350 + C98349) * C139465 * C46913) *
                          C139426) *
                         C139398) *
                        C139333)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139362 * C5149 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
               C139465 * C139362 * C139398 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
             C46931 + C46931 + C139544 * C121) *
                C92566 +
            (C96287 + C96288) * C139557) *
               C139465 * C139362 * C5149 -
           ((C46919 * C4162 + C50708 + C50708 + C139544 * C4170 +
             C46917 * C4161 + C50709 + C50709 + C46913 * C4169) *
                C139557 +
            (C49767 + C49766) * C92566) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
            C46923 + C46923 + C139544 * C119) *
               C92566 +
           (C94299 + C94300) * C139557) *
              C139465 * C139362 * C5796 -
          ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) * C139465 *
              C139362 * C5797 +
          ((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) * C139465 *
              C139362 * C5798 -
          ((C46919 * C23997 + C57398 + C57398 + C139544 * C24001 +
            C46917 * C23998 + C57399 + C57399 + C46913 * C24002) *
               C139557 +
           (C53769 + C53768) * C92566) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C139362 * C5149 -
           ((C97394 + C97393 + C97392 + C97391) * C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C139362 * C139398) *
              C5151 +
          (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                C92566 +
            (C97395 + C97396 + C97397 + C97398) * C139557) *
               C139362 * C139398 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139362 * C5149) *
              C5152 +
          (((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
                C92566 +
            (C96387 + C96388 + C96389 + C96390) * C139557) *
               C139362 * C5149 -
           (((C186 * C4166 + C139465 * C4282) * C139544 +
             (C186 * C4162 + C139465 * C4278) * C46920 + C4295 * C46913 +
             C4294 * C46918) *
                C139557 +
            (C2783 * C139544 + C2782 * C46920 + C970 * C46913 + C971 * C46918) *
                C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C46918 +
            (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
            C217 * C139544) *
               C92566 +
           (C94405 + C94406 + C94407 + C94408) * C139557) *
              C139362 * C5796 -
          ((C97394 + C97393 + C97392 + C97391) * C139557 +
           (C972 * C139544 + C973 * C46920 +
            (C186 * C837 + C139465 * C947) * C46913 +
            (C186 * C829 + C139465 * C939) * C46918) *
               C92566) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C46918 +
            (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
            C975 * C139544) *
               C92566 +
           (C40768 * C46918 + C40769 * C46913 + C31098 * C46920 +
            C31099 * C139544) *
               C139557) *
              C139362 * C5798 -
          (((C186 * C23999 + C139465 * C24115) * C139544 +
            (C186 * C23997 + C139465 * C24113) * C46920 +
            (C186 * C24000 + C139465 * C24116) * C46913 +
            (C186 * C23998 + C139465 * C24114) * C46918) *
               C139557 +
           ((C186 * C5805 + C139465 * C5867) * C139544 +
            (C186 * C5802 + C139465 * C5864) * C46920 +
            (C186 * C5806 + C139465 * C5868) * C46913 +
            (C186 * C5803 + C139465 * C5865) * C46918) *
               C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139362 * C5149 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
            (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
               C139465 * C139362 * C139398 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
            (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
               C139465 * C139362 * C5149 -
           ((C92703 * C4166 + C139557 * C4400 + C92702 * C841 +
             C92566 * C1065) *
                C139544 +
            (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
             C92566 * C1057) *
                C46920 +
            (C95568 + C95567) * C46913 + (C95566 + C95565) * C46918) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C46918 +
           (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
               C46913 +
           (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
              C139465 * C139362 * C5796 -
          ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
           (C92703 * C4163 + C139557 * C4397 + C92702 * C837 + C92566 * C1061) *
               C46913 +
           (C92703 * C4159 + C139557 * C4393 + C92702 * C829 + C92566 * C1053) *
               C46918) *
              C139465 * C139362 * C5797 +
          ((C92702 * C830 + C92566 * C1054 + C92703 * C8592 + C139557 * C8758) *
               C46918 +
           (C92702 * C838 + C92566 * C1062 + C92703 * C8595 + C139557 * C8761) *
               C46913 +
           (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
              C139465 * C139362 * C5798 -
          ((C92703 * C23999 + C139557 * C24217 + C92702 * C5805 +
            C92566 * C5923) *
               C139544 +
           (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
            C92566 * C5920) *
               C46920 +
           (C92703 * C24000 + C139557 * C24218 + C92702 * C5806 +
            C92566 * C5924) *
               C46913 +
           (C92703 * C23998 + C139557 * C24216 + C92702 * C5803 +
            C92566 * C5921) *
               C46918) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139362 * C139398) *
              C5151 +
          ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
            ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                C139557) *
               C139362 * C139398 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139362 * C5149) *
              C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C186 +
             (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                 C139465) *
                C92566 +
            ((C96607 + C96608) * C186 + (C96609 + C96610) * C139465) *
                C139557) *
               C139362 * C5149 -
           (((C46920 * C4278 + C139544 * C4514 + C46918 * C4277 +
              C46913 * C4513) *
                 C139465 +
             (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
              C46913 * C4165) *
                 C186) *
                C139557 +
            ((C50089 + C50088) * C139465 + (C50087 + C50086) * C186) * C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C186 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C139465) *
               C92566 +
           ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) * C139557) *
              C139362 * C5796 -
          (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
           ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
              C139362 * C5797 +
          (((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
           ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) * C139557) *
              C139362 * C5798 -
          (((C46920 * C24113 + C139544 * C24327 + C46918 * C24114 +
             C46913 * C24328) *
                C139465 +
            (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
             C46913 * C24000) *
                C186) *
               C139557 +
           ((C53983 + C53982) * C139465 + (C53981 + C53980) * C186) * C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139362 * C5149 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139362 * C139398) *
              C5151 +
          (((C1281 * C46913 + C1280 * C139544) * C92566 +
            (C97803 + C97804) * C139557) *
               C139362 * C139398 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139362 * C5149) *
              C5152 +
          (((C447 * C46913 + C448 * C139544) * C92566 +
            (C96709 + C96710) * C139557) *
               C139362 * C5149 -
           (((C416 * C4162 + C4625 + C4625 + C139465 * C4616) * C139544 +
             C4631 * C46913) *
                C139557 +
            (C3021 * C139544 + C1280 * C46913) * C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
            C446 * C139544) *
               C92566 +
           (C94787 + C94788) * C139557) *
              C139362 * C5796 -
          ((C97802 + C97801) * C139557 +
           (C1281 * C139544 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
               C92566) *
              C139362 * C5797 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
            C1282 * C139544) *
               C92566 +
           (C41073 * C46913 + C31422 * C139544) * C139557) *
              C139362 * C5798 -
          (((C416 * C23997 + C37336 + C37336 + C139465 * C24439) * C139544 +
            (C416 * C23998 + C37337 + C37337 + C139465 * C24440) * C46913) *
               C139557 +
           ((C416 * C5802 + C6033 + C6033 + C139465 * C6029) * C139544 +
            (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C46913) *
               C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139362 * C139398) *
              C5151 +
          ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
            ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                C139544) *
               C139362 * C139398 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139362 * C5149) *
              C5152 +
          ((((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
            ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) *
                C139544) *
               C139362 * C5149 -
           (((C92703 * C4278 + C139557 * C4732 + C92702 * C943 +
              C92566 * C1363) *
                 C139465 +
             (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
              C92566 * C1057) *
                 C186) *
                C139544 +
            ((C95868 + C95867) * C139465 + (C95566 + C95565) * C186) * C46913) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C186 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C139465) *
               C46913 +
           ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) * C139544) *
              C139362 * C5796 -
          (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
           ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
             C92566 * C1359) *
                C139465 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C186) *
               C46913) *
              C139362 * C5797 +
          (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C186 +
            (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
             C139557 * C8995) *
                C139465) *
               C46913 +
           ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) * C139544) *
              C139362 * C5798 -
          (((C92703 * C24113 + C139557 * C24543 + C92702 * C5864 +
             C92566 * C6085) *
                C139465 +
            (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
             C92566 * C5920) *
                C186) *
               C139544 +
           ((C92703 * C24114 + C139557 * C24544 + C92702 * C5865 +
             C92566 * C6086) *
                C139465 +
            (C92703 * C23998 + C139557 * C24216 + C92702 * C5803 +
             C92566 * C5921) *
                C186) *
               C46913) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[99] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139362 * C5149 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
            (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
               C139465 * C139362 * C139398 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C92702 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C92566 +
            (C96607 + C96608) * C92703 + (C96917 + C96918) * C139557) *
               C139465 * C139362 * C5149 -
           ((C46920 * C4396 + C139544 * C4844 + C46918 * C4395 +
             C46913 * C4843) *
                C139557 +
            (C46920 * C4162 + C139544 * C4166 + C46918 * C4161 +
             C46913 * C4165) *
                C92703 +
            (C50405 + C50404) * C92566 + (C50087 + C50086) * C92702) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C92702 +
           (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
               C92566 +
           (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
              C139465 * C139362 * C5796 -
          ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
           (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
              C139465 * C139362 * C5797 +
          ((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
           (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
              C139465 * C139362 * C5798 -
          ((C46920 * C24215 + C139544 * C24646 + C46918 * C24216 +
            C46913 * C24647) *
               C139557 +
           (C46920 * C23997 + C139544 * C23999 + C46918 * C23998 +
            C46913 * C24000) *
               C92703 +
           (C54191 + C54190) * C92566 + (C53981 + C53980) * C92702) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[99] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C186 * C106 + C139465 * C187) * C92702 +
                       (C186 * C274 + C139465 * C633) * C92566 +
                       C32132 * C92703 + C32874 * C139557) *
                          C46913 +
                      (C93089 + C93090 + C93091 + C93092) * C139544) *
                         C139362 * C5149 -
                     ((C94029 + C94030 + C94031 + C94032) * C139544 +
                      (C35975 * C139557 + C35150 * C92703 +
                       (C186 * C1053 + C139465 * C1543) * C92566 +
                       (C186 * C829 + C139465 * C939) * C92702) *
                          C46913) *
                         C139362 * C139398) *
                        C5151 +
                    (((C94032 + C94031 + C94030 + C94029) * C46913 +
                      (C96065 + C96066 + C96067 + C96068) * C139544) *
                         C139362 * C139398 -
                     ((C93093 + C93094 + C93095 + C93096) * C139544 +
                      (C93092 + C93091 + C93090 + C93089) * C46913) *
                         C139362 * C5149) *
                        C5152 +
                    (((C93096 + C93095 + C93094 + C93093) * C46913 +
                      (C93097 + C93098 + C93099 + C93100) * C139544) *
                         C139362 * C5149 -
                     (((C186 * C4396 + C139465 * C4946) * C139557 +
                       (C186 * C4162 + C139465 * C4278) * C92703 +
                       C3257 * C92566 + C2782 * C92702) *
                          C139544 +
                      (C96068 + C96067 + C96066 + C96065) * C46913) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C186 * C106 + C139465 * C187) * C92702 +
                      (C186 * C274 + C139465 * C633) * C92566 +
                      C32132 * C92703 + C32874 * C139557) *
                         C46913 +
                     (C93089 + C93090 + C93091 + C93092) * C139544) *
                        C139362 * C5796 -
                    ((C94029 + C94030 + C94031 + C94032) * C139544 +
                     (C35975 * C139557 + C35150 * C92703 +
                      (C186 * C1053 + C139465 * C1543) * C92566 +
                      (C186 * C829 + C139465 * C939) * C92702) *
                         C46913) *
                        C139362 * C5797 +
                    (((C186 * C830 + C139465 * C940) * C92702 +
                      (C186 * C1054 + C139465 * C1544) * C92566 +
                      C40768 * C92703 + C41371 * C139557) *
                         C46913 +
                     (C94033 + C94034 + C94035 + C94036) * C139544) *
                        C139362 * C5798 -
                    (((C186 * C24215 + C139465 * C24752) * C139557 +
                      (C186 * C23997 + C139465 * C24113) * C92703 +
                      (C186 * C5920 + C139465 * C6191) * C92566 +
                      (C186 * C5802 + C139465 * C5864) * C92702) *
                         C139544 +
                     ((C186 * C24216 + C139465 * C24753) * C139557 +
                      (C186 * C23998 + C139465 * C24114) * C92703 +
                      (C186 * C5921 + C139465 * C6192) * C92566 +
                      (C186 * C5803 + C139465 * C5865) * C92702) *
                         C46913) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eezz[99] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C94163 + C94164) * C139465 * C139544 +
                      (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                       C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                          C139465 * C46913) *
                         C139362 * C139398) *
                        C5151 +
                    (((C94164 + C94163) * C139465 * C46913 +
                      (C96177 + C96178) * C139465 * C139544) *
                         C139362 * C139398 -
                     ((C93205 + C93206) * C139465 * C139544 +
                      (C93204 + C93203) * C139465 * C46913) *
                         C139362 * C5149) *
                        C5152 +
                    (((C93206 + C93205) * C139465 * C46913 +
                      (C93207 + C93208) * C139465 * C139544) *
                         C139362 * C5149 -
                     ((C93167 * C4162 + C96171 + C96171 + C139557 * C5058 +
                       C93166 * C833 + C96172 + C96172 + C92566 * C1649) *
                          C139465 * C139544 +
                      (C96178 + C96177) * C139465 * C46913) *
                         C139362 * C139398) *
                        C5153)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                      C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                         C139465 * C46913 +
                     (C93203 + C93204) * C139465 * C139544) *
                        C139362 * C5796 -
                    ((C94163 + C94164) * C139465 * C139544 +
                     (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                      C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                         C139465 * C46913) *
                        C139362 * C5797 +
                    ((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                      C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                         C139465 * C46913 +
                     (C94165 + C94166) * C139465 * C139544) *
                        C139362 * C5798 -
                    ((C93167 * C23997 + C99827 + C99827 + C139557 * C24852 +
                      C93166 * C5802 + C99828 + C99828 + C92566 * C6244) *
                         C139465 * C139544 +
                     (C93167 * C23998 + C99829 + C99829 + C139557 * C24853 +
                      C93166 * C5803 + C99830 + C99830 + C92566 * C6245) *
                         C139465 * C46913) *
                        C139362 * C5799) *
                   C139327) /
                      (p * q * std::sqrt(p + q));
    d2eexx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
              C46923 + C46923 + C139544 * C119) *
                 C92566 +
             (C94299 + C94300) * C139557) *
                C139465 * C9304 -
            ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
                C139465 * C139426) *
               C139529 +
           (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
                C139465 * C139426 -
            ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
                C139465 * C139426 -
            ((C94304 + C94303) * C139557 +
             (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
              C46929 + C46929 + C46913 * C119) *
                 C92566) *
                C139465 * C9304) *
               C139529 +
           (((C47724 + C47725) * C92566 + (C51684 + C51685) * C139557) *
                C139465 * C9304 -
            ((C46919 * C6323 + C48790 + C48790 + C139544 * C6329 +
              C46917 * C6324 + C48791 + C48791 + C46913 * C6330) *
                 C139557 +
             (C51685 + C51684) * C92566) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C46918 +
              (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
              C217 * C139544) *
                 C92566 +
             (C94405 + C94406 + C94407 + C94408) * C139557) *
                C9304 -
            ((C94409 + C94410 + C94411 + C94412) * C139557 +
             (C94408 + C94407 + C94406 + C94405) * C92566) *
                C139426) *
               C139529 +
           (((C97391 + C97392 + C97393 + C97394) * C92566 +
             (C100027 + C100028 + C100029 + C100030) * C139557) *
                C139426 -
            ((C97394 + C97393 + C97392 + C97391) * C139557 +
             (C972 * C139544 + C973 * C46920 +
              (C186 * C837 + C139465 * C947) * C46913 +
              (C186 * C829 + C139465 * C939) * C46918) *
                 C92566) *
                C9304) *
               C139398) *
              C139521 +
          ((((C94413 + C94414 + C94415 + C94416) * C92566 +
             (C94417 + C94418 + C94419 + C94420) * C139557) *
                C139426 -
            ((C94416 + C94415 + C94414 + C94413) * C139557 +
             (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                 C92566) *
                C9304) *
               C139529 +
           (((C973 * C46918 + C972 * C46913 + C971 * C46920 + C970 * C139544) *
                 C92566 +
             (C97395 + C97396 + C97397 + C97398) * C139557) *
                C9304 -
            (((C186 * C6326 + C139465 * C6412) * C139544 +
              (C186 * C6323 + C139465 * C6409) * C46920 + C35153 * C46913 +
              C35152 * C46918) *
                 C139557 +
             (C97398 + C97397 + C97396 + C97395) * C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C46918 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C46913 +
             (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
                C139465 * C9304 -
            ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
             (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C46913 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C46918) *
                C139465 * C139426) *
               C139529 +
           (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C46918 +
             (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
              C139557 * C6494) *
                 C46913 +
             (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
                C139465 * C139426 -
            ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
             (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
              C92566 * C1061) *
                 C46913 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C46918) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
             (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
                C139465 * C139426 -
            ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
             (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
                C139465 * C9304) *
               C139529 +
           (((C93522 + C93521) * C46918 + (C93520 + C93519) * C46913 +
             (C95565 + C95566) * C46920 + (C95567 + C95568) * C139544) *
                C139465 * C9304 -
            ((C92703 * C6326 + C139557 * C6492 + C92702 * C4165 +
              C92566 * C4399) *
                 C139544 +
             (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
              C92566 * C4395) *
                 C46920 +
             (C97540 + C97539) * C46913 + (C97538 + C97537) * C46918) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                  C186 +
              (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                  C139465) *
                 C92566 +
             ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                 C139557) *
                C9304 -
            (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) *
                 C139557 +
             ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) *
                 C92566) *
                C139426) *
               C139529 +
           ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
             ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                 C139557) *
                C139426 -
            (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) *
                 C139557 +
             ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) *
                 C92566) *
                C9304) *
               C139398) *
              C139521 +
          (((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
             ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                 C139557) *
                C139426 -
            (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) *
                 C139557 +
             ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                  C139465 +
              (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                  C186) *
                 C92566) *
                C9304) *
               C139529 +
           ((((C48102 + C48103) * C186 + (C48104 + C48105) * C139465) * C92566 +
             ((C52116 + C52117) * C186 + (C52118 + C52119) * C139465) *
                 C139557) *
                C9304 -
            (((C46920 * C6409 + C139544 * C6569 + C46918 * C6410 +
               C46913 * C6570) *
                  C139465 +
              (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
               C46913 * C6327) *
                  C186) *
                 C139557 +
             ((C52119 + C52118) * C139465 + (C52117 + C52116) * C186) *
                 C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
              C446 * C139544) *
                 C92566 +
             (C94787 + C94788) * C139557) *
                C9304 -
            ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
                C139426) *
               C139529 +
           (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
                C139426 -
            ((C97802 + C97801) * C139557 +
             (C1281 * C139544 +
              (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                 C92566) *
                C9304) *
               C139398) *
              C139521 +
          ((((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
                C139426 -
            ((C94792 + C94791) * C139557 +
             (C447 * C139544 + C446 * C46913) * C92566) *
                C9304) *
               C139529 +
           (((C1281 * C46913 + C1280 * C139544) * C92566 +
             (C97803 + C97804) * C139557) *
                C9304 -
            (((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139544 +
              C35570 * C46913) *
                 C139557 +
             (C97804 + C97803) * C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
               C139557 * C1986) *
                  C186 +
              (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
               C139557 * C2292) *
                  C139465) *
                 C46913 +
             ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                 C139544) *
                C9304 -
            (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) *
                 C139544 +
             ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
               C92566 * C2292) *
                  C139465 +
              (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
               C92566 * C1986) *
                  C186) *
                 C46913) *
                C139426) *
               C139529 +
           ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
               C139557 * C6491) *
                  C186 +
              (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
               C139557 * C6728) *
                  C139465) *
                 C46913 +
             ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                 C139544) *
                C139426 -
            (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) *
                 C139544 +
             ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
               C92566 * C1359) *
                  C139465 +
              (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
               C92566 * C1053) *
                  C186) *
                 C46913) *
                C9304) *
               C139398) *
              C139521 +
          (((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
             ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                 C139544) *
                C139426 -
            (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) *
                 C139544 +
             ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) *
                 C46913) *
                C9304) *
               C139529 +
           ((((C93522 + C93521) * C186 + (C93830 + C93829) * C139465) * C46913 +
             ((C95565 + C95566) * C186 + (C95867 + C95868) * C139465) *
                 C139544) *
                C9304 -
            (((C92703 * C6409 + C139557 * C6726 + C92702 * C4277 +
               C92566 * C4731) *
                  C139465 +
              (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
               C92566 * C4395) *
                  C186) *
                 C139544 +
             ((C97940 + C97939) * C139465 + (C97538 + C97537) * C186) *
                 C46913) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[100] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C92702 +
             (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                 C92566 +
             (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
                C139465 * C9304 -
            ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
             (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
                C139465 * C139426) *
               C139529 +
           (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
             (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
                C139465 * C139426 -
            ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
             (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
             (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
                C139465 * C139426 -
            ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
             (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                 C92566 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C92702) *
                C139465 * C9304) *
               C139529 +
           (((C48102 + C48103) * C92702 + (C48464 + C48465) * C92566 +
             (C52116 + C52117) * C92703 + (C52540 + C52541) * C139557) *
                C139465 * C9304 -
            ((C46920 * C6489 + C139544 * C6803 + C46918 * C6490 +
              C46913 * C6804) *
                 C139557 +
             (C46920 * C6323 + C139544 * C6326 + C46918 * C6324 +
              C46913 * C6327) *
                 C92703 +
             (C52541 + C52540) * C92566 + (C52117 + C52116) * C92702) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C186 * C106 + C139465 * C187) * C92702 +
                         (C186 * C274 + C139465 * C633) * C92566 +
                         C32132 * C92703 + C32874 * C139557) *
                            C46913 +
                        (C93089 + C93090 + C93091 + C93092) * C139544) *
                           C9304 -
                       ((C95125 + C95126 + C95127 + C95128) * C139544 +
                        (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                         C32132 * C92702) *
                            C46913) *
                           C139426) *
                          C139529 +
                      (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
                         C38411 * C139557) *
                            C46913 +
                        (C98201 + C98202 + C98203 + C98204) * C139544) *
                           C139426 -
                       ((C94029 + C94030 + C94031 + C94032) * C139544 +
                        (C35975 * C139557 + C35150 * C92703 +
                         (C186 * C1053 + C139465 * C1543) * C92566 +
                         (C186 * C829 + C139465 * C939) * C92702) *
                            C46913) *
                           C9304) *
                          C139398) *
                         C139521 +
                     ((((C95128 + C95127 + C95126 + C95125) * C46913 +
                        (C97017 + C97018 + C97019 + C97020) * C139544) *
                           C139426 -
                       ((C93093 + C93094 + C93095 + C93096) * C139544 +
                        (C93092 + C93091 + C93090 + C93089) * C46913) *
                           C9304) *
                          C139529 +
                      (((C94032 + C94031 + C94030 + C94029) * C46913 +
                        (C96065 + C96066 + C96067 + C96068) * C139544) *
                           C9304 -
                       (((C186 * C6489 + C139465 * C6880) * C139557 +
                         (C186 * C6323 + C139465 * C6409) * C92703 +
                         C4955 * C92566 + C4294 * C92702) *
                            C139544 +
                        (C98204 + C98203 + C98202 + C98201) * C46913) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[100] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                         C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                            C139465 * C46913 +
                        (C93203 + C93204) * C139465 * C139544) *
                           C9304 -
                       ((C95259 + C95260) * C139465 * C139544 +
                        (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                         C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                            C139465 * C46913) *
                           C139426) *
                          C139529 +
                      (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                         C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                            C139465 * C46913 +
                        (C98349 + C98350) * C139465 * C139544) *
                           C139426 -
                       ((C94163 + C94164) * C139465 * C139544 +
                        (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                         C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                            C139465 * C46913) *
                           C9304) *
                          C139398) *
                         C139521 +
                     ((((C95260 + C95259) * C139465 * C46913 +
                        (C97129 + C97130) * C139465 * C139544) *
                           C139426 -
                       ((C93205 + C93206) * C139465 * C139544 +
                        (C93204 + C93203) * C139465 * C46913) *
                           C9304) *
                          C139529 +
                      (((C94164 + C94163) * C139465 * C46913 +
                        (C96177 + C96178) * C139465 * C139544) *
                           C9304 -
                       ((C93167 * C6323 + C98343 + C98343 + C139557 * C6957 +
                         C93166 * C4161 + C98344 + C98344 + C92566 * C5057) *
                            C139465 * C139544 +
                        (C98350 + C98349) * C139465 * C46913) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139562 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139563 +
           ((C94302 + C94301) * C92566 + (C105507 + C105508) * C139557) *
               C139465 * C12024) *
              C139529 +
          (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
               C139465 * C139563 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C139562 -
           ((C46919 * C26691 + C60046 + C60046 + C139544 * C26695 +
             C46917 * C26692 + C60047 + C60047 + C46913 * C26696) *
                C139557 +
            (C54433 + C54432) * C92566) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[101] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C46918 +
                        (C186 * C112 + C139465 * C193) * C46913 +
                        C216 * C46920 + C217 * C139544) *
                           C92566 +
                       (C94405 + C94406 + C94407 + C94408) * C139557) *
                          C139562 -
                      ((C94409 + C94410 + C94411 + C94412) * C139557 +
                       (C94408 + C94407 + C94406 + C94405) * C92566) *
                          C139563 +
                      ((C94412 + C94411 + C94410 + C94409) * C92566 +
                       (C105575 + C105576 + C105577 + C105578) * C139557) *
                          C12024) *
                         C139529 +
                     (((C97391 + C97392 + C97393 + C97394) * C92566 +
                       (C100027 + C100028 + C100029 + C100030) * C139557) *
                          C139563 -
                      ((C97394 + C97393 + C97392 + C97391) * C139557 +
                       (C972 * C139544 + C973 * C46920 +
                        (C186 * C837 + C139465 * C947) * C46913 +
                        (C186 * C829 + C139465 * C939) * C46918) *
                           C92566) *
                          C139562 -
                      (((C186 * C26693 + C139465 * C26769) * C139544 +
                        (C186 * C26691 + C139465 * C26767) * C46920 +
                        (C186 * C26694 + C139465 * C26770) * C46913 +
                        (C186 * C26692 + C139465 * C26768) * C46918) *
                           C139557 +
                       (C100030 + C100029 + C100028 + C100027) * C92566) *
                          C12024) *
                         C139398) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eexz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139562 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139563 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C46918 +
            (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
             C139557 * C10741) *
                C46913 +
            (C94539 + C94540) * C46920 + (C94541 + C94542) * C139544) *
               C139465 * C12024) *
              C139529 +
          (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
             C139557 * C6491) *
                C46918 +
            (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
             C139557 * C6494) *
                C46913 +
            (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
               C139465 * C139563 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C139562 -
           ((C92703 * C26693 + C139557 * C26839 + C92702 * C6327 +
             C92566 * C6493) *
                C139544 +
            (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
             C92566 * C6490) *
                C46920 +
            (C92703 * C26694 + C139557 * C26840 + C92702 * C6328 +
             C92566 * C6494) *
                C46913 +
            (C92703 * C26692 + C139557 * C26838 + C92702 * C6325 +
             C92566 * C6491) *
                C46918) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139562 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139563 +
           (((C94680 + C94679) * C186 + (C94678 + C94677) * C139465) * C92566 +
            ((C105719 + C105720) * C186 + (C105721 + C105722) * C139465) *
                C139557) *
               C12024) *
              C139529 +
          ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
            ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                C139557) *
               C139563 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C139562 -
           (((C46920 * C26767 + C139544 * C26907 + C46918 * C26768 +
              C46913 * C26908) *
                 C139465 +
             (C46920 * C26691 + C139544 * C26693 + C46918 * C26692 +
              C46913 * C26694) *
                 C186) *
                C139557 +
            ((C54743 + C54742) * C139465 + (C54741 + C54740) * C186) * C92566) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139562 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139563 +
           ((C94790 + C94789) * C92566 + (C105789 + C105790) * C139557) *
               C12024) *
              C139529 +
          (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
               C139563 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C139562 -
           (((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139544 +
             (C416 * C26692 + C38110 + C38110 + C139465 * C26976) * C46913) *
                C139557 +
            (C100326 + C100325) * C92566) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyz[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139562 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139563 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C46913 +
            ((C94539 + C94540) * C186 + (C94903 + C94904) * C139465) *
                C139544) *
               C12024) *
              C139529 +
          ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C46913 +
            ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                C139544) *
               C139563 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C139562 -
           (((C92703 * C26767 + C139557 * C27047 + C92702 * C6410 +
              C92566 * C6727) *
                 C139465 +
             (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
              C92566 * C6490) *
                 C186) *
                C139544 +
            ((C92703 * C26768 + C139557 * C27048 + C92702 * C6411 +
              C92566 * C6728) *
                 C139465 +
             (C92703 * C26692 + C139557 * C26838 + C92702 * C6325 +
              C92566 * C6491) *
                 C186) *
                C46913) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[101] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139562 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139563 +
           ((C94680 + C94679) * C92702 + (C95022 + C95021) * C92566 +
            (C105719 + C105720) * C92703 + (C105927 + C105928) * C139557) *
               C139465 * C12024) *
              C139529 +
          (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
            (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
               C139465 * C139563 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C139562 -
           ((C46920 * C26837 + C139544 * C27115 + C46918 * C26838 +
             C46913 * C27116) *
                C139557 +
            (C46920 * C26691 + C139544 * C26693 + C46918 * C26692 +
             C46913 * C26694) *
                C92703 +
            (C55047 + C55046) * C92566 + (C54741 + C54740) * C92702) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[101] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C92702 +
                        (C186 * C274 + C139465 * C633) * C92566 +
                        C32132 * C92703 + C32874 * C139557) *
                           C46913 +
                       (C93089 + C93090 + C93091 + C93092) * C139544) *
                          C139562 -
                      ((C95125 + C95126 + C95127 + C95128) * C139544 +
                       (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                        C32132 * C92702) *
                           C46913) *
                          C139563 +
                      ((C32135 * C92702 + C32875 * C92566 + C43398 * C92703 +
                        C43841 * C139557) *
                           C46913 +
                       (C95129 + C95130 + C95131 + C95132) * C139544) *
                          C12024) *
                         C139529 +
                     (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
                        C38411 * C139557) *
                           C46913 +
                       (C98201 + C98202 + C98203 + C98204) * C139544) *
                          C139563 -
                      ((C94029 + C94030 + C94031 + C94032) * C139544 +
                       (C35975 * C139557 + C35150 * C92703 +
                        (C186 * C1053 + C139465 * C1543) * C92566 +
                        (C186 * C829 + C139465 * C939) * C92702) *
                           C46913) *
                          C139562 -
                      (((C186 * C26837 + C139465 * C27183) * C139557 +
                        (C186 * C26691 + C139465 * C26767) * C92703 +
                        C35976 * C92566 + C35152 * C92702) *
                           C139544 +
                       ((C186 * C26838 + C139465 * C27184) * C139557 +
                        (C186 * C26692 + C139465 * C26768) * C92703 +
                        C38411 * C92566 + C37808 * C92702) *
                           C46913) *
                          C12024) *
                         C139398) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eezz[101] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C139562 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139563 +
                      ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
                        C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                           C139465 * C46913 +
                       (C95261 + C95262) * C139465 * C139544) *
                          C12024) *
                         C139529 +
                     (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                        C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                           C139465 * C46913 +
                       (C98349 + C98350) * C139465 * C139544) *
                          C139563 -
                      ((C94163 + C94164) * C139465 * C139544 +
                       (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                        C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                           C139465 * C46913) *
                          C139562 -
                      ((C93167 * C26691 + C100719 + C100719 + C139557 * C27251 +
                        C93166 * C6324 + C100720 + C100720 + C92566 * C6958) *
                           C139465 * C139544 +
                       (C93167 * C26692 + C100721 + C100721 + C139557 * C27252 +
                        C93166 * C6325 + C100722 + C100722 + C92566 * C6959) *
                           C139465 * C46913) *
                          C12024) *
                         C139398) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eexx[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C9304 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139426) *
              C822 +
          (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
               C139465 * C139426 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C9304) *
              C823 +
          (((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) *
               C139465 * C9304 -
           ((C46919 * C20983 + C54426 + C54426 + C139544 * C20987 +
             C46917 * C20984 + C54427 + C54427 + C46913 * C20988) *
                C139557 +
            (C57405 + C57404) * C92566) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C9304 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
               C139465 * C139426 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
             C46931 + C46931 + C139544 * C121) *
                C92566 +
            (C96287 + C96288) * C139557) *
               C139465 * C9304 -
           ((C46919 * C1767 + C96281 + C96281 + C139544 * C1783 +
             C46917 * C1765 + C96282 + C96282 + C46913 * C1781) *
                C139557 +
            (C96288 + C96287) * C92566) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
            C46923 + C46923 + C139544 * C119) *
               C92566 +
           (C94299 + C94300) * C139557) *
              C139465 * C10614 -
          ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) * C139465 *
              C10615 +
          ((C94302 + C94301) * C92566 + (C105507 + C105508) * C139557) *
              C139465 * C10616 -
          ((C46919 * C43303 + C105501 + C105501 + C139544 * C43307 +
            C46917 * C43304 + C105502 + C105502 + C46913 * C43308) *
               C139557 +
           (C105508 + C105507) * C92566) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C9304 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C139426) *
              C822 +
          (((C97391 + C97392 + C97393 + C97394) * C92566 +
            (C100027 + C100028 + C100029 + C100030) * C139557) *
               C139426 -
           ((C97394 + C97393 + C97392 + C97391) * C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C46918 +
             (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
             C975 * C139544) *
                C92566 +
            (C102971 + C102972 + C102973 + C102974) * C139557) *
               C9304 -
           (((C186 * C20985 + C139465 * C21101) * C139544 +
             (C186 * C20983 + C139465 * C21099) * C46920 +
             (C186 * C20986 + C139465 * C21102) * C46913 +
             (C186 * C20984 + C139465 * C21100) * C46918) *
                C139557 +
            (C102974 + C102973 + C102972 + C102971) * C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C9304 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C139426) *
              C139346 * C5151 +
          (((C94413 + C94414 + C94415 + C94416) * C92566 +
            (C94417 + C94418 + C94419 + C94420) * C139557) *
               C139426 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C9304) *
              C139346 * C5152 +
          (((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
                C92566 +
            (C96387 + C96388 + C96389 + C96390) * C139557) *
               C9304 -
           (((C186 * C1775 + C139465 * C1885) * C139544 +
             (C186 * C1767 + C139465 * C1877) * C46920 + C1910 * C46913 +
             C1909 * C46918) *
                C139557 +
            (C96390 + C96389 + C96388 + C96387) * C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C46918 +
            (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
            C217 * C139544) *
               C92566 +
           (C94405 + C94406 + C94407 + C94408) * C139557) *
              C10614 -
          ((C94409 + C94410 + C94411 + C94412) * C139557 +
           (C94408 + C94407 + C94406 + C94405) * C92566) *
              C10615 +
          ((C94412 + C94411 + C94410 + C94409) * C92566 +
           (C105575 + C105576 + C105577 + C105578) * C139557) *
              C10616 -
          (((C186 * C43305 + C139465 * C43389) * C139544 +
            (C186 * C43303 + C139465 * C43387) * C46920 +
            (C186 * C43306 + C139465 * C43390) * C46913 +
            (C186 * C43304 + C139465 * C43388) * C46918) *
               C139557 +
           (C105578 + C105577 + C105576 + C105575) * C92566) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C9304 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139426) *
              C822 +
          (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
             C139557 * C6491) *
                C46918 +
            (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
             C139557 * C6494) *
                C46913 +
            (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
               C139465 * C139426 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C9304) *
              C823 +
          (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C46918 +
            (C92702 * C838 + C92566 * C1062 + C92703 * C8595 +
             C139557 * C8761) *
                C46913 +
            (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
               C139465 * C9304 -
           ((C92703 * C20985 + C139557 * C21203 + C92702 * C8594 +
             C92566 * C8760) *
                C139544 +
            (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
             C92566 * C8757) *
                C46920 +
            (C92703 * C20986 + C139557 * C21204 + C92702 * C8595 +
             C92566 * C8761) *
                C46913 +
            (C92703 * C20984 + C139557 * C21202 + C92702 * C8592 +
             C92566 * C8758) *
                C46918) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C9304 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
            (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
               C139465 * C139426 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
            (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
               C139465 * C9304 -
           ((C92703 * C1775 + C139557 * C1999 + C92702 * C1774 +
             C92566 * C1998) *
                C139544 +
            (C92703 * C1767 + C139557 * C1991 + C92702 * C1766 +
             C92566 * C1990) *
                C46920 +
            (C96500 + C96499) * C46913 + (C96498 + C96497) * C46918) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C46918 +
           (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
               C46913 +
           (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
              C139465 * C10614 -
          ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
           (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
            C92566 * C1994) *
               C46913 +
           (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
            C92566 * C1986) *
               C46918) *
              C139465 * C10615 +
          ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
            C139557 * C10738) *
               C46918 +
           (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
            C139557 * C10741) *
               C46913 +
           (C94539 + C94540) * C46920 + (C94541 + C94542) * C139544) *
              C139465 * C10616 -
          ((C92703 * C43305 + C139557 * C43469 + C92702 * C10622 +
            C92566 * C10740) *
               C139544 +
           (C92703 * C43303 + C139557 * C43467 + C92702 * C10619 +
            C92566 * C10737) *
               C46920 +
           (C92703 * C43306 + C139557 * C43470 + C92702 * C10623 +
            C92566 * C10741) *
               C46913 +
           (C92703 * C43304 + C139557 * C43468 + C92702 * C10620 +
            C92566 * C10738) *
               C46918) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C9304 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139426) *
              C822 +
          ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
            ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                C139557) *
               C139426 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C9304) *
              C823 +
          ((((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
            ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) *
                C139557) *
               C9304 -
           (((C46920 * C21099 + C139544 * C21313 + C46918 * C21100 +
              C46913 * C21314) *
                 C139465 +
             (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
              C46913 * C20986) *
                 C186) *
                C139557 +
            ((C57715 + C57714) * C139465 + (C57713 + C57712) * C186) * C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C9304 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139426) *
              C139346 * C5151 +
          ((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
            ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                C139557) *
               C139426 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C9304) *
              C139346 * C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C186 +
             (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                 C139465) *
                C92566 +
            ((C96607 + C96608) * C186 + (C96609 + C96610) * C139465) *
                C139557) *
               C9304 -
           (((C46920 * C1877 + C139544 * C2105 + C46918 * C1875 +
              C46913 * C2103) *
                 C139465 +
             (C46920 * C1767 + C139544 * C1775 + C46918 * C1765 +
              C46913 * C1773) *
                 C186) *
                C139557 +
            ((C96610 + C96609) * C139465 + (C96608 + C96607) * C186) * C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C186 +
            (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                C139465) *
               C92566 +
           ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) * C139557) *
              C10614 -
          (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
           ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
              C10615 +
          (((C94680 + C94679) * C186 + (C94678 + C94677) * C139465) * C92566 +
           ((C105719 + C105720) * C186 + (C105721 + C105722) * C139465) *
               C139557) *
              C10616 -
          (((C46920 * C43387 + C139544 * C43537 + C46918 * C43388 +
             C46913 * C43538) *
                C139465 +
            (C46920 * C43303 + C139544 * C43305 + C46918 * C43304 +
             C46913 * C43306) *
                C186) *
               C139557 +
           ((C105722 + C105721) * C139465 + (C105720 + C105719) * C186) *
               C92566) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C9304 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139426) *
              C822 +
          (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
               C139426 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C9304) *
              C823 +
          ((((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
             C1282 * C139544) *
                C92566 +
            (C103269 + C103270) * C139557) *
               C9304 -
           (((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139544 +
             (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C46913) *
                C139557 +
            (C103270 + C103269) * C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C9304 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139426) *
              C139346 * C5151 +
          (((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
               C139426 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C9304) *
              C139346 * C5152 +
          (((C447 * C46913 + C448 * C139544) * C92566 +
            (C96709 + C96710) * C139557) *
               C9304 -
           (((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139544 +
             C2216 * C46913) *
                C139557 +
            (C96710 + C96709) * C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
            C446 * C139544) *
               C92566 +
           (C94787 + C94788) * C139557) *
              C10614 -
          ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) * C10615 +
          ((C94790 + C94789) * C92566 + (C105789 + C105790) * C139557) *
              C10616 -
          (((C416 * C43303 + C43623 + C43623 + C139465 * C43617) * C139544 +
            (C416 * C43304 + C43624 + C43624 + C139465 * C43618) * C46913) *
               C139557 +
           (C105790 + C105789) * C92566) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C9304 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139426) *
              C822 +
          ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C46913 +
            ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                C139544) *
               C139426 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C9304) *
              C823 +
          ((((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C46913 +
            ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) *
                C139544) *
               C9304 -
           (((C92703 * C21099 + C139557 * C21529 + C92702 * C8677 +
              C92566 * C8994) *
                 C139465 +
             (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
              C92566 * C8757) *
                 C186) *
                C139544 +
            ((C92703 * C21100 + C139557 * C21530 + C92702 * C8678 +
              C92566 * C8995) *
                 C139465 +
             (C92703 * C20984 + C139557 * C21202 + C92702 * C8592 +
              C92566 * C8758) *
                 C186) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C9304 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139426) *
              C139346 * C5151 +
          ((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
            ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                C139544) *
               C139426 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C9304) *
              C139346 * C5152 +
          ((((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
            ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) *
                C139544) *
               C9304 -
           (((C92703 * C1877 + C139557 * C2297 + C92702 * C1876 +
              C92566 * C2296) *
                 C139465 +
             (C92703 * C1767 + C139557 * C1991 + C92702 * C1766 +
              C92566 * C1990) *
                 C186) *
                C139544 +
            ((C96814 + C96813) * C139465 + (C96498 + C96497) * C186) * C46913) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C186 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C139465) *
               C46913 +
           ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) * C139544) *
              C10614 -
          (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
           ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C139465 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C186) *
               C46913) *
              C10615 +
          (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C186 +
            (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
             C139557 * C10903) *
                C139465) *
               C46913 +
           ((C94539 + C94540) * C186 + (C94903 + C94904) * C139465) * C139544) *
              C10616 -
          (((C92703 * C43387 + C139557 * C43694 + C92702 * C10681 +
             C92566 * C10902) *
                C139465 +
            (C92703 * C43303 + C139557 * C43467 + C92702 * C10619 +
             C92566 * C10737) *
                C186) *
               C139544 +
           ((C92703 * C43388 + C139557 * C43695 + C92702 * C10682 +
             C92566 * C10903) *
                C139465 +
            (C92703 * C43304 + C139557 * C43468 + C92702 * C10620 +
             C92566 * C10738) *
                C186) *
               C46913) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[102] +=
        (-std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C9304 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139426) *
              C822 +
          (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
            (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
               C139465 * C139426 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C9304) *
              C823 +
          (((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
            (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
               C139465 * C9304 -
           ((C46920 * C21201 + C139544 * C21632 + C46918 * C21202 +
             C46913 * C21633) *
                C139557 +
            (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
             C46913 * C20986) *
                C92703 +
            (C58019 + C58018) * C92566 + (C57713 + C57712) * C92702) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C9304 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
            (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
               C139465 * C139426 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C92702 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C92566 +
            (C96607 + C96608) * C92703 + (C96917 + C96918) * C139557) *
               C139465 * C9304 -
           ((C46920 * C1991 + C139544 * C2399 + C46918 * C1989 +
             C46913 * C2397) *
                C139557 +
            (C46920 * C1767 + C139544 * C1775 + C46918 * C1765 +
             C46913 * C1773) *
                C92703 +
            (C96918 + C96917) * C92566 + (C96608 + C96607) * C92702) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
               C92702 +
           (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
               C92566 +
           (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
              C139465 * C10614 -
          ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
           (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
              C139465 * C10615 +
          ((C94680 + C94679) * C92702 + (C95022 + C95021) * C92566 +
           (C105719 + C105720) * C92703 + (C105927 + C105928) * C139557) *
              C139465 * C10616 -
          ((C46920 * C43467 + C139544 * C43762 + C46918 * C43468 +
            C46913 * C43763) *
               C139557 +
           (C46920 * C43303 + C139544 * C43305 + C46918 * C43304 +
            C46913 * C43306) *
               C92703 +
           (C105928 + C105927) * C92566 + (C105720 + C105719) * C92702) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[102] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C92702 +
             (C186 * C274 + C139465 * C633) * C92566 + C32132 * C92703 +
             C32874 * C139557) *
                C46913 +
            (C93089 + C93090 + C93091 + C93092) * C139544) *
               C9304 -
           ((C95125 + C95126 + C95127 + C95128) * C139544 +
            (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
             C32132 * C92702) *
                C46913) *
               C139426) *
              C822 +
          (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
             C38411 * C139557) *
                C46913 +
            (C98201 + C98202 + C98203 + C98204) * C139544) *
               C139426 -
           ((C94029 + C94030 + C94031 + C94032) * C139544 +
            (C35975 * C139557 + C35150 * C92703 +
             (C186 * C1053 + C139465 * C1543) * C92566 +
             (C186 * C829 + C139465 * C939) * C92702) *
                C46913) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C92702 +
             (C186 * C1054 + C139465 * C1544) * C92566 + C40768 * C92703 +
             C41371 * C139557) *
                C46913 +
            (C94033 + C94034 + C94035 + C94036) * C139544) *
               C9304 -
           (((C186 * C21201 + C139465 * C21738) * C139557 +
             (C186 * C20983 + C139465 * C21099) * C92703 + C31738 * C92566 +
             C31098 * C92702) *
                C139544 +
            ((C186 * C21202 + C139465 * C21739) * C139557 +
             (C186 * C20984 + C139465 * C21100) * C92703 + C41371 * C92566 +
             C40768 * C92702) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C186 * C106 + C139465 * C187) * C92702 +
                                 (C186 * C274 + C139465 * C633) * C92566 +
                                 C32132 * C92703 + C32874 * C139557) *
                                    C46913 +
                                (C93089 + C93090 + C93091 + C93092) * C139544) *
                                   C9304 -
                               ((C95125 + C95126 + C95127 + C95128) * C139544 +
                                (C32875 * C139557 + C32135 * C92703 +
                                 C32874 * C92566 + C32132 * C92702) *
                                    C46913) *
                                   C139426) *
                                  C139346 * C5151 +
                              (((C95128 + C95127 + C95126 + C95125) * C46913 +
                                (C97017 + C97018 + C97019 + C97020) * C139544) *
                                   C139426 -
                               ((C93093 + C93094 + C93095 + C93096) * C139544 +
                                (C93092 + C93091 + C93090 + C93089) * C46913) *
                                   C9304) *
                                  C139346 * C5152 +
                              (((C93096 + C93095 + C93094 + C93093) * C46913 +
                                (C93097 + C93098 + C93099 + C93100) * C139544) *
                                   C9304 -
                               (((C186 * C1991 + C139465 * C2481) * C139557 +
                                 (C186 * C1767 + C139465 * C1877) * C92703 +
                                 C3978 * C92566 + C3503 * C92702) *
                                    C139544 +
                                (C97020 + C97019 + C97018 + C97017) * C46913) *
                                   C139426) *
                                  C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C92702 +
            (C186 * C274 + C139465 * C633) * C92566 + C32132 * C92703 +
            C32874 * C139557) *
               C46913 +
           (C93089 + C93090 + C93091 + C93092) * C139544) *
              C10614 -
          ((C95125 + C95126 + C95127 + C95128) * C139544 +
           (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
            C32132 * C92702) *
               C46913) *
              C10615 +
          ((C32135 * C92702 + C32875 * C92566 + C43398 * C92703 +
            C43841 * C139557) *
               C46913 +
           (C95129 + C95130 + C95131 + C95132) * C139544) *
              C10616 -
          (((C186 * C43467 + C139465 * C43836) * C139557 +
            (C186 * C43303 + C139465 * C43387) * C92703 + C32876 * C92566 +
            C32136 * C92702) *
               C139544 +
           ((C186 * C43468 + C139465 * C43837) * C139557 +
            (C186 * C43304 + C139465 * C43388) * C92703 + C43841 * C92566 +
            C43398 * C92702) *
               C46913) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[102] += (-std::pow(Pi, 2.5) *
                    ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C9304 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139426) *
                         C822 +
                     (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                        C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                           C139465 * C46913 +
                       (C98349 + C98350) * C139465 * C139544) *
                          C139426 -
                      ((C94163 + C94164) * C139465 * C139544 +
                       (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                        C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                           C139465 * C46913) *
                          C9304) *
                         C823 +
                     (((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                        C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                           C139465 * C46913 +
                       (C94165 + C94166) * C139465 * C139544) *
                          C9304 -
                      ((C93167 * C20983 + C103663 + C103663 + C139557 * C21838 +
                        C93166 * C8591 + C103664 + C103664 + C92566 * C9225) *
                           C139465 * C139544 +
                       (C93167 * C20984 + C103665 + C103665 + C139557 * C21839 +
                        C93166 * C8592 + C103666 + C103666 + C92566 * C9226) *
                           C139465 * C46913) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C9304 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139426) *
                         C139346 * C5151 +
                     (((C95260 + C95259) * C139465 * C46913 +
                       (C97129 + C97130) * C139465 * C139544) *
                          C139426 -
                      ((C93205 + C93206) * C139465 * C139544 +
                       (C93204 + C93203) * C139465 * C46913) *
                          C9304) *
                         C139346 * C5152 +
                     (((C93206 + C93205) * C139465 * C46913 +
                       (C93207 + C93208) * C139465 * C139544) *
                          C9304 -
                      ((C93167 * C1767 + C97123 + C97123 + C139557 * C2583 +
                        C93166 * C1766 + C97124 + C97124 + C92566 * C2582) *
                           C139465 * C139544 +
                       (C97130 + C97129) * C139465 * C46913) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                       C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                          C139465 * C46913 +
                      (C93203 + C93204) * C139465 * C139544) *
                         C10614 -
                     ((C95259 + C95260) * C139465 * C139544 +
                      (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                       C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                          C139465 * C46913) *
                         C10615 +
                     ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
                       C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                          C139465 * C46913 +
                      (C95261 + C95262) * C139465 * C139544) *
                         C10616 -
                     ((C93167 * C43303 + C106061 + C106061 + C139557 * C43907 +
                       C93166 * C10619 + C106062 + C106062 + C92566 * C11061) *
                          C139465 * C139544 +
                      (C93167 * C43304 + C106063 + C106063 + C139557 * C43908 +
                       C93166 * C10620 + C106064 + C106064 + C92566 * C11062) *
                          C139465 * C46913) *
                         C10617) *
                    C139346 * C139327) /
                       (p * q * std::sqrt(p + q));
    d2eexx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C139562 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139563 +
           ((C94302 + C94301) * C92566 + (C105507 + C105508) * C139557) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
               C139465 * C139563 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C139562 -
           ((C46919 * C10618 + C94281 + C94281 + C139544 * C10624 +
             C46917 * C10619 + C94282 + C94282 + C46913 * C10625) *
                C139557 +
            (C94306 + C94305) * C92566) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C139562 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C139563 +
           ((C94412 + C94411 + C94410 + C94409) * C92566 +
            (C105575 + C105576 + C105577 + C105578) * C139557) *
               C12024) *
              C139346 * C139521 +
          (((C94413 + C94414 + C94415 + C94416) * C92566 +
            (C94417 + C94418 + C94419 + C94420) * C139557) *
               C139563 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C139562 -
           (((C186 * C10621 + C139465 * C10683) * C139544 +
             (C186 * C10618 + C139465 * C10680) * C46920 + C32137 * C46913 +
             C32136 * C46918) *
                C139557 +
            (C94420 + C94419 + C94418 + C94417) * C92566) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C139562 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139563 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C46918 +
            (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
             C139557 * C10741) *
                C46913 +
            (C94539 + C94540) * C46920 + (C94541 + C94542) * C139544) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
            (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
               C139465 * C139563 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C139562 -
           ((C92703 * C10621 + C139557 * C10739 + C92702 * C1773 +
             C92566 * C1997) *
                C139544 +
            (C92703 * C10618 + C139557 * C10736 + C92702 * C1765 +
             C92566 * C1989) *
                C46920 +
            (C94542 + C94541) * C46913 + (C94540 + C94539) * C46918) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C139562 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139563 +
           (((C94680 + C94679) * C186 + (C94678 + C94677) * C139465) * C92566 +
            ((C105719 + C105720) * C186 + (C105721 + C105722) * C139465) *
                C139557) *
               C12024) *
              C139346 * C139521 +
          ((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
            ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                C139557) *
               C139563 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C139562 -
           (((C46920 * C10680 + C139544 * C10792 + C46918 * C10681 +
              C46913 * C10793) *
                 C139465 +
             (C46920 * C10618 + C139544 * C10621 + C46918 * C10619 +
              C46913 * C10622) *
                 C186) *
                C139557 +
            ((C94688 + C94687) * C139465 + (C94686 + C94685) * C186) * C92566) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C139562 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139563 +
           ((C94790 + C94789) * C92566 + (C105789 + C105790) * C139557) *
               C12024) *
              C139346 * C139521 +
          (((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
               C139563 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C139562 -
           (((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139544 +
             C32528 * C46913) *
                C139557 +
            (C94794 + C94793) * C92566) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C139562 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139563 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C186 +
             (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
              C139557 * C10903) *
                 C139465) *
                C46913 +
            ((C94539 + C94540) * C186 + (C94903 + C94904) * C139465) *
                C139544) *
               C12024) *
              C139346 * C139521 +
          ((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
            ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                C139544) *
               C139563 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C139562 -
           (((C92703 * C10680 + C139557 * C10901 + C92702 * C1875 +
              C92566 * C2295) *
                 C139465 +
             (C92703 * C10618 + C139557 * C10736 + C92702 * C1765 +
              C92566 * C1989) *
                 C186) *
                C139544 +
            ((C94904 + C94903) * C139465 + (C94540 + C94539) * C186) * C46913) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[103] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C139562 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139563 +
           ((C94680 + C94679) * C92702 + (C95022 + C95021) * C92566 +
            (C105719 + C105720) * C92703 + (C105927 + C105928) * C139557) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
            (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
               C139465 * C139563 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C139562 -
           ((C46920 * C10736 + C139544 * C10954 + C46918 * C10737 +
             C46913 * C10955) *
                C139557 +
            (C46920 * C10618 + C139544 * C10621 + C46918 * C10619 +
             C46913 * C10622) *
                C92703 +
            (C95026 + C95025) * C92566 + (C94686 + C94685) * C92702) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C92702 +
                        (C186 * C274 + C139465 * C633) * C92566 +
                        C32132 * C92703 + C32874 * C139557) *
                           C46913 +
                       (C93089 + C93090 + C93091 + C93092) * C139544) *
                          C139562 -
                      ((C95125 + C95126 + C95127 + C95128) * C139544 +
                       (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                        C32132 * C92702) *
                           C46913) *
                          C139563 +
                      ((C32135 * C92702 + C32875 * C92566 + C43398 * C92703 +
                        C43841 * C139557) *
                           C46913 +
                       (C95129 + C95130 + C95131 + C95132) * C139544) *
                          C12024) *
                         C139346 * C139521 +
                     (((C95128 + C95127 + C95126 + C95125) * C46913 +
                       (C97017 + C97018 + C97019 + C97020) * C139544) *
                          C139563 -
                      ((C93093 + C93094 + C93095 + C93096) * C139544 +
                       (C93092 + C93091 + C93090 + C93089) * C46913) *
                          C139562 -
                      (((C186 * C10736 + C139465 * C11007) * C139557 +
                        (C186 * C10618 + C139465 * C10680) * C92703 +
                        C2498 * C92566 + C1909 * C92702) *
                           C139544 +
                       (C95132 + C95131 + C95130 + C95129) * C46913) *
                          C12024) *
                         C139346 * C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezz[103] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C139562 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139563 +
                      ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
                        C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                           C139465 * C46913 +
                       (C95261 + C95262) * C139465 * C139544) *
                          C12024) *
                         C139346 * C139521 +
                     (((C95260 + C95259) * C139465 * C46913 +
                       (C97129 + C97130) * C139465 * C139544) *
                          C139563 -
                      ((C93205 + C93206) * C139465 * C139544 +
                       (C93204 + C93203) * C139465 * C46913) *
                          C139562 -
                      ((C93167 * C10618 + C95249 + C95249 + C139557 * C11060 +
                        C93166 * C1765 + C95250 + C95250 + C92566 * C2581) *
                           C139465 * C139544 +
                       (C95262 + C95261) * C139465 * C46913) *
                          C12024) *
                         C139346 * C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C9304 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C94303 + C94304) * C92566 + (C94305 + C94306) * C139557) *
               C139465 * C139426 -
           ((C94304 + C94303) * C139557 +
            (C46919 * C108 + C46928 + C46928 + C139544 * C120 + C46917 * C107 +
             C46929 + C46929 + C46913 * C119) *
                C92566) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C46917 * C108 + C46930 + C46930 + C46913 * C120 + C46919 * C109 +
             C46931 + C46931 + C139544 * C121) *
                C92566 +
            (C96287 + C96288) * C139557) *
               C139465 * C9304 -
           ((C46919 * C1767 + C96281 + C96281 + C139544 * C1783 +
             C46917 * C1765 + C96282 + C96282 + C46913 * C1781) *
                C139557 +
            (C96288 + C96287) * C92566) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46917 * C106 + C46922 + C46922 + C46913 * C118 + C46919 * C107 +
             C46923 + C46923 + C139544 * C119) *
                C92566 +
            (C94299 + C94300) * C139557) *
               C139465 * C9304 -
           ((C94301 + C94302) * C139557 + (C94300 + C94299) * C92566) *
               C139465 * C139426) *
              C822 +
          (((C51683 + C51682) * C92566 + (C54432 + C54433) * C139557) *
               C139465 * C139426 -
           ((C51682 + C51683) * C139557 + (C47721 + C47720) * C92566) *
               C139465 * C9304) *
              C823 +
          (((C47723 + C47722) * C92566 + (C57404 + C57405) * C139557) *
               C139465 * C9304 -
           ((C46919 * C20983 + C54426 + C54426 + C139544 * C20987 +
             C46917 * C20984 + C54427 + C54427 + C46913 * C20988) *
                C139557 +
            (C57405 + C57404) * C92566) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C9304 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C139426) *
              C139346 * C5151 +
          (((C94413 + C94414 + C94415 + C94416) * C92566 +
            (C94417 + C94418 + C94419 + C94420) * C139557) *
               C139426 -
           ((C94416 + C94415 + C94414 + C94413) * C139557 +
            (C219 * C139544 + C218 * C46920 + C217 * C46913 + C216 * C46918) *
                C92566) *
               C9304) *
              C139346 * C5152 +
          (((C218 * C46918 + C219 * C46913 + C221 * C46920 + C220 * C139544) *
                C92566 +
            (C96387 + C96388 + C96389 + C96390) * C139557) *
               C9304 -
           (((C186 * C1775 + C139465 * C1885) * C139544 +
             (C186 * C1767 + C139465 * C1877) * C46920 + C1910 * C46913 +
             C1909 * C46918) *
                C139557 +
            (C96390 + C96389 + C96388 + C96387) * C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C46918 +
             (C186 * C112 + C139465 * C193) * C46913 + C216 * C46920 +
             C217 * C139544) *
                C92566 +
            (C94405 + C94406 + C94407 + C94408) * C139557) *
               C9304 -
           ((C94409 + C94410 + C94411 + C94412) * C139557 +
            (C94408 + C94407 + C94406 + C94405) * C92566) *
               C139426) *
              C822 +
          (((C97391 + C97392 + C97393 + C97394) * C92566 +
            (C100027 + C100028 + C100029 + C100030) * C139557) *
               C139426 -
           ((C97394 + C97393 + C97392 + C97391) * C139557 +
            (C972 * C139544 + C973 * C46920 +
             (C186 * C837 + C139465 * C947) * C46913 +
             (C186 * C829 + C139465 * C939) * C46918) *
                C92566) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C46918 +
             (C186 * C838 + C139465 * C948) * C46913 + C974 * C46920 +
             C975 * C139544) *
                C92566 +
            (C102971 + C102972 + C102973 + C102974) * C139557) *
               C9304 -
           (((C186 * C20985 + C139465 * C21101) * C139544 +
             (C186 * C20983 + C139465 * C21099) * C46920 +
             (C186 * C20986 + C139465 * C21102) * C46913 +
             (C186 * C20984 + C139465 * C21100) * C46918) *
                C139557 +
            (C102974 + C102973 + C102972 + C102971) * C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C9304 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C94538 + C94537) * C46918 + (C94536 + C94535) * C46913 +
            (C96497 + C96498) * C46920 + (C96499 + C96500) * C139544) *
               C139465 * C139426 -
           ((C92733 + C92734) * C139544 + (C92735 + C92736) * C46920 +
            (C92732 + C92731) * C46913 + (C92730 + C92729) * C46918) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C92736 + C92735) * C46918 + (C92734 + C92733) * C46913 +
            (C92737 + C92738) * C46920 + (C92739 + C92740) * C139544) *
               C139465 * C9304 -
           ((C92703 * C1775 + C139557 * C1999 + C92702 * C1774 +
             C92566 * C1998) *
                C139544 +
            (C92703 * C1767 + C139557 * C1991 + C92702 * C1766 +
             C92566 * C1990) *
                C46920 +
            (C96500 + C96499) * C46913 + (C96498 + C96497) * C46918) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C46918 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C46913 +
            (C92729 + C92730) * C46920 + (C92731 + C92732) * C139544) *
               C139465 * C9304 -
           ((C94535 + C94536) * C139544 + (C94537 + C94538) * C46920 +
            (C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C46913 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C46918) *
               C139465 * C139426) *
              C822 +
          (((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
             C139557 * C6491) *
                C46918 +
            (C92702 * C4163 + C92566 * C4397 + C92703 * C6328 +
             C139557 * C6494) *
                C46913 +
            (C97537 + C97538) * C46920 + (C97539 + C97540) * C139544) *
               C139465 * C139426 -
           ((C93519 + C93520) * C139544 + (C93521 + C93522) * C46920 +
            (C92703 * C4163 + C139557 * C4397 + C92702 * C837 +
             C92566 * C1061) *
                C46913 +
            (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
             C92566 * C1053) *
                C46918) *
               C139465 * C9304) *
              C823 +
          (((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
             C139557 * C8758) *
                C46918 +
            (C92702 * C838 + C92566 * C1062 + C92703 * C8595 +
             C139557 * C8761) *
                C46913 +
            (C93523 + C93524) * C46920 + (C93525 + C93526) * C139544) *
               C139465 * C9304 -
           ((C92703 * C20985 + C139557 * C21203 + C92702 * C8594 +
             C92566 * C8760) *
                C139544 +
            (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
             C92566 * C8757) *
                C46920 +
            (C92703 * C20986 + C139557 * C21204 + C92702 * C8595 +
             C92566 * C8761) *
                C46913 +
            (C92703 * C20984 + C139557 * C21202 + C92702 * C8592 +
             C92566 * C8758) *
                C46918) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C9304 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139426) *
              C139346 * C5151 +
          ((((C94681 + C94682) * C186 + (C94683 + C94684) * C139465) * C92566 +
            ((C94685 + C94686) * C186 + (C94687 + C94688) * C139465) *
                C139557) *
               C139426 -
           (((C94684 + C94683) * C139465 + (C94682 + C94681) * C186) * C139557 +
            ((C46920 * C189 + C139544 * C362 + C46918 * C188 + C46913 * C361) *
                 C139465 +
             (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                 C186) *
                C92566) *
               C9304) *
              C139346 * C5152 +
          ((((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                 C186 +
             (C46918 * C189 + C46913 * C362 + C46920 * C190 + C139544 * C363) *
                 C139465) *
                C92566 +
            ((C96607 + C96608) * C186 + (C96609 + C96610) * C139465) *
                C139557) *
               C9304 -
           (((C46920 * C1877 + C139544 * C2105 + C46918 * C1875 +
              C46913 * C2103) *
                 C139465 +
             (C46920 * C1767 + C139544 * C1775 + C46918 * C1765 +
              C46913 * C1773) *
                 C186) *
                C139557 +
            ((C96610 + C96609) * C139465 + (C96608 + C96607) * C186) * C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                 C186 +
             (C46918 * C187 + C46913 * C360 + C46920 * C188 + C139544 * C361) *
                 C139465) *
                C92566 +
            ((C94673 + C94674) * C186 + (C94675 + C94676) * C139465) *
                C139557) *
               C9304 -
           (((C94677 + C94678) * C139465 + (C94679 + C94680) * C186) * C139557 +
            ((C94676 + C94675) * C139465 + (C94674 + C94673) * C186) * C92566) *
               C139426) *
              C822 +
          ((((C52115 + C52114) * C186 + (C52113 + C52112) * C139465) * C92566 +
            ((C54740 + C54741) * C186 + (C54742 + C54743) * C139465) *
                C139557) *
               C139426 -
           (((C52112 + C52113) * C139465 + (C52114 + C52115) * C186) * C139557 +
            ((C48097 + C48096) * C139465 + (C48095 + C48094) * C186) * C92566) *
               C9304) *
              C823 +
          ((((C48101 + C48100) * C186 + (C48099 + C48098) * C139465) * C92566 +
            ((C57712 + C57713) * C186 + (C57714 + C57715) * C139465) *
                C139557) *
               C9304 -
           (((C46920 * C21099 + C139544 * C21313 + C46918 * C21100 +
              C46913 * C21314) *
                 C139465 +
             (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
              C46913 * C20986) *
                 C186) *
                C139557 +
            ((C57715 + C57714) * C139465 + (C57713 + C57712) * C186) * C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C9304 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139426) *
              C139346 * C5151 +
          (((C94791 + C94792) * C92566 + (C94793 + C94794) * C139557) *
               C139426 -
           ((C94792 + C94791) * C139557 +
            (C447 * C139544 + C446 * C46913) * C92566) *
               C9304) *
              C139346 * C5152 +
          (((C447 * C46913 + C448 * C139544) * C92566 +
            (C96709 + C96710) * C139557) *
               C9304 -
           (((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139544 +
             C2216 * C46913) *
                C139557 +
            (C96710 + C96709) * C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C46913 +
             C446 * C139544) *
                C92566 +
            (C94787 + C94788) * C139557) *
               C9304 -
           ((C94789 + C94790) * C139557 + (C94788 + C94787) * C92566) *
               C139426) *
              C822 +
          (((C97801 + C97802) * C92566 + (C100325 + C100326) * C139557) *
               C139426 -
           ((C97802 + C97801) * C139557 +
            (C1281 * C139544 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C46913) *
                C92566) *
               C9304) *
              C823 +
          ((((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C46913 +
             C1282 * C139544) *
                C92566 +
            (C103269 + C103270) * C139557) *
               C9304 -
           (((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139544 +
             (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C46913) *
                C139557 +
            (C103270 + C103269) * C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C9304 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139426) *
              C139346 * C5151 +
          ((((C94538 + C94537) * C186 + (C94902 + C94901) * C139465) * C46913 +
            ((C96497 + C96498) * C186 + (C96813 + C96814) * C139465) *
                C139544) *
               C139426 -
           (((C92953 + C92954) * C139465 + (C92735 + C92736) * C186) * C139544 +
            ((C92952 + C92951) * C139465 + (C92730 + C92729) * C186) * C46913) *
               C9304) *
              C139346 * C5152 +
          ((((C92736 + C92735) * C186 + (C92954 + C92953) * C139465) * C46913 +
            ((C92737 + C92738) * C186 + (C92955 + C92956) * C139465) *
                C139544) *
               C9304 -
           (((C92703 * C1877 + C139557 * C2297 + C92702 * C1876 +
              C92566 * C2296) *
                 C139465 +
             (C92703 * C1767 + C139557 * C1991 + C92702 * C1766 +
              C92566 * C1990) *
                 C186) *
                C139544 +
            ((C96814 + C96813) * C139465 + (C96498 + C96497) * C186) * C46913) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C186 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C139465) *
                C46913 +
            ((C92729 + C92730) * C186 + (C92951 + C92952) * C139465) *
                C139544) *
               C9304 -
           (((C94901 + C94902) * C139465 + (C94537 + C94538) * C186) * C139544 +
            ((C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C139465 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C186) *
                C46913) *
               C139426) *
              C822 +
          ((((C92702 * C4159 + C92566 * C4393 + C92703 * C6325 +
              C139557 * C6491) *
                 C186 +
             (C92702 * C4275 + C92566 * C4729 + C92703 * C6411 +
              C139557 * C6728) *
                 C139465) *
                C46913 +
            ((C97537 + C97538) * C186 + (C97939 + C97940) * C139465) *
                C139544) *
               C139426 -
           (((C93829 + C93830) * C139465 + (C93521 + C93522) * C186) * C139544 +
            ((C92703 * C4275 + C139557 * C4729 + C92702 * C939 +
              C92566 * C1359) *
                 C139465 +
             (C92703 * C4159 + C139557 * C4393 + C92702 * C829 +
              C92566 * C1053) *
                 C186) *
                C46913) *
               C9304) *
              C823 +
          ((((C92702 * C830 + C92566 * C1054 + C92703 * C8592 +
              C139557 * C8758) *
                 C186 +
             (C92702 * C940 + C92566 * C1360 + C92703 * C8678 +
              C139557 * C8995) *
                 C139465) *
                C46913 +
            ((C93523 + C93524) * C186 + (C93831 + C93832) * C139465) *
                C139544) *
               C9304 -
           (((C92703 * C21099 + C139557 * C21529 + C92702 * C8677 +
              C92566 * C8994) *
                 C139465 +
             (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
              C92566 * C8757) *
                 C186) *
                C139544 +
            ((C92703 * C21100 + C139557 * C21530 + C92702 * C8678 +
              C92566 * C8995) *
                 C139465 +
             (C92703 * C20984 + C139557 * C21202 + C92702 * C8592 +
              C92566 * C8758) *
                 C186) *
                C46913) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[104] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C9304 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C94681 + C94682) * C92702 + (C95023 + C95024) * C92566 +
            (C94685 + C94686) * C92703 + (C95025 + C95026) * C139557) *
               C139465 * C139426 -
           ((C95024 + C95023) * C139557 + (C94682 + C94681) * C92703 +
            (C46920 * C276 + C139544 * C579 + C46918 * C275 + C46913 * C578) *
                C92566 +
            (C46920 * C108 + C139544 * C114 + C46918 * C107 + C46913 * C113) *
                C92702) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C46918 * C108 + C46913 * C114 + C46920 * C109 + C139544 * C115) *
                C92702 +
            (C46918 * C276 + C46913 * C579 + C46920 * C277 + C139544 * C580) *
                C92566 +
            (C96607 + C96608) * C92703 + (C96917 + C96918) * C139557) *
               C139465 * C9304 -
           ((C46920 * C1991 + C139544 * C2399 + C46918 * C1989 +
             C46913 * C2397) *
                C139557 +
            (C46920 * C1767 + C139544 * C1775 + C46918 * C1765 +
             C46913 * C1773) *
                C92703 +
            (C96918 + C96917) * C92566 + (C96608 + C96607) * C92702) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C46918 * C106 + C46913 * C112 + C46920 * C107 + C139544 * C113) *
                C92702 +
            (C46918 * C274 + C46913 * C577 + C46920 * C275 + C139544 * C578) *
                C92566 +
            (C94673 + C94674) * C92703 + (C95019 + C95020) * C139557) *
               C139465 * C9304 -
           ((C95021 + C95022) * C139557 + (C94679 + C94680) * C92703 +
            (C95020 + C95019) * C92566 + (C94674 + C94673) * C92702) *
               C139465 * C139426) *
              C822 +
          (((C52115 + C52114) * C92702 + (C52539 + C52538) * C92566 +
            (C54740 + C54741) * C92703 + (C55046 + C55047) * C139557) *
               C139465 * C139426 -
           ((C52538 + C52539) * C139557 + (C52114 + C52115) * C92703 +
            (C48461 + C48460) * C92566 + (C48095 + C48094) * C92702) *
               C139465 * C9304) *
              C823 +
          (((C48101 + C48100) * C92702 + (C48463 + C48462) * C92566 +
            (C57712 + C57713) * C92703 + (C58018 + C58019) * C139557) *
               C139465 * C9304 -
           ((C46920 * C21201 + C139544 * C21632 + C46918 * C21202 +
             C46913 * C21633) *
                C139557 +
            (C46920 * C20983 + C139544 * C20985 + C46918 * C20984 +
             C46913 * C20986) *
                C92703 +
            (C58019 + C58018) * C92566 + (C57713 + C57712) * C92702) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[104] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C92702 +
                        (C186 * C274 + C139465 * C633) * C92566 +
                        C32132 * C92703 + C32874 * C139557) *
                           C46913 +
                       (C93089 + C93090 + C93091 + C93092) * C139544) *
                          C9304 -
                      ((C95125 + C95126 + C95127 + C95128) * C139544 +
                       (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                        C32132 * C92702) *
                           C46913) *
                          C139426) *
                         C139346 * C5151 +
                     (((C95128 + C95127 + C95126 + C95125) * C46913 +
                       (C97017 + C97018 + C97019 + C97020) * C139544) *
                          C139426 -
                      ((C93093 + C93094 + C93095 + C93096) * C139544 +
                       (C93092 + C93091 + C93090 + C93089) * C46913) *
                          C9304) *
                         C139346 * C5152 +
                     (((C93096 + C93095 + C93094 + C93093) * C46913 +
                       (C93097 + C93098 + C93099 + C93100) * C139544) *
                          C9304 -
                      (((C186 * C1991 + C139465 * C2481) * C139557 +
                        (C186 * C1767 + C139465 * C1877) * C92703 +
                        C3978 * C92566 + C3503 * C92702) *
                           C139544 +
                       (C97020 + C97019 + C97018 + C97017) * C46913) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C92702 +
                        (C186 * C274 + C139465 * C633) * C92566 +
                        C32132 * C92703 + C32874 * C139557) *
                           C46913 +
                       (C93089 + C93090 + C93091 + C93092) * C139544) *
                          C9304 -
                      ((C95125 + C95126 + C95127 + C95128) * C139544 +
                       (C32875 * C139557 + C32135 * C92703 + C32874 * C92566 +
                        C32132 * C92702) *
                           C46913) *
                          C139426) *
                         C822 +
                     (((C35150 * C92702 + C35975 * C92566 + C37808 * C92703 +
                        C38411 * C139557) *
                           C46913 +
                       (C98201 + C98202 + C98203 + C98204) * C139544) *
                          C139426 -
                      ((C94029 + C94030 + C94031 + C94032) * C139544 +
                       (C35975 * C139557 + C35150 * C92703 +
                        (C186 * C1053 + C139465 * C1543) * C92566 +
                        (C186 * C829 + C139465 * C939) * C92702) *
                           C46913) *
                          C9304) *
                         C823 +
                     ((((C186 * C830 + C139465 * C940) * C92702 +
                        (C186 * C1054 + C139465 * C1544) * C92566 +
                        C40768 * C92703 + C41371 * C139557) *
                           C46913 +
                       (C94033 + C94034 + C94035 + C94036) * C139544) *
                          C9304 -
                      (((C186 * C21201 + C139465 * C21738) * C139557 +
                        (C186 * C20983 + C139465 * C21099) * C92703 +
                        C31738 * C92566 + C31098 * C92702) *
                           C139544 +
                       ((C186 * C21202 + C139465 * C21739) * C139557 +
                        (C186 * C20984 + C139465 * C21100) * C92703 +
                        C41371 * C92566 + C40768 * C92702) *
                           C46913) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezz[104] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C9304 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139426) *
                         C139346 * C5151 +
                     (((C95260 + C95259) * C139465 * C46913 +
                       (C97129 + C97130) * C139465 * C139544) *
                          C139426 -
                      ((C93205 + C93206) * C139465 * C139544 +
                       (C93204 + C93203) * C139465 * C46913) *
                          C9304) *
                         C139346 * C5152 +
                     (((C93206 + C93205) * C139465 * C46913 +
                       (C93207 + C93208) * C139465 * C139544) *
                          C9304 -
                      ((C93167 * C1767 + C97123 + C97123 + C139557 * C2583 +
                        C93166 * C1766 + C97124 + C97124 + C92566 * C2582) *
                           C139465 * C139544 +
                       (C97130 + C97129) * C139465 * C46913) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 +
                        C93167 * C1762 + C93170 + C93170 + C139557 * C2578) *
                           C139465 * C46913 +
                       (C93203 + C93204) * C139465 * C139544) *
                          C9304 -
                      ((C95259 + C95260) * C139465 * C139544 +
                       (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
                        C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                           C139465 * C46913) *
                          C139426) *
                         C822 +
                     (((C93166 * C4159 + C98335 + C98335 + C92566 * C5055 +
                        C93167 * C6325 + C98336 + C98336 + C139557 * C6959) *
                           C139465 * C46913 +
                       (C98349 + C98350) * C139465 * C139544) *
                          C139426 -
                      ((C94163 + C94164) * C139465 * C139544 +
                       (C93167 * C4159 + C94141 + C94141 + C139557 * C5055 +
                        C93166 * C829 + C94142 + C94142 + C92566 * C1645) *
                           C139465 * C46913) *
                          C9304) *
                         C823 +
                     (((C93166 * C830 + C94143 + C94143 + C92566 * C1646 +
                        C93167 * C8592 + C94144 + C94144 + C139557 * C9226) *
                           C139465 * C46913 +
                       (C94165 + C94166) * C139465 * C139544) *
                          C9304 -
                      ((C93167 * C20983 + C103663 + C103663 + C139557 * C21838 +
                        C93166 * C8591 + C103664 + C103664 + C92566 * C9225) *
                           C139465 * C139544 +
                       (C93167 * C20984 + C103665 + C103665 + C139557 * C21839 +
                        C93166 * C8592 + C103666 + C103666 + C92566 * C9226) *
                           C139465 * C46913) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eexx[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139362 * C139529 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139362 * C139398) *
              C139558 +
          (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
               C139362 * C139398 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139362 * C139529) *
              C139559 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
             C79616 * C139557) *
                C13351 +
            (C111607 + C111608) * C139555) *
               C139362 * C139529 -
           (((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139557 +
             C65576 * C92566) *
                C139555 +
            (C111608 + C111607) * C13351) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139362 * C139529 -
           (((C13440 * C8595 + C139555 * C8681 + C13439 * C4163 +
              C13351 * C4279) *
                 C139301 +
             (C13440 * C8592 + C139555 * C8678 + C13439 * C4159 +
              C13351 * C4275) *
                 C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139362 * C139398) *
              C139558 +
          ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                C92566 +
            ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                C139557) *
               C139362 * C139398 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139362 * C139529) *
              C139559 +
          ((((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) *
                C92566 +
            ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
                C139557) *
               C139362 * C139529 -
           (((C13440 * C8593 + C139555 * C8679 + C13439 * C4165 +
              C13351 * C4281) *
                 C139301 +
             (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
              C13351 * C4277) *
                 C63570) *
                C139557 +
            ((C16369 + C16368) * C139301 + (C16367 + C16366) * C63570) *
                C92566) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139362 * C139529 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139362 * C139398) *
              C139558 +
          ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                C13351 +
            ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                C139555) *
               C139362 * C139398 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139362 * C139529) *
              C139559 +
          ((((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) *
                C13351 +
            ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
                C139555) *
               C139362 * C139529 -
           (((C92703 * C8593 + C139557 * C8759 + C92702 * C840 +
              C92566 * C1064) *
                 C139301 +
             (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
              C92566 * C1056) *
                 C63570) *
                C139555 +
            ((C95568 + C95567) * C139301 + (C95566 + C95565) * C63570) *
                C13351) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139362 * C139529 -
                      ((C67314 * C139555 + C67315 * C13440 + C67316 * C13351 +
                        C67317 * C13439) *
                           C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139362 * C139398) *
                         C139558 +
                     (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                        C64385 * C139555) *
                           C92566 +
                       (C67318 * C13439 + C67319 * C13351 + C67320 * C13440 +
                        C67321 * C139555) *
                           C139557) *
                          C139362 * C139398 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139362 * C139529) *
                         C139559 +
                     ((((C63570 * C108 + C139301 * C114) * C13439 +
                        (C63570 * C189 + C139301 * C362) * C13351 +
                        C65813 * C13440 + C65814 * C139555) *
                           C92566 +
                       (C79917 * C13439 + C79918 * C13351 + C79013 * C13440 +
                        C79014 * C139555) *
                           C139557) *
                          C139362 * C139529 -
                      (((C63570 * C8676 + C139301 * C8836) * C139555 +
                        (C63570 * C8590 + C139301 * C8593) * C13440 +
                        C79014 * C13351 + C79013 * C13439) *
                           C139557 +
                       (C65816 * C139555 + C65815 * C13440 + C65814 * C13351 +
                        C65813 * C13439) *
                           C92566) *
                          C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139362 * C139529 -
                      ((C13676 * C8592 + C18755 + C18755 + C139555 * C8915 +
                        C13675 * C4159 + C18754 + C18754 + C13351 * C4613) *
                           C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139362 * C139398) *
                         C139558 +
                     (((C14691 + C14690) * C139301 * C92566 +
                       (C18768 + C18769) * C139301 * C139557) *
                          C139362 * C139398 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139362 * C139529) *
                         C139559 +
                     (((C13715 + C13714) * C139301 * C92566 +
                       (C17618 + C17619) * C139301 * C139557) *
                          C139362 * C139529 -
                      ((C13676 * C8590 + C18762 + C18762 + C139555 * C8913 +
                        C13675 * C4161 + C18763 + C18763 + C13351 * C4615) *
                           C139301 * C139557 +
                       (C16691 + C16690) * C139301 * C92566) *
                          C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139362 * C139529 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139362 * C139398) *
              C139558 +
          (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
            (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
               C139301 * C139362 * C139398 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139362 * C139529) *
              C139559 +
          (((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
            (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
               C139301 * C139362 * C139529 -
           ((C92703 * C8676 + C139557 * C8993 + C92702 * C942 +
             C92566 * C1362) *
                C139555 +
            (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
             C92566 * C1056) *
                C13440 +
            (C95868 + C95867) * C13351 + (C95566 + C95565) * C13439) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[105] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139362 * C139529 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139362 * C139398) *
                         C139558 +
                     (((C110331 + C110332 + C110333 + C110334) * C13351 +
                       (C110335 + C110336 + C110337 + C110338) * C139555) *
                          C139362 * C139398 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139362 * C139529) *
                         C139559 +
                     ((((C63570 * C108 + C139301 * C114) * C92702 +
                        (C63570 * C276 + C139301 * C579) * C92566 +
                        C79917 * C92703 + C80217 * C139557) *
                           C13351 +
                       (C112197 + C112198 + C112199 + C112200) * C139555) *
                          C139362 * C139529 -
                      (((C63570 * C8756 + C139301 * C9070) * C139557 +
                        (C63570 * C8590 + C139301 * C8593) * C92703 +
                        C66049 * C92566 + C65815 * C92702) *
                           C139555 +
                       (C112200 + C112199 + C112198 + C112197) * C13351) *
                          C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139362 * C139529 -
           ((C13440 * C8758 + C139555 * C9149 + C13439 * C4393 +
             C13351 * C4943) *
                C139557 +
            (C13440 * C8592 + C139555 * C8678 + C13439 * C4159 +
             C13351 * C4275) *
                C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139362 * C139398) *
              C139558 +
          (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
            (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
               C139301 * C139362 * C139398 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139362 * C139529) *
              C139559 +
          (((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
            (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
               C139301 * C139362 * C139529 -
           ((C13440 * C8756 + C139555 * C9147 + C13439 * C4395 +
             C13351 * C4945) *
                C139557 +
            (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
             C13351 * C4277) *
                C92703 +
            (C17001 + C17000) * C92566 + (C16367 + C16366) * C92702) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[105] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139362 * C139529 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139362 * C139398) *
              C139558 +
          (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
               C139301 * C139362 * C139398 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139362 * C139529) *
              C139559 +
          (((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) *
               C139301 * C139362 * C139529 -
           ((C93167 * C8590 + C94153 + C94153 + C139557 * C9224 +
             C93166 * C832 + C94154 + C94154 + C92566 * C1648) *
                C139555 +
            (C96178 + C96177) * C13351) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
              C77704 * C139557) *
                 C13351 +
             (C109691 + C109692) * C139555) *
                C139530 -
            ((C113413 + C113414) * C139555 +
             (C77705 * C139557 + C77704 * C92566) * C13351) *
                C139426) *
               C139529 +
           (((C113414 + C113413) * C13351 +
             (C66988 * C92566 + C69094 * C139557) * C139555) *
                C139426 -
            ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
                C139530) *
               C139398) *
              C825 +
          ((((C77706 * C92566 + C77707 * C139557) * C13351 +
             (C113415 + C113416) * C139555) *
                C139426 -
            ((C109696 + C109695) * C139555 +
             (C77706 * C139557 +
              (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                 C13351) *
                C139530) *
               C139529 +
           (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
                C139530 -
            (((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C139557 +
              C66991 * C92566) *
                 C139555 +
             (C113416 + C113415) * C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                  C63570 +
              (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                  C139301) *
                 C92566 +
             ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                 C139557) *
                C139530 -
            (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                 C139557 +
             ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                 C92566) *
                C139426) *
               C139529 +
           ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                 C92566 +
             ((C13439 * C6325 + C13351 * C6411 + C13440 * C20984 +
               C139555 * C21100) *
                  C63570 +
              (C13439 * C6328 + C13351 * C6414 + C13440 * C20986 +
               C139555 * C21102) *
                  C139301) *
                 C139557) *
                C139426 -
            (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                 C139557 +
             ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                  C139301 +
              (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                  C63570) *
                 C92566) *
                C139530) *
               C139398) *
              C825 +
          (((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                 C92566 +
             ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                 C139557) *
                C139426 -
            (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                 C139557 +
             ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                 C92566) *
                C139530) *
               C139529 +
           ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                 C92566 +
             ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                 C139557) *
                C139530 -
            (((C13440 * C20985 + C139555 * C21101 + C13439 * C6327 +
               C13351 * C6413) *
                  C139301 +
              (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
               C13351 * C6410) *
                  C63570) *
                 C139557 +
             ((C18319 + C18318) * C139301 + (C18317 + C18316) * C63570) *
                 C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
               C139557 * C1986) *
                  C63570 +
              (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
               C139557 * C1994) *
                  C139301) *
                 C13351 +
             ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                 C139555) *
                C139530 -
            (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                 C139555 +
             ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
               C92566 * C1994) *
                  C139301 +
              (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
               C92566 * C1986) *
                  C63570) *
                 C13351) *
                C139426) *
               C139529 +
           ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                 C13351 +
             ((C92702 * C8592 + C92566 * C8758 + C92703 * C20984 +
               C139557 * C21202) *
                  C63570 +
              (C92702 * C8595 + C92566 * C8761 + C92703 * C20986 +
               C139557 * C21204) *
                  C139301) *
                 C139555) *
                C139426 -
            (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                 C139555 +
             ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                 C13351) *
                C139530) *
               C139398) *
              C825 +
          (((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                 C13351 +
             ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                 C139555) *
                C139426 -
            (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                 C139555 +
             ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                 C13351) *
                C139530) *
               C139529 +
           ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                 C13351 +
             ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                 C139555) *
                C139530 -
            (((C92703 * C20985 + C139557 * C21203 + C92702 * C8594 +
               C92566 * C8760) *
                  C139301 +
              (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
               C92566 * C8757) *
                  C63570) *
                 C139555 +
             ((C97540 + C97539) * C139301 + (C97538 + C97537) * C63570) *
                 C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63570 * C106 + C139301 * C112) * C13439 +
                         (C63570 * C187 + C139301 * C360) * C13351 +
                         C64376 * C13440 + C64377 * C139555) *
                            C92566 +
                        (C110971 + C110972 + C110973 + C110974) * C139557) *
                           C139530 -
                       ((C110975 + C110976 + C110977 + C110978) * C139557 +
                        (C110974 + C110973 + C110972 + C110971) * C92566) *
                           C139426) *
                          C139529 +
                      (((C113831 + C113832 + C113833 + C113834) * C92566 +
                        (C69342 * C13439 + C69343 * C13351 + C69344 * C13440 +
                         C69345 * C139555) *
                            C139557) *
                           C139426 -
                       ((C113834 + C113833 + C113832 + C113831) * C139557 +
                        (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                         C64376 * C13439) *
                            C92566) *
                           C139530) *
                          C139398) *
                         C825 +
                     ((((C110979 + C110980 + C110981 + C110982) * C92566 +
                        (C110983 + C110984 + C110985 + C110986) * C139557) *
                           C139426 -
                       ((C110982 + C110981 + C110980 + C110979) * C139557 +
                        (C64383 * C139555 + C64382 * C13440 +
                         (C63570 * C188 + C139301 * C361) * C13351 +
                         (C63570 * C107 + C139301 * C113) * C13439) *
                            C92566) *
                           C139530) *
                          C139529 +
                      (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                         C64385 * C139555) *
                            C92566 +
                        (C113835 + C113836 + C113837 + C113838) * C139557) *
                           C139530 -
                       (((C63570 * C21099 + C139301 * C21313) * C139555 +
                         (C63570 * C20983 + C139301 * C20985) * C13440 +
                         C78062 * C13351 + C78061 * C13439) *
                            C139557 +
                        (C113838 + C113837 + C113836 + C113835) * C92566) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                         C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                            C139301 * C92566 +
                        (C111101 + C111102) * C139301 * C139557) *
                           C139530 -
                       ((C111103 + C111104) * C139301 * C139557 +
                        (C111102 + C111101) * C139301 * C92566) *
                           C139426) *
                          C139529 +
                      (((C113977 + C113978) * C139301 * C92566 +
                        (C13675 * C6325 + C21431 + C21431 + C13351 * C6648 +
                         C13676 * C20984 + C21430 + C21430 + C139555 * C21426) *
                            C139301 * C139557) *
                           C139426 -
                       ((C113978 + C113977) * C139301 * C139557 +
                        (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                         C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                            C139301 * C92566) *
                           C139530) *
                          C139398) *
                         C825 +
                     ((((C15723 + C15722) * C139301 * C92566 +
                        (C15724 + C15725) * C139301 * C139557) *
                           C139426 -
                       ((C15722 + C15723) * C139301 * C139557 +
                        (C13713 + C13712) * C139301 * C92566) *
                           C139530) *
                          C139529 +
                      (((C14691 + C14690) * C139301 * C92566 +
                        (C18768 + C18769) * C139301 * C139557) *
                           C139530 -
                       ((C13676 * C20983 + C21428 + C21428 + C139555 * C21425 +
                         C13675 * C6324 + C21429 + C21429 + C13351 * C6647) *
                            C139301 * C139557 +
                        (C18769 + C18768) * C139301 * C92566) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C13439 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C13351 +
             (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
                C139301 * C139530 -
            ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
             (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C13351 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C13439) *
                C139301 * C139426) *
               C139529 +
           (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
             (C92702 * C8592 + C92566 * C8758 + C92703 * C20984 +
              C139557 * C21202) *
                 C13440 +
             (C92702 * C8678 + C92566 * C8995 + C92703 * C21100 +
              C139557 * C21530) *
                 C139555) *
                C139301 * C139426 -
            ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
             (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
             (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
                C139301 * C139426 -
            ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
             (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
                C139301 * C139530) *
               C139529 +
           (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
             (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
                C139301 * C139530 -
            ((C92703 * C21099 + C139557 * C21529 + C92702 * C8677 +
              C92566 * C8994) *
                 C139555 +
             (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
              C92566 * C8757) *
                 C13440 +
             (C97940 + C97939) * C13351 + (C97538 + C97537) * C13439) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[106] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63570 * C106 + C139301 * C112) * C92702 +
                         (C63570 * C274 + C139301 * C577) * C92566 +
                         C78053 * C92703 + C78397 * C139557) *
                            C13351 +
                        (C110323 + C110324 + C110325 + C110326) * C139555) *
                           C139530 -
                       ((C114245 + C114246 + C114247 + C114248) * C139555 +
                        (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                         C78053 * C92702) *
                            C13351) *
                           C139426) *
                          C139529 +
                      (((C114248 + C114247 + C114246 + C114245) * C13351 +
                        (C67315 * C92702 + C67634 * C92566 + C69344 * C92703 +
                         C69584 * C139557) *
                            C139555) *
                           C139426 -
                       ((C110327 + C110328 + C110329 + C110330) * C139555 +
                        (C110326 + C110325 + C110324 + C110323) * C13351) *
                           C139530) *
                          C139398) *
                         C825 +
                     ((((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                         C78400 * C139557) *
                            C13351 +
                        (C114249 + C114250 + C114251 + C114252) * C139555) *
                           C139426 -
                       ((C110334 + C110333 + C110332 + C110331) * C139555 +
                        (C78399 * C139557 + C78057 * C92703 +
                         (C63570 * C275 + C139301 * C578) * C92566 +
                         (C63570 * C107 + C139301 * C113) * C92702) *
                            C13351) *
                           C139530) *
                          C139529 +
                      (((C110331 + C110332 + C110333 + C110334) * C13351 +
                        (C110335 + C110336 + C110337 + C110338) * C139555) *
                           C139530 -
                       (((C63570 * C21201 + C139301 * C21632) * C139557 +
                         (C63570 * C20983 + C139301 * C20985) * C92703 +
                         C67637 * C92566 + C67320 * C92702) *
                            C139555 +
                        (C114252 + C114251 + C114250 + C114249) * C13351) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C92702 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C92566 +
             (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
                C139301 * C139530 -
            ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
             (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
                C139301 * C139426) *
               C139529 +
           (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
             (C13439 * C6325 + C13351 * C6411 + C13440 * C20984 +
              C139555 * C21100) *
                 C92703 +
             (C13439 * C6491 + C13351 * C6882 + C13440 * C21202 +
              C139555 * C21739) *
                 C139557) *
                C139301 * C139426 -
            ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
             (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C92566 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C92702) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
             (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
                C139301 * C139426 -
            ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
             (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
                C139301 * C139530) *
               C139529 +
           (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
             (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
                C139301 * C139530 -
            ((C13440 * C21201 + C139555 * C21738 + C13439 * C6490 +
              C13351 * C6881) *
                 C139557 +
             (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
              C13351 * C6410) *
                 C92703 +
             (C19187 + C19186) * C92566 + (C18317 + C18316) * C92702) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[106] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
              C93170 + C93170 + C139557 * C2578) *
                 C13351 +
             (C110551 + C110552) * C139555) *
                C139301 * C139530 -
            ((C114527 + C114528) * C139555 +
             (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
              C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                 C13351) *
                C139301 * C139426) *
               C139529 +
           (((C114528 + C114527) * C13351 +
             (C93166 * C8592 + C103666 + C103666 + C92566 * C9226 +
              C93167 * C20984 + C103665 + C103665 + C139557 * C21839) *
                 C139555) *
                C139301 * C139426 -
            ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
                C139301 * C139426 -
            ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
                C139301 * C139530) *
               C139529 +
           (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
                C139301 * C139530 -
            ((C93167 * C20983 + C103663 + C103663 + C139557 * C21838 +
              C93166 * C8591 + C103664 + C103664 + C92566 * C9225) *
                 C139555 +
             (C98350 + C98349) * C13351) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139362 * C822 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139362 * C823 +
           ((C109694 + C109693) * C13351 +
            (C64106 * C92566 + C71373 * C139557) * C139555) *
               C139362 * C824) *
              C825 +
          (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
               C139362 * C823 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139362 * C822 -
           (((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139557 +
             C64109 * C92566) *
                C139555 +
            (C109698 + C109697) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
            C77704 * C139557) *
               C13351 +
           (C64104 * C92566 + C66989 * C139557) * C139555) *
              C139362 * C139346 * C96 -
          ((C66990 * C139557 + C64107 * C92566) * C139555 +
           (C77706 * C139557 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
               C13351) *
              C139362 * C139346 * C97 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
            C79616 * C139557) *
               C13351 +
           (C65575 * C92566 + C78713 * C139557) * C139555) *
              C139362 * C139346 * C98 -
          (((C63569 * C4162 + C76092 + C76092 + C139301 * C4170) * C139557 +
            (C63569 * C833 + C63582 + C63582 + C139301 * C849) * C92566) *
               C139555 +
           ((C63569 * C1766 + C76093 + C76093 + C139301 * C1782) * C139557 +
            (C63569 * C109 + C63583 + C63583 + C139301 * C121) * C92566) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C1757 -
           ((C69093 * C139557 + C66989 * C92566) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C1758 +
           ((C77705 * C92566 + C88983 * C139557) * C13351 +
            (C69093 * C92566 + C83277 * C139557) * C139555) *
               C1759) *
              C139346 * C825 +
          (((C77706 * C92566 + C77707 * C139557) * C13351 +
            (C66990 * C92566 + C77708 * C139557) * C139555) *
               C1758 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C1757 -
           (((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C139557 +
             C77708 * C92566) *
                C139555 +
            ((C63569 * C10619 + C77693 + C77693 + C139301 * C10625) * C139557 +
             C77707 * C92566) *
                C13351) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
              C139555 * C4275) *
                 C63570 +
             (C13439 * C1770 + C13351 * C1880 + C13440 * C4163 +
              C139555 * C4279) *
                 C139301) *
                C139557) *
               C139362 * C822 -
           (((C13440 * C8595 + C139555 * C8681 + C13439 * C4163 +
              C13351 * C4279) *
                 C139301 +
             (C13440 * C8592 + C139555 * C8678 + C13439 * C4159 +
              C13351 * C4275) *
                 C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139362 * C823 +
           (((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C13439 * C838 + C13351 * C948 + C13440 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C92566 +
            ((C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
              C139555 * C24114) *
                 C63570 +
             (C13439 * C8595 + C13351 * C8681 + C13440 * C24000 +
              C139555 * C24116) *
                 C139301) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                C92566 +
            ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                C139557) *
               C139362 * C823 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139362 * C822 -
           (((C13440 * C23999 + C139555 * C24115 + C13439 * C8594 +
              C13351 * C8680) *
                 C139301 +
             (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
              C13351 * C8677) *
                 C63570) *
                C139557 +
            ((C14285 + C14284) * C139301 + (C14283 + C14282) * C63570) *
                C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C63570 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C139301) *
               C92566 +
           ((C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
             C139555 * C4275) *
                C63570 +
            (C13439 * C1770 + C13351 * C1880 + C13440 * C4163 +
             C139555 * C4279) *
                C139301) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
               C139557 +
           ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
               C92566) *
              C139362 * C139346 * C97 +
          (((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) * C92566 +
           ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C13440 * C4166 + C139555 * C4282 + C13439 * C1774 +
             C13351 * C1884) *
                C139301 +
            (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
             C13351 * C1876) *
                C63570) *
               C139557 +
           ((C13477 + C13476) * C139301 + (C13475 + C13474) * C63570) *
               C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C1757 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C1758 +
           (((C110774 + C110773) * C63570 + (C110772 + C110771) * C139301) *
                C92566 +
            ((C13439 * C10620 + C13351 * C10682 + C13440 * C26692 +
              C139555 * C26768) *
                 C63570 +
             (C13439 * C10623 + C13351 * C10685 + C13440 * C26694 +
              C139555 * C26770) *
                 C139301) *
                C139557) *
               C1759) *
              C139346 * C825 +
          ((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                C92566 +
            ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                C139557) *
               C1758 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C1757 -
           (((C13440 * C26693 + C139555 * C26769 + C13439 * C10622 +
              C13351 * C10684) *
                 C139301 +
             (C13440 * C26691 + C139555 * C26767 + C13439 * C10619 +
              C13351 * C10681) *
                 C63570) *
                C139557 +
            ((C15393 + C15392) * C139301 + (C15391 + C15390) * C63570) *
                C92566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139362 * C822 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139362 * C823 +
           (((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
                C13351 +
            ((C92702 * C5803 + C92566 * C5921 + C92703 * C23998 +
              C139557 * C24216) *
                 C63570 +
             (C92702 * C5806 + C92566 * C5924 + C92703 * C24000 +
              C139557 * C24218) *
                 C139301) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                C13351 +
            ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                C139555) *
               C139362 * C823 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139362 * C822 -
           (((C92703 * C23999 + C139557 * C24217 + C92702 * C5805 +
              C92566 * C5923) *
                 C139301 +
             (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
              C92566 * C5920) *
                 C63570) *
                C139555 +
            ((C93526 + C93525) * C139301 + (C93524 + C93523) * C63570) *
                C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C63570 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C139301) *
               C13351 +
           ((C92702 * C829 + C92566 * C1053 + C92703 * C4159 +
             C139557 * C4393) *
                C63570 +
            (C92702 * C837 + C92566 * C1061 + C92703 * C4163 +
             C139557 * C4397) *
                C139301) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
               C139555 +
           ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
               C13351) *
              C139362 * C139346 * C97 +
          (((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) * C13351 +
           ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C92703 * C4166 + C139557 * C4400 + C92702 * C841 +
             C92566 * C1065) *
                C139301 +
            (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
             C92566 * C1057) *
                C63570) *
               C139555 +
           ((C92740 + C92739) * C139301 + (C92738 + C92737) * C63570) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C1757 -
           (((C92703 * C6328 + C139557 * C6494 + C92702 * C4163 +
              C92566 * C4397) *
                 C139301 +
             (C92703 * C6325 + C139557 * C6491 + C92702 * C4159 +
              C92566 * C4393) *
                 C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C1758 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C13351 +
            ((C92702 * C6325 + C92566 * C6491 + C92703 * C26692 +
              C139557 * C26838) *
                 C63570 +
             (C92702 * C6328 + C92566 * C6494 + C92703 * C26694 +
              C139557 * C26840) *
                 C139301) *
                C139555) *
               C1759) *
              C139346 * C825 +
          ((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                C13351 +
            ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                C139555) *
               C1758 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C1757 -
           (((C92703 * C26693 + C139557 * C26839 + C92702 * C6327 +
              C92566 * C6493) *
                 C139301 +
             (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
              C92566 * C6490) *
                 C63570) *
                C139555 +
            ((C94542 + C94541) * C139301 + (C94540 + C94539) * C63570) *
                C13351) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C13439 +
             (C63570 * C187 + C139301 * C360) * C13351 + C64376 * C13440 +
             C64377 * C139555) *
                C92566 +
            (C78053 * C13439 + C78054 * C13351 + C67317 * C13440 +
             C67316 * C139555) *
                C139557) *
               C139362 * C822 -
           ((C67314 * C139555 + C67315 * C13440 + C67316 * C13351 +
             C67317 * C13439) *
                C139557 +
            (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
             C64376 * C13439) *
                C92566) *
               C139362 * C823 +
           ((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
             C64380 * C139555) *
                C92566 +
            (C67315 * C13439 + C67314 * C13351 + C71615 * C13440 +
             C71616 * C139555) *
                C139557) *
               C139362 * C824) *
              C825 +
          (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
             C64385 * C139555) *
                C92566 +
            (C67318 * C13439 + C67319 * C13351 + C67320 * C13440 +
             C67321 * C139555) *
                C139557) *
               C139362 * C823 -
           ((C67319 * C139555 + C67318 * C13440 + C78058 * C13351 +
             C78057 * C13439) *
                C139557 +
            (C64383 * C139555 + C64382 * C13440 +
             (C63570 * C188 + C139301 * C361) * C13351 +
             (C63570 * C107 + C139301 * C113) * C13439) *
                C92566) *
               C139362 * C822 -
           (((C63570 * C24113 + C139301 * C24327) * C139555 +
             (C63570 * C23997 + C139301 * C23999) * C13440 + C67321 * C13351 +
             C67320 * C13439) *
                C139557 +
            (C64387 * C139555 + C64386 * C13440 + C64385 * C13351 +
             C64384 * C13439) *
                C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63570 * C106 + C139301 * C112) * C13439 +
                                (C63570 * C187 + C139301 * C360) * C13351 +
                                C64376 * C13440 + C64377 * C139555) *
                                   C92566 +
                               (C78053 * C13439 + C78054 * C13351 +
                                C67317 * C13440 + C67316 * C139555) *
                                   C139557) *
                                  C139362 * C139346 * C96 -
                              ((C67319 * C139555 + C67318 * C13440 +
                                C78058 * C13351 + C78057 * C13439) *
                                   C139557 +
                               (C64383 * C139555 + C64382 * C13440 +
                                (C63570 * C188 + C139301 * C361) * C13351 +
                                (C63570 * C107 + C139301 * C113) * C13439) *
                                   C92566) *
                                  C139362 * C139346 * C97 +
                              (((C63570 * C108 + C139301 * C114) * C13439 +
                                (C63570 * C189 + C139301 * C362) * C13351 +
                                C65813 * C13440 + C65814 * C139555) *
                                   C92566 +
                               (C79917 * C13439 + C79918 * C13351 +
                                C79013 * C13440 + C79014 * C139555) *
                                   C139557) *
                                  C139362 * C139346 * C98 -
                              (((C63570 * C4278 + C139301 * C4514) * C139555 +
                                (C63570 * C4162 + C139301 * C4166) * C13440 +
                                (C63570 * C1876 + C139301 * C2104) * C13351 +
                                (C63570 * C1766 + C139301 * C1774) * C13439) *
                                   C139557 +
                               ((C63570 * C943 + C139301 * C1171) * C139555 +
                                (C63570 * C833 + C139301 * C841) * C13440 +
                                (C63570 * C190 + C139301 * C363) * C13351 +
                                (C63570 * C109 + C139301 * C115) * C13439) *
                                   C92566) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C13439 +
             (C63570 * C187 + C139301 * C360) * C13351 + C64376 * C13440 +
             C64377 * C139555) *
                C92566 +
            (C110971 + C110972 + C110973 + C110974) * C139557) *
               C1757 -
           ((C110975 + C110976 + C110977 + C110978) * C139557 +
            (C110974 + C110973 + C110972 + C110971) * C92566) *
               C1758 +
           ((C110978 + C110977 + C110976 + C110975) * C92566 +
            (C89205 * C13439 + C89206 * C13351 + C83605 * C13440 +
             C83606 * C139555) *
                C139557) *
               C1759) *
              C139346 * C825 +
          (((C110979 + C110980 + C110981 + C110982) * C92566 +
            (C110983 + C110984 + C110985 + C110986) * C139557) *
               C1758 -
           ((C110982 + C110981 + C110980 + C110979) * C139557 +
            (C64383 * C139555 + C64382 * C13440 +
             (C63570 * C188 + C139301 * C361) * C13351 +
             (C63570 * C107 + C139301 * C113) * C13439) *
                C92566) *
               C1757 -
           (((C63570 * C26767 + C139301 * C26907) * C139555 +
             (C63570 * C26691 + C139301 * C26693) * C13440 +
             (C63570 * C10681 + C139301 * C10793) * C13351 +
             (C63570 * C10619 + C139301 * C10622) * C13439) *
                C139557 +
            (C110986 + C110985 + C110984 + C110983) * C92566) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[107] += (-std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C13675 * C1762 + C15701 + C15701 + C13351 * C2182 +
                        C13676 * C4159 + C15700 + C15700 + C139555 * C4613) *
                           C139301 * C139557) *
                          C139362 * C822 -
                      ((C13676 * C8592 + C18755 + C18755 + C139555 * C8915 +
                        C13675 * C4159 + C18754 + C18754 + C13351 * C4613) *
                           C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139362 * C823 +
                      ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                        C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                           C139301 * C92566 +
                       (C13675 * C8592 + C24445 + C24445 + C13351 * C8915 +
                        C13676 * C23998 + C24444 + C24444 + C139555 * C24440) *
                           C139301 * C139557) *
                          C139362 * C824) *
                         C825 +
                     (((C14691 + C14690) * C139301 * C92566 +
                       (C18768 + C18769) * C139301 * C139557) *
                          C139362 * C823 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139362 * C822 -
                      ((C13676 * C23997 + C24442 + C24442 + C139555 * C24439 +
                        C13675 * C8591 + C24443 + C24443 + C13351 * C8914) *
                           C139301 * C139557 +
                       (C14693 + C14692) * C139301 * C92566) *
                          C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C139301 * C92566 +
                      (C13675 * C1762 + C15701 + C15701 + C13351 * C2182 +
                       C13676 * C4159 + C15700 + C15700 + C139555 * C4613) *
                          C139301 * C139557) *
                         C139362 * C139346 * C96 -
                     ((C15722 + C15723) * C139301 * C139557 +
                      (C13713 + C13712) * C139301 * C92566) *
                         C139362 * C139346 * C97 +
                     ((C13715 + C13714) * C139301 * C92566 +
                      (C17618 + C17619) * C139301 * C139557) *
                         C139362 * C139346 * C98 -
                     ((C13676 * C4162 + C17612 + C17612 + C139555 * C4616 +
                       C13675 * C1766 + C17613 + C17613 + C13351 * C2186) *
                          C139301 * C139557 +
                      (C13717 + C13716) * C139301 * C92566) *
                         C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C1757 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C1758 +
                      ((C111104 + C111103) * C139301 * C92566 +
                       (C13675 * C10620 + C26981 + C26981 + C13351 * C10847 +
                        C13676 * C26692 + C26980 + C26980 + C139555 * C26976) *
                           C139301 * C139557) *
                          C1759) *
                         C139346 * C825 +
                     (((C15723 + C15722) * C139301 * C92566 +
                       (C15724 + C15725) * C139301 * C139557) *
                          C1758 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C1757 -
                      ((C13676 * C26691 + C26978 + C26978 + C139555 * C26975 +
                        C13675 * C10619 + C26979 + C26979 + C13351 * C10846) *
                           C139301 * C139557 +
                       (C15725 + C15724) * C139301 * C92566) *
                          C1759) *
                         C139346 * C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139362 * C822 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139362 * C823 +
           ((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
            (C92702 * C5803 + C92566 * C5921 + C92703 * C23998 +
             C139557 * C24216) *
                C13440 +
            (C92702 * C5865 + C92566 * C6086 + C92703 * C24114 +
             C139557 * C24544) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
            (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
               C139301 * C139362 * C823 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139362 * C822 -
           ((C92703 * C24113 + C139557 * C24543 + C92702 * C5864 +
             C92566 * C6085) *
                C139555 +
            (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
             C92566 * C5920) *
                C13440 +
            (C93832 + C93831) * C13351 + (C93524 + C93523) * C13439) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C13439 +
           (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
               C13351 +
           (C92702 * C829 + C92566 * C1053 + C92703 * C4159 + C139557 * C4393) *
               C13440 +
           (C92702 * C939 + C92566 * C1359 + C92703 * C4275 + C139557 * C4729) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
           (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
              C139301 * C139362 * C139346 * C97 +
          ((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
           (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
              C139301 * C139362 * C139346 * C98 -
          ((C92703 * C4278 + C139557 * C4732 + C92702 * C943 + C92566 * C1363) *
               C139555 +
           (C92703 * C4162 + C139557 * C4396 + C92702 * C833 + C92566 * C1057) *
               C13440 +
           (C92956 + C92955) * C13351 + (C92738 + C92737) * C13439) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C1757 -
           ((C92703 * C6411 + C139557 * C6728 + C92702 * C4275 +
             C92566 * C4729) *
                C139555 +
            (C92703 * C6325 + C139557 * C6491 + C92702 * C4159 +
             C92566 * C4393) *
                C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C1758 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C13439 +
            (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
             C139557 * C10903) *
                C13351 +
            (C92702 * C6325 + C92566 * C6491 + C92703 * C26692 +
             C139557 * C26838) *
                C13440 +
            (C92702 * C6411 + C92566 * C6728 + C92703 * C26768 +
             C139557 * C27048) *
                C139555) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
            (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
               C139301 * C1758 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C1757 -
           ((C92703 * C26767 + C139557 * C27047 + C92702 * C6410 +
             C92566 * C6727) *
                C139555 +
            (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
             C92566 * C6490) *
                C13440 +
            (C94904 + C94903) * C13351 + (C94540 + C94539) * C13439) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[107] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C92702 +
             (C63570 * C274 + C139301 * C577) * C92566 + C78053 * C92703 +
             C78397 * C139557) *
                C13351 +
            (C110323 + C110324 + C110325 + C110326) * C139555) *
               C139362 * C822 -
           ((C110327 + C110328 + C110329 + C110330) * C139555 +
            (C110326 + C110325 + C110324 + C110323) * C13351) *
               C139362 * C823 +
           ((C110330 + C110329 + C110328 + C110327) * C13351 +
            (C64381 * C92702 + C64642 * C92566 + C71615 * C92703 +
             C71852 * C139557) *
                C139555) *
               C139362 * C824) *
              C825 +
          (((C110331 + C110332 + C110333 + C110334) * C13351 +
            (C110335 + C110336 + C110337 + C110338) * C139555) *
               C139362 * C823 -
           ((C110334 + C110333 + C110332 + C110331) * C139555 +
            (C78399 * C139557 + C78057 * C92703 +
             (C63570 * C275 + C139301 * C578) * C92566 +
             (C63570 * C107 + C139301 * C113) * C92702) *
                C13351) *
               C139362 * C822 -
           (((C63570 * C24215 + C139301 * C24646) * C139557 +
             (C63570 * C23997 + C139301 * C23999) * C92703 + C64645 * C92566 +
             C64386 * C92702) *
                C139555 +
            (C110338 + C110337 + C110336 + C110335) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63570 * C106 + C139301 * C112) * C92702 +
                                (C63570 * C274 + C139301 * C577) * C92566 +
                                C78053 * C92703 + C78397 * C139557) *
                                   C13351 +
                               (C64376 * C92702 + C64640 * C92566 +
                                C67317 * C92703 + C67635 * C139557) *
                                   C139555) *
                                  C139362 * C139346 * C96 -
                              ((C67636 * C139557 + C67318 * C92703 +
                                C64643 * C92566 + C64382 * C92702) *
                                   C139555 +
                               (C78399 * C139557 + C78057 * C92703 +
                                (C63570 * C275 + C139301 * C578) * C92566 +
                                (C63570 * C107 + C139301 * C113) * C92702) *
                                   C13351) *
                                  C139362 * C139346 * C97 +
                              (((C63570 * C108 + C139301 * C114) * C92702 +
                                (C63570 * C276 + C139301 * C579) * C92566 +
                                C79917 * C92703 + C80217 * C139557) *
                                   C13351 +
                               (C65813 * C92702 + C66048 * C92566 +
                                C79013 * C92703 + C79314 * C139557) *
                                   C139555) *
                                  C139362 * C139346 * C98 -
                              (((C63570 * C4396 + C139301 * C4844) * C139557 +
                                (C63570 * C4162 + C139301 * C4166) * C92703 +
                                (C63570 * C1057 + C139301 * C1465) * C92566 +
                                (C63570 * C833 + C139301 * C841) * C92702) *
                                   C139555 +
                               ((C63570 * C1990 + C139301 * C2398) * C139557 +
                                (C63570 * C1766 + C139301 * C1774) * C92703 +
                                (C63570 * C277 + C139301 * C580) * C92566 +
                                (C63570 * C109 + C139301 * C115) * C92702) *
                                   C13351) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C92702 +
             (C63570 * C274 + C139301 * C577) * C92566 + C78053 * C92703 +
             C78397 * C139557) *
                C13351 +
            (C110323 + C110324 + C110325 + C110326) * C139555) *
               C1757 -
           ((C69583 * C139557 + C69342 * C92703 + C67635 * C92566 +
             C67317 * C92702) *
                C139555 +
            (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
             C78053 * C92702) *
                C13351) *
               C1758 +
           ((C78056 * C92702 + C78398 * C92566 + C89205 * C92703 +
             C89424 * C139557) *
                C13351 +
            (C69342 * C92702 + C69583 * C92566 + C83605 * C92703 +
             C83924 * C139557) *
                C139555) *
               C1759) *
              C139346 * C825 +
          (((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
             C78400 * C139557) *
                C13351 +
            (C67318 * C92702 + C67636 * C92566 + C78061 * C92703 +
             C78401 * C139557) *
                C139555) *
               C1758 -
           ((C110334 + C110333 + C110332 + C110331) * C139555 +
            (C78399 * C139557 + C78057 * C92703 +
             (C63570 * C275 + C139301 * C578) * C92566 +
             (C63570 * C107 + C139301 * C113) * C92702) *
                C13351) *
               C1757 -
           (((C63570 * C26837 + C139301 * C27115) * C139557 +
             (C63570 * C26691 + C139301 * C26693) * C92703 + C78401 * C92566 +
             C78061 * C92702) *
                C139555 +
            ((C63570 * C10737 + C139301 * C10955) * C139557 +
             (C63570 * C10619 + C139301 * C10622) * C92703 + C78400 * C92566 +
             C78059 * C92702) *
                C13351) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
             C139555 * C4275) *
                C92703 +
            (C13439 * C1986 + C13351 * C2476 + C13440 * C4393 +
             C139555 * C4943) *
                C139557) *
               C139301 * C139362 * C822 -
           ((C13440 * C8758 + C139555 * C9149 + C13439 * C4393 +
             C13351 * C4943) *
                C139557 +
            (C13440 * C8592 + C139555 * C8678 + C13439 * C4159 +
             C13351 * C4275) *
                C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139362 * C823 +
           ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C92702 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C92566 +
            (C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
             C139555 * C24114) *
                C92703 +
            (C13439 * C8758 + C13351 * C9149 + C13440 * C24216 +
             C139555 * C24753) *
                C139557) *
               C139301 * C139362 * C824) *
              C825 +
          (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
            (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
               C139301 * C139362 * C823 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139362 * C822 -
           ((C13440 * C24215 + C139555 * C24752 + C13439 * C8757 +
             C13351 * C9148) *
                C139557 +
            (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
             C13351 * C8677) *
                C92703 +
            (C15040 + C15039) * C92566 + (C14283 + C14282) * C92702) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C92702 +
           (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
               C92566 +
           (C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
            C139555 * C4275) *
               C92703 +
           (C13439 * C1986 + C13351 * C2476 + C13440 * C4393 +
            C139555 * C4943) *
               C139557) *
              C139301 * C139362 * C139346 * C96 -
          ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
           (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
              C139301 * C139362 * C139346 * C97 +
          ((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
           (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
              C139301 * C139362 * C139346 * C98 -
          ((C13440 * C4396 + C139555 * C4946 + C13439 * C1990 +
            C13351 * C2480) *
               C139557 +
           (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
            C13351 * C1876) *
               C92703 +
           (C13945 + C13944) * C92566 + (C13475 + C13474) * C92702) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C1757 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C1758 +
           ((C110774 + C110773) * C92702 + (C111410 + C111409) * C92566 +
            (C13439 * C10620 + C13351 * C10682 + C13440 * C26692 +
             C139555 * C26768) *
                C92703 +
            (C13439 * C10738 + C13351 * C11009 + C13440 * C26838 +
             C139555 * C27184) *
                C139557) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
            (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
               C139301 * C1758 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C1757 -
           ((C13440 * C26837 + C139555 * C27183 + C13439 * C10737 +
             C13351 * C11008) *
                C139557 +
            (C13440 * C26691 + C139555 * C26767 + C13439 * C10619 +
             C13351 * C10681) *
                C92703 +
            (C16042 + C16041) * C92566 + (C15391 + C15390) * C92702) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[107] +=
        (-std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139362 * C822 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139362 * C823 +
           ((C110554 + C110553) * C13351 +
            (C93166 * C5803 + C99830 + C99830 + C92566 * C6245 +
             C93167 * C23998 + C99829 + C99829 + C139557 * C24853) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
               C139301 * C139362 * C823 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139362 * C822 -
           ((C93167 * C23997 + C99827 + C99827 + C139557 * C24852 +
             C93166 * C5802 + C99828 + C99828 + C92566 * C6244) *
                C139555 +
            (C94166 + C94165) * C13351) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
            C93170 + C93170 + C139557 * C2578) *
               C13351 +
           (C93166 * C829 + C94142 + C94142 + C92566 * C1645 + C93167 * C4159 +
            C94141 + C94141 + C139557 * C5055) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) * C139301 *
              C139362 * C139346 * C97 +
          ((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) * C139301 *
              C139362 * C139346 * C98 -
          ((C93167 * C4162 + C96171 + C96171 + C139557 * C5058 + C93166 * C833 +
            C96172 + C96172 + C92566 * C1649) *
               C139555 +
           (C93208 + C93207) * C13351) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C1757 -
           ((C93167 * C6325 + C98336 + C98336 + C139557 * C6959 +
             C93166 * C4159 + C98335 + C98335 + C92566 * C5055) *
                C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C1758 +
           ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
             C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                C13351 +
            (C93166 * C6325 + C100722 + C100722 + C92566 * C6959 +
             C93167 * C26692 + C100721 + C100721 + C139557 * C27252) *
                C139555) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
               C139301 * C1758 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C1757 -
           ((C93167 * C26691 + C100719 + C100719 + C139557 * C27251 +
             C93166 * C6324 + C100720 + C100720 + C92566 * C6958) *
                C139555 +
            (C95262 + C95261) * C13351) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139530 -
           ((C69093 * C139557 + C66989 * C92566) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139426) *
              C139346 * C139558 +
          (((C77706 * C92566 + C77707 * C139557) * C13351 +
            (C66990 * C92566 + C77708 * C139557) * C139555) *
               C139426 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139530) *
              C139346 * C139559 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
             C79616 * C139557) *
                C13351 +
            (C111607 + C111608) * C139555) *
               C139530 -
           (((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C139557 +
             C78713 * C92566) *
                C139555 +
            ((C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C139557 +
             C79616 * C92566) *
                C13351) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139530 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139426) *
              C139346 * C139558 +
          ((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                C92566 +
            ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                C139557) *
               C139426 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139530) *
              C139346 * C139559 +
          ((((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) *
                C92566 +
            ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
                C139557) *
               C139530 -
           (((C13440 * C6326 + C139555 * C6412 + C13439 * C1773 +
              C13351 * C1883) *
                 C139301 +
             (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
              C13351 * C1875) *
                 C63570) *
                C139557 +
            ((C17313 + C17312) * C139301 + (C17311 + C17310) * C63570) *
                C92566) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139530 -
           (((C92703 * C6328 + C139557 * C6494 + C92702 * C4163 +
              C92566 * C4397) *
                 C139301 +
             (C92703 * C6325 + C139557 * C6491 + C92702 * C4159 +
              C92566 * C4393) *
                 C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139426) *
              C139346 * C139558 +
          ((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                C13351 +
            ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                C139555) *
               C139426 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139530) *
              C139346 * C139559 +
          ((((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) *
                C13351 +
            ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
                C139555) *
               C139530 -
           (((C92703 * C6326 + C139557 * C6492 + C92702 * C4165 +
              C92566 * C4399) *
                 C139301 +
             (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
              C92566 * C4395) *
                 C63570) *
                C139555 +
            ((C96500 + C96499) * C139301 + (C96498 + C96497) * C63570) *
                C13351) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[108] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139530 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139426) *
                         C139346 * C139558 +
                     (((C110979 + C110980 + C110981 + C110982) * C92566 +
                       (C110983 + C110984 + C110985 + C110986) * C139557) *
                          C139426 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139530) *
                         C139346 * C139559 +
                     ((((C63570 * C108 + C139301 * C114) * C13439 +
                        (C63570 * C189 + C139301 * C362) * C13351 +
                        C65813 * C13440 + C65814 * C139555) *
                           C92566 +
                       (C112789 + C112790 + C112791 + C112792) * C139557) *
                          C139530 -
                      (((C63570 * C6409 + C139301 * C6569) * C139555 +
                        (C63570 * C6323 + C139301 * C6326) * C13440 +
                        (C63570 * C1875 + C139301 * C2103) * C13351 +
                        (C63570 * C1765 + C139301 * C1773) * C13439) *
                           C139557 +
                       (C112792 + C112791 + C112790 + C112789) * C92566) *
                          C139426) *
                         C139346 * C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[108] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139530 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139426) *
                         C139346 * C139558 +
                     (((C15723 + C15722) * C139301 * C92566 +
                       (C15724 + C15725) * C139301 * C139557) *
                          C139426 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139530) *
                         C139346 * C139559 +
                     (((C13715 + C13714) * C139301 * C92566 +
                       (C17618 + C17619) * C139301 * C139557) *
                          C139530 -
                      ((C13676 * C6323 + C15712 + C15712 + C139555 * C6646 +
                        C13675 * C1765 + C15713 + C15713 + C13351 * C2185) *
                           C139301 * C139557 +
                       (C17619 + C17618) * C139301 * C92566) *
                          C139426) *
                         C139346 * C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139530 -
           ((C92703 * C6411 + C139557 * C6728 + C92702 * C4275 +
             C92566 * C4729) *
                C139555 +
            (C92703 * C6325 + C139557 * C6491 + C92702 * C4159 +
             C92566 * C4393) *
                C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139426) *
              C139346 * C139558 +
          (((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
            (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
               C139301 * C139426 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139530) *
              C139346 * C139559 +
          (((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
            (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
               C139301 * C139530 -
           ((C92703 * C6409 + C139557 * C6726 + C92702 * C4277 +
             C92566 * C4731) *
                C139555 +
            (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
             C92566 * C4395) *
                C13440 +
            (C96814 + C96813) * C13351 + (C96498 + C96497) * C13439) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezx[108] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139530 -
                      ((C69583 * C139557 + C69342 * C92703 + C67635 * C92566 +
                        C67317 * C92702) *
                           C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139426) *
                         C139346 * C139558 +
                     (((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                        C78400 * C139557) *
                           C13351 +
                       (C67318 * C92702 + C67636 * C92566 + C78061 * C92703 +
                        C78401 * C139557) *
                           C139555) *
                          C139426 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139530) *
                         C139346 * C139559 +
                     ((((C63570 * C108 + C139301 * C114) * C92702 +
                        (C63570 * C276 + C139301 * C579) * C92566 +
                        C79917 * C92703 + C80217 * C139557) *
                           C13351 +
                       (C112197 + C112198 + C112199 + C112200) * C139555) *
                          C139530 -
                      (((C63570 * C6489 + C139301 * C6803) * C139557 +
                        (C63570 * C6323 + C139301 * C6326) * C92703 +
                        C79314 * C92566 + C79013 * C92702) *
                           C139555 +
                       ((C63570 * C1989 + C139301 * C2397) * C139557 +
                        (C63570 * C1765 + C139301 * C1773) * C92703 +
                        C80217 * C92566 + C79917 * C92702) *
                           C13351) *
                          C139426) *
                         C139346 * C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139530 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139426) *
              C139346 * C139558 +
          (((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
            (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
               C139301 * C139426 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139530) *
              C139346 * C139559 +
          (((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
            (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
               C139301 * C139530 -
           ((C13440 * C6489 + C139555 * C6880 + C13439 * C1989 +
             C13351 * C2479) *
                C139557 +
            (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
             C13351 * C1875) *
                C92703 +
            (C17923 + C17922) * C92566 + (C17311 + C17310) * C92702) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[108] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139530 -
           ((C93167 * C6325 + C98336 + C98336 + C139557 * C6959 +
             C93166 * C4159 + C98335 + C98335 + C92566 * C5055) *
                C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139426) *
              C139346 * C139558 +
          (((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
               C139301 * C139426 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139530) *
              C139346 * C139559 +
          (((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) *
               C139301 * C139530 -
           ((C93167 * C6323 + C98343 + C98343 + C139557 * C6957 +
             C93166 * C4161 + C98344 + C98344 + C92566 * C5057) *
                C139555 +
            (C97130 + C97129) * C13351) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
            C77704 * C139557) *
               C13351 +
           (C64104 * C92566 + C66989 * C139557) * C139555) *
              C139362 * C139346 * C96 -
          ((C66990 * C139557 + C64107 * C92566) * C139555 +
           (C77706 * C139557 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
               C13351) *
              C139362 * C139346 * C97 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
            C79616 * C139557) *
               C13351 +
           (C65575 * C92566 + C78713 * C139557) * C139555) *
              C139362 * C139346 * C98 -
          (((C63569 * C4162 + C76092 + C76092 + C139301 * C4170) * C139557 +
            (C63569 * C833 + C63582 + C63582 + C139301 * C849) * C92566) *
               C139555 +
           ((C63569 * C1766 + C76093 + C76093 + C139301 * C1782) * C139557 +
            (C63569 * C109 + C63583 + C63583 + C139301 * C121) * C92566) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139362 * C822 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139362 * C823 +
           ((C109694 + C109693) * C13351 +
            (C64106 * C92566 + C71373 * C139557) * C139555) *
               C139362 * C824) *
              C825 +
          (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
               C139362 * C823 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139362 * C822 -
           (((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139557 +
             C64109 * C92566) *
                C139555 +
            (C109698 + C109697) * C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C63570 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C139301) *
               C92566 +
           ((C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
             C139555 * C4275) *
                C63570 +
            (C13439 * C1770 + C13351 * C1880 + C13440 * C4163 +
             C139555 * C4279) *
                C139301) *
               C139557) *
              C139362 * C139346 * C96 -
          (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
               C139557 +
           ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
               C92566) *
              C139362 * C139346 * C97 +
          (((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) * C92566 +
           ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
               C139557) *
              C139362 * C139346 * C98 -
          (((C13440 * C4166 + C139555 * C4282 + C13439 * C1774 +
             C13351 * C1884) *
                C139301 +
            (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
             C13351 * C1876) *
                C63570) *
               C139557 +
           ((C13477 + C13476) * C139301 + (C13475 + C13474) * C63570) *
               C92566) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
              C139555 * C4275) *
                 C63570 +
             (C13439 * C1770 + C13351 * C1880 + C13440 * C4163 +
              C139555 * C4279) *
                 C139301) *
                C139557) *
               C139362 * C822 -
           (((C13440 * C8595 + C139555 * C8681 + C13439 * C4163 +
              C13351 * C4279) *
                 C139301 +
             (C13440 * C8592 + C139555 * C8678 + C13439 * C4159 +
              C13351 * C4275) *
                 C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139362 * C823 +
           (((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C13439 * C838 + C13351 * C948 + C13440 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C92566 +
            ((C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
              C139555 * C24114) *
                 C63570 +
             (C13439 * C8595 + C13351 * C8681 + C13440 * C24000 +
              C139555 * C24116) *
                 C139301) *
                C139557) *
               C139362 * C824) *
              C825 +
          ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                C92566 +
            ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                C139557) *
               C139362 * C823 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139362 * C822 -
           (((C13440 * C23999 + C139555 * C24115 + C13439 * C8594 +
              C13351 * C8680) *
                 C139301 +
             (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
              C13351 * C8677) *
                 C63570) *
                C139557 +
            ((C14285 + C14284) * C139301 + (C14283 + C14282) * C63570) *
                C92566) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C63570 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C139301) *
               C13351 +
           ((C92702 * C829 + C92566 * C1053 + C92703 * C4159 +
             C139557 * C4393) *
                C63570 +
            (C92702 * C837 + C92566 * C1061 + C92703 * C4163 +
             C139557 * C4397) *
                C139301) *
               C139555) *
              C139362 * C139346 * C96 -
          (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
               C139555 +
           ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
               C13351) *
              C139362 * C139346 * C97 +
          (((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) * C13351 +
           ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
               C139555) *
              C139362 * C139346 * C98 -
          (((C92703 * C4166 + C139557 * C4400 + C92702 * C841 +
             C92566 * C1065) *
                C139301 +
            (C92703 * C4162 + C139557 * C4396 + C92702 * C833 +
             C92566 * C1057) *
                C63570) *
               C139555 +
           ((C92740 + C92739) * C139301 + (C92738 + C92737) * C63570) *
               C13351) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139362 * C822 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139362 * C823 +
           (((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
                C13351 +
            ((C92702 * C5803 + C92566 * C5921 + C92703 * C23998 +
              C139557 * C24216) *
                 C63570 +
             (C92702 * C5806 + C92566 * C5924 + C92703 * C24000 +
              C139557 * C24218) *
                 C139301) *
                C139555) *
               C139362 * C824) *
              C825 +
          ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                C13351 +
            ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                C139555) *
               C139362 * C823 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139362 * C822 -
           (((C92703 * C23999 + C139557 * C24217 + C92702 * C5805 +
              C92566 * C5923) *
                 C139301 +
             (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
              C92566 * C5920) *
                 C63570) *
                C139555 +
            ((C93526 + C93525) * C139301 + (C93524 + C93523) * C63570) *
                C13351) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[109] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C13439 +
                       (C63570 * C187 + C139301 * C360) * C13351 +
                       C64376 * C13440 + C64377 * C139555) *
                          C92566 +
                      (C78053 * C13439 + C78054 * C13351 + C67317 * C13440 +
                       C67316 * C139555) *
                          C139557) *
                         C139362 * C139346 * C96 -
                     ((C67319 * C139555 + C67318 * C13440 + C78058 * C13351 +
                       C78057 * C13439) *
                          C139557 +
                      (C64383 * C139555 + C64382 * C13440 +
                       (C63570 * C188 + C139301 * C361) * C13351 +
                       (C63570 * C107 + C139301 * C113) * C13439) *
                          C92566) *
                         C139362 * C139346 * C97 +
                     (((C63570 * C108 + C139301 * C114) * C13439 +
                       (C63570 * C189 + C139301 * C362) * C13351 +
                       C65813 * C13440 + C65814 * C139555) *
                          C92566 +
                      (C79917 * C13439 + C79918 * C13351 + C79013 * C13440 +
                       C79014 * C139555) *
                          C139557) *
                         C139362 * C139346 * C98 -
                     (((C63570 * C4278 + C139301 * C4514) * C139555 +
                       (C63570 * C4162 + C139301 * C4166) * C13440 +
                       (C63570 * C1876 + C139301 * C2104) * C13351 +
                       (C63570 * C1766 + C139301 * C1774) * C13439) *
                          C139557 +
                      ((C63570 * C943 + C139301 * C1171) * C139555 +
                       (C63570 * C833 + C139301 * C841) * C13440 +
                       (C63570 * C190 + C139301 * C363) * C13351 +
                       (C63570 * C109 + C139301 * C115) * C13439) *
                          C92566) *
                         C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C78053 * C13439 + C78054 * C13351 + C67317 * C13440 +
                        C67316 * C139555) *
                           C139557) *
                          C139362 * C822 -
                      ((C67314 * C139555 + C67315 * C13440 + C67316 * C13351 +
                        C67317 * C13439) *
                           C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139362 * C823 +
                      ((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                        C64380 * C139555) *
                           C92566 +
                       (C67315 * C13439 + C67314 * C13351 + C71615 * C13440 +
                        C71616 * C139555) *
                           C139557) *
                          C139362 * C824) *
                         C825 +
                     (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                        C64385 * C139555) *
                           C92566 +
                       (C67318 * C13439 + C67319 * C13351 + C67320 * C13440 +
                        C67321 * C139555) *
                           C139557) *
                          C139362 * C823 -
                      ((C67319 * C139555 + C67318 * C13440 + C78058 * C13351 +
                        C78057 * C13439) *
                           C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139362 * C822 -
                      (((C63570 * C24113 + C139301 * C24327) * C139555 +
                        (C63570 * C23997 + C139301 * C23999) * C13440 +
                        C67321 * C13351 + C67320 * C13439) *
                           C139557 +
                       (C64387 * C139555 + C64386 * C13440 + C64385 * C13351 +
                        C64384 * C13439) *
                           C92566) *
                          C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[109] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C139301 * C92566 +
                      (C13675 * C1762 + C15701 + C15701 + C13351 * C2182 +
                       C13676 * C4159 + C15700 + C15700 + C139555 * C4613) *
                          C139301 * C139557) *
                         C139362 * C139346 * C96 -
                     ((C15722 + C15723) * C139301 * C139557 +
                      (C13713 + C13712) * C139301 * C92566) *
                         C139362 * C139346 * C97 +
                     ((C13715 + C13714) * C139301 * C92566 +
                      (C17618 + C17619) * C139301 * C139557) *
                         C139362 * C139346 * C98 -
                     ((C13676 * C4162 + C17612 + C17612 + C139555 * C4616 +
                       C13675 * C1766 + C17613 + C17613 + C13351 * C2186) *
                          C139301 * C139557 +
                      (C13717 + C13716) * C139301 * C92566) *
                         C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C13675 * C1762 + C15701 + C15701 + C13351 * C2182 +
                        C13676 * C4159 + C15700 + C15700 + C139555 * C4613) *
                           C139301 * C139557) *
                          C139362 * C822 -
                      ((C13676 * C8592 + C18755 + C18755 + C139555 * C8915 +
                        C13675 * C4159 + C18754 + C18754 + C13351 * C4613) *
                           C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139362 * C823 +
                      ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                        C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                           C139301 * C92566 +
                       (C13675 * C8592 + C24445 + C24445 + C13351 * C8915 +
                        C13676 * C23998 + C24444 + C24444 + C139555 * C24440) *
                           C139301 * C139557) *
                          C139362 * C824) *
                         C825 +
                     (((C14691 + C14690) * C139301 * C92566 +
                       (C18768 + C18769) * C139301 * C139557) *
                          C139362 * C823 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139362 * C822 -
                      ((C13676 * C23997 + C24442 + C24442 + C139555 * C24439 +
                        C13675 * C8591 + C24443 + C24443 + C13351 * C8914) *
                           C139301 * C139557 +
                       (C14693 + C14692) * C139301 * C92566) *
                          C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C13439 +
           (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
               C13351 +
           (C92702 * C829 + C92566 * C1053 + C92703 * C4159 + C139557 * C4393) *
               C13440 +
           (C92702 * C939 + C92566 * C1359 + C92703 * C4275 + C139557 * C4729) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
           (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
              C139301 * C139362 * C139346 * C97 +
          ((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
           (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
              C139301 * C139362 * C139346 * C98 -
          ((C92703 * C4278 + C139557 * C4732 + C92702 * C943 + C92566 * C1363) *
               C139555 +
           (C92703 * C4162 + C139557 * C4396 + C92702 * C833 + C92566 * C1057) *
               C13440 +
           (C92956 + C92955) * C13351 + (C92738 + C92737) * C13439) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139362 * C822 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139362 * C823 +
           ((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
            (C92702 * C5803 + C92566 * C5921 + C92703 * C23998 +
             C139557 * C24216) *
                C13440 +
            (C92702 * C5865 + C92566 * C6086 + C92703 * C24114 +
             C139557 * C24544) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
            (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
               C139301 * C139362 * C823 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139362 * C822 -
           ((C92703 * C24113 + C139557 * C24543 + C92702 * C5864 +
             C92566 * C6085) *
                C139555 +
            (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
             C92566 * C5920) *
                C13440 +
            (C93832 + C93831) * C13351 + (C93524 + C93523) * C13439) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[109] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C92702 +
                       (C63570 * C274 + C139301 * C577) * C92566 +
                       C78053 * C92703 + C78397 * C139557) *
                          C13351 +
                      (C64376 * C92702 + C64640 * C92566 + C67317 * C92703 +
                       C67635 * C139557) *
                          C139555) *
                         C139362 * C139346 * C96 -
                     ((C67636 * C139557 + C67318 * C92703 + C64643 * C92566 +
                       C64382 * C92702) *
                          C139555 +
                      (C78399 * C139557 + C78057 * C92703 +
                       (C63570 * C275 + C139301 * C578) * C92566 +
                       (C63570 * C107 + C139301 * C113) * C92702) *
                          C13351) *
                         C139362 * C139346 * C97 +
                     (((C63570 * C108 + C139301 * C114) * C92702 +
                       (C63570 * C276 + C139301 * C579) * C92566 +
                       C79917 * C92703 + C80217 * C139557) *
                          C13351 +
                      (C65813 * C92702 + C66048 * C92566 + C79013 * C92703 +
                       C79314 * C139557) *
                          C139555) *
                         C139362 * C139346 * C98 -
                     (((C63570 * C4396 + C139301 * C4844) * C139557 +
                       (C63570 * C4162 + C139301 * C4166) * C92703 +
                       (C63570 * C1057 + C139301 * C1465) * C92566 +
                       (C63570 * C833 + C139301 * C841) * C92702) *
                          C139555 +
                      ((C63570 * C1990 + C139301 * C2398) * C139557 +
                       (C63570 * C1766 + C139301 * C1774) * C92703 +
                       (C63570 * C277 + C139301 * C580) * C92566 +
                       (C63570 * C109 + C139301 * C115) * C92702) *
                          C13351) *
                         C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139362 * C822 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139362 * C823 +
                      ((C110330 + C110329 + C110328 + C110327) * C13351 +
                       (C64381 * C92702 + C64642 * C92566 + C71615 * C92703 +
                        C71852 * C139557) *
                           C139555) *
                          C139362 * C824) *
                         C825 +
                     (((C110331 + C110332 + C110333 + C110334) * C13351 +
                       (C110335 + C110336 + C110337 + C110338) * C139555) *
                          C139362 * C823 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139362 * C822 -
                      (((C63570 * C24215 + C139301 * C24646) * C139557 +
                        (C63570 * C23997 + C139301 * C23999) * C92703 +
                        C64645 * C92566 + C64386 * C92702) *
                           C139555 +
                       (C110338 + C110337 + C110336 + C110335) * C13351) *
                          C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eezy[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C92702 +
           (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
               C92566 +
           (C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
            C139555 * C4275) *
               C92703 +
           (C13439 * C1986 + C13351 * C2476 + C13440 * C4393 +
            C139555 * C4943) *
               C139557) *
              C139301 * C139362 * C139346 * C96 -
          ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
           (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
              C139301 * C139362 * C139346 * C97 +
          ((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
           (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
              C139301 * C139362 * C139346 * C98 -
          ((C13440 * C4396 + C139555 * C4946 + C13439 * C1990 +
            C13351 * C2480) *
               C139557 +
           (C13440 * C4162 + C139555 * C4278 + C13439 * C1766 +
            C13351 * C1876) *
               C92703 +
           (C13945 + C13944) * C92566 + (C13475 + C13474) * C92702) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C13439 * C1762 + C13351 * C1872 + C13440 * C4159 +
             C139555 * C4275) *
                C92703 +
            (C13439 * C1986 + C13351 * C2476 + C13440 * C4393 +
             C139555 * C4943) *
                C139557) *
               C139301 * C139362 * C822 -
           ((C13440 * C8758 + C139555 * C9149 + C13439 * C4393 +
             C13351 * C4943) *
                C139557 +
            (C13440 * C8592 + C139555 * C8678 + C13439 * C4159 +
             C13351 * C4275) *
                C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139362 * C823 +
           ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C92702 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C92566 +
            (C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
             C139555 * C24114) *
                C92703 +
            (C13439 * C8758 + C13351 * C9149 + C13440 * C24216 +
             C139555 * C24753) *
                C139557) *
               C139301 * C139362 * C824) *
              C825 +
          (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
            (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
               C139301 * C139362 * C823 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139362 * C822 -
           ((C13440 * C24215 + C139555 * C24752 + C13439 * C8757 +
             C13351 * C9148) *
                C139557 +
            (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
             C13351 * C8677) *
                C92703 +
            (C15040 + C15039) * C92566 + (C14283 + C14282) * C92702) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[109] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
            C93170 + C93170 + C139557 * C2578) *
               C13351 +
           (C93166 * C829 + C94142 + C94142 + C92566 * C1645 + C93167 * C4159 +
            C94141 + C94141 + C139557 * C5055) *
               C139555) *
              C139301 * C139362 * C139346 * C96 -
          ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) * C139301 *
              C139362 * C139346 * C97 +
          ((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) * C139301 *
              C139362 * C139346 * C98 -
          ((C93167 * C4162 + C96171 + C96171 + C139557 * C5058 + C93166 * C833 +
            C96172 + C96172 + C92566 * C1649) *
               C139555 +
           (C93208 + C93207) * C13351) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139362 * C822 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139362 * C823 +
           ((C110554 + C110553) * C13351 +
            (C93166 * C5803 + C99830 + C99830 + C92566 * C6245 +
             C93167 * C23998 + C99829 + C99829 + C139557 * C24853) *
                C139555) *
               C139301 * C139362 * C824) *
              C825 +
          (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
               C139301 * C139362 * C823 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139362 * C822 -
           ((C93167 * C23997 + C99827 + C99827 + C139557 * C24852 +
             C93166 * C5802 + C99828 + C99828 + C92566 * C6244) *
                C139555 +
            (C94166 + C94165) * C13351) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139362 * C139560 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139362 * C139561 +
           ((C109694 + C109693) * C13351 + (C115477 + C115478) * C139555) *
               C139362 * C7039) *
              C139521 +
          (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
               C139362 * C139561 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139362 * C139560 -
           (((C63569 * C23997 + C66979 + C66979 + C139301 * C24001) * C139557 +
             C64109 * C92566) *
                C139555 +
            (C109698 + C109697) * C13351) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139362 * C139560 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139362 * C139561 +
           (((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C13439 * C838 + C13351 * C948 + C13440 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C92566 +
            ((C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
              C139555 * C24114) *
                 C63570 +
             (C13439 * C8595 + C13351 * C8681 + C13440 * C24000 +
              C139555 * C24116) *
                 C139301) *
                C139557) *
               C139362 * C7039) *
              C139521 +
          ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                C92566 +
            ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                C139557) *
               C139362 * C139561 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139362 * C139560 -
           (((C13440 * C23999 + C139555 * C24115 + C13439 * C8594 +
              C13351 * C8680) *
                 C139301 +
             (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
              C13351 * C8677) *
                 C63570) *
                C139557 +
            ((C14285 + C14284) * C139301 + (C14283 + C14282) * C63570) *
                C92566) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139362 * C139560 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139362 * C139561 +
           (((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
                C13351 +
            ((C115619 + C115620) * C63570 + (C115621 + C115622) * C139301) *
                C139555) *
               C139362 * C7039) *
              C139521 +
          ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                C13351 +
            ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                C139555) *
               C139362 * C139561 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139362 * C139560 -
           (((C92703 * C23999 + C139557 * C24217 + C92702 * C5805 +
              C92566 * C5923) *
                 C139301 +
             (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
              C92566 * C5920) *
                 C63570) *
                C139555 +
            ((C93526 + C93525) * C139301 + (C93524 + C93523) * C63570) *
                C13351) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[110] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139362 * C139560 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139362 * C139561 +
                      ((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                        C64380 * C139555) *
                           C92566 +
                       (C67315 * C13439 + C67314 * C13351 + C71615 * C13440 +
                        C71616 * C139555) *
                           C139557) *
                          C139362 * C7039) *
                         C139521 +
                     (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                        C64385 * C139555) *
                           C92566 +
                       (C113835 + C113836 + C113837 + C113838) * C139557) *
                          C139362 * C139561 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139362 * C139560 -
                      (((C63570 * C24113 + C139301 * C24327) * C139555 +
                        (C63570 * C23997 + C139301 * C23999) * C13440 +
                        C67321 * C13351 + C67320 * C13439) *
                           C139557 +
                       (C64387 * C139555 + C64386 * C13440 + C64385 * C13351 +
                        C64384 * C13439) *
                           C92566) *
                          C139362 * C7039) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[110] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139362 * C139560 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139362 * C139561 +
                      ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                        C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                           C139301 * C92566 +
                       (C13675 * C8592 + C24445 + C24445 + C13351 * C8915 +
                        C13676 * C23998 + C24444 + C24444 + C139555 * C24440) *
                           C139301 * C139557) *
                          C139362 * C7039) *
                         C139521 +
                     (((C14691 + C14690) * C139301 * C92566 +
                       (C18768 + C18769) * C139301 * C139557) *
                          C139362 * C139561 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139362 * C139560 -
                      ((C13676 * C23997 + C24442 + C24442 + C139555 * C24439 +
                        C13675 * C8591 + C24443 + C24443 + C13351 * C8914) *
                           C139301 * C139557 +
                       (C14693 + C14692) * C139301 * C92566) *
                          C139362 * C7039) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139362 * C139560 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139362 * C139561 +
           ((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
            (C115619 + C115620) * C13440 + (C115827 + C115828) * C139555) *
               C139301 * C139362 * C7039) *
              C139521 +
          (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
            (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
               C139301 * C139362 * C139561 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139362 * C139560 -
           ((C92703 * C24113 + C139557 * C24543 + C92702 * C5864 +
             C92566 * C6085) *
                C139555 +
            (C92703 * C23997 + C139557 * C24215 + C92702 * C5802 +
             C92566 * C5920) *
                C13440 +
            (C93832 + C93831) * C13351 + (C93524 + C93523) * C13439) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[110] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139362 * C139560 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139362 * C139561 +
                      ((C110330 + C110329 + C110328 + C110327) * C13351 +
                       (C115895 + C115896 + C115897 + C115898) * C139555) *
                          C139362 * C7039) *
                         C139521 +
                     (((C110331 + C110332 + C110333 + C110334) * C13351 +
                       (C110335 + C110336 + C110337 + C110338) * C139555) *
                          C139362 * C139561 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139362 * C139560 -
                      (((C63570 * C24215 + C139301 * C24646) * C139557 +
                        (C63570 * C23997 + C139301 * C23999) * C92703 +
                        C64645 * C92566 + C64386 * C92702) *
                           C139555 +
                       (C110338 + C110337 + C110336 + C110335) * C13351) *
                          C139362 * C7039) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139362 * C139560 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139362 * C139561 +
           ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C92702 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C92566 +
            (C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
             C139555 * C24114) *
                C92703 +
            (C13439 * C8758 + C13351 * C9149 + C13440 * C24216 +
             C139555 * C24753) *
                C139557) *
               C139301 * C139362 * C7039) *
              C139521 +
          (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
            (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
               C139301 * C139362 * C139561 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139362 * C139560 -
           ((C13440 * C24215 + C139555 * C24752 + C13439 * C8757 +
             C13351 * C9148) *
                C139557 +
            (C13440 * C23997 + C139555 * C24113 + C13439 * C8591 +
             C13351 * C8677) *
                C92703 +
            (C15040 + C15039) * C92566 + (C14283 + C14282) * C92702) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[110] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139362 * C139560 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139362 * C139561 +
           ((C110554 + C110553) * C13351 + (C116041 + C116042) * C139555) *
               C139301 * C139362 * C7039) *
              C139521 +
          (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
               C139301 * C139362 * C139561 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139362 * C139560 -
           ((C93167 * C23997 + C99827 + C99827 + C139557 * C24852 +
             C93166 * C5802 + C99828 + C99828 + C92566 * C6244) *
                C139555 +
            (C94166 + C94165) * C13351) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139530 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139426) *
              C139560 +
          (((C113414 + C113413) * C13351 + (C119145 + C119146) * C139555) *
               C139426 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139530) *
              C139561 +
          (((C109694 + C109693) * C13351 + (C115477 + C115478) * C139555) *
               C139530 -
           (((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139557 +
             C71373 * C92566) *
                C139555 +
            (C119146 + C119145) * C13351) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139530 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139426) *
              C139560 +
          ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                C92566 +
            ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                C139557) *
               C139426 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139530) *
              C139561 +
          ((((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C13439 * C838 + C13351 * C948 + C13440 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C92566 +
            ((C119253 + C119254) * C63570 + (C119255 + C119256) * C139301) *
                C139557) *
               C139530 -
           (((C13440 * C69081 + C139555 * C69171 + C13439 * C20986 +
              C13351 * C21102) *
                 C139301 +
             (C13440 * C69080 + C139555 * C69170 + C13439 * C20984 +
              C13351 * C21100) *
                 C63570) *
                C139557 +
            ((C119256 + C119255) * C139301 + (C119254 + C119253) * C63570) *
                C92566) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139530 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139426) *
              C139560 +
          ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                C13351 +
            ((C119363 + C119364) * C63570 + (C119365 + C119366) * C139301) *
                C139555) *
               C139426 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139530) *
              C139561 +
          ((((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
                C13351 +
            ((C115619 + C115620) * C63570 + (C115621 + C115622) * C139301) *
                C139555) *
               C139530 -
           (((C92703 * C69081 + C139557 * C69247 + C92702 * C24000 +
              C92566 * C24218) *
                 C139301 +
             (C92703 * C69080 + C139557 * C69246 + C92702 * C23998 +
              C92566 * C24216) *
                 C63570) *
                C139555 +
            ((C119366 + C119365) * C139301 + (C119364 + C119363) * C63570) *
                C13351) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[111] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139530 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139426) *
                         C139560 +
                     (((C113831 + C113832 + C113833 + C113834) * C92566 +
                       (C116461 + C116462 + C116463 + C116464) * C139557) *
                          C139426 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139530) *
                         C139561 +
                     (((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                        C64380 * C139555) *
                           C92566 +
                       (C119465 + C119466 + C119467 + C119468) * C139557) *
                          C139530 -
                      (((C63570 * C69170 + C139301 * C69332) * C139555 +
                        (C63570 * C69080 + C139301 * C69081) * C13440 +
                        C69345 * C13351 + C69344 * C13439) *
                           C139557 +
                       (C119468 + C119467 + C119466 + C119465) * C92566) *
                          C139426) *
                         C7039) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[111] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139530 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139426) *
                         C139560 +
                     (((C113977 + C113978) * C139301 * C92566 +
                       (C116573 + C116574) * C139301 * C139557) *
                          C139426 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139530) *
                         C139561 +
                     (((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                        C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                           C139301 * C92566 +
                       (C119577 + C119578) * C139301 * C139557) *
                          C139530 -
                      ((C13676 * C69080 + C119571 + C119571 + C139555 * C69419 +
                        C13675 * C20984 + C119572 + C119572 + C13351 * C21426) *
                           C139301 * C139557 +
                       (C119578 + C119577) * C139301 * C92566) *
                          C139426) *
                         C7039) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139530 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139426) *
              C139560 +
          (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
            (C119363 + C119364) * C13440 + (C119681 + C119682) * C139555) *
               C139301 * C139426 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139530) *
              C139561 +
          (((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
            (C115619 + C115620) * C13440 + (C115827 + C115828) * C139555) *
               C139301 * C139530 -
           ((C92703 * C69170 + C139557 * C69497 + C92702 * C24114 +
             C92566 * C24544) *
                C139555 +
            (C92703 * C69080 + C139557 * C69246 + C92702 * C23998 +
             C92566 * C24216) *
                C13440 +
            (C119682 + C119681) * C13351 + (C119364 + C119363) * C13439) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[111] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139530 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139426) *
                         C139560 +
                     (((C114248 + C114247 + C114246 + C114245) * C13351 +
                       (C119781 + C119782 + C119783 + C119784) * C139555) *
                          C139426 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139530) *
                         C139561 +
                     (((C110330 + C110329 + C110328 + C110327) * C13351 +
                       (C115895 + C115896 + C115897 + C115898) * C139555) *
                          C139530 -
                      (((C63570 * C69246 + C139301 * C69575) * C139557 +
                        (C63570 * C69080 + C139301 * C69081) * C92703 +
                        C71852 * C92566 + C71615 * C92702) *
                           C139555 +
                       (C119784 + C119783 + C119782 + C119781) * C13351) *
                          C139426) *
                         C7039) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eezy[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139530 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139426) *
              C139560 +
          (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
            (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
               C139301 * C139426 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139530) *
              C139561 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C92702 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C92566 +
            (C119253 + C119254) * C92703 + (C119887 + C119888) * C139557) *
               C139301 * C139530 -
           ((C13440 * C69246 + C139555 * C69660 + C13439 * C21202 +
             C13351 * C21739) *
                C139557 +
            (C13440 * C69080 + C139555 * C69170 + C13439 * C20984 +
             C13351 * C21100) *
                C92703 +
            (C119888 + C119887) * C92566 + (C119254 + C119253) * C92702) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[111] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139530 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139426) *
              C139560 +
          (((C114528 + C114527) * C13351 + (C119997 + C119998) * C139555) *
               C139301 * C139426 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139530) *
              C139561 +
          (((C110554 + C110553) * C13351 + (C116041 + C116042) * C139555) *
               C139301 * C139530 -
           ((C93167 * C69080 + C119991 + C119991 + C139557 * C69735 +
             C93166 * C23998 + C119992 + C119992 + C92566 * C24853) *
                C139555 +
            (C119998 + C119997) * C13351) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
            C77704 * C139557) *
               C13351 +
           (C109691 + C109692) * C139555) *
              C139362 * C5796 -
          ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
              C139362 * C5797 +
          ((C109694 + C109693) * C13351 + (C115477 + C115478) * C139555) *
              C139362 * C5798 -
          (((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139557 +
            C68562 * C92566) *
               C139555 +
           (C115478 + C115477) * C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139362 * C5149 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139362 * C139398) *
              C5151 +
          (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
               C139362 * C139398 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
             C79616 * C139557) *
                C13351 +
            (C111607 + C111608) * C139555) *
               C139362 * C5149 -
           (((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139557 +
             C65576 * C92566) *
                C139555 +
            (C111608 + C111607) * C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C1757 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C1758 +
           ((C77705 * C92566 + C88983 * C139557) * C13351 +
            (C116141 + C116142) * C139555) *
               C1759) *
              C5149 +
          (((C113414 + C113413) * C13351 +
            (C66988 * C92566 + C69094 * C139557) * C139555) *
               C1758 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C1757 -
           (((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C139557 +
             C69094 * C92566) *
                C139555 +
            (C116142 + C116141) * C13351) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C63570 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C139301) *
               C92566 +
           ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
               C139557) *
              C139362 * C5796 -
          (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
               C139557 +
           ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C139301 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C63570) *
               C92566) *
              C139362 * C5797 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C63570 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C139301) *
               C92566 +
           ((C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
             C139555 * C24114) *
                C63570 +
            (C13439 * C8595 + C13351 * C8681 + C13440 * C24000 +
             C139555 * C24116) *
                C139301) *
               C139557) *
              C139362 * C5798 -
          (((C13440 * C71365 + C139555 * C71449 + C13439 * C24000 +
             C13351 * C24116) *
                C139301 +
            (C13440 * C71364 + C139555 * C71448 + C13439 * C23998 +
             C13351 * C24114) *
                C63570) *
               C139557 +
           ((C13440 * C20280 + C139555 * C20364 + C13439 * C5806 +
             C13351 * C5868) *
                C139301 +
            (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
             C13351 * C5865) *
                C63570) *
               C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139362 * C139398) *
              C5151 +
          ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                C92566 +
            ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                C139557) *
               C139362 * C139398 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139362 * C5149) *
              C5152 +
          ((((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) *
                C92566 +
            ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C13440 * C8593 + C139555 * C8679 + C13439 * C4165 +
              C13351 * C4281) *
                 C139301 +
             (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
              C13351 * C4277) *
                 C63570) *
                C139557 +
            ((C16369 + C16368) * C139301 + (C16367 + C16366) * C63570) *
                C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C1757 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C1758 +
           (((C110774 + C110773) * C63570 + (C110772 + C110771) * C139301) *
                C92566 +
            ((C13439 * C10620 + C13351 * C10682 + C13440 * C26692 +
              C139555 * C26768) *
                 C63570 +
             (C13439 * C10623 + C13351 * C10685 + C13440 * C26694 +
              C139555 * C26770) *
                 C139301) *
                C139557) *
               C1759) *
              C5149 +
          ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                C92566 +
            ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                C139557) *
               C1758 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C1757 -
           (((C13440 * C73392 + C139555 * C73448 + C13439 * C26694 +
              C13351 * C26770) *
                 C139301 +
             (C13440 * C73391 + C139555 * C73447 + C13439 * C26692 +
              C13351 * C26768) *
                 C63570) *
                C139557 +
            ((C116252 + C116251) * C139301 + (C116250 + C116249) * C63570) *
                C92566) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[112] +=
        (-std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C63570 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C139301) *
               C13351 +
           ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
               C139555) *
              C139362 * C5796 -
          (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
               C139555 +
           ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
               C13351) *
              C139362 * C5797 +
          (((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
               C13351 +
           ((C115619 + C115620) * C63570 + (C115621 + C115622) * C139301) *
               C139555) *
              C139362 * C5798 -
          (((C92703 * C71365 + C139557 * C71525 + C92702 * C20280 +
             C92566 * C20434) *
                C139301 +
            (C92703 * C71364 + C139557 * C71524 + C92702 * C20278 +
             C92566 * C20432) *
                C63570) *
               C139555 +
           ((C115622 + C115621) * C139301 + (C115620 + C115619) * C63570) *
               C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139362 * C139398) *
              C5151 +
          ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                C13351 +
            ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                C139555) *
               C139362 * C139398 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          ((((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) *
                C13351 +
            ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C92703 * C8593 + C139557 * C8759 + C92702 * C840 +
              C92566 * C1064) *
                 C139301 +
             (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
              C92566 * C1056) *
                 C63570) *
                C139555 +
            ((C95568 + C95567) * C139301 + (C95566 + C95565) * C63570) *
                C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C1757 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C1758 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C13351 +
            ((C116359 + C116360) * C63570 + (C116361 + C116362) * C139301) *
                C139555) *
               C1759) *
              C5149 +
          ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                C13351 +
            ((C92702 * C8592 + C92566 * C8758 + C92703 * C20984 +
              C139557 * C21202) *
                 C63570 +
             (C92702 * C8595 + C92566 * C8761 + C92703 * C20986 +
              C139557 * C21204) *
                 C139301) *
                C139555) *
               C1758 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C1757 -
           (((C92703 * C73392 + C139557 * C73500 + C92702 * C20986 +
              C92566 * C21204) *
                 C139301 +
             (C92703 * C73391 + C139557 * C73499 + C92702 * C20984 +
              C92566 * C21202) *
                 C63570) *
                C139555 +
            ((C116362 + C116361) * C139301 + (C116360 + C116359) * C63570) *
                C13351) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[112] += (-std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C13439 +
                       (C63570 * C187 + C139301 * C360) * C13351 +
                       C64376 * C13440 + C64377 * C139555) *
                          C92566 +
                      (C110971 + C110972 + C110973 + C110974) * C139557) *
                         C139362 * C5796 -
                     ((C113834 + C113833 + C113832 + C113831) * C139557 +
                      (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                       C64376 * C13439) *
                          C92566) *
                         C139362 * C5797 +
                     ((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                       C64380 * C139555) *
                          C92566 +
                      (C67315 * C13439 + C67314 * C13351 + C71615 * C13440 +
                       C71616 * C139555) *
                          C139557) *
                         C139362 * C5798 -
                     (((C63570 * C71448 + C139301 * C71609) * C139555 +
                       (C63570 * C71364 + C139301 * C71365) * C13440 +
                       C71616 * C13351 + C71615 * C13439) *
                          C139557 +
                      (C68733 * C139555 + C68732 * C13440 + C64380 * C13351 +
                       C64381 * C13439) *
                          C92566) *
                         C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139362 * C5149 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139362 * C139398) *
                         C5151 +
                     (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                        C64385 * C139555) *
                           C92566 +
                       (C113835 + C113836 + C113837 + C113838) * C139557) *
                          C139362 * C139398 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139362 * C5149) *
                         C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C13439 +
                        (C63570 * C189 + C139301 * C362) * C13351 +
                        C65813 * C13440 + C65814 * C139555) *
                           C92566 +
                       (C112789 + C112790 + C112791 + C112792) * C139557) *
                          C139362 * C5149 -
                      (((C63570 * C8676 + C139301 * C8836) * C139555 +
                        (C63570 * C8590 + C139301 * C8593) * C13440 +
                        C79014 * C13351 + C79013 * C13439) *
                           C139557 +
                       (C65816 * C139555 + C65815 * C13440 + C65814 * C13351 +
                        C65813 * C13439) *
                           C92566) *
                          C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C1757 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C1758 +
                      ((C110978 + C110977 + C110976 + C110975) * C92566 +
                       (C89205 * C13439 + C89206 * C13351 + C83605 * C13440 +
                        C83606 * C139555) *
                           C139557) *
                          C1759) *
                         C5149 +
                     (((C113831 + C113832 + C113833 + C113834) * C92566 +
                       (C116461 + C116462 + C116463 + C116464) * C139557) *
                          C1758 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C1757 -
                      (((C63570 * C73447 + C139301 * C73551) * C139555 +
                        (C63570 * C73391 + C139301 * C73392) * C13440 +
                        C83606 * C13351 + C83605 * C13439) *
                           C139557 +
                       (C116464 + C116463 + C116462 + C116461) * C92566) *
                          C1759) *
                         C139398) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[112] += (-std::pow(Pi, 2.5) *
                    (((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C139301 * C92566 +
                      (C111101 + C111102) * C139301 * C139557) *
                         C139362 * C5796 -
                     ((C113978 + C113977) * C139301 * C139557 +
                      (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                       C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                          C139301 * C92566) *
                         C139362 * C5797 +
                     ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                       C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                          C139301 * C92566 +
                      (C13675 * C8592 + C24445 + C24445 + C13351 * C8915 +
                       C13676 * C23998 + C24444 + C24444 + C139555 * C24440) *
                          C139301 * C139557) *
                         C139362 * C5798 -
                     ((C13676 * C71364 + C115755 + C115755 + C139555 * C71690 +
                       C13675 * C23998 + C115756 + C115756 + C13351 * C24440) *
                          C139301 * C139557 +
                      (C13676 * C20278 + C20596 + C20596 + C139555 * C20592 +
                       C13675 * C5803 + C20597 + C20597 + C13351 * C6030) *
                          C139301 * C92566) *
                         C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139362 * C5149 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139362 * C139398) *
                         C5151 +
                     (((C14691 + C14690) * C139301 * C92566 +
                       (C18768 + C18769) * C139301 * C139557) *
                          C139362 * C139398 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139362 * C5149) *
                         C5152 +
                     (((C13715 + C13714) * C139301 * C92566 +
                       (C17618 + C17619) * C139301 * C139557) *
                          C139362 * C5149 -
                      ((C13676 * C8590 + C18762 + C18762 + C139555 * C8913 +
                        C13675 * C4161 + C18763 + C18763 + C13351 * C4615) *
                           C139301 * C139557 +
                       (C16691 + C16690) * C139301 * C92566) *
                          C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C1757 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C1758 +
                      ((C111104 + C111103) * C139301 * C92566 +
                       (C13675 * C10620 + C26981 + C26981 + C13351 * C10847 +
                        C13676 * C26692 + C26980 + C26980 + C139555 * C26976) *
                           C139301 * C139557) *
                          C1759) *
                         C5149 +
                     (((C113977 + C113978) * C139301 * C92566 +
                       (C116573 + C116574) * C139301 * C139557) *
                          C1758 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C1757 -
                      ((C13676 * C73391 + C116567 + C116567 + C139555 * C73602 +
                        C13675 * C26692 + C116568 + C116568 + C13351 * C26976) *
                           C139301 * C139557 +
                       (C116574 + C116573) * C139301 * C92566) *
                          C1759) *
                         C139398) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[112] +=
        (-std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C13439 +
           (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
               C13351 +
           (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
              C139301 * C139362 * C5796 -
          ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
           (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
              C139301 * C139362 * C5797 +
          ((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
           (C115619 + C115620) * C13440 + (C115827 + C115828) * C139555) *
              C139301 * C139362 * C5798 -
          ((C92703 * C71448 + C139557 * C71768 + C92702 * C20362 +
            C92566 * C20664) *
               C139555 +
           (C92703 * C71364 + C139557 * C71524 + C92702 * C20278 +
            C92566 * C20432) *
               C13440 +
           (C115828 + C115827) * C13351 + (C115620 + C115619) * C13439) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139362 * C5149 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
            (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
               C139301 * C139362 * C139398 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
            (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
               C139301 * C139362 * C5149 -
           ((C92703 * C8676 + C139557 * C8993 + C92702 * C942 +
             C92566 * C1362) *
                C139555 +
            (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
             C92566 * C1056) *
                C13440 +
            (C95868 + C95867) * C13351 + (C95566 + C95565) * C13439) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C1757 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C1758 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C13439 +
            (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
             C139557 * C10903) *
                C13351 +
            (C116359 + C116360) * C13440 + (C116677 + C116678) * C139555) *
               C139301 * C1759) *
              C5149 +
          (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
            (C92702 * C8592 + C92566 * C8758 + C92703 * C20984 +
             C139557 * C21202) *
                C13440 +
            (C92702 * C8678 + C92566 * C8995 + C92703 * C21100 +
             C139557 * C21530) *
                C139555) *
               C139301 * C1758 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C1757 -
           ((C92703 * C73447 + C139557 * C73656 + C92702 * C21100 +
             C92566 * C21530) *
                C139555 +
            (C92703 * C73391 + C139557 * C73499 + C92702 * C20984 +
             C92566 * C21202) *
                C13440 +
            (C116678 + C116677) * C13351 + (C116360 + C116359) * C13439) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[112] += (-std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C92702 +
                       (C63570 * C274 + C139301 * C577) * C92566 +
                       C78053 * C92703 + C78397 * C139557) *
                          C13351 +
                      (C110323 + C110324 + C110325 + C110326) * C139555) *
                         C139362 * C5796 -
                     ((C110327 + C110328 + C110329 + C110330) * C139555 +
                      (C110326 + C110325 + C110324 + C110323) * C13351) *
                         C139362 * C5797 +
                     ((C110330 + C110329 + C110328 + C110327) * C13351 +
                      (C115895 + C115896 + C115897 + C115898) * C139555) *
                         C139362 * C5798 -
                     (((C63570 * C71524 + C139301 * C71846) * C139557 +
                       (C63570 * C71364 + C139301 * C71365) * C92703 +
                       C68897 * C92566 + C68732 * C92702) *
                          C139555 +
                      (C115898 + C115897 + C115896 + C115895) * C13351) *
                         C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139362 * C5149 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139362 * C139398) *
                         C5151 +
                     (((C110331 + C110332 + C110333 + C110334) * C13351 +
                       (C110335 + C110336 + C110337 + C110338) * C139555) *
                          C139362 * C139398 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139362 * C5149) *
                         C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C92702 +
                        (C63570 * C276 + C139301 * C579) * C92566 +
                        C79917 * C92703 + C80217 * C139557) *
                           C13351 +
                       (C112197 + C112198 + C112199 + C112200) * C139555) *
                          C139362 * C5149 -
                      (((C63570 * C8756 + C139301 * C9070) * C139557 +
                        (C63570 * C8590 + C139301 * C8593) * C92703 +
                        C66049 * C92566 + C65815 * C92702) *
                           C139555 +
                       (C112200 + C112199 + C112198 + C112197) * C13351) *
                          C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C1757 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C1758 +
                      ((C78056 * C92702 + C78398 * C92566 + C89205 * C92703 +
                        C89424 * C139557) *
                           C13351 +
                       (C116777 + C116778 + C116779 + C116780) * C139555) *
                          C1759) *
                         C5149 +
                     (((C114248 + C114247 + C114246 + C114245) * C13351 +
                       (C67315 * C92702 + C67634 * C92566 + C69344 * C92703 +
                        C69584 * C139557) *
                           C139555) *
                          C1758 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C1757 -
                      (((C63570 * C73499 + C139301 * C73707) * C139557 +
                        (C63570 * C73391 + C139301 * C73392) * C92703 +
                        C69584 * C92566 + C69344 * C92702) *
                           C139555 +
                       (C116780 + C116779 + C116778 + C116777) * C13351) *
                          C1759) *
                         C139398) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezy[112] +=
        (-std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C92702 +
           (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
               C92566 +
           (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
              C139301 * C139362 * C5796 -
          ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
           (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
            C13351 * C1543) *
               C92566 +
           (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
               C92702) *
              C139301 * C139362 * C5797 +
          ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
               C92702 +
           (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
            C139555 * C6192) *
               C92566 +
           (C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
            C139555 * C24114) *
               C92703 +
           (C13439 * C8758 + C13351 * C9149 + C13440 * C24216 +
            C139555 * C24753) *
               C139557) *
              C139301 * C139362 * C5798 -
          ((C13440 * C71524 + C139555 * C71927 + C13439 * C24216 +
            C13351 * C24753) *
               C139557 +
           (C13440 * C71364 + C139555 * C71448 + C13439 * C23998 +
            C13351 * C24114) *
               C92703 +
           (C13440 * C20432 + C139555 * C20809 + C13439 * C5921 +
            C13351 * C6192) *
               C92566 +
           (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
            C13351 * C5865) *
               C92702) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139362 * C5149 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
            (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
               C139301 * C139362 * C139398 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
            (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
               C139301 * C139362 * C5149 -
           ((C13440 * C8756 + C139555 * C9147 + C13439 * C4395 +
             C13351 * C4945) *
                C139557 +
            (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
             C13351 * C4277) *
                C92703 +
            (C17001 + C17000) * C92566 + (C16367 + C16366) * C92702) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C1757 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C1758 +
           ((C110774 + C110773) * C92702 + (C111410 + C111409) * C92566 +
            (C13439 * C10620 + C13351 * C10682 + C13440 * C26692 +
             C139555 * C26768) *
                C92703 +
            (C13439 * C10738 + C13351 * C11009 + C13440 * C26838 +
             C139555 * C27184) *
                C139557) *
               C139301 * C1759) *
              C5149 +
          (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
            (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
               C139301 * C1758 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C1757 -
           ((C13440 * C73499 + C139555 * C73758 + C13439 * C26838 +
             C13351 * C27184) *
                C139557 +
            (C13440 * C73391 + C139555 * C73447 + C13439 * C26692 +
             C13351 * C26768) *
                C92703 +
            (C116884 + C116883) * C92566 + (C116250 + C116249) * C92702) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[112] +=
        (-std::pow(Pi, 2.5) *
         (((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
            C93170 + C93170 + C139557 * C2578) *
               C13351 +
           (C110551 + C110552) * C139555) *
              C139301 * C139362 * C5796 -
          ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
              C139301 * C139362 * C5797 +
          ((C110554 + C110553) * C13351 + (C116041 + C116042) * C139555) *
              C139301 * C139362 * C5798 -
          ((C93167 * C71364 + C116035 + C116035 + C139557 * C72002 +
            C93166 * C20278 + C116036 + C116036 + C92566 * C20877) *
               C139555 +
           (C116042 + C116041) * C13351) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139362 * C5149 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
               C139301 * C139362 * C139398 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) *
               C139301 * C139362 * C5149 -
           ((C93167 * C8590 + C94153 + C94153 + C139557 * C9224 +
             C93166 * C832 + C94154 + C94154 + C92566 * C1648) *
                C139555 +
            (C96178 + C96177) * C13351) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C1757 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C1758 +
           ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
             C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                C13351 +
            (C116993 + C116994) * C139555) *
               C139301 * C1759) *
              C5149 +
          (((C114528 + C114527) * C13351 +
            (C93166 * C8592 + C103666 + C103666 + C92566 * C9226 +
             C93167 * C20984 + C103665 + C103665 + C139557 * C21839) *
                C139555) *
               C139301 * C1758 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C1757 -
           ((C93167 * C73391 + C116987 + C116987 + C139557 * C73809 +
             C93166 * C20984 + C116988 + C116988 + C92566 * C21839) *
                C139555 +
            (C116994 + C116993) * C13351) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
              C77704 * C139557) *
                 C13351 +
             (C109691 + C109692) * C139555) *
                C139530 -
            ((C113413 + C113414) * C139555 +
             (C77705 * C139557 + C77704 * C92566) * C13351) *
                C139426) *
               C5149 +
           (((C113414 + C113413) * C13351 +
             (C66988 * C92566 + C69094 * C139557) * C139555) *
                C139426 -
            ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
                C139530) *
               C139398) *
              C139521 +
          ((((C77706 * C92566 + C77707 * C139557) * C13351 +
             (C113415 + C113416) * C139555) *
                C139426 -
            ((C109696 + C109695) * C139555 +
             (C77706 * C139557 +
              (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                 C13351) *
                C139530) *
               C5149 +
           (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
                C139530 -
            (((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C139557 +
              C66991 * C92566) *
                 C139555 +
             (C113416 + C113415) * C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                  C63570 +
              (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                  C139301) *
                 C92566 +
             ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                 C139557) *
                C139530 -
            (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                 C139557 +
             ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                 C92566) *
                C139426) *
               C5149 +
           ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                 C92566 +
             ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                 C139557) *
                C139426 -
            (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                 C139557 +
             ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                  C139301 +
              (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                  C63570) *
                 C92566) *
                C139530) *
               C139398) *
              C139521 +
          (((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                 C92566 +
             ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                 C139557) *
                C139426 -
            (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                 C139557 +
             ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                 C92566) *
                C139530) *
               C5149 +
           ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                 C92566 +
             ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                 C139557) *
                C139530 -
            (((C13440 * C20985 + C139555 * C21101 + C13439 * C6327 +
               C13351 * C6413) *
                  C139301 +
              (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
               C13351 * C6410) *
                  C63570) *
                 C139557 +
             ((C18319 + C18318) * C139301 + (C18317 + C18316) * C63570) *
                 C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
               C139557 * C1986) *
                  C63570 +
              (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
               C139557 * C1994) *
                  C139301) *
                 C13351 +
             ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                 C139555) *
                C139530 -
            (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                 C139555 +
             ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
               C92566 * C1994) *
                  C139301 +
              (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
               C92566 * C1986) *
                  C63570) *
                 C13351) *
                C139426) *
               C5149 +
           ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                 C13351 +
             ((C92702 * C8592 + C92566 * C8758 + C92703 * C20984 +
               C139557 * C21202) *
                  C63570 +
              (C92702 * C8595 + C92566 * C8761 + C92703 * C20986 +
               C139557 * C21204) *
                  C139301) *
                 C139555) *
                C139426 -
            (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                 C139555 +
             ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                 C13351) *
                C139530) *
               C139398) *
              C139521 +
          (((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                 C13351 +
             ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                 C139555) *
                C139426 -
            (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                 C139555 +
             ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                 C13351) *
                C139530) *
               C5149 +
           ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                 C13351 +
             ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                 C139555) *
                C139530 -
            (((C92703 * C20985 + C139557 * C21203 + C92702 * C8594 +
               C92566 * C8760) *
                  C139301 +
              (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
               C92566 * C8757) *
                  C63570) *
                 C139555 +
             ((C97540 + C97539) * C139301 + (C97538 + C97537) * C63570) *
                 C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[113] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63570 * C106 + C139301 * C112) * C13439 +
                         (C63570 * C187 + C139301 * C360) * C13351 +
                         C64376 * C13440 + C64377 * C139555) *
                            C92566 +
                        (C110971 + C110972 + C110973 + C110974) * C139557) *
                           C139530 -
                       ((C110975 + C110976 + C110977 + C110978) * C139557 +
                        (C110974 + C110973 + C110972 + C110971) * C92566) *
                           C139426) *
                          C5149 +
                      (((C113831 + C113832 + C113833 + C113834) * C92566 +
                        (C116461 + C116462 + C116463 + C116464) * C139557) *
                           C139426 -
                       ((C113834 + C113833 + C113832 + C113831) * C139557 +
                        (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                         C64376 * C13439) *
                            C92566) *
                           C139530) *
                          C139398) *
                         C139521 +
                     ((((C110979 + C110980 + C110981 + C110982) * C92566 +
                        (C110983 + C110984 + C110985 + C110986) * C139557) *
                           C139426 -
                       ((C110982 + C110981 + C110980 + C110979) * C139557 +
                        (C64383 * C139555 + C64382 * C13440 +
                         (C63570 * C188 + C139301 * C361) * C13351 +
                         (C63570 * C107 + C139301 * C113) * C13439) *
                            C92566) *
                           C139530) *
                          C5149 +
                      (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                         C64385 * C139555) *
                            C92566 +
                        (C113835 + C113836 + C113837 + C113838) * C139557) *
                           C139530 -
                       (((C63570 * C21099 + C139301 * C21313) * C139555 +
                         (C63570 * C20983 + C139301 * C20985) * C13440 +
                         C78062 * C13351 + C78061 * C13439) *
                            C139557 +
                        (C113838 + C113837 + C113836 + C113835) * C92566) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[113] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                         C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                            C139301 * C92566 +
                        (C111101 + C111102) * C139301 * C139557) *
                           C139530 -
                       ((C111103 + C111104) * C139301 * C139557 +
                        (C111102 + C111101) * C139301 * C92566) *
                           C139426) *
                          C5149 +
                      (((C113977 + C113978) * C139301 * C92566 +
                        (C116573 + C116574) * C139301 * C139557) *
                           C139426 -
                       ((C113978 + C113977) * C139301 * C139557 +
                        (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                         C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                            C139301 * C92566) *
                           C139530) *
                          C139398) *
                         C139521 +
                     ((((C15723 + C15722) * C139301 * C92566 +
                        (C15724 + C15725) * C139301 * C139557) *
                           C139426 -
                       ((C15722 + C15723) * C139301 * C139557 +
                        (C13713 + C13712) * C139301 * C92566) *
                           C139530) *
                          C5149 +
                      (((C14691 + C14690) * C139301 * C92566 +
                        (C18768 + C18769) * C139301 * C139557) *
                           C139530 -
                       ((C13676 * C20983 + C21428 + C21428 + C139555 * C21425 +
                         C13675 * C6324 + C21429 + C21429 + C13351 * C6647) *
                            C139301 * C139557 +
                        (C18769 + C18768) * C139301 * C92566) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C13439 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C13351 +
             (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
                C139301 * C139530 -
            ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
             (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C13351 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C13439) *
                C139301 * C139426) *
               C5149 +
           (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
             (C92702 * C8592 + C92566 * C8758 + C92703 * C20984 +
              C139557 * C21202) *
                 C13440 +
             (C92702 * C8678 + C92566 * C8995 + C92703 * C21100 +
              C139557 * C21530) *
                 C139555) *
                C139301 * C139426 -
            ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
             (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
             (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
                C139301 * C139426 -
            ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
             (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
                C139301 * C139530) *
               C5149 +
           (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
             (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
                C139301 * C139530 -
            ((C92703 * C21099 + C139557 * C21529 + C92702 * C8677 +
              C92566 * C8994) *
                 C139555 +
             (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
              C92566 * C8757) *
                 C13440 +
             (C97940 + C97939) * C13351 + (C97538 + C97537) * C13439) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[113] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63570 * C106 + C139301 * C112) * C92702 +
                         (C63570 * C274 + C139301 * C577) * C92566 +
                         C78053 * C92703 + C78397 * C139557) *
                            C13351 +
                        (C110323 + C110324 + C110325 + C110326) * C139555) *
                           C139530 -
                       ((C114245 + C114246 + C114247 + C114248) * C139555 +
                        (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                         C78053 * C92702) *
                            C13351) *
                           C139426) *
                          C5149 +
                      (((C114248 + C114247 + C114246 + C114245) * C13351 +
                        (C67315 * C92702 + C67634 * C92566 + C69344 * C92703 +
                         C69584 * C139557) *
                            C139555) *
                           C139426 -
                       ((C110327 + C110328 + C110329 + C110330) * C139555 +
                        (C110326 + C110325 + C110324 + C110323) * C13351) *
                           C139530) *
                          C139398) *
                         C139521 +
                     ((((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                         C78400 * C139557) *
                            C13351 +
                        (C114249 + C114250 + C114251 + C114252) * C139555) *
                           C139426 -
                       ((C110334 + C110333 + C110332 + C110331) * C139555 +
                        (C78399 * C139557 + C78057 * C92703 +
                         (C63570 * C275 + C139301 * C578) * C92566 +
                         (C63570 * C107 + C139301 * C113) * C92702) *
                            C13351) *
                           C139530) *
                          C5149 +
                      (((C110331 + C110332 + C110333 + C110334) * C13351 +
                        (C110335 + C110336 + C110337 + C110338) * C139555) *
                           C139530 -
                       (((C63570 * C21201 + C139301 * C21632) * C139557 +
                         (C63570 * C20983 + C139301 * C20985) * C92703 +
                         C67637 * C92566 + C67320 * C92702) *
                            C139555 +
                        (C114252 + C114251 + C114250 + C114249) * C13351) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C92702 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C92566 +
             (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
                C139301 * C139530 -
            ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
             (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
                C139301 * C139426) *
               C5149 +
           (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
             (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
                C139301 * C139426 -
            ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
             (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C92566 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C92702) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
             (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
                C139301 * C139426 -
            ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
             (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
                C139301 * C139530) *
               C5149 +
           (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
             (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
                C139301 * C139530 -
            ((C13440 * C21201 + C139555 * C21738 + C13439 * C6490 +
              C13351 * C6881) *
                 C139557 +
             (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
              C13351 * C6410) *
                 C92703 +
             (C19187 + C19186) * C92566 + (C18317 + C18316) * C92702) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[113] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
              C93170 + C93170 + C139557 * C2578) *
                 C13351 +
             (C110551 + C110552) * C139555) *
                C139301 * C139530 -
            ((C114527 + C114528) * C139555 +
             (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
              C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                 C13351) *
                C139301 * C139426) *
               C5149 +
           (((C114528 + C114527) * C13351 +
             (C93166 * C8592 + C103666 + C103666 + C92566 * C9226 +
              C93167 * C20984 + C103665 + C103665 + C139557 * C21839) *
                 C139555) *
                C139301 * C139426 -
            ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
                C139301 * C139426 -
            ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
                C139301 * C139530) *
               C5149 +
           (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
                C139301 * C139530 -
            ((C93167 * C20983 + C103663 + C103663 + C139557 * C21838 +
              C93166 * C8591 + C103664 + C103664 + C92566 * C9225) *
                 C139555 +
             (C98350 + C98349) * C13351) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139362 * C5149 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139362 * C139398) *
              C5151 +
          (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
               C139362 * C139398 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
             C79616 * C139557) *
                C13351 +
            (C111607 + C111608) * C139555) *
               C139362 * C5149 -
           (((C63569 * C8590 + C66274 + C66274 + C139301 * C8596) * C139557 +
             C65576 * C92566) *
                C139555 +
            (C111608 + C111607) * C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
            C77704 * C139557) *
               C13351 +
           (C109691 + C109692) * C139555) *
              C139362 * C5796 -
          ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
              C139362 * C5797 +
          ((C109694 + C109693) * C13351 + (C115477 + C115478) * C139555) *
              C139362 * C5798 -
          (((C63569 * C71364 + C71370 + C71370 + C139301 * C71366) * C139557 +
            C68562 * C92566) *
               C139555 +
           (C115478 + C115477) * C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139362 * C139398) *
              C5151 +
          ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                C92566 +
            ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                C139557) *
               C139362 * C139398 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139362 * C5149) *
              C5152 +
          ((((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) *
                C92566 +
            ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
                C139557) *
               C139362 * C5149 -
           (((C13440 * C8593 + C139555 * C8679 + C13439 * C4165 +
              C13351 * C4281) *
                 C139301 +
             (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
              C13351 * C4277) *
                 C63570) *
                C139557 +
            ((C16369 + C16368) * C139301 + (C16367 + C16366) * C63570) *
                C92566) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C63570 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C139301) *
               C92566 +
           ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
               C139557) *
              C139362 * C5796 -
          (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
               C139557 +
           ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                C139301 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C63570) *
               C92566) *
              C139362 * C5797 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C63570 +
            (C13439 * C838 + C13351 * C948 + C13440 * C5806 + C139555 * C5868) *
                C139301) *
               C92566 +
           ((C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
             C139555 * C24114) *
                C63570 +
            (C13439 * C8595 + C13351 * C8681 + C13440 * C24000 +
             C139555 * C24116) *
                C139301) *
               C139557) *
              C139362 * C5798 -
          (((C13440 * C71365 + C139555 * C71449 + C13439 * C24000 +
             C13351 * C24116) *
                C139301 +
            (C13440 * C71364 + C139555 * C71448 + C13439 * C23998 +
             C13351 * C24114) *
                C63570) *
               C139557 +
           ((C13440 * C20280 + C139555 * C20364 + C13439 * C5806 +
             C13351 * C5868) *
                C139301 +
            (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
             C13351 * C5865) *
                C63570) *
               C92566) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139362 * C139398) *
              C5151 +
          ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                C13351 +
            ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                C139555) *
               C139362 * C139398 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139362 * C5149) *
              C5152 +
          ((((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) *
                C13351 +
            ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
                C139555) *
               C139362 * C5149 -
           (((C92703 * C8593 + C139557 * C8759 + C92702 * C840 +
              C92566 * C1064) *
                 C139301 +
             (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
              C92566 * C1056) *
                 C63570) *
                C139555 +
            ((C95568 + C95567) * C139301 + (C95566 + C95565) * C63570) *
                C13351) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C63570 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C139301) *
               C13351 +
           ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
               C139555) *
              C139362 * C5796 -
          (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
               C139555 +
           ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
               C13351) *
              C139362 * C5797 +
          (((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
               C13351 +
           ((C115619 + C115620) * C63570 + (C115621 + C115622) * C139301) *
               C139555) *
              C139362 * C5798 -
          (((C92703 * C71365 + C139557 * C71525 + C92702 * C20280 +
             C92566 * C20434) *
                C139301 +
            (C92703 * C71364 + C139557 * C71524 + C92702 * C20278 +
             C92566 * C20432) *
                C63570) *
               C139555 +
           ((C115622 + C115621) * C139301 + (C115620 + C115619) * C63570) *
               C13351) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[114] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139362 * C5149 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139362 * C139398) *
                         C5151 +
                     (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                        C64385 * C139555) *
                           C92566 +
                       (C113835 + C113836 + C113837 + C113838) * C139557) *
                          C139362 * C139398 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139362 * C5149) *
                         C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C13439 +
                        (C63570 * C189 + C139301 * C362) * C13351 +
                        C65813 * C13440 + C65814 * C139555) *
                           C92566 +
                       (C112789 + C112790 + C112791 + C112792) * C139557) *
                          C139362 * C5149 -
                      (((C63570 * C8676 + C139301 * C8836) * C139555 +
                        (C63570 * C8590 + C139301 * C8593) * C13440 +
                        C79014 * C13351 + C79013 * C13439) *
                           C139557 +
                       (C65816 * C139555 + C65815 * C13440 + C65814 * C13351 +
                        C65813 * C13439) *
                           C92566) *
                          C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C13439 +
                       (C63570 * C187 + C139301 * C360) * C13351 +
                       C64376 * C13440 + C64377 * C139555) *
                          C92566 +
                      (C110971 + C110972 + C110973 + C110974) * C139557) *
                         C139362 * C5796 -
                     ((C113834 + C113833 + C113832 + C113831) * C139557 +
                      (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                       C64376 * C13439) *
                          C92566) *
                         C139362 * C5797 +
                     ((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                       C64380 * C139555) *
                          C92566 +
                      (C67315 * C13439 + C67314 * C13351 + C71615 * C13440 +
                       C71616 * C139555) *
                          C139557) *
                         C139362 * C5798 -
                     (((C63570 * C71448 + C139301 * C71609) * C139555 +
                       (C63570 * C71364 + C139301 * C71365) * C13440 +
                       C71616 * C13351 + C71615 * C13439) *
                          C139557 +
                      (C68733 * C139555 + C68732 * C13440 + C64380 * C13351 +
                       C64381 * C13439) *
                          C92566) *
                         C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[114] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139362 * C5149 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139362 * C139398) *
                         C5151 +
                     (((C14691 + C14690) * C139301 * C92566 +
                       (C18768 + C18769) * C139301 * C139557) *
                          C139362 * C139398 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139362 * C5149) *
                         C5152 +
                     (((C13715 + C13714) * C139301 * C92566 +
                       (C17618 + C17619) * C139301 * C139557) *
                          C139362 * C5149 -
                      ((C13676 * C8590 + C18762 + C18762 + C139555 * C8913 +
                        C13675 * C4161 + C18763 + C18763 + C13351 * C4615) *
                           C139301 * C139557 +
                       (C16691 + C16690) * C139301 * C92566) *
                          C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C139301 * C92566 +
                      (C111101 + C111102) * C139301 * C139557) *
                         C139362 * C5796 -
                     ((C113978 + C113977) * C139301 * C139557 +
                      (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                       C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                          C139301 * C92566) *
                         C139362 * C5797 +
                     ((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                       C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                          C139301 * C92566 +
                      (C13675 * C8592 + C24445 + C24445 + C13351 * C8915 +
                       C13676 * C23998 + C24444 + C24444 + C139555 * C24440) *
                          C139301 * C139557) *
                         C139362 * C5798 -
                     ((C13676 * C71364 + C115755 + C115755 + C139555 * C71690 +
                       C13675 * C23998 + C115756 + C115756 + C13351 * C24440) *
                          C139301 * C139557 +
                      (C13676 * C20278 + C20596 + C20596 + C139555 * C20592 +
                       C13675 * C5803 + C20597 + C20597 + C13351 * C6030) *
                          C139301 * C92566) *
                         C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139362 * C5149 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
            (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
               C139301 * C139362 * C139398 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
            (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
               C139301 * C139362 * C5149 -
           ((C92703 * C8676 + C139557 * C8993 + C92702 * C942 +
             C92566 * C1362) *
                C139555 +
            (C92703 * C8590 + C139557 * C8756 + C92702 * C832 +
             C92566 * C1056) *
                C13440 +
            (C95868 + C95867) * C13351 + (C95566 + C95565) * C13439) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C13439 +
           (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
               C13351 +
           (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
              C139301 * C139362 * C5796 -
          ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
           (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
              C139301 * C139362 * C5797 +
          ((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
           (C115619 + C115620) * C13440 + (C115827 + C115828) * C139555) *
              C139301 * C139362 * C5798 -
          ((C92703 * C71448 + C139557 * C71768 + C92702 * C20362 +
            C92566 * C20664) *
               C139555 +
           (C92703 * C71364 + C139557 * C71524 + C92702 * C20278 +
            C92566 * C20432) *
               C13440 +
           (C115828 + C115827) * C13351 + (C115620 + C115619) * C13439) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[114] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139362 * C5149 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139362 * C139398) *
                         C5151 +
                     (((C110331 + C110332 + C110333 + C110334) * C13351 +
                       (C110335 + C110336 + C110337 + C110338) * C139555) *
                          C139362 * C139398 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139362 * C5149) *
                         C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C92702 +
                        (C63570 * C276 + C139301 * C579) * C92566 +
                        C79917 * C92703 + C80217 * C139557) *
                           C13351 +
                       (C112197 + C112198 + C112199 + C112200) * C139555) *
                          C139362 * C5149 -
                      (((C63570 * C8756 + C139301 * C9070) * C139557 +
                        (C63570 * C8590 + C139301 * C8593) * C92703 +
                        C66049 * C92566 + C65815 * C92702) *
                           C139555 +
                       (C112200 + C112199 + C112198 + C112197) * C13351) *
                          C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C92702 +
                       (C63570 * C274 + C139301 * C577) * C92566 +
                       C78053 * C92703 + C78397 * C139557) *
                          C13351 +
                      (C110323 + C110324 + C110325 + C110326) * C139555) *
                         C139362 * C5796 -
                     ((C110327 + C110328 + C110329 + C110330) * C139555 +
                      (C110326 + C110325 + C110324 + C110323) * C13351) *
                         C139362 * C5797 +
                     ((C110330 + C110329 + C110328 + C110327) * C13351 +
                      (C115895 + C115896 + C115897 + C115898) * C139555) *
                         C139362 * C5798 -
                     (((C63570 * C71524 + C139301 * C71846) * C139557 +
                       (C63570 * C71364 + C139301 * C71365) * C92703 +
                       C68897 * C92566 + C68732 * C92702) *
                          C139555 +
                      (C115898 + C115897 + C115896 + C115895) * C13351) *
                         C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezy[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139362 * C5149 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
            (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
               C139301 * C139362 * C139398 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
            (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
               C139301 * C139362 * C5149 -
           ((C13440 * C8756 + C139555 * C9147 + C13439 * C4395 +
             C13351 * C4945) *
                C139557 +
            (C13440 * C8590 + C139555 * C8676 + C13439 * C4161 +
             C13351 * C4277) *
                C92703 +
            (C17001 + C17000) * C92566 + (C16367 + C16366) * C92702) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C92702 +
           (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
               C92566 +
           (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
              C139301 * C139362 * C5796 -
          ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
           (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
            C13351 * C1543) *
               C92566 +
           (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
               C92702) *
              C139301 * C139362 * C5797 +
          ((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
               C92702 +
           (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
            C139555 * C6192) *
               C92566 +
           (C13439 * C8592 + C13351 * C8678 + C13440 * C23998 +
            C139555 * C24114) *
               C92703 +
           (C13439 * C8758 + C13351 * C9149 + C13440 * C24216 +
            C139555 * C24753) *
               C139557) *
              C139301 * C139362 * C5798 -
          ((C13440 * C71524 + C139555 * C71927 + C13439 * C24216 +
            C13351 * C24753) *
               C139557 +
           (C13440 * C71364 + C139555 * C71448 + C13439 * C23998 +
            C13351 * C24114) *
               C92703 +
           (C13440 * C20432 + C139555 * C20809 + C13439 * C5921 +
            C13351 * C6192) *
               C92566 +
           (C13440 * C20278 + C139555 * C20362 + C13439 * C5803 +
            C13351 * C5865) *
               C92702) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[114] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139362 * C5149 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
               C139301 * C139362 * C139398 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) *
               C139301 * C139362 * C5149 -
           ((C93167 * C8590 + C94153 + C94153 + C139557 * C9224 +
             C93166 * C832 + C94154 + C94154 + C92566 * C1648) *
                C139555 +
            (C96178 + C96177) * C13351) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
            C93170 + C93170 + C139557 * C2578) *
               C13351 +
           (C110551 + C110552) * C139555) *
              C139301 * C139362 * C5796 -
          ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
              C139301 * C139362 * C5797 +
          ((C110554 + C110553) * C13351 + (C116041 + C116042) * C139555) *
              C139301 * C139362 * C5798 -
          ((C93167 * C71364 + C116035 + C116035 + C139557 * C72002 +
            C93166 * C20278 + C116036 + C116036 + C92566 * C20877) *
               C139555 +
           (C116042 + C116041) * C13351) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
              C77704 * C139557) *
                 C13351 +
             (C109691 + C109692) * C139555) *
                C9304 -
            ((C113413 + C113414) * C139555 +
             (C77705 * C139557 + C77704 * C92566) * C13351) *
                C139426) *
               C139529 +
           (((C113414 + C113413) * C13351 + (C119145 + C119146) * C139555) *
                C139426 -
            ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
                C9304) *
               C139398) *
              C139521 +
          ((((C77706 * C92566 + C77707 * C139557) * C13351 +
             (C113415 + C113416) * C139555) *
                C139426 -
            ((C109696 + C109695) * C139555 +
             (C77706 * C139557 +
              (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                 C13351) *
                C9304) *
               C139529 +
           (((C109695 + C109696) * C13351 + (C109697 + C109698) * C139555) *
                C9304 -
            (((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C139557 +
              C66991 * C92566) *
                 C139555 +
             (C113416 + C113415) * C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                  C63570 +
              (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                  C139301) *
                 C92566 +
             ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                 C139557) *
                C9304 -
            (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                 C139557 +
             ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                 C92566) *
                C139426) *
               C139529 +
           ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                 C92566 +
             ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                 C139557) *
                C139426 -
            (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                 C139557 +
             ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                  C139301 +
              (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                  C63570) *
                 C92566) *
                C9304) *
               C139398) *
              C139521 +
          (((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                 C92566 +
             ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                 C139557) *
                C139426 -
            (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                 C139557 +
             ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                 C92566) *
                C9304) *
               C139529 +
           ((((C14281 + C14280) * C63570 + (C14279 + C14278) * C139301) *
                 C92566 +
             ((C18316 + C18317) * C63570 + (C18318 + C18319) * C139301) *
                 C139557) *
                C9304 -
            (((C13440 * C20985 + C139555 * C21101 + C13439 * C6327 +
               C13351 * C6413) *
                  C139301 +
              (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
               C13351 * C6410) *
                  C63570) *
                 C139557 +
             ((C18319 + C18318) * C139301 + (C18317 + C18316) * C63570) *
                 C92566) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
               C139557 * C1986) *
                  C63570 +
              (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
               C139557 * C1994) *
                  C139301) *
                 C13351 +
             ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                 C139555) *
                C9304 -
            (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                 C139555 +
             ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
               C92566 * C1994) *
                  C139301 +
              (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
               C92566 * C1986) *
                  C63570) *
                 C13351) *
                C139426) *
               C139529 +
           ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                 C13351 +
             ((C119363 + C119364) * C63570 + (C119365 + C119366) * C139301) *
                 C139555) *
                C139426 -
            (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                 C139555 +
             ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                 C13351) *
                C9304) *
               C139398) *
              C139521 +
          (((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                 C13351 +
             ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                 C139555) *
                C139426 -
            (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                 C139555 +
             ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                 C13351) *
                C9304) *
               C139529 +
           ((((C93522 + C93521) * C63570 + (C93520 + C93519) * C139301) *
                 C13351 +
             ((C93523 + C93524) * C63570 + (C93525 + C93526) * C139301) *
                 C139555) *
                C9304 -
            (((C92703 * C20985 + C139557 * C21203 + C92702 * C8594 +
               C92566 * C8760) *
                  C139301 +
              (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
               C92566 * C8757) *
                  C63570) *
                 C139555 +
             ((C97540 + C97539) * C139301 + (C97538 + C97537) * C63570) *
                 C13351) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63570 * C106 + C139301 * C112) * C13439 +
                         (C63570 * C187 + C139301 * C360) * C13351 +
                         C64376 * C13440 + C64377 * C139555) *
                            C92566 +
                        (C110971 + C110972 + C110973 + C110974) * C139557) *
                           C9304 -
                       ((C110975 + C110976 + C110977 + C110978) * C139557 +
                        (C110974 + C110973 + C110972 + C110971) * C92566) *
                           C139426) *
                          C139529 +
                      (((C113831 + C113832 + C113833 + C113834) * C92566 +
                        (C116461 + C116462 + C116463 + C116464) * C139557) *
                           C139426 -
                       ((C113834 + C113833 + C113832 + C113831) * C139557 +
                        (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                         C64376 * C13439) *
                            C92566) *
                           C9304) *
                          C139398) *
                         C139521 +
                     ((((C110979 + C110980 + C110981 + C110982) * C92566 +
                        (C110983 + C110984 + C110985 + C110986) * C139557) *
                           C139426 -
                       ((C110982 + C110981 + C110980 + C110979) * C139557 +
                        (C64383 * C139555 + C64382 * C13440 +
                         (C63570 * C188 + C139301 * C361) * C13351 +
                         (C63570 * C107 + C139301 * C113) * C13439) *
                            C92566) *
                           C9304) *
                          C139529 +
                      (((C64382 * C13439 + C64383 * C13351 + C64384 * C13440 +
                         C64385 * C139555) *
                            C92566 +
                        (C113835 + C113836 + C113837 + C113838) * C139557) *
                           C9304 -
                       (((C63570 * C21099 + C139301 * C21313) * C139555 +
                         (C63570 * C20983 + C139301 * C20985) * C13440 +
                         C78062 * C13351 + C78061 * C13439) *
                            C139557 +
                        (C113838 + C113837 + C113836 + C113835) * C92566) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                         C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                            C139301 * C92566 +
                        (C111101 + C111102) * C139301 * C139557) *
                           C9304 -
                       ((C111103 + C111104) * C139301 * C139557 +
                        (C111102 + C111101) * C139301 * C92566) *
                           C139426) *
                          C139529 +
                      (((C113977 + C113978) * C139301 * C92566 +
                        (C116573 + C116574) * C139301 * C139557) *
                           C139426 -
                       ((C113978 + C113977) * C139301 * C139557 +
                        (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                         C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                            C139301 * C92566) *
                           C9304) *
                          C139398) *
                         C139521 +
                     ((((C15723 + C15722) * C139301 * C92566 +
                        (C15724 + C15725) * C139301 * C139557) *
                           C139426 -
                       ((C15722 + C15723) * C139301 * C139557 +
                        (C13713 + C13712) * C139301 * C92566) *
                           C9304) *
                          C139529 +
                      (((C14691 + C14690) * C139301 * C92566 +
                        (C18768 + C18769) * C139301 * C139557) *
                           C9304 -
                       ((C13676 * C20983 + C21428 + C21428 + C139555 * C21425 +
                         C13675 * C6324 + C21429 + C21429 + C13351 * C6647) *
                            C139301 * C139557 +
                        (C18769 + C18768) * C139301 * C92566) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C13439 +
             (C92702 * C187 + C92566 * C499 + C92703 * C1872 +
              C139557 * C2292) *
                 C13351 +
             (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
                C139301 * C9304 -
            ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
             (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
              C92566 * C2292) *
                 C13351 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C13439) *
                C139301 * C139426) *
               C139529 +
           (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
             (C119363 + C119364) * C13440 + (C119681 + C119682) * C139555) *
                C139301 * C139426 -
            ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
             (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
             (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
                C139301 * C139426 -
            ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
             (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
                C139301 * C9304) *
               C139529 +
           (((C93522 + C93521) * C13439 + (C93830 + C93829) * C13351 +
             (C93523 + C93524) * C13440 + (C93831 + C93832) * C139555) *
                C139301 * C9304 -
            ((C92703 * C21099 + C139557 * C21529 + C92702 * C8677 +
              C92566 * C8994) *
                 C139555 +
             (C92703 * C20983 + C139557 * C21201 + C92702 * C8591 +
              C92566 * C8757) *
                 C13440 +
             (C97940 + C97939) * C13351 + (C97538 + C97537) * C13439) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[115] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((((C63570 * C106 + C139301 * C112) * C92702 +
                         (C63570 * C274 + C139301 * C577) * C92566 +
                         C78053 * C92703 + C78397 * C139557) *
                            C13351 +
                        (C110323 + C110324 + C110325 + C110326) * C139555) *
                           C9304 -
                       ((C114245 + C114246 + C114247 + C114248) * C139555 +
                        (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                         C78053 * C92702) *
                            C13351) *
                           C139426) *
                          C139529 +
                      (((C114248 + C114247 + C114246 + C114245) * C13351 +
                        (C119781 + C119782 + C119783 + C119784) * C139555) *
                           C139426 -
                       ((C110327 + C110328 + C110329 + C110330) * C139555 +
                        (C110326 + C110325 + C110324 + C110323) * C13351) *
                           C9304) *
                          C139398) *
                         C139521 +
                     ((((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                         C78400 * C139557) *
                            C13351 +
                        (C114249 + C114250 + C114251 + C114252) * C139555) *
                           C139426 -
                       ((C110334 + C110333 + C110332 + C110331) * C139555 +
                        (C78399 * C139557 + C78057 * C92703 +
                         (C63570 * C275 + C139301 * C578) * C92566 +
                         (C63570 * C107 + C139301 * C113) * C92702) *
                            C13351) *
                           C9304) *
                          C139529 +
                      (((C110331 + C110332 + C110333 + C110334) * C13351 +
                        (C110335 + C110336 + C110337 + C110338) * C139555) *
                           C9304 -
                       (((C63570 * C21201 + C139301 * C21632) * C139557 +
                         (C63570 * C20983 + C139301 * C20985) * C92703 +
                         C67637 * C92566 + C67320 * C92702) *
                            C139555 +
                        (C114252 + C114251 + C114250 + C114249) * C13351) *
                           C139426) *
                          C139398) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C92702 +
             (C13439 * C274 + C13351 * C633 + C13440 * C1053 +
              C139555 * C1543) *
                 C92566 +
             (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
                C139301 * C9304 -
            ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
             (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
                C139301 * C139426) *
               C139529 +
           (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
             (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
                C139301 * C139426 -
            ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
             (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
              C13351 * C1543) *
                 C92566 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C92702) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
             (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
                C139301 * C139426 -
            ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
             (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
                C139301 * C9304) *
               C139529 +
           (((C14281 + C14280) * C92702 + (C15038 + C15037) * C92566 +
             (C18316 + C18317) * C92703 + (C19186 + C19187) * C139557) *
                C139301 * C9304 -
            ((C13440 * C21201 + C139555 * C21738 + C13439 * C6490 +
              C13351 * C6881) *
                 C139557 +
             (C13440 * C20983 + C139555 * C21099 + C13439 * C6324 +
              C13351 * C6410) *
                 C92703 +
             (C19187 + C19186) * C92566 + (C18317 + C18316) * C92702) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[115] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
              C93170 + C93170 + C139557 * C2578) *
                 C13351 +
             (C110551 + C110552) * C139555) *
                C139301 * C9304 -
            ((C114527 + C114528) * C139555 +
             (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
              C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                 C13351) *
                C139301 * C139426) *
               C139529 +
           (((C114528 + C114527) * C13351 + (C119997 + C119998) * C139555) *
                C139301 * C139426 -
            ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
                C139301 * C139426 -
            ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
                C139301 * C9304) *
               C139529 +
           (((C94164 + C94163) * C13351 + (C94165 + C94166) * C139555) *
                C139301 * C9304 -
            ((C93167 * C20983 + C103663 + C103663 + C139557 * C21838 +
              C93166 * C8591 + C103664 + C103664 + C92566 * C9225) *
                 C139555 +
             (C98350 + C98349) * C13351) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139562 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139563 +
           ((C77705 * C92566 + C88983 * C139557) * C13351 +
            (C116141 + C116142) * C139555) *
               C12024) *
              C139529 +
          (((C113414 + C113413) * C13351 + (C119145 + C119146) * C139555) *
               C139563 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C139562 -
           (((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C139557 +
             C69094 * C92566) *
                C139555 +
            (C116142 + C116141) * C13351) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139562 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139563 +
           (((C110774 + C110773) * C63570 + (C110772 + C110771) * C139301) *
                C92566 +
            ((C121903 + C121904) * C63570 + (C121905 + C121906) * C139301) *
                C139557) *
               C12024) *
              C139529 +
          ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                C92566 +
            ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                C139557) *
               C139563 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C139562 -
           (((C13440 * C73392 + C139555 * C73448 + C13439 * C26694 +
              C13351 * C26770) *
                 C139301 +
             (C13440 * C73391 + C139555 * C73447 + C13439 * C26692 +
              C13351 * C26768) *
                 C63570) *
                C139557 +
            ((C116252 + C116251) * C139301 + (C116250 + C116249) * C63570) *
                C92566) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139562 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139563 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C13351 +
            ((C116359 + C116360) * C63570 + (C116361 + C116362) * C139301) *
                C139555) *
               C12024) *
              C139529 +
          ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                C13351 +
            ((C119363 + C119364) * C63570 + (C119365 + C119366) * C139301) *
                C139555) *
               C139563 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C139562 -
           (((C92703 * C73392 + C139557 * C73500 + C92702 * C20986 +
              C92566 * C21204) *
                 C139301 +
             (C92703 * C73391 + C139557 * C73499 + C92702 * C20984 +
              C92566 * C21202) *
                 C63570) *
                C139555 +
            ((C116362 + C116361) * C139301 + (C116360 + C116359) * C63570) *
                C13351) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[116] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139562 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139563 +
                      ((C110978 + C110977 + C110976 + C110975) * C92566 +
                       (C122039 + C122040 + C122041 + C122042) * C139557) *
                          C12024) *
                         C139529 +
                     (((C113831 + C113832 + C113833 + C113834) * C92566 +
                       (C116461 + C116462 + C116463 + C116464) * C139557) *
                          C139563 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C139562 -
                      (((C63570 * C73447 + C139301 * C73551) * C139555 +
                        (C63570 * C73391 + C139301 * C73392) * C13440 +
                        C83606 * C13351 + C83605 * C13439) *
                           C139557 +
                       (C116464 + C116463 + C116462 + C116461) * C92566) *
                          C12024) *
                         C139398) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[116] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139562 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139563 +
                      ((C111104 + C111103) * C139301 * C92566 +
                       (C122119 + C122120) * C139301 * C139557) *
                          C12024) *
                         C139529 +
                     (((C113977 + C113978) * C139301 * C92566 +
                       (C116573 + C116574) * C139301 * C139557) *
                          C139563 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C139562 -
                      ((C13676 * C73391 + C116567 + C116567 + C139555 * C73602 +
                        C13675 * C26692 + C116568 + C116568 + C13351 * C26976) *
                           C139301 * C139557 +
                       (C116574 + C116573) * C139301 * C92566) *
                          C12024) *
                         C139398) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139562 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139563 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C13439 +
            (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
             C139557 * C10903) *
                C13351 +
            (C116359 + C116360) * C13440 + (C116677 + C116678) * C139555) *
               C139301 * C12024) *
              C139529 +
          (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
            (C119363 + C119364) * C13440 + (C119681 + C119682) * C139555) *
               C139301 * C139563 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C139562 -
           ((C92703 * C73447 + C139557 * C73656 + C92702 * C21100 +
             C92566 * C21530) *
                C139555 +
            (C92703 * C73391 + C139557 * C73499 + C92702 * C20984 +
             C92566 * C21202) *
                C13440 +
            (C116678 + C116677) * C13351 + (C116360 + C116359) * C13439) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[116] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139562 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139563 +
                      ((C78056 * C92702 + C78398 * C92566 + C89205 * C92703 +
                        C89424 * C139557) *
                           C13351 +
                       (C116777 + C116778 + C116779 + C116780) * C139555) *
                          C12024) *
                         C139529 +
                     (((C114248 + C114247 + C114246 + C114245) * C13351 +
                       (C119781 + C119782 + C119783 + C119784) * C139555) *
                          C139563 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C139562 -
                      (((C63570 * C73499 + C139301 * C73707) * C139557 +
                        (C63570 * C73391 + C139301 * C73392) * C92703 +
                        C69584 * C92566 + C69344 * C92702) *
                           C139555 +
                       (C116780 + C116779 + C116778 + C116777) * C13351) *
                          C12024) *
                         C139398) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eezy[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139562 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139563 +
           ((C110774 + C110773) * C92702 + (C111410 + C111409) * C92566 +
            (C121903 + C121904) * C92703 + (C122323 + C122324) * C139557) *
               C139301 * C12024) *
              C139529 +
          (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
            (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
               C139301 * C139563 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C139562 -
           ((C13440 * C73499 + C139555 * C73758 + C13439 * C26838 +
             C13351 * C27184) *
                C139557 +
            (C13440 * C73391 + C139555 * C73447 + C13439 * C26692 +
             C13351 * C26768) *
                C92703 +
            (C116884 + C116883) * C92566 + (C116250 + C116249) * C92702) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[116] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139562 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139563 +
           ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
             C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                C13351 +
            (C116993 + C116994) * C139555) *
               C139301 * C12024) *
              C139529 +
          (((C114528 + C114527) * C13351 + (C119997 + C119998) * C139555) *
               C139301 * C139563 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C139562 -
           ((C93167 * C73391 + C116987 + C116987 + C139557 * C73809 +
             C93166 * C20984 + C116988 + C116988 + C92566 * C21839) *
                C139555 +
            (C116994 + C116993) * C13351) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C9304 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139426) *
              C822 +
          (((C113414 + C113413) * C13351 + (C119145 + C119146) * C139555) *
               C139426 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C9304) *
              C823 +
          (((C109694 + C109693) * C13351 + (C115477 + C115478) * C139555) *
               C9304 -
           (((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139557 +
             C71373 * C92566) *
                C139555 +
            (C119146 + C119145) * C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C9304 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139426) *
              C139346 * C5151 +
          (((C77706 * C92566 + C77707 * C139557) * C13351 +
            (C113415 + C113416) * C139555) *
               C139426 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
             C79616 * C139557) *
                C13351 +
            (C111607 + C111608) * C139555) *
               C9304 -
           (((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C139557 +
             C78713 * C92566) *
                C139555 +
            ((C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C139557 +
             C79616 * C92566) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
            C77704 * C139557) *
               C13351 +
           (C109691 + C109692) * C139555) *
              C10614 -
          ((C113413 + C113414) * C139555 +
           (C77705 * C139557 + C77704 * C92566) * C13351) *
              C10615 +
          ((C77705 * C92566 + C88983 * C139557) * C13351 +
           (C116141 + C116142) * C139555) *
              C10616 -
          (((C63569 * C88973 + C88979 + C88979 + C139301 * C88975) * C139557 +
            C83277 * C92566) *
               C139555 +
           ((C63569 * C43304 + C88980 + C88980 + C139301 * C43308) * C139557 +
            C88983 * C92566) *
               C13351) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C9304 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139426) *
              C822 +
          ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                C92566 +
            ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                C139557) *
               C139426 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C9304) *
              C823 +
          ((((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C13439 * C838 + C13351 * C948 + C13440 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C92566 +
            ((C119253 + C119254) * C63570 + (C119255 + C119256) * C139301) *
                C139557) *
               C9304 -
           (((C13440 * C69081 + C139555 * C69171 + C13439 * C20986 +
              C13351 * C21102) *
                 C139301 +
             (C13440 * C69080 + C139555 * C69170 + C13439 * C20984 +
              C13351 * C21100) *
                 C63570) *
                C139557 +
            ((C119256 + C119255) * C139301 + (C119254 + C119253) * C63570) *
                C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C9304 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139426) *
              C139346 * C5151 +
          ((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                C92566 +
            ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                C139557) *
               C139426 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C9304) *
              C139346 * C5152 +
          ((((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) *
                C92566 +
            ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
                C139557) *
               C9304 -
           (((C13440 * C6326 + C139555 * C6412 + C13439 * C1773 +
              C13351 * C1883) *
                 C139301 +
             (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
              C13351 * C1875) *
                 C63570) *
                C139557 +
            ((C17313 + C17312) * C139301 + (C17311 + C17310) * C63570) *
                C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C63570 +
            (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                C139301) *
               C92566 +
           ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
               C139557) *
              C10614 -
          (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
               C139557 +
           ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
               C92566) *
              C10615 +
          (((C110774 + C110773) * C63570 + (C110772 + C110771) * C139301) *
               C92566 +
           ((C121903 + C121904) * C63570 + (C121905 + C121906) * C139301) *
               C139557) *
              C10616 -
          (((C13440 * C88974 + C139555 * C89050 + C13439 * C43306 +
             C13351 * C43390) *
                C139301 +
            (C13440 * C88973 + C139555 * C89049 + C13439 * C43304 +
             C13351 * C43388) *
                C63570) *
               C139557 +
           ((C121906 + C121905) * C139301 + (C121904 + C121903) * C63570) *
               C92566) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[117] +=
        (-std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C9304 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139426) *
              C822 +
          ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                C13351 +
            ((C119363 + C119364) * C63570 + (C119365 + C119366) * C139301) *
                C139555) *
               C139426 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C9304) *
              C823 +
          ((((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
                C13351 +
            ((C115619 + C115620) * C63570 + (C115621 + C115622) * C139301) *
                C139555) *
               C9304 -
           (((C92703 * C69081 + C139557 * C69247 + C92702 * C24000 +
              C92566 * C24218) *
                 C139301 +
             (C92703 * C69080 + C139557 * C69246 + C92702 * C23998 +
              C92566 * C24216) *
                 C63570) *
                C139555 +
            ((C119366 + C119365) * C139301 + (C119364 + C119363) * C63570) *
                C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C9304 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139426) *
              C139346 * C5151 +
          ((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                C13351 +
            ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                C139555) *
               C139426 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          ((((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) *
                C13351 +
            ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
                C139555) *
               C9304 -
           (((C92703 * C6326 + C139557 * C6492 + C92702 * C4165 +
              C92566 * C4399) *
                 C139301 +
             (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
              C92566 * C4395) *
                 C63570) *
                C139555 +
            ((C96500 + C96499) * C139301 + (C96498 + C96497) * C63570) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C63570 +
            (C92702 * C112 + C92566 * C280 + C92703 * C1770 + C139557 * C1994) *
                C139301) *
               C13351 +
           ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
               C139555) *
              C10614 -
          (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
               C139555 +
           ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
             C92566 * C1994) *
                C139301 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C63570) *
               C13351) *
              C10615 +
          (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C63570 +
            (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
             C139557 * C10741) *
                C139301) *
               C13351 +
           ((C116359 + C116360) * C63570 + (C116361 + C116362) * C139301) *
               C139555) *
              C10616 -
          (((C92703 * C88974 + C139557 * C89130 + C92702 * C26694 +
             C92566 * C26840) *
                C139301 +
            (C92703 * C88973 + C139557 * C89129 + C92702 * C26692 +
             C92566 * C26838) *
                C63570) *
               C139555 +
           ((C92703 * C43306 + C139557 * C43470 + C92702 * C10623 +
             C92566 * C10741) *
                C139301 +
            (C92703 * C43304 + C139557 * C43468 + C92702 * C10620 +
             C92566 * C10738) *
                C63570) *
               C13351) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[117] += (-std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C9304 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139426) *
                         C822 +
                     (((C113831 + C113832 + C113833 + C113834) * C92566 +
                       (C116461 + C116462 + C116463 + C116464) * C139557) *
                          C139426 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C9304) *
                         C823 +
                     (((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                        C64380 * C139555) *
                           C92566 +
                       (C119465 + C119466 + C119467 + C119468) * C139557) *
                          C9304 -
                      (((C63570 * C69170 + C139301 * C69332) * C139555 +
                        (C63570 * C69080 + C139301 * C69081) * C13440 +
                        C69345 * C13351 + C69344 * C13439) *
                           C139557 +
                       (C119468 + C119467 + C119466 + C119465) * C92566) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C9304 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139426) *
                         C139346 * C5151 +
                     (((C110979 + C110980 + C110981 + C110982) * C92566 +
                       (C110983 + C110984 + C110985 + C110986) * C139557) *
                          C139426 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C9304) *
                         C139346 * C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C13439 +
                        (C63570 * C189 + C139301 * C362) * C13351 +
                        C65813 * C13440 + C65814 * C139555) *
                           C92566 +
                       (C112789 + C112790 + C112791 + C112792) * C139557) *
                          C9304 -
                      (((C63570 * C6409 + C139301 * C6569) * C139555 +
                        (C63570 * C6323 + C139301 * C6326) * C13440 +
                        (C63570 * C1875 + C139301 * C2103) * C13351 +
                        (C63570 * C1765 + C139301 * C1773) * C13439) *
                           C139557 +
                       (C112792 + C112791 + C112790 + C112789) * C92566) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C13439 +
                       (C63570 * C187 + C139301 * C360) * C13351 +
                       C64376 * C13440 + C64377 * C139555) *
                          C92566 +
                      (C110971 + C110972 + C110973 + C110974) * C139557) *
                         C10614 -
                     ((C110975 + C110976 + C110977 + C110978) * C139557 +
                      (C110974 + C110973 + C110972 + C110971) * C92566) *
                         C10615 +
                     ((C110978 + C110977 + C110976 + C110975) * C92566 +
                      (C122039 + C122040 + C122041 + C122042) * C139557) *
                         C10616 -
                     (((C63570 * C89049 + C139301 * C89197) * C139555 +
                       (C63570 * C88973 + C139301 * C88974) * C13440 +
                       (C63570 * C43388 + C139301 * C43538) * C13351 +
                       (C63570 * C43304 + C139301 * C43306) * C13439) *
                          C139557 +
                      (C122042 + C122041 + C122040 + C122039) * C92566) *
                         C10617) *
                    C139346 * C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[117] += (-std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C9304 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139426) *
                         C822 +
                     (((C113977 + C113978) * C139301 * C92566 +
                       (C116573 + C116574) * C139301 * C139557) *
                          C139426 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C9304) *
                         C823 +
                     (((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                        C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                           C139301 * C92566 +
                       (C119577 + C119578) * C139301 * C139557) *
                          C9304 -
                      ((C13676 * C69080 + C119571 + C119571 + C139555 * C69419 +
                        C13675 * C20984 + C119572 + C119572 + C13351 * C21426) *
                           C139301 * C139557 +
                       (C119578 + C119577) * C139301 * C92566) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C9304 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139426) *
                         C139346 * C5151 +
                     (((C15723 + C15722) * C139301 * C92566 +
                       (C15724 + C15725) * C139301 * C139557) *
                          C139426 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C9304) *
                         C139346 * C5152 +
                     (((C13715 + C13714) * C139301 * C92566 +
                       (C17618 + C17619) * C139301 * C139557) *
                          C9304 -
                      ((C13676 * C6323 + C15712 + C15712 + C139555 * C6646 +
                        C13675 * C1765 + C15713 + C15713 + C13351 * C2185) *
                           C139301 * C139557 +
                       (C17619 + C17618) * C139301 * C92566) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    (((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                       C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                          C139301 * C92566 +
                      (C111101 + C111102) * C139301 * C139557) *
                         C10614 -
                     ((C111103 + C111104) * C139301 * C139557 +
                      (C111102 + C111101) * C139301 * C92566) *
                         C10615 +
                     ((C111104 + C111103) * C139301 * C92566 +
                      (C122119 + C122120) * C139301 * C139557) *
                         C10616 -
                     ((C13676 * C88973 + C122113 + C122113 + C139555 * C89274 +
                       C13675 * C43304 + C122114 + C122114 + C13351 * C43618) *
                          C139301 * C139557 +
                      (C122120 + C122119) * C139301 * C92566) *
                         C10617) *
                    C139346 * C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C9304 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139426) *
              C822 +
          (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
            (C119363 + C119364) * C13440 + (C119681 + C119682) * C139555) *
               C139301 * C139426 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C9304) *
              C823 +
          (((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
            (C115619 + C115620) * C13440 + (C115827 + C115828) * C139555) *
               C139301 * C9304 -
           ((C92703 * C69170 + C139557 * C69497 + C92702 * C24114 +
             C92566 * C24544) *
                C139555 +
            (C92703 * C69080 + C139557 * C69246 + C92702 * C23998 +
             C92566 * C24216) *
                C13440 +
            (C119682 + C119681) * C13351 + (C119364 + C119363) * C13439) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C9304 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
            (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
               C139301 * C139426 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
            (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
               C139301 * C9304 -
           ((C92703 * C6409 + C139557 * C6726 + C92702 * C4277 +
             C92566 * C4731) *
                C139555 +
            (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
             C92566 * C4395) *
                C13440 +
            (C96814 + C96813) * C13351 + (C96498 + C96497) * C13439) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
               C13439 +
           (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
               C13351 +
           (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
              C139301 * C10614 -
          ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
           (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
            C92566 * C2292) *
               C13351 +
           (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
            C92566 * C1986) *
               C13439) *
              C139301 * C10615 +
          ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
            C139557 * C10738) *
               C13439 +
           (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
            C139557 * C10903) *
               C13351 +
           (C116359 + C116360) * C13440 + (C116677 + C116678) * C139555) *
              C139301 * C10616 -
          ((C92703 * C89049 + C139557 * C89353 + C92702 * C26768 +
            C92566 * C27048) *
               C139555 +
           (C92703 * C88973 + C139557 * C89129 + C92702 * C26692 +
            C92566 * C26838) *
               C13440 +
           (C92703 * C43388 + C139557 * C43695 + C92702 * C10682 +
            C92566 * C10903) *
               C13351 +
           (C92703 * C43304 + C139557 * C43468 + C92702 * C10620 +
            C92566 * C10738) *
               C13439) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[117] += (-std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C9304 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139426) *
                         C822 +
                     (((C114248 + C114247 + C114246 + C114245) * C13351 +
                       (C119781 + C119782 + C119783 + C119784) * C139555) *
                          C139426 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C9304) *
                         C823 +
                     (((C110330 + C110329 + C110328 + C110327) * C13351 +
                       (C115895 + C115896 + C115897 + C115898) * C139555) *
                          C9304 -
                      (((C63570 * C69246 + C139301 * C69575) * C139557 +
                        (C63570 * C69080 + C139301 * C69081) * C92703 +
                        C71852 * C92566 + C71615 * C92702) *
                           C139555 +
                       (C119784 + C119783 + C119782 + C119781) * C13351) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q)) -
                   (std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C9304 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139426) *
                         C139346 * C5151 +
                     (((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                        C78400 * C139557) *
                           C13351 +
                       (C114249 + C114250 + C114251 + C114252) * C139555) *
                          C139426 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C9304) *
                         C139346 * C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C92702 +
                        (C63570 * C276 + C139301 * C579) * C92566 +
                        C79917 * C92703 + C80217 * C139557) *
                           C13351 +
                       (C112197 + C112198 + C112199 + C112200) * C139555) *
                          C9304 -
                      (((C63570 * C6489 + C139301 * C6803) * C139557 +
                        (C63570 * C6323 + C139301 * C6326) * C92703 +
                        C79314 * C92566 + C79013 * C92702) *
                           C139555 +
                       ((C63570 * C1989 + C139301 * C2397) * C139557 +
                        (C63570 * C1765 + C139301 * C1773) * C92703 +
                        C80217 * C92566 + C79917 * C92702) *
                           C13351) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) +
                   (2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C92702 +
                       (C63570 * C274 + C139301 * C577) * C92566 +
                       C78053 * C92703 + C78397 * C139557) *
                          C13351 +
                      (C110323 + C110324 + C110325 + C110326) * C139555) *
                         C10614 -
                     ((C114245 + C114246 + C114247 + C114248) * C139555 +
                      (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                       C78053 * C92702) *
                          C13351) *
                         C10615 +
                     ((C78056 * C92702 + C78398 * C92566 + C89205 * C92703 +
                       C89424 * C139557) *
                          C13351 +
                      (C116777 + C116778 + C116779 + C116780) * C139555) *
                         C10616 -
                     (((C63570 * C89129 + C139301 * C89420) * C139557 +
                       (C63570 * C88973 + C139301 * C88974) * C92703 +
                       C83924 * C92566 + C83605 * C92702) *
                          C139555 +
                      ((C63570 * C43468 + C139301 * C43763) * C139557 +
                       (C63570 * C43304 + C139301 * C43306) * C92703 +
                       C89424 * C92566 + C89205 * C92702) *
                          C13351) *
                         C10617) *
                    C139346 * C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezy[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C9304 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139426) *
              C822 +
          (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
            (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
               C139301 * C139426 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C9304) *
              C823 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C92702 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C92566 +
            (C119253 + C119254) * C92703 + (C119887 + C119888) * C139557) *
               C139301 * C9304 -
           ((C13440 * C69246 + C139555 * C69660 + C13439 * C21202 +
             C13351 * C21739) *
                C139557 +
            (C13440 * C69080 + C139555 * C69170 + C13439 * C20984 +
             C13351 * C21100) *
                C92703 +
            (C119888 + C119887) * C92566 + (C119254 + C119253) * C92702) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C9304 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
            (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
               C139301 * C139426 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
            (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
               C139301 * C9304 -
           ((C13440 * C6489 + C139555 * C6880 + C13439 * C1989 +
             C13351 * C2479) *
                C139557 +
            (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
             C13351 * C1875) *
                C92703 +
            (C17923 + C17922) * C92566 + (C17311 + C17310) * C92702) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
               C92702 +
           (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
               C92566 +
           (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
              C139301 * C10614 -
          ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
           (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
              C139301 * C10615 +
          ((C110774 + C110773) * C92702 + (C111410 + C111409) * C92566 +
           (C121903 + C121904) * C92703 + (C122323 + C122324) * C139557) *
              C139301 * C10616 -
          ((C13440 * C89129 + C139555 * C89490 + C13439 * C43468 +
            C13351 * C43837) *
               C139557 +
           (C13440 * C88973 + C139555 * C89049 + C13439 * C43304 +
            C13351 * C43388) *
               C92703 +
           (C122324 + C122323) * C92566 + (C121904 + C121903) * C92702) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[117] +=
        (-std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C9304 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139426) *
              C822 +
          (((C114528 + C114527) * C13351 + (C119997 + C119998) * C139555) *
               C139301 * C139426 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C9304) *
              C823 +
          (((C110554 + C110553) * C13351 + (C116041 + C116042) * C139555) *
               C139301 * C9304 -
           ((C93167 * C69080 + C119991 + C119991 + C139557 * C69735 +
             C93166 * C23998 + C119992 + C119992 + C92566 * C24853) *
                C139555 +
            (C119998 + C119997) * C13351) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C9304 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
               C139301 * C139426 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) *
               C139301 * C9304 -
           ((C93167 * C6323 + C98343 + C98343 + C139557 * C6957 +
             C93166 * C4161 + C98344 + C98344 + C92566 * C5057) *
                C139555 +
            (C97130 + C97129) * C13351) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
            C93170 + C93170 + C139557 * C2578) *
               C13351 +
           (C110551 + C110552) * C139555) *
              C139301 * C10614 -
          ((C114527 + C114528) * C139555 +
           (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
            C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
               C13351) *
              C139301 * C10615 +
          ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
            C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
               C13351 +
           (C116993 + C116994) * C139555) *
              C139301 * C10616 -
          ((C93167 * C88973 + C122391 + C122391 + C139557 * C89563 +
            C93166 * C26692 + C122392 + C122392 + C92566 * C27252) *
               C139555 +
           (C93167 * C43304 + C106063 + C106063 + C139557 * C43908 +
            C93166 * C10620 + C106064 + C106064 + C92566 * C11062) *
               C13351) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C139562 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139563 +
           ((C77705 * C92566 + C88983 * C139557) * C13351 +
            (C116141 + C116142) * C139555) *
               C12024) *
              C139346 * C139521 +
          (((C77706 * C92566 + C77707 * C139557) * C13351 +
            (C113415 + C113416) * C139555) *
               C139563 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C139562 -
           (((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C139557 +
             C77708 * C92566) *
                C139555 +
            ((C63569 * C10619 + C77693 + C77693 + C139301 * C10625) * C139557 +
             C77707 * C92566) *
                C13351) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C139562 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139563 +
           (((C110774 + C110773) * C63570 + (C110772 + C110771) * C139301) *
                C92566 +
            ((C121903 + C121904) * C63570 + (C121905 + C121906) * C139301) *
                C139557) *
               C12024) *
              C139346 * C139521 +
          ((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                C92566 +
            ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                C139557) *
               C139563 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C139562 -
           (((C13440 * C26693 + C139555 * C26769 + C13439 * C10622 +
              C13351 * C10684) *
                 C139301 +
             (C13440 * C26691 + C139555 * C26767 + C13439 * C10619 +
              C13351 * C10681) *
                 C63570) *
                C139557 +
            ((C15393 + C15392) * C139301 + (C15391 + C15390) * C63570) *
                C92566) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C139562 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139563 +
           (((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
              C139557 * C10738) *
                 C63570 +
             (C92702 * C1771 + C92566 * C1995 + C92703 * C10623 +
              C139557 * C10741) *
                 C139301) *
                C13351 +
            ((C116359 + C116360) * C63570 + (C116361 + C116362) * C139301) *
                C139555) *
               C12024) *
              C139346 * C139521 +
          ((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                C13351 +
            ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                C139555) *
               C139563 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C139562 -
           (((C92703 * C26693 + C139557 * C26839 + C92702 * C6327 +
              C92566 * C6493) *
                 C139301 +
             (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
              C92566 * C6490) *
                 C63570) *
                C139555 +
            ((C94542 + C94541) * C139301 + (C94540 + C94539) * C63570) *
                C13351) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[118] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C139562 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139563 +
                      ((C110978 + C110977 + C110976 + C110975) * C92566 +
                       (C122039 + C122040 + C122041 + C122042) * C139557) *
                          C12024) *
                         C139346 * C139521 +
                     (((C110979 + C110980 + C110981 + C110982) * C92566 +
                       (C110983 + C110984 + C110985 + C110986) * C139557) *
                          C139563 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C139562 -
                      (((C63570 * C26767 + C139301 * C26907) * C139555 +
                        (C63570 * C26691 + C139301 * C26693) * C13440 +
                        (C63570 * C10681 + C139301 * C10793) * C13351 +
                        (C63570 * C10619 + C139301 * C10622) * C13439) *
                           C139557 +
                       (C110986 + C110985 + C110984 + C110983) * C92566) *
                          C12024) *
                         C139346 * C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[118] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C139562 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139563 +
                      ((C111104 + C111103) * C139301 * C92566 +
                       (C122119 + C122120) * C139301 * C139557) *
                          C12024) *
                         C139346 * C139521 +
                     (((C15723 + C15722) * C139301 * C92566 +
                       (C15724 + C15725) * C139301 * C139557) *
                          C139563 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C139562 -
                      ((C13676 * C26691 + C26978 + C26978 + C139555 * C26975 +
                        C13675 * C10619 + C26979 + C26979 + C13351 * C10846) *
                           C139301 * C139557 +
                       (C15725 + C15724) * C139301 * C92566) *
                          C12024) *
                         C139346 * C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C139562 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139563 +
           ((C92702 * C1763 + C92566 * C1987 + C92703 * C10620 +
             C139557 * C10738) *
                C13439 +
            (C92702 * C1873 + C92566 * C2293 + C92703 * C10682 +
             C139557 * C10903) *
                C13351 +
            (C116359 + C116360) * C13440 + (C116677 + C116678) * C139555) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
            (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
               C139301 * C139563 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C139562 -
           ((C92703 * C26767 + C139557 * C27047 + C92702 * C6410 +
             C92566 * C6727) *
                C139555 +
            (C92703 * C26691 + C139557 * C26837 + C92702 * C6324 +
             C92566 * C6490) *
                C13440 +
            (C94904 + C94903) * C13351 + (C94540 + C94539) * C13439) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[118] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C139562 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139563 +
                      ((C78056 * C92702 + C78398 * C92566 + C89205 * C92703 +
                        C89424 * C139557) *
                           C13351 +
                       (C116777 + C116778 + C116779 + C116780) * C139555) *
                          C12024) *
                         C139346 * C139521 +
                     (((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                        C78400 * C139557) *
                           C13351 +
                       (C114249 + C114250 + C114251 + C114252) * C139555) *
                          C139563 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C139562 -
                      (((C63570 * C26837 + C139301 * C27115) * C139557 +
                        (C63570 * C26691 + C139301 * C26693) * C92703 +
                        C78401 * C92566 + C78061 * C92702) *
                           C139555 +
                       ((C63570 * C10737 + C139301 * C10955) * C139557 +
                        (C63570 * C10619 + C139301 * C10622) * C92703 +
                        C78400 * C92566 + C78059 * C92702) *
                           C13351) *
                          C12024) *
                         C139346 * C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezy[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C139562 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139563 +
           ((C110774 + C110773) * C92702 + (C111410 + C111409) * C92566 +
            (C121903 + C121904) * C92703 + (C122323 + C122324) * C139557) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
            (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
               C139301 * C139563 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C139562 -
           ((C13440 * C26837 + C139555 * C27183 + C13439 * C10737 +
             C13351 * C11008) *
                C139557 +
            (C13440 * C26691 + C139555 * C26767 + C13439 * C10619 +
             C13351 * C10681) *
                C92703 +
            (C16042 + C16041) * C92566 + (C15391 + C15390) * C92702) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[118] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C139562 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139563 +
           ((C93166 * C1763 + C95239 + C95239 + C92566 * C2579 +
             C93167 * C10620 + C95240 + C95240 + C139557 * C11062) *
                C13351 +
            (C116993 + C116994) * C139555) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
               C139301 * C139563 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C139562 -
           ((C93167 * C26691 + C100719 + C100719 + C139557 * C27251 +
             C93166 * C6324 + C100720 + C100720 + C92566 * C6958) *
                C139555 +
            (C95262 + C95261) * C13351) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C9304 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139426) *
              C139346 * C5151 +
          (((C77706 * C92566 + C77707 * C139557) * C13351 +
            (C113415 + C113416) * C139555) *
               C139426 -
           ((C109696 + C109695) * C139555 +
            (C77706 * C139557 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C92566) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          ((((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C92566 +
             C79616 * C139557) *
                C13351 +
            (C111607 + C111608) * C139555) *
               C9304 -
           (((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C139557 +
             C78713 * C92566) *
                C139555 +
            ((C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C139557 +
             C79616 * C92566) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C92566 +
             C77704 * C139557) *
                C13351 +
            (C109691 + C109692) * C139555) *
               C9304 -
           ((C113413 + C113414) * C139555 +
            (C77705 * C139557 + C77704 * C92566) * C13351) *
               C139426) *
              C822 +
          (((C113414 + C113413) * C13351 + (C119145 + C119146) * C139555) *
               C139426 -
           ((C109693 + C109694) * C139555 + (C109692 + C109691) * C13351) *
               C9304) *
              C823 +
          (((C109694 + C109693) * C13351 + (C115477 + C115478) * C139555) *
               C9304 -
           (((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C139557 +
             C71373 * C92566) *
                C139555 +
            (C119146 + C119145) * C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C9304 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139426) *
              C139346 * C5151 +
          ((((C15389 + C15388) * C63570 + (C15387 + C15386) * C139301) *
                C92566 +
            ((C15390 + C15391) * C63570 + (C15392 + C15393) * C139301) *
                C139557) *
               C139426 -
           (((C15386 + C15387) * C139301 + (C15388 + C15389) * C63570) *
                C139557 +
            ((C13469 + C13468) * C139301 + (C13467 + C13466) * C63570) *
                C92566) *
               C9304) *
              C139346 * C5152 +
          ((((C13473 + C13472) * C63570 + (C13471 + C13470) * C139301) *
                C92566 +
            ((C17310 + C17311) * C63570 + (C17312 + C17313) * C139301) *
                C139557) *
               C9304 -
           (((C13440 * C6326 + C139555 * C6412 + C13439 * C1773 +
              C13351 * C1883) *
                 C139301 +
             (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
              C13351 * C1875) *
                 C63570) *
                C139557 +
            ((C17313 + C17312) * C139301 + (C17311 + C17310) * C63570) *
                C92566) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                 C63570 +
             (C13439 * C112 + C13351 * C193 + C13440 * C837 + C139555 * C947) *
                 C139301) *
                C92566 +
            ((C110767 + C110768) * C63570 + (C110769 + C110770) * C139301) *
                C139557) *
               C9304 -
           (((C110771 + C110772) * C139301 + (C110773 + C110774) * C63570) *
                C139557 +
            ((C110770 + C110769) * C139301 + (C110768 + C110767) * C63570) *
                C92566) *
               C139426) *
              C822 +
          ((((C113555 + C113556) * C63570 + (C113557 + C113558) * C139301) *
                C92566 +
            ((C116249 + C116250) * C63570 + (C116251 + C116252) * C139301) *
                C139557) *
               C139426 -
           (((C113558 + C113557) * C139301 + (C113556 + C113555) * C63570) *
                C139557 +
            ((C13440 * C838 + C139555 * C948 + C13439 * C837 + C13351 * C947) *
                 C139301 +
             (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                 C63570) *
                C92566) *
               C9304) *
              C823 +
          ((((C13439 * C830 + C13351 * C940 + C13440 * C5803 +
              C139555 * C5865) *
                 C63570 +
             (C13439 * C838 + C13351 * C948 + C13440 * C5806 +
              C139555 * C5868) *
                 C139301) *
                C92566 +
            ((C119253 + C119254) * C63570 + (C119255 + C119256) * C139301) *
                C139557) *
               C9304 -
           (((C13440 * C69081 + C139555 * C69171 + C13439 * C20986 +
              C13351 * C21102) *
                 C139301 +
             (C13440 * C69080 + C139555 * C69170 + C13439 * C20984 +
              C13351 * C21100) *
                 C63570) *
                C139557 +
            ((C119256 + C119255) * C139301 + (C119254 + C119253) * C63570) *
                C92566) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C9304 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139426) *
              C139346 * C5151 +
          ((((C94538 + C94537) * C63570 + (C94536 + C94535) * C139301) *
                C13351 +
            ((C97537 + C97538) * C63570 + (C97539 + C97540) * C139301) *
                C139555) *
               C139426 -
           (((C93519 + C93520) * C139301 + (C93521 + C93522) * C63570) *
                C139555 +
            ((C92732 + C92731) * C139301 + (C92730 + C92729) * C63570) *
                C13351) *
               C9304) *
              C139346 * C5152 +
          ((((C92736 + C92735) * C63570 + (C92734 + C92733) * C139301) *
                C13351 +
            ((C95565 + C95566) * C63570 + (C95567 + C95568) * C139301) *
                C139555) *
               C9304 -
           (((C92703 * C6326 + C139557 * C6492 + C92702 * C4165 +
              C92566 * C4399) *
                 C139301 +
             (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
              C92566 * C4395) *
                 C63570) *
                C139555 +
            ((C96500 + C96499) * C139301 + (C96498 + C96497) * C63570) *
                C13351) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C92702 * C106 + C92566 * C274 + C92703 * C1762 +
              C139557 * C1986) *
                 C63570 +
             (C92702 * C112 + C92566 * C280 + C92703 * C1770 +
              C139557 * C1994) *
                 C139301) *
                C13351 +
            ((C109911 + C109912) * C63570 + (C109913 + C109914) * C139301) *
                C139555) *
               C9304 -
           (((C113697 + C113698) * C139301 + (C113699 + C113700) * C63570) *
                C139555 +
            ((C92703 * C1771 + C139557 * C1995 + C92702 * C1770 +
              C92566 * C1994) *
                 C139301 +
             (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
              C92566 * C1986) *
                 C63570) *
                C13351) *
               C139426) *
              C822 +
          ((((C113700 + C113699) * C63570 + (C113698 + C113697) * C139301) *
                C13351 +
            ((C119363 + C119364) * C63570 + (C119365 + C119366) * C139301) *
                C139555) *
               C139426 -
           (((C109915 + C109916) * C139301 + (C109917 + C109918) * C63570) *
                C139555 +
            ((C109914 + C109913) * C139301 + (C109912 + C109911) * C63570) *
                C13351) *
               C9304) *
              C823 +
          ((((C109918 + C109917) * C63570 + (C109916 + C109915) * C139301) *
                C13351 +
            ((C115619 + C115620) * C63570 + (C115621 + C115622) * C139301) *
                C139555) *
               C9304 -
           (((C92703 * C69081 + C139557 * C69247 + C92702 * C24000 +
              C92566 * C24218) *
                 C139301 +
             (C92703 * C69080 + C139557 * C69246 + C92702 * C23998 +
              C92566 * C24216) *
                 C63570) *
                C139555 +
            ((C119366 + C119365) * C139301 + (C119364 + C119363) * C63570) *
                C13351) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C9304 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139426) *
                         C139346 * C5151 +
                     (((C110979 + C110980 + C110981 + C110982) * C92566 +
                       (C110983 + C110984 + C110985 + C110986) * C139557) *
                          C139426 -
                      ((C110982 + C110981 + C110980 + C110979) * C139557 +
                       (C64383 * C139555 + C64382 * C13440 +
                        (C63570 * C188 + C139301 * C361) * C13351 +
                        (C63570 * C107 + C139301 * C113) * C13439) *
                           C92566) *
                          C9304) *
                         C139346 * C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C13439 +
                        (C63570 * C189 + C139301 * C362) * C13351 +
                        C65813 * C13440 + C65814 * C139555) *
                           C92566 +
                       (C112789 + C112790 + C112791 + C112792) * C139557) *
                          C9304 -
                      (((C63570 * C6409 + C139301 * C6569) * C139555 +
                        (C63570 * C6323 + C139301 * C6326) * C13440 +
                        (C63570 * C1875 + C139301 * C2103) * C13351 +
                        (C63570 * C1765 + C139301 * C1773) * C13439) *
                           C139557 +
                       (C112792 + C112791 + C112790 + C112789) * C92566) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C13439 +
                        (C63570 * C187 + C139301 * C360) * C13351 +
                        C64376 * C13440 + C64377 * C139555) *
                           C92566 +
                       (C110971 + C110972 + C110973 + C110974) * C139557) *
                          C9304 -
                      ((C110975 + C110976 + C110977 + C110978) * C139557 +
                       (C110974 + C110973 + C110972 + C110971) * C92566) *
                          C139426) *
                         C822 +
                     (((C113831 + C113832 + C113833 + C113834) * C92566 +
                       (C116461 + C116462 + C116463 + C116464) * C139557) *
                          C139426 -
                      ((C113834 + C113833 + C113832 + C113831) * C139557 +
                       (C64379 * C139555 + C64378 * C13440 + C64377 * C13351 +
                        C64376 * C13439) *
                           C92566) *
                          C9304) *
                         C823 +
                     (((C64378 * C13439 + C64379 * C13351 + C64381 * C13440 +
                        C64380 * C139555) *
                           C92566 +
                       (C119465 + C119466 + C119467 + C119468) * C139557) *
                          C9304 -
                      (((C63570 * C69170 + C139301 * C69332) * C139555 +
                        (C63570 * C69080 + C139301 * C69081) * C13440 +
                        C69345 * C13351 + C69344 * C13439) *
                           C139557 +
                       (C119468 + C119467 + C119466 + C119465) * C92566) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C9304 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139426) *
                         C139346 * C5151 +
                     (((C15723 + C15722) * C139301 * C92566 +
                       (C15724 + C15725) * C139301 * C139557) *
                          C139426 -
                      ((C15722 + C15723) * C139301 * C139557 +
                       (C13713 + C13712) * C139301 * C92566) *
                          C9304) *
                         C139346 * C5152 +
                     (((C13715 + C13714) * C139301 * C92566 +
                       (C17618 + C17619) * C139301 * C139557) *
                          C9304 -
                      ((C13676 * C6323 + C15712 + C15712 + C139555 * C6646 +
                        C13675 * C1765 + C15713 + C15713 + C13351 * C2185) *
                           C139301 * C139557 +
                       (C17619 + C17618) * C139301 * C92566) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C13675 * C106 + C13678 + C13678 + C13351 * C417 +
                        C13676 * C829 + C13679 + C13679 + C139555 * C1249) *
                           C139301 * C92566 +
                       (C111101 + C111102) * C139301 * C139557) *
                          C9304 -
                      ((C111103 + C111104) * C139301 * C139557 +
                       (C111102 + C111101) * C139301 * C92566) *
                          C139426) *
                         C822 +
                     (((C113977 + C113978) * C139301 * C92566 +
                       (C116573 + C116574) * C139301 * C139557) *
                          C139426 -
                      ((C113978 + C113977) * C139301 * C139557 +
                       (C13676 * C830 + C14668 + C14668 + C139555 * C1250 +
                        C13675 * C829 + C14669 + C14669 + C13351 * C1249) *
                           C139301 * C92566) *
                          C9304) *
                         C823 +
                     (((C13675 * C830 + C14670 + C14670 + C13351 * C1250 +
                        C13676 * C5803 + C14671 + C14671 + C139555 * C6030) *
                           C139301 * C92566 +
                       (C119577 + C119578) * C139301 * C139557) *
                          C9304 -
                      ((C13676 * C69080 + C119571 + C119571 + C139555 * C69419 +
                        C13675 * C20984 + C119572 + C119572 + C13351 * C21426) *
                           C139301 * C139557 +
                       (C119578 + C119577) * C139301 * C92566) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C9304 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C94538 + C94537) * C13439 + (C94902 + C94901) * C13351 +
            (C97537 + C97538) * C13440 + (C97939 + C97940) * C139555) *
               C139301 * C139426 -
           ((C93829 + C93830) * C139555 + (C93521 + C93522) * C13440 +
            (C92952 + C92951) * C13351 + (C92730 + C92729) * C13439) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C92736 + C92735) * C13439 + (C92954 + C92953) * C13351 +
            (C95565 + C95566) * C13440 + (C95867 + C95868) * C139555) *
               C139301 * C9304 -
           ((C92703 * C6409 + C139557 * C6726 + C92702 * C4277 +
             C92566 * C4731) *
                C139555 +
            (C92703 * C6323 + C139557 * C6489 + C92702 * C4161 +
             C92566 * C4395) *
                C13440 +
            (C96814 + C96813) * C13351 + (C96498 + C96497) * C13439) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92702 * C106 + C92566 * C274 + C92703 * C1762 + C139557 * C1986) *
                C13439 +
            (C92702 * C187 + C92566 * C499 + C92703 * C1872 + C139557 * C2292) *
                C13351 +
            (C109911 + C109912) * C13440 + (C110221 + C110222) * C139555) *
               C139301 * C9304 -
           ((C114113 + C114114) * C139555 + (C113699 + C113700) * C13440 +
            (C92703 * C1873 + C139557 * C2293 + C92702 * C1872 +
             C92566 * C2292) *
                C13351 +
            (C92703 * C1763 + C139557 * C1987 + C92702 * C1762 +
             C92566 * C1986) *
                C13439) *
               C139301 * C139426) *
              C822 +
          (((C113700 + C113699) * C13439 + (C114114 + C114113) * C13351 +
            (C119363 + C119364) * C13440 + (C119681 + C119682) * C139555) *
               C139301 * C139426 -
           ((C110223 + C110224) * C139555 + (C109917 + C109918) * C13440 +
            (C110222 + C110221) * C13351 + (C109912 + C109911) * C13439) *
               C139301 * C9304) *
              C823 +
          (((C109918 + C109917) * C13439 + (C110224 + C110223) * C13351 +
            (C115619 + C115620) * C13440 + (C115827 + C115828) * C139555) *
               C139301 * C9304 -
           ((C92703 * C69170 + C139557 * C69497 + C92702 * C24114 +
             C92566 * C24544) *
                C139555 +
            (C92703 * C69080 + C139557 * C69246 + C92702 * C23998 +
             C92566 * C24216) *
                C13440 +
            (C119682 + C119681) * C13351 + (C119364 + C119363) * C13439) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[119] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C9304 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139426) *
                         C139346 * C5151 +
                     (((C78057 * C92702 + C78399 * C92566 + C78059 * C92703 +
                        C78400 * C139557) *
                           C13351 +
                       (C114249 + C114250 + C114251 + C114252) * C139555) *
                          C139426 -
                      ((C110334 + C110333 + C110332 + C110331) * C139555 +
                       (C78399 * C139557 + C78057 * C92703 +
                        (C63570 * C275 + C139301 * C578) * C92566 +
                        (C63570 * C107 + C139301 * C113) * C92702) *
                           C13351) *
                          C9304) *
                         C139346 * C5152 +
                     ((((C63570 * C108 + C139301 * C114) * C92702 +
                        (C63570 * C276 + C139301 * C579) * C92566 +
                        C79917 * C92703 + C80217 * C139557) *
                           C13351 +
                       (C112197 + C112198 + C112199 + C112200) * C139555) *
                          C9304 -
                      (((C63570 * C6489 + C139301 * C6803) * C139557 +
                        (C63570 * C6323 + C139301 * C6326) * C92703 +
                        C79314 * C92566 + C79013 * C92702) *
                           C139555 +
                       ((C63570 * C1989 + C139301 * C2397) * C139557 +
                        (C63570 * C1765 + C139301 * C1773) * C92703 +
                        C80217 * C92566 + C79917 * C92702) *
                           C13351) *
                          C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C92702 +
                        (C63570 * C274 + C139301 * C577) * C92566 +
                        C78053 * C92703 + C78397 * C139557) *
                           C13351 +
                       (C110323 + C110324 + C110325 + C110326) * C139555) *
                          C9304 -
                      ((C114245 + C114246 + C114247 + C114248) * C139555 +
                       (C78398 * C139557 + C78056 * C92703 + C78397 * C92566 +
                        C78053 * C92702) *
                           C13351) *
                          C139426) *
                         C822 +
                     (((C114248 + C114247 + C114246 + C114245) * C13351 +
                       (C119781 + C119782 + C119783 + C119784) * C139555) *
                          C139426 -
                      ((C110327 + C110328 + C110329 + C110330) * C139555 +
                       (C110326 + C110325 + C110324 + C110323) * C13351) *
                          C9304) *
                         C823 +
                     (((C110330 + C110329 + C110328 + C110327) * C13351 +
                       (C115895 + C115896 + C115897 + C115898) * C139555) *
                          C9304 -
                      (((C63570 * C69246 + C139301 * C69575) * C139557 +
                        (C63570 * C69080 + C139301 * C69081) * C92703 +
                        C71852 * C92566 + C71615 * C92702) *
                           C139555 +
                       (C119784 + C119783 + C119782 + C119781) * C13351) *
                          C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezy[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C9304 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C15389 + C15388) * C92702 + (C16040 + C16039) * C92566 +
            (C15390 + C15391) * C92703 + (C16041 + C16042) * C139557) *
               C139301 * C139426 -
           ((C16039 + C16040) * C139557 + (C15388 + C15389) * C92703 +
            (C13941 + C13940) * C92566 + (C13467 + C13466) * C92702) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C13473 + C13472) * C92702 + (C13943 + C13942) * C92566 +
            (C17310 + C17311) * C92703 + (C17922 + C17923) * C139557) *
               C139301 * C9304 -
           ((C13440 * C6489 + C139555 * C6880 + C13439 * C1989 +
             C13351 * C2479) *
                C139557 +
            (C13440 * C6323 + C139555 * C6409 + C13439 * C1765 +
             C13351 * C1875) *
                C92703 +
            (C17923 + C17922) * C92566 + (C17311 + C17310) * C92702) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13439 * C106 + C13351 * C187 + C13440 * C829 + C139555 * C939) *
                C92702 +
            (C13439 * C274 + C13351 * C633 + C13440 * C1053 + C139555 * C1543) *
                C92566 +
            (C110767 + C110768) * C92703 + (C111407 + C111408) * C139557) *
               C139301 * C9304 -
           ((C111409 + C111410) * C139557 + (C110773 + C110774) * C92703 +
            (C111408 + C111407) * C92566 + (C110768 + C110767) * C92702) *
               C139301 * C139426) *
              C822 +
          (((C113555 + C113556) * C92702 + (C114387 + C114388) * C92566 +
            (C116249 + C116250) * C92703 + (C116883 + C116884) * C139557) *
               C139301 * C139426 -
           ((C114388 + C114387) * C139557 + (C113556 + C113555) * C92703 +
            (C13440 * C1054 + C139555 * C1544 + C13439 * C1053 +
             C13351 * C1543) *
                C92566 +
            (C13440 * C830 + C139555 * C940 + C13439 * C829 + C13351 * C939) *
                C92702) *
               C139301 * C9304) *
              C823 +
          (((C13439 * C830 + C13351 * C940 + C13440 * C5803 + C139555 * C5865) *
                C92702 +
            (C13439 * C1054 + C13351 * C1544 + C13440 * C5921 +
             C139555 * C6192) *
                C92566 +
            (C119253 + C119254) * C92703 + (C119887 + C119888) * C139557) *
               C139301 * C9304 -
           ((C13440 * C69246 + C139555 * C69660 + C13439 * C21202 +
             C13351 * C21739) *
                C139557 +
            (C13440 * C69080 + C139555 * C69170 + C13439 * C20984 +
             C13351 * C21100) *
                C92703 +
            (C119888 + C119887) * C92566 + (C119254 + C119253) * C92702) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[119] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C9304 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C95260 + C95259) * C13351 + (C98349 + C98350) * C139555) *
               C139301 * C139426 -
           ((C94163 + C94164) * C139555 + (C93204 + C93203) * C13351) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C93206 + C93205) * C13351 + (C96177 + C96178) * C139555) *
               C139301 * C9304 -
           ((C93167 * C6323 + C98343 + C98343 + C139557 * C6957 +
             C93166 * C4161 + C98344 + C98344 + C92566 * C5057) *
                C139555 +
            (C97130 + C97129) * C13351) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C93166 * C106 + C93169 + C93169 + C92566 * C712 + C93167 * C1762 +
             C93170 + C93170 + C139557 * C2578) *
                C13351 +
            (C110551 + C110552) * C139555) *
               C139301 * C9304 -
           ((C114527 + C114528) * C139555 +
            (C93167 * C1763 + C95237 + C95237 + C139557 * C2579 +
             C93166 * C1762 + C95238 + C95238 + C92566 * C2578) *
                C13351) *
               C139301 * C139426) *
              C822 +
          (((C114528 + C114527) * C13351 + (C119997 + C119998) * C139555) *
               C139301 * C139426 -
           ((C110553 + C110554) * C139555 + (C110552 + C110551) * C13351) *
               C139301 * C9304) *
              C823 +
          (((C110554 + C110553) * C13351 + (C116041 + C116042) * C139555) *
               C139301 * C9304 -
           ((C93167 * C69080 + C119991 + C119991 + C139557 * C69735 +
             C93166 * C23998 + C119992 + C119992 + C92566 * C24853) *
                C139555 +
            (C119998 + C119997) * C13351) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139362 * C139529 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139362 * C139398) *
              C139558 +
          ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
               C139362 * C139398 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
            C79616 * C125377 +
            (C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C125378) *
               C139465 * C139362 * C139529 -
           ((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C125378 +
            C78713 * C125377 + C65575 * C125376) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C63570 +
                        (C186 * C112 + C139465 * C193) * C139301) *
                           C125376 +
                       (C126631 + C126632) * C125377 + C126643 * C125378) *
                          C139362 * C139529 -
                      ((C37809 * C139301 + C37808 * C63570) * C125378 +
                       (C35151 * C139301 + C35150 * C63570) * C125377 +
                       ((C186 * C837 + C139465 * C947) * C139301 +
                        (C186 * C829 + C139465 * C939) * C63570) *
                           C125376) *
                          C139362 * C139398) *
                         C139558 +
                     (((C973 * C63570 + C972 * C139301) * C125376 +
                       (C4292 * C63570 + C4293 * C139301) * C125377 +
                       (C35152 * C63570 + C35153 * C139301) * C125378) *
                          C139362 * C139398 -
                      (C126644 * C125378 + (C126638 + C126637) * C125377 +
                       (C217 * C139301 + C216 * C63570) * C125376) *
                          C139362 * C139529) *
                         C139559 +
                     (((C218 * C63570 + C219 * C139301) * C125376 +
                       (C1904 * C63570 + C1903 * C139301) * C125377 +
                       (C1909 * C63570 + C1910 * C139301) * C125378) *
                          C139362 * C139529 -
                      (((C186 * C6326 + C139465 * C6412) * C139301 +
                        (C186 * C6323 + C139465 * C6409) * C63570) *
                           C125378 +
                       (C4295 * C139301 + C4294 * C63570) * C125377 +
                       (C970 * C139301 + C971 * C63570) * C125376) *
                          C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eexz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C139362 * C139529 -
                      ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                        C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                           C139301 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C63570) *
                          C139465 * C139362 * C139398) *
                         C139558 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C63570 +
                       (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
                        C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                           C139301) *
                          C139465 * C139362 * C139398 -
                      ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                        C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                           C139301 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C63570) *
                          C139465 * C139362 * C139529) *
                         C139559 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C63570 +
                       (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
                        C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                           C139301) *
                          C139465 * C139362 * C139529 -
                      ((C125482 * C6326 + C125378 * C6492 + C125481 * C4165 +
                        C125377 * C4399 + C125480 * C835 + C125376 * C1059) *
                           C139301 +
                       (C125482 * C6323 + C125378 * C6489 + C125481 * C4161 +
                        C125377 * C4395 + C125480 * C827 + C125376 * C1051) *
                           C63570) *
                          C139465 * C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C186 +
                        (C63570 * C187 + C139301 * C360) * C139465) *
                           C125376 +
                       (C126793 + C126794) * C125377 + C126807 * C125378) *
                          C139362 * C139529 -
                      ((C69343 * C139465 + C69342 * C186) * C125378 +
                       (C67316 * C139465 + C67317 * C186) * C125377 +
                       (C64377 * C139465 + C64376 * C186) * C125376) *
                          C139362 * C139398) *
                         C139558 +
                     (((C64382 * C186 + C64383 * C139465) * C125376 +
                       (C67318 * C186 + C67319 * C139465) * C125377 +
                       (C78061 * C186 + C78062 * C139465) * C125378) *
                          C139362 * C139398 -
                      (C126810 * C125378 + (C126800 + C126799) * C125377 +
                       ((C63570 * C188 + C139301 * C361) * C139465 +
                        (C63570 * C107 + C139301 * C113) * C186) *
                           C125376) *
                          C139362 * C139529) *
                         C139559 +
                     ((((C63570 * C108 + C139301 * C114) * C186 +
                        (C63570 * C189 + C139301 * C362) * C139465) *
                           C125376 +
                       (C79917 * C186 + C79918 * C139465) * C125377 +
                       ((C63570 * C1765 + C139301 * C1773) * C186 +
                        (C63570 * C1875 + C139301 * C2103) * C139465) *
                           C125378) *
                          C139362 * C139529 -
                      (((C63570 * C6409 + C139301 * C6569) * C139465 +
                        (C63570 * C6323 + C139301 * C6326) * C186) *
                           C125378 +
                       (C79014 * C139465 + C79013 * C186) * C125377 +
                       (C65814 * C139465 + C65813 * C186) * C125376) *
                          C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139362 * C139529 -
           (C38113 * C139301 * C125378 + C35569 * C139301 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139362 * C139398) *
              C139558 +
          ((C1281 * C139301 * C125376 + C4630 * C139301 * C125377 +
            C35570 * C139301 * C125378) *
               C139362 * C139398 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C139362 * C139529) *
              C139559 +
          ((C447 * C139301 * C125376 + C2213 * C139301 * C125377 +
            C2216 * C139301 * C125378) *
               C139362 * C139529 -
           ((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139301 *
                C125378 +
            C4631 * C139301 * C125377 + C1280 * C139301 * C125376) *
               C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C139362 * C139529 -
                      ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                        C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                           C139465 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C186) *
                          C139301 * C139362 * C139398) *
                         C139558 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C186 +
                       (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
                        C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                           C139465) *
                          C139301 * C139362 * C139398 -
                      ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                        C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                           C139465 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C186) *
                          C139301 * C139362 * C139529) *
                         C139559 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C186 +
                       (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
                        C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                           C139465) *
                          C139301 * C139362 * C139529 -
                      ((C125482 * C6409 + C125378 * C6726 + C125481 * C4277 +
                        C125377 * C4731 + C125480 * C937 + C125376 * C1357) *
                           C139465 +
                       (C125482 * C6323 + C125378 * C6489 + C125481 * C4161 +
                        C125377 * C4395 + C125480 * C827 + C125376 * C1051) *
                           C186) *
                          C139301 * C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139362 * C139529 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139362 * C139398) *
              C139558 +
          ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
            C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
               C139465 * C139362 * C139398 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139362 * C139529) *
              C139559 +
          (((C63570 * C108 + C139301 * C114) * C125480 +
            (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
            C80217 * C125377 + (C63570 * C1765 + C139301 * C1773) * C125482 +
            (C63570 * C1989 + C139301 * C2397) * C125378) *
               C139465 * C139362 * C139529 -
           ((C63570 * C6489 + C139301 * C6803) * C125378 +
            (C63570 * C6323 + C139301 * C6326) * C125482 + C79314 * C125377 +
            C79013 * C125481 + C66048 * C125376 + C65813 * C125480) *
               C139465 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[120] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139362 * C139529 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139362 * C139398) *
              C139558 +
          ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
            C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
               C139301 * C139362 * C139398 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139362 * C139529) *
              C139559 +
          ((C218 * C125480 + C653 * C125376 + C1904 * C125481 +
            C2495 * C125377 + C1909 * C125482 + C2498 * C125378) *
               C139301 * C139362 * C139529 -
           ((C186 * C6489 + C139465 * C6880) * C125378 +
            (C186 * C6323 + C139465 * C6409) * C125482 + C4955 * C125377 +
            C4294 * C125481 + C1562 * C125376 + C971 * C125480) *
               C139301 * C139362 * C139398) *
              C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[120] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
                       C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
                       C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
                          C139465 * C139301 * C139362 * C139529 -
                      (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
                       C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
                       C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
                          C139465 * C139301 * C139362 * C139398) *
                         C139558 +
                     ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
                       C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
                       C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
                          C139465 * C139301 * C139362 * C139398 -
                      (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
                       C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
                       C125783 * C107 + C125792 + C125792 + C125376 * C713) *
                          C139465 * C139301 * C139362 * C139529) *
                         C139559 +
                     ((C125783 * C108 + C125793 + C125793 + C125376 * C714 +
                       C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
                       C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
                          C139465 * C139301 * C139362 * C139529 -
                      (C125785 * C6323 + C127870 + C127870 + C125378 * C6957 +
                       C125784 * C4161 + C127871 + C127871 + C125377 * C5057 +
                       C125783 * C827 + C127872 + C127872 + C125376 * C1643) *
                          C139465 * C139301 * C139362 * C139398) *
                         C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eexx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
             C77704 * C125377 + C77705 * C125378) *
                C139465 * C139530 -
            (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
                C139426) *
               C139529 +
           ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
                C139426 -
            (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
                C139530) *
               C139398) *
              C825 +
          (((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) *
                C139465 * C139426 -
            (C77707 * C125378 + C77706 * C125377 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
                C139465 * C139530) *
               C139529 +
           ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
                C139530 -
            ((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C125378 +
             C77708 * C125377 + C66990 * C125376) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C63570 +
              (C186 * C112 + C139465 * C193) * C139301) *
                 C125376 +
             (C126631 + C126632) * C125377 + C126643 * C125378) *
                C139530 -
            ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
             (C126632 + C126631) * C125376) *
                C139426) *
               C139529 +
           (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
             ((C186 * C26692 + C139465 * C26768) * C63570 +
              (C186 * C26694 + C139465 * C26770) * C139301) *
                 C125378) *
                C139426 -
            ((C128766 + C128765) * C125378 + (C128764 + C128763) * C125377 +
             ((C186 * C837 + C139465 * C947) * C139301 +
              (C186 * C829 + C139465 * C939) * C63570) *
                 C125376) *
                C139530) *
               C139398) *
              C825 +
          ((((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
             (C126641 + C126642) * C125378) *
                C139426 -
            (C126644 * C125378 + (C126638 + C126637) * C125377 +
             (C217 * C139301 + C216 * C63570) * C125376) *
                C139530) *
               C139529 +
           (((C973 * C63570 + C972 * C139301) * C125376 +
             (C128767 + C128768) * C125377 + (C128769 + C128770) * C125378) *
                C139530 -
            (((C186 * C26693 + C139465 * C26769) * C139301 +
              (C186 * C26691 + C139465 * C26767) * C63570) *
                 C125378 +
             (C128770 + C128769) * C125377 + (C128768 + C128767) * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
              C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                 C63570 +
             (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
              C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                 C139301) *
                C139465 * C139530 -
            ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
              C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                 C139301 +
             (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
              C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                 C63570) *
                C139465 * C139426) *
               C139529 +
           (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
              C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                 C63570 +
             (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
              C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                 C139301) *
                C139465 * C139426 -
            ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
              C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                 C139301 +
             (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
              C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                 C63570) *
                C139465 * C139530) *
               C139398) *
              C825 +
          ((((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
              C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                 C63570 +
             (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
              C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                 C139301) *
                C139465 * C139426 -
            ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
              C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                 C139301 +
             (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
              C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                 C63570) *
                C139465 * C139530) *
               C139529 +
           (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
              C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                 C63570 +
             (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
              C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                 C139301) *
                C139465 * C139530 -
            ((C125482 * C26693 + C125378 * C26839 + C125481 * C6327 +
              C125377 * C6493 + C125480 * C4164 + C125376 * C4398) *
                 C139301 +
             (C125482 * C26691 + C125378 * C26837 + C125481 * C6324 +
              C125377 * C6490 + C125480 * C4160 + C125376 * C4394) *
                 C63570) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63570 * C106 + C139301 * C112) * C186 +
              (C63570 * C187 + C139301 * C360) * C139465) *
                 C125376 +
             (C126793 + C126794) * C125377 + C126807 * C125378) *
                C139530 -
            ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
             (C126794 + C126793) * C125376) *
                C139426) *
               C139529 +
           (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
             (C83605 * C186 + C83606 * C139465) * C125378) *
                C139426 -
            ((C128970 + C128969) * C125378 + (C128968 + C128967) * C125377 +
             (C64377 * C139465 + C64376 * C186) * C125376) *
                C139530) *
               C139398) *
              C825 +
          ((((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
             (C126811 + C126812) * C125378) *
                C139426 -
            (C126810 * C125378 + (C126800 + C126799) * C125377 +
             ((C63570 * C188 + C139301 * C361) * C139465 +
              (C63570 * C107 + C139301 * C113) * C186) *
                 C125376) *
                C139530) *
               C139529 +
           (((C64382 * C186 + C64383 * C139465) * C125376 +
             (C128971 + C128972) * C125377 + (C128973 + C128974) * C125378) *
                C139530 -
            (((C63570 * C26767 + C139301 * C26907) * C139465 +
              (C63570 * C26691 + C139301 * C26693) * C186) *
                 C125378 +
             (C128974 + C128973) * C125377 + (C128972 + C128971) * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
             C126887 * C125377 + C126888 * C125378) *
                C139530 -
            (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
                C139426) *
               C139529 +
           ((C129073 * C125376 + C129074 * C125377 +
             (C416 * C26692 + C38110 + C38110 + C139465 * C26976) * C139301 *
                 C125378) *
                C139426 -
            (C129074 * C125378 + C129073 * C125377 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                 C125376) *
                C139530) *
               C139398) *
              C825 +
          (((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
                C139426 -
            (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
                C139530) *
               C139529 +
           ((C1281 * C139301 * C125376 + C129075 * C125377 +
             C129076 * C125378) *
                C139530 -
            ((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139301 *
                 C125378 +
             C129076 * C125377 + C129075 * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
              C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                 C186 +
             (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
              C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                 C139465) *
                C139301 * C139530 -
            ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
              C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                 C139465 +
             (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
              C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                 C186) *
                C139301 * C139426) *
               C139529 +
           (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
              C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                 C186 +
             (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
              C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                 C139465) *
                C139301 * C139426 -
            ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
              C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                 C139465 +
             (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
              C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                 C186) *
                C139301 * C139530) *
               C139398) *
              C825 +
          ((((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
              C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                 C186 +
             (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
              C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                 C139465) *
                C139301 * C139426 -
            ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
              C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                 C139465 +
             (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
              C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                 C186) *
                C139301 * C139530) *
               C139529 +
           (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
              C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                 C186 +
             (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
              C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                 C139465) *
                C139301 * C139530 -
            ((C125482 * C26767 + C125378 * C27047 + C125481 * C6410 +
              C125377 * C6727 + C125480 * C4276 + C125376 * C4730) *
                 C139465 +
             (C125482 * C26691 + C125378 * C26837 + C125481 * C6324 +
              C125377 * C6490 + C125480 * C4160 + C125376 * C4394) *
                 C186) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C125480 +
             (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
             C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
                C139465 * C139530 -
            (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
             C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
                C139465 * C139426) *
               C139529 +
           ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
             C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
                C139465 * C139426 -
            (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
             C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
                C139465 * C139530) *
               C139398) *
              C825 +
          (((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
             C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
                C139465 * C139426 -
            (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
             C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
             (C63570 * C107 + C139301 * C113) * C125480) *
                C139465 * C139530) *
               C139529 +
           ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
             C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
                C139465 * C139530 -
            ((C63570 * C26837 + C139301 * C27115) * C125378 +
             (C63570 * C26691 + C139301 * C26693) * C125482 + C78401 * C125377 +
             C78061 * C125481 + C67636 * C125376 + C67318 * C125480) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C125480 +
             (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
             C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
                C139301 * C139530 -
            (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
             C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
                C139301 * C139426) *
               C139529 +
           ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
             C38411 * C125377 + (C186 * C26692 + C139465 * C26768) * C125482 +
             (C186 * C26838 + C139465 * C27184) * C125378) *
                C139301 * C139426 -
            (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
             C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
             (C186 * C829 + C139465 * C939) * C125480) *
                C139301 * C139530) *
               C139398) *
              C825 +
          (((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
             C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
                C139301 * C139426 -
            (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
             C1906 * C125481 + C652 * C125376 + C216 * C125480) *
                C139301 * C139530) *
               C139529 +
           ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
             C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
                C139301 * C139530 -
            ((C186 * C26837 + C139465 * C27183) * C125378 +
             (C186 * C26691 + C139465 * C26767) * C125482 + C35976 * C125377 +
             C35152 * C125481 + C4954 * C125376 + C4292 * C125480) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[121] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
             C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
             C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
                C139465 * C139301 * C139530 -
            (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
             C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
             C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
                C139465 * C139301 * C139426) *
               C139529 +
           ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
             C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
             C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
                C139465 * C139301 * C139426 -
            (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
             C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
             C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
                C139465 * C139301 * C139530) *
               C139398) *
              C825 +
          (((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
             C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
             C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
                C139465 * C139301 * C139426 -
            (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
             C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
             C125783 * C107 + C125792 + C125792 + C125376 * C713) *
                C139465 * C139301 * C139530) *
               C139529 +
           ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
             C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
             C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
                C139465 * C139301 * C139530 -
            (C125785 * C26691 + C129472 + C129472 + C125378 * C27251 +
             C125784 * C6324 + C129473 + C129473 + C125377 * C6958 +
             C125783 * C4160 + C129474 + C129474 + C125376 * C5056) *
                C139465 * C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139362 * C822 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139362 * C823 +
           (C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
               C139362 * C824) *
              C825 +
          ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
               C139362 * C823 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139362 * C822 -
           ((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C125378 +
            C66991 * C125377 + C64108 * C125376) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
           C77704 * C125377 + C77705 * C125378) *
              C139465 * C139362 * C139346 * C96 -
          (C77707 * C125378 + C77706 * C125377 +
           (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
              C139465 * C139362 * C139346 * C97 +
          ((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
           C79616 * C125377 +
           (C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C125378) *
              C139465 * C139362 * C139346 * C98 -
          ((C63569 * C1767 + C125380 + C125380 + C139301 * C1783) * C125378 +
           (C63569 * C1766 + C76093 + C76093 + C139301 * C1782) * C125377 +
           (C63569 * C109 + C63583 + C63583 + C139301 * C121) * C125376) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C1757 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C1758 +
           (C77705 * C125376 + C88983 * C125377 +
            (C63569 * C43304 + C88980 + C88980 + C139301 * C43308) * C125378) *
               C139465 * C1759) *
              C139346 * C825 +
          ((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) * C139465 *
               C1758 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C1757 -
           ((C63569 * C43303 + C126553 + C126553 + C139301 * C43307) * C125378 +
            C126556 * C125377 + C77707 * C125376) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[122] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C32132 * C63570 + C32133 * C139301) * C125377 +
            (C32135 * C63570 + C32134 * C139301) * C125378) *
               C139362 * C822 -
           ((C37809 * C139301 + C37808 * C63570) * C125378 +
            (C35151 * C139301 + C35150 * C63570) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C139362 * C823 +
           (((C186 * C830 + C139465 * C940) * C63570 +
             (C186 * C838 + C139465 * C948) * C139301) *
                C125376 +
            (C40768 * C63570 + C40769 * C139301) * C125377 +
            ((C186 * C20984 + C139465 * C21100) * C63570 +
             (C186 * C20986 + C139465 * C21102) * C139301) *
                C125378) *
               C139362 * C824) *
              C825 +
          (((C973 * C63570 + C972 * C139301) * C125376 +
            (C4292 * C63570 + C4293 * C139301) * C125377 +
            (C35152 * C63570 + C35153 * C139301) * C125378) *
               C139362 * C823 -
           ((C1908 * C139301 + C1907 * C63570) * C125378 +
            (C1905 * C139301 + C1906 * C63570) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C139362 * C822 -
           (((C186 * C20985 + C139465 * C21101) * C139301 +
             (C186 * C20983 + C139465 * C21099) * C63570) *
                C125378 +
            (C31099 * C139301 + C31098 * C63570) * C125377 +
            (C975 * C139301 + C974 * C63570) * C125376) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C186 * C106 + C139465 * C187) * C63570 +
                                (C186 * C112 + C139465 * C193) * C139301) *
                                   C125376 +
                               (C32132 * C63570 + C32133 * C139301) * C125377 +
                               (C32135 * C63570 + C32134 * C139301) * C125378) *
                                  C139362 * C139346 * C96 -
                              ((C1908 * C139301 + C1907 * C63570) * C125378 +
                               (C1905 * C139301 + C1906 * C63570) * C125377 +
                               (C217 * C139301 + C216 * C63570) * C125376) *
                                  C139362 * C139346 * C97 +
                              ((C218 * C63570 + C219 * C139301) * C125376 +
                               (C1904 * C63570 + C1903 * C139301) * C125377 +
                               (C1909 * C63570 + C1910 * C139301) * C125378) *
                                  C139362 * C139346 * C98 -
                              (((C186 * C1775 + C139465 * C1885) * C139301 +
                                (C186 * C1767 + C139465 * C1877) * C63570) *
                                   C125378 +
                               (C3504 * C139301 + C3503 * C63570) * C125377 +
                               (C220 * C139301 + C221 * C63570) * C125376) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C1757 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C1758 +
           (C126643 * C125376 + (C126636 + C126635) * C125377 +
            ((C186 * C43304 + C139465 * C43388) * C63570 +
             (C186 * C43306 + C139465 * C43390) * C139301) *
                C125378) *
               C1759) *
              C139346 * C825 +
          (((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
            (C126641 + C126642) * C125378) *
               C1758 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C1757 -
           (((C186 * C43305 + C139465 * C43389) * C139301 +
             (C186 * C43303 + C139465 * C43387) * C63570) *
                C125378 +
            (C126642 + C126641) * C125377 + C126644 * C125376) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexz[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C139362 * C822 -
           ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
             C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                C139301 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C63570) *
               C139465 * C139362 * C823 +
           ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
             C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                C63570 +
            (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
             C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                C139301) *
               C139465 * C139362 * C824) *
              C825 +
          (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
             C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                C63570 +
            (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
             C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                C139301) *
               C139465 * C139362 * C823 -
           ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
             C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                C139301 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C63570) *
               C139465 * C139362 * C822 -
           ((C125482 * C20985 + C125378 * C21203 + C125481 * C8594 +
             C125377 * C8760 + C125480 * C839 + C125376 * C1063) *
                C139301 +
            (C125482 * C20983 + C125378 * C21201 + C125481 * C8591 +
             C125377 * C8757 + C125480 * C831 + C125376 * C1055) *
                C63570) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
            C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
               C63570 +
           (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
            C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
               C139301) *
              C139465 * C139362 * C139346 * C96 -
          ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
            C125377 * C1993 + C125480 * C113 + C125376 * C281) *
               C139301 +
           (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
            C125377 * C1985 + C125480 * C107 + C125376 * C275) *
               C63570) *
              C139465 * C139362 * C139346 * C97 +
          ((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
            C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
               C63570 +
           (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
            C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
               C139301) *
              C139465 * C139362 * C139346 * C98 -
          ((C125482 * C1775 + C125378 * C1999 + C125481 * C1774 +
            C125377 * C1998 + C125480 * C115 + C125376 * C283) *
               C139301 +
           (C125482 * C1767 + C125378 * C1991 + C125481 * C1766 +
            C125377 * C1990 + C125480 * C109 + C125376 * C277) *
               C63570) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C1757 -
           ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
             C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                C139301 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C63570) *
               C139465 * C1758 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C63570 +
            (C125480 * C1771 + C125376 * C1995 + C125481 * C10623 +
             C125377 * C10741 + C125482 * C43306 + C125378 * C43470) *
                C139301) *
               C139465 * C1759) *
              C139346 * C825 +
          (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
             C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                C63570 +
            (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
             C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                C139301) *
               C139465 * C1758 -
           ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
             C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                C139301 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C63570) *
               C139465 * C1757 -
           ((C125482 * C43305 + C125378 * C43469 + C125481 * C10622 +
             C125377 * C10740 + C125480 * C1772 + C125376 * C1996) *
                C139301 +
            (C125482 * C43303 + C125378 * C43467 + C125481 * C10619 +
             C125377 * C10737 + C125480 * C1764 + C125376 * C1988) *
                C63570) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[122] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C78053 * C186 + C78054 * C139465) * C125377 +
            (C78056 * C186 + C78055 * C139465) * C125378) *
               C139362 * C822 -
           ((C69343 * C139465 + C69342 * C186) * C125378 +
            (C67316 * C139465 + C67317 * C186) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C139362 * C823 +
           ((C64378 * C186 + C64379 * C139465) * C125376 +
            (C67315 * C186 + C67314 * C139465) * C125377 +
            (C69344 * C186 + C69345 * C139465) * C125378) *
               C139362 * C824) *
              C825 +
          (((C64382 * C186 + C64383 * C139465) * C125376 +
            (C67318 * C186 + C67319 * C139465) * C125377 +
            (C78061 * C186 + C78062 * C139465) * C125378) *
               C139362 * C823 -
           ((C78060 * C139465 + C78059 * C186) * C125378 +
            (C78058 * C139465 + C78057 * C186) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C139362 * C822 -
           (((C63570 * C21099 + C139301 * C21313) * C139465 +
             (C63570 * C20983 + C139301 * C20985) * C186) *
                C125378 +
            (C67321 * C139465 + C67320 * C186) * C125377 +
            (C64385 * C139465 + C64384 * C186) * C125376) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C63570 * C106 + C139301 * C112) * C186 +
                                (C63570 * C187 + C139301 * C360) * C139465) *
                                   C125376 +
                               (C78053 * C186 + C78054 * C139465) * C125377 +
                               (C78056 * C186 + C78055 * C139465) * C125378) *
                                  C139362 * C139346 * C96 -
                              ((C78060 * C139465 + C78059 * C186) * C125378 +
                               (C78058 * C139465 + C78057 * C186) * C125377 +
                               ((C63570 * C188 + C139301 * C361) * C139465 +
                                (C63570 * C107 + C139301 * C113) * C186) *
                                   C125376) *
                                  C139362 * C139346 * C97 +
                              (((C63570 * C108 + C139301 * C114) * C186 +
                                (C63570 * C189 + C139301 * C362) * C139465) *
                                   C125376 +
                               (C79917 * C186 + C79918 * C139465) * C125377 +
                               ((C63570 * C1765 + C139301 * C1773) * C186 +
                                (C63570 * C1875 + C139301 * C2103) * C139465) *
                                   C125378) *
                                  C139362 * C139346 * C98 -
                              (((C63570 * C1877 + C139301 * C2105) * C139465 +
                                (C63570 * C1767 + C139301 * C1775) * C186) *
                                   C125378 +
                               ((C63570 * C1876 + C139301 * C2104) * C139465 +
                                (C63570 * C1766 + C139301 * C1774) * C186) *
                                   C125377 +
                               ((C63570 * C190 + C139301 * C363) * C139465 +
                                (C63570 * C109 + C139301 * C115) * C186) *
                                   C125376) *
                                  C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C1757 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C1758 +
           (C126807 * C125376 + (C126798 + C126797) * C125377 +
            ((C63570 * C43304 + C139301 * C43306) * C186 +
             (C63570 * C43388 + C139301 * C43538) * C139465) *
                C125378) *
               C1759) *
              C139346 * C825 +
          (((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
            (C126811 + C126812) * C125378) *
               C1758 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C1757 -
           (((C63570 * C43387 + C139301 * C43537) * C139465 +
             (C63570 * C43303 + C139301 * C43305) * C186) *
                C125378 +
            (C126812 + C126811) * C125377 + C126810 * C125376) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C32526 * C139301 * C125377 + C32527 * C139301 * C125378) *
               C139362 * C822 -
           (C38113 * C139301 * C125378 + C35569 * C139301 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139362 * C823 +
           ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 *
                C125376 +
            C41073 * C139301 * C125377 +
            (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C139301 *
                C125378) *
               C139362 * C824) *
              C825 +
          ((C1281 * C139301 * C125376 + C4630 * C139301 * C125377 +
            C35570 * C139301 * C125378) *
               C139362 * C823 -
           (C2215 * C139301 * C125378 + C2214 * C139301 * C125377 +
            C446 * C139301 * C125376) *
               C139362 * C822 -
           ((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139301 *
                C125378 +
            C31422 * C139301 * C125377 + C1282 * C139301 * C125376) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
           C32526 * C139301 * C125377 + C32527 * C139301 * C125378) *
              C139362 * C139346 * C96 -
          (C2215 * C139301 * C125378 + C2214 * C139301 * C125377 +
           C446 * C139301 * C125376) *
              C139362 * C139346 * C97 +
          (C447 * C139301 * C125376 + C2213 * C139301 * C125377 +
           C2216 * C139301 * C125378) *
              C139362 * C139346 * C98 -
          ((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139301 *
               C125378 +
           C3742 * C139301 * C125377 + C448 * C139301 * C125376) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C1757 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) * C1758 +
           (C126888 * C125376 + C126889 * C125377 +
            (C416 * C43304 + C43624 + C43624 + C139465 * C43618) * C139301 *
                C125378) *
               C1759) *
              C139346 * C825 +
          ((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) * C1758 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C1757 -
           ((C416 * C43303 + C43623 + C43623 + C139465 * C43617) * C139301 *
                C125378 +
            C126892 * C125377 + C126891 * C125376) *
               C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C139362 * C822 -
           ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
             C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                C139465 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C186) *
               C139301 * C139362 * C823 +
           ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
             C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                C186 +
            (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
             C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                C139465) *
               C139301 * C139362 * C824) *
              C825 +
          (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
             C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                C186 +
            (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
             C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                C139465) *
               C139301 * C139362 * C823 -
           ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
             C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                C139465 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C186) *
               C139301 * C139362 * C822 -
           ((C125482 * C21099 + C125378 * C21529 + C125481 * C8677 +
             C125377 * C8994 + C125480 * C941 + C125376 * C1361) *
                C139465 +
            (C125482 * C20983 + C125378 * C21201 + C125481 * C8591 +
             C125377 * C8757 + C125480 * C831 + C125376 * C1055) *
                C186) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
            C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
               C186 +
           (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
            C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
               C139465) *
              C139301 * C139362 * C139346 * C96 -
          ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
            C125377 * C2291 + C125480 * C188 + C125376 * C500) *
               C139465 +
           (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
            C125377 * C1985 + C125480 * C107 + C125376 * C275) *
               C186) *
              C139301 * C139362 * C139346 * C97 +
          ((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
            C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
               C186 +
           (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
            C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
               C139465) *
              C139301 * C139362 * C139346 * C98 -
          ((C125482 * C1877 + C125378 * C2297 + C125481 * C1876 +
            C125377 * C2296 + C125480 * C190 + C125376 * C502) *
               C139465 +
           (C125482 * C1767 + C125378 * C1991 + C125481 * C1766 +
            C125377 * C1990 + C125480 * C109 + C125376 * C277) *
               C186) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C1757 -
           ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
             C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                C139465 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C186) *
               C139301 * C1758 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C186 +
            (C125480 * C1873 + C125376 * C2293 + C125481 * C10682 +
             C125377 * C10903 + C125482 * C43388 + C125378 * C43695) *
                C139465) *
               C139301 * C1759) *
              C139346 * C825 +
          (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
             C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                C186 +
            (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
             C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                C139465) *
               C139301 * C1758 -
           ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
             C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                C139465 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C186) *
               C139301 * C1757 -
           ((C125482 * C43387 + C125378 * C43694 + C125481 * C10681 +
             C125377 * C10902 + C125480 * C1874 + C125376 * C2294) *
                C139465 +
            (C125482 * C43303 + C125378 * C43467 + C125481 * C10619 +
             C125377 * C10737 + C125480 * C1764 + C125376 * C1988) *
                C186) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezx[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139362 * C822 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139362 * C823 +
           (C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
            C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
               C139465 * C139362 * C824) *
              C825 +
          ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
            C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
               C139465 * C139362 * C823 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139362 * C822 -
           ((C63570 * C21201 + C139301 * C21632) * C125378 +
            (C63570 * C20983 + C139301 * C20985) * C125482 + C67637 * C125377 +
            C67320 * C125481 + C64644 * C125376 + C64384 * C125480) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C125480 +
           (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
           C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
              C139465 * C139362 * C139346 * C96 -
          (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
           C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
           (C63570 * C107 + C139301 * C113) * C125480) *
              C139465 * C139362 * C139346 * C97 +
          ((C63570 * C108 + C139301 * C114) * C125480 +
           (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
           C80217 * C125377 + (C63570 * C1765 + C139301 * C1773) * C125482 +
           (C63570 * C1989 + C139301 * C2397) * C125378) *
              C139465 * C139362 * C139346 * C98 -
          ((C63570 * C1991 + C139301 * C2399) * C125378 +
           (C63570 * C1767 + C139301 * C1775) * C125482 +
           (C63570 * C1990 + C139301 * C2398) * C125377 +
           (C63570 * C1766 + C139301 * C1774) * C125481 +
           (C63570 * C277 + C139301 * C580) * C125376 +
           (C63570 * C109 + C139301 * C115) * C125480) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C1757 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C1758 +
           (C78056 * C125480 + C78398 * C125376 + C89205 * C125481 +
            C89424 * C125377 + (C63570 * C43304 + C139301 * C43306) * C125482 +
            (C63570 * C43468 + C139301 * C43763) * C125378) *
               C139465 * C1759) *
              C139346 * C825 +
          ((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
            C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
               C139465 * C1758 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C1757 -
           ((C63570 * C43467 + C139301 * C43762) * C125378 +
            (C63570 * C43303 + C139301 * C43305) * C125482 + C127043 * C125377 +
            C126808 * C125481 + C78400 * C125376 + C78059 * C125480) *
               C139465 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[122] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139362 * C822 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139362 * C823 +
           ((C186 * C830 + C139465 * C940) * C125480 +
            (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
            C41371 * C125377 + (C186 * C20984 + C139465 * C21100) * C125482 +
            (C186 * C21202 + C139465 * C21739) * C125378) *
               C139301 * C139362 * C824) *
              C825 +
          ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
            C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
               C139301 * C139362 * C823 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139362 * C822 -
           ((C186 * C21201 + C139465 * C21738) * C125378 +
            (C186 * C20983 + C139465 * C21099) * C125482 + C31738 * C125377 +
            C31098 * C125481 + C1564 * C125376 + C974 * C125480) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C186 * C106 + C139465 * C187) * C125480 +
           (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
           C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
              C139301 * C139362 * C139346 * C96 -
          (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
           C1906 * C125481 + C652 * C125376 + C216 * C125480) *
              C139301 * C139362 * C139346 * C97 +
          (C218 * C125480 + C653 * C125376 + C1904 * C125481 + C2495 * C125377 +
           C1909 * C125482 + C2498 * C125378) *
              C139301 * C139362 * C139346 * C98 -
          ((C186 * C1991 + C139465 * C2481) * C125378 +
           (C186 * C1767 + C139465 * C1877) * C125482 + C3978 * C125377 +
           C3503 * C125481 + C654 * C125376 + C221 * C125480) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C1757 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C1758 +
           (C32135 * C125480 + C32875 * C125376 + C43398 * C125481 +
            C43841 * C125377 + (C186 * C43304 + C139465 * C43388) * C125482 +
            (C186 * C43468 + C139465 * C43837) * C125378) *
               C139301 * C1759) *
              C139346 * C825 +
          ((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
            C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
               C139301 * C1758 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C1757 -
           ((C186 * C43467 + C139465 * C43836) * C125378 +
            (C186 * C43303 + C139465 * C43387) * C125482 + C32876 * C125377 +
            C32136 * C125481 + C2497 * C125376 + C1907 * C125480) *
               C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[122] +=
        (-std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139362 * C822 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C139362 * C823 +
           (C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
            C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
            C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
               C139465 * C139301 * C139362 * C824) *
              C825 +
          ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
            C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
            C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
               C139465 * C139301 * C139362 * C823 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C139362 * C822 -
           (C125785 * C20983 + C126474 + C126474 + C125378 * C21838 +
            C125784 * C8591 + C126475 + C126475 + C125377 * C9225 +
            C125783 * C831 + C126476 + C126476 + C125376 * C1647) *
               C139465 * C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
           C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
           C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
              C139465 * C139301 * C139362 * C139346 * C96 -
          (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
           C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
           C125783 * C107 + C125792 + C125792 + C125376 * C713) *
              C139465 * C139301 * C139362 * C139346 * C97 +
          (C125783 * C108 + C125793 + C125793 + C125376 * C714 +
           C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
           C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
              C139465 * C139301 * C139362 * C139346 * C98 -
          (C125785 * C1767 + C125796 + C125796 + C125378 * C2583 +
           C125784 * C1766 + C125797 + C125797 + C125377 * C2582 +
           C125783 * C109 + C125798 + C125798 + C125376 * C715) *
              C139465 * C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C1757 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C1758 +
           (C125783 * C1763 + C127195 + C127195 + C125376 * C2579 +
            C125784 * C10620 + C127196 + C127196 + C125377 * C11062 +
            C125785 * C43304 + C127197 + C127197 + C125378 * C43908) *
               C139465 * C139301 * C1759) *
              C139346 * C825 +
          ((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
            C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
            C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
               C139465 * C139301 * C1758 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C1757 -
           (C125785 * C43303 + C127201 + C127201 + C125378 * C43907 +
            C125784 * C10619 + C127202 + C127202 + C125377 * C11061 +
            C125783 * C1764 + C127203 + C127203 + C125376 * C2580) *
               C139465 * C139301 * C1759) *
              C139346 * C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139530 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139426) *
              C139346 * C139558 +
          ((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) * C139465 *
               C139426 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
            C79616 * C125377 + C127952 * C125378) *
               C139465 * C139530 -
           ((C63569 * C10618 + C127949 + C127949 + C139301 * C10624) * C125378 +
            C127952 * C125377 + C79616 * C125376) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139530 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139426) *
              C139346 * C139558 +
          (((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
            (C126641 + C126642) * C125378) *
               C139426 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C139530) *
              C139346 * C139559 +
          (((C218 * C63570 + C219 * C139301) * C125376 +
            (C128027 + C128028) * C125377 + (C128029 + C128030) * C125378) *
               C139530 -
           (((C186 * C10621 + C139465 * C10683) * C139301 +
             (C186 * C10618 + C139465 * C10680) * C63570) *
                C125378 +
            (C128030 + C128029) * C125377 + (C128028 + C128027) * C125376) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C139530 -
                      ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
                        C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                           C139301 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C63570) *
                          C139465 * C139426) *
                         C139346 * C139558 +
                     (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
                        C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                           C63570 +
                       (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
                        C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                           C139301) *
                          C139465 * C139426 -
                      ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                        C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                           C139301 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C63570) *
                          C139465 * C139530) *
                         C139346 * C139559 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C63570 +
                       (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
                        C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                           C139301) *
                          C139465 * C139530 -
                      ((C125482 * C10621 + C125378 * C10739 + C125481 * C1773 +
                        C125377 * C1997 + C125480 * C1768 + C125376 * C1992) *
                           C139301 +
                       (C125482 * C10618 + C125378 * C10736 + C125481 * C1765 +
                        C125377 * C1989 + C125480 * C1760 + C125376 * C1984) *
                           C63570) *
                          C139465 * C139426) *
                         C139346 * C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139530 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139426) *
              C139346 * C139558 +
          (((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
            (C126811 + C126812) * C125378) *
               C139426 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C139530) *
              C139346 * C139559 +
          ((((C63570 * C108 + C139301 * C114) * C186 +
             (C63570 * C189 + C139301 * C362) * C139465) *
                C125376 +
            (C128179 + C128180) * C125377 + (C128187 + C128188) * C125378) *
               C139530 -
           (((C63570 * C10680 + C139301 * C10792) * C139465 +
             (C63570 * C10618 + C139301 * C10621) * C186) *
                C125378 +
            (C128188 + C128187) * C125377 + (C128180 + C128179) * C125376) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139530 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139426) *
              C139346 * C139558 +
          ((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
               C139426 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C139530) *
              C139346 * C139559 +
          ((C447 * C139301 * C125376 + C128263 * C125377 + C128264 * C125378) *
               C139530 -
           ((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139301 *
                C125378 +
            C128264 * C125377 + C128263 * C125376) *
               C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[123] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C139530 -
                      ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
                        C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                           C139465 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C186) *
                          C139301 * C139426) *
                         C139346 * C139558 +
                     (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
                        C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                           C186 +
                       (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
                        C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                           C139465) *
                          C139301 * C139426 -
                      ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                        C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                           C139465 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C186) *
                          C139301 * C139530) *
                         C139346 * C139559 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C186 +
                       (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
                        C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                           C139465) *
                          C139301 * C139530 -
                      ((C125482 * C10680 + C125378 * C10901 + C125481 * C1875 +
                        C125377 * C2295 + C125480 * C1870 + C125376 * C2290) *
                           C139465 +
                       (C125482 * C10618 + C125378 * C10736 + C125481 * C1765 +
                        C125377 * C1989 + C125480 * C1760 + C125376 * C1984) *
                           C186) *
                          C139301 * C139426) *
                         C139346 * C2694)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139530 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139426) *
              C139346 * C139558 +
          ((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
            C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
               C139465 * C139426 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139530) *
              C139346 * C139559 +
          (((C63570 * C108 + C139301 * C114) * C125480 +
            (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
            C80217 * C125377 + C128185 * C125482 + C128415 * C125378) *
               C139465 * C139530 -
           ((C63570 * C10736 + C139301 * C10954) * C125378 +
            (C63570 * C10618 + C139301 * C10621) * C125482 + C128415 * C125377 +
            C128185 * C125481 + C80217 * C125376 + C79917 * C125480) *
               C139465 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezy[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139530 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139426) *
              C139346 * C139558 +
          ((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
            C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
               C139301 * C139426 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139530) *
              C139346 * C139559 +
          ((C218 * C125480 + C653 * C125376 + C1904 * C125481 +
            C2495 * C125377 + C1909 * C125482 + C2498 * C125378) *
               C139301 * C139530 -
           ((C186 * C10736 + C139465 * C11007) * C125378 +
            (C186 * C10618 + C139465 * C10680) * C125482 + C2498 * C125377 +
            C1909 * C125481 + C2495 * C125376 + C1904 * C125480) *
               C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eezz[123] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139530 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139426) *
              C139346 * C139558 +
          ((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
            C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
            C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
               C139465 * C139301 * C139426 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C139530) *
              C139346 * C139559 +
          ((C125783 * C108 + C125793 + C125793 + C125376 * C714 +
            C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
            C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
               C139465 * C139301 * C139530 -
           (C125785 * C10618 + C128564 + C128564 + C125378 * C11060 +
            C125784 * C1765 + C128565 + C128565 + C125377 * C2581 +
            C125783 * C1760 + C128566 + C128566 + C125376 * C2576) *
               C139465 * C139301 * C139426) *
              C139346 * C2694)) /
        (p * q * std::sqrt(p + q));
    d2eexx[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
           C77704 * C125377 + C77705 * C125378) *
              C139465 * C139362 * C139346 * C96 -
          (C77707 * C125378 + C77706 * C125377 +
           (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
              C139465 * C139362 * C139346 * C97 +
          ((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
           C79616 * C125377 +
           (C63569 * C1765 + C79613 + C79613 + C139301 * C1781) * C125378) *
              C139465 * C139362 * C139346 * C98 -
          ((C63569 * C1767 + C125380 + C125380 + C139301 * C1783) * C125378 +
           (C63569 * C1766 + C76093 + C76093 + C139301 * C1782) * C125377 +
           (C63569 * C109 + C63583 + C63583 + C139301 * C121) * C125376) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139362 * C822 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139362 * C823 +
           (C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
               C139362 * C824) *
              C825 +
          ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
               C139362 * C823 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139362 * C822 -
           ((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C125378 +
            C66991 * C125377 + C64108 * C125376) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexy[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C186 * C106 + C139465 * C187) * C63570 +
                       (C186 * C112 + C139465 * C193) * C139301) *
                          C125376 +
                      (C32132 * C63570 + C32133 * C139301) * C125377 +
                      (C32135 * C63570 + C32134 * C139301) * C125378) *
                         C139362 * C139346 * C96 -
                     ((C1908 * C139301 + C1907 * C63570) * C125378 +
                      (C1905 * C139301 + C1906 * C63570) * C125377 +
                      (C217 * C139301 + C216 * C63570) * C125376) *
                         C139362 * C139346 * C97 +
                     ((C218 * C63570 + C219 * C139301) * C125376 +
                      (C1904 * C63570 + C1903 * C139301) * C125377 +
                      (C1909 * C63570 + C1910 * C139301) * C125378) *
                         C139362 * C139346 * C98 -
                     (((C186 * C1775 + C139465 * C1885) * C139301 +
                       (C186 * C1767 + C139465 * C1877) * C63570) *
                          C125378 +
                      (C3504 * C139301 + C3503 * C63570) * C125377 +
                      (C220 * C139301 + C221 * C63570) * C125376) *
                         C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C186 * C106 + C139465 * C187) * C63570 +
                        (C186 * C112 + C139465 * C193) * C139301) *
                           C125376 +
                       (C32132 * C63570 + C32133 * C139301) * C125377 +
                       (C32135 * C63570 + C32134 * C139301) * C125378) *
                          C139362 * C822 -
                      ((C37809 * C139301 + C37808 * C63570) * C125378 +
                       (C35151 * C139301 + C35150 * C63570) * C125377 +
                       ((C186 * C837 + C139465 * C947) * C139301 +
                        (C186 * C829 + C139465 * C939) * C63570) *
                           C125376) *
                          C139362 * C823 +
                      (((C186 * C830 + C139465 * C940) * C63570 +
                        (C186 * C838 + C139465 * C948) * C139301) *
                           C125376 +
                       (C40768 * C63570 + C40769 * C139301) * C125377 +
                       ((C186 * C20984 + C139465 * C21100) * C63570 +
                        (C186 * C20986 + C139465 * C21102) * C139301) *
                           C125378) *
                          C139362 * C824) *
                         C825 +
                     (((C973 * C63570 + C972 * C139301) * C125376 +
                       (C4292 * C63570 + C4293 * C139301) * C125377 +
                       (C35152 * C63570 + C35153 * C139301) * C125378) *
                          C139362 * C823 -
                      ((C1908 * C139301 + C1907 * C63570) * C125378 +
                       (C1905 * C139301 + C1906 * C63570) * C125377 +
                       (C217 * C139301 + C216 * C63570) * C125376) *
                          C139362 * C822 -
                      (((C186 * C20985 + C139465 * C21101) * C139301 +
                        (C186 * C20983 + C139465 * C21099) * C63570) *
                           C125378 +
                       (C31099 * C139301 + C31098 * C63570) * C125377 +
                       (C975 * C139301 + C974 * C63570) * C125376) *
                          C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eexz[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                       C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                          C63570 +
                      (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                       C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                          C139301) *
                         C139465 * C139362 * C139346 * C96 -
                     ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                       C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                          C139301 +
                      (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                       C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                          C63570) *
                         C139465 * C139362 * C139346 * C97 +
                     ((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                       C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                          C63570 +
                      (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
                       C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                          C139301) *
                         C139465 * C139362 * C139346 * C98 -
                     ((C125482 * C1775 + C125378 * C1999 + C125481 * C1774 +
                       C125377 * C1998 + C125480 * C115 + C125376 * C283) *
                          C139301 +
                      (C125482 * C1767 + C125378 * C1991 + C125481 * C1766 +
                       C125377 * C1990 + C125480 * C109 + C125376 * C277) *
                          C63570) *
                         C139465 * C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C139362 * C822 -
                      ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                        C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                           C139301 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C63570) *
                          C139465 * C139362 * C823 +
                      ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C63570 +
                       (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
                        C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                           C139301) *
                          C139465 * C139362 * C824) *
                         C825 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C63570 +
                       (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
                        C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                           C139301) *
                          C139465 * C139362 * C823 -
                      ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                        C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                           C139301 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C63570) *
                          C139465 * C139362 * C822 -
                      ((C125482 * C20985 + C125378 * C21203 + C125481 * C8594 +
                        C125377 * C8760 + C125480 * C839 + C125376 * C1063) *
                           C139301 +
                       (C125482 * C20983 + C125378 * C21201 + C125481 * C8591 +
                        C125377 * C8757 + C125480 * C831 + C125376 * C1055) *
                           C63570) *
                          C139465 * C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eeyx[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C63570 * C106 + C139301 * C112) * C186 +
                       (C63570 * C187 + C139301 * C360) * C139465) *
                          C125376 +
                      (C78053 * C186 + C78054 * C139465) * C125377 +
                      (C78056 * C186 + C78055 * C139465) * C125378) *
                         C139362 * C139346 * C96 -
                     ((C78060 * C139465 + C78059 * C186) * C125378 +
                      (C78058 * C139465 + C78057 * C186) * C125377 +
                      ((C63570 * C188 + C139301 * C361) * C139465 +
                       (C63570 * C107 + C139301 * C113) * C186) *
                          C125376) *
                         C139362 * C139346 * C97 +
                     (((C63570 * C108 + C139301 * C114) * C186 +
                       (C63570 * C189 + C139301 * C362) * C139465) *
                          C125376 +
                      (C79917 * C186 + C79918 * C139465) * C125377 +
                      ((C63570 * C1765 + C139301 * C1773) * C186 +
                       (C63570 * C1875 + C139301 * C2103) * C139465) *
                          C125378) *
                         C139362 * C139346 * C98 -
                     (((C63570 * C1877 + C139301 * C2105) * C139465 +
                       (C63570 * C1767 + C139301 * C1775) * C186) *
                          C125378 +
                      ((C63570 * C1876 + C139301 * C2104) * C139465 +
                       (C63570 * C1766 + C139301 * C1774) * C186) *
                          C125377 +
                      ((C63570 * C190 + C139301 * C363) * C139465 +
                       (C63570 * C109 + C139301 * C115) * C186) *
                          C125376) *
                         C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((((C63570 * C106 + C139301 * C112) * C186 +
                        (C63570 * C187 + C139301 * C360) * C139465) *
                           C125376 +
                       (C78053 * C186 + C78054 * C139465) * C125377 +
                       (C78056 * C186 + C78055 * C139465) * C125378) *
                          C139362 * C822 -
                      ((C69343 * C139465 + C69342 * C186) * C125378 +
                       (C67316 * C139465 + C67317 * C186) * C125377 +
                       (C64377 * C139465 + C64376 * C186) * C125376) *
                          C139362 * C823 +
                      ((C64378 * C186 + C64379 * C139465) * C125376 +
                       (C67315 * C186 + C67314 * C139465) * C125377 +
                       (C69344 * C186 + C69345 * C139465) * C125378) *
                          C139362 * C824) *
                         C825 +
                     (((C64382 * C186 + C64383 * C139465) * C125376 +
                       (C67318 * C186 + C67319 * C139465) * C125377 +
                       (C78061 * C186 + C78062 * C139465) * C125378) *
                          C139362 * C823 -
                      ((C78060 * C139465 + C78059 * C186) * C125378 +
                       (C78058 * C139465 + C78057 * C186) * C125377 +
                       ((C63570 * C188 + C139301 * C361) * C139465 +
                        (C63570 * C107 + C139301 * C113) * C186) *
                           C125376) *
                          C139362 * C822 -
                      (((C63570 * C21099 + C139301 * C21313) * C139465 +
                        (C63570 * C20983 + C139301 * C20985) * C186) *
                           C125378 +
                       (C67321 * C139465 + C67320 * C186) * C125377 +
                       (C64385 * C139465 + C64384 * C186) * C125376) *
                          C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eeyy[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
           C32526 * C139301 * C125377 + C32527 * C139301 * C125378) *
              C139362 * C139346 * C96 -
          (C2215 * C139301 * C125378 + C2214 * C139301 * C125377 +
           C446 * C139301 * C125376) *
              C139362 * C139346 * C97 +
          (C447 * C139301 * C125376 + C2213 * C139301 * C125377 +
           C2216 * C139301 * C125378) *
              C139362 * C139346 * C98 -
          ((C416 * C1767 + C2204 + C2204 + C139465 * C2187) * C139301 *
               C125378 +
           C3742 * C139301 * C125377 + C448 * C139301 * C125376) *
              C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C32526 * C139301 * C125377 + C32527 * C139301 * C125378) *
               C139362 * C822 -
           (C38113 * C139301 * C125378 + C35569 * C139301 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139362 * C823 +
           ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 *
                C125376 +
            C41073 * C139301 * C125377 +
            (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C139301 *
                C125378) *
               C139362 * C824) *
              C825 +
          ((C1281 * C139301 * C125376 + C4630 * C139301 * C125377 +
            C35570 * C139301 * C125378) *
               C139362 * C823 -
           (C2215 * C139301 * C125378 + C2214 * C139301 * C125377 +
            C446 * C139301 * C125376) *
               C139362 * C822 -
           ((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139301 *
                C125378 +
            C31422 * C139301 * C125377 + C1282 * C139301 * C125376) *
               C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[124] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                       C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                          C186 +
                      (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                       C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                          C139465) *
                         C139301 * C139362 * C139346 * C96 -
                     ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                       C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                          C139465 +
                      (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                       C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                          C186) *
                         C139301 * C139362 * C139346 * C97 +
                     ((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                       C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                          C186 +
                      (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
                       C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                          C139465) *
                         C139301 * C139362 * C139346 * C98 -
                     ((C125482 * C1877 + C125378 * C2297 + C125481 * C1876 +
                       C125377 * C2296 + C125480 * C190 + C125376 * C502) *
                          C139465 +
                      (C125482 * C1767 + C125378 * C1991 + C125481 * C1766 +
                       C125377 * C1990 + C125480 * C109 + C125376 * C277) *
                          C186) *
                         C139301 * C139362 * C139346 * C99)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C139362 * C822 -
                      ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                        C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                           C139465 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C186) *
                          C139301 * C139362 * C823 +
                      ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C186 +
                       (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
                        C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                           C139465) *
                          C139301 * C139362 * C824) *
                         C825 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C186 +
                       (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
                        C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                           C139465) *
                          C139301 * C139362 * C823 -
                      ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                        C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                           C139465 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C186) *
                          C139301 * C139362 * C822 -
                      ((C125482 * C21099 + C125378 * C21529 + C125481 * C8677 +
                        C125377 * C8994 + C125480 * C941 + C125376 * C1361) *
                           C139465 +
                       (C125482 * C20983 + C125378 * C21201 + C125481 * C8591 +
                        C125377 * C8757 + C125480 * C831 + C125376 * C1055) *
                           C186) *
                          C139301 * C139362 * C824) *
                         C139333)) /
                       (p * q * std::sqrt(p + q));
    d2eezx[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C125480 +
           (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
           C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
              C139465 * C139362 * C139346 * C96 -
          (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
           C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
           (C63570 * C107 + C139301 * C113) * C125480) *
              C139465 * C139362 * C139346 * C97 +
          ((C63570 * C108 + C139301 * C114) * C125480 +
           (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
           C80217 * C125377 + (C63570 * C1765 + C139301 * C1773) * C125482 +
           (C63570 * C1989 + C139301 * C2397) * C125378) *
              C139465 * C139362 * C139346 * C98 -
          ((C63570 * C1991 + C139301 * C2399) * C125378 +
           (C63570 * C1767 + C139301 * C1775) * C125482 +
           (C63570 * C1990 + C139301 * C2398) * C125377 +
           (C63570 * C1766 + C139301 * C1774) * C125481 +
           (C63570 * C277 + C139301 * C580) * C125376 +
           (C63570 * C109 + C139301 * C115) * C125480) *
              C139465 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139362 * C822 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139362 * C823 +
           (C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
            C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
               C139465 * C139362 * C824) *
              C825 +
          ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
            C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
               C139465 * C139362 * C823 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139362 * C822 -
           ((C63570 * C21201 + C139301 * C21632) * C125378 +
            (C63570 * C20983 + C139301 * C20985) * C125482 + C67637 * C125377 +
            C67320 * C125481 + C64644 * C125376 + C64384 * C125480) *
               C139465 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezy[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C186 * C106 + C139465 * C187) * C125480 +
           (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
           C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
              C139301 * C139362 * C139346 * C96 -
          (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
           C1906 * C125481 + C652 * C125376 + C216 * C125480) *
              C139301 * C139362 * C139346 * C97 +
          (C218 * C125480 + C653 * C125376 + C1904 * C125481 + C2495 * C125377 +
           C1909 * C125482 + C2498 * C125378) *
              C139301 * C139362 * C139346 * C98 -
          ((C186 * C1991 + C139465 * C2481) * C125378 +
           (C186 * C1767 + C139465 * C1877) * C125482 + C3978 * C125377 +
           C3503 * C125481 + C654 * C125376 + C221 * C125480) *
              C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139362 * C822 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139362 * C823 +
           ((C186 * C830 + C139465 * C940) * C125480 +
            (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
            C41371 * C125377 + (C186 * C20984 + C139465 * C21100) * C125482 +
            (C186 * C21202 + C139465 * C21739) * C125378) *
               C139301 * C139362 * C824) *
              C825 +
          ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
            C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
               C139301 * C139362 * C823 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139362 * C822 -
           ((C186 * C21201 + C139465 * C21738) * C125378 +
            (C186 * C20983 + C139465 * C21099) * C125482 + C31738 * C125377 +
            C31098 * C125481 + C1564 * C125376 + C974 * C125480) *
               C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eezz[124] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
           C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
           C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
              C139465 * C139301 * C139362 * C139346 * C96 -
          (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
           C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
           C125783 * C107 + C125792 + C125792 + C125376 * C713) *
              C139465 * C139301 * C139362 * C139346 * C97 +
          (C125783 * C108 + C125793 + C125793 + C125376 * C714 +
           C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
           C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
              C139465 * C139301 * C139362 * C139346 * C98 -
          (C125785 * C1767 + C125796 + C125796 + C125378 * C2583 +
           C125784 * C1766 + C125797 + C125797 + C125377 * C2582 +
           C125783 * C109 + C125798 + C125798 + C125376 * C715) *
              C139465 * C139301 * C139362 * C139346 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139362 * C822 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C139362 * C823 +
           (C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
            C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
            C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
               C139465 * C139301 * C139362 * C824) *
              C825 +
          ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
            C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
            C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
               C139465 * C139301 * C139362 * C823 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C139362 * C822 -
           (C125785 * C20983 + C126474 + C126474 + C125378 * C21838 +
            C125784 * C8591 + C126475 + C126475 + C125377 * C9225 +
            C125783 * C831 + C126476 + C126476 + C125376 * C1647) *
               C139465 * C139301 * C139362 * C824) *
              C139333)) /
            (p * q * std::sqrt(p + q));
    d2eexx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139362 * C139560 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139362 * C139561 +
           (C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
               C139362 * C7039) *
              C139521 +
          ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
               C139362 * C139561 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139362 * C139560 -
           ((C63569 * C20983 + C64885 + C64885 + C139301 * C20987) * C125378 +
            C66991 * C125377 + C64108 * C125376) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139362 * C139560 -
           (C130747 * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C139362 * C139561 +
           (((C186 * C830 + C139465 * C940) * C63570 +
             (C186 * C838 + C139465 * C948) * C139301) *
                C125376 +
            (C40768 * C63570 + C40769 * C139301) * C125377 +
            ((C186 * C20984 + C139465 * C21100) * C63570 +
             (C186 * C20986 + C139465 * C21102) * C139301) *
                C125378) *
               C139362 * C7039) *
              C139521 +
          (((C973 * C63570 + C972 * C139301) * C125376 +
            (C128767 + C128768) * C125377 + (C128769 + C128770) * C125378) *
               C139362 * C139561 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C139362 * C139560 -
           (((C186 * C20985 + C139465 * C21101) * C139301 +
             (C186 * C20983 + C139465 * C21099) * C63570) *
                C125378 +
            (C31099 * C139301 + C31098 * C63570) * C125377 +
            (C975 * C139301 + C974 * C63570) * C125376) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C139362 * C139560 -
                      ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                        C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                           C139301 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C63570) *
                          C139465 * C139362 * C139561 +
                      ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C63570 +
                       (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
                        C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                           C139301) *
                          C139465 * C139362 * C7039) *
                         C139521 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C63570 +
                       (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
                        C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                           C139301) *
                          C139465 * C139362 * C139561 -
                      ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                        C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                           C139301 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C63570) *
                          C139465 * C139362 * C139560 -
                      ((C125482 * C20985 + C125378 * C21203 + C125481 * C8594 +
                        C125377 * C8760 + C125480 * C839 + C125376 * C1063) *
                           C139301 +
                       (C125482 * C20983 + C125378 * C21201 + C125481 * C8591 +
                        C125377 * C8757 + C125480 * C831 + C125376 * C1055) *
                           C63570) *
                          C139465 * C139362 * C7039) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139362 * C139560 -
           (C130902 * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C139362 * C139561 +
           ((C64378 * C186 + C64379 * C139465) * C125376 +
            (C67315 * C186 + C67314 * C139465) * C125377 +
            (C69344 * C186 + C69345 * C139465) * C125378) *
               C139362 * C7039) *
              C139521 +
          (((C64382 * C186 + C64383 * C139465) * C125376 +
            (C128971 + C128972) * C125377 + (C128973 + C128974) * C125378) *
               C139362 * C139561 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C139362 * C139560 -
           (((C63570 * C21099 + C139301 * C21313) * C139465 +
             (C63570 * C20983 + C139301 * C20985) * C186) *
                C125378 +
            (C67321 * C139465 + C67320 * C186) * C125377 +
            (C64385 * C139465 + C64384 * C186) * C125376) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139362 * C139560 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139362 * C139561 +
           ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 *
                C125376 +
            C41073 * C139301 * C125377 +
            (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C139301 *
                C125378) *
               C139362 * C7039) *
              C139521 +
          ((C1281 * C139301 * C125376 + C129075 * C125377 + C129076 * C125378) *
               C139362 * C139561 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C139362 * C139560 -
           ((C416 * C20983 + C41069 + C41069 + C139465 * C21425) * C139301 *
                C125378 +
            C31422 * C139301 * C125377 + C1282 * C139301 * C125376) *
               C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[125] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C139362 * C139560 -
                      ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                        C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                           C139465 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C186) *
                          C139301 * C139362 * C139561 +
                      ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C186 +
                       (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
                        C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                           C139465) *
                          C139301 * C139362 * C7039) *
                         C139521 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C186 +
                       (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
                        C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                           C139465) *
                          C139301 * C139362 * C139561 -
                      ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                        C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                           C139465 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C186) *
                          C139301 * C139362 * C139560 -
                      ((C125482 * C21099 + C125378 * C21529 + C125481 * C8677 +
                        C125377 * C8994 + C125480 * C941 + C125376 * C1361) *
                           C139465 +
                       (C125482 * C20983 + C125378 * C21201 + C125481 * C8591 +
                        C125377 * C8757 + C125480 * C831 + C125376 * C1055) *
                           C186) *
                          C139301 * C139362 * C7039) *
                         C139333)) /
                   (p * q * std::sqrt(p + q));
    d2eezx[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139362 * C139560 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139362 * C139561 +
           (C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
            C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
               C139465 * C139362 * C7039) *
              C139521 +
          ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
            C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
               C139465 * C139362 * C139561 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139362 * C139560 -
           ((C63570 * C21201 + C139301 * C21632) * C125378 +
            (C63570 * C20983 + C139301 * C20985) * C125482 + C67637 * C125377 +
            C67320 * C125481 + C64644 * C125376 + C64384 * C125480) *
               C139465 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139362 * C139560 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139362 * C139561 +
           ((C186 * C830 + C139465 * C940) * C125480 +
            (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
            C41371 * C125377 + (C186 * C20984 + C139465 * C21100) * C125482 +
            (C186 * C21202 + C139465 * C21739) * C125378) *
               C139301 * C139362 * C7039) *
              C139521 +
          ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
            C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
               C139301 * C139362 * C139561 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139362 * C139560 -
           ((C186 * C21201 + C139465 * C21738) * C125378 +
            (C186 * C20983 + C139465 * C21099) * C125482 + C31738 * C125377 +
            C31098 * C125481 + C1564 * C125376 + C974 * C125480) *
               C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[125] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139362 * C139560 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C139362 * C139561 +
           (C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
            C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
            C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
               C139465 * C139301 * C139362 * C7039) *
              C139521 +
          ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
            C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
            C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
               C139465 * C139301 * C139362 * C139561 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C139362 * C139560 -
           (C125785 * C20983 + C126474 + C126474 + C125378 * C21838 +
            C125784 * C8591 + C126475 + C126475 + C125377 * C9225 +
            C125783 * C831 + C126476 + C126476 + C125376 * C1647) *
               C139465 * C139301 * C139362 * C7039) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139530 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139426) *
              C139560 +
          ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
               C139426 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139530) *
              C139561 +
          ((C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
               C139530 -
           ((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C125378 +
            C69094 * C125377 + C66988 * C125376) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139530 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139426) *
              C139560 +
          (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
            (C130750 + C130751) * C125378) *
               C139426 -
           (C130747 * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C139530) *
              C139561 +
          ((((C186 * C830 + C139465 * C940) * C63570 +
             (C186 * C838 + C139465 * C948) * C139301) *
                C125376 +
            (C132982 + C132983) * C125377 + (C132990 + C132991) * C125378) *
               C139530 -
           (((C186 * C73392 + C139465 * C73448) * C139301 +
             (C186 * C73391 + C139465 * C73447) * C63570) *
                C125378 +
            (C132991 + C132990) * C125377 + (C132983 + C132982) * C125376) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[126] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C139530 -
                      ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
                        C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                           C139301 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C63570) *
                          C139465 * C139426) *
                         C139560 +
                     (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
                        C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                           C63570 +
                       (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
                        C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                           C139301) *
                          C139465 * C139426 -
                      ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                        C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                           C139301 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C63570) *
                          C139465 * C139530) *
                         C139561 +
                     (((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C63570 +
                       (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
                        C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                           C139301) *
                          C139465 * C139530 -
                      ((C125482 * C73392 + C125378 * C73500 + C125481 * C20986 +
                        C125377 * C21204 + C125480 * C8595 + C125376 * C8761) *
                           C139301 +
                       (C125482 * C73391 + C125378 * C73499 + C125481 * C20984 +
                        C125377 * C21202 + C125480 * C8592 + C125376 * C8758) *
                           C63570) *
                          C139465 * C139426) *
                         C7039) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eeyx[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139530 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139426) *
              C139560 +
          (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
            (C130900 + C130901) * C125378) *
               C139426 -
           (C130902 * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C139530) *
              C139561 +
          (((C64378 * C186 + C64379 * C139465) * C125376 +
            (C133140 + C133141) * C125377 + (C133142 + C133143) * C125378) *
               C139530 -
           (((C63570 * C73447 + C139301 * C73551) * C139465 +
             (C63570 * C73391 + C139301 * C73392) * C186) *
                C125378 +
            (C133143 + C133142) * C125377 + (C133141 + C133140) * C125376) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139530 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139426) *
              C139560 +
          ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) *
               C139426 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139530) *
              C139561 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 *
                C125376 +
            C133218 * C125377 + C133225 * C125378) *
               C139530 -
           ((C416 * C73391 + C133221 + C133221 + C139465 * C73602) * C139301 *
                C125378 +
            C133225 * C125377 + C133218 * C125376) *
               C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyz[126] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C139530 -
                      ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
                        C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                           C139465 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C186) *
                          C139301 * C139426) *
                         C139560 +
                     (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
                        C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                           C186 +
                       (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
                        C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                           C139465) *
                          C139301 * C139426 -
                      ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                        C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                           C139465 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C186) *
                          C139301 * C139530) *
                         C139561 +
                     (((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C186 +
                       (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
                        C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                           C139465) *
                          C139301 * C139530 -
                      ((C125482 * C73447 + C125378 * C73656 + C125481 * C21100 +
                        C125377 * C21530 + C125480 * C8678 + C125376 * C8995) *
                           C139465 +
                       (C125482 * C73391 + C125378 * C73499 + C125481 * C20984 +
                        C125377 * C21202 + C125480 * C8592 + C125376 * C8758) *
                           C186) *
                          C139301 * C139426) *
                         C7039) *
                    C139327) /
                   (p * q * std::sqrt(p + q));
    d2eezx[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139530 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139426) *
              C139560 +
          ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
            C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
               C139465 * C139426 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139530) *
              C139561 +
          ((C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
            C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
               C139465 * C139530 -
           ((C63570 * C73499 + C139301 * C73707) * C125378 +
            (C63570 * C73391 + C139301 * C73392) * C125482 + C69584 * C125377 +
            C69344 * C125481 + C67634 * C125376 + C67315 * C125480) *
               C139465 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139530 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139426) *
              C139560 +
          ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
            C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
               C139301 * C139426 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139530) *
              C139561 +
          (((C186 * C830 + C139465 * C940) * C125480 +
            (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
            C41371 * C125377 + C132988 * C125482 + C133450 * C125378) *
               C139301 * C139530 -
           ((C186 * C73499 + C139465 * C73758) * C125378 +
            (C186 * C73391 + C139465 * C73447) * C125482 + C133450 * C125377 +
            C132988 * C125481 + C41371 * C125376 + C40768 * C125480) *
               C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[126] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139530 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139426) *
              C139560 +
          ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
            C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
            C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
               C139465 * C139301 * C139426 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C139530) *
              C139561 +
          ((C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
            C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
            C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
               C139465 * C139301 * C139530 -
           (C125785 * C73391 + C133525 + C133525 + C125378 * C73809 +
            C125784 * C20984 + C133526 + C133526 + C125377 * C21839 +
            C125783 * C8592 + C133527 + C133527 + C125376 * C9226) *
               C139465 * C139301 * C139426) *
              C7039) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[127] +=
        (-std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
           C77704 * C125377 + C77705 * C125378) *
              C139465 * C139362 * C5796 -
          (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
              C139362 * C5797 +
          (C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
              C139362 * C5798 -
          ((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C125378 +
           C71373 * C125377 + C64106 * C125376) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139362 * C5149 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139362 * C139398) *
              C5151 +
          ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
               C139362 * C139398 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
            C79616 * C125377 + C127952 * C125378) *
               C139465 * C139362 * C5149 -
           ((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C125378 +
            C78713 * C125377 + C65575 * C125376) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C1757 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C1758 +
           (C77705 * C125376 + C88983 * C125377 +
            (C63569 * C43304 + C88980 + C88980 + C139301 * C43308) * C125378) *
               C139465 * C1759) *
              C5149 +
          ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
               C1758 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C1757 -
           ((C63569 * C88973 + C88979 + C88979 + C139301 * C88975) * C125378 +
            C83277 * C125377 + C69093 * C125376) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C63570 +
            (C186 * C112 + C139465 * C193) * C139301) *
               C125376 +
           (C126631 + C126632) * C125377 + C126643 * C125378) *
              C139362 * C5796 -
          ((C128766 + C128765) * C125378 + (C128764 + C128763) * C125377 +
           ((C186 * C837 + C139465 * C947) * C139301 +
            (C186 * C829 + C139465 * C939) * C63570) *
               C125376) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C63570 +
            (C186 * C838 + C139465 * C948) * C139301) *
               C125376 +
           (C40768 * C63570 + C40769 * C139301) * C125377 +
           ((C186 * C20984 + C139465 * C21100) * C63570 +
            (C186 * C20986 + C139465 * C21102) * C139301) *
               C125378) *
              C139362 * C5798 -
          (((C186 * C69081 + C139465 * C69171) * C139301 +
            (C186 * C69080 + C139465 * C69170) * C63570) *
               C125378 +
           ((C186 * C24000 + C139465 * C24116) * C139301 +
            (C186 * C23998 + C139465 * C24114) * C63570) *
               C125377 +
           ((C186 * C5806 + C139465 * C5868) * C139301 +
            (C186 * C5803 + C139465 * C5865) * C63570) *
               C125376) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139362 * C5149 -
           ((C128766 + C128765) * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C139362 * C139398) *
              C5151 +
          (((C973 * C63570 + C972 * C139301) * C125376 +
            (C128767 + C128768) * C125377 + (C128769 + C128770) * C125378) *
               C139362 * C139398 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C139362 * C5149) *
              C5152 +
          (((C218 * C63570 + C219 * C139301) * C125376 +
            (C128027 + C128028) * C125377 + (C128029 + C128030) * C125378) *
               C139362 * C5149 -
           (((C186 * C6326 + C139465 * C6412) * C139301 +
             (C186 * C6323 + C139465 * C6409) * C63570) *
                C125378 +
            (C4295 * C139301 + C4294 * C63570) * C125377 +
            (C970 * C139301 + C971 * C63570) * C125376) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C1757 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C1758 +
           (C126643 * C125376 + (C126636 + C126635) * C125377 +
            ((C186 * C43304 + C139465 * C43388) * C63570 +
             (C186 * C43306 + C139465 * C43390) * C139301) *
                C125378) *
               C1759) *
              C5149 +
          (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
            (C130750 + C130751) * C125378) *
               C1758 -
           (C130747 * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C1757 -
           (((C186 * C88974 + C139465 * C89050) * C139301 +
             (C186 * C88973 + C139465 * C89049) * C63570) *
                C125378 +
            (C130751 + C130750) * C125377 + C130747 * C125376) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[127] +=
        (-std::pow(Pi, 2.5) *
         (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
            C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
               C63570 +
           (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
            C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
               C139301) *
              C139465 * C139362 * C5796 -
          ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
            C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
               C139301 +
           (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
            C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
               C63570) *
              C139465 * C139362 * C5797 +
          ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
            C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
               C63570 +
           (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
            C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
               C139301) *
              C139465 * C139362 * C5798 -
          ((C125482 * C69081 + C125378 * C69247 + C125481 * C24000 +
            C125377 * C24218 + C125480 * C5806 + C125376 * C5924) *
               C139301 +
           (C125482 * C69080 + C125378 * C69246 + C125481 * C23998 +
            C125377 * C24216 + C125480 * C5803 + C125376 * C5921) *
               C63570) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C139362 * C5149 -
           ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
             C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                C139301 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C63570) *
               C139465 * C139362 * C139398) *
              C5151 +
          (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
             C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                C63570 +
            (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
             C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                C139301) *
               C139465 * C139362 * C139398 -
           ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
             C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                C139301 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C63570) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
             C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                C63570 +
            (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
             C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                C139301) *
               C139465 * C139362 * C5149 -
           ((C125482 * C6326 + C125378 * C6492 + C125481 * C4165 +
             C125377 * C4399 + C125480 * C835 + C125376 * C1059) *
                C139301 +
            (C125482 * C6323 + C125378 * C6489 + C125481 * C4161 +
             C125377 * C4395 + C125480 * C827 + C125376 * C1051) *
                C63570) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C1757 -
           ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
             C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                C139301 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C63570) *
               C139465 * C1758 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C63570 +
            (C125480 * C1771 + C125376 * C1995 + C125481 * C10623 +
             C125377 * C10741 + C125482 * C43306 + C125378 * C43470) *
                C139301) *
               C139465 * C1759) *
              C5149 +
          (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
             C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                C63570 +
            (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
             C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                C139301) *
               C139465 * C1758 -
           ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
             C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                C139301 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C63570) *
               C139465 * C1757 -
           ((C125482 * C88974 + C125378 * C89130 + C125481 * C26694 +
             C125377 * C26840 + C125480 * C6328 + C125376 * C6494) *
                C139301 +
            (C125482 * C88973 + C125378 * C89129 + C125481 * C26692 +
             C125377 * C26838 + C125480 * C6325 + C125376 * C6491) *
                C63570) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[127] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C186 +
            (C63570 * C187 + C139301 * C360) * C139465) *
               C125376 +
           (C126793 + C126794) * C125377 + C126807 * C125378) *
              C139362 * C5796 -
          ((C128970 + C128969) * C125378 + (C128968 + C128967) * C125377 +
           (C64377 * C139465 + C64376 * C186) * C125376) *
              C139362 * C5797 +
          ((C64378 * C186 + C64379 * C139465) * C125376 +
           (C67315 * C186 + C67314 * C139465) * C125377 +
           (C69344 * C186 + C69345 * C139465) * C125378) *
              C139362 * C5798 -
          (((C63570 * C69170 + C139301 * C69332) * C139465 +
            (C63570 * C69080 + C139301 * C69081) * C186) *
               C125378 +
           (C71616 * C139465 + C71615 * C186) * C125377 +
           (C64380 * C139465 + C64381 * C186) * C125376) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139362 * C5149 -
           ((C128970 + C128969) * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C139362 * C139398) *
              C5151 +
          (((C64382 * C186 + C64383 * C139465) * C125376 +
            (C128971 + C128972) * C125377 + (C128973 + C128974) * C125378) *
               C139362 * C139398 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C139362 * C5149) *
              C5152 +
          ((((C63570 * C108 + C139301 * C114) * C186 +
             (C63570 * C189 + C139301 * C362) * C139465) *
                C125376 +
            (C128179 + C128180) * C125377 + (C128187 + C128188) * C125378) *
               C139362 * C5149 -
           (((C63570 * C6409 + C139301 * C6569) * C139465 +
             (C63570 * C6323 + C139301 * C6326) * C186) *
                C125378 +
            (C79014 * C139465 + C79013 * C186) * C125377 +
            (C65814 * C139465 + C65813 * C186) * C125376) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C1757 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C1758 +
           (C126807 * C125376 + (C126798 + C126797) * C125377 +
            ((C63570 * C43304 + C139301 * C43306) * C186 +
             (C63570 * C43388 + C139301 * C43538) * C139465) *
                C125378) *
               C1759) *
              C5149 +
          (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
            (C130900 + C130901) * C125378) *
               C1758 -
           (C130902 * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C1757 -
           (((C63570 * C89049 + C139301 * C89197) * C139465 +
             (C63570 * C88973 + C139301 * C88974) * C186) *
                C125378 +
            (C130901 + C130900) * C125377 + C130902 * C125376) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[127] +=
        (-std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
           C126887 * C125377 + C126888 * C125378) *
              C139362 * C5796 -
          (C129074 * C125378 + C129073 * C125377 +
           (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
               C125376) *
              C139362 * C5797 +
          ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 * C125376 +
           C41073 * C139301 * C125377 +
           (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C139301 *
               C125378) *
              C139362 * C5798 -
          ((C416 * C69080 + C130391 + C130391 + C139465 * C69419) * C139301 *
               C125378 +
           (C416 * C23998 + C37337 + C37337 + C139465 * C24440) * C139301 *
               C125377 +
           (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C139301 *
               C125376) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139362 * C5149 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139362 * C139398) *
              C5151 +
          ((C1281 * C139301 * C125376 + C129075 * C125377 + C129076 * C125378) *
               C139362 * C139398 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C139362 * C5149) *
              C5152 +
          ((C447 * C139301 * C125376 + C128263 * C125377 + C128264 * C125378) *
               C139362 * C5149 -
           ((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139301 *
                C125378 +
            C4631 * C139301 * C125377 + C1280 * C139301 * C125376) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C1757 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) * C1758 +
           (C126888 * C125376 + C126889 * C125377 +
            (C416 * C43304 + C43624 + C43624 + C139465 * C43618) * C139301 *
                C125378) *
               C1759) *
              C5149 +
          ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) * C1758 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C1757 -
           ((C416 * C88973 + C130979 + C130979 + C139465 * C89274) * C139301 *
                C125378 +
            C130983 * C125377 + C129074 * C125376) *
               C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[127] +=
        (-std::pow(Pi, 2.5) *
         (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
            C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
               C186 +
           (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
            C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
               C139465) *
              C139301 * C139362 * C5796 -
          ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
            C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
               C139465 +
           (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
            C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
               C186) *
              C139301 * C139362 * C5797 +
          ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
            C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
               C186 +
           (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
            C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
               C139465) *
              C139301 * C139362 * C5798 -
          ((C125482 * C69170 + C125378 * C69497 + C125481 * C24114 +
            C125377 * C24544 + C125480 * C5865 + C125376 * C6086) *
               C139465 +
           (C125482 * C69080 + C125378 * C69246 + C125481 * C23998 +
            C125377 * C24216 + C125480 * C5803 + C125376 * C5921) *
               C186) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C139362 * C5149 -
           ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
             C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                C139465 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C186) *
               C139301 * C139362 * C139398) *
              C5151 +
          (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
             C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                C186 +
            (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
             C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                C139465) *
               C139301 * C139362 * C139398 -
           ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
             C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                C139465 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C186) *
               C139301 * C139362 * C5149) *
              C5152 +
          (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
             C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                C186 +
            (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
             C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                C139465) *
               C139301 * C139362 * C5149 -
           ((C125482 * C6409 + C125378 * C6726 + C125481 * C4277 +
             C125377 * C4731 + C125480 * C937 + C125376 * C1357) *
                C139465 +
            (C125482 * C6323 + C125378 * C6489 + C125481 * C4161 +
             C125377 * C4395 + C125480 * C827 + C125376 * C1051) *
                C186) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C1757 -
           ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
             C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                C139465 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C186) *
               C139301 * C1758 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C186 +
            (C125480 * C1873 + C125376 * C2293 + C125481 * C10682 +
             C125377 * C10903 + C125482 * C43388 + C125378 * C43695) *
                C139465) *
               C139301 * C1759) *
              C5149 +
          (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
             C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                C186 +
            (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
             C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                C139465) *
               C139301 * C1758 -
           ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
             C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                C139465 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C186) *
               C139301 * C1757 -
           ((C125482 * C89049 + C125378 * C89353 + C125481 * C26768 +
             C125377 * C27048 + C125480 * C6411 + C125376 * C6728) *
                C139465 +
            (C125482 * C88973 + C125378 * C89129 + C125481 * C26692 +
             C125377 * C26838 + C125480 * C6325 + C125376 * C6491) *
                C186) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[127] +=
        (-std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C125480 +
           (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
           C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
              C139465 * C139362 * C5796 -
          (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
           C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
              C139465 * C139362 * C5797 +
          (C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
           C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
              C139465 * C139362 * C5798 -
          ((C63570 * C69246 + C139301 * C69575) * C125378 +
           (C63570 * C69080 + C139301 * C69081) * C125482 + C71852 * C125377 +
           C71615 * C125481 + C64642 * C125376 + C64381 * C125480) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139362 * C5149 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139362 * C139398) *
              C5151 +
          ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
            C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
               C139465 * C139362 * C139398 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C63570 * C108 + C139301 * C114) * C125480 +
            (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
            C80217 * C125377 + C128185 * C125482 + C128415 * C125378) *
               C139465 * C139362 * C5149 -
           ((C63570 * C6489 + C139301 * C6803) * C125378 +
            (C63570 * C6323 + C139301 * C6326) * C125482 + C79314 * C125377 +
            C79013 * C125481 + C66048 * C125376 + C65813 * C125480) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C1757 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C1758 +
           (C78056 * C125480 + C78398 * C125376 + C89205 * C125481 +
            C89424 * C125377 + (C63570 * C43304 + C139301 * C43306) * C125482 +
            (C63570 * C43468 + C139301 * C43763) * C125378) *
               C139465 * C1759) *
              C5149 +
          ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
            C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
               C139465 * C1758 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C1757 -
           ((C63570 * C89129 + C139301 * C89420) * C125378 +
            (C63570 * C88973 + C139301 * C88974) * C125482 + C83924 * C125377 +
            C83605 * C125481 + C69583 * C125376 + C69342 * C125480) *
               C139465 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[127] +=
        (-std::pow(Pi, 2.5) *
         (((C186 * C106 + C139465 * C187) * C125480 +
           (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
           C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
              C139301 * C139362 * C5796 -
          (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
           C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
           (C186 * C829 + C139465 * C939) * C125480) *
              C139301 * C139362 * C5797 +
          ((C186 * C830 + C139465 * C940) * C125480 +
           (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
           C41371 * C125377 + (C186 * C20984 + C139465 * C21100) * C125482 +
           (C186 * C21202 + C139465 * C21739) * C125378) *
              C139301 * C139362 * C5798 -
          ((C186 * C69246 + C139465 * C69660) * C125378 +
           (C186 * C69080 + C139465 * C69170) * C125482 +
           (C186 * C24216 + C139465 * C24753) * C125377 +
           (C186 * C23998 + C139465 * C24114) * C125481 +
           (C186 * C5921 + C139465 * C6192) * C125376 +
           (C186 * C5803 + C139465 * C5865) * C125480) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139362 * C5149 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139362 * C139398) *
              C5151 +
          ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
            C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
               C139301 * C139362 * C139398 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139362 * C5149) *
              C5152 +
          ((C218 * C125480 + C653 * C125376 + C1904 * C125481 +
            C2495 * C125377 + C1909 * C125482 + C2498 * C125378) *
               C139301 * C139362 * C5149 -
           ((C186 * C6489 + C139465 * C6880) * C125378 +
            (C186 * C6323 + C139465 * C6409) * C125482 + C4955 * C125377 +
            C4294 * C125481 + C1562 * C125376 + C971 * C125480) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C1757 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C1758 +
           (C32135 * C125480 + C32875 * C125376 + C43398 * C125481 +
            C43841 * C125377 + (C186 * C43304 + C139465 * C43388) * C125482 +
            (C186 * C43468 + C139465 * C43837) * C125378) *
               C139301 * C1759) *
              C5149 +
          ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
            C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
               C139301 * C1758 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C1757 -
           ((C186 * C89129 + C139465 * C89490) * C125378 +
            (C186 * C88973 + C139465 * C89049) * C125482 + C131208 * C125377 +
            C130748 * C125481 + C38411 * C125376 + C37808 * C125480) *
               C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[127] +=
        (-std::pow(Pi, 2.5) *
         ((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
           C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
           C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
              C139465 * C139301 * C139362 * C5796 -
          (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
           C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
           C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
              C139465 * C139301 * C139362 * C5797 +
          (C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
           C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
           C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
              C139465 * C139301 * C139362 * C5798 -
          (C125785 * C69080 + C130592 + C130592 + C125378 * C69735 +
           C125784 * C23998 + C130593 + C130593 + C125377 * C24853 +
           C125783 * C5803 + C130594 + C130594 + C125376 * C6245) *
              C139465 * C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139362 * C5149 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C139362 * C139398) *
              C5151 +
          ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
            C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
            C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
               C139465 * C139301 * C139362 * C139398 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C139362 * C5149) *
              C5152 +
          ((C125783 * C108 + C125793 + C125793 + C125376 * C714 +
            C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
            C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
               C139465 * C139301 * C139362 * C5149 -
           (C125785 * C6323 + C127870 + C127870 + C125378 * C6957 +
            C125784 * C4161 + C127871 + C127871 + C125377 * C5057 +
            C125783 * C827 + C127872 + C127872 + C125376 * C1643) *
               C139465 * C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C1757 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C1758 +
           (C125783 * C1763 + C127195 + C127195 + C125376 * C2579 +
            C125784 * C10620 + C127196 + C127196 + C125377 * C11062 +
            C125785 * C43304 + C127197 + C127197 + C125378 * C43908) *
               C139465 * C139301 * C1759) *
              C5149 +
          ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
            C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
            C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
               C139465 * C139301 * C1758 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C1757 -
           (C125785 * C88973 + C131283 + C131283 + C125378 * C89563 +
            C125784 * C26692 + C131284 + C131284 + C125377 * C27252 +
            C125783 * C6325 + C131285 + C131285 + C125376 * C6959) *
               C139465 * C139301 * C1759) *
              C139398) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
             C77704 * C125377 + C77705 * C125378) *
                C139465 * C139530 -
            (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
                C139426) *
               C5149 +
           ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
                C139426 -
            (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
                C139530) *
               C139398) *
              C139521 +
          (((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) *
                C139465 * C139426 -
            (C77707 * C125378 + C77706 * C125377 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
                C139465 * C139530) *
               C5149 +
           ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
                C139530 -
            ((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C125378 +
             C77708 * C125377 + C66990 * C125376) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C63570 +
              (C186 * C112 + C139465 * C193) * C139301) *
                 C125376 +
             (C126631 + C126632) * C125377 + C126643 * C125378) *
                C139530 -
            ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
             (C126632 + C126631) * C125376) *
                C139426) *
               C5149 +
           (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
             (C130750 + C130751) * C125378) *
                C139426 -
            (C130747 * C125378 + (C128764 + C128763) * C125377 +
             ((C186 * C837 + C139465 * C947) * C139301 +
              (C186 * C829 + C139465 * C939) * C63570) *
                 C125376) *
                C139530) *
               C139398) *
              C139521 +
          ((((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
             (C126641 + C126642) * C125378) *
                C139426 -
            (C126644 * C125378 + (C126638 + C126637) * C125377 +
             (C217 * C139301 + C216 * C63570) * C125376) *
                C139530) *
               C5149 +
           (((C973 * C63570 + C972 * C139301) * C125376 +
             (C128767 + C128768) * C125377 + (C128769 + C128770) * C125378) *
                C139530 -
            (((C186 * C26693 + C139465 * C26769) * C139301 +
              (C186 * C26691 + C139465 * C26767) * C63570) *
                 C125378 +
             (C128770 + C128769) * C125377 + (C128768 + C128767) * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
              C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                 C63570 +
             (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
              C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                 C139301) *
                C139465 * C139530 -
            ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
              C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                 C139301 +
             (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
              C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                 C63570) *
                C139465 * C139426) *
               C5149 +
           (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
              C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                 C63570 +
             (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
              C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                 C139301) *
                C139465 * C139426 -
            ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
              C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                 C139301 +
             (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
              C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                 C63570) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          ((((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
              C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                 C63570 +
             (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
              C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                 C139301) *
                C139465 * C139426 -
            ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
              C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                 C139301 +
             (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
              C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                 C63570) *
                C139465 * C139530) *
               C5149 +
           (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
              C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                 C63570 +
             (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
              C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                 C139301) *
                C139465 * C139530 -
            ((C125482 * C26693 + C125378 * C26839 + C125481 * C6327 +
              C125377 * C6493 + C125480 * C4164 + C125376 * C4398) *
                 C139301 +
             (C125482 * C26691 + C125378 * C26837 + C125481 * C6324 +
              C125377 * C6490 + C125480 * C4160 + C125376 * C4394) *
                 C63570) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63570 * C106 + C139301 * C112) * C186 +
              (C63570 * C187 + C139301 * C360) * C139465) *
                 C125376 +
             (C126793 + C126794) * C125377 + C126807 * C125378) *
                C139530 -
            ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
             (C126794 + C126793) * C125376) *
                C139426) *
               C5149 +
           (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
             (C130900 + C130901) * C125378) *
                C139426 -
            (C130902 * C125378 + (C128968 + C128967) * C125377 +
             (C64377 * C139465 + C64376 * C186) * C125376) *
                C139530) *
               C139398) *
              C139521 +
          ((((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
             (C126811 + C126812) * C125378) *
                C139426 -
            (C126810 * C125378 + (C126800 + C126799) * C125377 +
             ((C63570 * C188 + C139301 * C361) * C139465 +
              (C63570 * C107 + C139301 * C113) * C186) *
                 C125376) *
                C139530) *
               C5149 +
           (((C64382 * C186 + C64383 * C139465) * C125376 +
             (C128971 + C128972) * C125377 + (C128973 + C128974) * C125378) *
                C139530 -
            (((C63570 * C26767 + C139301 * C26907) * C139465 +
              (C63570 * C26691 + C139301 * C26693) * C186) *
                 C125378 +
             (C128974 + C128973) * C125377 + (C128972 + C128971) * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
             C126887 * C125377 + C126888 * C125378) *
                C139530 -
            (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
                C139426) *
               C5149 +
           ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) *
                C139426 -
            (C129074 * C125378 + C129073 * C125377 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                 C125376) *
                C139530) *
               C139398) *
              C139521 +
          (((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
                C139426 -
            (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
                C139530) *
               C5149 +
           ((C1281 * C139301 * C125376 + C129075 * C125377 +
             C129076 * C125378) *
                C139530 -
            ((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139301 *
                 C125378 +
             C129076 * C125377 + C129075 * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
              C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                 C186 +
             (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
              C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                 C139465) *
                C139301 * C139530 -
            ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
              C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                 C139465 +
             (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
              C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                 C186) *
                C139301 * C139426) *
               C5149 +
           (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
              C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                 C186 +
             (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
              C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                 C139465) *
                C139301 * C139426 -
            ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
              C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                 C139465 +
             (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
              C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                 C186) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          ((((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
              C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                 C186 +
             (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
              C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                 C139465) *
                C139301 * C139426 -
            ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
              C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                 C139465 +
             (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
              C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                 C186) *
                C139301 * C139530) *
               C5149 +
           (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
              C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                 C186 +
             (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
              C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                 C139465) *
                C139301 * C139530 -
            ((C125482 * C26767 + C125378 * C27047 + C125481 * C6410 +
              C125377 * C6727 + C125480 * C4276 + C125376 * C4730) *
                 C139465 +
             (C125482 * C26691 + C125378 * C26837 + C125481 * C6324 +
              C125377 * C6490 + C125480 * C4160 + C125376 * C4394) *
                 C186) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C125480 +
             (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
             C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
                C139465 * C139530 -
            (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
             C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
                C139465 * C139426) *
               C5149 +
           ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
             C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
                C139465 * C139426 -
            (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
             C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
                C139465 * C139530) *
               C139398) *
              C139521 +
          (((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
             C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
                C139465 * C139426 -
            (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
             C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
             (C63570 * C107 + C139301 * C113) * C125480) *
                C139465 * C139530) *
               C5149 +
           ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
             C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
                C139465 * C139530 -
            ((C63570 * C26837 + C139301 * C27115) * C125378 +
             (C63570 * C26691 + C139301 * C26693) * C125482 + C78401 * C125377 +
             C78061 * C125481 + C67636 * C125376 + C67318 * C125480) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C125480 +
             (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
             C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
                C139301 * C139530 -
            (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
             C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
                C139301 * C139426) *
               C5149 +
           ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
             C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
                C139301 * C139426 -
            (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
             C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
             (C186 * C829 + C139465 * C939) * C125480) *
                C139301 * C139530) *
               C139398) *
              C139521 +
          (((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
             C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
                C139301 * C139426 -
            (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
             C1906 * C125481 + C652 * C125376 + C216 * C125480) *
                C139301 * C139530) *
               C5149 +
           ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
             C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
                C139301 * C139530 -
            ((C186 * C26837 + C139465 * C27183) * C125378 +
             (C186 * C26691 + C139465 * C26767) * C125482 + C35976 * C125377 +
             C35152 * C125481 + C4954 * C125376 + C4292 * C125480) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[128] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
             C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
             C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
                C139465 * C139301 * C139530 -
            (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
             C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
             C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
                C139465 * C139301 * C139426) *
               C5149 +
           ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
             C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
             C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
                C139465 * C139301 * C139426 -
            (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
             C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
             C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
                C139465 * C139301 * C139530) *
               C139398) *
              C139521 +
          (((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
             C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
             C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
                C139465 * C139301 * C139426 -
            (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
             C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
             C125783 * C107 + C125792 + C125792 + C125376 * C713) *
                C139465 * C139301 * C139530) *
               C5149 +
           ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
             C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
             C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
                C139465 * C139301 * C139530 -
            (C125785 * C26691 + C129472 + C129472 + C125378 * C27251 +
             C125784 * C6324 + C129473 + C129473 + C125377 * C6958 +
             C125783 * C4160 + C129474 + C129474 + C125376 * C5056) *
                C139465 * C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139362 * C5149 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139362 * C139398) *
              C5151 +
          ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
               C139362 * C139398 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
            C79616 * C125377 + C127952 * C125378) *
               C139465 * C139362 * C5149 -
           ((C63569 * C6323 + C79612 + C79612 + C139301 * C6329) * C125378 +
            C78713 * C125377 + C65575 * C125376) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
           C77704 * C125377 + C77705 * C125378) *
              C139465 * C139362 * C5796 -
          (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
              C139362 * C5797 +
          (C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
              C139362 * C5798 -
          ((C63569 * C69080 + C69088 + C69088 + C139301 * C69082) * C125378 +
           C71373 * C125377 + C64106 * C125376) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139362 * C5149 -
           ((C128766 + C128765) * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C139362 * C139398) *
              C5151 +
          (((C973 * C63570 + C972 * C139301) * C125376 +
            (C128767 + C128768) * C125377 + (C128769 + C128770) * C125378) *
               C139362 * C139398 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C139362 * C5149) *
              C5152 +
          (((C218 * C63570 + C219 * C139301) * C125376 +
            (C128027 + C128028) * C125377 + (C128029 + C128030) * C125378) *
               C139362 * C5149 -
           (((C186 * C6326 + C139465 * C6412) * C139301 +
             (C186 * C6323 + C139465 * C6409) * C63570) *
                C125378 +
            (C4295 * C139301 + C4294 * C63570) * C125377 +
            (C970 * C139301 + C971 * C63570) * C125376) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C63570 +
            (C186 * C112 + C139465 * C193) * C139301) *
               C125376 +
           (C126631 + C126632) * C125377 + C126643 * C125378) *
              C139362 * C5796 -
          ((C128766 + C128765) * C125378 + (C128764 + C128763) * C125377 +
           ((C186 * C837 + C139465 * C947) * C139301 +
            (C186 * C829 + C139465 * C939) * C63570) *
               C125376) *
              C139362 * C5797 +
          (((C186 * C830 + C139465 * C940) * C63570 +
            (C186 * C838 + C139465 * C948) * C139301) *
               C125376 +
           (C40768 * C63570 + C40769 * C139301) * C125377 +
           ((C186 * C20984 + C139465 * C21100) * C63570 +
            (C186 * C20986 + C139465 * C21102) * C139301) *
               C125378) *
              C139362 * C5798 -
          (((C186 * C69081 + C139465 * C69171) * C139301 +
            (C186 * C69080 + C139465 * C69170) * C63570) *
               C125378 +
           ((C186 * C24000 + C139465 * C24116) * C139301 +
            (C186 * C23998 + C139465 * C24114) * C63570) *
               C125377 +
           ((C186 * C5806 + C139465 * C5868) * C139301 +
            (C186 * C5803 + C139465 * C5865) * C63570) *
               C125376) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C139362 * C5149 -
                      ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                        C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                           C139301 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C63570) *
                          C139465 * C139362 * C139398) *
                         C5151 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C63570 +
                       (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
                        C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                           C139301) *
                          C139465 * C139362 * C139398 -
                      ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                        C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                           C139301 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C63570) *
                          C139465 * C139362 * C5149) *
                         C5152 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C63570 +
                       (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
                        C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                           C139301) *
                          C139465 * C139362 * C5149 -
                      ((C125482 * C6326 + C125378 * C6492 + C125481 * C4165 +
                        C125377 * C4399 + C125480 * C835 + C125376 * C1059) *
                           C139301 +
                       (C125482 * C6323 + C125378 * C6489 + C125481 * C4161 +
                        C125377 * C4395 + C125480 * C827 + C125376 * C1051) *
                           C63570) *
                          C139465 * C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                       C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                          C63570 +
                      (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                       C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                          C139301) *
                         C139465 * C139362 * C5796 -
                     ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                       C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                          C139301 +
                      (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                       C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                          C63570) *
                         C139465 * C139362 * C5797 +
                     ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                       C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                          C63570 +
                      (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
                       C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                          C139301) *
                         C139465 * C139362 * C5798 -
                     ((C125482 * C69081 + C125378 * C69247 + C125481 * C24000 +
                       C125377 * C24218 + C125480 * C5806 + C125376 * C5924) *
                          C139301 +
                      (C125482 * C69080 + C125378 * C69246 + C125481 * C23998 +
                       C125377 * C24216 + C125480 * C5803 + C125376 * C5921) *
                          C63570) *
                         C139465 * C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139362 * C5149 -
           ((C128970 + C128969) * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C139362 * C139398) *
              C5151 +
          (((C64382 * C186 + C64383 * C139465) * C125376 +
            (C128971 + C128972) * C125377 + (C128973 + C128974) * C125378) *
               C139362 * C139398 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C139362 * C5149) *
              C5152 +
          ((((C63570 * C108 + C139301 * C114) * C186 +
             (C63570 * C189 + C139301 * C362) * C139465) *
                C125376 +
            (C128179 + C128180) * C125377 + (C128187 + C128188) * C125378) *
               C139362 * C5149 -
           (((C63570 * C6409 + C139301 * C6569) * C139465 +
             (C63570 * C6323 + C139301 * C6326) * C186) *
                C125378 +
            (C79014 * C139465 + C79013 * C186) * C125377 +
            (C65814 * C139465 + C65813 * C186) * C125376) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C186 +
            (C63570 * C187 + C139301 * C360) * C139465) *
               C125376 +
           (C126793 + C126794) * C125377 + C126807 * C125378) *
              C139362 * C5796 -
          ((C128970 + C128969) * C125378 + (C128968 + C128967) * C125377 +
           (C64377 * C139465 + C64376 * C186) * C125376) *
              C139362 * C5797 +
          ((C64378 * C186 + C64379 * C139465) * C125376 +
           (C67315 * C186 + C67314 * C139465) * C125377 +
           (C69344 * C186 + C69345 * C139465) * C125378) *
              C139362 * C5798 -
          (((C63570 * C69170 + C139301 * C69332) * C139465 +
            (C63570 * C69080 + C139301 * C69081) * C186) *
               C125378 +
           (C71616 * C139465 + C71615 * C186) * C125377 +
           (C64380 * C139465 + C64381 * C186) * C125376) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139362 * C5149 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139362 * C139398) *
              C5151 +
          ((C1281 * C139301 * C125376 + C129075 * C125377 + C129076 * C125378) *
               C139362 * C139398 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C139362 * C5149) *
              C5152 +
          ((C447 * C139301 * C125376 + C128263 * C125377 + C128264 * C125378) *
               C139362 * C5149 -
           ((C416 * C6323 + C6650 + C6650 + C139465 * C6646) * C139301 *
                C125378 +
            C4631 * C139301 * C125377 + C1280 * C139301 * C125376) *
               C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
           C126887 * C125377 + C126888 * C125378) *
              C139362 * C5796 -
          (C129074 * C125378 + C129073 * C125377 +
           (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
               C125376) *
              C139362 * C5797 +
          ((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 * C125376 +
           C41073 * C139301 * C125377 +
           (C416 * C20984 + C41070 + C41070 + C139465 * C21426) * C139301 *
               C125378) *
              C139362 * C5798 -
          ((C416 * C69080 + C130391 + C130391 + C139465 * C69419) * C139301 *
               C125378 +
           (C416 * C23998 + C37337 + C37337 + C139465 * C24440) * C139301 *
               C125377 +
           (C416 * C5803 + C6034 + C6034 + C139465 * C6030) * C139301 *
               C125376) *
              C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C139362 * C5149 -
                      ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                        C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                           C139465 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C186) *
                          C139301 * C139362 * C139398) *
                         C5151 +
                     (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
                        C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                           C186 +
                       (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
                        C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                           C139465) *
                          C139301 * C139362 * C139398 -
                      ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                        C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                           C139465 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C186) *
                          C139301 * C139362 * C5149) *
                         C5152 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C186 +
                       (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
                        C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                           C139465) *
                          C139301 * C139362 * C5149 -
                      ((C125482 * C6409 + C125378 * C6726 + C125481 * C4277 +
                        C125377 * C4731 + C125480 * C937 + C125376 * C1357) *
                           C139465 +
                       (C125482 * C6323 + C125378 * C6489 + C125481 * C4161 +
                        C125377 * C4395 + C125480 * C827 + C125376 * C1051) *
                           C186) *
                          C139301 * C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                       C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                          C186 +
                      (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                       C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                          C139465) *
                         C139301 * C139362 * C5796 -
                     ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                       C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                          C139465 +
                      (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                       C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                          C186) *
                         C139301 * C139362 * C5797 +
                     ((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                       C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                          C186 +
                      (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
                       C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                          C139465) *
                         C139301 * C139362 * C5798 -
                     ((C125482 * C69170 + C125378 * C69497 + C125481 * C24114 +
                       C125377 * C24544 + C125480 * C5865 + C125376 * C6086) *
                          C139465 +
                      (C125482 * C69080 + C125378 * C69246 + C125481 * C23998 +
                       C125377 * C24216 + C125480 * C5803 + C125376 * C5921) *
                          C186) *
                         C139301 * C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezx[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139362 * C5149 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139362 * C139398) *
              C5151 +
          ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
            C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
               C139465 * C139362 * C139398 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139362 * C5149) *
              C5152 +
          (((C63570 * C108 + C139301 * C114) * C125480 +
            (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
            C80217 * C125377 + C128185 * C125482 + C128415 * C125378) *
               C139465 * C139362 * C5149 -
           ((C63570 * C6489 + C139301 * C6803) * C125378 +
            (C63570 * C6323 + C139301 * C6326) * C125482 + C79314 * C125377 +
            C79013 * C125481 + C66048 * C125376 + C65813 * C125480) *
               C139465 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C125480 +
           (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
           C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
              C139465 * C139362 * C5796 -
          (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
           C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
              C139465 * C139362 * C5797 +
          (C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
           C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
              C139465 * C139362 * C5798 -
          ((C63570 * C69246 + C139301 * C69575) * C125378 +
           (C63570 * C69080 + C139301 * C69081) * C125482 + C71852 * C125377 +
           C71615 * C125481 + C64642 * C125376 + C64381 * C125480) *
              C139465 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[129] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139362 * C5149 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139362 * C139398) *
              C5151 +
          ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
            C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
               C139301 * C139362 * C139398 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139362 * C5149) *
              C5152 +
          ((C218 * C125480 + C653 * C125376 + C1904 * C125481 +
            C2495 * C125377 + C1909 * C125482 + C2498 * C125378) *
               C139301 * C139362 * C5149 -
           ((C186 * C6489 + C139465 * C6880) * C125378 +
            (C186 * C6323 + C139465 * C6409) * C125482 + C4955 * C125377 +
            C4294 * C125481 + C1562 * C125376 + C971 * C125480) *
               C139301 * C139362 * C139398) *
              C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C186 * C106 + C139465 * C187) * C125480 +
           (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
           C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
              C139301 * C139362 * C5796 -
          (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
           C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
           (C186 * C829 + C139465 * C939) * C125480) *
              C139301 * C139362 * C5797 +
          ((C186 * C830 + C139465 * C940) * C125480 +
           (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
           C41371 * C125377 + (C186 * C20984 + C139465 * C21100) * C125482 +
           (C186 * C21202 + C139465 * C21739) * C125378) *
              C139301 * C139362 * C5798 -
          ((C186 * C69246 + C139465 * C69660) * C125378 +
           (C186 * C69080 + C139465 * C69170) * C125482 +
           (C186 * C24216 + C139465 * C24753) * C125377 +
           (C186 * C23998 + C139465 * C24114) * C125481 +
           (C186 * C5921 + C139465 * C6192) * C125376 +
           (C186 * C5803 + C139465 * C5865) * C125480) *
              C139301 * C139362 * C5799) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[129] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
                       C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
                       C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
                          C139465 * C139301 * C139362 * C5149 -
                      (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
                       C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
                       C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
                          C139465 * C139301 * C139362 * C139398) *
                         C5151 +
                     ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
                       C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
                       C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
                          C139465 * C139301 * C139362 * C139398 -
                      (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
                       C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
                       C125783 * C107 + C125792 + C125792 + C125376 * C713) *
                          C139465 * C139301 * C139362 * C5149) *
                         C5152 +
                     ((C125783 * C108 + C125793 + C125793 + C125376 * C714 +
                       C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
                       C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
                          C139465 * C139301 * C139362 * C5149 -
                      (C125785 * C6323 + C127870 + C127870 + C125378 * C6957 +
                       C125784 * C4161 + C127871 + C127871 + C125377 * C5057 +
                       C125783 * C827 + C127872 + C127872 + C125376 * C1643) *
                          C139465 * C139301 * C139362 * C139398) *
                         C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
                      C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
                      C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
                         C139465 * C139301 * C139362 * C5796 -
                     (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
                      C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
                      C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
                         C139465 * C139301 * C139362 * C5797 +
                     (C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
                      C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
                      C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
                         C139465 * C139301 * C139362 * C5798 -
                     (C125785 * C69080 + C130592 + C130592 + C125378 * C69735 +
                      C125784 * C23998 + C130593 + C130593 + C125377 * C24853 +
                      C125783 * C5803 + C130594 + C130594 + C125376 * C6245) *
                         C139465 * C139301 * C139362 * C5799) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eexx[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
             C77704 * C125377 + C77705 * C125378) *
                C139465 * C9304 -
            (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
                C139426) *
               C139529 +
           ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
                C139426 -
            (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
                C9304) *
               C139398) *
              C139521 +
          (((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) *
                C139465 * C139426 -
            (C77707 * C125378 + C77706 * C125377 +
             (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
                C139465 * C9304) *
               C139529 +
           ((C64107 * C125376 + C66990 * C125377 + C77708 * C125378) * C139465 *
                C9304 -
            ((C63569 * C26691 + C77692 + C77692 + C139301 * C26695) * C125378 +
             C77708 * C125377 + C66990 * C125376) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C186 * C106 + C139465 * C187) * C63570 +
              (C186 * C112 + C139465 * C193) * C139301) *
                 C125376 +
             (C126631 + C126632) * C125377 + C126643 * C125378) *
                C9304 -
            (C134971 * C125378 + (C126634 + C126633) * C125377 +
             (C126632 + C126631) * C125376) *
                C139426) *
               C139529 +
           (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
             (C130750 + C130751) * C125378) *
                C139426 -
            (C130747 * C125378 + (C128764 + C128763) * C125377 +
             ((C186 * C837 + C139465 * C947) * C139301 +
              (C186 * C829 + C139465 * C939) * C63570) *
                 C125376) *
                C9304) *
               C139398) *
              C139521 +
          ((((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
             (C126641 + C126642) * C125378) *
                C139426 -
            (C126644 * C125378 + (C126638 + C126637) * C125377 +
             (C217 * C139301 + C216 * C63570) * C125376) *
                C9304) *
               C139529 +
           (((C973 * C63570 + C972 * C139301) * C125376 +
             (C128767 + C128768) * C125377 + (C128769 + C128770) * C125378) *
                C9304 -
            (((C186 * C26693 + C139465 * C26769) * C139301 +
              (C186 * C26691 + C139465 * C26767) * C63570) *
                 C125378 +
             (C128770 + C128769) * C125377 + (C128768 + C128767) * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
              C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                 C63570 +
             (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
              C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                 C139301) *
                C139465 * C9304 -
            ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
              C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                 C139301 +
             (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
              C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                 C63570) *
                C139465 * C139426) *
               C139529 +
           (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
              C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                 C63570 +
             (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
              C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                 C139301) *
                C139465 * C139426 -
            ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
              C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                 C139301 +
             (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
              C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                 C63570) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          ((((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
              C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                 C63570 +
             (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
              C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                 C139301) *
                C139465 * C139426 -
            ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
              C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                 C139301 +
             (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
              C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                 C63570) *
                C139465 * C9304) *
               C139529 +
           (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
              C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                 C63570 +
             (C125480 * C836 + C125376 * C1060 + C125481 * C4164 +
              C125377 * C4398 + C125482 * C6327 + C125378 * C6493) *
                 C139301) *
                C139465 * C9304 -
            ((C125482 * C26693 + C125378 * C26839 + C125481 * C6327 +
              C125377 * C6493 + C125480 * C4164 + C125376 * C4398) *
                 C139301 +
             (C125482 * C26691 + C125378 * C26837 + C125481 * C6324 +
              C125377 * C6490 + C125480 * C4160 + C125376 * C4394) *
                 C63570) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C63570 * C106 + C139301 * C112) * C186 +
              (C63570 * C187 + C139301 * C360) * C139465) *
                 C125376 +
             (C126793 + C126794) * C125377 + C126807 * C125378) *
                C9304 -
            (C135083 * C125378 + (C126796 + C126795) * C125377 +
             (C126794 + C126793) * C125376) *
                C139426) *
               C139529 +
           (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
             (C130900 + C130901) * C125378) *
                C139426 -
            (C130902 * C125378 + (C128968 + C128967) * C125377 +
             (C64377 * C139465 + C64376 * C186) * C125376) *
                C9304) *
               C139398) *
              C139521 +
          ((((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
             (C126811 + C126812) * C125378) *
                C139426 -
            (C126810 * C125378 + (C126800 + C126799) * C125377 +
             ((C63570 * C188 + C139301 * C361) * C139465 +
              (C63570 * C107 + C139301 * C113) * C186) *
                 C125376) *
                C9304) *
               C139529 +
           (((C64382 * C186 + C64383 * C139465) * C125376 +
             (C128971 + C128972) * C125377 + (C128973 + C128974) * C125378) *
                C9304 -
            (((C63570 * C26767 + C139301 * C26907) * C139465 +
              (C63570 * C26691 + C139301 * C26693) * C186) *
                 C125378 +
             (C128974 + C128973) * C125377 + (C128972 + C128971) * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
             C126887 * C125377 + C126888 * C125378) *
                C9304 -
            (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
                C139426) *
               C139529 +
           ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) *
                C139426 -
            (C129074 * C125378 + C129073 * C125377 +
             (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                 C125376) *
                C9304) *
               C139398) *
              C139521 +
          (((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
                C139426 -
            (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
                C9304) *
               C139529 +
           ((C1281 * C139301 * C125376 + C129075 * C125377 +
             C129076 * C125378) *
                C9304 -
            ((C416 * C26691 + C38109 + C38109 + C139465 * C26975) * C139301 *
                 C125378 +
             C129076 * C125377 + C129075 * C125376) *
                C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
              C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                 C186 +
             (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
              C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                 C139465) *
                C139301 * C9304 -
            ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
              C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                 C139465 +
             (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
              C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                 C186) *
                C139301 * C139426) *
               C139529 +
           (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
              C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                 C186 +
             (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
              C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                 C139465) *
                C139301 * C139426 -
            ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
              C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                 C139465 +
             (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
              C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                 C186) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          ((((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
              C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                 C186 +
             (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
              C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                 C139465) *
                C139301 * C139426 -
            ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
              C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                 C139465 +
             (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
              C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                 C186) *
                C139301 * C9304) *
               C139529 +
           (((C125480 * C828 + C125376 * C1052 + C125481 * C4160 +
              C125377 * C4394 + C125482 * C6324 + C125378 * C6490) *
                 C186 +
             (C125480 * C938 + C125376 * C1358 + C125481 * C4276 +
              C125377 * C4730 + C125482 * C6410 + C125378 * C6727) *
                 C139465) *
                C139301 * C9304 -
            ((C125482 * C26767 + C125378 * C27047 + C125481 * C6410 +
              C125377 * C6727 + C125480 * C4276 + C125376 * C4730) *
                 C139465 +
             (C125482 * C26691 + C125378 * C26837 + C125481 * C6324 +
              C125377 * C6490 + C125480 * C4160 + C125376 * C4394) *
                 C186) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C125480 +
             (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
             C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
                C139465 * C9304 -
            (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
             C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
                C139465 * C139426) *
               C139529 +
           ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
             C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
                C139465 * C139426 -
            (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
             C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
                C139465 * C9304) *
               C139398) *
              C139521 +
          (((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
             C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
                C139465 * C139426 -
            (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
             C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
             (C63570 * C107 + C139301 * C113) * C125480) *
                C139465 * C9304) *
               C139529 +
           ((C64382 * C125480 + C64643 * C125376 + C67318 * C125481 +
             C67636 * C125377 + C78061 * C125482 + C78401 * C125378) *
                C139465 * C9304 -
            ((C63570 * C26837 + C139301 * C27115) * C125378 +
             (C63570 * C26691 + C139301 * C26693) * C125482 + C78401 * C125377 +
             C78061 * C125481 + C67636 * C125376 + C67318 * C125480) *
                C139465 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C125480 +
             (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
             C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
                C139301 * C9304 -
            (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
             C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
                C139301 * C139426) *
               C139529 +
           ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
             C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
                C139301 * C139426 -
            (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
             C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
             (C186 * C829 + C139465 * C939) * C125480) *
                C139301 * C9304) *
               C139398) *
              C139521 +
          (((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
             C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
                C139301 * C139426 -
            (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
             C1906 * C125481 + C652 * C125376 + C216 * C125480) *
                C139301 * C9304) *
               C139529 +
           ((C973 * C125480 + C1563 * C125376 + C4292 * C125481 +
             C4954 * C125377 + C35152 * C125482 + C35976 * C125378) *
                C139301 * C9304 -
            ((C186 * C26837 + C139465 * C27183) * C125378 +
             (C186 * C26691 + C139465 * C26767) * C125482 + C35976 * C125377 +
             C35152 * C125481 + C4954 * C125376 + C4292 * C125480) *
                C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[130] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
             C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
             C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
                C139465 * C139301 * C9304 -
            (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
             C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
             C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
                C139465 * C139301 * C139426) *
               C139529 +
           ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
             C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
             C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
                C139465 * C139301 * C139426 -
            (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
             C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
             C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
                C139465 * C139301 * C9304) *
               C139398) *
              C139521 +
          (((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
             C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
             C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
                C139465 * C139301 * C139426 -
            (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
             C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
             C125783 * C107 + C125792 + C125792 + C125376 * C713) *
                C139465 * C139301 * C9304) *
               C139529 +
           ((C125783 * C828 + C126471 + C126471 + C125376 * C1644 +
             C125784 * C4160 + C126472 + C126472 + C125377 * C5056 +
             C125785 * C6324 + C126473 + C126473 + C125378 * C6958) *
                C139465 * C139301 * C9304 -
            (C125785 * C26691 + C129472 + C129472 + C125378 * C27251 +
             C125784 * C6324 + C129473 + C129473 + C125377 * C6958 +
             C125783 * C4160 + C129474 + C129474 + C125376 * C5056) *
                C139465 * C139301 * C139426) *
               C139398) *
              C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139562 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139563 +
           (C77705 * C125376 + C88983 * C125377 + C134918 * C125378) * C139465 *
               C12024) *
              C139529 +
          ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
               C139563 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C139562 -
           ((C63569 * C88973 + C88979 + C88979 + C139301 * C88975) * C125378 +
            C83277 * C125377 + C69093 * C125376) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139562 -
           (C134971 * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139563 +
           (C126643 * C125376 + (C126636 + C126635) * C125377 +
            (C134978 + C134979) * C125378) *
               C12024) *
              C139529 +
          (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
            (C130750 + C130751) * C125378) *
               C139563 -
           (C130747 * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C139562 -
           (((C186 * C88974 + C139465 * C89050) * C139301 +
             (C186 * C88973 + C139465 * C89049) * C63570) *
                C125378 +
            (C130751 + C130750) * C125377 + C130747 * C125376) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C139562 -
           ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
             C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                C139301 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C63570) *
               C139465 * C139563 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C63570 +
            (C125480 * C1771 + C125376 * C1995 + C125481 * C10623 +
             C125377 * C10741 + C125482 * C43306 + C125378 * C43470) *
                C139301) *
               C139465 * C12024) *
              C139529 +
          (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
             C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                C63570 +
            (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
             C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                C139301) *
               C139465 * C139563 -
           ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
             C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                C139301 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C63570) *
               C139465 * C139562 -
           ((C125482 * C88974 + C125378 * C89130 + C125481 * C26694 +
             C125377 * C26840 + C125480 * C6328 + C125376 * C6494) *
                C139301 +
            (C125482 * C88973 + C125378 * C89129 + C125481 * C26692 +
             C125377 * C26838 + C125480 * C6325 + C125376 * C6491) *
                C63570) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139562 -
           (C135083 * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139563 +
           (C126807 * C125376 + (C126798 + C126797) * C125377 +
            (C135090 + C135091) * C125378) *
               C12024) *
              C139529 +
          (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
            (C130900 + C130901) * C125378) *
               C139563 -
           (C130902 * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C139562 -
           (((C63570 * C89049 + C139301 * C89197) * C139465 +
             (C63570 * C88973 + C139301 * C88974) * C186) *
                C125378 +
            (C130901 + C130900) * C125377 + C130902 * C125376) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139562 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139563 +
           (C126888 * C125376 + C126889 * C125377 + C135149 * C125378) *
               C12024) *
              C139529 +
          ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) *
               C139563 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C139562 -
           ((C416 * C88973 + C130979 + C130979 + C139465 * C89274) * C139301 *
                C125378 +
            C130983 * C125377 + C129074 * C125376) *
               C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eeyz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C139562 -
           ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
             C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                C139465 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C186) *
               C139301 * C139563 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C186 +
            (C125480 * C1873 + C125376 * C2293 + C125481 * C10682 +
             C125377 * C10903 + C125482 * C43388 + C125378 * C43695) *
                C139465) *
               C139301 * C12024) *
              C139529 +
          (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
             C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                C186 +
            (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
             C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                C139465) *
               C139301 * C139563 -
           ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
             C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                C139465 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C186) *
               C139301 * C139562 -
           ((C125482 * C89049 + C125378 * C89353 + C125481 * C26768 +
             C125377 * C27048 + C125480 * C6411 + C125376 * C6728) *
                C139465 +
            (C125482 * C88973 + C125378 * C89129 + C125481 * C26692 +
             C125377 * C26838 + C125480 * C6325 + C125376 * C6491) *
                C186) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezx[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139562 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139563 +
           (C78056 * C125480 + C78398 * C125376 + C89205 * C125481 +
            C89424 * C125377 + C135088 * C125482 + C135254 * C125378) *
               C139465 * C12024) *
              C139529 +
          ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
            C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
               C139465 * C139563 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C139562 -
           ((C63570 * C89129 + C139301 * C89420) * C125378 +
            (C63570 * C88973 + C139301 * C88974) * C125482 + C83924 * C125377 +
            C83605 * C125481 + C69583 * C125376 + C69342 * C125480) *
               C139465 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezy[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139562 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139563 +
           (C32135 * C125480 + C32875 * C125376 + C43398 * C125481 +
            C43841 * C125377 + C134976 * C125482 + C135308 * C125378) *
               C139301 * C12024) *
              C139529 +
          ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
            C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
               C139301 * C139563 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C139562 -
           ((C186 * C89129 + C139465 * C89490) * C125378 +
            (C186 * C88973 + C139465 * C89049) * C125482 + C131208 * C125377 +
            C130748 * C125481 + C38411 * C125376 + C37808 * C125480) *
               C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eezz[131] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139562 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139563 +
           (C125783 * C1763 + C127195 + C127195 + C125376 * C2579 +
            C125784 * C10620 + C127196 + C127196 + C125377 * C11062 +
            C125785 * C43304 + C127197 + C127197 + C125378 * C43908) *
               C139465 * C139301 * C12024) *
              C139529 +
          ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
            C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
            C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
               C139465 * C139301 * C139563 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C139562 -
           (C125785 * C88973 + C131283 + C131283 + C125378 * C89563 +
            C125784 * C26692 + C131284 + C131284 + C125377 * C27252 +
            C125783 * C6325 + C131285 + C131285 + C125376 * C6959) *
               C139465 * C139301 * C12024) *
              C139398) *
         C139327) /
        (p * q * std::sqrt(p + q));
    d2eexx[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C9304 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139426) *
              C822 +
          ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
               C139426 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C9304) *
              C823 +
          ((C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
               C9304 -
           ((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C125378 +
            C69094 * C125377 + C66988 * C125376) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C9304 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139426) *
              C139346 * C5151 +
          ((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) * C139465 *
               C139426 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
            C79616 * C125377 + C127952 * C125378) *
               C139465 * C9304 -
           ((C63569 * C10618 + C127949 + C127949 + C139301 * C10624) * C125378 +
            C127952 * C125377 + C79616 * C125376) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
           C77704 * C125377 + C77705 * C125378) *
              C139465 * C10614 -
          (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
              C10615 +
          (C77705 * C125376 + C88983 * C125377 + C134918 * C125378) * C139465 *
              C10616 -
          ((C63569 * C134909 + C134915 + C134915 + C139301 * C134911) *
               C125378 +
           C134918 * C125377 + C88983 * C125376) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[132] +=
        (-std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C9304 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139426) *
              C822 +
          (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
            (C130750 + C130751) * C125378) *
               C139426 -
           (C130747 * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C63570 +
             (C186 * C838 + C139465 * C948) * C139301) *
                C125376 +
            (C132982 + C132983) * C125377 + (C132990 + C132991) * C125378) *
               C9304 -
           (((C186 * C73392 + C139465 * C73448) * C139301 +
             (C186 * C73391 + C139465 * C73447) * C63570) *
                C125378 +
            (C132991 + C132990) * C125377 + (C132983 + C132982) * C125376) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C9304 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139426) *
              C139346 * C5151 +
          (((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
            (C126641 + C126642) * C125378) *
               C139426 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C9304) *
              C139346 * C5152 +
          (((C218 * C63570 + C219 * C139301) * C125376 +
            (C128027 + C128028) * C125377 + (C128029 + C128030) * C125378) *
               C9304 -
           (((C186 * C10621 + C139465 * C10683) * C139301 +
             (C186 * C10618 + C139465 * C10680) * C63570) *
                C125378 +
            (C128030 + C128029) * C125377 + (C128028 + C128027) * C125376) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C63570 +
            (C186 * C112 + C139465 * C193) * C139301) *
               C125376 +
           (C126631 + C126632) * C125377 + C126643 * C125378) *
              C10614 -
          (C134971 * C125378 + (C126634 + C126633) * C125377 +
           (C126632 + C126631) * C125376) *
              C10615 +
          (C126643 * C125376 + (C126636 + C126635) * C125377 +
           (C134978 + C134979) * C125378) *
              C10616 -
          (((C186 * C134910 + C139465 * C134969) * C139301 +
            (C186 * C134909 + C139465 * C134968) * C63570) *
               C125378 +
           (C134979 + C134978) * C125377 + C134971 * C125376) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C9304 -
           ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
             C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                C139301 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C63570) *
               C139465 * C139426) *
              C822 +
          (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
             C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                C63570 +
            (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
             C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                C139301) *
               C139465 * C139426 -
           ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
             C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                C139301 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C63570) *
               C139465 * C9304) *
              C823 +
          (((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
             C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                C63570 +
            (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
             C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                C139301) *
               C139465 * C9304 -
           ((C125482 * C73392 + C125378 * C73500 + C125481 * C20986 +
             C125377 * C21204 + C125480 * C8595 + C125376 * C8761) *
                C139301 +
            (C125482 * C73391 + C125378 * C73499 + C125481 * C20984 +
             C125377 * C21202 + C125480 * C8592 + C125376 * C8758) *
                C63570) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C9304 -
           ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
             C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                C139301 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C63570) *
               C139465 * C139426) *
              C139346 * C5151 +
          (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
             C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                C63570 +
            (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
             C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                C139301) *
               C139465 * C139426 -
           ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
             C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                C139301 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C63570) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
             C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                C63570 +
            (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
             C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                C139301) *
               C139465 * C9304 -
           ((C125482 * C10621 + C125378 * C10739 + C125481 * C1773 +
             C125377 * C1997 + C125480 * C1768 + C125376 * C1992) *
                C139301 +
            (C125482 * C10618 + C125378 * C10736 + C125481 * C1765 +
             C125377 * C1989 + C125480 * C1760 + C125376 * C1984) *
                C63570) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
            C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
               C63570 +
           (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
            C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
               C139301) *
              C139465 * C10614 -
          ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
            C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
               C139301 +
           (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
            C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
               C63570) *
              C139465 * C10615 +
          ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
            C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
               C63570 +
           (C125480 * C1771 + C125376 * C1995 + C125481 * C10623 +
            C125377 * C10741 + C125482 * C43306 + C125378 * C43470) *
               C139301) *
              C139465 * C10616 -
          ((C125482 * C134910 + C125378 * C135030 + C125481 * C43306 +
            C125377 * C43470 + C125480 * C10623 + C125376 * C10741) *
               C139301 +
           (C125482 * C134909 + C125378 * C135029 + C125481 * C43304 +
            C125377 * C43468 + C125480 * C10620 + C125376 * C10738) *
               C63570) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyx[132] +=
        (-std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C9304 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139426) *
              C822 +
          (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
            (C130900 + C130901) * C125378) *
               C139426 -
           (C130902 * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C9304) *
              C823 +
          (((C64378 * C186 + C64379 * C139465) * C125376 +
            (C133140 + C133141) * C125377 + (C133142 + C133143) * C125378) *
               C9304 -
           (((C63570 * C73447 + C139301 * C73551) * C139465 +
             (C63570 * C73391 + C139301 * C73392) * C186) *
                C125378 +
            (C133143 + C133142) * C125377 + (C133141 + C133140) * C125376) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C9304 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139426) *
              C139346 * C5151 +
          (((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
            (C126811 + C126812) * C125378) *
               C139426 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C9304) *
              C139346 * C5152 +
          ((((C63570 * C108 + C139301 * C114) * C186 +
             (C63570 * C189 + C139301 * C362) * C139465) *
                C125376 +
            (C128179 + C128180) * C125377 + (C128187 + C128188) * C125378) *
               C9304 -
           (((C63570 * C10680 + C139301 * C10792) * C139465 +
             (C63570 * C10618 + C139301 * C10621) * C186) *
                C125378 +
            (C128188 + C128187) * C125377 + (C128180 + C128179) * C125376) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C186 +
            (C63570 * C187 + C139301 * C360) * C139465) *
               C125376 +
           (C126793 + C126794) * C125377 + C126807 * C125378) *
              C10614 -
          (C135083 * C125378 + (C126796 + C126795) * C125377 +
           (C126794 + C126793) * C125376) *
              C10615 +
          (C126807 * C125376 + (C126798 + C126797) * C125377 +
           (C135090 + C135091) * C125378) *
              C10616 -
          (((C63570 * C134968 + C139301 * C135081) * C139465 +
            (C63570 * C134909 + C139301 * C134910) * C186) *
               C125378 +
           (C135091 + C135090) * C125377 + C135083 * C125376) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C9304 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139426) *
              C822 +
          ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) *
               C139426 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C9304) *
              C823 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 *
                C125376 +
            C133218 * C125377 + C133225 * C125378) *
               C9304 -
           ((C416 * C73391 + C133221 + C133221 + C139465 * C73602) * C139301 *
                C125378 +
            C133225 * C125377 + C133218 * C125376) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C9304 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139426) *
              C139346 * C5151 +
          ((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
               C139426 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C9304) *
              C139346 * C5152 +
          ((C447 * C139301 * C125376 + C128263 * C125377 + C128264 * C125378) *
               C9304 -
           ((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139301 *
                C125378 +
            C128264 * C125377 + C128263 * C125376) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
           C126887 * C125377 + C126888 * C125378) *
              C10614 -
          (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) * C10615 +
          (C126888 * C125376 + C126889 * C125377 + C135149 * C125378) * C10616 -
          ((C416 * C134909 + C135145 + C135145 + C139465 * C135141) * C139301 *
               C125378 +
           C135149 * C125377 + C126889 * C125376) *
              C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C9304 -
           ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
             C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                C139465 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C186) *
               C139301 * C139426) *
              C822 +
          (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
             C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                C186 +
            (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
             C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                C139465) *
               C139301 * C139426 -
           ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
             C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                C139465 +
            (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
             C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                C186) *
               C139301 * C9304) *
              C823 +
          (((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
             C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                C186 +
            (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
             C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                C139465) *
               C139301 * C9304 -
           ((C125482 * C73447 + C125378 * C73656 + C125481 * C21100 +
             C125377 * C21530 + C125480 * C8678 + C125376 * C8995) *
                C139465 +
            (C125482 * C73391 + C125378 * C73499 + C125481 * C20984 +
             C125377 * C21202 + C125480 * C8592 + C125376 * C8758) *
                C186) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C9304 -
           ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
             C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                C139465 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C186) *
               C139301 * C139426) *
              C139346 * C5151 +
          (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
             C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                C186 +
            (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
             C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                C139465) *
               C139301 * C139426 -
           ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
             C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                C139465 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C186) *
               C139301 * C9304) *
              C139346 * C5152 +
          (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
             C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                C186 +
            (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
             C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                C139465) *
               C139301 * C9304 -
           ((C125482 * C10680 + C125378 * C10901 + C125481 * C1875 +
             C125377 * C2295 + C125480 * C1870 + C125376 * C2290) *
                C139465 +
            (C125482 * C10618 + C125378 * C10736 + C125481 * C1765 +
             C125377 * C1989 + C125480 * C1760 + C125376 * C1984) *
                C186) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
            C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
               C186 +
           (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
            C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
               C139465) *
              C139301 * C10614 -
          ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
            C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
               C139465 +
           (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
            C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
               C186) *
              C139301 * C10615 +
          ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
            C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
               C186 +
           (C125480 * C1873 + C125376 * C2293 + C125481 * C10682 +
            C125377 * C10903 + C125482 * C43388 + C125378 * C43695) *
               C139465) *
              C139301 * C10616 -
          ((C125482 * C134968 + C125378 * C135199 + C125481 * C43388 +
            C125377 * C43695 + C125480 * C10682 + C125376 * C10903) *
               C139465 +
           (C125482 * C134909 + C125378 * C135029 + C125481 * C43304 +
            C125377 * C43468 + C125480 * C10620 + C125376 * C10738) *
               C186) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezx[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C9304 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139426) *
              C822 +
          ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
            C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
               C139465 * C139426 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C9304) *
              C823 +
          ((C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
            C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
               C139465 * C9304 -
           ((C63570 * C73499 + C139301 * C73707) * C125378 +
            (C63570 * C73391 + C139301 * C73392) * C125482 + C69584 * C125377 +
            C69344 * C125481 + C67634 * C125376 + C67315 * C125480) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C9304 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139426) *
              C139346 * C5151 +
          ((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
            C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
               C139465 * C139426 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C63570 * C108 + C139301 * C114) * C125480 +
            (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
            C80217 * C125377 + C128185 * C125482 + C128415 * C125378) *
               C139465 * C9304 -
           ((C63570 * C10736 + C139301 * C10954) * C125378 +
            (C63570 * C10618 + C139301 * C10621) * C125482 + C128415 * C125377 +
            C128185 * C125481 + C80217 * C125376 + C79917 * C125480) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C63570 * C106 + C139301 * C112) * C125480 +
           (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
           C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
              C139465 * C10614 -
          (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
           C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
              C139465 * C10615 +
          (C78056 * C125480 + C78398 * C125376 + C89205 * C125481 +
           C89424 * C125377 + C135088 * C125482 + C135254 * C125378) *
              C139465 * C10616 -
          ((C63570 * C135029 + C139301 * C135250) * C125378 +
           (C63570 * C134909 + C139301 * C134910) * C125482 +
           C135254 * C125377 + C135088 * C125481 + C89424 * C125376 +
           C89205 * C125480) *
              C139465 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[132] +=
        (-std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C9304 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139426) *
              C822 +
          ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
            C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
               C139301 * C139426 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C9304) *
              C823 +
          (((C186 * C830 + C139465 * C940) * C125480 +
            (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
            C41371 * C125377 + C132988 * C125482 + C133450 * C125378) *
               C139301 * C9304 -
           ((C186 * C73499 + C139465 * C73758) * C125378 +
            (C186 * C73391 + C139465 * C73447) * C125482 + C133450 * C125377 +
            C132988 * C125481 + C41371 * C125376 + C40768 * C125480) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C9304 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139426) *
              C139346 * C5151 +
          ((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
            C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
               C139301 * C139426 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C9304) *
              C139346 * C5152 +
          ((C218 * C125480 + C653 * C125376 + C1904 * C125481 +
            C2495 * C125377 + C1909 * C125482 + C2498 * C125378) *
               C139301 * C9304 -
           ((C186 * C10736 + C139465 * C11007) * C125378 +
            (C186 * C10618 + C139465 * C10680) * C125482 + C2498 * C125377 +
            C1909 * C125481 + C2495 * C125376 + C1904 * C125480) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C186 * C106 + C139465 * C187) * C125480 +
           (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
           C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
              C139301 * C10614 -
          (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
           C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
              C139301 * C10615 +
          (C32135 * C125480 + C32875 * C125376 + C43398 * C125481 +
           C43841 * C125377 + C134976 * C125482 + C135308 * C125378) *
              C139301 * C10616 -
          ((C186 * C135029 + C139465 * C135304) * C125378 +
           (C186 * C134909 + C139465 * C134968) * C125482 + C135308 * C125377 +
           C134976 * C125481 + C43841 * C125376 + C43398 * C125480) *
              C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[132] +=
        (-std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C9304 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139426) *
              C822 +
          ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
            C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
            C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
               C139465 * C139301 * C139426 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C9304) *
              C823 +
          ((C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
            C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
            C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
               C139465 * C139301 * C9304 -
           (C125785 * C73391 + C133525 + C133525 + C125378 * C73809 +
            C125784 * C20984 + C133526 + C133526 + C125377 * C21839 +
            C125783 * C8592 + C133527 + C133527 + C125376 * C9226) *
               C139465 * C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C9304 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139426) *
              C139346 * C5151 +
          ((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
            C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
            C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
               C139465 * C139301 * C139426 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C9304) *
              C139346 * C5152 +
          ((C125783 * C108 + C125793 + C125793 + C125376 * C714 +
            C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
            C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
               C139465 * C139301 * C9304 -
           (C125785 * C10618 + C128564 + C128564 + C125378 * C11060 +
            C125784 * C1765 + C128565 + C128565 + C125377 * C2581 +
            C125783 * C1760 + C128566 + C128566 + C125376 * C2576) *
               C139465 * C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
           C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
           C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
              C139465 * C139301 * C10614 -
          (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
           C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
           C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
              C139465 * C139301 * C10615 +
          (C125783 * C1763 + C127195 + C127195 + C125376 * C2579 +
           C125784 * C10620 + C127196 + C127196 + C125377 * C11062 +
           C125785 * C43304 + C127197 + C127197 + C125378 * C43908) *
              C139465 * C139301 * C10616 -
          (C125785 * C134909 + C135360 + C135360 + C125378 * C135358 +
           C125784 * C43304 + C135361 + C135361 + C125377 * C43908 +
           C125783 * C10620 + C135362 + C135362 + C125376 * C11062) *
              C139465 * C139301 * C10617) *
         C139346 * C139327) /
            (p * q * std::sqrt(p + q));
    d2eexx[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C139562 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139563 +
           (C77705 * C125376 + C88983 * C125377 + C134918 * C125378) * C139465 *
               C12024) *
              C139346 * C139521 +
          ((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) * C139465 *
               C139563 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C139562 -
           ((C63569 * C43303 + C126553 + C126553 + C139301 * C43307) * C125378 +
            C126556 * C125377 + C77707 * C125376) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexy[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C139562 -
           (C134971 * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139563 +
           (C126643 * C125376 + (C126636 + C126635) * C125377 +
            (C134978 + C134979) * C125378) *
               C12024) *
              C139346 * C139521 +
          (((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
            (C126641 + C126642) * C125378) *
               C139563 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C139562 -
           (((C186 * C43305 + C139465 * C43389) * C139301 +
             (C186 * C43303 + C139465 * C43387) * C63570) *
                C125378 +
            (C126642 + C126641) * C125377 + C126644 * C125376) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexz[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C63570 +
            (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
             C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                C139301) *
               C139465 * C139562 -
           ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
             C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                C139301 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C63570) *
               C139465 * C139563 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C63570 +
            (C125480 * C1771 + C125376 * C1995 + C125481 * C10623 +
             C125377 * C10741 + C125482 * C43306 + C125378 * C43470) *
                C139301) *
               C139465 * C12024) *
              C139346 * C139521 +
          (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
             C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                C63570 +
            (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
             C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                C139301) *
               C139465 * C139563 -
           ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
             C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                C139301 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C63570) *
               C139465 * C139562 -
           ((C125482 * C43305 + C125378 * C43469 + C125481 * C10622 +
             C125377 * C10740 + C125480 * C1772 + C125376 * C1996) *
                C139301 +
            (C125482 * C43303 + C125378 * C43467 + C125481 * C10619 +
             C125377 * C10737 + C125480 * C1764 + C125376 * C1988) *
                C63570) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C139562 -
           (C135083 * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139563 +
           (C126807 * C125376 + (C126798 + C126797) * C125377 +
            (C135090 + C135091) * C125378) *
               C12024) *
              C139346 * C139521 +
          (((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
            (C126811 + C126812) * C125378) *
               C139563 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C139562 -
           (((C63570 * C43387 + C139301 * C43537) * C139465 +
             (C63570 * C43303 + C139301 * C43305) * C186) *
                C125378 +
            (C126812 + C126811) * C125377 + C126810 * C125376) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C139562 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139563 +
           (C126888 * C125376 + C126889 * C125377 + C135149 * C125378) *
               C12024) *
              C139346 * C139521 +
          ((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
               C139563 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C139562 -
           ((C416 * C43303 + C43623 + C43623 + C139465 * C43617) * C139301 *
                C125378 +
            C126892 * C125377 + C126891 * C125376) *
               C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
             C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                C186 +
            (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
             C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                C139465) *
               C139301 * C139562 -
           ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
             C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                C139465 +
            (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
             C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                C186) *
               C139301 * C139563 +
           ((C125480 * C1763 + C125376 * C1987 + C125481 * C10620 +
             C125377 * C10738 + C125482 * C43304 + C125378 * C43468) *
                C186 +
            (C125480 * C1873 + C125376 * C2293 + C125481 * C10682 +
             C125377 * C10903 + C125482 * C43388 + C125378 * C43695) *
                C139465) *
               C139301 * C12024) *
              C139346 * C139521 +
          (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
             C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                C186 +
            (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
             C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                C139465) *
               C139301 * C139563 -
           ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
             C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                C139465 +
            (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
             C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                C186) *
               C139301 * C139562 -
           ((C125482 * C43387 + C125378 * C43694 + C125481 * C10681 +
             C125377 * C10902 + C125480 * C1874 + C125376 * C2294) *
                C139465 +
            (C125482 * C43303 + C125378 * C43467 + C125481 * C10619 +
             C125377 * C10737 + C125480 * C1764 + C125376 * C1988) *
                C186) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezx[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C139562 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139563 +
           (C78056 * C125480 + C78398 * C125376 + C89205 * C125481 +
            C89424 * C125377 + C135088 * C125482 + C135254 * C125378) *
               C139465 * C12024) *
              C139346 * C139521 +
          ((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
            C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
               C139465 * C139563 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C139562 -
           ((C63570 * C43467 + C139301 * C43762) * C125378 +
            (C63570 * C43303 + C139301 * C43305) * C125482 + C127043 * C125377 +
            C126808 * C125481 + C78400 * C125376 + C78059 * C125480) *
               C139465 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezy[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C139562 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139563 +
           (C32135 * C125480 + C32875 * C125376 + C43398 * C125481 +
            C43841 * C125377 + C134976 * C125482 + C135308 * C125378) *
               C139301 * C12024) *
              C139346 * C139521 +
          ((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
            C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
               C139301 * C139563 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C139562 -
           ((C186 * C43467 + C139465 * C43836) * C125378 +
            (C186 * C43303 + C139465 * C43387) * C125482 + C32876 * C125377 +
            C32136 * C125481 + C2497 * C125376 + C1907 * C125480) *
               C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eezz[133] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C139562 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139563 +
           (C125783 * C1763 + C127195 + C127195 + C125376 * C2579 +
            C125784 * C10620 + C127196 + C127196 + C125377 * C11062 +
            C125785 * C43304 + C127197 + C127197 + C125378 * C43908) *
               C139465 * C139301 * C12024) *
              C139346 * C139521 +
          ((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
            C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
            C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
               C139465 * C139301 * C139563 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C139562 -
           (C125785 * C43303 + C127201 + C127201 + C125378 * C43907 +
            C125784 * C10619 + C127202 + C127202 + C125377 * C11061 +
            C125783 * C1764 + C127203 + C127203 + C125376 * C2580) *
               C139465 * C139301 * C12024) *
              C139346 * C139333)) /
        (p * q * std::sqrt(p + q));
    d2eexx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C9304 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139426) *
              C139346 * C5151 +
          ((C77706 * C125376 + C77707 * C125377 + C126556 * C125378) * C139465 *
               C139426 -
           (C77707 * C125378 + C77706 * C125377 +
            (C63569 * C107 + C63577 + C63577 + C139301 * C119) * C125376) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C63569 * C108 + C63578 + C63578 + C139301 * C120) * C125376 +
            C79616 * C125377 + C127952 * C125378) *
               C139465 * C9304 -
           ((C63569 * C10618 + C127949 + C127949 + C139301 * C10624) * C125378 +
            C127952 * C125377 + C79616 * C125376) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63569 * C106 + C63572 + C63572 + C139301 * C118) * C125376 +
            C77704 * C125377 + C77705 * C125378) *
               C139465 * C9304 -
           (C88983 * C125378 + C77705 * C125377 + C77704 * C125376) * C139465 *
               C139426) *
              C822 +
          ((C66989 * C125376 + C69093 * C125377 + C83277 * C125378) * C139465 *
               C139426 -
           (C69093 * C125378 + C66989 * C125377 + C64104 * C125376) * C139465 *
               C9304) *
              C823 +
          ((C64105 * C125376 + C66988 * C125377 + C69094 * C125378) * C139465 *
               C9304 -
           ((C63569 * C73391 + C73395 + C73395 + C139301 * C73393) * C125378 +
            C69094 * C125377 + C66988 * C125376) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C9304 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139426) *
              C139346 * C5151 +
          (((C126637 + C126638) * C125376 + (C126639 + C126640) * C125377 +
            (C126641 + C126642) * C125378) *
               C139426 -
           (C126644 * C125378 + (C126638 + C126637) * C125377 +
            (C217 * C139301 + C216 * C63570) * C125376) *
               C9304) *
              C139346 * C5152 +
          (((C218 * C63570 + C219 * C139301) * C125376 +
            (C128027 + C128028) * C125377 + (C128029 + C128030) * C125378) *
               C9304 -
           (((C186 * C10621 + C139465 * C10683) * C139301 +
             (C186 * C10618 + C139465 * C10680) * C63570) *
                C125378 +
            (C128030 + C128029) * C125377 + (C128028 + C128027) * C125376) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C186 * C106 + C139465 * C187) * C63570 +
             (C186 * C112 + C139465 * C193) * C139301) *
                C125376 +
            (C126631 + C126632) * C125377 + C126643 * C125378) *
               C9304 -
           ((C126635 + C126636) * C125378 + (C126634 + C126633) * C125377 +
            (C126632 + C126631) * C125376) *
               C139426) *
              C822 +
          (((C128763 + C128764) * C125376 + (C128765 + C128766) * C125377 +
            (C130750 + C130751) * C125378) *
               C139426 -
           (C130747 * C125378 + (C128764 + C128763) * C125377 +
            ((C186 * C837 + C139465 * C947) * C139301 +
             (C186 * C829 + C139465 * C939) * C63570) *
                C125376) *
               C9304) *
              C823 +
          ((((C186 * C830 + C139465 * C940) * C63570 +
             (C186 * C838 + C139465 * C948) * C139301) *
                C125376 +
            (C132982 + C132983) * C125377 + (C132990 + C132991) * C125378) *
               C9304 -
           (((C186 * C73392 + C139465 * C73448) * C139301 +
             (C186 * C73391 + C139465 * C73447) * C63570) *
                C125378 +
            (C132991 + C132990) * C125377 + (C132983 + C132982) * C125376) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eexz[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C9304 -
                      ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
                        C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                           C139301 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C63570) *
                          C139465 * C139426) *
                         C139346 * C5151 +
                     (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
                        C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                           C63570 +
                       (C125480 * C1769 + C125376 * C1993 + C125481 * C1772 +
                        C125377 * C1996 + C125482 * C10622 + C125378 * C10740) *
                           C139301) *
                          C139465 * C139426 -
                      ((C125482 * C1772 + C125378 * C1996 + C125481 * C1769 +
                        C125377 * C1993 + C125480 * C113 + C125376 * C281) *
                           C139301 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C63570) *
                          C139465 * C9304) *
                         C139346 * C5152 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C63570 +
                       (C125480 * C114 + C125376 * C282 + C125481 * C1768 +
                        C125377 * C1992 + C125482 * C1773 + C125378 * C1997) *
                           C139301) *
                          C139465 * C9304 -
                      ((C125482 * C10621 + C125378 * C10739 + C125481 * C1773 +
                        C125377 * C1997 + C125480 * C1768 + C125376 * C1992) *
                           C139301 +
                       (C125482 * C10618 + C125378 * C10736 + C125481 * C1765 +
                        C125377 * C1989 + C125480 * C1760 + C125376 * C1984) *
                           C63570) *
                          C139465 * C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C63570 +
                       (C125480 * C112 + C125376 * C280 + C125481 * C1770 +
                        C125377 * C1994 + C125482 * C1771 + C125378 * C1995) *
                           C139301) *
                          C139465 * C9304 -
                      ((C125482 * C10623 + C125378 * C10741 + C125481 * C1771 +
                        C125377 * C1995 + C125480 * C1770 + C125376 * C1994) *
                           C139301 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C63570) *
                          C139465 * C139426) *
                         C822 +
                     (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
                        C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                           C63570 +
                       (C125480 * C4163 + C125376 * C4397 + C125481 * C6328 +
                        C125377 * C6494 + C125482 * C26694 + C125378 * C26840) *
                           C139301) *
                          C139465 * C139426 -
                      ((C125482 * C6328 + C125378 * C6494 + C125481 * C4163 +
                        C125377 * C4397 + C125480 * C837 + C125376 * C1061) *
                           C139301 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C63570) *
                          C139465 * C9304) *
                         C823 +
                     (((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C63570 +
                       (C125480 * C838 + C125376 * C1062 + C125481 * C8595 +
                        C125377 * C8761 + C125482 * C20986 + C125378 * C21204) *
                           C139301) *
                          C139465 * C9304 -
                      ((C125482 * C73392 + C125378 * C73500 + C125481 * C20986 +
                        C125377 * C21204 + C125480 * C8595 + C125376 * C8761) *
                           C139301 +
                       (C125482 * C73391 + C125378 * C73499 + C125481 * C20984 +
                        C125377 * C21202 + C125480 * C8592 + C125376 * C8758) *
                           C63570) *
                          C139465 * C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eeyx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C9304 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139426) *
              C139346 * C5151 +
          (((C126799 + C126800) * C125376 + (C126801 + C126802) * C125377 +
            (C126811 + C126812) * C125378) *
               C139426 -
           (C126810 * C125378 + (C126800 + C126799) * C125377 +
            ((C63570 * C188 + C139301 * C361) * C139465 +
             (C63570 * C107 + C139301 * C113) * C186) *
                C125376) *
               C9304) *
              C139346 * C5152 +
          ((((C63570 * C108 + C139301 * C114) * C186 +
             (C63570 * C189 + C139301 * C362) * C139465) *
                C125376 +
            (C128179 + C128180) * C125377 + (C128187 + C128188) * C125378) *
               C9304 -
           (((C63570 * C10680 + C139301 * C10792) * C139465 +
             (C63570 * C10618 + C139301 * C10621) * C186) *
                C125378 +
            (C128188 + C128187) * C125377 + (C128180 + C128179) * C125376) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C63570 * C106 + C139301 * C112) * C186 +
             (C63570 * C187 + C139301 * C360) * C139465) *
                C125376 +
            (C126793 + C126794) * C125377 + C126807 * C125378) *
               C9304 -
           ((C126797 + C126798) * C125378 + (C126796 + C126795) * C125377 +
            (C126794 + C126793) * C125376) *
               C139426) *
              C822 +
          (((C128967 + C128968) * C125376 + (C128969 + C128970) * C125377 +
            (C130900 + C130901) * C125378) *
               C139426 -
           (C130902 * C125378 + (C128968 + C128967) * C125377 +
            (C64377 * C139465 + C64376 * C186) * C125376) *
               C9304) *
              C823 +
          (((C64378 * C186 + C64379 * C139465) * C125376 +
            (C133140 + C133141) * C125377 + (C133142 + C133143) * C125378) *
               C9304 -
           (((C63570 * C73447 + C139301 * C73551) * C139465 +
             (C63570 * C73391 + C139301 * C73392) * C186) *
                C125378 +
            (C133143 + C133142) * C125377 + (C133141 + C133140) * C125376) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C9304 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139426) *
              C139346 * C5151 +
          ((C126890 * C125376 + C126891 * C125377 + C126892 * C125378) *
               C139426 -
           (C126891 * C125378 + C126890 * C125377 + C446 * C139301 * C125376) *
               C9304) *
              C139346 * C5152 +
          ((C447 * C139301 * C125376 + C128263 * C125377 + C128264 * C125378) *
               C9304 -
           ((C416 * C10618 + C10849 + C10849 + C139465 * C10845) * C139301 *
                C125378 +
            C128264 * C125377 + C128263 * C125376) *
               C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C416 * C106 + C424 + C424 + C139465 * C417) * C139301 * C125376 +
            C126887 * C125377 + C126888 * C125378) *
               C9304 -
           (C126889 * C125378 + C126888 * C125377 + C126887 * C125376) *
               C139426) *
              C822 +
          ((C129073 * C125376 + C129074 * C125377 + C130983 * C125378) *
               C139426 -
           (C129074 * C125378 + C129073 * C125377 +
            (C416 * C829 + C1262 + C1262 + C139465 * C1249) * C139301 *
                C125376) *
               C9304) *
              C823 +
          (((C416 * C830 + C1263 + C1263 + C139465 * C1250) * C139301 *
                C125376 +
            C133218 * C125377 + C133225 * C125378) *
               C9304 -
           ((C416 * C73391 + C133221 + C133221 + C139465 * C73602) * C139301 *
                C125378 +
            C133225 * C125377 + C133218 * C125376) *
               C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eeyz[134] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C9304 -
                      ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
                        C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                           C139465 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C186) *
                          C139301 * C139426) *
                         C139346 * C5151 +
                     (((C125480 * C1761 + C125376 * C1985 + C125481 * C1764 +
                        C125377 * C1988 + C125482 * C10619 + C125378 * C10737) *
                           C186 +
                       (C125480 * C1871 + C125376 * C2291 + C125481 * C1874 +
                        C125377 * C2294 + C125482 * C10681 + C125378 * C10902) *
                           C139465) *
                          C139301 * C139426 -
                      ((C125482 * C1874 + C125378 * C2294 + C125481 * C1871 +
                        C125377 * C2291 + C125480 * C188 + C125376 * C500) *
                           C139465 +
                       (C125482 * C1764 + C125378 * C1988 + C125481 * C1761 +
                        C125377 * C1985 + C125480 * C107 + C125376 * C275) *
                           C186) *
                          C139301 * C9304) *
                         C139346 * C5152 +
                     (((C125480 * C108 + C125376 * C276 + C125481 * C1760 +
                        C125377 * C1984 + C125482 * C1765 + C125378 * C1989) *
                           C186 +
                       (C125480 * C189 + C125376 * C501 + C125481 * C1870 +
                        C125377 * C2290 + C125482 * C1875 + C125378 * C2295) *
                           C139465) *
                          C139301 * C9304 -
                      ((C125482 * C10680 + C125378 * C10901 + C125481 * C1875 +
                        C125377 * C2295 + C125480 * C1870 + C125376 * C2290) *
                           C139465 +
                       (C125482 * C10618 + C125378 * C10736 + C125481 * C1765 +
                        C125377 * C1989 + C125480 * C1760 + C125376 * C1984) *
                           C186) *
                          C139301 * C139426) *
                         C139346 * C5153)) /
                       (p * q * std::sqrt(p + q)) -
                   (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                    ((((C125480 * C106 + C125376 * C274 + C125481 * C1762 +
                        C125377 * C1986 + C125482 * C1763 + C125378 * C1987) *
                           C186 +
                       (C125480 * C187 + C125376 * C499 + C125481 * C1872 +
                        C125377 * C2292 + C125482 * C1873 + C125378 * C2293) *
                           C139465) *
                          C139301 * C9304 -
                      ((C125482 * C10682 + C125378 * C10903 + C125481 * C1873 +
                        C125377 * C2293 + C125480 * C1872 + C125376 * C2292) *
                           C139465 +
                       (C125482 * C10620 + C125378 * C10738 + C125481 * C1763 +
                        C125377 * C1987 + C125480 * C1762 + C125376 * C1986) *
                           C186) *
                          C139301 * C139426) *
                         C822 +
                     (((C125480 * C4159 + C125376 * C4393 + C125481 * C6325 +
                        C125377 * C6491 + C125482 * C26692 + C125378 * C26838) *
                           C186 +
                       (C125480 * C4275 + C125376 * C4729 + C125481 * C6411 +
                        C125377 * C6728 + C125482 * C26768 + C125378 * C27048) *
                           C139465) *
                          C139301 * C139426 -
                      ((C125482 * C6411 + C125378 * C6728 + C125481 * C4275 +
                        C125377 * C4729 + C125480 * C939 + C125376 * C1359) *
                           C139465 +
                       (C125482 * C6325 + C125378 * C6491 + C125481 * C4159 +
                        C125377 * C4393 + C125480 * C829 + C125376 * C1053) *
                           C186) *
                          C139301 * C9304) *
                         C823 +
                     (((C125480 * C830 + C125376 * C1054 + C125481 * C8592 +
                        C125377 * C8758 + C125482 * C20984 + C125378 * C21202) *
                           C186 +
                       (C125480 * C940 + C125376 * C1360 + C125481 * C8678 +
                        C125377 * C8995 + C125482 * C21100 + C125378 * C21530) *
                           C139465) *
                          C139301 * C9304 -
                      ((C125482 * C73447 + C125378 * C73656 + C125481 * C21100 +
                        C125377 * C21530 + C125480 * C8678 + C125376 * C8995) *
                           C139465 +
                       (C125482 * C73391 + C125378 * C73499 + C125481 * C20984 +
                        C125377 * C21202 + C125480 * C8592 + C125376 * C8758) *
                           C186) *
                          C139301 * C139426) *
                         C824) *
                    C139327) /
                       (p * q * std::sqrt(p + q));
    d2eezx[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C9304 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139426) *
              C139346 * C5151 +
          ((C78057 * C125480 + C78399 * C125376 + C78059 * C125481 +
            C78400 * C125377 + C126808 * C125482 + C127043 * C125378) *
               C139465 * C139426 -
           (C78400 * C125378 + C78059 * C125482 + C78399 * C125377 +
            C78057 * C125481 + (C63570 * C275 + C139301 * C578) * C125376 +
            (C63570 * C107 + C139301 * C113) * C125480) *
               C139465 * C9304) *
              C139346 * C5152 +
          (((C63570 * C108 + C139301 * C114) * C125480 +
            (C63570 * C276 + C139301 * C579) * C125376 + C79917 * C125481 +
            C80217 * C125377 + C128185 * C125482 + C128415 * C125378) *
               C139465 * C9304 -
           ((C63570 * C10736 + C139301 * C10954) * C125378 +
            (C63570 * C10618 + C139301 * C10621) * C125482 + C128415 * C125377 +
            C128185 * C125481 + C80217 * C125376 + C79917 * C125480) *
               C139465 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C63570 * C106 + C139301 * C112) * C125480 +
            (C63570 * C274 + C139301 * C577) * C125376 + C78053 * C125481 +
            C78397 * C125377 + C78056 * C125482 + C78398 * C125378) *
               C139465 * C9304 -
           (C89424 * C125378 + C89205 * C125482 + C78398 * C125377 +
            C78056 * C125481 + C78397 * C125376 + C78053 * C125480) *
               C139465 * C139426) *
              C822 +
          ((C67317 * C125480 + C67635 * C125376 + C69342 * C125481 +
            C69583 * C125377 + C83605 * C125482 + C83924 * C125378) *
               C139465 * C139426 -
           (C69583 * C125378 + C69342 * C125482 + C67635 * C125377 +
            C67317 * C125481 + C64640 * C125376 + C64376 * C125480) *
               C139465 * C9304) *
              C823 +
          ((C64378 * C125480 + C64641 * C125376 + C67315 * C125481 +
            C67634 * C125377 + C69344 * C125482 + C69584 * C125378) *
               C139465 * C9304 -
           ((C63570 * C73499 + C139301 * C73707) * C125378 +
            (C63570 * C73391 + C139301 * C73392) * C125482 + C69584 * C125377 +
            C69344 * C125481 + C67634 * C125376 + C67315 * C125480) *
               C139465 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezy[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C9304 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139426) *
              C139346 * C5151 +
          ((C1906 * C125480 + C2496 * C125376 + C1907 * C125481 +
            C2497 * C125377 + C32136 * C125482 + C32876 * C125378) *
               C139301 * C139426 -
           (C2497 * C125378 + C1907 * C125482 + C2496 * C125377 +
            C1906 * C125481 + C652 * C125376 + C216 * C125480) *
               C139301 * C9304) *
              C139346 * C5152 +
          ((C218 * C125480 + C653 * C125376 + C1904 * C125481 +
            C2495 * C125377 + C1909 * C125482 + C2498 * C125378) *
               C139301 * C9304 -
           ((C186 * C10736 + C139465 * C11007) * C125378 +
            (C186 * C10618 + C139465 * C10680) * C125482 + C2498 * C125377 +
            C1909 * C125481 + C2495 * C125376 + C1904 * C125480) *
               C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C186 * C106 + C139465 * C187) * C125480 +
            (C186 * C274 + C139465 * C633) * C125376 + C32132 * C125481 +
            C32874 * C125377 + C32135 * C125482 + C32875 * C125378) *
               C139301 * C9304 -
           (C43841 * C125378 + C43398 * C125482 + C32875 * C125377 +
            C32135 * C125481 + C32874 * C125376 + C32132 * C125480) *
               C139301 * C139426) *
              C822 +
          ((C35150 * C125480 + C35975 * C125376 + C37808 * C125481 +
            C38411 * C125377 + C130748 * C125482 + C131208 * C125378) *
               C139301 * C139426 -
           (C38411 * C125378 + C37808 * C125482 + C35975 * C125377 +
            C35150 * C125481 + (C186 * C1053 + C139465 * C1543) * C125376 +
            (C186 * C829 + C139465 * C939) * C125480) *
               C139301 * C9304) *
              C823 +
          (((C186 * C830 + C139465 * C940) * C125480 +
            (C186 * C1054 + C139465 * C1544) * C125376 + C40768 * C125481 +
            C41371 * C125377 + C132988 * C125482 + C133450 * C125378) *
               C139301 * C9304 -
           ((C186 * C73499 + C139465 * C73758) * C125378 +
            (C186 * C73391 + C139465 * C73447) * C125482 + C133450 * C125377 +
            C132988 * C125481 + C41371 * C125376 + C40768 * C125480) *
               C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
    d2eezz[134] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C9304 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139426) *
              C139346 * C5151 +
          ((C125783 * C1761 + C127198 + C127198 + C125376 * C2577 +
            C125784 * C1764 + C127199 + C127199 + C125377 * C2580 +
            C125785 * C10619 + C127200 + C127200 + C125378 * C11061) *
               C139465 * C139301 * C139426 -
           (C125785 * C1764 + C125790 + C125790 + C125378 * C2580 +
            C125784 * C1761 + C125791 + C125791 + C125377 * C2577 +
            C125783 * C107 + C125792 + C125792 + C125376 * C713) *
               C139465 * C139301 * C9304) *
              C139346 * C5152 +
          ((C125783 * C108 + C125793 + C125793 + C125376 * C714 +
            C125784 * C1760 + C125794 + C125794 + C125377 * C2576 +
            C125785 * C1765 + C125795 + C125795 + C125378 * C2581) *
               C139465 * C139301 * C9304 -
           (C125785 * C10618 + C128564 + C128564 + C125378 * C11060 +
            C125784 * C1765 + C128565 + C128565 + C125377 * C2581 +
            C125783 * C1760 + C128566 + C128566 + C125376 * C2576) *
               C139465 * C139301 * C139426) *
              C139346 * C5153)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C125783 * C106 + C125787 + C125787 + C125376 * C712 +
            C125784 * C1762 + C125788 + C125788 + C125377 * C2578 +
            C125785 * C1763 + C125789 + C125789 + C125378 * C2579) *
               C139465 * C139301 * C9304 -
           (C125785 * C10620 + C127192 + C127192 + C125378 * C11062 +
            C125784 * C1763 + C127193 + C127193 + C125377 * C2579 +
            C125783 * C1762 + C127194 + C127194 + C125376 * C2578) *
               C139465 * C139301 * C139426) *
              C822 +
          ((C125783 * C4159 + C129469 + C129469 + C125376 * C5055 +
            C125784 * C6325 + C129470 + C129470 + C125377 * C6959 +
            C125785 * C26692 + C129471 + C129471 + C125378 * C27252) *
               C139465 * C139301 * C139426 -
           (C125785 * C6325 + C126465 + C126465 + C125378 * C6959 +
            C125784 * C4159 + C126466 + C126466 + C125377 * C5055 +
            C125783 * C829 + C126467 + C126467 + C125376 * C1645) *
               C139465 * C139301 * C9304) *
              C823 +
          ((C125783 * C830 + C126468 + C126468 + C125376 * C1646 +
            C125784 * C8592 + C126469 + C126469 + C125377 * C9226 +
            C125785 * C20984 + C126470 + C126470 + C125378 * C21839) *
               C139465 * C139301 * C9304 -
           (C125785 * C73391 + C133525 + C133525 + C125378 * C73809 +
            C125784 * C20984 + C133526 + C133526 + C125377 * C21839 +
            C125783 * C8592 + C133527 + C133527 + C125376 * C9226) *
               C139465 * C139301 * C139426) *
              C824) *
         C139327) /
            (p * q * std::sqrt(p + q));
}
